void sub_20C168330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_20BDF3648((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20C168388(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB8BDBLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB8BDBLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C168404(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C168418(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C168518(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C1684E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C168518(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB8B9ALL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB8B9ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C168594(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C1685A8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredFuncNameE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredFuncNameE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C168A04(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C168A58(a1, (uint64_t)v37);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C168920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1689B0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C169074(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C168A04@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C168D54(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C168A58(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t *v39;

  v4 = sub_20C168EE4(a1, 1);
  if (v5)
  {
    sub_20C166ECC(a1, (uint64_t)v33);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v39 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v35 = v15;
      v36 = v16;
      v38 = &v15[24 * v14];
      v17 = *(_OWORD *)v33;
      *((_QWORD *)v16 + 2) = v34;
      *(_OWORD *)v16 = v17;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v37 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
    }
    else
    {
      v9 = *(_OWORD *)v33;
      *(_QWORD *)(v8 + 16) = v34;
      *(_OWORD *)v8 = v9;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C168A58(__p, a1);
    v19 = v4[9];
    v18 = v4[10];
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v39 = v4 + 10;
      if (v24)
        v25 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v24);
      else
        v25 = 0;
      v26 = &v25[24 * v21];
      v35 = v25;
      v36 = v26;
      v38 = &v25[24 * v24];
      v27 = *(_OWORD *)__p;
      *((_QWORD *)v26 + 2) = v32;
      *(_OWORD *)v26 = v27;
      __p[1] = 0;
      v32 = 0;
      __p[0] = 0;
      v37 = v26 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v28 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
      v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 16) = v32;
      *(_OWORD *)v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v30 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_20C168CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_20BDF3648((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C168D54(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C168E54(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C168E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C168E54(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB8D66 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB8D66 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C168ED0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C168EE4(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C168FE4(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C168FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C168FE4(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB8DC1 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB8DC1 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C169060(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C169074(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C169174(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C169144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C169174(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB8E34 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB8E34 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C1691F0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C169204(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  char v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  void *v54[2];
  uint64_t v55;
  void *v56[2];
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  uint64_t v60;
  void *v61[2];
  _QWORD *v62;
  void *__p[2];
  _QWORD *v64;
  char *v65;
  _QWORD v66[4];

  sub_20C16E92C(v61);
  LOBYTE(v58[0]) = 3;
  *(_OWORD *)__p = *(_OWORD *)v61;
  v64 = v62;
  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  LOBYTE(v65) = 3;
  memset(v66, 0, 24);
  v59 = 0;
  v60 = 0;
  v58[1] = 0;
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v6 = v5;
  v56[0] = v66;
  sub_20BDE5038((void ***)v56);
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
  v56[0] = &v58[1];
  sub_20BDE5038((void ***)v56);
  if (SHIBYTE(v62) < 0)
    operator delete(v61[0]);
  if (v6)
  {
    sub_20C169818(a1, (uint64_t)v58);
    v7 = v4[10];
    v8 = v4 + 8;
    v9 = v4[9];
    if (v9 >= v7)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v8) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v8) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      v66[0] = v4 + 10;
      if (v15)
        v16 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      __p[0] = v16;
      __p[1] = v17;
      v65 = &v16[24 * v15];
      v18 = *(_OWORD *)v58;
      *((_QWORD *)v17 + 2) = v59;
      *(_OWORD *)v17 = v18;
      v58[1] = 0;
      v59 = 0;
      v58[0] = 0;
      v64 = v17 + 24;
      sub_20BDF34C0(v4 + 8, __p);
      v11 = v4[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v10 = *(_OWORD *)v58;
      *(_QWORD *)(v9 + 16) = v59;
      *(_OWORD *)v9 = v10;
      v58[1] = 0;
      v59 = 0;
      v58[0] = 0;
      v11 = v9 + 24;
      v4[9] = v9 + 24;
    }
    v4[9] = v11;
    sub_20C16B7DC(a1, (uint64_t)v61);
    v19 = v4[9];
    v20 = v4[10];
    if (v19 >= v20)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v8) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v8) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      v66[0] = v4 + 10;
      if (v26)
        v27 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v26);
      else
        v27 = 0;
      v28 = &v27[24 * v23];
      __p[0] = v27;
      __p[1] = v28;
      v65 = &v27[24 * v26];
      v29 = *(_OWORD *)v61;
      *((_QWORD *)v28 + 2) = v62;
      *(_OWORD *)v28 = v29;
      v61[1] = 0;
      v62 = 0;
      v61[0] = 0;
      v64 = v28 + 24;
      sub_20BDF34C0(v4 + 8, __p);
      v22 = v4[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v21 = *(_OWORD *)v61;
      *(_QWORD *)(v19 + 16) = v62;
      *(_OWORD *)v19 = v21;
      v61[1] = 0;
      v62 = 0;
      v61[0] = 0;
      v22 = v19 + 24;
      v4[9] = v19 + 24;
    }
    v4[9] = v22;
    sub_20C16BBE4(a1, (uint64_t)v56);
    v30 = v4[9];
    v31 = v4[10];
    if (v30 >= v31)
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v8) >> 3);
      v35 = v34 + 1;
      if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *v8) >> 3);
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x555555555555555)
        v37 = 0xAAAAAAAAAAAAAAALL;
      else
        v37 = v35;
      v66[0] = v4 + 10;
      if (v37)
        v38 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v37);
      else
        v38 = 0;
      v39 = &v38[24 * v34];
      __p[0] = v38;
      __p[1] = v39;
      v65 = &v38[24 * v37];
      v40 = *(_OWORD *)v56;
      *((_QWORD *)v39 + 2) = v57;
      *(_OWORD *)v39 = v40;
      v56[1] = 0;
      v57 = 0;
      v56[0] = 0;
      v64 = v39 + 24;
      sub_20BDF34C0(v4 + 8, __p);
      v33 = v4[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v32 = *(_OWORD *)v56;
      *(_QWORD *)(v30 + 16) = v57;
      *(_OWORD *)v30 = v32;
      v56[1] = 0;
      v57 = 0;
      v56[0] = 0;
      v33 = v30 + 24;
      v4[9] = v30 + 24;
    }
    v4[9] = v33;
    sub_20C16C734(a1, (uint64_t)v54);
    v42 = v4[9];
    v41 = v4[10];
    if (v42 >= v41)
    {
      v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v8) >> 3);
      v45 = v44 + 1;
      if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v8) >> 3);
      if (2 * v46 > v45)
        v45 = 2 * v46;
      if (v46 >= 0x555555555555555)
        v47 = 0xAAAAAAAAAAAAAAALL;
      else
        v47 = v45;
      v66[0] = v4 + 10;
      if (v47)
        v48 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v47);
      else
        v48 = 0;
      v49 = &v48[24 * v44];
      __p[0] = v48;
      __p[1] = v49;
      v65 = &v48[24 * v47];
      v50 = *(_OWORD *)v54;
      *((_QWORD *)v49 + 2) = v55;
      *(_OWORD *)v49 = v50;
      v54[1] = 0;
      v55 = 0;
      v54[0] = 0;
      v64 = v49 + 24;
      sub_20BDF34C0(v4 + 8, __p);
      v51 = v4[9];
      sub_20BDF3648((uint64_t)__p);
      v52 = SHIBYTE(v55);
      v4[9] = v51;
      if (v52 < 0)
        operator delete(v54[0]);
    }
    else
    {
      v43 = *(_OWORD *)v54;
      *(_QWORD *)(v42 + 16) = v55;
      *(_OWORD *)v42 = v43;
      v4[9] = v42 + 24;
    }
    if (SHIBYTE(v57) < 0)
      operator delete(v56[0]);
    if (SHIBYTE(v62) < 0)
      operator delete(v61[0]);
    if (SHIBYTE(v59) < 0)
      operator delete(v58[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v53 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v53;
  }
}

void sub_20C169740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  sub_20BDF3648((uint64_t)&a35);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a34 < 0)
    operator delete(a29);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void sub_20C1697F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20C165D84((uint64_t)va1);
  sub_20BDE5038((void ***)va);
  if (SHIBYTE(v14) < 0)
    JUMPOUT(0x20C1697E4);
  JUMPOUT(0x20C1697E8);
}

void sub_20C169818(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t *v5;
  char v6;
  char v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t *v21;
  char v22;
  char v23;
  char *v24;
  uint64_t *v25;
  char v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  char *v64;
  uint64_t *v65;
  char v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  __int128 v79;
  char *v80;
  char v81;
  char v82;
  char *v83;
  uint64_t *v84;
  char v85;
  char v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  __int128 v98;
  char *v99;
  uint64_t *v100;
  char v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  __int128 v140;
  char *v141;
  uint64_t *v142;
  char v143;
  char v144;
  char *v145;
  uint64_t *v146;
  char v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  __int128 v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t v160;
  int v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t v164;
  __int128 v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  __int128 v173;
  unint64_t v174;
  unint64_t v175;
  __int128 v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  __int128 v183;
  uint64_t v184;
  int v185;
  unint64_t v186;
  unint64_t v187;
  __int128 v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  __int128 v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  __int128 v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  __int128 v207;
  uint64_t v208;
  int v209;
  unint64_t v210;
  unint64_t v211;
  __int128 v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  __int128 v219;
  uint64_t v220;
  int v221;
  unint64_t v222;
  unint64_t v223;
  __int128 v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  __int128 v231;
  uint64_t v232;
  int v233;
  __int128 v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  void *v241[2];
  uint64_t v242;
  void *v243[2];
  uint64_t v244;
  void *v245[2];
  uint64_t v246;
  void *__dst[2];
  uint64_t v248;
  void *v249[2];
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  void *v253[2];
  uint64_t v254;
  void *__p[2];
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  char *v263;
  __int128 v264;
  char *v265;
  char *v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  void **v270[3];

  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredArgFloatE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    v4 = v3;
    sub_20BDDC0E4(&v262, v3);
    free(v4);
  }
  else
  {
    sub_20BDDC0E4(&v262, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredArgFloatE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v259) = 2;
  v264 = v262;
  v265 = v263;
  v262 = 0uLL;
  v263 = 0;
  LOBYTE(v266) = 2;
  v268 = 0;
  v269 = 0;
  v267 = 0;
  v260 = 0;
  v261 = 0;
  *((_QWORD *)&v259 + 1) = 0;
  v5 = sub_20C165DCC(a1, (const void **)&v264, &v264);
  v7 = v6;
  *(_QWORD *)&v257 = &v267;
  sub_20BDE5038((void ***)&v257);
  if (SHIBYTE(v265) < 0)
    operator delete((void *)v264);
  *(_QWORD *)&v257 = (char *)&v259 + 8;
  sub_20BDE5038((void ***)&v257);
  if (SHIBYTE(v263) < 0)
    operator delete((void *)v262);
  if (v7)
  {
    sub_20C16E9B4(a1, (uint64_t)v243);
    v8 = v5[10];
    v9 = v5 + 8;
    v10 = v5[9];
    if (v10 >= v8)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v9) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v9) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      v267 = v5 + 10;
      if (v16)
        v17 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v16);
      else
        v17 = 0;
      v18 = &v17[24 * v13];
      *(_QWORD *)&v264 = v17;
      *((_QWORD *)&v264 + 1) = v18;
      v266 = &v17[24 * v16];
      v19 = *(_OWORD *)v243;
      *((_QWORD *)v18 + 2) = v244;
      *(_OWORD *)v18 = v19;
      v243[1] = 0;
      v244 = 0;
      v243[0] = 0;
      v265 = v18 + 24;
      sub_20BDF34C0(v5 + 8, &v264);
      v12 = v5[9];
      sub_20BDF3648((uint64_t)&v264);
    }
    else
    {
      v11 = *(_OWORD *)v243;
      *(_QWORD *)(v10 + 16) = v244;
      *(_OWORD *)v10 = v11;
      v243[1] = 0;
      v244 = 0;
      v243[0] = 0;
      v12 = v10 + 24;
      v5[9] = v10 + 24;
    }
    v5[9] = v12;
    v20 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13InfENS0_3seqIJNS3_6DigitsENS0_12if_then_elseINS3_4FracENS0_3optIJNS3_3ExpEEEESA_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v20)
    {
      sub_20BDDC0E4(&v262, v20);
      free(v20);
    }
    else
    {
      sub_20BDDC0E4(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13InfENS0_3seqIJNS3_6DigitsENS0_12if_then_elseINS3_4FracENS0_3optIJNS3_3ExpEEEESA_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v259) = 3;
    v264 = v262;
    v265 = v263;
    v262 = 0uLL;
    v263 = 0;
    LOBYTE(v266) = 3;
    v268 = 0;
    v269 = 0;
    v267 = 0;
    v260 = 0;
    v261 = 0;
    *((_QWORD *)&v259 + 1) = 0;
    v21 = sub_20C165DCC(a1, (const void **)&v264, &v264);
    v23 = v22;
    *(_QWORD *)&v257 = &v267;
    sub_20BDE5038((void ***)&v257);
    if (SHIBYTE(v265) < 0)
      operator delete((void *)v264);
    *(_QWORD *)&v257 = (char *)&v259 + 8;
    sub_20BDE5038((void ***)&v257);
    if (SHIBYTE(v263) < 0)
      operator delete((void *)v262);
    if (v23)
    {
      v24 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13InfE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v24)
      {
        sub_20BDDC0E4(&v262, v24);
        free(v24);
      }
      else
      {
        sub_20BDDC0E4(&v262, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13InfE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v259) = 2;
      v264 = v262;
      v265 = v263;
      v262 = 0uLL;
      v263 = 0;
      LOBYTE(v266) = 2;
      v268 = 0;
      v269 = 0;
      v267 = 0;
      v260 = 0;
      v261 = 0;
      *((_QWORD *)&v259 + 1) = 0;
      v25 = sub_20C165DCC(a1, (const void **)&v264, &v264);
      v27 = v26;
      *(_QWORD *)&v257 = &v267;
      sub_20BDE5038((void ***)&v257);
      if (SHIBYTE(v265) < 0)
        operator delete((void *)v264);
      *(_QWORD *)&v257 = (char *)&v259 + 8;
      sub_20BDE5038((void ***)&v257);
      v9 = v5 + 8;
      if (SHIBYTE(v263) < 0)
        operator delete((void *)v262);
      if (v27)
      {
        sub_20C16EDB8(a1, (uint64_t)&v259);
        v28 = v25 + 8;
        v29 = v25[10];
        v30 = v25[9];
        if (v30 >= v29)
        {
          v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v28) >> 3);
          v34 = v33 + 1;
          if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v28) >> 3);
          if (2 * v35 > v34)
            v34 = 2 * v35;
          if (v35 >= 0x555555555555555)
            v36 = 0xAAAAAAAAAAAAAAALL;
          else
            v36 = v34;
          v267 = v25 + 10;
          if (v36)
            v37 = (char *)sub_20BDE4FF4((uint64_t)(v25 + 10), v36);
          else
            v37 = 0;
          v38 = &v37[24 * v33];
          *(_QWORD *)&v264 = v37;
          *((_QWORD *)&v264 + 1) = v38;
          v266 = &v37[24 * v36];
          v39 = v259;
          *((_QWORD *)v38 + 2) = v260;
          *(_OWORD *)v38 = v39;
          v260 = 0;
          v259 = 0uLL;
          v265 = v38 + 24;
          sub_20BDF34C0(v25 + 8, &v264);
          v32 = v25[9];
          sub_20BDF3648((uint64_t)&v264);
        }
        else
        {
          v31 = v259;
          *(_QWORD *)(v30 + 16) = v260;
          *(_OWORD *)v30 = v31;
          v260 = 0;
          v259 = 0uLL;
          v32 = v30 + 24;
          v25[9] = v30 + 24;
        }
        v25[9] = v32;
        sub_20C166A8C(a1, (uint64_t)&v262);
        v41 = v25[9];
        v40 = v25[10];
        if (v41 >= v40)
        {
          v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v28) >> 3);
          v44 = v43 + 1;
          if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v28) >> 3);
          if (2 * v45 > v44)
            v44 = 2 * v45;
          if (v45 >= 0x555555555555555)
            v46 = 0xAAAAAAAAAAAAAAALL;
          else
            v46 = v44;
          v267 = v25 + 10;
          if (v46)
            v47 = (char *)sub_20BDE4FF4((uint64_t)(v25 + 10), v46);
          else
            v47 = 0;
          v48 = &v47[24 * v43];
          *(_QWORD *)&v264 = v47;
          *((_QWORD *)&v264 + 1) = v48;
          v266 = &v47[24 * v46];
          v49 = v262;
          *((_QWORD *)v48 + 2) = v263;
          *(_OWORD *)v48 = v49;
          v263 = 0;
          v262 = 0uLL;
          v265 = v48 + 24;
          sub_20BDF34C0(v25 + 8, &v264);
          v50 = v25[9];
          sub_20BDF3648((uint64_t)&v264);
          v51 = SHIBYTE(v263);
          v25[9] = v50;
          v9 = v5 + 8;
          if (v51 < 0)
            operator delete((void *)v262);
        }
        else
        {
          v42 = v262;
          *(_QWORD *)(v41 + 16) = v263;
          *(_OWORD *)v41 = v42;
          v25[9] = v41 + 24;
          v9 = v5 + 8;
        }
        if (SHIBYTE(v260) < 0)
          operator delete((void *)v259);
      }
      if (*((char *)v25 + 55) < 0)
      {
        sub_20BDDBFAC(__dst, (void *)v25[4], v25[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v25 + 2);
        v248 = v25[6];
      }
      v52 = v21 + 8;
      v53 = v21[10];
      v54 = v21[9];
      v237 = v21 + 8;
      if (v54 >= v53)
      {
        v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - *v52) >> 3);
        v58 = v57 + 1;
        if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *v52) >> 3);
        if (2 * v59 > v58)
          v58 = 2 * v59;
        if (v59 >= 0x555555555555555)
          v60 = 0xAAAAAAAAAAAAAAALL;
        else
          v60 = v58;
        v267 = v21 + 10;
        if (v60)
          v61 = (char *)sub_20BDE4FF4((uint64_t)(v21 + 10), v60);
        else
          v61 = 0;
        v62 = &v61[24 * v57];
        *(_QWORD *)&v264 = v61;
        *((_QWORD *)&v264 + 1) = v62;
        v266 = &v61[24 * v60];
        v63 = *(_OWORD *)__dst;
        *((_QWORD *)v62 + 2) = v248;
        *(_OWORD *)v62 = v63;
        __dst[1] = 0;
        v248 = 0;
        __dst[0] = 0;
        v265 = v62 + 24;
        sub_20BDF34C0(v21 + 8, &v264);
        v56 = v21[9];
        sub_20BDF3648((uint64_t)&v264);
      }
      else
      {
        v55 = *(_OWORD *)__dst;
        *(_QWORD *)(v54 + 16) = v248;
        *(_OWORD *)v54 = v55;
        __dst[1] = 0;
        v248 = 0;
        __dst[0] = 0;
        v56 = v54 + 24;
        v21[9] = v54 + 24;
      }
      v21[9] = v56;
      v64 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsENS0_12if_then_elseINS3_4FracENS0_3optIJNS3_3ExpEEEES8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v64)
      {
        sub_20BDDC0E4(&v262, v64);
        free(v64);
      }
      else
      {
        sub_20BDDC0E4(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsENS0_12if_then_elseINS3_4FracENS0_3optIJNS3_3ExpEEEES8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v259) = 2;
      v264 = v262;
      v265 = v263;
      v262 = 0uLL;
      v263 = 0;
      LOBYTE(v266) = 2;
      v268 = 0;
      v269 = 0;
      v267 = 0;
      v260 = 0;
      v261 = 0;
      *((_QWORD *)&v259 + 1) = 0;
      v65 = sub_20C165DCC(a1, (const void **)&v264, &v264);
      v67 = v66;
      *(_QWORD *)&v257 = &v267;
      sub_20BDE5038((void ***)&v257);
      if (SHIBYTE(v265) < 0)
        operator delete((void *)v264);
      *(_QWORD *)&v257 = (char *)&v259 + 8;
      sub_20BDE5038((void ***)&v257);
      if (SHIBYTE(v263) < 0)
        operator delete((void *)v262);
      if (v67)
      {
        sub_20C16EF9C(a1, (uint64_t)&v251);
        v68 = v65[10];
        v69 = v65[9];
        v238 = v65 + 8;
        if (v69 >= v68)
        {
          v72 = v65[8];
          v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v72) >> 3);
          v74 = v73 + 1;
          if (v73 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - v72) >> 3);
          if (2 * v75 > v74)
            v74 = 2 * v75;
          if (v75 >= 0x555555555555555)
            v76 = 0xAAAAAAAAAAAAAAALL;
          else
            v76 = v74;
          v267 = v65 + 10;
          if (v76)
            v77 = (char *)sub_20BDE4FF4((uint64_t)(v65 + 10), v76);
          else
            v77 = 0;
          v78 = &v77[24 * v73];
          *(_QWORD *)&v264 = v77;
          *((_QWORD *)&v264 + 1) = v78;
          v266 = &v77[24 * v76];
          v79 = v251;
          *((_QWORD *)v78 + 2) = v252;
          *(_OWORD *)v78 = v79;
          v252 = 0;
          v251 = 0uLL;
          v265 = v78 + 24;
          sub_20BDF34C0(v238, &v264);
          v71 = v65[9];
          sub_20BDF3648((uint64_t)&v264);
        }
        else
        {
          v70 = v251;
          *(_QWORD *)(v69 + 16) = v252;
          *(_OWORD *)v69 = v70;
          v252 = 0;
          v251 = 0uLL;
          v71 = v69 + 24;
          v65[9] = v69 + 24;
        }
        v65[9] = v71;
        v80 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl12if_then_elseIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracENS0_3optIJNS3_3ExpEEEES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v80)
        {
          sub_20BDDC0E4(&v262, v80);
          free(v80);
        }
        else
        {
          sub_20BDDC0E4(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl12if_then_elseIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracENS0_3optIJNS3_3ExpEEEES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v259) = 3;
        v264 = v262;
        v265 = v263;
        v262 = 0uLL;
        v263 = 0;
        LOBYTE(v266) = 3;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        v260 = 0;
        v261 = 0;
        *((_QWORD *)&v259 + 1) = 0;
        v239 = sub_20C165DCC(a1, (const void **)&v264, &v264);
        v82 = v81;
        *(_QWORD *)&v257 = &v267;
        sub_20BDE5038((void ***)&v257);
        if (SHIBYTE(v265) < 0)
          operator delete((void *)v264);
        *(_QWORD *)&v257 = (char *)&v259 + 8;
        sub_20BDE5038((void ***)&v257);
        if (SHIBYTE(v263) < 0)
          operator delete((void *)v262);
        if (v82)
        {
          v83 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracENS0_3optIJNS4_3ExpEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v83)
          {
            sub_20BDDC0E4(&v262, v83);
            free(v83);
          }
          else
          {
            sub_20BDDC0E4(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracENS0_3optIJNS4_3ExpEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v259) = 2;
          v264 = v262;
          v265 = v263;
          v262 = 0uLL;
          v263 = 0;
          LOBYTE(v266) = 2;
          v268 = 0;
          v269 = 0;
          v267 = 0;
          v260 = 0;
          v261 = 0;
          *((_QWORD *)&v259 + 1) = 0;
          v84 = sub_20C165DCC(a1, (const void **)&v264, &v264);
          v86 = v85;
          *(_QWORD *)&v257 = &v267;
          sub_20BDE5038((void ***)&v257);
          if (SHIBYTE(v265) < 0)
            operator delete((void *)v264);
          *(_QWORD *)&v257 = (char *)&v259 + 8;
          sub_20BDE5038((void ***)&v257);
          if (SHIBYTE(v263) < 0)
            operator delete((void *)v262);
          if (v86)
          {
            sub_20C16FD88(a1, (uint64_t)&v257);
            v87 = v84 + 8;
            v88 = v84[10];
            v89 = v84[9];
            v235 = v84 + 8;
            if (v89 >= v88)
            {
              v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - *v87) >> 3);
              v93 = v92 + 1;
              if (v92 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - *v87) >> 3);
              if (2 * v94 > v93)
                v93 = 2 * v94;
              if (v94 >= 0x555555555555555)
                v95 = 0xAAAAAAAAAAAAAAALL;
              else
                v95 = v93;
              v267 = v84 + 10;
              if (v95)
                v96 = (char *)sub_20BDE4FF4((uint64_t)(v84 + 10), v95);
              else
                v96 = 0;
              v97 = &v96[24 * v92];
              *(_QWORD *)&v264 = v96;
              *((_QWORD *)&v264 + 1) = v97;
              v266 = &v96[24 * v95];
              v98 = v257;
              *((_QWORD *)v97 + 2) = v258;
              *(_OWORD *)v97 = v98;
              v258 = 0;
              v257 = 0uLL;
              v265 = v97 + 24;
              sub_20BDF34C0(v84 + 8, &v264);
              v91 = v84[9];
              sub_20BDF3648((uint64_t)&v264);
            }
            else
            {
              v90 = v257;
              *(_QWORD *)(v89 + 16) = v258;
              *(_OWORD *)v89 = v90;
              v258 = 0;
              v257 = 0uLL;
              v91 = v89 + 24;
              v84[9] = v89 + 24;
            }
            v84[9] = v91;
            v99 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13ExpEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v99)
            {
              sub_20BDDC0E4(&v262, v99);
              free(v99);
            }
            else
            {
              sub_20BDDC0E4(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13ExpEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            LOBYTE(v259) = 1;
            v264 = v262;
            v265 = v263;
            v262 = 0uLL;
            v263 = 0;
            LOBYTE(v266) = 1;
            v268 = 0;
            v269 = 0;
            v267 = 0;
            v260 = 0;
            v261 = 0;
            *((_QWORD *)&v259 + 1) = 0;
            v100 = sub_20C165DCC(a1, (const void **)&v264, &v264);
            v102 = v101;
            v270[0] = (void **)&v267;
            sub_20BDE5038(v270);
            if (SHIBYTE(v265) < 0)
              operator delete((void *)v264);
            v270[0] = (void **)&v259 + 1;
            sub_20BDE5038(v270);
            if (SHIBYTE(v263) < 0)
              operator delete((void *)v262);
            if (v102)
            {
              sub_20C170724(a1, (uint64_t)&v259);
              v103 = v100[10];
              v104 = v100[9];
              if (v104 >= v103)
              {
                v106 = v100[8];
                v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104 - v106) >> 3);
                v108 = v107 + 1;
                if (v107 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - v106) >> 3);
                if (2 * v109 > v108)
                  v108 = 2 * v109;
                if (v109 >= 0x555555555555555)
                  v110 = 0xAAAAAAAAAAAAAAALL;
                else
                  v110 = v108;
                v267 = v100 + 10;
                if (v110)
                  v111 = (char *)sub_20BDE4FF4((uint64_t)(v100 + 10), v110);
                else
                  v111 = 0;
                v112 = &v111[24 * v107];
                *(_QWORD *)&v264 = v111;
                *((_QWORD *)&v264 + 1) = v112;
                v266 = &v111[24 * v110];
                v113 = v259;
                *((_QWORD *)v112 + 2) = v260;
                *(_OWORD *)v112 = v113;
                v260 = 0;
                v259 = 0uLL;
                v265 = v112 + 24;
                sub_20BDF34C0(v100 + 8, &v264);
                v114 = v100[9];
                sub_20BDF3648((uint64_t)&v264);
                v115 = SHIBYTE(v260);
                v100[9] = v114;
                if (v115 < 0)
                  operator delete((void *)v259);
              }
              else
              {
                v105 = v259;
                *(_QWORD *)(v104 + 16) = v260;
                *(_OWORD *)v104 = v105;
                v100[9] = v104 + 24;
              }
            }
            if (*((char *)v100 + 55) < 0)
            {
              sub_20BDDBFAC(__p, (void *)v100[4], v100[5]);
            }
            else
            {
              *(_OWORD *)__p = *((_OWORD *)v100 + 2);
              v256 = v100[6];
            }
            v117 = v84[9];
            v116 = v84[10];
            if (v117 >= v116)
            {
              v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - *v235) >> 3);
              v120 = v119 + 1;
              if (v119 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v121 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - *v235) >> 3);
              if (2 * v121 > v120)
                v120 = 2 * v121;
              if (v121 >= 0x555555555555555)
                v122 = 0xAAAAAAAAAAAAAAALL;
              else
                v122 = v120;
              v267 = v84 + 10;
              if (v122)
                v123 = (char *)sub_20BDE4FF4((uint64_t)(v84 + 10), v122);
              else
                v123 = 0;
              v124 = &v123[24 * v119];
              *(_QWORD *)&v264 = v123;
              *((_QWORD *)&v264 + 1) = v124;
              v266 = &v123[24 * v122];
              v125 = *(_OWORD *)__p;
              *((_QWORD *)v124 + 2) = v256;
              *(_OWORD *)v124 = v125;
              __p[1] = 0;
              v256 = 0;
              __p[0] = 0;
              v265 = v124 + 24;
              sub_20BDF34C0(v235, &v264);
              v126 = v84[9];
              sub_20BDF3648((uint64_t)&v264);
              v127 = SHIBYTE(v256);
              v84[9] = v126;
              if (v127 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v118 = *(_OWORD *)__p;
              *(_QWORD *)(v117 + 16) = v256;
              *(_OWORD *)v117 = v118;
              v84[9] = v117 + 24;
            }
            if (SHIBYTE(v258) < 0)
              operator delete((void *)v257);
          }
          if (*((char *)v84 + 55) < 0)
          {
            sub_20BDDBFAC(v253, (void *)v84[4], v84[5]);
          }
          else
          {
            *(_OWORD *)v253 = *((_OWORD *)v84 + 2);
            v254 = v84[6];
          }
          v128 = v239;
          v129 = v239[10];
          v130 = v239[9];
          v236 = v239 + 8;
          if (v130 >= v129)
          {
            v133 = v239[8];
            v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130 - v133) >> 3);
            v135 = v134 + 1;
            if (v134 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129 - v133) >> 3);
            if (2 * v136 > v135)
              v135 = 2 * v136;
            if (v136 >= 0x555555555555555)
              v137 = 0xAAAAAAAAAAAAAAALL;
            else
              v137 = v135;
            v267 = v239 + 10;
            if (v137)
              v138 = (char *)sub_20BDE4FF4((uint64_t)(v239 + 10), v137);
            else
              v138 = 0;
            v128 = v239;
            v139 = &v138[24 * v134];
            *(_QWORD *)&v264 = v138;
            *((_QWORD *)&v264 + 1) = v139;
            v266 = &v138[24 * v137];
            v140 = *(_OWORD *)v253;
            *((_QWORD *)v139 + 2) = v254;
            *(_OWORD *)v139 = v140;
            v253[1] = 0;
            v254 = 0;
            v253[0] = 0;
            v265 = v139 + 24;
            sub_20BDF34C0(v236, &v264);
            v132 = v239[9];
            sub_20BDF3648((uint64_t)&v264);
          }
          else
          {
            v131 = *(_OWORD *)v253;
            *(_QWORD *)(v130 + 16) = v254;
            *(_OWORD *)v130 = v131;
            v253[1] = 0;
            v254 = 0;
            v253[0] = 0;
            v132 = v130 + 24;
            v239[9] = v130 + 24;
          }
          v128[9] = v132;
          v141 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracEEEENS5_3ExpEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v141)
          {
            sub_20BDDC0E4(&v262, v141);
            free(v141);
          }
          else
          {
            sub_20BDDC0E4(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracEEEENS5_3ExpEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v259) = 2;
          v264 = v262;
          v265 = v263;
          v262 = 0uLL;
          v263 = 0;
          LOBYTE(v266) = 2;
          v268 = 0;
          v269 = 0;
          v267 = 0;
          v260 = 0;
          v261 = 0;
          *((_QWORD *)&v259 + 1) = 0;
          v142 = sub_20C165DCC(a1, (const void **)&v264, &v264);
          v144 = v143;
          *(_QWORD *)&v257 = &v267;
          sub_20BDE5038((void ***)&v257);
          if (SHIBYTE(v265) < 0)
            operator delete((void *)v264);
          *(_QWORD *)&v257 = (char *)&v259 + 8;
          sub_20BDE5038((void ***)&v257);
          if (SHIBYTE(v263) < 0)
            operator delete((void *)v262);
          if (v144)
          {
            v145 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v145)
            {
              sub_20BDDC0E4(&v262, v145);
              free(v145);
            }
            else
            {
              sub_20BDDC0E4(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            LOBYTE(v259) = 1;
            v264 = v262;
            v265 = v263;
            v262 = 0uLL;
            v263 = 0;
            LOBYTE(v266) = 1;
            v268 = 0;
            v269 = 0;
            v267 = 0;
            v260 = 0;
            v261 = 0;
            *((_QWORD *)&v259 + 1) = 0;
            v146 = sub_20C165DCC(a1, (const void **)&v264, &v264);
            v148 = v147;
            v270[0] = (void **)&v267;
            sub_20BDE5038(v270);
            if (SHIBYTE(v265) < 0)
              operator delete((void *)v264);
            v270[0] = (void **)&v259 + 1;
            sub_20BDE5038(v270);
            if (SHIBYTE(v263) < 0)
              operator delete((void *)v262);
            if (v148)
            {
              sub_20C16FD88(a1, (uint64_t)&v259);
              v149 = v146[10];
              v150 = v146[9];
              if (v150 >= v149)
              {
                v152 = v146[8];
                v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - v152) >> 3);
                v154 = v153 + 1;
                if (v153 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - v152) >> 3);
                if (2 * v155 > v154)
                  v154 = 2 * v155;
                if (v155 >= 0x555555555555555)
                  v156 = 0xAAAAAAAAAAAAAAALL;
                else
                  v156 = v154;
                v267 = v146 + 10;
                if (v156)
                  v157 = (char *)sub_20BDE4FF4((uint64_t)(v146 + 10), v156);
                else
                  v157 = 0;
                v158 = &v157[24 * v153];
                *(_QWORD *)&v264 = v157;
                *((_QWORD *)&v264 + 1) = v158;
                v266 = &v157[24 * v156];
                v159 = v259;
                *((_QWORD *)v158 + 2) = v260;
                *(_OWORD *)v158 = v159;
                v260 = 0;
                v259 = 0uLL;
                v265 = v158 + 24;
                sub_20BDF34C0(v146 + 8, &v264);
                v160 = v146[9];
                sub_20BDF3648((uint64_t)&v264);
                v161 = SHIBYTE(v260);
                v146[9] = v160;
                if (v161 < 0)
                  operator delete((void *)v259);
              }
              else
              {
                v151 = v259;
                *(_QWORD *)(v150 + 16) = v260;
                *(_OWORD *)v150 = v151;
                v146[9] = v150 + 24;
              }
            }
            if (*((char *)v146 + 55) < 0)
            {
              sub_20BDDBFAC(&v257, (void *)v146[4], v146[5]);
            }
            else
            {
              v257 = *((_OWORD *)v146 + 2);
              v258 = v146[6];
            }
            v162 = v142 + 8;
            v163 = v142[10];
            v164 = v142[9];
            if (v164 >= v163)
            {
              v167 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v164 - *v162) >> 3);
              v168 = v167 + 1;
              if (v167 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v169 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - *v162) >> 3);
              if (2 * v169 > v168)
                v168 = 2 * v169;
              if (v169 >= 0x555555555555555)
                v170 = 0xAAAAAAAAAAAAAAALL;
              else
                v170 = v168;
              v267 = v142 + 10;
              if (v170)
                v171 = (char *)sub_20BDE4FF4((uint64_t)(v142 + 10), v170);
              else
                v171 = 0;
              v172 = &v171[24 * v167];
              *(_QWORD *)&v264 = v171;
              *((_QWORD *)&v264 + 1) = v172;
              v266 = &v171[24 * v170];
              v173 = v257;
              *((_QWORD *)v172 + 2) = v258;
              *(_OWORD *)v172 = v173;
              v258 = 0;
              v257 = 0uLL;
              v265 = v172 + 24;
              sub_20BDF34C0(v142 + 8, &v264);
              v166 = v142[9];
              sub_20BDF3648((uint64_t)&v264);
            }
            else
            {
              v165 = v257;
              *(_QWORD *)(v164 + 16) = v258;
              *(_OWORD *)v164 = v165;
              v258 = 0;
              v257 = 0uLL;
              v166 = v164 + 24;
              v142[9] = v164 + 24;
            }
            v142[9] = v166;
            sub_20C170724(a1, (uint64_t)&v259);
            v175 = v142[9];
            v174 = v142[10];
            if (v175 >= v174)
            {
              v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v175 - *v162) >> 3);
              v178 = v177 + 1;
              if (v177 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - *v162) >> 3);
              if (2 * v179 > v178)
                v178 = 2 * v179;
              if (v179 >= 0x555555555555555)
                v180 = 0xAAAAAAAAAAAAAAALL;
              else
                v180 = v178;
              v267 = v142 + 10;
              if (v180)
                v181 = (char *)sub_20BDE4FF4((uint64_t)(v142 + 10), v180);
              else
                v181 = 0;
              v182 = &v181[24 * v177];
              *(_QWORD *)&v264 = v181;
              *((_QWORD *)&v264 + 1) = v182;
              v266 = &v181[24 * v180];
              v183 = v259;
              *((_QWORD *)v182 + 2) = v260;
              *(_OWORD *)v182 = v183;
              v260 = 0;
              v259 = 0uLL;
              v265 = v182 + 24;
              sub_20BDF34C0(v142 + 8, &v264);
              v184 = v142[9];
              sub_20BDF3648((uint64_t)&v264);
              v185 = SHIBYTE(v260);
              v142[9] = v184;
              if (v185 < 0)
                operator delete((void *)v259);
            }
            else
            {
              v176 = v259;
              *(_QWORD *)(v175 + 16) = v260;
              *(_OWORD *)v175 = v176;
              v142[9] = v175 + 24;
            }
            if (SHIBYTE(v258) < 0)
              operator delete((void *)v257);
          }
          if (*((char *)v142 + 55) < 0)
          {
            sub_20BDDBFAC(__p, (void *)v142[4], v142[5]);
          }
          else
          {
            *(_OWORD *)__p = *((_OWORD *)v142 + 2);
            v256 = v142[6];
          }
          v187 = v239[9];
          v186 = v239[10];
          if (v187 >= v186)
          {
            v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - *v236) >> 3);
            v190 = v189 + 1;
            v9 = v5 + 8;
            if (v189 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - *v236) >> 3);
            if (2 * v191 > v190)
              v190 = 2 * v191;
            if (v191 >= 0x555555555555555)
              v192 = 0xAAAAAAAAAAAAAAALL;
            else
              v192 = v190;
            v267 = v239 + 10;
            if (v192)
              v193 = (char *)sub_20BDE4FF4((uint64_t)(v239 + 10), v192);
            else
              v193 = 0;
            v194 = &v193[24 * v189];
            *(_QWORD *)&v264 = v193;
            *((_QWORD *)&v264 + 1) = v194;
            v266 = &v193[24 * v192];
            v195 = *(_OWORD *)__p;
            *((_QWORD *)v194 + 2) = v256;
            *(_OWORD *)v194 = v195;
            __p[1] = 0;
            v256 = 0;
            __p[0] = 0;
            v265 = v194 + 24;
            sub_20BDF34C0(v236, &v264);
            v196 = v239[9];
            sub_20BDF3648((uint64_t)&v264);
            v197 = SHIBYTE(v256);
            v239[9] = v196;
            if (v197 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v188 = *(_OWORD *)__p;
            *(_QWORD *)(v187 + 16) = v256;
            *(_OWORD *)v187 = v188;
            v239[9] = v187 + 24;
            v9 = v5 + 8;
          }
          if (SHIBYTE(v254) < 0)
            operator delete(v253[0]);
        }
        if (*((char *)v239 + 55) < 0)
        {
          sub_20BDDBFAC(v249, (void *)v239[4], v239[5]);
        }
        else
        {
          *(_OWORD *)v249 = *((_OWORD *)v239 + 2);
          v250 = v239[6];
        }
        v199 = v65[9];
        v198 = v65[10];
        if (v199 >= v198)
        {
          v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v199 - *v238) >> 3);
          v202 = v201 + 1;
          if (v201 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v198 - *v238) >> 3);
          if (2 * v203 > v202)
            v202 = 2 * v203;
          if (v203 >= 0x555555555555555)
            v204 = 0xAAAAAAAAAAAAAAALL;
          else
            v204 = v202;
          v267 = v65 + 10;
          if (v204)
            v205 = (char *)sub_20BDE4FF4((uint64_t)(v65 + 10), v204);
          else
            v205 = 0;
          v206 = &v205[24 * v201];
          *(_QWORD *)&v264 = v205;
          *((_QWORD *)&v264 + 1) = v206;
          v266 = &v205[24 * v204];
          v207 = *(_OWORD *)v249;
          *((_QWORD *)v206 + 2) = v250;
          *(_OWORD *)v206 = v207;
          v249[1] = 0;
          v250 = 0;
          v249[0] = 0;
          v265 = v206 + 24;
          sub_20BDF34C0(v238, &v264);
          v208 = v65[9];
          sub_20BDF3648((uint64_t)&v264);
          v209 = SHIBYTE(v250);
          v65[9] = v208;
          if (v209 < 0)
            operator delete(v249[0]);
        }
        else
        {
          v200 = *(_OWORD *)v249;
          *(_QWORD *)(v199 + 16) = v250;
          *(_OWORD *)v199 = v200;
          v65[9] = v199 + 24;
        }
        if (SHIBYTE(v252) < 0)
          operator delete((void *)v251);
      }
      if (*((char *)v65 + 55) < 0)
      {
        sub_20BDDBFAC(v245, (void *)v65[4], v65[5]);
      }
      else
      {
        *(_OWORD *)v245 = *((_OWORD *)v65 + 2);
        v246 = v65[6];
      }
      v211 = v21[9];
      v210 = v21[10];
      if (v211 >= v210)
      {
        v213 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - *v237) >> 3);
        v214 = v213 + 1;
        if (v213 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v215 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v210 - *v237) >> 3);
        if (2 * v215 > v214)
          v214 = 2 * v215;
        if (v215 >= 0x555555555555555)
          v216 = 0xAAAAAAAAAAAAAAALL;
        else
          v216 = v214;
        v267 = v21 + 10;
        if (v216)
          v217 = (char *)sub_20BDE4FF4((uint64_t)(v21 + 10), v216);
        else
          v217 = 0;
        v218 = &v217[24 * v213];
        *(_QWORD *)&v264 = v217;
        *((_QWORD *)&v264 + 1) = v218;
        v266 = &v217[24 * v216];
        v219 = *(_OWORD *)v245;
        *((_QWORD *)v218 + 2) = v246;
        *(_OWORD *)v218 = v219;
        v245[1] = 0;
        v246 = 0;
        v245[0] = 0;
        v265 = v218 + 24;
        sub_20BDF34C0(v237, &v264);
        v220 = v21[9];
        sub_20BDF3648((uint64_t)&v264);
        v221 = SHIBYTE(v246);
        v21[9] = v220;
        if (v221 < 0)
          operator delete(v245[0]);
      }
      else
      {
        v212 = *(_OWORD *)v245;
        *(_QWORD *)(v211 + 16) = v246;
        *(_OWORD *)v211 = v212;
        v21[9] = v211 + 24;
      }
      if (SHIBYTE(v248) < 0)
        operator delete(__dst[0]);
    }
    if (*((char *)v21 + 55) < 0)
    {
      sub_20BDDBFAC(v241, (void *)v21[4], v21[5]);
    }
    else
    {
      *(_OWORD *)v241 = *((_OWORD *)v21 + 2);
      v242 = v21[6];
    }
    v223 = v5[9];
    v222 = v5[10];
    if (v223 >= v222)
    {
      v225 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v223 - *v9) >> 3);
      v226 = v225 + 1;
      if (v225 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v227 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - *v9) >> 3);
      if (2 * v227 > v226)
        v226 = 2 * v227;
      if (v227 >= 0x555555555555555)
        v228 = 0xAAAAAAAAAAAAAAALL;
      else
        v228 = v226;
      v267 = v5 + 10;
      if (v228)
        v229 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v228);
      else
        v229 = 0;
      v230 = &v229[24 * v225];
      *(_QWORD *)&v264 = v229;
      *((_QWORD *)&v264 + 1) = v230;
      v266 = &v229[24 * v228];
      v231 = *(_OWORD *)v241;
      *((_QWORD *)v230 + 2) = v242;
      *(_OWORD *)v230 = v231;
      v241[1] = 0;
      v242 = 0;
      v241[0] = 0;
      v265 = v230 + 24;
      sub_20BDF34C0(v9, &v264);
      v232 = v5[9];
      sub_20BDF3648((uint64_t)&v264);
      v233 = SHIBYTE(v242);
      v5[9] = v232;
      if (v233 < 0)
        operator delete(v241[0]);
    }
    else
    {
      v224 = *(_OWORD *)v241;
      *(_QWORD *)(v223 + 16) = v242;
      *(_OWORD *)v223 = v224;
      v5[9] = v223 + 24;
    }
    if (SHIBYTE(v244) < 0)
      operator delete(v243[0]);
  }
  if (*((char *)v5 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v5[4], v5[5]);
  }
  else
  {
    v234 = *((_OWORD *)v5 + 2);
    *(_QWORD *)(a2 + 16) = v5[6];
    *(_OWORD *)a2 = v234;
  }
}

void sub_20C16B3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  sub_20BDF3648(v53 - 160);
  if (*(char *)(v53 - 193) < 0)
    operator delete(*(void **)(v53 - 216));
  if (a53 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a37 < 0)
    operator delete(a32);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void sub_20C16B7DC(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgIntE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgIntE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C16E9B4(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C16EF9C(a1, (uint64_t)v37);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C16BB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C16BBE4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  char v12;
  char v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  uint64_t *v51;
  char v52;
  char v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  void *v91[2];
  uint64_t v92;
  void *__dst[2];
  uint64_t v94;
  void *v95[2];
  uint64_t v96;
  uint64_t v97;
  void *v98[2];
  _QWORD *v99;
  void *__p[2];
  _QWORD *v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  void **v106[2];

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111PredArgBoolE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v98, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v98, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111PredArgBoolE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v95[0]) = 3;
  *(_OWORD *)__p = *(_OWORD *)v98;
  v101 = v99;
  v98[0] = 0;
  v98[1] = 0;
  v99 = 0;
  LOBYTE(v102) = 3;
  v104 = 0;
  v105 = 0;
  v103 = 0;
  v96 = 0;
  v97 = 0;
  v95[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  __dst[0] = &v103;
  sub_20BDE5038((void ***)__dst);
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
  __dst[0] = &v95[1];
  sub_20BDE5038((void ***)__dst);
  if (SHIBYTE(v99) < 0)
    operator delete(v98[0]);
  if (v8)
  {
    v9 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14TrueE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      v10 = v9;
      sub_20BDDC0E4(v98, v9);
      free(v10);
    }
    else
    {
      sub_20BDDC0E4(v98, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14TrueE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v95[0]) = 2;
    *(_OWORD *)__p = *(_OWORD *)v98;
    v101 = v99;
    v98[0] = 0;
    v98[1] = 0;
    v99 = 0;
    LOBYTE(v102) = 2;
    v104 = 0;
    v105 = 0;
    v103 = 0;
    v96 = 0;
    v97 = 0;
    v95[1] = 0;
    v11 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v13 = v12;
    v91[0] = &v103;
    sub_20BDE5038((void ***)v91);
    if (SHIBYTE(v101) < 0)
      operator delete(__p[0]);
    v91[0] = &v95[1];
    sub_20BDE5038((void ***)v91);
    if (SHIBYTE(v99) < 0)
      operator delete(v98[0]);
    if (v13)
    {
      sub_20C17171C(a1, (uint64_t)v95);
      v14 = v11[10];
      v15 = v11 + 8;
      v16 = v11[9];
      if (v16 >= v14)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v15) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v15) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        v103 = v11 + 10;
        if (v22)
          v23 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v22);
        else
          v23 = 0;
        v24 = &v23[24 * v19];
        __p[0] = v23;
        __p[1] = v24;
        v102 = &v23[24 * v22];
        v25 = *(_OWORD *)v95;
        *((_QWORD *)v24 + 2) = v96;
        *(_OWORD *)v24 = v25;
        v95[1] = 0;
        v96 = 0;
        v95[0] = 0;
        v101 = v24 + 24;
        sub_20BDF34C0(v11 + 8, __p);
        v18 = v11[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v17 = *(_OWORD *)v95;
        *(_QWORD *)(v16 + 16) = v96;
        *(_OWORD *)v16 = v17;
        v95[1] = 0;
        v96 = 0;
        v95[0] = 0;
        v18 = v16 + 24;
        v11[9] = v16 + 24;
      }
      v11[9] = v18;
      sub_20C166A8C(a1, (uint64_t)v98);
      v27 = v11[9];
      v26 = v11[10];
      if (v27 >= v26)
      {
        v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v15) >> 3);
        v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v15) >> 3);
        if (2 * v31 > v30)
          v30 = 2 * v31;
        if (v31 >= 0x555555555555555)
          v32 = 0xAAAAAAAAAAAAAAALL;
        else
          v32 = v30;
        v103 = v11 + 10;
        if (v32)
          v33 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v32);
        else
          v33 = 0;
        v34 = &v33[24 * v29];
        __p[0] = v33;
        __p[1] = v34;
        v102 = &v33[24 * v32];
        v35 = *(_OWORD *)v98;
        *((_QWORD *)v34 + 2) = v99;
        *(_OWORD *)v34 = v35;
        v98[1] = 0;
        v99 = 0;
        v98[0] = 0;
        v101 = v34 + 24;
        sub_20BDF34C0(v11 + 8, __p);
        v36 = v11[9];
        sub_20BDF3648((uint64_t)__p);
        v37 = SHIBYTE(v99);
        v11[9] = v36;
        if (v37 < 0)
          operator delete(v98[0]);
      }
      else
      {
        v28 = *(_OWORD *)v98;
        *(_QWORD *)(v27 + 16) = v99;
        *(_OWORD *)v27 = v28;
        v11[9] = v27 + 24;
      }
      if (SHIBYTE(v96) < 0)
        operator delete(v95[0]);
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_20BDDBFAC(__dst, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)__dst = *((_OWORD *)v11 + 2);
      v94 = v11[6];
    }
    v38 = v6 + 8;
    v39 = v6[10];
    v40 = v6[9];
    if (v40 >= v39)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v38) >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v38) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v44;
      v103 = v6 + 10;
      if (v46)
        v47 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v46);
      else
        v47 = 0;
      v48 = &v47[24 * v43];
      __p[0] = v47;
      __p[1] = v48;
      v102 = &v47[24 * v46];
      v49 = *(_OWORD *)__dst;
      *((_QWORD *)v48 + 2) = v94;
      *(_OWORD *)v48 = v49;
      __dst[1] = 0;
      v94 = 0;
      __dst[0] = 0;
      v101 = v48 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v42 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v41 = *(_OWORD *)__dst;
      *(_QWORD *)(v40 + 16) = v94;
      *(_OWORD *)v40 = v41;
      __dst[1] = 0;
      v94 = 0;
      __dst[0] = 0;
      v42 = v40 + 24;
      v6[9] = v40 + 24;
    }
    v6[9] = v42;
    v50 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15FalseE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v50)
    {
      sub_20BDDC0E4(v98, v50);
      free(v50);
    }
    else
    {
      sub_20BDDC0E4(v98, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15FalseE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v95[0]) = 2;
    *(_OWORD *)__p = *(_OWORD *)v98;
    v101 = v99;
    v98[0] = 0;
    v98[1] = 0;
    v99 = 0;
    LOBYTE(v102) = 2;
    v104 = 0;
    v105 = 0;
    v103 = 0;
    v96 = 0;
    v97 = 0;
    v95[1] = 0;
    v51 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v53 = v52;
    v106[0] = (void **)&v103;
    sub_20BDE5038(v106);
    if (SHIBYTE(v101) < 0)
      operator delete(__p[0]);
    v106[0] = &v95[1];
    sub_20BDE5038(v106);
    if (SHIBYTE(v99) < 0)
      operator delete(v98[0]);
    if (v53)
    {
      sub_20C171900(a1, (uint64_t)v95);
      v54 = v51 + 8;
      v55 = v51[10];
      v56 = v51[9];
      if (v56 >= v55)
      {
        v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *v54) >> 3);
        v60 = v59 + 1;
        if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *v54) >> 3);
        if (2 * v61 > v60)
          v60 = 2 * v61;
        if (v61 >= 0x555555555555555)
          v62 = 0xAAAAAAAAAAAAAAALL;
        else
          v62 = v60;
        v103 = v51 + 10;
        if (v62)
          v63 = (char *)sub_20BDE4FF4((uint64_t)(v51 + 10), v62);
        else
          v63 = 0;
        v64 = &v63[24 * v59];
        __p[0] = v63;
        __p[1] = v64;
        v102 = &v63[24 * v62];
        v65 = *(_OWORD *)v95;
        *((_QWORD *)v64 + 2) = v96;
        *(_OWORD *)v64 = v65;
        v95[1] = 0;
        v96 = 0;
        v95[0] = 0;
        v101 = v64 + 24;
        sub_20BDF34C0(v51 + 8, __p);
        v58 = v51[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v57 = *(_OWORD *)v95;
        *(_QWORD *)(v56 + 16) = v96;
        *(_OWORD *)v56 = v57;
        v95[1] = 0;
        v96 = 0;
        v95[0] = 0;
        v58 = v56 + 24;
        v51[9] = v56 + 24;
      }
      v51[9] = v58;
      sub_20C166A8C(a1, (uint64_t)v98);
      v67 = v51[9];
      v66 = v51[10];
      if (v67 >= v66)
      {
        v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - *v54) >> 3);
        v70 = v69 + 1;
        if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *v54) >> 3);
        if (2 * v71 > v70)
          v70 = 2 * v71;
        if (v71 >= 0x555555555555555)
          v72 = 0xAAAAAAAAAAAAAAALL;
        else
          v72 = v70;
        v103 = v51 + 10;
        if (v72)
          v73 = (char *)sub_20BDE4FF4((uint64_t)(v51 + 10), v72);
        else
          v73 = 0;
        v74 = &v73[24 * v69];
        __p[0] = v73;
        __p[1] = v74;
        v102 = &v73[24 * v72];
        v75 = *(_OWORD *)v98;
        *((_QWORD *)v74 + 2) = v99;
        *(_OWORD *)v74 = v75;
        v98[1] = 0;
        v99 = 0;
        v98[0] = 0;
        v101 = v74 + 24;
        sub_20BDF34C0(v51 + 8, __p);
        v76 = v51[9];
        sub_20BDF3648((uint64_t)__p);
        v77 = SHIBYTE(v99);
        v51[9] = v76;
        if (v77 < 0)
          operator delete(v98[0]);
      }
      else
      {
        v68 = *(_OWORD *)v98;
        *(_QWORD *)(v67 + 16) = v99;
        *(_OWORD *)v67 = v68;
        v51[9] = v67 + 24;
      }
      if (SHIBYTE(v96) < 0)
        operator delete(v95[0]);
    }
    if (*((char *)v51 + 55) < 0)
    {
      sub_20BDDBFAC(v91, (void *)v51[4], v51[5]);
    }
    else
    {
      *(_OWORD *)v91 = *((_OWORD *)v51 + 2);
      v92 = v51[6];
    }
    v79 = v6[9];
    v78 = v6[10];
    if (v79 >= v78)
    {
      v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *v38) >> 3);
      v82 = v81 + 1;
      if (v81 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - *v38) >> 3);
      if (2 * v83 > v82)
        v82 = 2 * v83;
      if (v83 >= 0x555555555555555)
        v84 = 0xAAAAAAAAAAAAAAALL;
      else
        v84 = v82;
      v103 = v6 + 10;
      if (v84)
        v85 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v84);
      else
        v85 = 0;
      v86 = &v85[24 * v81];
      __p[0] = v85;
      __p[1] = v86;
      v102 = &v85[24 * v84];
      v87 = *(_OWORD *)v91;
      *((_QWORD *)v86 + 2) = v92;
      *(_OWORD *)v86 = v87;
      v91[1] = 0;
      v92 = 0;
      v91[0] = 0;
      v101 = v86 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v88 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v89 = SHIBYTE(v92);
      v6[9] = v88;
      if (v89 < 0)
        operator delete(v91[0]);
    }
    else
    {
      v80 = *(_OWORD *)v91;
      *(_QWORD *)(v79 + 16) = v92;
      *(_OWORD *)v79 = v80;
      v6[9] = v79 + 24;
    }
    if (SHIBYTE(v94) < 0)
      operator delete(__dst[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v90 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v90;
  }
}

void sub_20C16C5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  sub_20BDF3648((uint64_t)&a35);
  if (a34 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20C16C734(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t *v5;
  char v6;
  char v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  char v11;
  char v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  char v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t *v31;
  char v32;
  char v33;
  uint64_t *v34;
  char *v35;
  uint64_t *v36;
  char v37;
  char v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  char *v111;
  uint64_t *v112;
  char v113;
  char v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  __int128 v126;
  char *v127;
  char v128;
  char v129;
  char *v130;
  uint64_t *v131;
  char v132;
  char v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  __int128 v145;
  unint64_t v146;
  unint64_t v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  __int128 v155;
  uint64_t v156;
  int v157;
  uint64_t *v158;
  uint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  __int128 v170;
  unint64_t v171;
  unint64_t v172;
  __int128 v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  __int128 v180;
  uint64_t v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  char *v191;
  __int128 v192;
  uint64_t v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  __int128 v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  __int128 v204;
  uint64_t v205;
  int v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  __int128 v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  __int128 v218;
  char *v219;
  uint64_t *v220;
  char v221;
  char v222;
  _QWORD *v223;
  unint64_t v224;
  unint64_t v225;
  __int128 v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  char *v233;
  __int128 v234;
  unint64_t v235;
  unint64_t v236;
  __int128 v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  __int128 v244;
  uint64_t v245;
  int v246;
  unint64_t v247;
  unint64_t v248;
  __int128 v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  char *v254;
  char *v255;
  __int128 v256;
  uint64_t v257;
  int v258;
  __int128 v259;
  uint64_t *v260;
  uint64_t *v261;
  void *v263[2];
  uint64_t v264;
  void *v265[2];
  uint64_t v266;
  void *v267[2];
  uint64_t v268;
  void *v269[2];
  uint64_t v270;
  void *v271[2];
  uint64_t v272;
  void *__dst[2];
  uint64_t v274;
  void **v275;
  __int128 __p;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  char *v280;
  __int128 v281;
  char *v282;
  char *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;

  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredArgStringE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    v4 = v3;
    sub_20BDDC0E4(&v279, v3);
    free(v4);
  }
  else
  {
    sub_20BDDC0E4(&v279, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredArgStringE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(__p) = 3;
  v281 = v279;
  v282 = v280;
  v279 = 0uLL;
  v280 = 0;
  LOBYTE(v283) = 3;
  v285 = 0;
  v286 = 0;
  v284 = 0;
  v277 = 0;
  v278 = 0;
  *((_QWORD *)&__p + 1) = 0;
  v5 = sub_20C165DCC(a1, (const void **)&v281, &v281);
  v7 = v6;
  __dst[0] = &v284;
  sub_20BDE5038((void ***)__dst);
  if (SHIBYTE(v282) < 0)
    operator delete((void *)v281);
  __dst[0] = (char *)&__p + 8;
  sub_20BDE5038((void ***)__dst);
  if (SHIBYTE(v280) < 0)
    operator delete((void *)v279);
  if (v7)
  {
    v8 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112QuotedStringE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v8)
    {
      v9 = v8;
      sub_20BDDC0E4(&v279, v8);
      free(v9);
    }
    else
    {
      sub_20BDDC0E4(&v279, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112QuotedStringE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(__p) = 3;
    v281 = v279;
    v282 = v280;
    v279 = 0uLL;
    v280 = 0;
    LOBYTE(v283) = 3;
    v285 = 0;
    v286 = 0;
    v284 = 0;
    v277 = 0;
    v278 = 0;
    *((_QWORD *)&__p + 1) = 0;
    v10 = sub_20C165DCC(a1, (const void **)&v281, &v281);
    v12 = v11;
    __dst[0] = &v284;
    sub_20BDE5038((void ***)__dst);
    if (SHIBYTE(v282) < 0)
      operator delete((void *)v281);
    __dst[0] = (char *)&__p + 8;
    sub_20BDE5038((void ***)__dst);
    if (SHIBYTE(v280) < 0)
      operator delete((void *)v279);
    if (v12)
    {
      v13 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustINS0_5ascii3oneIJLc34EEEEJNS0_5untilIS4_JN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v13)
      {
        v14 = v13;
        sub_20BDDC0E4(&v279, v13);
        free(v14);
      }
      else
      {
        sub_20BDDC0E4(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustINS0_5ascii3oneIJLc34EEEEJNS0_5untilIS4_JN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(__p) = 2;
      v281 = v279;
      v282 = v280;
      v279 = 0uLL;
      v280 = 0;
      LOBYTE(v283) = 2;
      v285 = 0;
      v286 = 0;
      v284 = 0;
      v277 = 0;
      v278 = 0;
      *((_QWORD *)&__p + 1) = 0;
      v15 = sub_20C165DCC(a1, (const void **)&v281, &v281);
      v17 = v16;
      __dst[0] = &v284;
      sub_20BDE5038((void ***)__dst);
      if (SHIBYTE(v282) < 0)
        operator delete((void *)v281);
      __dst[0] = (char *)&__p + 8;
      sub_20BDE5038((void ***)__dst);
      if (SHIBYTE(v280) < 0)
        operator delete((void *)v279);
      if (v17)
      {
        sub_20C171AE4(a1, (uint64_t)v271);
        v18 = v15[10];
        v19 = v15 + 8;
        v20 = v15[9];
        if (v20 >= v18)
        {
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v19) >> 3);
          v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v19) >> 3);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          else
            v26 = v24;
          v284 = v15 + 10;
          if (v26)
            v27 = (char *)sub_20BDE4FF4((uint64_t)(v15 + 10), v26);
          else
            v27 = 0;
          v28 = &v27[24 * v23];
          *(_QWORD *)&v281 = v27;
          *((_QWORD *)&v281 + 1) = v28;
          v283 = &v27[24 * v26];
          v29 = *(_OWORD *)v271;
          *((_QWORD *)v28 + 2) = v272;
          *(_OWORD *)v28 = v29;
          v271[1] = 0;
          v272 = 0;
          v271[0] = 0;
          v282 = v28 + 24;
          sub_20BDF34C0(v15 + 8, &v281);
          v22 = v15[9];
          sub_20BDF3648((uint64_t)&v281);
        }
        else
        {
          v21 = *(_OWORD *)v271;
          *(_QWORD *)(v20 + 16) = v272;
          *(_OWORD *)v20 = v21;
          v271[1] = 0;
          v272 = 0;
          v271[0] = 0;
          v22 = v20 + 24;
          v15[9] = v20 + 24;
        }
        v15[9] = v22;
        v30 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v30)
        {
          sub_20BDDC0E4(&v279, v30);
          free(v30);
        }
        else
        {
          sub_20BDDC0E4(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(__p) = 2;
        v281 = v279;
        v282 = v280;
        v279 = 0uLL;
        v280 = 0;
        LOBYTE(v283) = 2;
        v285 = 0;
        v286 = 0;
        v284 = 0;
        v277 = 0;
        v278 = 0;
        *((_QWORD *)&__p + 1) = 0;
        v31 = sub_20C165DCC(a1, (const void **)&v281, &v281);
        v33 = v32;
        __dst[0] = &v284;
        sub_20BDE5038((void ***)__dst);
        if (SHIBYTE(v282) < 0)
          operator delete((void *)v281);
        __dst[0] = (char *)&__p + 8;
        sub_20BDE5038((void ***)__dst);
        v34 = v15 + 8;
        if (SHIBYTE(v280) < 0)
          operator delete((void *)v279);
        if (v33)
        {
          v35 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEEJNS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v35)
          {
            sub_20BDDC0E4(&v279, v35);
            free(v35);
          }
          else
          {
            sub_20BDDC0E4(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEEJNS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(__p) = 1;
          v281 = v279;
          v282 = v280;
          v279 = 0uLL;
          v280 = 0;
          LOBYTE(v283) = 1;
          v285 = 0;
          v286 = 0;
          v284 = 0;
          v277 = 0;
          v278 = 0;
          *((_QWORD *)&__p + 1) = 0;
          v36 = sub_20C165DCC(a1, (const void **)&v281, &v281);
          v38 = v37;
          v265[0] = &v284;
          sub_20BDE5038((void ***)v265);
          if (SHIBYTE(v282) < 0)
            operator delete((void *)v281);
          v265[0] = (char *)&__p + 8;
          sub_20BDE5038((void ***)v265);
          if (SHIBYTE(v280) < 0)
            operator delete((void *)v279);
          if (v38)
          {
            sub_20C171C38(a1, (uint64_t)&__p);
            v39 = v36 + 8;
            v40 = v36[10];
            v41 = v36[9];
            if (v41 >= v40)
            {
              v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v39) >> 3);
              v45 = v44 + 1;
              if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v39) >> 3);
              if (2 * v46 > v45)
                v45 = 2 * v46;
              if (v46 >= 0x555555555555555)
                v47 = 0xAAAAAAAAAAAAAAALL;
              else
                v47 = v45;
              v284 = v36 + 10;
              if (v47)
                v48 = (char *)sub_20BDE4FF4((uint64_t)(v36 + 10), v47);
              else
                v48 = 0;
              v49 = &v48[24 * v44];
              *(_QWORD *)&v281 = v48;
              *((_QWORD *)&v281 + 1) = v49;
              v283 = &v48[24 * v47];
              v50 = __p;
              *((_QWORD *)v49 + 2) = v277;
              *(_OWORD *)v49 = v50;
              v277 = 0;
              __p = 0uLL;
              v282 = v49 + 24;
              sub_20BDF34C0(v36 + 8, &v281);
              v43 = v36[9];
              sub_20BDF3648((uint64_t)&v281);
            }
            else
            {
              v42 = __p;
              *(_QWORD *)(v41 + 16) = v277;
              *(_OWORD *)v41 = v42;
              v277 = 0;
              __p = 0uLL;
              v43 = v41 + 24;
              v36[9] = v41 + 24;
            }
            v36[9] = v43;
            sub_20C1731C0(a1, (uint64_t)&v279);
            v52 = v36[9];
            v51 = v36[10];
            if (v52 >= v51)
            {
              v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *v39) >> 3);
              v55 = v54 + 1;
              if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *v39) >> 3);
              if (2 * v56 > v55)
                v55 = 2 * v56;
              if (v56 >= 0x555555555555555)
                v57 = 0xAAAAAAAAAAAAAAALL;
              else
                v57 = v55;
              v284 = v36 + 10;
              if (v57)
                v58 = (char *)sub_20BDE4FF4((uint64_t)(v36 + 10), v57);
              else
                v58 = 0;
              v59 = &v58[24 * v54];
              *(_QWORD *)&v281 = v58;
              *((_QWORD *)&v281 + 1) = v59;
              v283 = &v58[24 * v57];
              v60 = v279;
              *((_QWORD *)v59 + 2) = v280;
              *(_OWORD *)v59 = v60;
              v280 = 0;
              v279 = 0uLL;
              v282 = v59 + 24;
              sub_20BDF34C0(v36 + 8, &v281);
              v61 = v36[9];
              sub_20BDF3648((uint64_t)&v281);
              v62 = SHIBYTE(v280);
              v36[9] = v61;
              if (v62 < 0)
                operator delete((void *)v279);
            }
            else
            {
              v53 = v279;
              *(_QWORD *)(v52 + 16) = v280;
              *(_OWORD *)v52 = v53;
              v36[9] = v52 + 24;
            }
            if (SHIBYTE(v277) < 0)
              operator delete((void *)__p);
          }
          if (*((char *)v36 + 55) < 0)
          {
            sub_20BDDBFAC(__dst, (void *)v36[4], v36[5]);
          }
          else
          {
            *(_OWORD *)__dst = *((_OWORD *)v36 + 2);
            v274 = v36[6];
          }
          v63 = v31 + 8;
          v64 = v31[10];
          v65 = v31[9];
          if (v65 >= v64)
          {
            v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *v63) >> 3);
            v69 = v68 + 1;
            if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *v63) >> 3);
            if (2 * v70 > v69)
              v69 = 2 * v70;
            if (v70 >= 0x555555555555555)
              v71 = 0xAAAAAAAAAAAAAAALL;
            else
              v71 = v69;
            v284 = v31 + 10;
            if (v71)
              v72 = (char *)sub_20BDE4FF4((uint64_t)(v31 + 10), v71);
            else
              v72 = 0;
            v73 = &v72[24 * v68];
            *(_QWORD *)&v281 = v72;
            *((_QWORD *)&v281 + 1) = v73;
            v283 = &v72[24 * v71];
            v74 = *(_OWORD *)__dst;
            *((_QWORD *)v73 + 2) = v274;
            *(_OWORD *)v73 = v74;
            __dst[1] = 0;
            v274 = 0;
            __dst[0] = 0;
            v282 = v73 + 24;
            sub_20BDF34C0(v31 + 8, &v281);
            v67 = v31[9];
            sub_20BDF3648((uint64_t)&v281);
          }
          else
          {
            v66 = *(_OWORD *)__dst;
            *(_QWORD *)(v65 + 16) = v274;
            *(_OWORD *)v65 = v66;
            __dst[1] = 0;
            v274 = 0;
            __dst[0] = 0;
            v67 = v65 + 24;
            v31[9] = v65 + 24;
          }
          v31[9] = v67;
          sub_20C171AE4(a1, (uint64_t)&__p);
          v76 = v31[9];
          v75 = v31[10];
          if (v76 >= v75)
          {
            v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *v63) >> 3);
            v79 = v78 + 1;
            if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *v63) >> 3);
            if (2 * v80 > v79)
              v79 = 2 * v80;
            if (v80 >= 0x555555555555555)
              v81 = 0xAAAAAAAAAAAAAAALL;
            else
              v81 = v79;
            v284 = v31 + 10;
            if (v81)
              v82 = (char *)sub_20BDE4FF4((uint64_t)(v31 + 10), v81);
            else
              v82 = 0;
            v83 = &v82[24 * v78];
            *(_QWORD *)&v281 = v82;
            *((_QWORD *)&v281 + 1) = v83;
            v283 = &v82[24 * v81];
            v84 = __p;
            *((_QWORD *)v83 + 2) = v277;
            *(_OWORD *)v83 = v84;
            v277 = 0;
            __p = 0uLL;
            v282 = v83 + 24;
            sub_20BDF34C0(v31 + 8, &v281);
            v85 = v31[9];
            sub_20BDF3648((uint64_t)&v281);
            v86 = SHIBYTE(v277);
            v31[9] = v85;
            v34 = v15 + 8;
            if (v86 < 0)
              operator delete((void *)__p);
          }
          else
          {
            v77 = __p;
            *(_QWORD *)(v76 + 16) = v277;
            *(_OWORD *)v76 = v77;
            v31[9] = v76 + 24;
            v34 = v15 + 8;
          }
          if (SHIBYTE(v274) < 0)
            operator delete(__dst[0]);
        }
        if (*((char *)v31 + 55) < 0)
        {
          sub_20BDDBFAC(v269, (void *)v31[4], v31[5]);
        }
        else
        {
          *(_OWORD *)v269 = *((_OWORD *)v31 + 2);
          v270 = v31[6];
        }
        v88 = v15[9];
        v87 = v15[10];
        if (v88 >= v87)
        {
          v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - *v34) >> 3);
          v91 = v90 + 1;
          if (v90 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - *v34) >> 3);
          if (2 * v92 > v91)
            v91 = 2 * v92;
          if (v92 >= 0x555555555555555)
            v93 = 0xAAAAAAAAAAAAAAALL;
          else
            v93 = v91;
          v284 = v15 + 10;
          if (v93)
            v94 = (char *)sub_20BDE4FF4((uint64_t)(v15 + 10), v93);
          else
            v94 = 0;
          v95 = &v94[24 * v90];
          *(_QWORD *)&v281 = v94;
          *((_QWORD *)&v281 + 1) = v95;
          v283 = &v94[24 * v93];
          v96 = *(_OWORD *)v269;
          *((_QWORD *)v95 + 2) = v270;
          *(_OWORD *)v95 = v96;
          v269[1] = 0;
          v270 = 0;
          v269[0] = 0;
          v282 = v95 + 24;
          sub_20BDF34C0(v34, &v281);
          v97 = v15[9];
          sub_20BDF3648((uint64_t)&v281);
          v98 = SHIBYTE(v270);
          v15[9] = v97;
          if (v98 < 0)
            operator delete(v269[0]);
        }
        else
        {
          v89 = *(_OWORD *)v269;
          *(_QWORD *)(v88 + 16) = v270;
          *(_OWORD *)v88 = v89;
          v15[9] = v88 + 24;
        }
        if (SHIBYTE(v272) < 0)
          operator delete(v271[0]);
      }
      if (*((char *)v15 + 55) < 0)
      {
        sub_20BDDBFAC(v267, (void *)v15[4], v15[5]);
      }
      else
      {
        *(_OWORD *)v267 = *((_OWORD *)v15 + 2);
        v268 = v15[6];
      }
      v99 = v10[10];
      v100 = v10[9];
      v261 = v10 + 8;
      if (v100 >= v99)
      {
        v103 = v10[8];
        v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - v103) >> 3);
        v105 = v104 + 1;
        if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - v103) >> 3);
        if (2 * v106 > v105)
          v105 = 2 * v106;
        if (v106 >= 0x555555555555555)
          v107 = 0xAAAAAAAAAAAAAAALL;
        else
          v107 = v105;
        v284 = v10 + 10;
        if (v107)
          v108 = (char *)sub_20BDE4FF4((uint64_t)(v10 + 10), v107);
        else
          v108 = 0;
        v109 = &v108[24 * v104];
        *(_QWORD *)&v281 = v108;
        *((_QWORD *)&v281 + 1) = v109;
        v283 = &v108[24 * v107];
        v110 = *(_OWORD *)v267;
        *((_QWORD *)v109 + 2) = v268;
        *(_OWORD *)v109 = v110;
        v267[1] = 0;
        v268 = 0;
        v267[0] = 0;
        v282 = v109 + 24;
        sub_20BDF34C0(v261, &v281);
        v102 = v10[9];
        sub_20BDF3648((uint64_t)&v281);
      }
      else
      {
        v101 = *(_OWORD *)v267;
        *(_QWORD *)(v100 + 16) = v268;
        *(_OWORD *)v100 = v101;
        v267[1] = 0;
        v268 = 0;
        v267[0] = 0;
        v102 = v100 + 24;
        v10[9] = v100 + 24;
      }
      v10[9] = v102;
      v111 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustINS0_5ascii3oneIJLc39EEEEJNS0_5untilIS4_JN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v111)
      {
        sub_20BDDC0E4(&v279, v111);
        free(v111);
      }
      else
      {
        sub_20BDDC0E4(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustINS0_5ascii3oneIJLc39EEEEJNS0_5untilIS4_JN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(__p) = 2;
      v281 = v279;
      v282 = v280;
      v279 = 0uLL;
      v280 = 0;
      LOBYTE(v283) = 2;
      v285 = 0;
      v286 = 0;
      v284 = 0;
      v277 = 0;
      v278 = 0;
      *((_QWORD *)&__p + 1) = 0;
      v112 = sub_20C165DCC(a1, (const void **)&v281, &v281);
      v114 = v113;
      __dst[0] = &v284;
      sub_20BDE5038((void ***)__dst);
      if (SHIBYTE(v282) < 0)
        operator delete((void *)v281);
      __dst[0] = (char *)&__p + 8;
      sub_20BDE5038((void ***)__dst);
      if (SHIBYTE(v280) < 0)
        operator delete((void *)v279);
      if (v114)
      {
        sub_20C1744A4(a1, (uint64_t)v271);
        v115 = v112 + 8;
        v116 = v112[10];
        v117 = v112[9];
        if (v117 >= v116)
        {
          v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - *v115) >> 3);
          v121 = v120 + 1;
          if (v120 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - *v115) >> 3);
          if (2 * v122 > v121)
            v121 = 2 * v122;
          if (v122 >= 0x555555555555555)
            v123 = 0xAAAAAAAAAAAAAAALL;
          else
            v123 = v121;
          v284 = v112 + 10;
          if (v123)
            v124 = (char *)sub_20BDE4FF4((uint64_t)(v112 + 10), v123);
          else
            v124 = 0;
          v125 = &v124[24 * v120];
          *(_QWORD *)&v281 = v124;
          *((_QWORD *)&v281 + 1) = v125;
          v283 = &v124[24 * v123];
          v126 = *(_OWORD *)v271;
          *((_QWORD *)v125 + 2) = v272;
          *(_OWORD *)v125 = v126;
          v271[1] = 0;
          v272 = 0;
          v271[0] = 0;
          v282 = v125 + 24;
          sub_20BDF34C0(v112 + 8, &v281);
          v119 = v112[9];
          sub_20BDF3648((uint64_t)&v281);
        }
        else
        {
          v118 = *(_OWORD *)v271;
          *(_QWORD *)(v117 + 16) = v272;
          *(_OWORD *)v117 = v118;
          v271[1] = 0;
          v272 = 0;
          v271[0] = 0;
          v119 = v117 + 24;
          v112[9] = v117 + 24;
        }
        v112[9] = v119;
        v127 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v127)
        {
          sub_20BDDC0E4(&v279, v127);
          free(v127);
        }
        else
        {
          sub_20BDDC0E4(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(__p) = 2;
        v281 = v279;
        v282 = v280;
        v279 = 0uLL;
        v280 = 0;
        LOBYTE(v283) = 2;
        v285 = 0;
        v286 = 0;
        v284 = 0;
        v277 = 0;
        v278 = 0;
        *((_QWORD *)&__p + 1) = 0;
        v260 = sub_20C165DCC(a1, (const void **)&v281, &v281);
        v129 = v128;
        __dst[0] = &v284;
        sub_20BDE5038((void ***)__dst);
        if (SHIBYTE(v282) < 0)
          operator delete((void *)v281);
        __dst[0] = (char *)&__p + 8;
        sub_20BDE5038((void ***)__dst);
        if (SHIBYTE(v280) < 0)
          operator delete((void *)v279);
        if (v129)
        {
          v130 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEEJNS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v130)
          {
            sub_20BDDC0E4(&v279, v130);
            free(v130);
          }
          else
          {
            sub_20BDDC0E4(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEEJNS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(__p) = 1;
          v281 = v279;
          v282 = v280;
          v279 = 0uLL;
          v280 = 0;
          LOBYTE(v283) = 1;
          v285 = 0;
          v286 = 0;
          v284 = 0;
          v277 = 0;
          v278 = 0;
          *((_QWORD *)&__p + 1) = 0;
          v131 = sub_20C165DCC(a1, (const void **)&v281, &v281);
          v133 = v132;
          v275 = (void **)&v284;
          sub_20BDE5038(&v275);
          if (SHIBYTE(v282) < 0)
            operator delete((void *)v281);
          v275 = (void **)&__p + 1;
          sub_20BDE5038(&v275);
          if (SHIBYTE(v280) < 0)
            operator delete((void *)v279);
          if (v133)
          {
            sub_20C1745F8(a1, (uint64_t)&__p);
            v134 = v131 + 8;
            v135 = v131[10];
            v136 = v131[9];
            if (v136 >= v135)
            {
              v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - *v134) >> 3);
              v140 = v139 + 1;
              if (v139 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v134) >> 3);
              if (2 * v141 > v140)
                v140 = 2 * v141;
              if (v141 >= 0x555555555555555)
                v142 = 0xAAAAAAAAAAAAAAALL;
              else
                v142 = v140;
              v284 = v131 + 10;
              if (v142)
                v143 = (char *)sub_20BDE4FF4((uint64_t)(v131 + 10), v142);
              else
                v143 = 0;
              v144 = &v143[24 * v139];
              *(_QWORD *)&v281 = v143;
              *((_QWORD *)&v281 + 1) = v144;
              v283 = &v143[24 * v142];
              v145 = __p;
              *((_QWORD *)v144 + 2) = v277;
              *(_OWORD *)v144 = v145;
              v277 = 0;
              __p = 0uLL;
              v282 = v144 + 24;
              sub_20BDF34C0(v131 + 8, &v281);
              v138 = v131[9];
              sub_20BDF3648((uint64_t)&v281);
            }
            else
            {
              v137 = __p;
              *(_QWORD *)(v136 + 16) = v277;
              *(_OWORD *)v136 = v137;
              v277 = 0;
              __p = 0uLL;
              v138 = v136 + 24;
              v131[9] = v136 + 24;
            }
            v131[9] = v138;
            sub_20C175B80(a1, (uint64_t)&v279);
            v147 = v131[9];
            v146 = v131[10];
            if (v147 >= v146)
            {
              v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *v134) >> 3);
              v150 = v149 + 1;
              if (v149 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v134) >> 3);
              if (2 * v151 > v150)
                v150 = 2 * v151;
              if (v151 >= 0x555555555555555)
                v152 = 0xAAAAAAAAAAAAAAALL;
              else
                v152 = v150;
              v284 = v131 + 10;
              if (v152)
                v153 = (char *)sub_20BDE4FF4((uint64_t)(v131 + 10), v152);
              else
                v153 = 0;
              v154 = &v153[24 * v149];
              *(_QWORD *)&v281 = v153;
              *((_QWORD *)&v281 + 1) = v154;
              v283 = &v153[24 * v152];
              v155 = v279;
              *((_QWORD *)v154 + 2) = v280;
              *(_OWORD *)v154 = v155;
              v280 = 0;
              v279 = 0uLL;
              v282 = v154 + 24;
              sub_20BDF34C0(v131 + 8, &v281);
              v156 = v131[9];
              sub_20BDF3648((uint64_t)&v281);
              v157 = SHIBYTE(v280);
              v131[9] = v156;
              if (v157 < 0)
                operator delete((void *)v279);
            }
            else
            {
              v148 = v279;
              *(_QWORD *)(v147 + 16) = v280;
              *(_OWORD *)v147 = v148;
              v131[9] = v147 + 24;
            }
            if (SHIBYTE(v277) < 0)
              operator delete((void *)__p);
          }
          if (*((char *)v131 + 55) < 0)
          {
            sub_20BDDBFAC(__dst, (void *)v131[4], v131[5]);
          }
          else
          {
            *(_OWORD *)__dst = *((_OWORD *)v131 + 2);
            v274 = v131[6];
          }
          v158 = v260;
          v159 = v260 + 8;
          v160 = v260[10];
          v161 = v260[9];
          if (v161 >= v160)
          {
            v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v161 - *v159) >> 3);
            v165 = v164 + 1;
            if (v164 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v166 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - *v159) >> 3);
            if (2 * v166 > v165)
              v165 = 2 * v166;
            if (v166 >= 0x555555555555555)
              v167 = 0xAAAAAAAAAAAAAAALL;
            else
              v167 = v165;
            v284 = v260 + 10;
            if (v167)
              v168 = (char *)sub_20BDE4FF4((uint64_t)(v260 + 10), v167);
            else
              v168 = 0;
            v169 = &v168[24 * v164];
            *(_QWORD *)&v281 = v168;
            *((_QWORD *)&v281 + 1) = v169;
            v283 = &v168[24 * v167];
            v170 = *(_OWORD *)__dst;
            *((_QWORD *)v169 + 2) = v274;
            *(_OWORD *)v169 = v170;
            __dst[1] = 0;
            v274 = 0;
            __dst[0] = 0;
            v282 = v169 + 24;
            sub_20BDF34C0(v159, &v281);
            v158 = v260;
            v163 = v260[9];
            sub_20BDF3648((uint64_t)&v281);
          }
          else
          {
            v162 = *(_OWORD *)__dst;
            *(_QWORD *)(v161 + 16) = v274;
            *(_OWORD *)v161 = v162;
            __dst[1] = 0;
            v274 = 0;
            __dst[0] = 0;
            v163 = v161 + 24;
            v260[9] = v161 + 24;
          }
          v158[9] = v163;
          sub_20C1744A4(a1, (uint64_t)&__p);
          v172 = v158[9];
          v171 = v158[10];
          if (v172 >= v171)
          {
            v174 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172 - *v159) >> 3);
            v175 = v174 + 1;
            if (v174 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - *v159) >> 3);
            if (2 * v176 > v175)
              v175 = 2 * v176;
            if (v176 >= 0x555555555555555)
              v177 = 0xAAAAAAAAAAAAAAALL;
            else
              v177 = v175;
            v284 = v260 + 10;
            if (v177)
              v178 = (char *)sub_20BDE4FF4((uint64_t)(v260 + 10), v177);
            else
              v178 = 0;
            v179 = &v178[24 * v174];
            *(_QWORD *)&v281 = v178;
            *((_QWORD *)&v281 + 1) = v179;
            v283 = &v178[24 * v177];
            v180 = __p;
            *((_QWORD *)v179 + 2) = v277;
            *(_OWORD *)v179 = v180;
            v277 = 0;
            __p = 0uLL;
            v282 = v179 + 24;
            sub_20BDF34C0(v159, &v281);
            v181 = v260[9];
            sub_20BDF3648((uint64_t)&v281);
            v182 = SHIBYTE(v277);
            v260[9] = v181;
            if (v182 < 0)
              operator delete((void *)__p);
          }
          else
          {
            v173 = __p;
            *(_QWORD *)(v172 + 16) = v277;
            *(_OWORD *)v172 = v173;
            v158[9] = v172 + 24;
          }
          if (SHIBYTE(v274) < 0)
            operator delete(__dst[0]);
        }
        if (*((char *)v260 + 55) < 0)
        {
          sub_20BDDBFAC(v269, (void *)v260[4], v260[5]);
        }
        else
        {
          *(_OWORD *)v269 = *((_OWORD *)v260 + 2);
          v270 = v260[6];
        }
        v184 = v112[9];
        v183 = v112[10];
        if (v184 >= v183)
        {
          v186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v184 - *v115) >> 3);
          v187 = v186 + 1;
          if (v186 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v188 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v183 - *v115) >> 3);
          if (2 * v188 > v187)
            v187 = 2 * v188;
          if (v188 >= 0x555555555555555)
            v189 = 0xAAAAAAAAAAAAAAALL;
          else
            v189 = v187;
          v284 = v112 + 10;
          if (v189)
            v190 = (char *)sub_20BDE4FF4((uint64_t)(v112 + 10), v189);
          else
            v190 = 0;
          v191 = &v190[24 * v186];
          *(_QWORD *)&v281 = v190;
          *((_QWORD *)&v281 + 1) = v191;
          v283 = &v190[24 * v189];
          v192 = *(_OWORD *)v269;
          *((_QWORD *)v191 + 2) = v270;
          *(_OWORD *)v191 = v192;
          v269[1] = 0;
          v270 = 0;
          v269[0] = 0;
          v282 = v191 + 24;
          sub_20BDF34C0(v112 + 8, &v281);
          v193 = v112[9];
          sub_20BDF3648((uint64_t)&v281);
          v194 = SHIBYTE(v270);
          v112[9] = v193;
          if (v194 < 0)
            operator delete(v269[0]);
        }
        else
        {
          v185 = *(_OWORD *)v269;
          *(_QWORD *)(v184 + 16) = v270;
          *(_OWORD *)v184 = v185;
          v112[9] = v184 + 24;
        }
        if (SHIBYTE(v272) < 0)
          operator delete(v271[0]);
      }
      if (*((char *)v112 + 55) < 0)
      {
        sub_20BDDBFAC(v265, (void *)v112[4], v112[5]);
      }
      else
      {
        *(_OWORD *)v265 = *((_OWORD *)v112 + 2);
        v266 = v112[6];
      }
      v196 = v10[9];
      v195 = v10[10];
      if (v196 >= v195)
      {
        v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - *v261) >> 3);
        v199 = v198 + 1;
        if (v198 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - *v261) >> 3);
        if (2 * v200 > v199)
          v199 = 2 * v200;
        if (v200 >= 0x555555555555555)
          v201 = 0xAAAAAAAAAAAAAAALL;
        else
          v201 = v199;
        v284 = v10 + 10;
        if (v201)
          v202 = (char *)sub_20BDE4FF4((uint64_t)(v10 + 10), v201);
        else
          v202 = 0;
        v203 = &v202[24 * v198];
        *(_QWORD *)&v281 = v202;
        *((_QWORD *)&v281 + 1) = v203;
        v283 = &v202[24 * v201];
        v204 = *(_OWORD *)v265;
        *((_QWORD *)v203 + 2) = v266;
        *(_OWORD *)v203 = v204;
        v265[1] = 0;
        v266 = 0;
        v265[0] = 0;
        v282 = v203 + 24;
        sub_20BDF34C0(v261, &v281);
        v205 = v10[9];
        sub_20BDF3648((uint64_t)&v281);
        v206 = SHIBYTE(v266);
        v10[9] = v205;
        if (v206 < 0)
          operator delete(v265[0]);
      }
      else
      {
        v197 = *(_OWORD *)v265;
        *(_QWORD *)(v196 + 16) = v266;
        *(_OWORD *)v196 = v197;
        v10[9] = v196 + 24;
      }
      if (SHIBYTE(v268) < 0)
        operator delete(v267[0]);
    }
    if (*((char *)v10 + 55) < 0)
    {
      sub_20BDDBFAC(v263, (void *)v10[4], v10[5]);
    }
    else
    {
      *(_OWORD *)v263 = *((_OWORD *)v10 + 2);
      v264 = v10[6];
    }
    v207 = v5 + 8;
    v208 = v5[10];
    v209 = v5[9];
    if (v209 >= v208)
    {
      v212 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209 - *v207) >> 3);
      v213 = v212 + 1;
      if (v212 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v214 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v208 - *v207) >> 3);
      if (2 * v214 > v213)
        v213 = 2 * v214;
      if (v214 >= 0x555555555555555)
        v215 = 0xAAAAAAAAAAAAAAALL;
      else
        v215 = v213;
      v284 = v5 + 10;
      if (v215)
        v216 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v215);
      else
        v216 = 0;
      v217 = &v216[24 * v212];
      *(_QWORD *)&v281 = v216;
      *((_QWORD *)&v281 + 1) = v217;
      v283 = &v216[24 * v215];
      v218 = *(_OWORD *)v263;
      *((_QWORD *)v217 + 2) = v264;
      *(_OWORD *)v217 = v218;
      v263[1] = 0;
      v264 = 0;
      v263[0] = 0;
      v282 = v217 + 24;
      sub_20BDF34C0(v5 + 8, &v281);
      v211 = v5[9];
      sub_20BDF3648((uint64_t)&v281);
    }
    else
    {
      v210 = *(_OWORD *)v263;
      *(_QWORD *)(v209 + 16) = v264;
      *(_OWORD *)v209 = v210;
      v263[1] = 0;
      v264 = 0;
      v263[0] = 0;
      v211 = v209 + 24;
      v5[9] = v209 + 24;
    }
    v5[9] = v211;
    v219 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114UnquotedStringE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v219)
    {
      sub_20BDDC0E4(&v279, v219);
      free(v219);
    }
    else
    {
      sub_20BDDC0E4(&v279, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114UnquotedStringE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(__p) = 1;
    v281 = v279;
    v282 = v280;
    v279 = 0uLL;
    v280 = 0;
    LOBYTE(v283) = 1;
    v285 = 0;
    v286 = 0;
    v284 = 0;
    v277 = 0;
    v278 = 0;
    *((_QWORD *)&__p + 1) = 0;
    v220 = sub_20C165DCC(a1, (const void **)&v281, &v281);
    v222 = v221;
    v271[0] = &v284;
    sub_20BDE5038((void ***)v271);
    if (SHIBYTE(v282) < 0)
      operator delete((void *)v281);
    v271[0] = (char *)&__p + 8;
    sub_20BDE5038((void ***)v271);
    if (SHIBYTE(v280) < 0)
      operator delete((void *)v279);
    if (v222)
    {
      sub_20C1762C8(a1, (uint64_t)&__p);
      v223 = v220 + 8;
      v224 = v220[10];
      v225 = v220[9];
      if (v225 >= v224)
      {
        v228 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v225 - *v223) >> 3);
        v229 = v228 + 1;
        if (v228 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v230 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - *v223) >> 3);
        if (2 * v230 > v229)
          v229 = 2 * v230;
        if (v230 >= 0x555555555555555)
          v231 = 0xAAAAAAAAAAAAAAALL;
        else
          v231 = v229;
        v284 = v220 + 10;
        if (v231)
          v232 = (char *)sub_20BDE4FF4((uint64_t)(v220 + 10), v231);
        else
          v232 = 0;
        v233 = &v232[24 * v228];
        *(_QWORD *)&v281 = v232;
        *((_QWORD *)&v281 + 1) = v233;
        v283 = &v232[24 * v231];
        v234 = __p;
        *((_QWORD *)v233 + 2) = v277;
        *(_OWORD *)v233 = v234;
        v277 = 0;
        __p = 0uLL;
        v282 = v233 + 24;
        sub_20BDF34C0(v220 + 8, &v281);
        v227 = v220[9];
        sub_20BDF3648((uint64_t)&v281);
      }
      else
      {
        v226 = __p;
        *(_QWORD *)(v225 + 16) = v277;
        *(_OWORD *)v225 = v226;
        v277 = 0;
        __p = 0uLL;
        v227 = v225 + 24;
        v220[9] = v225 + 24;
      }
      v220[9] = v227;
      sub_20C1766D0(a1, (uint64_t)&v279);
      v236 = v220[9];
      v235 = v220[10];
      if (v236 >= v235)
      {
        v238 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v236 - *v223) >> 3);
        v239 = v238 + 1;
        if (v238 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v240 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v235 - *v223) >> 3);
        if (2 * v240 > v239)
          v239 = 2 * v240;
        if (v240 >= 0x555555555555555)
          v241 = 0xAAAAAAAAAAAAAAALL;
        else
          v241 = v239;
        v284 = v220 + 10;
        if (v241)
          v242 = (char *)sub_20BDE4FF4((uint64_t)(v220 + 10), v241);
        else
          v242 = 0;
        v243 = &v242[24 * v238];
        *(_QWORD *)&v281 = v242;
        *((_QWORD *)&v281 + 1) = v243;
        v283 = &v242[24 * v241];
        v244 = v279;
        *((_QWORD *)v243 + 2) = v280;
        *(_OWORD *)v243 = v244;
        v280 = 0;
        v279 = 0uLL;
        v282 = v243 + 24;
        sub_20BDF34C0(v220 + 8, &v281);
        v245 = v220[9];
        sub_20BDF3648((uint64_t)&v281);
        v246 = SHIBYTE(v280);
        v220[9] = v245;
        if (v246 < 0)
          operator delete((void *)v279);
      }
      else
      {
        v237 = v279;
        *(_QWORD *)(v236 + 16) = v280;
        *(_OWORD *)v236 = v237;
        v220[9] = v236 + 24;
      }
      if (SHIBYTE(v277) < 0)
        operator delete((void *)__p);
    }
    if (*((char *)v220 + 55) < 0)
    {
      sub_20BDDBFAC(__dst, (void *)v220[4], v220[5]);
    }
    else
    {
      *(_OWORD *)__dst = *((_OWORD *)v220 + 2);
      v274 = v220[6];
    }
    v248 = v5[9];
    v247 = v5[10];
    if (v248 >= v247)
    {
      v250 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v248 - *v207) >> 3);
      v251 = v250 + 1;
      if (v250 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v252 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v247 - *v207) >> 3);
      if (2 * v252 > v251)
        v251 = 2 * v252;
      if (v252 >= 0x555555555555555)
        v253 = 0xAAAAAAAAAAAAAAALL;
      else
        v253 = v251;
      v284 = v5 + 10;
      if (v253)
        v254 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v253);
      else
        v254 = 0;
      v255 = &v254[24 * v250];
      *(_QWORD *)&v281 = v254;
      *((_QWORD *)&v281 + 1) = v255;
      v283 = &v254[24 * v253];
      v256 = *(_OWORD *)__dst;
      *((_QWORD *)v255 + 2) = v274;
      *(_OWORD *)v255 = v256;
      __dst[1] = 0;
      v274 = 0;
      __dst[0] = 0;
      v282 = v255 + 24;
      sub_20BDF34C0(v5 + 8, &v281);
      v257 = v5[9];
      sub_20BDF3648((uint64_t)&v281);
      v258 = SHIBYTE(v274);
      v5[9] = v257;
      if (v258 < 0)
        operator delete(__dst[0]);
    }
    else
    {
      v249 = *(_OWORD *)__dst;
      *(_QWORD *)(v248 + 16) = v274;
      *(_OWORD *)v248 = v249;
      v5[9] = v248 + 24;
    }
    if (SHIBYTE(v264) < 0)
      operator delete(v263[0]);
  }
  if (*((char *)v5 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v5[4], v5[5]);
  }
  else
  {
    v259 = *((_OWORD *)v5 + 2);
    *(_QWORD *)(a2 + 16) = v5[6];
    *(_OWORD *)a2 = v259;
  }
}

void sub_20C16E4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  sub_20BDF3648(v59 - 160);
  if (*(char *)(v59 - 161) < 0)
    operator delete(*(void **)(v59 - 184));
  if (a59 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

void sub_20C16E92C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16E9A0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C16E9B4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C16EB64(a1, 1);
  if (v5)
  {
    sub_20C16EC64(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C16EB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C16EB64(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C0995D8(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C16EC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C16EC64@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C16ECB8(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C16ECB8(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C099668(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C16ED88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C16EDB8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C16EE0C(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C16EE0C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C16EF0C(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C16EEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C16EF0C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB903ALL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB903ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16EF88(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C16EF9C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  char v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  void *v32[2];
  uint64_t v33;
  uint64_t v34;
  void *v35[2];
  _QWORD *v36;
  void *__p[2];
  _QWORD *v38;
  char *v39;
  _QWORD v40[3];
  void **v41;

  sub_20C16F554(v35);
  LOBYTE(v32[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v35;
  v38 = v36;
  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  LOBYTE(v39) = 2;
  memset(v40, 0, sizeof(v40));
  v33 = 0;
  v34 = 0;
  v32[1] = 0;
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v6 = v5;
  v41 = (void **)v40;
  sub_20BDE5038(&v41);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  v41 = &v32[1];
  sub_20BDE5038(&v41);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  if (v6)
  {
    sub_20C16F350(a1, (uint64_t)v32);
    v7 = v4[10];
    v8 = v4 + 8;
    v9 = v4[9];
    if (v9 >= v7)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v8) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v8) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      v40[0] = v4 + 10;
      if (v15)
        v16 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      __p[0] = v16;
      __p[1] = v17;
      v39 = &v16[24 * v15];
      v18 = *(_OWORD *)v32;
      *((_QWORD *)v17 + 2) = v33;
      *(_OWORD *)v17 = v18;
      v32[1] = 0;
      v33 = 0;
      v32[0] = 0;
      v38 = v17 + 24;
      sub_20BDF34C0(v4 + 8, __p);
      v11 = v4[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v10 = *(_OWORD *)v32;
      *(_QWORD *)(v9 + 16) = v33;
      *(_OWORD *)v9 = v10;
      v32[1] = 0;
      v33 = 0;
      v32[0] = 0;
      v11 = v9 + 24;
      v4[9] = v9 + 24;
    }
    v4[9] = v11;
    sub_20C16F3A4(a1, (uint64_t)v35);
    v20 = v4[9];
    v19 = v4[10];
    if (v20 >= v19)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v8) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v8) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      v40[0] = v4 + 10;
      if (v25)
        v26 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v25);
      else
        v26 = 0;
      v27 = &v26[24 * v22];
      __p[0] = v26;
      __p[1] = v27;
      v39 = &v26[24 * v25];
      v28 = *(_OWORD *)v35;
      *((_QWORD *)v27 + 2) = v36;
      *(_OWORD *)v27 = v28;
      v35[1] = 0;
      v36 = 0;
      v35[0] = 0;
      v38 = v27 + 24;
      sub_20BDF34C0(v4 + 8, __p);
      v29 = v4[9];
      sub_20BDF3648((uint64_t)__p);
      v30 = SHIBYTE(v36);
      v4[9] = v29;
      if (v30 < 0)
        operator delete(v35[0]);
    }
    else
    {
      v21 = *(_OWORD *)v35;
      *(_QWORD *)(v20 + 16) = v36;
      *(_OWORD *)v20 = v21;
      v4[9] = v20 + 24;
    }
    if (SHIBYTE(v33) < 0)
      operator delete(v32[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v31 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v31;
  }
}

void sub_20C16F2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C16F350@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C16F5DC(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C16F3A4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C16F76C(a1, 1);
  if (v5)
  {
    sub_20C16F86C(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C16F528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C16F554(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16F5C8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C16F5DC(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C16F6DC(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C16F6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C16F6DC(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB919CLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB919CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16F758(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C16F76C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C16FB68(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C16F83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C16F86C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t *v39;

  v4 = sub_20C16FBF8(a1, 2);
  if (v5)
  {
    sub_20C16F350(a1, (uint64_t)v33);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v39 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v35 = v15;
      v36 = v16;
      v38 = &v15[24 * v14];
      v17 = *(_OWORD *)v33;
      *((_QWORD *)v16 + 2) = v34;
      *(_OWORD *)v16 = v17;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v37 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
    }
    else
    {
      v9 = *(_OWORD *)v33;
      *(_QWORD *)(v8 + 16) = v34;
      *(_OWORD *)v8 = v9;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C16F3A4(__p, a1);
    v19 = v4[9];
    v18 = v4[10];
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v39 = v4 + 10;
      if (v24)
        v25 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v24);
      else
        v25 = 0;
      v26 = &v25[24 * v21];
      v35 = v25;
      v36 = v26;
      v38 = &v25[24 * v24];
      v27 = *(_OWORD *)__p;
      *((_QWORD *)v26 + 2) = v32;
      *(_OWORD *)v26 = v27;
      __p[1] = 0;
      v32 = 0;
      __p[0] = 0;
      v37 = v26 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v28 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
      v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 16) = v32;
      *(_OWORD *)v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v30 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_20C16FB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_20BDF3648((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20C16FB68(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB91D2 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB91D2 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16FBE4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C16FBF8(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C16FCF8(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C16FCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C16FCF8(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB914FLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB914FLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C16FD74(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C16FD88(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t *v22;
  char v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  void *v62[2];
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  void *v66[2];
  uint64_t v67;
  uint64_t v68;
  void *v69[2];
  _QWORD *v70;
  void *__p[2];
  _QWORD *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void **v77[2];

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v69, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v69, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v66[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v69;
  v72 = v70;
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  LOBYTE(v73) = 2;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v67 = 0;
  v68 = 0;
  v66[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v64[0] = &v74;
  sub_20BDE5038((void ***)v64);
  if (SHIBYTE(v72) < 0)
    operator delete(__p[0]);
  v64[0] = &v66[1];
  sub_20BDE5038((void ***)v64);
  if (SHIBYTE(v70) < 0)
    operator delete(v69[0]);
  if (v8)
  {
    sub_20C170540(a1, (uint64_t)v64);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v74 = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v73 = &v18[24 * v17];
      v20 = *(_OWORD *)v64;
      *((_QWORD *)v19 + 2) = v65;
      *(_OWORD *)v19 = v20;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v72 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v64;
      *(_QWORD *)(v11 + 16) = v65;
      *(_OWORD *)v11 = v12;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_20BDDC0E4(v69, v21);
      free(v21);
    }
    else
    {
      sub_20BDDC0E4(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v66[0]) = 2;
    *(_OWORD *)__p = *(_OWORD *)v69;
    v72 = v70;
    v69[0] = 0;
    v69[1] = 0;
    v70 = 0;
    LOBYTE(v73) = 2;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    v67 = 0;
    v68 = 0;
    v66[1] = 0;
    v22 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v24 = v23;
    v77[0] = (void **)&v74;
    sub_20BDE5038(v77);
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    v77[0] = &v66[1];
    sub_20BDE5038(v77);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
    if (v24)
    {
      sub_20C16F350(a1, (uint64_t)v66);
      v25 = v22 + 8;
      v26 = v22[10];
      v27 = v22[9];
      if (v27 >= v26)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        v74 = v22 + 10;
        if (v33)
          v34 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v33);
        else
          v34 = 0;
        v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        v73 = &v34[24 * v33];
        v36 = *(_OWORD *)v66;
        *((_QWORD *)v35 + 2) = v67;
        *(_OWORD *)v35 = v36;
        v66[1] = 0;
        v67 = 0;
        v66[0] = 0;
        v72 = v35 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v29 = v22[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v28 = *(_OWORD *)v66;
        *(_QWORD *)(v27 + 16) = v67;
        *(_OWORD *)v27 = v28;
        v66[1] = 0;
        v67 = 0;
        v66[0] = 0;
        v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_20C16F3A4(a1, (uint64_t)v69);
      v38 = v22[9];
      v37 = v22[10];
      if (v38 >= v37)
      {
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0x555555555555555)
          v43 = 0xAAAAAAAAAAAAAAALL;
        else
          v43 = v41;
        v74 = v22 + 10;
        if (v43)
          v44 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v43);
        else
          v44 = 0;
        v45 = &v44[24 * v40];
        __p[0] = v44;
        __p[1] = v45;
        v73 = &v44[24 * v43];
        v46 = *(_OWORD *)v69;
        *((_QWORD *)v45 + 2) = v70;
        *(_OWORD *)v45 = v46;
        v69[1] = 0;
        v70 = 0;
        v69[0] = 0;
        v72 = v45 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v47 = v22[9];
        sub_20BDF3648((uint64_t)__p);
        v48 = SHIBYTE(v70);
        v22[9] = v47;
        if (v48 < 0)
          operator delete(v69[0]);
      }
      else
      {
        v39 = *(_OWORD *)v69;
        *(_QWORD *)(v38 + 16) = v70;
        *(_OWORD *)v38 = v39;
        v22[9] = v38 + 24;
      }
      if (SHIBYTE(v67) < 0)
        operator delete(v66[0]);
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_20BDDBFAC(v62, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)v62 = *((_OWORD *)v22 + 2);
      v63 = v22[6];
    }
    v50 = v6[9];
    v49 = v6[10];
    if (v50 >= v49)
    {
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v10) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v10) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      v74 = v6 + 10;
      if (v55)
        v56 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v55);
      else
        v56 = 0;
      v57 = &v56[24 * v52];
      __p[0] = v56;
      __p[1] = v57;
      v73 = &v56[24 * v55];
      v58 = *(_OWORD *)v62;
      *((_QWORD *)v57 + 2) = v63;
      *(_OWORD *)v57 = v58;
      v62[1] = 0;
      v63 = 0;
      v62[0] = 0;
      v72 = v57 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v59 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v60 = SHIBYTE(v63);
      v6[9] = v59;
      if (v60 < 0)
        operator delete(v62[0]);
    }
    else
    {
      v51 = *(_OWORD *)v62;
      *(_QWORD *)(v50 + 16) = v63;
      *(_OWORD *)v50 = v51;
      v6[9] = v50 + 24;
    }
    if (SHIBYTE(v65) < 0)
      operator delete(v64[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v61 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v61;
  }
}

void sub_20C170428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  sub_20BDF3648((uint64_t)&a35);
  if (a34 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C170540@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C170594(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C170594(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C170694(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C170664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C170694(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB935ELL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB935ELL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C170710(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C170724(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  uint64_t *v33;
  char v34;
  char v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  void *v73[2];
  uint64_t v74;
  void *v75[2];
  uint64_t v76;
  void *v77[2];
  uint64_t v78;
  void *v79[2];
  uint64_t v80;
  uint64_t v81;
  void *v82[2];
  _QWORD *v83;
  void *__p[2];
  _QWORD *v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  void **v90[2];

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13ExpE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v82, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v82, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13ExpE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v79[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v82;
  v85 = v83;
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0;
  LOBYTE(v86) = 2;
  v88 = 0;
  v89 = 0;
  v87 = 0;
  v80 = 0;
  v81 = 0;
  v79[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v77[0] = &v87;
  sub_20BDE5038((void ***)v77);
  if (SHIBYTE(v85) < 0)
    operator delete(__p[0]);
  v77[0] = &v79[1];
  sub_20BDE5038((void ***)v77);
  if (SHIBYTE(v83) < 0)
    operator delete(v82[0]);
  if (v8)
  {
    sub_20C171014(a1, (uint64_t)v77);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v87 = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v86 = &v18[24 * v17];
      v20 = *(_OWORD *)v77;
      *((_QWORD *)v19 + 2) = v78;
      *(_OWORD *)v19 = v20;
      v77[1] = 0;
      v78 = 0;
      v77[0] = 0;
      v85 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v77;
      *(_QWORD *)(v11 + 16) = v78;
      *(_OWORD *)v11 = v12;
      v77[1] = 0;
      v78 = 0;
      v77[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C171068(a1, (uint64_t)v75);
    v21 = v6[9];
    v22 = v6[10];
    if (v21 >= v22)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x555555555555555)
        v28 = 0xAAAAAAAAAAAAAAALL;
      else
        v28 = v26;
      v87 = v6 + 10;
      if (v28)
        v29 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v28);
      else
        v29 = 0;
      v30 = &v29[24 * v25];
      __p[0] = v29;
      __p[1] = v30;
      v86 = &v29[24 * v28];
      v31 = *(_OWORD *)v75;
      *((_QWORD *)v30 + 2) = v76;
      *(_OWORD *)v30 = v31;
      v75[1] = 0;
      v76 = 0;
      v75[0] = 0;
      v85 = v30 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v24 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v23 = *(_OWORD *)v75;
      *(_QWORD *)(v21 + 16) = v76;
      *(_OWORD *)v21 = v23;
      v75[1] = 0;
      v76 = 0;
      v75[0] = 0;
      v24 = v21 + 24;
      v6[9] = v21 + 24;
    }
    v6[9] = v24;
    v32 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v32)
    {
      sub_20BDDC0E4(v82, v32);
      free(v32);
    }
    else
    {
      sub_20BDDC0E4(v82, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v79[0]) = 2;
    *(_OWORD *)__p = *(_OWORD *)v82;
    v85 = v83;
    v82[0] = 0;
    v82[1] = 0;
    v83 = 0;
    LOBYTE(v86) = 2;
    v88 = 0;
    v89 = 0;
    v87 = 0;
    v80 = 0;
    v81 = 0;
    v79[1] = 0;
    v33 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v35 = v34;
    v90[0] = (void **)&v87;
    sub_20BDE5038(v90);
    if (SHIBYTE(v85) < 0)
      operator delete(__p[0]);
    v90[0] = &v79[1];
    sub_20BDE5038(v90);
    if (SHIBYTE(v83) < 0)
      operator delete(v82[0]);
    if (v35)
    {
      sub_20C16F350(a1, (uint64_t)v79);
      v36 = v33 + 8;
      v37 = v33[10];
      v38 = v33[9];
      if (v38 >= v37)
      {
        v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v36) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v36) >> 3);
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0x555555555555555)
          v44 = 0xAAAAAAAAAAAAAAALL;
        else
          v44 = v42;
        v87 = v33 + 10;
        if (v44)
          v45 = (char *)sub_20BDE4FF4((uint64_t)(v33 + 10), v44);
        else
          v45 = 0;
        v46 = &v45[24 * v41];
        __p[0] = v45;
        __p[1] = v46;
        v86 = &v45[24 * v44];
        v47 = *(_OWORD *)v79;
        *((_QWORD *)v46 + 2) = v80;
        *(_OWORD *)v46 = v47;
        v79[1] = 0;
        v80 = 0;
        v79[0] = 0;
        v85 = v46 + 24;
        sub_20BDF34C0(v33 + 8, __p);
        v40 = v33[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v39 = *(_OWORD *)v79;
        *(_QWORD *)(v38 + 16) = v80;
        *(_OWORD *)v38 = v39;
        v79[1] = 0;
        v80 = 0;
        v79[0] = 0;
        v40 = v38 + 24;
        v33[9] = v38 + 24;
      }
      v33[9] = v40;
      sub_20C16F3A4(a1, (uint64_t)v82);
      v49 = v33[9];
      v48 = v33[10];
      if (v49 >= v48)
      {
        v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v36) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *v36) >> 3);
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0x555555555555555)
          v54 = 0xAAAAAAAAAAAAAAALL;
        else
          v54 = v52;
        v87 = v33 + 10;
        if (v54)
          v55 = (char *)sub_20BDE4FF4((uint64_t)(v33 + 10), v54);
        else
          v55 = 0;
        v56 = &v55[24 * v51];
        __p[0] = v55;
        __p[1] = v56;
        v86 = &v55[24 * v54];
        v57 = *(_OWORD *)v82;
        *((_QWORD *)v56 + 2) = v83;
        *(_OWORD *)v56 = v57;
        v82[1] = 0;
        v83 = 0;
        v82[0] = 0;
        v85 = v56 + 24;
        sub_20BDF34C0(v33 + 8, __p);
        v58 = v33[9];
        sub_20BDF3648((uint64_t)__p);
        v59 = SHIBYTE(v83);
        v33[9] = v58;
        if (v59 < 0)
          operator delete(v82[0]);
      }
      else
      {
        v50 = *(_OWORD *)v82;
        *(_QWORD *)(v49 + 16) = v83;
        *(_OWORD *)v49 = v50;
        v33[9] = v49 + 24;
      }
      if (SHIBYTE(v80) < 0)
        operator delete(v79[0]);
    }
    if (*((char *)v33 + 55) < 0)
    {
      sub_20BDDBFAC(v73, (void *)v33[4], v33[5]);
    }
    else
    {
      *(_OWORD *)v73 = *((_OWORD *)v33 + 2);
      v74 = v33[6];
    }
    v61 = v6[9];
    v60 = v6[10];
    if (v61 >= v60)
    {
      v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *v10) >> 3);
      v64 = v63 + 1;
      if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v10) >> 3);
      if (2 * v65 > v64)
        v64 = 2 * v65;
      if (v65 >= 0x555555555555555)
        v66 = 0xAAAAAAAAAAAAAAALL;
      else
        v66 = v64;
      v87 = v6 + 10;
      if (v66)
        v67 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v66);
      else
        v67 = 0;
      v68 = &v67[24 * v63];
      __p[0] = v67;
      __p[1] = v68;
      v86 = &v67[24 * v66];
      v69 = *(_OWORD *)v73;
      *((_QWORD *)v68 + 2) = v74;
      *(_OWORD *)v68 = v69;
      v73[1] = 0;
      v74 = 0;
      v73[0] = 0;
      v85 = v68 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v70 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v71 = SHIBYTE(v74);
      v6[9] = v70;
      if (v71 < 0)
        operator delete(v73[0]);
    }
    else
    {
      v62 = *(_OWORD *)v73;
      *(_QWORD *)(v61 + 16) = v74;
      *(_OWORD *)v61 = v62;
      v6[9] = v61 + 24;
    }
    if (SHIBYTE(v76) < 0)
      operator delete(v75[0]);
    if (SHIBYTE(v78) < 0)
      operator delete(v77[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v72 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v72;
  }
}

void sub_20C170ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  sub_20BDF3648((uint64_t)&a40);
  if (a39 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C171014@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C171218(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C171068(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C1713A8(a1, 1);
  if (v5)
  {
    sub_20C1714A8(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C1711EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C171218(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C171318(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C1712E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C171318(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB948BLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB948BLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C171394(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1713A8(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C1714FC(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C171478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1714A8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C17158C(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C1714FC(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB94C2 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB94C2 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C171578(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C17158C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C17168C(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C17165C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C17168C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB9505 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB9505 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C171708(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C17171C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C171770(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C171770(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C171870(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C171840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C171870(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB973ALL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB973ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C1718EC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C171900@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C171954(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C171954(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C171A54(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C171A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C171A54(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB97BDLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB97BDLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C171AD0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C171AE4@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C171B38(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C171B38(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C093C28(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C171C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C171C38(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t *v5;
  char v6;
  char v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  uint64_t *v32;
  char v33;
  char v34;
  uint64_t *v35;
  char *v36;
  uint64_t *v37;
  char v38;
  char v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  uint64_t *v53;
  char v54;
  char v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  char *v104;
  uint64_t *v105;
  char v106;
  char v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  char *v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  __int128 v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  __int128 v155;
  uint64_t v156;
  int v157;
  __int128 v158;
  uint64_t *v159;
  void *v161[2];
  uint64_t v162;
  void *v163[2];
  uint64_t v164;
  void *v165[2];
  uint64_t v166;
  void *v167[2];
  uint64_t v168;
  void *__dst[2];
  uint64_t v170;
  void *__p[2];
  uint64_t v172;
  void *v173[2];
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  char *v179;
  __int128 v180;
  char *v181;
  char *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  void **v186[3];

  v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEENS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    v4 = v3;
    sub_20BDDC0E4(&v178, v3);
    free(v4);
  }
  else
  {
    sub_20BDDC0E4(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEENS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v175) = 2;
  v180 = v178;
  v181 = v179;
  v178 = 0uLL;
  v179 = 0;
  LOBYTE(v182) = 2;
  v184 = 0;
  v185 = 0;
  v183 = 0;
  v176 = 0;
  v177 = 0;
  *((_QWORD *)&v175 + 1) = 0;
  v5 = sub_20C165DCC(a1, (const void **)&v180, &v180);
  v7 = v6;
  v173[0] = &v183;
  sub_20BDE5038((void ***)v173);
  if (SHIBYTE(v181) < 0)
    operator delete((void *)v180);
  v173[0] = (char *)&v175 + 8;
  sub_20BDE5038((void ***)v173);
  if (SHIBYTE(v179) < 0)
    operator delete((void *)v178);
  if (v7)
  {
    sub_20C1735C8(a1, (uint64_t)v165);
    v8 = v5[10];
    v9 = v5 + 8;
    v10 = v5[9];
    if (v10 >= v8)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v9) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v9) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      v183 = v5 + 10;
      if (v16)
        v17 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v16);
      else
        v17 = 0;
      v18 = &v17[24 * v13];
      *(_QWORD *)&v180 = v17;
      *((_QWORD *)&v180 + 1) = v18;
      v182 = &v17[24 * v16];
      v19 = *(_OWORD *)v165;
      *((_QWORD *)v18 + 2) = v166;
      *(_OWORD *)v18 = v19;
      v165[1] = 0;
      v166 = 0;
      v165[0] = 0;
      v181 = v18 + 24;
      sub_20BDF34C0(v5 + 8, &v180);
      v12 = v5[9];
      sub_20BDF3648((uint64_t)&v180);
    }
    else
    {
      v11 = *(_OWORD *)v165;
      *(_QWORD *)(v10 + 16) = v166;
      *(_OWORD *)v10 = v11;
      v165[1] = 0;
      v166 = 0;
      v165[0] = 0;
      v12 = v10 + 24;
      v5[9] = v10 + 24;
    }
    v5[9] = v12;
    sub_20C173778(a1, (uint64_t)v163);
    v20 = v5[9];
    v21 = v5[10];
    if (v20 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v9) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v9) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v183 = v5 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      *(_QWORD *)&v180 = v28;
      *((_QWORD *)&v180 + 1) = v29;
      v182 = &v28[24 * v27];
      v30 = *(_OWORD *)v163;
      *((_QWORD *)v29 + 2) = v164;
      *(_OWORD *)v29 = v30;
      v163[1] = 0;
      v164 = 0;
      v163[0] = 0;
      v181 = v29 + 24;
      sub_20BDF34C0(v5 + 8, &v180);
      v23 = v5[9];
      sub_20BDF3648((uint64_t)&v180);
    }
    else
    {
      v22 = *(_OWORD *)v163;
      *(_QWORD *)(v20 + 16) = v164;
      *(_OWORD *)v20 = v22;
      v163[1] = 0;
      v164 = 0;
      v163[0] = 0;
      v23 = v20 + 24;
      v5[9] = v20 + 24;
    }
    v5[9] = v23;
    v31 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v31)
    {
      sub_20BDDC0E4(&v178, v31);
      free(v31);
    }
    else
    {
      sub_20BDDC0E4(&v178, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v175) = 3;
    v180 = v178;
    v181 = v179;
    v178 = 0uLL;
    v179 = 0;
    LOBYTE(v182) = 3;
    v184 = 0;
    v185 = 0;
    v183 = 0;
    v176 = 0;
    v177 = 0;
    *((_QWORD *)&v175 + 1) = 0;
    v32 = sub_20C165DCC(a1, (const void **)&v180, &v180);
    v34 = v33;
    v173[0] = &v183;
    sub_20BDE5038((void ***)v173);
    if (SHIBYTE(v181) < 0)
      operator delete((void *)v180);
    v173[0] = (char *)&v175 + 8;
    sub_20BDE5038((void ***)v173);
    if (SHIBYTE(v179) < 0)
      operator delete((void *)v178);
    v35 = v5 + 8;
    if (v34)
    {
      v36 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc92EEEENS0_4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS4_IJLc34EEEEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v36)
      {
        sub_20BDDC0E4(&v178, v36);
        free(v36);
      }
      else
      {
        sub_20BDDC0E4(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc92EEEENS0_4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS4_IJLc34EEEEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v175) = 2;
      v180 = v178;
      v181 = v179;
      v178 = 0uLL;
      v179 = 0;
      LOBYTE(v182) = 2;
      v184 = 0;
      v185 = 0;
      v183 = 0;
      v176 = 0;
      v177 = 0;
      *((_QWORD *)&v175 + 1) = 0;
      v37 = sub_20C165DCC(a1, (const void **)&v180, &v180);
      v39 = v38;
      v173[0] = &v183;
      sub_20BDE5038((void ***)v173);
      if (SHIBYTE(v181) < 0)
        operator delete((void *)v180);
      v173[0] = (char *)&v175 + 8;
      sub_20BDE5038((void ***)v173);
      if (SHIBYTE(v179) < 0)
        operator delete((void *)v178);
      if (v39)
      {
        sub_20C173E2C(a1, (uint64_t)v173);
        v40 = v37 + 8;
        v41 = v37[10];
        v42 = v37[9];
        v159 = v37 + 8;
        if (v42 >= v41)
        {
          v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v40) >> 3);
          v46 = v45 + 1;
          if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v40) >> 3);
          if (2 * v47 > v46)
            v46 = 2 * v47;
          if (v47 >= 0x555555555555555)
            v48 = 0xAAAAAAAAAAAAAAALL;
          else
            v48 = v46;
          v183 = v37 + 10;
          if (v48)
            v49 = (char *)sub_20BDE4FF4((uint64_t)(v37 + 10), v48);
          else
            v49 = 0;
          v50 = &v49[24 * v45];
          *(_QWORD *)&v180 = v49;
          *((_QWORD *)&v180 + 1) = v50;
          v182 = &v49[24 * v48];
          v51 = *(_OWORD *)v173;
          *((_QWORD *)v50 + 2) = v174;
          *(_OWORD *)v50 = v51;
          v173[1] = 0;
          v174 = 0;
          v173[0] = 0;
          v181 = v50 + 24;
          sub_20BDF34C0(v37 + 8, &v180);
          v44 = v37[9];
          sub_20BDF3648((uint64_t)&v180);
        }
        else
        {
          v43 = *(_OWORD *)v173;
          *(_QWORD *)(v42 + 16) = v174;
          *(_OWORD *)v42 = v43;
          v173[1] = 0;
          v174 = 0;
          v173[0] = 0;
          v44 = v42 + 24;
          v37[9] = v42 + 24;
        }
        v37[9] = v44;
        v52 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS0_5ascii3oneIJLc34EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v52)
        {
          sub_20BDDC0E4(&v178, v52);
          free(v52);
        }
        else
        {
          sub_20BDDC0E4(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS0_5ascii3oneIJLc34EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v175) = 3;
        v180 = v178;
        v181 = v179;
        v178 = 0uLL;
        v179 = 0;
        LOBYTE(v182) = 3;
        v184 = 0;
        v185 = 0;
        v183 = 0;
        v176 = 0;
        v177 = 0;
        *((_QWORD *)&v175 + 1) = 0;
        v53 = sub_20C165DCC(a1, (const void **)&v180, &v180);
        v55 = v54;
        v167[0] = &v183;
        sub_20BDE5038((void ***)v167);
        if (SHIBYTE(v181) < 0)
          operator delete((void *)v180);
        v167[0] = (char *)&v175 + 8;
        sub_20BDE5038((void ***)v167);
        if (SHIBYTE(v179) < 0)
          operator delete((void *)v178);
        if (v55)
        {
          sub_20C171AE4(a1, (uint64_t)&v175);
          v56 = v53 + 8;
          v57 = v53[10];
          v58 = v53[9];
          if (v58 >= v57)
          {
            v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v56) >> 3);
            v62 = v61 + 1;
            if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v56) >> 3);
            if (2 * v63 > v62)
              v62 = 2 * v63;
            if (v63 >= 0x555555555555555)
              v64 = 0xAAAAAAAAAAAAAAALL;
            else
              v64 = v62;
            v183 = v53 + 10;
            if (v64)
              v65 = (char *)sub_20BDE4FF4((uint64_t)(v53 + 10), v64);
            else
              v65 = 0;
            v66 = &v65[24 * v61];
            *(_QWORD *)&v180 = v65;
            *((_QWORD *)&v180 + 1) = v66;
            v182 = &v65[24 * v64];
            v67 = v175;
            *((_QWORD *)v66 + 2) = v176;
            *(_OWORD *)v66 = v67;
            v176 = 0;
            v175 = 0uLL;
            v181 = v66 + 24;
            sub_20BDF34C0(v53 + 8, &v180);
            v60 = v53[9];
            sub_20BDF3648((uint64_t)&v180);
          }
          else
          {
            v59 = v175;
            *(_QWORD *)(v58 + 16) = v176;
            *(_OWORD *)v58 = v59;
            v176 = 0;
            v175 = 0uLL;
            v60 = v58 + 24;
            v53[9] = v58 + 24;
          }
          v53[9] = v60;
          sub_20C173F80(a1, (uint64_t)&v178);
          v69 = v53[9];
          v68 = v53[10];
          if (v69 >= v68)
          {
            v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *v56) >> 3);
            v72 = v71 + 1;
            if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *v56) >> 3);
            if (2 * v73 > v72)
              v72 = 2 * v73;
            if (v73 >= 0x555555555555555)
              v74 = 0xAAAAAAAAAAAAAAALL;
            else
              v74 = v72;
            v183 = v53 + 10;
            if (v74)
              v75 = (char *)sub_20BDE4FF4((uint64_t)(v53 + 10), v74);
            else
              v75 = 0;
            v76 = &v75[24 * v71];
            *(_QWORD *)&v180 = v75;
            *((_QWORD *)&v180 + 1) = v76;
            v182 = &v75[24 * v74];
            v77 = v178;
            *((_QWORD *)v76 + 2) = v179;
            *(_OWORD *)v76 = v77;
            v179 = 0;
            v178 = 0uLL;
            v181 = v76 + 24;
            sub_20BDF34C0(v53 + 8, &v180);
            v78 = v53[9];
            sub_20BDF3648((uint64_t)&v180);
            v79 = SHIBYTE(v179);
            v53[9] = v78;
            if (v79 < 0)
              operator delete((void *)v178);
          }
          else
          {
            v70 = v178;
            *(_QWORD *)(v69 + 16) = v179;
            *(_OWORD *)v69 = v70;
            v53[9] = v69 + 24;
          }
          if (SHIBYTE(v176) < 0)
            operator delete((void *)v175);
        }
        if (*((char *)v53 + 55) < 0)
        {
          sub_20BDDBFAC(__p, (void *)v53[4], v53[5]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v53 + 2);
          v172 = v53[6];
        }
        v81 = v37[9];
        v80 = v37[10];
        if (v81 >= v80)
        {
          v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *v159) >> 3);
          v84 = v83 + 1;
          if (v83 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - *v159) >> 3);
          if (2 * v85 > v84)
            v84 = 2 * v85;
          if (v85 >= 0x555555555555555)
            v86 = 0xAAAAAAAAAAAAAAALL;
          else
            v86 = v84;
          v183 = v37 + 10;
          if (v86)
            v87 = (char *)sub_20BDE4FF4((uint64_t)(v37 + 10), v86);
          else
            v87 = 0;
          v88 = &v87[24 * v83];
          *(_QWORD *)&v180 = v87;
          *((_QWORD *)&v180 + 1) = v88;
          v182 = &v87[24 * v86];
          v89 = *(_OWORD *)__p;
          *((_QWORD *)v88 + 2) = v172;
          *(_OWORD *)v88 = v89;
          __p[1] = 0;
          v172 = 0;
          __p[0] = 0;
          v181 = v88 + 24;
          sub_20BDF34C0(v159, &v180);
          v90 = v37[9];
          sub_20BDF3648((uint64_t)&v180);
          v91 = SHIBYTE(v172);
          v37[9] = v90;
          if (v91 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v82 = *(_OWORD *)__p;
          *(_QWORD *)(v81 + 16) = v172;
          *(_OWORD *)v81 = v82;
          v37[9] = v81 + 24;
        }
        if (SHIBYTE(v174) < 0)
          operator delete(v173[0]);
      }
      if (*((char *)v37 + 55) < 0)
      {
        sub_20BDDBFAC(__dst, (void *)v37[4], v37[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v37 + 2);
        v170 = v37[6];
      }
      v92 = v32 + 8;
      v93 = v32[10];
      v94 = v32[9];
      if (v94 >= v93)
      {
        v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - *v92) >> 3);
        v98 = v97 + 1;
        if (v97 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - *v92) >> 3);
        if (2 * v99 > v98)
          v98 = 2 * v99;
        if (v99 >= 0x555555555555555)
          v100 = 0xAAAAAAAAAAAAAAALL;
        else
          v100 = v98;
        v183 = v32 + 10;
        if (v100)
          v101 = (char *)sub_20BDE4FF4((uint64_t)(v32 + 10), v100);
        else
          v101 = 0;
        v102 = &v101[24 * v97];
        *(_QWORD *)&v180 = v101;
        *((_QWORD *)&v180 + 1) = v102;
        v182 = &v101[24 * v100];
        v103 = *(_OWORD *)__dst;
        *((_QWORD *)v102 + 2) = v170;
        *(_OWORD *)v102 = v103;
        __dst[1] = 0;
        v170 = 0;
        __dst[0] = 0;
        v181 = v102 + 24;
        sub_20BDF34C0(v32 + 8, &v180);
        v96 = v32[9];
        sub_20BDF3648((uint64_t)&v180);
      }
      else
      {
        v95 = *(_OWORD *)__dst;
        *(_QWORD *)(v94 + 16) = v170;
        *(_OWORD *)v94 = v95;
        __dst[1] = 0;
        v170 = 0;
        __dst[0] = 0;
        v96 = v94 + 24;
        v32[9] = v94 + 24;
      }
      v32[9] = v96;
      v104 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc92EEEEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedINS5_IJLc34EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v104)
      {
        sub_20BDDC0E4(&v178, v104);
        free(v104);
      }
      else
      {
        sub_20BDDC0E4(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc92EEEEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedINS5_IJLc34EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v175) = 2;
      v180 = v178;
      v181 = v179;
      v178 = 0uLL;
      v179 = 0;
      LOBYTE(v182) = 2;
      v184 = 0;
      v185 = 0;
      v183 = 0;
      v176 = 0;
      v177 = 0;
      *((_QWORD *)&v175 + 1) = 0;
      v105 = sub_20C165DCC(a1, (const void **)&v180, &v180);
      v107 = v106;
      v173[0] = &v183;
      sub_20BDE5038((void ***)v173);
      if (SHIBYTE(v181) < 0)
        operator delete((void *)v180);
      v173[0] = (char *)&v175 + 8;
      sub_20BDE5038((void ***)v173);
      if (SHIBYTE(v179) < 0)
        operator delete((void *)v178);
      v35 = v5 + 8;
      if (v107)
      {
        sub_20C174164(a1, (uint64_t)v173);
        v108 = v105 + 8;
        v109 = v105[10];
        v110 = v105[9];
        if (v110 >= v109)
        {
          v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - *v108) >> 3);
          v114 = v113 + 1;
          if (v113 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - *v108) >> 3);
          if (2 * v115 > v114)
            v114 = 2 * v115;
          if (v115 >= 0x555555555555555)
            v116 = 0xAAAAAAAAAAAAAAALL;
          else
            v116 = v114;
          v183 = v105 + 10;
          if (v116)
            v117 = (char *)sub_20BDE4FF4((uint64_t)(v105 + 10), v116);
          else
            v117 = 0;
          v118 = &v117[24 * v113];
          *(_QWORD *)&v180 = v117;
          *((_QWORD *)&v180 + 1) = v118;
          v182 = &v117[24 * v116];
          v119 = *(_OWORD *)v173;
          *((_QWORD *)v118 + 2) = v174;
          *(_OWORD *)v118 = v119;
          v173[1] = 0;
          v174 = 0;
          v173[0] = 0;
          v181 = v118 + 24;
          sub_20BDF34C0(v105 + 8, &v180);
          v112 = v105[9];
          sub_20BDF3648((uint64_t)&v180);
        }
        else
        {
          v111 = *(_OWORD *)v173;
          *(_QWORD *)(v110 + 16) = v174;
          *(_OWORD *)v110 = v111;
          v173[1] = 0;
          v174 = 0;
          v173[0] = 0;
          v112 = v110 + 24;
          v105[9] = v110 + 24;
        }
        v105[9] = v112;
        v120 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v120)
        {
          sub_20BDDC0E4(&v178, v120);
          free(v120);
        }
        else
        {
          sub_20BDDC0E4(&v178, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v175) = 0;
        v180 = v178;
        v181 = v179;
        v178 = 0uLL;
        v179 = 0;
        LOBYTE(v182) = 0;
        v184 = 0;
        v185 = 0;
        v183 = 0;
        v176 = 0;
        v177 = 0;
        *((_QWORD *)&v175 + 1) = 0;
        v121 = sub_20C165DCC(a1, (const void **)&v180, &v180);
        v186[0] = (void **)&v183;
        sub_20BDE5038(v186);
        if (SHIBYTE(v181) < 0)
          operator delete((void *)v180);
        v186[0] = (void **)&v175 + 1;
        sub_20BDE5038(v186);
        if (SHIBYTE(v179) < 0)
          operator delete((void *)v178);
        if (*((char *)v121 + 55) < 0)
        {
          sub_20BDDBFAC(__p, (void *)v121[4], v121[5]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v121 + 2);
          v172 = v121[6];
        }
        v123 = v105[9];
        v122 = v105[10];
        if (v123 >= v122)
        {
          v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - *v108) >> 3);
          v126 = v125 + 1;
          if (v125 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - *v108) >> 3);
          if (2 * v127 > v126)
            v126 = 2 * v127;
          if (v127 >= 0x555555555555555)
            v128 = 0xAAAAAAAAAAAAAAALL;
          else
            v128 = v126;
          v183 = v105 + 10;
          if (v128)
            v129 = (char *)sub_20BDE4FF4((uint64_t)(v105 + 10), v128);
          else
            v129 = 0;
          v130 = &v129[24 * v125];
          *(_QWORD *)&v180 = v129;
          *((_QWORD *)&v180 + 1) = v130;
          v182 = &v129[24 * v128];
          v131 = *(_OWORD *)__p;
          *((_QWORD *)v130 + 2) = v172;
          *(_OWORD *)v130 = v131;
          __p[1] = 0;
          v172 = 0;
          __p[0] = 0;
          v181 = v130 + 24;
          sub_20BDF34C0(v105 + 8, &v180);
          v132 = v105[9];
          sub_20BDF3648((uint64_t)&v180);
          v133 = SHIBYTE(v172);
          v105[9] = v132;
          v92 = v32 + 8;
          v35 = v5 + 8;
          if (v133 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v124 = *(_OWORD *)__p;
          *(_QWORD *)(v123 + 16) = v172;
          *(_OWORD *)v123 = v124;
          v105[9] = v123 + 24;
          v92 = v32 + 8;
          v35 = v5 + 8;
        }
        if (SHIBYTE(v174) < 0)
          operator delete(v173[0]);
      }
      if (*((char *)v105 + 55) < 0)
      {
        sub_20BDDBFAC(v167, (void *)v105[4], v105[5]);
      }
      else
      {
        *(_OWORD *)v167 = *((_OWORD *)v105 + 2);
        v168 = v105[6];
      }
      v135 = v32[9];
      v134 = v32[10];
      if (v135 >= v134)
      {
        v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v92) >> 3);
        v138 = v137 + 1;
        if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - *v92) >> 3);
        if (2 * v139 > v138)
          v138 = 2 * v139;
        if (v139 >= 0x555555555555555)
          v140 = 0xAAAAAAAAAAAAAAALL;
        else
          v140 = v138;
        v183 = v32 + 10;
        if (v140)
          v141 = (char *)sub_20BDE4FF4((uint64_t)(v32 + 10), v140);
        else
          v141 = 0;
        v142 = &v141[24 * v137];
        *(_QWORD *)&v180 = v141;
        *((_QWORD *)&v180 + 1) = v142;
        v182 = &v141[24 * v140];
        v143 = *(_OWORD *)v167;
        *((_QWORD *)v142 + 2) = v168;
        *(_OWORD *)v142 = v143;
        v167[1] = 0;
        v168 = 0;
        v167[0] = 0;
        v181 = v142 + 24;
        sub_20BDF34C0(v92, &v180);
        v144 = v32[9];
        sub_20BDF3648((uint64_t)&v180);
        v145 = SHIBYTE(v168);
        v32[9] = v144;
        if (v145 < 0)
          operator delete(v167[0]);
      }
      else
      {
        v136 = *(_OWORD *)v167;
        *(_QWORD *)(v135 + 16) = v168;
        *(_OWORD *)v135 = v136;
        v32[9] = v135 + 24;
      }
      if (SHIBYTE(v170) < 0)
        operator delete(__dst[0]);
    }
    if (*((char *)v32 + 55) < 0)
    {
      sub_20BDDBFAC(v161, (void *)v32[4], v32[5]);
    }
    else
    {
      *(_OWORD *)v161 = *((_OWORD *)v32 + 2);
      v162 = v32[6];
    }
    v147 = v5[9];
    v146 = v5[10];
    if (v147 >= v146)
    {
      v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *v35) >> 3);
      v150 = v149 + 1;
      if (v149 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v35) >> 3);
      if (2 * v151 > v150)
        v150 = 2 * v151;
      if (v151 >= 0x555555555555555)
        v152 = 0xAAAAAAAAAAAAAAALL;
      else
        v152 = v150;
      v183 = v5 + 10;
      if (v152)
        v153 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v152);
      else
        v153 = 0;
      v154 = &v153[24 * v149];
      *(_QWORD *)&v180 = v153;
      *((_QWORD *)&v180 + 1) = v154;
      v182 = &v153[24 * v152];
      v155 = *(_OWORD *)v161;
      *((_QWORD *)v154 + 2) = v162;
      *(_OWORD *)v154 = v155;
      v161[1] = 0;
      v162 = 0;
      v161[0] = 0;
      v181 = v154 + 24;
      sub_20BDF34C0(v35, &v180);
      v156 = v5[9];
      sub_20BDF3648((uint64_t)&v180);
      v157 = SHIBYTE(v162);
      v5[9] = v156;
      if (v157 < 0)
        operator delete(v161[0]);
    }
    else
    {
      v148 = *(_OWORD *)v161;
      *(_QWORD *)(v147 + 16) = v162;
      *(_OWORD *)v147 = v148;
      v5[9] = v147 + 24;
    }
    if (SHIBYTE(v164) < 0)
      operator delete(v163[0]);
    if (SHIBYTE(v166) < 0)
      operator delete(v165[0]);
  }
  if (*((char *)v5 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v5[4], v5[5]);
  }
  else
  {
    v158 = *((_OWORD *)v5 + 2);
    *(_QWORD *)(a2 + 16) = v5[6];
    *(_OWORD *)a2 = v158;
  }
}

void sub_20C172EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  sub_20BDF3648(v58 - 160);
  if (*(char *)(v58 - 161) < 0)
    operator delete(*(void **)(v58 - 184));
  if (*(char *)(v58 - 193) < 0)
    operator delete(*(void **)(v58 - 216));
  if (a58 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_20C1731C0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEENS4_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS7_EEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEENS4_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS7_EEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C171C38(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C1731C0(v37, a1);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C173538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C1735C8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C173928(a1, 1);
  if (v5)
  {
    sub_20C171AE4(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C17374C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C173778(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C173AB8(a1, 1);
  if (v5)
  {
    sub_20C173BB8(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C1738FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C173928(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C173A28(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C1739F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C173A28(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB9BD3 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB9BD3 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C173AA4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C173AB8(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C173C0C(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C173B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C173BB8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C173C9C(a1, 1);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C173C0C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB9C1DLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB9C1DLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C173C88(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C173C9C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C173D9C(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C173D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C173D9C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB9C58 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB9C58 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C173E18(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C173E2C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C173E80(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C173E80(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C092138(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C173F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C173F80@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C173FD4(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C173FD4(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C1740D4(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C1740A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C1740D4(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB9E0ELL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB9E0ELL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C174150(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C174164(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C174314(a1, 1);
  if (v5)
  {
    sub_20C173E2C(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C1742E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C174314(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C174414(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C1743E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C174414(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB9EFFLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB9EFFLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C174490(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1744A4@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C1744F8(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C1744F8(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C097D2C(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C1745C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C1745F8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t *v5;
  char v6;
  char v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  uint64_t *v32;
  char v33;
  char v34;
  uint64_t *v35;
  char *v36;
  uint64_t *v37;
  char v38;
  char v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  uint64_t *v53;
  char v54;
  char v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  char *v104;
  uint64_t *v105;
  char v106;
  char v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  char *v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  __int128 v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  __int128 v155;
  uint64_t v156;
  int v157;
  __int128 v158;
  uint64_t *v159;
  void *v161[2];
  uint64_t v162;
  void *v163[2];
  uint64_t v164;
  void *v165[2];
  uint64_t v166;
  void *v167[2];
  uint64_t v168;
  void *__dst[2];
  uint64_t v170;
  void *__p[2];
  uint64_t v172;
  void *v173[2];
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  char *v179;
  __int128 v180;
  char *v181;
  char *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  void **v186[3];

  v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEENS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    v4 = v3;
    sub_20BDDC0E4(&v178, v3);
    free(v4);
  }
  else
  {
    sub_20BDDC0E4(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEENS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v175) = 2;
  v180 = v178;
  v181 = v179;
  v178 = 0uLL;
  v179 = 0;
  LOBYTE(v182) = 2;
  v184 = 0;
  v185 = 0;
  v183 = 0;
  v176 = 0;
  v177 = 0;
  *((_QWORD *)&v175 + 1) = 0;
  v5 = sub_20C165DCC(a1, (const void **)&v180, &v180);
  v7 = v6;
  v173[0] = &v183;
  sub_20BDE5038((void ***)v173);
  if (SHIBYTE(v181) < 0)
    operator delete((void *)v180);
  v173[0] = (char *)&v175 + 8;
  sub_20BDE5038((void ***)v173);
  if (SHIBYTE(v179) < 0)
    operator delete((void *)v178);
  if (v7)
  {
    sub_20C175F88(a1, (uint64_t)v165);
    v8 = v5[10];
    v9 = v5 + 8;
    v10 = v5[9];
    if (v10 >= v8)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v9) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v9) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      v183 = v5 + 10;
      if (v16)
        v17 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v16);
      else
        v17 = 0;
      v18 = &v17[24 * v13];
      *(_QWORD *)&v180 = v17;
      *((_QWORD *)&v180 + 1) = v18;
      v182 = &v17[24 * v16];
      v19 = *(_OWORD *)v165;
      *((_QWORD *)v18 + 2) = v166;
      *(_OWORD *)v18 = v19;
      v165[1] = 0;
      v166 = 0;
      v165[0] = 0;
      v181 = v18 + 24;
      sub_20BDF34C0(v5 + 8, &v180);
      v12 = v5[9];
      sub_20BDF3648((uint64_t)&v180);
    }
    else
    {
      v11 = *(_OWORD *)v165;
      *(_QWORD *)(v10 + 16) = v166;
      *(_OWORD *)v10 = v11;
      v165[1] = 0;
      v166 = 0;
      v165[0] = 0;
      v12 = v10 + 24;
      v5[9] = v10 + 24;
    }
    v5[9] = v12;
    sub_20C173778(a1, (uint64_t)v163);
    v20 = v5[9];
    v21 = v5[10];
    if (v20 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v9) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v9) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v183 = v5 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      *(_QWORD *)&v180 = v28;
      *((_QWORD *)&v180 + 1) = v29;
      v182 = &v28[24 * v27];
      v30 = *(_OWORD *)v163;
      *((_QWORD *)v29 + 2) = v164;
      *(_OWORD *)v29 = v30;
      v163[1] = 0;
      v164 = 0;
      v163[0] = 0;
      v181 = v29 + 24;
      sub_20BDF34C0(v5 + 8, &v180);
      v23 = v5[9];
      sub_20BDF3648((uint64_t)&v180);
    }
    else
    {
      v22 = *(_OWORD *)v163;
      *(_QWORD *)(v20 + 16) = v164;
      *(_OWORD *)v20 = v22;
      v163[1] = 0;
      v164 = 0;
      v163[0] = 0;
      v23 = v20 + 24;
      v5[9] = v20 + 24;
    }
    v5[9] = v23;
    v31 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v31)
    {
      sub_20BDDC0E4(&v178, v31);
      free(v31);
    }
    else
    {
      sub_20BDDC0E4(&v178, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v175) = 3;
    v180 = v178;
    v181 = v179;
    v178 = 0uLL;
    v179 = 0;
    LOBYTE(v182) = 3;
    v184 = 0;
    v185 = 0;
    v183 = 0;
    v176 = 0;
    v177 = 0;
    *((_QWORD *)&v175 + 1) = 0;
    v32 = sub_20C165DCC(a1, (const void **)&v180, &v180);
    v34 = v33;
    v173[0] = &v183;
    sub_20BDE5038((void ***)v173);
    if (SHIBYTE(v181) < 0)
      operator delete((void *)v180);
    v173[0] = (char *)&v175 + 8;
    sub_20BDE5038((void ***)v173);
    if (SHIBYTE(v179) < 0)
      operator delete((void *)v178);
    v35 = v5 + 8;
    if (v34)
    {
      v36 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc92EEEENS0_4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS4_IJLc39EEEEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v36)
      {
        sub_20BDDC0E4(&v178, v36);
        free(v36);
      }
      else
      {
        sub_20BDDC0E4(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc92EEEENS0_4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS4_IJLc39EEEEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v175) = 2;
      v180 = v178;
      v181 = v179;
      v178 = 0uLL;
      v179 = 0;
      LOBYTE(v182) = 2;
      v184 = 0;
      v185 = 0;
      v183 = 0;
      v176 = 0;
      v177 = 0;
      *((_QWORD *)&v175 + 1) = 0;
      v37 = sub_20C165DCC(a1, (const void **)&v180, &v180);
      v39 = v38;
      v173[0] = &v183;
      sub_20BDE5038((void ***)v173);
      if (SHIBYTE(v181) < 0)
        operator delete((void *)v180);
      v173[0] = (char *)&v175 + 8;
      sub_20BDE5038((void ***)v173);
      if (SHIBYTE(v179) < 0)
        operator delete((void *)v178);
      if (v39)
      {
        sub_20C173E2C(a1, (uint64_t)v173);
        v40 = v37 + 8;
        v41 = v37[10];
        v42 = v37[9];
        v159 = v37 + 8;
        if (v42 >= v41)
        {
          v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v40) >> 3);
          v46 = v45 + 1;
          if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v40) >> 3);
          if (2 * v47 > v46)
            v46 = 2 * v47;
          if (v47 >= 0x555555555555555)
            v48 = 0xAAAAAAAAAAAAAAALL;
          else
            v48 = v46;
          v183 = v37 + 10;
          if (v48)
            v49 = (char *)sub_20BDE4FF4((uint64_t)(v37 + 10), v48);
          else
            v49 = 0;
          v50 = &v49[24 * v45];
          *(_QWORD *)&v180 = v49;
          *((_QWORD *)&v180 + 1) = v50;
          v182 = &v49[24 * v48];
          v51 = *(_OWORD *)v173;
          *((_QWORD *)v50 + 2) = v174;
          *(_OWORD *)v50 = v51;
          v173[1] = 0;
          v174 = 0;
          v173[0] = 0;
          v181 = v50 + 24;
          sub_20BDF34C0(v37 + 8, &v180);
          v44 = v37[9];
          sub_20BDF3648((uint64_t)&v180);
        }
        else
        {
          v43 = *(_OWORD *)v173;
          *(_QWORD *)(v42 + 16) = v174;
          *(_OWORD *)v42 = v43;
          v173[1] = 0;
          v174 = 0;
          v173[0] = 0;
          v44 = v42 + 24;
          v37[9] = v42 + 24;
        }
        v37[9] = v44;
        v52 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS0_5ascii3oneIJLc39EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v52)
        {
          sub_20BDDC0E4(&v178, v52);
          free(v52);
        }
        else
        {
          sub_20BDDC0E4(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS0_5ascii3oneIJLc39EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v175) = 3;
        v180 = v178;
        v181 = v179;
        v178 = 0uLL;
        v179 = 0;
        LOBYTE(v182) = 3;
        v184 = 0;
        v185 = 0;
        v183 = 0;
        v176 = 0;
        v177 = 0;
        *((_QWORD *)&v175 + 1) = 0;
        v53 = sub_20C165DCC(a1, (const void **)&v180, &v180);
        v55 = v54;
        v167[0] = &v183;
        sub_20BDE5038((void ***)v167);
        if (SHIBYTE(v181) < 0)
          operator delete((void *)v180);
        v167[0] = (char *)&v175 + 8;
        sub_20BDE5038((void ***)v167);
        if (SHIBYTE(v179) < 0)
          operator delete((void *)v178);
        if (v55)
        {
          sub_20C1744A4(a1, (uint64_t)&v175);
          v56 = v53 + 8;
          v57 = v53[10];
          v58 = v53[9];
          if (v58 >= v57)
          {
            v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v56) >> 3);
            v62 = v61 + 1;
            if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v56) >> 3);
            if (2 * v63 > v62)
              v62 = 2 * v63;
            if (v63 >= 0x555555555555555)
              v64 = 0xAAAAAAAAAAAAAAALL;
            else
              v64 = v62;
            v183 = v53 + 10;
            if (v64)
              v65 = (char *)sub_20BDE4FF4((uint64_t)(v53 + 10), v64);
            else
              v65 = 0;
            v66 = &v65[24 * v61];
            *(_QWORD *)&v180 = v65;
            *((_QWORD *)&v180 + 1) = v66;
            v182 = &v65[24 * v64];
            v67 = v175;
            *((_QWORD *)v66 + 2) = v176;
            *(_OWORD *)v66 = v67;
            v176 = 0;
            v175 = 0uLL;
            v181 = v66 + 24;
            sub_20BDF34C0(v53 + 8, &v180);
            v60 = v53[9];
            sub_20BDF3648((uint64_t)&v180);
          }
          else
          {
            v59 = v175;
            *(_QWORD *)(v58 + 16) = v176;
            *(_OWORD *)v58 = v59;
            v176 = 0;
            v175 = 0uLL;
            v60 = v58 + 24;
            v53[9] = v58 + 24;
          }
          v53[9] = v60;
          sub_20C173F80(a1, (uint64_t)&v178);
          v69 = v53[9];
          v68 = v53[10];
          if (v69 >= v68)
          {
            v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *v56) >> 3);
            v72 = v71 + 1;
            if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *v56) >> 3);
            if (2 * v73 > v72)
              v72 = 2 * v73;
            if (v73 >= 0x555555555555555)
              v74 = 0xAAAAAAAAAAAAAAALL;
            else
              v74 = v72;
            v183 = v53 + 10;
            if (v74)
              v75 = (char *)sub_20BDE4FF4((uint64_t)(v53 + 10), v74);
            else
              v75 = 0;
            v76 = &v75[24 * v71];
            *(_QWORD *)&v180 = v75;
            *((_QWORD *)&v180 + 1) = v76;
            v182 = &v75[24 * v74];
            v77 = v178;
            *((_QWORD *)v76 + 2) = v179;
            *(_OWORD *)v76 = v77;
            v179 = 0;
            v178 = 0uLL;
            v181 = v76 + 24;
            sub_20BDF34C0(v53 + 8, &v180);
            v78 = v53[9];
            sub_20BDF3648((uint64_t)&v180);
            v79 = SHIBYTE(v179);
            v53[9] = v78;
            if (v79 < 0)
              operator delete((void *)v178);
          }
          else
          {
            v70 = v178;
            *(_QWORD *)(v69 + 16) = v179;
            *(_OWORD *)v69 = v70;
            v53[9] = v69 + 24;
          }
          if (SHIBYTE(v176) < 0)
            operator delete((void *)v175);
        }
        if (*((char *)v53 + 55) < 0)
        {
          sub_20BDDBFAC(__p, (void *)v53[4], v53[5]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v53 + 2);
          v172 = v53[6];
        }
        v81 = v37[9];
        v80 = v37[10];
        if (v81 >= v80)
        {
          v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *v159) >> 3);
          v84 = v83 + 1;
          if (v83 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - *v159) >> 3);
          if (2 * v85 > v84)
            v84 = 2 * v85;
          if (v85 >= 0x555555555555555)
            v86 = 0xAAAAAAAAAAAAAAALL;
          else
            v86 = v84;
          v183 = v37 + 10;
          if (v86)
            v87 = (char *)sub_20BDE4FF4((uint64_t)(v37 + 10), v86);
          else
            v87 = 0;
          v88 = &v87[24 * v83];
          *(_QWORD *)&v180 = v87;
          *((_QWORD *)&v180 + 1) = v88;
          v182 = &v87[24 * v86];
          v89 = *(_OWORD *)__p;
          *((_QWORD *)v88 + 2) = v172;
          *(_OWORD *)v88 = v89;
          __p[1] = 0;
          v172 = 0;
          __p[0] = 0;
          v181 = v88 + 24;
          sub_20BDF34C0(v159, &v180);
          v90 = v37[9];
          sub_20BDF3648((uint64_t)&v180);
          v91 = SHIBYTE(v172);
          v37[9] = v90;
          if (v91 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v82 = *(_OWORD *)__p;
          *(_QWORD *)(v81 + 16) = v172;
          *(_OWORD *)v81 = v82;
          v37[9] = v81 + 24;
        }
        if (SHIBYTE(v174) < 0)
          operator delete(v173[0]);
      }
      if (*((char *)v37 + 55) < 0)
      {
        sub_20BDDBFAC(__dst, (void *)v37[4], v37[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v37 + 2);
        v170 = v37[6];
      }
      v92 = v32 + 8;
      v93 = v32[10];
      v94 = v32[9];
      if (v94 >= v93)
      {
        v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - *v92) >> 3);
        v98 = v97 + 1;
        if (v97 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - *v92) >> 3);
        if (2 * v99 > v98)
          v98 = 2 * v99;
        if (v99 >= 0x555555555555555)
          v100 = 0xAAAAAAAAAAAAAAALL;
        else
          v100 = v98;
        v183 = v32 + 10;
        if (v100)
          v101 = (char *)sub_20BDE4FF4((uint64_t)(v32 + 10), v100);
        else
          v101 = 0;
        v102 = &v101[24 * v97];
        *(_QWORD *)&v180 = v101;
        *((_QWORD *)&v180 + 1) = v102;
        v182 = &v101[24 * v100];
        v103 = *(_OWORD *)__dst;
        *((_QWORD *)v102 + 2) = v170;
        *(_OWORD *)v102 = v103;
        __dst[1] = 0;
        v170 = 0;
        __dst[0] = 0;
        v181 = v102 + 24;
        sub_20BDF34C0(v32 + 8, &v180);
        v96 = v32[9];
        sub_20BDF3648((uint64_t)&v180);
      }
      else
      {
        v95 = *(_OWORD *)__dst;
        *(_QWORD *)(v94 + 16) = v170;
        *(_OWORD *)v94 = v95;
        __dst[1] = 0;
        v170 = 0;
        __dst[0] = 0;
        v96 = v94 + 24;
        v32[9] = v94 + 24;
      }
      v32[9] = v96;
      v104 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc92EEEEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedINS5_IJLc39EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v104)
      {
        sub_20BDDC0E4(&v178, v104);
        free(v104);
      }
      else
      {
        sub_20BDDC0E4(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc92EEEEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedINS5_IJLc39EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v175) = 2;
      v180 = v178;
      v181 = v179;
      v178 = 0uLL;
      v179 = 0;
      LOBYTE(v182) = 2;
      v184 = 0;
      v185 = 0;
      v183 = 0;
      v176 = 0;
      v177 = 0;
      *((_QWORD *)&v175 + 1) = 0;
      v105 = sub_20C165DCC(a1, (const void **)&v180, &v180);
      v107 = v106;
      v173[0] = &v183;
      sub_20BDE5038((void ***)v173);
      if (SHIBYTE(v181) < 0)
        operator delete((void *)v180);
      v173[0] = (char *)&v175 + 8;
      sub_20BDE5038((void ***)v173);
      if (SHIBYTE(v179) < 0)
        operator delete((void *)v178);
      v35 = v5 + 8;
      if (v107)
      {
        sub_20C174164(a1, (uint64_t)v173);
        v108 = v105 + 8;
        v109 = v105[10];
        v110 = v105[9];
        if (v110 >= v109)
        {
          v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - *v108) >> 3);
          v114 = v113 + 1;
          if (v113 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - *v108) >> 3);
          if (2 * v115 > v114)
            v114 = 2 * v115;
          if (v115 >= 0x555555555555555)
            v116 = 0xAAAAAAAAAAAAAAALL;
          else
            v116 = v114;
          v183 = v105 + 10;
          if (v116)
            v117 = (char *)sub_20BDE4FF4((uint64_t)(v105 + 10), v116);
          else
            v117 = 0;
          v118 = &v117[24 * v113];
          *(_QWORD *)&v180 = v117;
          *((_QWORD *)&v180 + 1) = v118;
          v182 = &v117[24 * v116];
          v119 = *(_OWORD *)v173;
          *((_QWORD *)v118 + 2) = v174;
          *(_OWORD *)v118 = v119;
          v173[1] = 0;
          v174 = 0;
          v173[0] = 0;
          v181 = v118 + 24;
          sub_20BDF34C0(v105 + 8, &v180);
          v112 = v105[9];
          sub_20BDF3648((uint64_t)&v180);
        }
        else
        {
          v111 = *(_OWORD *)v173;
          *(_QWORD *)(v110 + 16) = v174;
          *(_OWORD *)v110 = v111;
          v173[1] = 0;
          v174 = 0;
          v173[0] = 0;
          v112 = v110 + 24;
          v105[9] = v110 + 24;
        }
        v105[9] = v112;
        v120 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v120)
        {
          sub_20BDDC0E4(&v178, v120);
          free(v120);
        }
        else
        {
          sub_20BDDC0E4(&v178, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v175) = 0;
        v180 = v178;
        v181 = v179;
        v178 = 0uLL;
        v179 = 0;
        LOBYTE(v182) = 0;
        v184 = 0;
        v185 = 0;
        v183 = 0;
        v176 = 0;
        v177 = 0;
        *((_QWORD *)&v175 + 1) = 0;
        v121 = sub_20C165DCC(a1, (const void **)&v180, &v180);
        v186[0] = (void **)&v183;
        sub_20BDE5038(v186);
        if (SHIBYTE(v181) < 0)
          operator delete((void *)v180);
        v186[0] = (void **)&v175 + 1;
        sub_20BDE5038(v186);
        if (SHIBYTE(v179) < 0)
          operator delete((void *)v178);
        if (*((char *)v121 + 55) < 0)
        {
          sub_20BDDBFAC(__p, (void *)v121[4], v121[5]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v121 + 2);
          v172 = v121[6];
        }
        v123 = v105[9];
        v122 = v105[10];
        if (v123 >= v122)
        {
          v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - *v108) >> 3);
          v126 = v125 + 1;
          if (v125 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - *v108) >> 3);
          if (2 * v127 > v126)
            v126 = 2 * v127;
          if (v127 >= 0x555555555555555)
            v128 = 0xAAAAAAAAAAAAAAALL;
          else
            v128 = v126;
          v183 = v105 + 10;
          if (v128)
            v129 = (char *)sub_20BDE4FF4((uint64_t)(v105 + 10), v128);
          else
            v129 = 0;
          v130 = &v129[24 * v125];
          *(_QWORD *)&v180 = v129;
          *((_QWORD *)&v180 + 1) = v130;
          v182 = &v129[24 * v128];
          v131 = *(_OWORD *)__p;
          *((_QWORD *)v130 + 2) = v172;
          *(_OWORD *)v130 = v131;
          __p[1] = 0;
          v172 = 0;
          __p[0] = 0;
          v181 = v130 + 24;
          sub_20BDF34C0(v105 + 8, &v180);
          v132 = v105[9];
          sub_20BDF3648((uint64_t)&v180);
          v133 = SHIBYTE(v172);
          v105[9] = v132;
          v92 = v32 + 8;
          v35 = v5 + 8;
          if (v133 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v124 = *(_OWORD *)__p;
          *(_QWORD *)(v123 + 16) = v172;
          *(_OWORD *)v123 = v124;
          v105[9] = v123 + 24;
          v92 = v32 + 8;
          v35 = v5 + 8;
        }
        if (SHIBYTE(v174) < 0)
          operator delete(v173[0]);
      }
      if (*((char *)v105 + 55) < 0)
      {
        sub_20BDDBFAC(v167, (void *)v105[4], v105[5]);
      }
      else
      {
        *(_OWORD *)v167 = *((_OWORD *)v105 + 2);
        v168 = v105[6];
      }
      v135 = v32[9];
      v134 = v32[10];
      if (v135 >= v134)
      {
        v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v92) >> 3);
        v138 = v137 + 1;
        if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - *v92) >> 3);
        if (2 * v139 > v138)
          v138 = 2 * v139;
        if (v139 >= 0x555555555555555)
          v140 = 0xAAAAAAAAAAAAAAALL;
        else
          v140 = v138;
        v183 = v32 + 10;
        if (v140)
          v141 = (char *)sub_20BDE4FF4((uint64_t)(v32 + 10), v140);
        else
          v141 = 0;
        v142 = &v141[24 * v137];
        *(_QWORD *)&v180 = v141;
        *((_QWORD *)&v180 + 1) = v142;
        v182 = &v141[24 * v140];
        v143 = *(_OWORD *)v167;
        *((_QWORD *)v142 + 2) = v168;
        *(_OWORD *)v142 = v143;
        v167[1] = 0;
        v168 = 0;
        v167[0] = 0;
        v181 = v142 + 24;
        sub_20BDF34C0(v92, &v180);
        v144 = v32[9];
        sub_20BDF3648((uint64_t)&v180);
        v145 = SHIBYTE(v168);
        v32[9] = v144;
        if (v145 < 0)
          operator delete(v167[0]);
      }
      else
      {
        v136 = *(_OWORD *)v167;
        *(_QWORD *)(v135 + 16) = v168;
        *(_OWORD *)v135 = v136;
        v32[9] = v135 + 24;
      }
      if (SHIBYTE(v170) < 0)
        operator delete(__dst[0]);
    }
    if (*((char *)v32 + 55) < 0)
    {
      sub_20BDDBFAC(v161, (void *)v32[4], v32[5]);
    }
    else
    {
      *(_OWORD *)v161 = *((_OWORD *)v32 + 2);
      v162 = v32[6];
    }
    v147 = v5[9];
    v146 = v5[10];
    if (v147 >= v146)
    {
      v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *v35) >> 3);
      v150 = v149 + 1;
      if (v149 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v35) >> 3);
      if (2 * v151 > v150)
        v150 = 2 * v151;
      if (v151 >= 0x555555555555555)
        v152 = 0xAAAAAAAAAAAAAAALL;
      else
        v152 = v150;
      v183 = v5 + 10;
      if (v152)
        v153 = (char *)sub_20BDE4FF4((uint64_t)(v5 + 10), v152);
      else
        v153 = 0;
      v154 = &v153[24 * v149];
      *(_QWORD *)&v180 = v153;
      *((_QWORD *)&v180 + 1) = v154;
      v182 = &v153[24 * v152];
      v155 = *(_OWORD *)v161;
      *((_QWORD *)v154 + 2) = v162;
      *(_OWORD *)v154 = v155;
      v161[1] = 0;
      v162 = 0;
      v161[0] = 0;
      v181 = v154 + 24;
      sub_20BDF34C0(v35, &v180);
      v156 = v5[9];
      sub_20BDF3648((uint64_t)&v180);
      v157 = SHIBYTE(v162);
      v5[9] = v156;
      if (v157 < 0)
        operator delete(v161[0]);
    }
    else
    {
      v148 = *(_OWORD *)v161;
      *(_QWORD *)(v147 + 16) = v162;
      *(_OWORD *)v147 = v148;
      v5[9] = v147 + 24;
    }
    if (SHIBYTE(v164) < 0)
      operator delete(v163[0]);
    if (SHIBYTE(v166) < 0)
      operator delete(v165[0]);
  }
  if (*((char *)v5 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v5[4], v5[5]);
  }
  else
  {
    v158 = *((_OWORD *)v5 + 2);
    *(_QWORD *)(a2 + 16) = v5[6];
    *(_OWORD *)a2 = v158;
  }
}

void sub_20C175880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  sub_20BDF3648(v58 - 160);
  if (*(char *)(v58 - 161) < 0)
    operator delete(*(void **)(v58 - 184));
  if (*(char *)(v58 - 193) < 0)
    operator delete(*(void **)(v58 - 216));
  if (a58 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_20C175B80(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEENS4_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS7_EEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEENS4_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS7_EEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C1745F8(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C175B80(v37, a1);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C175EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C175F88(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_20C176138(a1, 1);
  if (v5)
  {
    sub_20C1744A4(a1, (uint64_t)__p);
    v6 = v4[10];
    v7 = v4[9];
    if (v7 >= v6)
    {
      v9 = v4[8];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v22[4] = v4 + 10;
      if (v13)
        v14 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      v16 = *(_OWORD *)__p;
      *((_QWORD *)v15 + 2) = v21;
      *(_OWORD *)v15 = v16;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_20BDF34C0(v4 + 8, v22);
      v17 = v4[9];
      sub_20BDF3648((uint64_t)v22);
      v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v21;
      *(_OWORD *)v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v19 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_20C17610C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C176138(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C176238(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C176208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C176238(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABA2FCLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABA2FCLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C1762B4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C1762C8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118UnquotedStringCharE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118UnquotedStringCharE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 3;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 3;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C176AD8(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C176B2C(a1, (uint64_t)v37);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C176640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C1766D0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118UnquotedStringCharEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118UnquotedStringCharEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C1762C8(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C1766D0(v37, a1);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C176A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C176AD8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C176B80(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C176B2C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C176D10(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C176B80(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C176C80(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C176C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C176C80(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABA6E3 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABA6E3 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C176CFC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C176D10(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C176E10(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C176DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C176E10(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABA719 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABA719 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C176E8C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C176EA0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc44EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc44EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C1776B0(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C169204(a1, (uint64_t)v37);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C177218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C1772A8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_5ascii3oneIJLc44EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_5ascii3oneIJLc44EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C176EA0(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C1772A8(v37, a1);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C177620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1776B0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C177704(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C177704(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C0A4474(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C1777D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C177804(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  void *__p[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t *v52;

  v4 = sub_20C177C28(a1, 2);
  if (v5)
  {
    sub_20C165FC0(a1, (uint64_t)v46);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v52 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v48 = v15;
      v49 = v16;
      v51 = &v15[24 * v14];
      v17 = *(_OWORD *)v46;
      *((_QWORD *)v16 + 2) = v47;
      *(_OWORD *)v16 = v17;
      v46[1] = 0;
      v47 = 0;
      v46[0] = 0;
      v50 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
    }
    else
    {
      v9 = *(_OWORD *)v46;
      *(_QWORD *)(v8 + 16) = v47;
      *(_OWORD *)v8 = v9;
      v46[1] = 0;
      v47 = 0;
      v46[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C177D28(a1, (uint64_t)v44);
    v18 = v4[9];
    v19 = v4[10];
    if (v18 >= v19)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      v52 = v4 + 10;
      if (v25)
        v26 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v25);
      else
        v26 = 0;
      v27 = &v26[24 * v22];
      v48 = v26;
      v49 = v27;
      v51 = &v26[24 * v25];
      v28 = *(_OWORD *)v44;
      *((_QWORD *)v27 + 2) = v45;
      *(_OWORD *)v27 = v28;
      v44[1] = 0;
      v45 = 0;
      v44[0] = 0;
      v50 = v27 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v21 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
    }
    else
    {
      v20 = *(_OWORD *)v44;
      *(_QWORD *)(v18 + 16) = v45;
      *(_OWORD *)v18 = v20;
      v44[1] = 0;
      v45 = 0;
      v44[0] = 0;
      v21 = v18 + 24;
      v4[9] = v18 + 24;
    }
    v4[9] = v21;
    sub_20C165FC0(a1, (uint64_t)__p);
    v30 = v4[9];
    v29 = v4[10];
    if (v30 >= v29)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v7) >> 3);
      v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v7) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v33;
      v52 = v4 + 10;
      if (v35)
        v36 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v35);
      else
        v36 = 0;
      v37 = &v36[24 * v32];
      v48 = v36;
      v49 = v37;
      v51 = &v36[24 * v35];
      v38 = *(_OWORD *)__p;
      *((_QWORD *)v37 + 2) = v43;
      *(_OWORD *)v37 = v38;
      __p[1] = 0;
      v43 = 0;
      __p[0] = 0;
      v50 = v37 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v39 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
      v40 = SHIBYTE(v43);
      v4[9] = v39;
      if (v40 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v31 = *(_OWORD *)__p;
      *(_QWORD *)(v30 + 16) = v43;
      *(_OWORD *)v30 = v31;
      v4[9] = v30 + 24;
    }
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v47) < 0)
      operator delete(v46[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v41 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v41;
  }
}

void sub_20C177BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  sub_20BDF3648((uint64_t)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C177C28(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C177D7C(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C177CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C177D28@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C177E0C(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C177D7C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABA97CLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABA97CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C177DF8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C177E0C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C09FB94(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C177EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C177F0C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t *v39;

  v4 = sub_20C17C6E0(a1, 1);
  if (v5)
  {
    sub_20C1663BC(a1, (uint64_t)v33);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v39 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v35 = v15;
      v36 = v16;
      v38 = &v15[24 * v14];
      v17 = *(_OWORD *)v33;
      *((_QWORD *)v16 + 2) = v34;
      *(_OWORD *)v16 = v17;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v37 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
    }
    else
    {
      v9 = *(_OWORD *)v33;
      *(_QWORD *)(v8 + 16) = v34;
      *(_OWORD *)v8 = v9;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C165FC0(a1, (uint64_t)__p);
    v19 = v4[9];
    v18 = v4[10];
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v39 = v4 + 10;
      if (v24)
        v25 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v24);
      else
        v25 = 0;
      v26 = &v25[24 * v21];
      v35 = v25;
      v36 = v26;
      v38 = &v25[24 * v24];
      v27 = *(_OWORD *)__p;
      *((_QWORD *)v26 + 2) = v32;
      *(_OWORD *)v26 = v27;
      __p[1] = 0;
      v32 = 0;
      __p[0] = 0;
      v37 = v26 + 24;
      sub_20BDF34C0(v4 + 8, &v35);
      v28 = v4[9];
      sub_20BDF3648((uint64_t)&v35);
      v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v20 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 16) = v32;
      *(_OWORD *)v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v30 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_20C1781B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_20BDF3648((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C178208@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C17C870(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

void sub_20C17825C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t *v22;
  char v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  void *v62[2];
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  void *v66[2];
  uint64_t v67;
  uint64_t v68;
  void *v69[2];
  _QWORD *v70;
  void *__p[2];
  _QWORD *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void **v77[2];

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS6_5blankES9_EEvEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v69, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS6_5blankES9_EEvEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v66[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v69;
  v72 = v70;
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  LOBYTE(v73) = 2;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v67 = 0;
  v68 = 0;
  v66[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v64[0] = &v74;
  sub_20BDE5038((void ***)v64);
  if (SHIBYTE(v72) < 0)
    operator delete(__p[0]);
  v64[0] = &v66[1];
  sub_20BDE5038((void ***)v64);
  if (SHIBYTE(v70) < 0)
    operator delete(v69[0]);
  if (v8)
  {
    sub_20C178A14(a1, (uint64_t)v64);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v74 = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v73 = &v18[24 * v17];
      v20 = *(_OWORD *)v64;
      *((_QWORD *)v19 + 2) = v65;
      *(_OWORD *)v19 = v20;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v72 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v64;
      *(_QWORD *)(v11 + 16) = v65;
      *(_OWORD *)v11 = v12;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_20BDDC0E4(v69, v21);
      free(v21);
    }
    else
    {
      sub_20BDDC0E4(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v66[0]) = 1;
    *(_OWORD *)__p = *(_OWORD *)v69;
    v72 = v70;
    v69[0] = 0;
    v69[1] = 0;
    v70 = 0;
    LOBYTE(v73) = 1;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    v67 = 0;
    v68 = 0;
    v66[1] = 0;
    v22 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v24 = v23;
    v77[0] = (void **)&v74;
    sub_20BDE5038(v77);
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    v77[0] = &v66[1];
    sub_20BDE5038(v77);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
    if (v24)
    {
      sub_20C179F00(a1, (uint64_t)v66);
      v25 = v22 + 8;
      v26 = v22[10];
      v27 = v22[9];
      if (v27 >= v26)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        v74 = v22 + 10;
        if (v33)
          v34 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v33);
        else
          v34 = 0;
        v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        v73 = &v34[24 * v33];
        v36 = *(_OWORD *)v66;
        *((_QWORD *)v35 + 2) = v67;
        *(_OWORD *)v35 = v36;
        v66[1] = 0;
        v67 = 0;
        v66[0] = 0;
        v72 = v35 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v29 = v22[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v28 = *(_OWORD *)v66;
        *(_QWORD *)(v27 + 16) = v67;
        *(_OWORD *)v27 = v28;
        v66[1] = 0;
        v67 = 0;
        v66[0] = 0;
        v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_20C17A308(a1, (uint64_t)v69);
      v38 = v22[9];
      v37 = v22[10];
      if (v38 >= v37)
      {
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0x555555555555555)
          v43 = 0xAAAAAAAAAAAAAAALL;
        else
          v43 = v41;
        v74 = v22 + 10;
        if (v43)
          v44 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v43);
        else
          v44 = 0;
        v45 = &v44[24 * v40];
        __p[0] = v44;
        __p[1] = v45;
        v73 = &v44[24 * v43];
        v46 = *(_OWORD *)v69;
        *((_QWORD *)v45 + 2) = v70;
        *(_OWORD *)v45 = v46;
        v69[1] = 0;
        v70 = 0;
        v69[0] = 0;
        v72 = v45 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v47 = v22[9];
        sub_20BDF3648((uint64_t)__p);
        v48 = SHIBYTE(v70);
        v22[9] = v47;
        if (v48 < 0)
          operator delete(v69[0]);
      }
      else
      {
        v39 = *(_OWORD *)v69;
        *(_QWORD *)(v38 + 16) = v70;
        *(_OWORD *)v38 = v39;
        v22[9] = v38 + 24;
      }
      if (SHIBYTE(v67) < 0)
        operator delete(v66[0]);
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_20BDDBFAC(v62, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)v62 = *((_OWORD *)v22 + 2);
      v63 = v22[6];
    }
    v50 = v6[9];
    v49 = v6[10];
    if (v50 >= v49)
    {
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v10) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v10) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      v74 = v6 + 10;
      if (v55)
        v56 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v55);
      else
        v56 = 0;
      v57 = &v56[24 * v52];
      __p[0] = v56;
      __p[1] = v57;
      v73 = &v56[24 * v55];
      v58 = *(_OWORD *)v62;
      *((_QWORD *)v57 + 2) = v63;
      *(_OWORD *)v57 = v58;
      v62[1] = 0;
      v63 = 0;
      v62[0] = 0;
      v72 = v57 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v59 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v60 = SHIBYTE(v63);
      v6[9] = v59;
      if (v60 < 0)
        operator delete(v62[0]);
    }
    else
    {
      v51 = *(_OWORD *)v62;
      *(_QWORD *)(v50 + 16) = v63;
      *(_OWORD *)v50 = v51;
      v6[9] = v50 + 24;
    }
    if (SHIBYTE(v65) < 0)
      operator delete(v64[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v61 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v61;
  }
}

void sub_20C1788FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  sub_20BDF3648((uint64_t)&a35);
  if (a34 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20C178A14(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  uint64_t v53;
  void *v54[2];
  uint64_t v55;
  uint64_t v56;
  void *v57[2];
  _QWORD *v58;
  void *__p[2];
  _QWORD *v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v57, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v57, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v54[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v57;
  v60 = v58;
  v57[0] = 0;
  v57[1] = 0;
  v58 = 0;
  LOBYTE(v61) = 2;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v55 = 0;
  v56 = 0;
  v54[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v52[0] = &v62;
  sub_20BDE5038((void ***)v52);
  if (SHIBYTE(v60) < 0)
    operator delete(__p[0]);
  v52[0] = &v54[1];
  sub_20BDE5038((void ***)v52);
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  if (v8)
  {
    v9 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredKWArgPrefixEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      v10 = v9;
      sub_20BDDC0E4(v57, v9);
      free(v10);
    }
    else
    {
      sub_20BDDC0E4(v57, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredKWArgPrefixEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v54[0]) = 1;
    *(_OWORD *)__p = *(_OWORD *)v57;
    v60 = v58;
    v57[0] = 0;
    v57[1] = 0;
    v58 = 0;
    LOBYTE(v61) = 1;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    v55 = 0;
    v56 = 0;
    v54[1] = 0;
    v11 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v13 = v12;
    v65 = (void **)&v62;
    sub_20BDE5038(&v65);
    if (SHIBYTE(v60) < 0)
      operator delete(__p[0]);
    v65 = &v54[1];
    sub_20BDE5038(&v65);
    if (SHIBYTE(v58) < 0)
      operator delete(v57[0]);
    if (v13)
    {
      sub_20C179068(a1, (uint64_t)v54);
      v14 = v11[10];
      v15 = v11[9];
      if (v15 >= v14)
      {
        v17 = v11[8];
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v17) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v17) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        v62 = v11 + 10;
        if (v21)
          v22 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v21);
        else
          v22 = 0;
        v23 = &v22[24 * v18];
        __p[0] = v22;
        __p[1] = v23;
        v61 = &v22[24 * v21];
        v24 = *(_OWORD *)v54;
        *((_QWORD *)v23 + 2) = v55;
        *(_OWORD *)v23 = v24;
        v54[1] = 0;
        v55 = 0;
        v54[0] = 0;
        v60 = v23 + 24;
        sub_20BDF34C0(v11 + 8, __p);
        v25 = v11[9];
        sub_20BDF3648((uint64_t)__p);
        v26 = SHIBYTE(v55);
        v11[9] = v25;
        if (v26 < 0)
          operator delete(v54[0]);
      }
      else
      {
        v16 = *(_OWORD *)v54;
        *(_QWORD *)(v15 + 16) = v55;
        *(_OWORD *)v15 = v16;
        v11[9] = v15 + 24;
      }
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_20BDDBFAC(v52, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)v52 = *((_OWORD *)v11 + 2);
      v53 = v11[6];
    }
    v27 = v6 + 8;
    v28 = v6[10];
    v29 = v6[9];
    if (v29 >= v28)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v27) >> 3);
      v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *v27) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v33;
      v62 = v6 + 10;
      if (v35)
        v36 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v35);
      else
        v36 = 0;
      v37 = &v36[24 * v32];
      __p[0] = v36;
      __p[1] = v37;
      v61 = &v36[24 * v35];
      v38 = *(_OWORD *)v52;
      *((_QWORD *)v37 + 2) = v53;
      *(_OWORD *)v37 = v38;
      v52[1] = 0;
      v53 = 0;
      v52[0] = 0;
      v60 = v37 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v30 = *(_OWORD *)v52;
      *(_QWORD *)(v29 + 16) = v53;
      *(_OWORD *)v29 = v30;
      v52[1] = 0;
      v53 = 0;
      v52[0] = 0;
      v31 = v29 + 24;
      v6[9] = v29 + 24;
    }
    v6[9] = v31;
    sub_20C169204(a1, (uint64_t)v54);
    v40 = v6[9];
    v39 = v6[10];
    if (v40 >= v39)
    {
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v27) >> 3);
      v43 = v42 + 1;
      if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v27) >> 3);
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x555555555555555)
        v45 = 0xAAAAAAAAAAAAAAALL;
      else
        v45 = v43;
      v62 = v6 + 10;
      if (v45)
        v46 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v45);
      else
        v46 = 0;
      v47 = &v46[24 * v42];
      __p[0] = v46;
      __p[1] = v47;
      v61 = &v46[24 * v45];
      v48 = *(_OWORD *)v54;
      *((_QWORD *)v47 + 2) = v55;
      *(_OWORD *)v47 = v48;
      v54[1] = 0;
      v55 = 0;
      v54[0] = 0;
      v60 = v47 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v49 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v50 = SHIBYTE(v55);
      v6[9] = v49;
      if (v50 < 0)
        operator delete(v54[0]);
    }
    else
    {
      v41 = *(_OWORD *)v54;
      *(_QWORD *)(v40 + 16) = v55;
      *(_OWORD *)v40 = v41;
      v6[9] = v40 + 24;
    }
    if (SHIBYTE(v53) < 0)
      operator delete(v52[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v51 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v51;
  }
}

void sub_20C178F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_20BDF3648((uint64_t)&a28);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C179068(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  char v12;
  char v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  void *v63[2];
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  uint64_t v67;
  void *v68[2];
  _QWORD *v69;
  void *__p[2];
  _QWORD *v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredKWArgPrefixE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v68, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v68, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredKWArgPrefixE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v65[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v68;
  v71 = v69;
  v68[0] = 0;
  v68[1] = 0;
  v69 = 0;
  LOBYTE(v72) = 2;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v66 = 0;
  v67 = 0;
  v65[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v63[0] = &v73;
  sub_20BDE5038((void ***)v63);
  if (SHIBYTE(v71) < 0)
    operator delete(__p[0]);
  v63[0] = &v65[1];
  sub_20BDE5038((void ***)v63);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  if (v8)
  {
    v9 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredKWArgNameE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      v10 = v9;
      sub_20BDDC0E4(v68, v9);
      free(v10);
    }
    else
    {
      sub_20BDDC0E4(v68, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredKWArgNameE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v65[0]) = 2;
    *(_OWORD *)__p = *(_OWORD *)v68;
    v71 = v69;
    v68[0] = 0;
    v68[1] = 0;
    v69 = 0;
    LOBYTE(v72) = 2;
    v74 = 0;
    v75 = 0;
    v73 = 0;
    v66 = 0;
    v67 = 0;
    v65[1] = 0;
    v11 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v13 = v12;
    v76 = (void **)&v73;
    sub_20BDE5038(&v76);
    if (SHIBYTE(v71) < 0)
      operator delete(__p[0]);
    v76 = &v65[1];
    sub_20BDE5038(&v76);
    if (SHIBYTE(v69) < 0)
      operator delete(v68[0]);
    if (v13)
    {
      sub_20C168A04(a1, (uint64_t)v65);
      v14 = v11[10];
      v15 = v11 + 8;
      v16 = v11[9];
      if (v16 >= v14)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v15) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v15) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        v73 = v11 + 10;
        if (v22)
          v23 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v22);
        else
          v23 = 0;
        v24 = &v23[24 * v19];
        __p[0] = v23;
        __p[1] = v24;
        v72 = &v23[24 * v22];
        v25 = *(_OWORD *)v65;
        *((_QWORD *)v24 + 2) = v66;
        *(_OWORD *)v24 = v25;
        v65[1] = 0;
        v66 = 0;
        v65[0] = 0;
        v71 = v24 + 24;
        sub_20BDF34C0(v11 + 8, __p);
        v18 = v11[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v17 = *(_OWORD *)v65;
        *(_QWORD *)(v16 + 16) = v66;
        *(_OWORD *)v16 = v17;
        v65[1] = 0;
        v66 = 0;
        v65[0] = 0;
        v18 = v16 + 24;
        v11[9] = v16 + 24;
      }
      v11[9] = v18;
      sub_20C168A58(a1, (uint64_t)v68);
      v27 = v11[9];
      v26 = v11[10];
      if (v27 >= v26)
      {
        v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v15) >> 3);
        v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v15) >> 3);
        if (2 * v31 > v30)
          v30 = 2 * v31;
        if (v31 >= 0x555555555555555)
          v32 = 0xAAAAAAAAAAAAAAALL;
        else
          v32 = v30;
        v73 = v11 + 10;
        if (v32)
          v33 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v32);
        else
          v33 = 0;
        v34 = &v33[24 * v29];
        __p[0] = v33;
        __p[1] = v34;
        v72 = &v33[24 * v32];
        v35 = *(_OWORD *)v68;
        *((_QWORD *)v34 + 2) = v69;
        *(_OWORD *)v34 = v35;
        v68[1] = 0;
        v69 = 0;
        v68[0] = 0;
        v71 = v34 + 24;
        sub_20BDF34C0(v11 + 8, __p);
        v36 = v11[9];
        sub_20BDF3648((uint64_t)__p);
        v37 = SHIBYTE(v69);
        v11[9] = v36;
        if (v37 < 0)
          operator delete(v68[0]);
      }
      else
      {
        v28 = *(_OWORD *)v68;
        *(_QWORD *)(v27 + 16) = v69;
        *(_OWORD *)v27 = v28;
        v11[9] = v27 + 24;
      }
      if (SHIBYTE(v66) < 0)
        operator delete(v65[0]);
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_20BDDBFAC(v63, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)v63 = *((_OWORD *)v11 + 2);
      v64 = v11[6];
    }
    v38 = v6 + 8;
    v39 = v6[10];
    v40 = v6[9];
    if (v40 >= v39)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v38) >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v38) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v44;
      v73 = v6 + 10;
      if (v46)
        v47 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v46);
      else
        v47 = 0;
      v48 = &v47[24 * v43];
      __p[0] = v47;
      __p[1] = v48;
      v72 = &v47[24 * v46];
      v49 = *(_OWORD *)v63;
      *((_QWORD *)v48 + 2) = v64;
      *(_OWORD *)v48 = v49;
      v63[1] = 0;
      v64 = 0;
      v63[0] = 0;
      v71 = v48 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v42 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v41 = *(_OWORD *)v63;
      *(_QWORD *)(v40 + 16) = v64;
      *(_OWORD *)v40 = v41;
      v63[1] = 0;
      v64 = 0;
      v63[0] = 0;
      v42 = v40 + 24;
      v6[9] = v40 + 24;
    }
    v6[9] = v42;
    sub_20C1797F8(a1, (uint64_t)v65);
    v51 = v6[9];
    v50 = v6[10];
    if (v51 >= v50)
    {
      v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *v38) >> 3);
      v54 = v53 + 1;
      if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v38) >> 3);
      if (2 * v55 > v54)
        v54 = 2 * v55;
      if (v55 >= 0x555555555555555)
        v56 = 0xAAAAAAAAAAAAAAALL;
      else
        v56 = v54;
      v73 = v6 + 10;
      if (v56)
        v57 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v56);
      else
        v57 = 0;
      v58 = &v57[24 * v53];
      __p[0] = v57;
      __p[1] = v58;
      v72 = &v57[24 * v56];
      v59 = *(_OWORD *)v65;
      *((_QWORD *)v58 + 2) = v66;
      *(_OWORD *)v58 = v59;
      v65[1] = 0;
      v66 = 0;
      v65[0] = 0;
      v71 = v58 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v60 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v61 = SHIBYTE(v66);
      v6[9] = v60;
      if (v61 < 0)
        operator delete(v65[0]);
    }
    else
    {
      v52 = *(_OWORD *)v65;
      *(_QWORD *)(v51 + 16) = v66;
      *(_OWORD *)v51 = v52;
      v6[9] = v51 + 24;
    }
    if (SHIBYTE(v64) < 0)
      operator delete(v63[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v62 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v62;
  }
}

void sub_20C1796F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_20BDF3648((uint64_t)&a28);
  if (a27 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_20C1797F8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  void *__p[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t *v52;

  v4 = sub_20C179C1C(a1, 2);
  if (v5)
  {
    sub_20C165FC0(a1, (uint64_t)v46);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v52 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v48 = v15;
      v49 = v16;
      v51 = &v15[24 * v14];
      v17 = *(_OWORD *)v46;
      *((_QWORD *)v16 + 2) = v47;
      *(_OWORD *)v16 = v17;
      v46[1] = 0;
      v47 = 0;
      v46[0] = 0;
      v50 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
    }
    else
    {
      v9 = *(_OWORD *)v46;
      *(_QWORD *)(v8 + 16) = v47;
      *(_OWORD *)v8 = v9;
      v46[1] = 0;
      v47 = 0;
      v46[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C179D1C(a1, (uint64_t)v44);
    v18 = v4[9];
    v19 = v4[10];
    if (v18 >= v19)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      v52 = v4 + 10;
      if (v25)
        v26 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v25);
      else
        v26 = 0;
      v27 = &v26[24 * v22];
      v48 = v26;
      v49 = v27;
      v51 = &v26[24 * v25];
      v28 = *(_OWORD *)v44;
      *((_QWORD *)v27 + 2) = v45;
      *(_OWORD *)v27 = v28;
      v44[1] = 0;
      v45 = 0;
      v44[0] = 0;
      v50 = v27 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v21 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
    }
    else
    {
      v20 = *(_OWORD *)v44;
      *(_QWORD *)(v18 + 16) = v45;
      *(_OWORD *)v18 = v20;
      v44[1] = 0;
      v45 = 0;
      v44[0] = 0;
      v21 = v18 + 24;
      v4[9] = v18 + 24;
    }
    v4[9] = v21;
    sub_20C165FC0(a1, (uint64_t)__p);
    v30 = v4[9];
    v29 = v4[10];
    if (v30 >= v29)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v7) >> 3);
      v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v7) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v33;
      v52 = v4 + 10;
      if (v35)
        v36 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v35);
      else
        v36 = 0;
      v37 = &v36[24 * v32];
      v48 = v36;
      v49 = v37;
      v51 = &v36[24 * v35];
      v38 = *(_OWORD *)__p;
      *((_QWORD *)v37 + 2) = v43;
      *(_OWORD *)v37 = v38;
      __p[1] = 0;
      v43 = 0;
      __p[0] = 0;
      v50 = v37 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v39 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
      v40 = SHIBYTE(v43);
      v4[9] = v39;
      if (v40 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v31 = *(_OWORD *)__p;
      *(_QWORD *)(v30 + 16) = v43;
      *(_OWORD *)v30 = v31;
      v4[9] = v30 + 24;
    }
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v47) < 0)
      operator delete(v46[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v41 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v41;
  }
}

void sub_20C179B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  sub_20BDF3648((uint64_t)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C179C1C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C01B788(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C179CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C179D1C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C179D70(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C179D70(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C179E70(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C179E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C179E70(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABAD7ALL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABAD7ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C179EEC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C179F00(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C17A710(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C178A14(a1, (uint64_t)v37);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C17A278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C17A308(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS5_5blankES8_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS5_5blankES8_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C179F00(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C17A308(v37, a1);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C17A680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C17A710(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  void *__p[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t *v52;

  v4 = sub_20C17AB34(a1, 2);
  if (v5)
  {
    sub_20C165FC0(a1, (uint64_t)v46);
    v6 = v4[10];
    v7 = v4 + 8;
    v8 = v4[9];
    if (v8 >= v6)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v52 = v4 + 10;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v14);
      else
        v15 = 0;
      v16 = &v15[24 * v11];
      v48 = v15;
      v49 = v16;
      v51 = &v15[24 * v14];
      v17 = *(_OWORD *)v46;
      *((_QWORD *)v16 + 2) = v47;
      *(_OWORD *)v16 = v17;
      v46[1] = 0;
      v47 = 0;
      v46[0] = 0;
      v50 = v16 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v10 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
    }
    else
    {
      v9 = *(_OWORD *)v46;
      *(_QWORD *)(v8 + 16) = v47;
      *(_OWORD *)v8 = v9;
      v46[1] = 0;
      v47 = 0;
      v46[0] = 0;
      v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_20C1776B0(a1, (uint64_t)v44);
    v18 = v4[9];
    v19 = v4[10];
    if (v18 >= v19)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      v52 = v4 + 10;
      if (v25)
        v26 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v25);
      else
        v26 = 0;
      v27 = &v26[24 * v22];
      v48 = v26;
      v49 = v27;
      v51 = &v26[24 * v25];
      v28 = *(_OWORD *)v44;
      *((_QWORD *)v27 + 2) = v45;
      *(_OWORD *)v27 = v28;
      v44[1] = 0;
      v45 = 0;
      v44[0] = 0;
      v50 = v27 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v21 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
    }
    else
    {
      v20 = *(_OWORD *)v44;
      *(_QWORD *)(v18 + 16) = v45;
      *(_OWORD *)v18 = v20;
      v44[1] = 0;
      v45 = 0;
      v44[0] = 0;
      v21 = v18 + 24;
      v4[9] = v18 + 24;
    }
    v4[9] = v21;
    sub_20C165FC0(a1, (uint64_t)__p);
    v30 = v4[9];
    v29 = v4[10];
    if (v30 >= v29)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v7) >> 3);
      v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v7) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v33;
      v52 = v4 + 10;
      if (v35)
        v36 = (char *)sub_20BDE4FF4((uint64_t)(v4 + 10), v35);
      else
        v36 = 0;
      v37 = &v36[24 * v32];
      v48 = v36;
      v49 = v37;
      v51 = &v36[24 * v35];
      v38 = *(_OWORD *)__p;
      *((_QWORD *)v37 + 2) = v43;
      *(_OWORD *)v37 = v38;
      __p[1] = 0;
      v43 = 0;
      __p[0] = 0;
      v50 = v37 + 24;
      sub_20BDF34C0(v4 + 8, &v48);
      v39 = v4[9];
      sub_20BDF3648((uint64_t)&v48);
      v40 = SHIBYTE(v43);
      v4[9] = v39;
      if (v40 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v31 = *(_OWORD *)__p;
      *(_QWORD *)(v30 + 16) = v43;
      *(_OWORD *)v30 = v31;
      v4[9] = v30 + 24;
    }
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v47) < 0)
      operator delete(v46[0]);
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    v41 = *((_OWORD *)v4 + 2);
    *(_QWORD *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v41;
  }
}

void sub_20C17AAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  sub_20BDF3648((uint64_t)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C17AB34(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C17AC34(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C17AC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C17AC34(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABAFA3 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABAFA3 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C17ACB0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C17ACC4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t *v22;
  char v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  void *v62[2];
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  void *v66[2];
  uint64_t v67;
  uint64_t v68;
  void *v69[2];
  _QWORD *v70;
  void *__p[2];
  _QWORD *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void **v77[2];

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgENS0_3padINS0_5ascii3oneIJLc44EEEENS6_5blankES9_EEvEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v69, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgENS0_3padINS0_5ascii3oneIJLc44EEEENS6_5blankES9_EEvEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v66[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v69;
  v72 = v70;
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  LOBYTE(v73) = 2;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v67 = 0;
  v68 = 0;
  v66[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v64[0] = &v74;
  sub_20BDE5038((void ***)v64);
  if (SHIBYTE(v72) < 0)
    operator delete(__p[0]);
  v64[0] = &v66[1];
  sub_20BDE5038((void ***)v64);
  if (SHIBYTE(v70) < 0)
    operator delete(v69[0]);
  if (v8)
  {
    sub_20C17B47C(a1, (uint64_t)v64);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v74 = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v73 = &v18[24 * v17];
      v20 = *(_OWORD *)v64;
      *((_QWORD *)v19 + 2) = v65;
      *(_OWORD *)v19 = v20;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v72 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v64;
      *(_QWORD *)(v11 + 16) = v65;
      *(_OWORD *)v11 = v12;
      v64[1] = 0;
      v65 = 0;
      v64[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_20BDDC0E4(v69, v21);
      free(v21);
    }
    else
    {
      sub_20BDDC0E4(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v66[0]) = 1;
    *(_OWORD *)__p = *(_OWORD *)v69;
    v72 = v70;
    v69[0] = 0;
    v69[1] = 0;
    v70 = 0;
    LOBYTE(v73) = 1;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    v67 = 0;
    v68 = 0;
    v66[1] = 0;
    v22 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v24 = v23;
    v77[0] = (void **)&v74;
    sub_20BDE5038(v77);
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    v77[0] = &v66[1];
    sub_20BDE5038(v77);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
    if (v24)
    {
      sub_20C17BED0(a1, (uint64_t)v66);
      v25 = v22 + 8;
      v26 = v22[10];
      v27 = v22[9];
      if (v27 >= v26)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        v74 = v22 + 10;
        if (v33)
          v34 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v33);
        else
          v34 = 0;
        v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        v73 = &v34[24 * v33];
        v36 = *(_OWORD *)v66;
        *((_QWORD *)v35 + 2) = v67;
        *(_OWORD *)v35 = v36;
        v66[1] = 0;
        v67 = 0;
        v66[0] = 0;
        v72 = v35 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v29 = v22[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v28 = *(_OWORD *)v66;
        *(_QWORD *)(v27 + 16) = v67;
        *(_OWORD *)v27 = v28;
        v66[1] = 0;
        v67 = 0;
        v66[0] = 0;
        v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_20C17C2D8(a1, (uint64_t)v69);
      v38 = v22[9];
      v37 = v22[10];
      if (v38 >= v37)
      {
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0x555555555555555)
          v43 = 0xAAAAAAAAAAAAAAALL;
        else
          v43 = v41;
        v74 = v22 + 10;
        if (v43)
          v44 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v43);
        else
          v44 = 0;
        v45 = &v44[24 * v40];
        __p[0] = v44;
        __p[1] = v45;
        v73 = &v44[24 * v43];
        v46 = *(_OWORD *)v69;
        *((_QWORD *)v45 + 2) = v70;
        *(_OWORD *)v45 = v46;
        v69[1] = 0;
        v70 = 0;
        v69[0] = 0;
        v72 = v45 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v47 = v22[9];
        sub_20BDF3648((uint64_t)__p);
        v48 = SHIBYTE(v70);
        v22[9] = v47;
        if (v48 < 0)
          operator delete(v69[0]);
      }
      else
      {
        v39 = *(_OWORD *)v69;
        *(_QWORD *)(v38 + 16) = v70;
        *(_OWORD *)v38 = v39;
        v22[9] = v38 + 24;
      }
      if (SHIBYTE(v67) < 0)
        operator delete(v66[0]);
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_20BDDBFAC(v62, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)v62 = *((_OWORD *)v22 + 2);
      v63 = v22[6];
    }
    v50 = v6[9];
    v49 = v6[10];
    if (v50 >= v49)
    {
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v10) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v10) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      v74 = v6 + 10;
      if (v55)
        v56 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v55);
      else
        v56 = 0;
      v57 = &v56[24 * v52];
      __p[0] = v56;
      __p[1] = v57;
      v73 = &v56[24 * v55];
      v58 = *(_OWORD *)v62;
      *((_QWORD *)v57 + 2) = v63;
      *(_OWORD *)v57 = v58;
      v62[1] = 0;
      v63 = 0;
      v62[0] = 0;
      v72 = v57 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v59 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v60 = SHIBYTE(v63);
      v6[9] = v59;
      if (v60 < 0)
        operator delete(v62[0]);
    }
    else
    {
      v51 = *(_OWORD *)v62;
      *(_QWORD *)(v50 + 16) = v63;
      *(_OWORD *)v50 = v51;
      v6[9] = v50 + 24;
    }
    if (SHIBYTE(v65) < 0)
      operator delete(v64[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v61 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v61;
  }
}

void sub_20C17B364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  sub_20BDF3648((uint64_t)&a35);
  if (a34 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20C17B47C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t *v22;
  char v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  __int128 v83;
  void *v84[2];
  uint64_t v85;
  void *v86[2];
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  void *v90[2];
  uint64_t v91;
  void *v92[2];
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  _QWORD *v96;
  void *__p[2];
  _QWORD *v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(&v95, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(&v95, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v92[0]) = 2;
  *(_OWORD *)__p = v95;
  v98 = v96;
  v95 = 0uLL;
  v96 = 0;
  LOBYTE(v99) = 2;
  v101 = 0;
  v102 = 0;
  v100 = 0;
  v93 = 0;
  v94 = 0;
  v92[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v90[0] = &v100;
  sub_20BDE5038((void ***)v90);
  if (SHIBYTE(v98) < 0)
    operator delete(__p[0]);
  v90[0] = &v92[1];
  sub_20BDE5038((void ***)v90);
  if (SHIBYTE(v96) < 0)
    operator delete((void *)v95);
  if (v8)
  {
    sub_20C179068(a1, (uint64_t)v86);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v100 = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v99 = &v18[24 * v17];
      v20 = *(_OWORD *)v86;
      *((_QWORD *)v19 + 2) = v87;
      *(_OWORD *)v19 = v20;
      v86[1] = 0;
      v87 = 0;
      v86[0] = 0;
      v98 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v86;
      *(_QWORD *)(v11 + 16) = v87;
      *(_OWORD *)v11 = v12;
      v86[1] = 0;
      v87 = 0;
      v86[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_20BDDC0E4(&v95, v21);
      free(v21);
    }
    else
    {
      sub_20BDDC0E4(&v95, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v92[0]) = 3;
    *(_OWORD *)__p = v95;
    v98 = v96;
    v95 = 0uLL;
    v96 = 0;
    LOBYTE(v99) = 3;
    v101 = 0;
    v102 = 0;
    v100 = 0;
    v93 = 0;
    v94 = 0;
    v92[1] = 0;
    v22 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v24 = v23;
    v90[0] = &v100;
    sub_20BDE5038((void ***)v90);
    if (SHIBYTE(v98) < 0)
      operator delete(__p[0]);
    v90[0] = &v92[1];
    sub_20BDE5038((void ***)v90);
    if (SHIBYTE(v96) < 0)
      operator delete((void *)v95);
    if (v24)
    {
      sub_20C169818(a1, (uint64_t)v92);
      v25 = v22 + 8;
      v26 = v22[10];
      v27 = v22[9];
      if (v27 >= v26)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        v100 = v22 + 10;
        if (v33)
          v34 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v33);
        else
          v34 = 0;
        v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        v99 = &v34[24 * v33];
        v36 = *(_OWORD *)v92;
        *((_QWORD *)v35 + 2) = v93;
        *(_OWORD *)v35 = v36;
        v92[1] = 0;
        v93 = 0;
        v92[0] = 0;
        v98 = v35 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v29 = v22[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v28 = *(_OWORD *)v92;
        *(_QWORD *)(v27 + 16) = v93;
        *(_OWORD *)v27 = v28;
        v92[1] = 0;
        v93 = 0;
        v92[0] = 0;
        v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_20C16B7DC(a1, (uint64_t)&v95);
      v37 = v22[9];
      v38 = v22[10];
      if (v37 >= v38)
      {
        v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0x555555555555555)
          v44 = 0xAAAAAAAAAAAAAAALL;
        else
          v44 = v42;
        v100 = v22 + 10;
        if (v44)
          v45 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v44);
        else
          v45 = 0;
        v46 = &v45[24 * v41];
        __p[0] = v45;
        __p[1] = v46;
        v99 = &v45[24 * v44];
        v47 = v95;
        *((_QWORD *)v46 + 2) = v96;
        *(_OWORD *)v46 = v47;
        v96 = 0;
        v95 = 0uLL;
        v98 = v46 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v40 = v22[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v39 = v95;
        *(_QWORD *)(v37 + 16) = v96;
        *(_OWORD *)v37 = v39;
        v96 = 0;
        v95 = 0uLL;
        v40 = v37 + 24;
        v22[9] = v37 + 24;
      }
      v22[9] = v40;
      sub_20C16BBE4(a1, (uint64_t)v90);
      v48 = v22[9];
      v49 = v22[10];
      if (v48 >= v49)
      {
        v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *v25) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v25) >> 3);
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0x555555555555555)
          v55 = 0xAAAAAAAAAAAAAAALL;
        else
          v55 = v53;
        v100 = v22 + 10;
        if (v55)
          v56 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v55);
        else
          v56 = 0;
        v57 = &v56[24 * v52];
        __p[0] = v56;
        __p[1] = v57;
        v99 = &v56[24 * v55];
        v58 = *(_OWORD *)v90;
        *((_QWORD *)v57 + 2) = v91;
        *(_OWORD *)v57 = v58;
        v90[1] = 0;
        v91 = 0;
        v90[0] = 0;
        v98 = v57 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v51 = v22[9];
        sub_20BDF3648((uint64_t)__p);
      }
      else
      {
        v50 = *(_OWORD *)v90;
        *(_QWORD *)(v48 + 16) = v91;
        *(_OWORD *)v48 = v50;
        v90[1] = 0;
        v91 = 0;
        v90[0] = 0;
        v51 = v48 + 24;
        v22[9] = v48 + 24;
      }
      v22[9] = v51;
      sub_20C16C734(a1, (uint64_t)v88);
      v60 = v22[9];
      v59 = v22[10];
      if (v60 >= v59)
      {
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v25) >> 3);
        v63 = v62 + 1;
        if (v62 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - *v25) >> 3);
        if (2 * v64 > v63)
          v63 = 2 * v64;
        if (v64 >= 0x555555555555555)
          v65 = 0xAAAAAAAAAAAAAAALL;
        else
          v65 = v63;
        v100 = v22 + 10;
        if (v65)
          v66 = (char *)sub_20BDE4FF4((uint64_t)(v22 + 10), v65);
        else
          v66 = 0;
        v67 = &v66[24 * v62];
        __p[0] = v66;
        __p[1] = v67;
        v99 = &v66[24 * v65];
        v68 = *(_OWORD *)v88;
        *((_QWORD *)v67 + 2) = v89;
        *(_OWORD *)v67 = v68;
        v88[1] = 0;
        v89 = 0;
        v88[0] = 0;
        v98 = v67 + 24;
        sub_20BDF34C0(v22 + 8, __p);
        v69 = v22[9];
        sub_20BDF3648((uint64_t)__p);
        v70 = SHIBYTE(v89);
        v22[9] = v69;
        if (v70 < 0)
          operator delete(v88[0]);
      }
      else
      {
        v61 = *(_OWORD *)v88;
        *(_QWORD *)(v60 + 16) = v89;
        *(_OWORD *)v60 = v61;
        v22[9] = v60 + 24;
      }
      if (SHIBYTE(v91) < 0)
        operator delete(v90[0]);
      if (SHIBYTE(v96) < 0)
        operator delete((void *)v95);
      if (SHIBYTE(v93) < 0)
        operator delete(v92[0]);
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_20BDDBFAC(v84, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)v84 = *((_OWORD *)v22 + 2);
      v85 = v22[6];
    }
    v72 = v6[9];
    v71 = v6[10];
    if (v72 >= v71)
    {
      v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *v10) >> 3);
      v75 = v74 + 1;
      if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - *v10) >> 3);
      if (2 * v76 > v75)
        v75 = 2 * v76;
      if (v76 >= 0x555555555555555)
        v77 = 0xAAAAAAAAAAAAAAALL;
      else
        v77 = v75;
      v100 = v6 + 10;
      if (v77)
        v78 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v77);
      else
        v78 = 0;
      v79 = &v78[24 * v74];
      __p[0] = v78;
      __p[1] = v79;
      v99 = &v78[24 * v77];
      v80 = *(_OWORD *)v84;
      *((_QWORD *)v79 + 2) = v85;
      *(_OWORD *)v79 = v80;
      v84[1] = 0;
      v85 = 0;
      v84[0] = 0;
      v98 = v79 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v81 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v82 = SHIBYTE(v85);
      v6[9] = v81;
      if (v82 < 0)
        operator delete(v84[0]);
    }
    else
    {
      v73 = *(_OWORD *)v84;
      *(_QWORD *)(v72 + 16) = v85;
      *(_OWORD *)v72 = v73;
      v6[9] = v72 + 24;
    }
    if (SHIBYTE(v87) < 0)
      operator delete(v86[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v83 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v83;
  }
}

void sub_20C17BD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  sub_20BDF3648((uint64_t)&a47);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a46 < 0)
    operator delete(a41);
  if (a39 < 0)
    operator delete(a34);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20C17BED0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C17A710(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C17B47C(a1, (uint64_t)v37);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C17C248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C17C2D8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS5_5blankES8_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS5_5blankES8_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C17BED0(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C17C2D8(v37, a1);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C17C650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C17C6E0(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C17C7E0(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C17C7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C17C7E0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABB697 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABB697 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C17C85C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C17C870(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C17C970(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C17C940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C17C970(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABB6E6 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABB6E6 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C17C9EC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C17CA00(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  char v12;
  char v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  char v17;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  void *v92[2];
  uint64_t v93;
  void *__dst[2];
  uint64_t v95;
  void **v96;
  void *v97[2];
  uint64_t v98;
  uint64_t v99;
  void *v100[2];
  _QWORD *v101;
  void *__p[2];
  _QWORD *v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS5_10PredFactorEEEES6_S7_EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v100, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v100, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS5_10PredFactorEEEES6_S7_EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v97[0]) = 2;
  *(_OWORD *)__p = *(_OWORD *)v100;
  v103 = v101;
  v100[0] = 0;
  v100[1] = 0;
  v101 = 0;
  LOBYTE(v104) = 2;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  v98 = 0;
  v99 = 0;
  v97[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  __dst[0] = &v105;
  sub_20BDE5038((void ***)__dst);
  if (SHIBYTE(v103) < 0)
    operator delete(__p[0]);
  __dst[0] = &v97[1];
  sub_20BDE5038((void ***)__dst);
  if (SHIBYTE(v101) < 0)
    operator delete(v100[0]);
  if (v8)
  {
    v9 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS3_10PredFactorEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      v10 = v9;
      sub_20BDDC0E4(v100, v9);
      free(v10);
    }
    else
    {
      sub_20BDDC0E4(v100, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS3_10PredFactorEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v97[0]) = 1;
    *(_OWORD *)__p = *(_OWORD *)v100;
    v103 = v101;
    v100[0] = 0;
    v100[1] = 0;
    v101 = 0;
    LOBYTE(v104) = 1;
    v106 = 0;
    v107 = 0;
    v105 = 0;
    v98 = 0;
    v99 = 0;
    v97[1] = 0;
    v11 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
    v13 = v12;
    __dst[0] = &v105;
    sub_20BDE5038((void ***)__dst);
    if (SHIBYTE(v103) < 0)
      operator delete(__p[0]);
    __dst[0] = &v97[1];
    sub_20BDE5038((void ***)__dst);
    if (SHIBYTE(v101) < 0)
      operator delete(v100[0]);
    if (v13)
    {
      v14 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS4_10PredFactorEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v14)
      {
        v15 = v14;
        sub_20BDDC0E4(v100, v14);
        free(v15);
      }
      else
      {
        sub_20BDDC0E4(v100, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS4_10PredFactorEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v97[0]) = 2;
      *(_OWORD *)__p = *(_OWORD *)v100;
      v103 = v101;
      v100[0] = 0;
      v100[1] = 0;
      v101 = 0;
      LOBYTE(v104) = 2;
      v106 = 0;
      v107 = 0;
      v105 = 0;
      v98 = 0;
      v99 = 0;
      v97[1] = 0;
      v16 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
      v18 = v17;
      v96 = (void **)&v105;
      sub_20BDE5038(&v96);
      if (SHIBYTE(v103) < 0)
        operator delete(__p[0]);
      v96 = &v97[1];
      sub_20BDE5038(&v96);
      if (SHIBYTE(v101) < 0)
        operator delete(v100[0]);
      if (v18)
      {
        sub_20C17D918(a1, (uint64_t)v97);
        v19 = v16[10];
        v20 = v16 + 8;
        v21 = v16[9];
        if (v21 >= v19)
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v20) >> 3);
          v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v20) >> 3);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x555555555555555)
            v27 = 0xAAAAAAAAAAAAAAALL;
          else
            v27 = v25;
          v105 = v16 + 10;
          if (v27)
            v28 = (char *)sub_20BDE4FF4((uint64_t)(v16 + 10), v27);
          else
            v28 = 0;
          v29 = &v28[24 * v24];
          __p[0] = v28;
          __p[1] = v29;
          v104 = &v28[24 * v27];
          v30 = *(_OWORD *)v97;
          *((_QWORD *)v29 + 2) = v98;
          *(_OWORD *)v29 = v30;
          v97[1] = 0;
          v98 = 0;
          v97[0] = 0;
          v103 = v29 + 24;
          sub_20BDF34C0(v16 + 8, __p);
          v23 = v16[9];
          sub_20BDF3648((uint64_t)__p);
        }
        else
        {
          v22 = *(_OWORD *)v97;
          *(_QWORD *)(v21 + 16) = v98;
          *(_OWORD *)v21 = v22;
          v97[1] = 0;
          v98 = 0;
          v97[0] = 0;
          v23 = v21 + 24;
          v16[9] = v21 + 24;
        }
        v16[9] = v23;
        sub_20C160254(a1, (uint64_t)v100);
        v32 = v16[9];
        v31 = v16[10];
        if (v32 >= v31)
        {
          v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *v20) >> 3);
          v35 = v34 + 1;
          if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *v20) >> 3);
          if (2 * v36 > v35)
            v35 = 2 * v36;
          if (v36 >= 0x555555555555555)
            v37 = 0xAAAAAAAAAAAAAAALL;
          else
            v37 = v35;
          v105 = v16 + 10;
          if (v37)
            v38 = (char *)sub_20BDE4FF4((uint64_t)(v16 + 10), v37);
          else
            v38 = 0;
          v39 = &v38[24 * v34];
          __p[0] = v38;
          __p[1] = v39;
          v104 = &v38[24 * v37];
          v40 = *(_OWORD *)v100;
          *((_QWORD *)v39 + 2) = v101;
          *(_OWORD *)v39 = v40;
          v100[1] = 0;
          v101 = 0;
          v100[0] = 0;
          v103 = v39 + 24;
          sub_20BDF34C0(v16 + 8, __p);
          v41 = v16[9];
          sub_20BDF3648((uint64_t)__p);
          v42 = SHIBYTE(v101);
          v16[9] = v41;
          if (v42 < 0)
            operator delete(v100[0]);
        }
        else
        {
          v33 = *(_OWORD *)v100;
          *(_QWORD *)(v32 + 16) = v101;
          *(_OWORD *)v32 = v33;
          v16[9] = v32 + 24;
        }
        if (SHIBYTE(v98) < 0)
          operator delete(v97[0]);
      }
      if (*((char *)v16 + 55) < 0)
      {
        sub_20BDDBFAC(__dst, (void *)v16[4], v16[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v16 + 2);
        v95 = v16[6];
      }
      v43 = v11[10];
      v44 = v11[9];
      if (v44 >= v43)
      {
        v46 = v11[8];
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v46) >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v46) >> 3);
        if (2 * v49 > v48)
          v48 = 2 * v49;
        if (v49 >= 0x555555555555555)
          v50 = 0xAAAAAAAAAAAAAAALL;
        else
          v50 = v48;
        v105 = v11 + 10;
        if (v50)
          v51 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v50);
        else
          v51 = 0;
        v52 = &v51[24 * v47];
        __p[0] = v51;
        __p[1] = v52;
        v104 = &v51[24 * v50];
        v53 = *(_OWORD *)__dst;
        *((_QWORD *)v52 + 2) = v95;
        *(_OWORD *)v52 = v53;
        __dst[1] = 0;
        v95 = 0;
        __dst[0] = 0;
        v103 = v52 + 24;
        sub_20BDF34C0(v11 + 8, __p);
        v54 = v11[9];
        sub_20BDF3648((uint64_t)__p);
        v55 = SHIBYTE(v95);
        v11[9] = v54;
        if (v55 < 0)
          operator delete(__dst[0]);
      }
      else
      {
        v45 = *(_OWORD *)__dst;
        *(_QWORD *)(v44 + 16) = v95;
        *(_OWORD *)v44 = v45;
        v11[9] = v44 + 24;
      }
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_20BDDBFAC(v92, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)v92 = *((_OWORD *)v11 + 2);
      v93 = v11[6];
    }
    v56 = v6 + 8;
    v57 = v6[10];
    v58 = v6[9];
    if (v58 >= v57)
    {
      v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v56) >> 3);
      v62 = v61 + 1;
      if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v56) >> 3);
      if (2 * v63 > v62)
        v62 = 2 * v63;
      if (v63 >= 0x555555555555555)
        v64 = 0xAAAAAAAAAAAAAAALL;
      else
        v64 = v62;
      v105 = v6 + 10;
      if (v64)
        v65 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v64);
      else
        v65 = 0;
      v66 = &v65[24 * v61];
      __p[0] = v65;
      __p[1] = v66;
      v104 = &v65[24 * v64];
      v67 = *(_OWORD *)v92;
      *((_QWORD *)v66 + 2) = v93;
      *(_OWORD *)v66 = v67;
      v92[1] = 0;
      v93 = 0;
      v92[0] = 0;
      v103 = v66 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v60 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v59 = *(_OWORD *)v92;
      *(_QWORD *)(v58 + 16) = v93;
      *(_OWORD *)v58 = v59;
      v92[1] = 0;
      v93 = 0;
      v92[0] = 0;
      v60 = v58 + 24;
      v6[9] = v58 + 24;
    }
    v6[9] = v60;
    sub_20C17D918(a1, (uint64_t)v97);
    v68 = v6[9];
    v69 = v6[10];
    if (v68 >= v69)
    {
      v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *v56) >> 3);
      v73 = v72 + 1;
      if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *v56) >> 3);
      if (2 * v74 > v73)
        v73 = 2 * v74;
      if (v74 >= 0x555555555555555)
        v75 = 0xAAAAAAAAAAAAAAALL;
      else
        v75 = v73;
      v105 = v6 + 10;
      if (v75)
        v76 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v75);
      else
        v76 = 0;
      v77 = &v76[24 * v72];
      __p[0] = v76;
      __p[1] = v77;
      v104 = &v76[24 * v75];
      v78 = *(_OWORD *)v97;
      *((_QWORD *)v77 + 2) = v98;
      *(_OWORD *)v77 = v78;
      v97[1] = 0;
      v98 = 0;
      v97[0] = 0;
      v103 = v77 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v71 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v70 = *(_OWORD *)v97;
      *(_QWORD *)(v68 + 16) = v98;
      *(_OWORD *)v68 = v70;
      v97[1] = 0;
      v98 = 0;
      v97[0] = 0;
      v71 = v68 + 24;
      v6[9] = v68 + 24;
    }
    v6[9] = v71;
    sub_20C160254(a1, (uint64_t)v100);
    v80 = v6[9];
    v79 = v6[10];
    if (v80 >= v79)
    {
      v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - *v56) >> 3);
      v83 = v82 + 1;
      if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *v56) >> 3);
      if (2 * v84 > v83)
        v83 = 2 * v84;
      if (v84 >= 0x555555555555555)
        v85 = 0xAAAAAAAAAAAAAAALL;
      else
        v85 = v83;
      v105 = v6 + 10;
      if (v85)
        v86 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v85);
      else
        v86 = 0;
      v87 = &v86[24 * v82];
      __p[0] = v86;
      __p[1] = v87;
      v104 = &v86[24 * v85];
      v88 = *(_OWORD *)v100;
      *((_QWORD *)v87 + 2) = v101;
      *(_OWORD *)v87 = v88;
      v100[1] = 0;
      v101 = 0;
      v100[0] = 0;
      v103 = v87 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v89 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v90 = SHIBYTE(v101);
      v6[9] = v89;
      if (v90 < 0)
        operator delete(v100[0]);
    }
    else
    {
      v81 = *(_OWORD *)v100;
      *(_QWORD *)(v80 + 16) = v101;
      *(_OWORD *)v80 = v81;
      v6[9] = v80 + 24;
    }
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
    if (SHIBYTE(v93) < 0)
      operator delete(v92[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v91 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v91;
  }
}

void sub_20C17D39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  sub_20BDF3648((uint64_t)&a37);
  if (a36 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

void sub_20C17D510(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  _QWORD *v38;
  void *__p[2];
  _QWORD *v40;
  char *v41;
  _QWORD v42[3];
  void **v43;

  v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS6_10PredFactorEEEES7_S8_EEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(v37, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS6_10PredFactorEEEES7_S8_EEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)__p = *(_OWORD *)v37;
  v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  v35 = 0;
  v36 = 0;
  v34[1] = 0;
  v6 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v8 = v7;
  v43 = (void **)v42;
  sub_20BDE5038(&v43);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v43 = &v34[1];
  sub_20BDE5038(&v43);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v8)
  {
    sub_20C17CA00(a1, (uint64_t)v34);
    v9 = v6[10];
    v10 = v6 + 8;
    v11 = v6[9];
    if (v11 >= v9)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v42[0] = v6 + 10;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v17);
      else
        v18 = 0;
      v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v41 = &v18[24 * v17];
      v20 = *(_OWORD *)v34;
      *((_QWORD *)v19 + 2) = v35;
      *(_OWORD *)v19 = v20;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v40 = v19 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v13 = v6[9];
      sub_20BDF3648((uint64_t)__p);
    }
    else
    {
      v12 = *(_OWORD *)v34;
      *(_QWORD *)(v11 + 16) = v35;
      *(_OWORD *)v11 = v12;
      v34[1] = 0;
      v35 = 0;
      v34[0] = 0;
      v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_20C17D510(v37, a1);
    v22 = v6[9];
    v21 = v6[10];
    if (v22 >= v21)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      v42[0] = v6 + 10;
      if (v27)
        v28 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      v41 = &v28[24 * v27];
      v30 = *(_OWORD *)v37;
      *((_QWORD *)v29 + 2) = v38;
      *(_OWORD *)v29 = v30;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
      v40 = v29 + 24;
      sub_20BDF34C0(v6 + 8, __p);
      v31 = v6[9];
      sub_20BDF3648((uint64_t)__p);
      v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0)
        operator delete(v37[0]);
    }
    else
    {
      v23 = *(_OWORD *)v37;
      *(_QWORD *)(v22 + 16) = v38;
      *(_OWORD *)v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v33 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_20C17D888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_20BDF3648((uint64_t)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_20C17D918(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  char v12;
  char v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t *v27;
  char v28;
  char v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  __int128 v88;
  char *v89;
  uint64_t *v90;
  char v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  __int128 v104;
  char *v105;
  uint64_t v106;
  uint64_t *v107;
  char v108;
  char v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  __int128 v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  __int128 v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  __int128 v144;
  unint64_t v145;
  unint64_t v146;
  __int128 v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  __int128 v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  __int128 v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  __int128 v167;
  char *v168;
  uint64_t *v169;
  char v170;
  char v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  __int128 v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  __int128 v183;
  unint64_t v184;
  unint64_t v185;
  __int128 v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  __int128 v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  __int128 v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  __int128 v205;
  uint64_t v206;
  int v207;
  __int128 v208;
  uint64_t *v209;
  void *v210[2];
  uint64_t v211;
  void *v212[2];
  uint64_t v213;
  void *__dst[2];
  uint64_t v215;
  void *v216[2];
  uint64_t v217;
  void **v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  __int128 __p;
  char *v223;
  __int128 v224;
  char *v225;
  char *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;

  v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    v5 = v4;
    sub_20BDDC0E4(&__p, v4);
    free(v5);
  }
  else
  {
    sub_20BDDC0E4(&__p, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v219) = 3;
  v224 = __p;
  v225 = v223;
  __p = 0uLL;
  v223 = 0;
  LOBYTE(v226) = 3;
  v228 = 0;
  v229 = 0;
  v227 = 0;
  v220 = 0;
  v221 = 0;
  *((_QWORD *)&v219 + 1) = 0;
  v6 = sub_20C165DCC(a1, (const void **)&v224, &v224);
  v8 = v7;
  v216[0] = &v227;
  sub_20BDE5038((void ***)v216);
  if (SHIBYTE(v225) < 0)
    operator delete((void *)v224);
  v216[0] = (char *)&v219 + 8;
  sub_20BDE5038((void ***)v216);
  if (SHIBYTE(v223) < 0)
    operator delete((void *)__p);
  if (v8)
  {
    v9 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15AndKWENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      v10 = v9;
      sub_20BDDC0E4(&__p, v9);
      free(v10);
    }
    else
    {
      sub_20BDDC0E4(&__p, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15AndKWENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v219) = 2;
    v224 = __p;
    v225 = v223;
    __p = 0uLL;
    v223 = 0;
    LOBYTE(v226) = 2;
    v228 = 0;
    v229 = 0;
    v227 = 0;
    v220 = 0;
    v221 = 0;
    *((_QWORD *)&v219 + 1) = 0;
    v11 = sub_20C165DCC(a1, (const void **)&v224, &v224);
    v13 = v12;
    v216[0] = &v227;
    sub_20BDE5038((void ***)v216);
    if (SHIBYTE(v225) < 0)
      operator delete((void *)v224);
    v216[0] = (char *)&v219 + 8;
    sub_20BDE5038((void ***)v216);
    if (SHIBYTE(v223) < 0)
      operator delete((void *)__p);
    if (v13)
    {
      sub_20C165FC0(a1, (uint64_t)v216);
      v14 = v11[10];
      v15 = v11 + 8;
      v16 = v11[9];
      if (v16 >= v14)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v15) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v15) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        v227 = v11 + 10;
        if (v22)
          v23 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v22);
        else
          v23 = 0;
        v24 = &v23[24 * v19];
        *(_QWORD *)&v224 = v23;
        *((_QWORD *)&v224 + 1) = v24;
        v226 = &v23[24 * v22];
        v25 = *(_OWORD *)v216;
        *((_QWORD *)v24 + 2) = v217;
        *(_OWORD *)v24 = v25;
        v216[1] = 0;
        v217 = 0;
        v216[0] = 0;
        v225 = v24 + 24;
        sub_20BDF34C0(v11 + 8, &v224);
        v18 = v11[9];
        sub_20BDF3648((uint64_t)&v224);
      }
      else
      {
        v17 = *(_OWORD *)v216;
        *(_QWORD *)(v16 + 16) = v217;
        *(_OWORD *)v16 = v17;
        v216[1] = 0;
        v217 = 0;
        v216[0] = 0;
        v18 = v16 + 24;
        v11[9] = v16 + 24;
      }
      v11[9] = v18;
      v26 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15AndKWE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v26)
      {
        sub_20BDDC0E4(&__p, v26);
        free(v26);
      }
      else
      {
        sub_20BDDC0E4(&__p, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15AndKWE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v219) = 2;
      v224 = __p;
      v225 = v223;
      __p = 0uLL;
      v223 = 0;
      LOBYTE(v226) = 2;
      v228 = 0;
      v229 = 0;
      v227 = 0;
      v220 = 0;
      v221 = 0;
      *((_QWORD *)&v219 + 1) = 0;
      v27 = sub_20C165DCC(a1, (const void **)&v224, &v224);
      v29 = v28;
      v210[0] = &v227;
      sub_20BDE5038((void ***)v210);
      if (SHIBYTE(v225) < 0)
        operator delete((void *)v224);
      v210[0] = (char *)&v219 + 8;
      sub_20BDE5038((void ***)v210);
      if (SHIBYTE(v223) < 0)
        operator delete((void *)__p);
      if (v29)
      {
        sub_20C17F3F4(a1, (uint64_t)&v219);
        v30 = v27 + 8;
        v31 = v27[10];
        v32 = v27[9];
        if (v32 >= v31)
        {
          v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *v30) >> 3);
          v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *v30) >> 3);
          if (2 * v37 > v36)
            v36 = 2 * v37;
          if (v37 >= 0x555555555555555)
            v38 = 0xAAAAAAAAAAAAAAALL;
          else
            v38 = v36;
          v227 = v27 + 10;
          if (v38)
            v39 = (char *)sub_20BDE4FF4((uint64_t)(v27 + 10), v38);
          else
            v39 = 0;
          v40 = &v39[24 * v35];
          *(_QWORD *)&v224 = v39;
          *((_QWORD *)&v224 + 1) = v40;
          v226 = &v39[24 * v38];
          v41 = v219;
          *((_QWORD *)v40 + 2) = v220;
          *(_OWORD *)v40 = v41;
          v220 = 0;
          v219 = 0uLL;
          v225 = v40 + 24;
          sub_20BDF34C0(v27 + 8, &v224);
          v34 = v27[9];
          sub_20BDF3648((uint64_t)&v224);
        }
        else
        {
          v33 = v219;
          *(_QWORD *)(v32 + 16) = v220;
          *(_OWORD *)v32 = v33;
          v220 = 0;
          v219 = 0uLL;
          v34 = v32 + 24;
          v27[9] = v32 + 24;
        }
        v27[9] = v34;
        sub_20C166A8C(a1, (uint64_t)&__p);
        v43 = v27[9];
        v42 = v27[10];
        if (v43 >= v42)
        {
          v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *v30) >> 3);
          v46 = v45 + 1;
          if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v30) >> 3);
          if (2 * v47 > v46)
            v46 = 2 * v47;
          if (v47 >= 0x555555555555555)
            v48 = 0xAAAAAAAAAAAAAAALL;
          else
            v48 = v46;
          v227 = v27 + 10;
          if (v48)
            v49 = (char *)sub_20BDE4FF4((uint64_t)(v27 + 10), v48);
          else
            v49 = 0;
          v50 = &v49[24 * v45];
          *(_QWORD *)&v224 = v49;
          *((_QWORD *)&v224 + 1) = v50;
          v226 = &v49[24 * v48];
          v51 = __p;
          *((_QWORD *)v50 + 2) = v223;
          *(_OWORD *)v50 = v51;
          v223 = 0;
          __p = 0uLL;
          v225 = v50 + 24;
          sub_20BDF34C0(v27 + 8, &v224);
          v52 = v27[9];
          sub_20BDF3648((uint64_t)&v224);
          v53 = SHIBYTE(v223);
          v27[9] = v52;
          if (v53 < 0)
            operator delete((void *)__p);
        }
        else
        {
          v44 = __p;
          *(_QWORD *)(v43 + 16) = v223;
          *(_OWORD *)v43 = v44;
          v27[9] = v43 + 24;
        }
        if (SHIBYTE(v220) < 0)
          operator delete((void *)v219);
      }
      if (*((char *)v27 + 55) < 0)
      {
        sub_20BDDBFAC(__dst, (void *)v27[4], v27[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v27 + 2);
        v215 = v27[6];
      }
      v54 = v11[9];
      v55 = v11[10];
      if (v54 >= v55)
      {
        v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - *v15) >> 3);
        v59 = v58 + 1;
        if (v58 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *v15) >> 3);
        if (2 * v60 > v59)
          v59 = 2 * v60;
        if (v60 >= 0x555555555555555)
          v61 = 0xAAAAAAAAAAAAAAALL;
        else
          v61 = v59;
        v227 = v11 + 10;
        if (v61)
          v62 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v61);
        else
          v62 = 0;
        v63 = &v62[24 * v58];
        *(_QWORD *)&v224 = v62;
        *((_QWORD *)&v224 + 1) = v63;
        v226 = &v62[24 * v61];
        v64 = *(_OWORD *)__dst;
        *((_QWORD *)v63 + 2) = v215;
        *(_OWORD *)v63 = v64;
        __dst[1] = 0;
        v215 = 0;
        __dst[0] = 0;
        v225 = v63 + 24;
        sub_20BDF34C0(v11 + 8, &v224);
        v57 = v11[9];
        sub_20BDF3648((uint64_t)&v224);
      }
      else
      {
        v56 = *(_OWORD *)__dst;
        *(_QWORD *)(v54 + 16) = v215;
        *(_OWORD *)v54 = v56;
        __dst[1] = 0;
        v215 = 0;
        __dst[0] = 0;
        v57 = v54 + 24;
        v11[9] = v54 + 24;
      }
      v11[9] = v57;
      sub_20C165FC0(a1, (uint64_t)&v219);
      v66 = v11[9];
      v65 = v11[10];
      if (v66 >= v65)
      {
        v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *v15) >> 3);
        v69 = v68 + 1;
        if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *v15) >> 3);
        if (2 * v70 > v69)
          v69 = 2 * v70;
        if (v70 >= 0x555555555555555)
          v71 = 0xAAAAAAAAAAAAAAALL;
        else
          v71 = v69;
        v227 = v11 + 10;
        if (v71)
          v72 = (char *)sub_20BDE4FF4((uint64_t)(v11 + 10), v71);
        else
          v72 = 0;
        v73 = &v72[24 * v68];
        *(_QWORD *)&v224 = v72;
        *((_QWORD *)&v224 + 1) = v73;
        v226 = &v72[24 * v71];
        v74 = v219;
        *((_QWORD *)v73 + 2) = v220;
        *(_OWORD *)v73 = v74;
        v220 = 0;
        v219 = 0uLL;
        v225 = v73 + 24;
        sub_20BDF34C0(v11 + 8, &v224);
        v75 = v11[9];
        sub_20BDF3648((uint64_t)&v224);
        v76 = SHIBYTE(v220);
        v11[9] = v75;
        if (v76 < 0)
          operator delete((void *)v219);
      }
      else
      {
        v67 = v219;
        *(_QWORD *)(v66 + 16) = v220;
        *(_OWORD *)v66 = v67;
        v11[9] = v66 + 24;
      }
      if (SHIBYTE(v215) < 0)
        operator delete(__dst[0]);
      if (SHIBYTE(v217) < 0)
        operator delete(v216[0]);
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_20BDDBFAC(v212, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)v212 = *((_OWORD *)v11 + 2);
      v213 = v11[6];
    }
    v77 = v6 + 8;
    v78 = v6[10];
    v79 = v6[9];
    if (v79 >= v78)
    {
      v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *v77) >> 3);
      v83 = v82 + 1;
      if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - *v77) >> 3);
      if (2 * v84 > v83)
        v83 = 2 * v84;
      if (v84 >= 0x555555555555555)
        v85 = 0xAAAAAAAAAAAAAAALL;
      else
        v85 = v83;
      v227 = v6 + 10;
      if (v85)
        v86 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v85);
      else
        v86 = 0;
      v87 = &v86[24 * v82];
      *(_QWORD *)&v224 = v86;
      *((_QWORD *)&v224 + 1) = v87;
      v226 = &v86[24 * v85];
      v88 = *(_OWORD *)v212;
      *((_QWORD *)v87 + 2) = v213;
      *(_OWORD *)v87 = v88;
      v212[1] = 0;
      v213 = 0;
      v212[0] = 0;
      v225 = v87 + 24;
      sub_20BDF34C0(v6 + 8, &v224);
      v81 = v6[9];
      sub_20BDF3648((uint64_t)&v224);
    }
    else
    {
      v80 = *(_OWORD *)v212;
      *(_QWORD *)(v79 + 16) = v213;
      *(_OWORD *)v79 = v80;
      v212[1] = 0;
      v213 = 0;
      v212[0] = 0;
      v81 = v79 + 24;
      v6[9] = v79 + 24;
    }
    v6[9] = v81;
    v89 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14OrKWENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v89)
    {
      sub_20BDDC0E4(&__p, v89);
      free(v89);
    }
    else
    {
      sub_20BDDC0E4(&__p, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14OrKWENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v219) = 2;
    v224 = __p;
    v225 = v223;
    __p = 0uLL;
    v223 = 0;
    LOBYTE(v226) = 2;
    v228 = 0;
    v229 = 0;
    v227 = 0;
    v220 = 0;
    v221 = 0;
    *((_QWORD *)&v219 + 1) = 0;
    v90 = sub_20C165DCC(a1, (const void **)&v224, &v224);
    v92 = v91;
    v216[0] = &v227;
    sub_20BDE5038((void ***)v216);
    if (SHIBYTE(v225) < 0)
      operator delete((void *)v224);
    v216[0] = (char *)&v219 + 8;
    sub_20BDE5038((void ***)v216);
    if (SHIBYTE(v223) < 0)
      operator delete((void *)__p);
    if (v92)
    {
      sub_20C165FC0(a1, (uint64_t)v216);
      v93 = v90[10];
      v94 = v90[9];
      v209 = v90 + 8;
      if (v94 >= v93)
      {
        v97 = v90[8];
        v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - v97) >> 3);
        v99 = v98 + 1;
        if (v98 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - v97) >> 3);
        if (2 * v100 > v99)
          v99 = 2 * v100;
        if (v100 >= 0x555555555555555)
          v101 = 0xAAAAAAAAAAAAAAALL;
        else
          v101 = v99;
        v227 = v90 + 10;
        if (v101)
          v102 = (char *)sub_20BDE4FF4((uint64_t)(v90 + 10), v101);
        else
          v102 = 0;
        v103 = &v102[24 * v98];
        *(_QWORD *)&v224 = v102;
        *((_QWORD *)&v224 + 1) = v103;
        v226 = &v102[24 * v101];
        v104 = *(_OWORD *)v216;
        *((_QWORD *)v103 + 2) = v217;
        *(_OWORD *)v103 = v104;
        v216[1] = 0;
        v217 = 0;
        v216[0] = 0;
        v225 = v103 + 24;
        sub_20BDF34C0(v209, &v224);
        v96 = v90[9];
        sub_20BDF3648((uint64_t)&v224);
      }
      else
      {
        v95 = *(_OWORD *)v216;
        *(_QWORD *)(v94 + 16) = v217;
        *(_OWORD *)v94 = v95;
        v216[1] = 0;
        v217 = 0;
        v216[0] = 0;
        v96 = v94 + 24;
        v90[9] = v94 + 24;
      }
      v90[9] = v96;
      v105 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14OrKWE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v105)
      {
        sub_20BDDC0E4(&__p, v105);
        free(v105);
      }
      else
      {
        sub_20BDDC0E4(&__p, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14OrKWE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      v106 = a2;
      LOBYTE(v219) = 2;
      v224 = __p;
      v225 = v223;
      __p = 0uLL;
      v223 = 0;
      LOBYTE(v226) = 2;
      v228 = 0;
      v229 = 0;
      v227 = 0;
      v220 = 0;
      v221 = 0;
      *((_QWORD *)&v219 + 1) = 0;
      v107 = sub_20C165DCC(a1, (const void **)&v224, &v224);
      v109 = v108;
      v218 = (void **)&v227;
      sub_20BDE5038(&v218);
      if (SHIBYTE(v225) < 0)
        operator delete((void *)v224);
      v218 = (void **)&v219 + 1;
      sub_20BDE5038(&v218);
      if (SHIBYTE(v223) < 0)
        operator delete((void *)__p);
      if (v109)
      {
        sub_20C17F5D8(a1, (uint64_t)&v219);
        v110 = v107 + 8;
        v111 = v107[10];
        v112 = v107[9];
        if (v112 >= v111)
        {
          v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - *v110) >> 3);
          v116 = v115 + 1;
          if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - *v110) >> 3);
          if (2 * v117 > v116)
            v116 = 2 * v117;
          if (v117 >= 0x555555555555555)
            v118 = 0xAAAAAAAAAAAAAAALL;
          else
            v118 = v116;
          v227 = v107 + 10;
          if (v118)
            v119 = (char *)sub_20BDE4FF4((uint64_t)(v107 + 10), v118);
          else
            v119 = 0;
          v120 = &v119[24 * v115];
          *(_QWORD *)&v224 = v119;
          *((_QWORD *)&v224 + 1) = v120;
          v226 = &v119[24 * v118];
          v121 = v219;
          *((_QWORD *)v120 + 2) = v220;
          *(_OWORD *)v120 = v121;
          v220 = 0;
          v219 = 0uLL;
          v225 = v120 + 24;
          sub_20BDF34C0(v107 + 8, &v224);
          v114 = v107[9];
          sub_20BDF3648((uint64_t)&v224);
        }
        else
        {
          v113 = v219;
          *(_QWORD *)(v112 + 16) = v220;
          *(_OWORD *)v112 = v113;
          v220 = 0;
          v219 = 0uLL;
          v114 = v112 + 24;
          v107[9] = v112 + 24;
        }
        v107[9] = v114;
        sub_20C166A8C(a1, (uint64_t)&__p);
        v123 = v107[9];
        v122 = v107[10];
        if (v123 >= v122)
        {
          v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - *v110) >> 3);
          v126 = v125 + 1;
          if (v125 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - *v110) >> 3);
          if (2 * v127 > v126)
            v126 = 2 * v127;
          if (v127 >= 0x555555555555555)
            v128 = 0xAAAAAAAAAAAAAAALL;
          else
            v128 = v126;
          v227 = v107 + 10;
          if (v128)
            v129 = (char *)sub_20BDE4FF4((uint64_t)(v107 + 10), v128);
          else
            v129 = 0;
          v130 = &v129[24 * v125];
          *(_QWORD *)&v224 = v129;
          *((_QWORD *)&v224 + 1) = v130;
          v226 = &v129[24 * v128];
          v131 = __p;
          *((_QWORD *)v130 + 2) = v223;
          *(_OWORD *)v130 = v131;
          v223 = 0;
          __p = 0uLL;
          v225 = v130 + 24;
          sub_20BDF34C0(v107 + 8, &v224);
          v132 = v107[9];
          sub_20BDF3648((uint64_t)&v224);
          v133 = SHIBYTE(v223);
          v107[9] = v132;
          a2 = v106;
          if (v133 < 0)
            operator delete((void *)__p);
        }
        else
        {
          v124 = __p;
          *(_QWORD *)(v123 + 16) = v223;
          *(_OWORD *)v123 = v124;
          v107[9] = v123 + 24;
          a2 = v106;
        }
        if (SHIBYTE(v220) < 0)
          operator delete((void *)v219);
      }
      if (*((char *)v107 + 55) < 0)
      {
        sub_20BDDBFAC(__dst, (void *)v107[4], v107[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v107 + 2);
        v215 = v107[6];
      }
      v134 = v90[9];
      v135 = v90[10];
      if (v134 >= v135)
      {
        v77 = v6 + 8;
        v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - *v209) >> 3);
        v139 = v138 + 1;
        if (v138 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v140 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v209) >> 3);
        if (2 * v140 > v139)
          v139 = 2 * v140;
        if (v140 >= 0x555555555555555)
          v141 = 0xAAAAAAAAAAAAAAALL;
        else
          v141 = v139;
        v227 = v90 + 10;
        if (v141)
          v142 = (char *)sub_20BDE4FF4((uint64_t)(v90 + 10), v141);
        else
          v142 = 0;
        v143 = &v142[24 * v138];
        *(_QWORD *)&v224 = v142;
        *((_QWORD *)&v224 + 1) = v143;
        v226 = &v142[24 * v141];
        v144 = *(_OWORD *)__dst;
        *((_QWORD *)v143 + 2) = v215;
        *(_OWORD *)v143 = v144;
        __dst[1] = 0;
        v215 = 0;
        __dst[0] = 0;
        v225 = v143 + 24;
        sub_20BDF34C0(v209, &v224);
        v137 = v90[9];
        sub_20BDF3648((uint64_t)&v224);
      }
      else
      {
        v136 = *(_OWORD *)__dst;
        *(_QWORD *)(v134 + 16) = v215;
        *(_OWORD *)v134 = v136;
        __dst[1] = 0;
        v215 = 0;
        __dst[0] = 0;
        v137 = v134 + 24;
        v90[9] = v134 + 24;
        v77 = v6 + 8;
      }
      v90[9] = v137;
      sub_20C165FC0(a1, (uint64_t)&v219);
      v146 = v90[9];
      v145 = v90[10];
      if (v146 >= v145)
      {
        v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v209) >> 3);
        v149 = v148 + 1;
        if (v148 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - *v209) >> 3);
        if (2 * v150 > v149)
          v149 = 2 * v150;
        if (v150 >= 0x555555555555555)
          v151 = 0xAAAAAAAAAAAAAAALL;
        else
          v151 = v149;
        v227 = v90 + 10;
        if (v151)
          v152 = (char *)sub_20BDE4FF4((uint64_t)(v90 + 10), v151);
        else
          v152 = 0;
        v153 = &v152[24 * v148];
        *(_QWORD *)&v224 = v152;
        *((_QWORD *)&v224 + 1) = v153;
        v226 = &v152[24 * v151];
        v154 = v219;
        *((_QWORD *)v153 + 2) = v220;
        *(_OWORD *)v153 = v154;
        v220 = 0;
        v219 = 0uLL;
        v225 = v153 + 24;
        sub_20BDF34C0(v209, &v224);
        v155 = v90[9];
        sub_20BDF3648((uint64_t)&v224);
        v156 = SHIBYTE(v220);
        v90[9] = v155;
        if (v156 < 0)
          operator delete((void *)v219);
      }
      else
      {
        v147 = v219;
        *(_QWORD *)(v146 + 16) = v220;
        *(_OWORD *)v146 = v147;
        v90[9] = v146 + 24;
      }
      if (SHIBYTE(v215) < 0)
        operator delete(__dst[0]);
      if (SHIBYTE(v217) < 0)
        operator delete(v216[0]);
    }
    if (*((char *)v90 + 55) < 0)
    {
      sub_20BDDBFAC(v210, (void *)v90[4], v90[5]);
    }
    else
    {
      *(_OWORD *)v210 = *((_OWORD *)v90 + 2);
      v211 = v90[6];
    }
    v157 = v6[9];
    v158 = v6[10];
    if (v157 >= v158)
    {
      v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157 - *v77) >> 3);
      v162 = v161 + 1;
      if (v161 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158 - *v77) >> 3);
      if (2 * v163 > v162)
        v162 = 2 * v163;
      if (v163 >= 0x555555555555555)
        v164 = 0xAAAAAAAAAAAAAAALL;
      else
        v164 = v162;
      v227 = v6 + 10;
      if (v164)
        v165 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v164);
      else
        v165 = 0;
      v166 = &v165[24 * v161];
      *(_QWORD *)&v224 = v165;
      *((_QWORD *)&v224 + 1) = v166;
      v226 = &v165[24 * v164];
      v167 = *(_OWORD *)v210;
      *((_QWORD *)v166 + 2) = v211;
      *(_OWORD *)v166 = v167;
      v210[1] = 0;
      v211 = 0;
      v210[0] = 0;
      v225 = v166 + 24;
      sub_20BDF34C0(v77, &v224);
      v160 = v6[9];
      sub_20BDF3648((uint64_t)&v224);
    }
    else
    {
      v159 = *(_OWORD *)v210;
      *(_QWORD *)(v157 + 16) = v211;
      *(_OWORD *)v157 = v159;
      v210[1] = 0;
      v211 = 0;
      v210[0] = 0;
      v160 = v157 + 24;
      v6[9] = v157 + 24;
    }
    v6[9] = v160;
    v168 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110ImpliedAndE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v168)
    {
      sub_20BDDC0E4(&__p, v168);
      free(v168);
    }
    else
    {
      sub_20BDDC0E4(&__p, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110ImpliedAndE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v219) = 2;
    v224 = __p;
    v225 = v223;
    __p = 0uLL;
    v223 = 0;
    LOBYTE(v226) = 2;
    v228 = 0;
    v229 = 0;
    v227 = 0;
    v220 = 0;
    v221 = 0;
    *((_QWORD *)&v219 + 1) = 0;
    v169 = sub_20C165DCC(a1, (const void **)&v224, &v224);
    v171 = v170;
    __dst[0] = &v227;
    sub_20BDE5038((void ***)__dst);
    if (SHIBYTE(v225) < 0)
      operator delete((void *)v224);
    __dst[0] = (char *)&v219 + 8;
    sub_20BDE5038((void ***)__dst);
    if (SHIBYTE(v223) < 0)
      operator delete((void *)__p);
    if (v171)
    {
      sub_20C1663BC(a1, (uint64_t)&v219);
      v172 = v169 + 8;
      v173 = v169[10];
      v174 = v169[9];
      if (v174 >= v173)
      {
        v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - *v172) >> 3);
        v178 = v177 + 1;
        if (v177 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v173 - *v172) >> 3);
        if (2 * v179 > v178)
          v178 = 2 * v179;
        if (v179 >= 0x555555555555555)
          v180 = 0xAAAAAAAAAAAAAAALL;
        else
          v180 = v178;
        v227 = v169 + 10;
        if (v180)
          v181 = (char *)sub_20BDE4FF4((uint64_t)(v169 + 10), v180);
        else
          v181 = 0;
        v182 = &v181[24 * v177];
        *(_QWORD *)&v224 = v181;
        *((_QWORD *)&v224 + 1) = v182;
        v226 = &v181[24 * v180];
        v183 = v219;
        *((_QWORD *)v182 + 2) = v220;
        *(_OWORD *)v182 = v183;
        v220 = 0;
        v219 = 0uLL;
        v225 = v182 + 24;
        sub_20BDF34C0(v169 + 8, &v224);
        v176 = v169[9];
        sub_20BDF3648((uint64_t)&v224);
      }
      else
      {
        v175 = v219;
        *(_QWORD *)(v174 + 16) = v220;
        *(_OWORD *)v174 = v175;
        v220 = 0;
        v219 = 0uLL;
        v176 = v174 + 24;
        v169[9] = v174 + 24;
      }
      v169[9] = v176;
      sub_20C167D4C(a1, (uint64_t)&__p);
      v185 = v169[9];
      v184 = v169[10];
      if (v185 >= v184)
      {
        v187 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v185 - *v172) >> 3);
        v188 = v187 + 1;
        if (v187 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v184 - *v172) >> 3);
        if (2 * v189 > v188)
          v188 = 2 * v189;
        if (v189 >= 0x555555555555555)
          v190 = 0xAAAAAAAAAAAAAAALL;
        else
          v190 = v188;
        v227 = v169 + 10;
        if (v190)
          v191 = (char *)sub_20BDE4FF4((uint64_t)(v169 + 10), v190);
        else
          v191 = 0;
        v192 = &v191[24 * v187];
        *(_QWORD *)&v224 = v191;
        *((_QWORD *)&v224 + 1) = v192;
        v226 = &v191[24 * v190];
        v193 = __p;
        *((_QWORD *)v192 + 2) = v223;
        *(_OWORD *)v192 = v193;
        v223 = 0;
        __p = 0uLL;
        v225 = v192 + 24;
        sub_20BDF34C0(v169 + 8, &v224);
        v194 = v169[9];
        sub_20BDF3648((uint64_t)&v224);
        v195 = SHIBYTE(v223);
        v169[9] = v194;
        if (v195 < 0)
          operator delete((void *)__p);
      }
      else
      {
        v186 = __p;
        *(_QWORD *)(v185 + 16) = v223;
        *(_OWORD *)v185 = v186;
        v169[9] = v185 + 24;
      }
      if (SHIBYTE(v220) < 0)
        operator delete((void *)v219);
    }
    if (*((char *)v169 + 55) < 0)
    {
      sub_20BDDBFAC(v216, (void *)v169[4], v169[5]);
    }
    else
    {
      *(_OWORD *)v216 = *((_OWORD *)v169 + 2);
      v217 = v169[6];
    }
    v197 = v6[9];
    v196 = v6[10];
    if (v197 >= v196)
    {
      v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v197 - *v77) >> 3);
      v200 = v199 + 1;
      if (v199 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - *v77) >> 3);
      if (2 * v201 > v200)
        v200 = 2 * v201;
      if (v201 >= 0x555555555555555)
        v202 = 0xAAAAAAAAAAAAAAALL;
      else
        v202 = v200;
      v227 = v6 + 10;
      if (v202)
        v203 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 10), v202);
      else
        v203 = 0;
      v204 = &v203[24 * v199];
      *(_QWORD *)&v224 = v203;
      *((_QWORD *)&v224 + 1) = v204;
      v226 = &v203[24 * v202];
      v205 = *(_OWORD *)v216;
      *((_QWORD *)v204 + 2) = v217;
      *(_OWORD *)v204 = v205;
      v216[1] = 0;
      v217 = 0;
      v216[0] = 0;
      v225 = v204 + 24;
      sub_20BDF34C0(v77, &v224);
      v206 = v6[9];
      sub_20BDF3648((uint64_t)&v224);
      v207 = SHIBYTE(v217);
      v6[9] = v206;
      if (v207 < 0)
        operator delete(v216[0]);
    }
    else
    {
      v198 = *(_OWORD *)v216;
      *(_QWORD *)(v197 + 16) = v217;
      *(_OWORD *)v197 = v198;
      v6[9] = v197 + 24;
    }
    if (SHIBYTE(v211) < 0)
      operator delete(v210[0]);
    if (SHIBYTE(v213) < 0)
      operator delete(v212[0]);
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    v208 = *((_OWORD *)v6 + 2);
    *(_QWORD *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v208;
  }
}

void sub_20C17F050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  sub_20BDF3648(v52 - 160);
  if (a52 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a37 < 0)
    operator delete(a32);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C17F3F4@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C17F448(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C17F448(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C17F548(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C17F518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C17F548(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABBD95 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABBD95 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C17F5C4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C17F5D8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  result = sub_20C17F62C(a1, 0);
  if (*((char *)result + 55) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)result[4], result[5]);
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = result[6];
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C17F62C(uint64_t **a1, char a2)
{
  uint64_t *v4;
  void *v6[3];
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  void **v13;

  sub_20C17F72C(v7);
  *(_OWORD *)__p = *(_OWORD *)v7;
  v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C165DCC(a1, (const void **)__p, (__int128 *)__p);
  v13 = (void **)v12;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v13 = v6;
  sub_20BDE5038(&v13);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  return v4;
}

void sub_20C17F6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_20C165D84((uint64_t)&a20);
  *(_QWORD *)(v21 - 40) = v20;
  sub_20BDE5038((void ***)(v21 - 40));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C17F72C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABBE7FLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABBE7FLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C17F7A8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C17F7BC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C17F7BC(a1, *a2);
    sub_20C17F7BC(a1, a2[1]);
    sub_20C165F7C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

BOOL sub_20C17F804(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  const void **v10;
  const void **v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  const void **v21;
  const void **v22;
  const void **v23;
  const void **v24;
  const void **v25;
  const void **v26;
  char v27;
  std::logic_error *exception;
  std::locale v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;

  v6 = (uint64_t **)(a1 + 56);
  v7 = sub_20BDEEBA4(a1 + 56, (const void **)(*a2 + 32));
  if (a1 + 64 != v7)
    return *(_BYTE *)(v7 + 56) != 0;
  v30.__locale_ = (std::locale::__imp *)sub_20BE74FC0((uint64_t **)(a1 + 32), (const void **)(*a2 + 32), *a2 + 32);
  v31 = v8;
  v32 = a1 + 32;
  if (v8)
  {
    v9 = *a2;
    switch(*(_BYTE *)(*a2 + 56))
    {
      case 0:
        v10 = *(const void ***)(v9 + 64);
        v11 = *(const void ***)(v9 + 72);
        if (v10 != v11)
        {
          v12 = 0;
          do
          {
            if ((v12 & 1) != 0)
            {
              v12 = 1;
            }
            else
            {
              v33 = (__int128 *)sub_20BDEEBA4(a1 + 8, v10);
              v12 = sub_20C17F804(a1, &v33, a3);
            }
            v10 += 3;
          }
          while (v10 != v11);
          v9 = *a2;
        }
        v33 = (__int128 *)(v9 + 32);
        v13 = sub_20BEB938C(v6, (const void **)(v9 + 32), (uint64_t)&unk_20CAC184C, &v33);
        v14 = 1;
        goto LABEL_48;
      case 1:
        v25 = *(const void ***)(v9 + 64);
        v26 = *(const void ***)(v9 + 72);
        if (v25 != v26)
        {
          v27 = 0;
          do
          {
            if ((v27 & 1) != 0)
            {
              v27 = 1;
            }
            else
            {
              v33 = (__int128 *)sub_20BDEEBA4(a1 + 8, v25);
              v27 = sub_20C17F804(a1, &v33, a3);
            }
            v25 += 3;
          }
          while (v25 != v26);
          v9 = *a2;
        }
        v33 = (__int128 *)(v9 + 32);
        v14 = 0;
        *((_BYTE *)sub_20BEB938C(v6, (const void **)(v9 + 32), (uint64_t)&unk_20CAC184C, &v33) + 56) = 0;
        goto LABEL_49;
      case 2:
        v21 = *(const void ***)(v9 + 64);
        v22 = *(const void ***)(v9 + 72);
        if (v21 == v22)
        {
          v14 = 0;
        }
        else
        {
          LOBYTE(v14) = 0;
          do
          {
            if ((v14 & 1) != 0)
            {
              v14 = 1;
            }
            else
            {
              v33 = (__int128 *)sub_20BDEEBA4(a1 + 8, v21);
              v14 = sub_20C17F804(a1, &v33, a3);
            }
            v21 += 3;
          }
          while (v21 != v22);
          v9 = *a2;
        }
        goto LABEL_47;
      case 3:
        v23 = *(const void ***)(v9 + 64);
        v24 = *(const void ***)(v9 + 72);
        if (v23 == v24)
        {
          v14 = 1;
        }
        else
        {
          LOBYTE(v14) = 1;
          do
          {
            if ((v14 & 1) != 0)
            {
              v33 = (__int128 *)sub_20BDEEBA4(a1 + 8, v23);
              v14 = sub_20C17F804(a1, &v33, a3);
            }
            else
            {
              v14 = 0;
            }
            v23 += 3;
          }
          while (v23 != v24);
          v9 = *a2;
        }
LABEL_47:
        v33 = (__int128 *)(v9 + 32);
        v13 = sub_20BEB938C(v6, (const void **)(v9 + 32), (uint64_t)&unk_20CAC184C, &v33);
LABEL_48:
        *((_BYTE *)v13 + 56) = v14;
LABEL_49:
        sub_20C17FC44((uint64_t)&v30);
        a3 = v14;
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "code should be unreachable: invalid rule_type value");
        __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
    }
  }
  else
  {
    sub_20C17FC44((uint64_t)&v30);
    if ((a3 & 1) == 0)
    {
      ++*(_DWORD *)(a1 + 4);
      if (*(_BYTE *)a1)
      {
        v15 = sub_20BDDC1C8(MEMORY[0x24BEDB318], (uint64_t)"problem: cycle without progress detected at rule class ", 55);
        v16 = *(char *)(*a2 + 55);
        if (v16 >= 0)
          v17 = *a2 + 32;
        else
          v17 = *(_QWORD *)(*a2 + 32);
        if (v16 >= 0)
          v18 = *(unsigned __int8 *)(*a2 + 55);
        else
          v18 = *(_QWORD *)(*a2 + 40);
        v19 = sub_20BDDC1C8(v15, v17, v18);
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
        v20 = std::locale::use_facet(&v30, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
      }
    }
    v30.__locale_ = (std::locale::__imp *)(*a2 + 32);
    *((_BYTE *)sub_20BEB938C(v6, (const void **)v30.__locale_, (uint64_t)&unk_20CAC184C, (__int128 **)&v30) + 56) = a3;
  }
  return a3;
}

void sub_20C17FBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  sub_20C17FC44((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C17FC44(uint64_t a1)
{
  uint64_t **v2;

  v2 = *(uint64_t ***)(a1 + 16);
  if (v2 && *(_BYTE *)(a1 + 8))
    sub_20BE10B40(v2, *(_QWORD *)a1);
  return a1;
}

uint64_t sub_20C17FC80(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  __int128 *v5;
  int v6;
  char v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  sub_20C17FFBC(a1, (uint64_t)a2);
  if ((sub_20C180244(a1, a2) & 1) == 0 && (sub_20C180388(a1, a2) & 1) == 0 && (sub_20C1805D8(a1, (uint64_t)a2) & 1) == 0)
  {
    v18 = *(_OWORD *)(a1 + 32);
    if ((_QWORD)v18 == *(_QWORD *)(a1 + 64) || *(_BYTE *)v18 != 40)
      return 0;
    v4 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v18 + 1;
    *(_QWORD *)(a1 + 40) = v4;
    ++*(_QWORD *)(a1 + 56);
    sub_20C15E6F0((uint64_t *)a2);
    if ((sub_20C182A00((_QWORD *)a1, (uint64_t)a2) & 1) == 0)
      sub_20C182A50(a1);
    if ((sub_20C182B8C(a1, (uint64_t)a2) & 1) == 0)
      sub_20C182D4C(a1);
  }
  v5 = (__int128 *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 48);
  v19 = v12;
  v22 = v13;
  if (sub_20C14D398(a1))
  {
    while (1)
    {
      v6 = sub_20C182E88((_QWORD *)a1, (uint64_t)a2);
      *v5 = v19;
      *(_OWORD *)(a1 + 48) = v22;
      if (!v6)
        break;
      v14 = *v5;
      v16 = *(_OWORD *)(a1 + 48);
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
        ;
      if (sub_20C14D484((_QWORD *)a1)
        && (v20 = *v5,
            v23 = *(_OWORD *)(a1 + 48),
            v7 = sub_20C01D710((_QWORD *)a1),
            *v5 = v20,
            *(_OWORD *)(a1 + 48) = v23,
            (v7 & 1) == 0))
      {
        sub_20C180124((char **)(a2->__r_.__value_.__l.__size_ - 48), 3);
        while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
          ;
      }
      else
      {
        *v5 = v14;
        *(_OWORD *)(a1 + 48) = v16;
        v15 = *v5;
        v17 = *(_OWORD *)(a1 + 48);
        while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
          ;
        if (sub_20C14D4E8((_QWORD *)a1)
          && (v21 = *v5,
              v24 = *(_OWORD *)(a1 + 48),
              v8 = sub_20C01D710((_QWORD *)a1),
              *v5 = v21,
              *(_OWORD *)(a1 + 48) = v24,
              (v8 & 1) == 0))
        {
          sub_20C180124((char **)(a2->__r_.__value_.__l.__size_ - 48), 4);
          while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
            ;
        }
        else
        {
          *v5 = v15;
          *(_OWORD *)(a1 + 48) = v17;
          v19 = *v5;
          v22 = *(_OWORD *)(a1 + 48);
          if (!sub_20C01AA0C((_QWORD *)a1))
            goto LABEL_34;
          while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
            ;
          sub_20C180124((char **)(a2->__r_.__value_.__l.__size_ - 48), 2);
        }
      }
      sub_20C17FFBC(a1, (uint64_t)a2);
      if ((sub_20C180244(a1, a2) & 1) == 0
        && (sub_20C180388(a1, a2) & 1) == 0
        && (sub_20C1805D8(a1, (uint64_t)a2) & 1) == 0)
      {
        v9 = *(_BYTE **)(a1 + 32);
        if (v9 == *(_BYTE **)(a1 + 64) || *v9 != 40)
          break;
        v10 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v9 + 1;
        *(_QWORD *)(a1 + 40) = v10;
        ++*(_QWORD *)(a1 + 56);
        sub_20C15E6F0((uint64_t *)a2);
        if ((sub_20C182A00((_QWORD *)a1, (uint64_t)a2) & 1) == 0)
          sub_20C182A50(a1);
        if ((sub_20C182B8C(a1, (uint64_t)a2) & 1) == 0)
          sub_20C182D4C(a1);
      }
      v12 = *v5;
      v13 = *(_OWORD *)(a1 + 48);
      v19 = *v5;
      v22 = v13;
      if ((sub_20C14D398(a1) & 1) == 0)
        goto LABEL_34;
    }
  }
  else
  {
LABEL_34:
    *v5 = v19;
    *(_OWORD *)(a1 + 48) = v22;
  }
  *v5 = v12;
  *(_OWORD *)(a1 + 48) = v13;
  return 1;
}

void sub_20C17FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18)
{
  _OWORD *v18;

  *v18 = a17;
  v18[1] = a18;
  _Unwind_Resume(a1);
}

__n128 sub_20C17FFBC(uint64_t a1, uint64_t a2)
{
  __n128 *v4;
  __n128 result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  v4 = (__n128 *)(a1 + 32);
  v6 = *(__n128 *)(a1 + 32);
  v7 = *(__n128 *)(a1 + 48);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  if (sub_20C180090(a1, a2))
  {
    v8 = *v4;
    v9 = v4[1];
    if (sub_20C01AA0C((_QWORD *)a1))
    {
      do
      {
        while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
          ;
        if ((sub_20C180090(a1, a2) & 1) == 0)
          break;
        v8 = *v4;
        v9 = v4[1];
      }
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0);
    }
    *v4 = v8;
    v4[1] = v9;
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
  }
  else
  {
    result = v6;
    *v4 = v6;
    v4[1] = v7;
  }
  return result;
}

void sub_20C180078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C180090(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  char v5;
  uint64_t v6;
  char **v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = (__int128 *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  if (sub_20C14B368((_QWORD *)a1)
    && (v11 = *v4, v12 = v4[1], v5 = sub_20C01D710((_QWORD *)a1), *v4 = v11, v4[1] = v12, (v5 & 1) == 0))
  {
    v7 = (char **)(*(_QWORD *)(a2 + 8) - 48);
    v6 = 1;
    sub_20C180124(v7, 1);
  }
  else
  {
    v6 = 0;
    *v4 = v9;
    v4[1] = v10;
  }
  return v6;
}

void sub_20C180118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C180124(char **a1, int a2)
{
  char *v4;
  char *v5;
  int v6;
  BOOL v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v4 = *a1;
  v5 = a1[1];
  if (v4 == v5)
  {
    v8 = v4;
  }
  else
  {
    do
    {
      v6 = *((_DWORD *)v5 - 1);
      if (v6 >= a2)
      {
        v7 = v6 != 1 && v6 == a2;
        v8 = v5;
        if (!v7)
          break;
      }
      sub_20C15EBB0(a1);
      v4 = *a1;
      v5 = a1[1];
      v8 = *a1;
    }
    while (*a1 != v5);
  }
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v8 >= v9)
  {
    v11 = (v8 - v4) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      sub_20BDDF694();
    v13 = v9 - (_QWORD)v4;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)sub_20BDE1330((uint64_t)(a1 + 2), v14);
      v4 = *a1;
      v8 = a1[1];
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = a2;
    v10 = v16 + 4;
    while (v8 != v4)
    {
      v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_DWORD *)v8 = a2;
    v10 = v8 + 4;
  }
  a1[1] = v10;
}

uint64_t sub_20C180244(uint64_t a1, std::string *a2)
{
  __int128 *v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = (__int128 *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 48);
  if (sub_20C180644(a1, a2) && (v5 = *(_BYTE **)(a1 + 32), v5 != *(_BYTE **)(a1 + 64)) && *v5 == 58)
  {
    v6 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v5 + 1;
    *(_QWORD *)(a1 + 40) = v6;
    ++*(_QWORD *)(a1 + 56);
    if (!sub_20C1809BC(a1, (uint64_t)a2))
      sub_20C18215C(a1);
    v13 = *v4;
    v14 = v4[1];
    v7 = *(_BYTE **)(a1 + 32);
    if (v7 != *(_BYTE **)(a1 + 64))
    {
      do
      {
        if (*v7 != 44)
          break;
        v8 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v7 + 1;
        *(_QWORD *)(a1 + 40) = v8;
        ++*(_QWORD *)(a1 + 56);
        if ((sub_20C1820CC(a1, (uint64_t)a2) & 1) == 0)
          break;
        v13 = *v4;
        v14 = v4[1];
        v7 = *(_BYTE **)(a1 + 32);
      }
      while (v7 != *(_BYTE **)(a1 + 64));
      *v4 = v13;
      v4[1] = v14;
    }
    v9 = 1;
    sub_20C182298((uint64_t)a2, 1);
  }
  else
  {
    v9 = 0;
    *v4 = v11;
    v4[1] = v12;
  }
  return v9;
}

void sub_20C180370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  _OWORD *v12;

  *v12 = a11;
  v12[1] = a12;
  *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C180388(uint64_t a1, std::string *a2)
{
  __int128 *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t result;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = (__int128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 48);
  if (!sub_20C180644(a1, a2))
    goto LABEL_14;
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v5 = *(_BYTE **)(a1 + 32);
  if (v5 == *(_BYTE **)(a1 + 64) || *v5 != 40)
  {
LABEL_14:
    result = 0;
    *v4 = v10;
    v4[1] = v11;
    return result;
  }
  v6 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v5 + 1;
  *(_QWORD *)(a1 + 40) = v6;
  ++*(_QWORD *)(a1 + 56);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v12 = *v4;
  v13 = v4[1];
  if (sub_20C182474(a1, (uint64_t)a2))
  {
    v14 = *v4;
    v16 = v4[1];
    if (sub_20C14CD4C((_QWORD *)a1))
    {
      do
      {
        if ((sub_20C182474(a1, (uint64_t)a2) & 1) == 0)
          break;
        v14 = *v4;
        v16 = v4[1];
      }
      while ((sub_20C14CD4C((_QWORD *)a1) & 1) != 0);
    }
    *v4 = v14;
    v4[1] = v16;
    v15 = *v4;
    v17 = v4[1];
    if (sub_20C14CD4C((_QWORD *)a1) && sub_20C182684(a1, a2))
      goto LABEL_13;
LABEL_16:
    *v4 = v15;
    v4[1] = v17;
    goto LABEL_17;
  }
  *v4 = v12;
  v4[1] = v13;
  v15 = *v4;
  v17 = v4[1];
  if (!sub_20C182684(a1, a2))
    goto LABEL_16;
LABEL_13:
  sub_20C182898(a1, a2);
LABEL_17:
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v8 = *(_BYTE **)(a1 + 32);
  if (v8 == *(_BYTE **)(a1 + 64) || *v8 != 41)
    sub_20C182914(a1);
  v9 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v8 + 1;
  *(_QWORD *)(a1 + 40) = v9;
  ++*(_QWORD *)(a1 + 56);
  sub_20C182298((uint64_t)a2, 2);
  return 1;
}

void sub_20C180550()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C180584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14)
{
  _OWORD *v14;

  *v14 = a13;
  v14[1] = a14;
  *v14 = a9;
  v14[1] = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1805D8(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;

  v3 = (_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v4 = sub_20C180724(a1);
  if ((_DWORD)v4)
  {
    sub_20C182298(a2, 0);
  }
  else
  {
    *v3 = v6;
    v3[1] = v7;
  }
  return v4;
}

void sub_20C180638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C180644(uint64_t a1, std::string *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  std::string __str;

  v4 = *(char **)(a1 + 32);
  v5 = a1 + 40;
  v8 = *(_OWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56);
  v6 = sub_20C180724(a1);
  if ((_DWORD)v6)
  {
    sub_20BE93368(&__str, v4, *(char **)(a1 + 32), *(_QWORD *)(a1 + 32) - (_QWORD)v4);
    std::string::operator=(a2 + 1, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v4;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(v5 + 16) = v9;
  }
  return v6;
}

void sub_20C1806EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a16 < 0)
    operator delete(__p);
  *(_QWORD *)(v16 + 32) = v17;
  *(_OWORD *)v18 = a9;
  *(_QWORD *)(v18 + 16) = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C180724(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;
  __int128 __p;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 40;
  v13 = *(_OWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  if (!sub_20C01DDD0((_QWORD *)a1))
    goto LABEL_8;
  while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
    ;
  v4 = *(_QWORD *)(a1 + 32);
  v8 = v2;
  *(_QWORD *)v9 = v2;
  *(_OWORD *)&v9[8] = v13;
  *(_QWORD *)&v9[24] = v14;
  v10 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 88);
  }
  v15 = *(_OWORD *)v9;
  v16 = *(_OWORD *)&v9[16];
  v5 = sub_20C18083C((uint64_t)&v8);
  v6 = v5;
  *(_OWORD *)v9 = v15;
  *(_OWORD *)&v9[16] = v16;
  if (SHIBYTE(v12) < 0)
  {
    operator delete((void *)__p);
    if (v6)
      goto LABEL_8;
  }
  else if (v5)
  {
LABEL_8:
    result = 0;
    *(_QWORD *)(a1 + 32) = v2;
    *(_OWORD *)v3 = v13;
    *(_QWORD *)(v3 + 16) = v14;
    return result;
  }
  return 1;
}

void sub_20C180824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v20 + 32) = v22;
  *(_OWORD *)v21 = a19;
  *(_QWORD *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

uint64_t sub_20C18083C(uint64_t a1)
{
  __int128 *v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t result;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v2 = (__int128 *)(a1 + 8);
  v10 = *(_OWORD *)(a1 + 8);
  v15 = *(_OWORD *)(a1 + 24);
  if (sub_20C14BA7C((_QWORD *)a1))
  {
    v20 = *v2;
    v26 = v2[1];
    v3 = sub_20C08DDF4((_QWORD *)a1);
    *v2 = v20;
    v2[1] = v26;
    if ((v3 & 1) == 0)
      return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 40);
  }
  *v2 = v10;
  v2[1] = v15;
  v11 = *v2;
  v16 = v2[1];
  if (sub_20C14BAE0((_QWORD *)a1))
  {
    v21 = *v2;
    v27 = v2[1];
    v4 = sub_20C08DDF4((_QWORD *)a1);
    *v2 = v21;
    v2[1] = v27;
    if ((v4 & 1) == 0)
      return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 40);
  }
  *v2 = v11;
  v2[1] = v16;
  v12 = *v2;
  v17 = v2[1];
  if (sub_20C14BB44((_QWORD *)a1))
  {
    v22 = *v2;
    v28 = v2[1];
    v5 = sub_20C08DDF4((_QWORD *)a1);
    *v2 = v22;
    v2[1] = v28;
    if ((v5 & 1) == 0)
      return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 40);
  }
  *v2 = v12;
  v2[1] = v17;
  v13 = *v2;
  v18 = v2[1];
  if (sub_20C14BB9C((_QWORD *)a1))
  {
    v23 = *v2;
    v29 = v2[1];
    v6 = sub_20C08DDF4((_QWORD *)a1);
    *v2 = v23;
    v2[1] = v29;
    if ((v6 & 1) == 0)
      return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 40);
  }
  *v2 = v13;
  v2[1] = v18;
  v14 = *v2;
  v19 = v2[1];
  if (sub_20C09C118((_QWORD *)a1))
  {
    v24 = *v2;
    v30 = v2[1];
    v7 = sub_20C08DDF4((_QWORD *)a1);
    *v2 = v24;
    v2[1] = v30;
    if ((v7 & 1) == 0)
      return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 40);
  }
  *v2 = v14;
  v2[1] = v19;
  result = sub_20C09C49C((_QWORD *)a1);
  if (!(_DWORD)result)
    return result;
  v25 = *v2;
  v31 = v2[1];
  v9 = sub_20C08DDF4((_QWORD *)a1);
  *v2 = v25;
  v2[1] = v31;
  return (v9 & 1) == 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 40);
}

uint64_t sub_20C1809BC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  if ((sub_20C180A4C(a1, a2) & 1) == 0 && (sub_20C180D58(a1, a2) & 1) == 0 && (sub_20C180EDC(a1, a2) & 1) == 0)
  {
    v4 = *(_OWORD *)(a1 + 48);
    v6[0] = *(_OWORD *)(a1 + 32);
    v6[1] = v4;
    v7 = a1 + 32;
    sub_20C1815E4(a1);
    sub_20C181A10((char **)v6, a1, a2);
  }
  return 1;
}

void sub_20C180A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C180A4C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t result;
  __int128 v17;
  const char *v18;
  void **v19;
  unint64_t v20;
  double v22;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 32;
  v4 = *(char **)(a1 + 32);
  v24 = *(_OWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 56);
  if (v4 != *(char **)(a1 + 64) && *v4 == 45)
  {
    v6 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v4 + 1;
    *(_QWORD *)(a1 + 40) = v6;
    ++*(_QWORD *)(a1 + 56);
  }
  v7 = (_OWORD *)(a1 + 40);
  v8 = *(_OWORD *)(a1 + 48);
  v28 = *(_OWORD *)v5;
  v29 = v8;
  if (!sub_20C14BEF8((_QWORD *)a1)
    || (v9 = *(_OWORD *)(v5 + 16),
        *(_OWORD *)__p = *(_OWORD *)v5,
        v27 = v9,
        v10 = sub_20C01D710((_QWORD *)a1),
        v11 = v27,
        *(_OWORD *)v5 = *(_OWORD *)__p,
        *(_OWORD *)(v5 + 16) = v11,
        (v10 & 1) != 0))
  {
    v12 = v29;
    *(_OWORD *)v5 = v28;
    *(_OWORD *)(v5 + 16) = v12;
    if (sub_20C14BF5C((_QWORD *)a1))
    {
      v13 = *(_BYTE **)(a1 + 32);
      if (v13 != *(_BYTE **)(a1 + 64) && *v13 == 46)
      {
        v14 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 32) = v13 + 1;
        *(_QWORD *)(a1 + 40) = v14;
        ++*(_QWORD *)(a1 + 56);
        if (sub_20C14BF5C((_QWORD *)a1))
        {
          v15 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)__p = *(_OWORD *)v5;
          v27 = v15;
          if (sub_20C14C120((_QWORD *)a1))
          {
            sub_20C14C1B8((_QWORD *)a1);
            if ((sub_20C14BF5C((_QWORD *)a1) & 1) == 0)
              sub_20C181088(a1);
          }
          else
          {
            v17 = v27;
            *(_OWORD *)v5 = *(_OWORD *)__p;
            *(_OWORD *)(v5 + 16) = v17;
          }
          goto LABEL_18;
        }
LABEL_15:
        sub_20C181088(a1);
      }
      if (sub_20C14C120((_QWORD *)a1))
      {
        sub_20C14C1B8((_QWORD *)a1);
        if ((sub_20C14BF5C((_QWORD *)a1) & 1) != 0)
          goto LABEL_18;
        goto LABEL_15;
      }
    }
    result = 0;
    *(_QWORD *)v5 = v4;
    *v7 = v24;
    *(_QWORD *)(v5 + 24) = v25;
    return result;
  }
LABEL_18:
  sub_20BE93368(__p, v4, *(char **)v5, *(_QWORD *)v5 - (_QWORD)v4);
  if (SBYTE7(v27) < 0)
  {
    if (__p[1] != (void *)3)
    {
      if (__p[1] != (void *)4)
        goto LABEL_31;
      v19 = (void **)__p[0];
      goto LABEL_25;
    }
    if (*(_WORD *)__p[0] != 28265 || *((_BYTE *)__p[0] + 2) != 102)
      goto LABEL_31;
LABEL_37:
    v20 = 0x7FF0000000000000;
    goto LABEL_38;
  }
  if (BYTE7(v27) == 3)
  {
    if (LOWORD(__p[0]) != 28265 || BYTE2(__p[0]) != 102)
      goto LABEL_31;
    goto LABEL_37;
  }
  if (BYTE7(v27) != 4)
    goto LABEL_31;
  v19 = __p;
LABEL_25:
  if (*(_DWORD *)v19 == 1718511917)
  {
    v20 = 0xFFF0000000000000;
LABEL_38:
    v22 = *(double *)&v20;
    goto LABEL_39;
  }
LABEL_31:
  v22 = pxrInternal__aapl__pxrReserved__::TfStringToDouble((char *)__p, v18);
LABEL_39:
  *((_QWORD *)&v28 + 1) = &unk_24C52064B;
  *(double *)&v28 = v22;
  sub_20C181174(a2, &v28);
  sub_20BF4C2D8((uint64_t)&v28);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_20C180D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, __int128 __p, __int128 a13, char a14)
{
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;

  *v15 = __p;
  v15[1] = a13;
  *(_QWORD *)v15 = v14;
  *(_OWORD *)v16 = a9;
  *(_QWORD *)(v16 + 16) = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C180D58(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  _OWORD *v6;
  BOOL *v7;
  void *v8;
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  char v12;
  void *__p[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(char **)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 56);
  if (v4 != *(char **)(a1 + 64) && *v4 == 45)
  {
    v5 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v4 + 1;
    *(_QWORD *)(a1 + 40) = v5;
    ++*(_QWORD *)(a1 + 56);
  }
  v6 = (_OWORD *)(a1 + 40);
  if (!sub_20C14BF5C((_QWORD *)a1))
    goto LABEL_8;
  v12 = 0;
  sub_20BE93368(__p, v4, *(char **)(a1 + 32), *(_QWORD *)(a1 + 32) - (_QWORD)v4);
  v8 = (void *)pxrInternal__aapl__pxrReserved__::TfStringToInt64((char *)__p, &v12, v7);
  if (v14 < 0)
    operator delete(__p[0]);
  if (!v12)
  {
    __p[0] = v8;
    __p[1] = &unk_24C52036B;
    sub_20C181174(a2, __p);
    sub_20BF4C2D8((uint64_t)__p);
    return 1;
  }
  else
  {
LABEL_8:
    result = 0;
    *(_QWORD *)(a1 + 32) = v4;
    *v6 = v10;
    *(_QWORD *)(a1 + 56) = v11;
  }
  return result;
}

void sub_20C180E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_20BF4C2D8((uint64_t)&__p);
  *(_QWORD *)(v17 + 32) = v18;
  *(_OWORD *)v19 = a9;
  *(_QWORD *)(v19 + 16) = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C180EDC(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  uint64_t result;
  void **v16;
  BOOL v17;
  __int128 v18;
  uint64_t v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 32;
  v4 = *(char **)(a1 + 32);
  v6 = a1 + 40;
  v18 = *(_OWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v7 = *(_OWORD *)(a1 + 48);
  v22 = *(_OWORD *)(a1 + 32);
  v23 = v7;
  if (sub_20C14C250((_QWORD *)a1))
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)__p = *(_OWORD *)v5;
    v21 = v8;
    v9 = sub_20C01D710((_QWORD *)a1);
    v10 = v21;
    *(_OWORD *)v5 = *(_OWORD *)__p;
    *(_OWORD *)(v5 + 16) = v10;
    if ((v9 & 1) == 0)
      goto LABEL_6;
  }
  v11 = v23;
  *(_OWORD *)v5 = v22;
  *(_OWORD *)(v5 + 16) = v11;
  if (!sub_20C14C2B0((_QWORD *)a1))
    goto LABEL_5;
  v12 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v21 = v12;
  v13 = sub_20C01D710((_QWORD *)a1);
  v14 = v21;
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *(_OWORD *)(v5 + 16) = v14;
  if ((v13 & 1) == 0)
  {
LABEL_6:
    sub_20BE93368(__p, v4, *(char **)v5, *(_QWORD *)v5 - (_QWORD)v4);
    if ((SBYTE7(v21) & 0x80u) == 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    v17 = *(_BYTE *)v16 == 116;
    *((_QWORD *)&v22 + 1) = &unk_24C51FCF3;
    LOBYTE(v22) = v17;
    sub_20C181174(a2, &v22);
    sub_20BF4C2D8((uint64_t)&v22);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    return 1;
  }
  else
  {
LABEL_5:
    result = 0;
    *(_QWORD *)v5 = v4;
    *(_OWORD *)v6 = v18;
    *(_QWORD *)(v6 + 16) = v19;
  }
  return result;
}

void sub_20C181048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  sub_20BF4C2D8((uint64_t)&a19);
  if (a17 < 0)
    operator delete(__p);
  *v21 = v19;
  *(_OWORD *)v20 = a9;
  *(_QWORD *)(v20 + 16) = a10;
  _Unwind_Resume(a1);
}

void sub_20C181088(uint64_t a1)
{
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  __int128 v6;
  std::string::size_type v7;

  exception = __cxa_allocate_exception(0x28uLL);
  sub_20C16F554(&v5);
  v3 = std::string::insert(&v5, 0, "parse error matching ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7 = v3->__r_.__value_.__r.__words[2];
  v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C181114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C181174(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BF4C6D0(v8, a2);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >= *(_QWORD *)(a1 + 88))
  {
    v5 = sub_20C1812A0((uint64_t *)(a1 + 72), (__int128 *)__p);
  }
  else
  {
    v4 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 16) = v7;
    *(_OWORD *)v3 = v4;
    __p[1] = 0;
    v7 = 0;
    __p[0] = 0;
    sub_20BF4C200((_QWORD *)(v3 + 24), v8);
    v5 = v3 + 40;
  }
  *(_QWORD *)(a1 + 80) = v5;
  sub_20BF4C2D8((uint64_t)v8);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (*(char *)(a1 + 71) < 0)
  {
    **(_BYTE **)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 71) = 0;
  }
}

void sub_20C181274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_20BF4AAE4((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1812A0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BED4724(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[40 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  sub_20BF4C200((_QWORD *)v11 + 3, (_QWORD *)a2 + 3);
  v15[2] = v11 + 40;
  sub_20C1813B8(a1, v15);
  v13 = a1[1];
  sub_20C181570(v15);
  return v13;
}

void sub_20C1813A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C181570((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1813B8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C18142C((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C18142C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 2;
    do
    {
      v10 = v9 - 3;
      v11 = *(_OWORD *)(v9 - 3);
      *(_QWORD *)(v7 - 24) = *(v9 - 1);
      *(_OWORD *)(v7 - 40) = v11;
      *(v9 - 2) = 0;
      *(v9 - 1) = 0;
      *(v9 - 3) = 0;
      sub_20BF4C200((_QWORD *)(v7 - 16), v9);
      v7 = *((_QWORD *)&v17 + 1) - 40;
      *((_QWORD *)&v17 + 1) -= 40;
      v9 -= 5;
    }
    while (v10 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C1814EC((uint64_t)v14);
  return v12;
}

uint64_t sub_20C1814EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C181520((uint64_t *)a1);
  return a1;
}

void sub_20C181520(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C00BFA8(v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void **sub_20C181570(void **a1)
{
  sub_20C1815A0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C1815A0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 40;
    sub_20C00BFA8(v4, i - 40);
  }
}

void sub_20C1815E4(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned __int8 **v19;
  uint64_t v20;
  __int128 *v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 __p;
  uint64_t v34;
  __int128 v35;
  unsigned __int8 *v36;

  v3 = (unsigned __int8 **)(a1 + 32);
  v2 = *(unsigned __int8 **)(a1 + 32);
  v4 = *(unsigned __int8 **)(a1 + 64);
  if (v2 == v4)
    goto LABEL_29;
  v5 = *v2;
  if (v5 == 39)
  {
    v6 = v2 + 1;
    v7 = (_QWORD *)(a1 + 40);
    v20 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v20;
    v9 = (_QWORD *)(a1 + 56);
    v21 = (__int128 *)(a1 + 72);
    ++*(_QWORD *)(a1 + 56);
    while (1)
    {
      if (v6 != v4)
      {
        v22 = *v6;
        if (v22 == 92)
        {
          *v3 = v6 + 1;
          v25 = (*v7)++;
          v26 = (*v9)++;
          if (v6 + 1 == v4 || v6[1] != 39)
          {
            if ((sub_20C14CA8C((_QWORD *)a1) & 1) == 0)
              sub_20C181E54(a1);
          }
          else
          {
            *v3 = v6 + 2;
            *v7 = v25 + 2;
            *v9 = v26 + 2;
          }
          goto LABEL_56;
        }
        if (v22 == 39)
        {
LABEL_57:
          *v3 = v6 + 1;
          ++*v7;
          ++*v9;
          return;
        }
      }
      v35 = *(_OWORD *)v7;
      v36 = *(unsigned __int8 **)(a1 + 56);
      if (!sub_20C14CB30((_QWORD *)a1))
      {
        *v3 = v6;
        *(_OWORD *)v7 = v35;
        *(_QWORD *)(a1 + 56) = v36;
LABEL_61:
        sub_20C181F90(a1);
      }
      v23 = *(unsigned __int8 **)(a1 + 32);
      v32 = v23;
      if (*(char *)(a1 + 95) < 0)
      {
        sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
        v24 = v6;
        v23 = v32;
      }
      else
      {
        __p = *v21;
        v34 = *(_QWORD *)(a1 + 88);
        v24 = v6;
      }
      if (v24 != v23 && (v28 = *v24, v27 = v24 + 1, v28 == 39) && v27 == v23)
      {
        v29 = 0;
        v30 = v3;
      }
      else
      {
        v30 = 0;
        v29 = 1;
      }
      if (SHIBYTE(v34) < 0)
      {
        operator delete((void *)__p);
        if (v30)
        {
LABEL_50:
          *v30 = v6;
          *(_OWORD *)(v30 + 1) = v35;
          v30[3] = v36;
          if ((v29 & 1) == 0)
            goto LABEL_61;
          goto LABEL_56;
        }
      }
      else if (v30)
      {
        goto LABEL_50;
      }
      if (!v29)
        goto LABEL_61;
LABEL_56:
      v6 = *(unsigned __int8 **)(a1 + 32);
      v4 = *(unsigned __int8 **)(a1 + 64);
    }
  }
  if (v5 == 34)
  {
    v6 = v2 + 1;
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v8;
    v9 = (_QWORD *)(a1 + 56);
    v10 = (__int128 *)(a1 + 72);
    ++*(_QWORD *)(a1 + 56);
    while (1)
    {
      if (v6 != v4)
      {
        v11 = *v6;
        if (v11 == 92)
        {
          *v3 = v6 + 1;
          v14 = (*v7)++;
          v15 = (*v9)++;
          if (v6 + 1 == v4 || v6[1] != 34)
          {
            if ((sub_20C14CA8C((_QWORD *)a1) & 1) == 0)
              sub_20C181BDC(a1);
          }
          else
          {
            *v3 = v6 + 2;
            *v7 = v14 + 2;
            *v9 = v15 + 2;
          }
          goto LABEL_28;
        }
        if (v11 == 34)
          goto LABEL_57;
      }
      v35 = *(_OWORD *)v7;
      v36 = *(unsigned __int8 **)(a1 + 56);
      if (!sub_20C14CB30((_QWORD *)a1))
      {
        *v3 = v6;
        *(_OWORD *)v7 = v35;
        *(_QWORD *)(a1 + 56) = v36;
LABEL_59:
        sub_20C181D18(a1);
      }
      v12 = *(unsigned __int8 **)(a1 + 32);
      v31 = v12;
      if (*(char *)(a1 + 95) < 0)
      {
        sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
        v13 = v6;
        v12 = v31;
      }
      else
      {
        __p = *v10;
        v34 = *(_QWORD *)(a1 + 88);
        v13 = v6;
      }
      if (v13 != v12 && (v17 = *v13, v16 = v13 + 1, v17 == 34) && v16 == v12)
      {
        v18 = 0;
        v19 = v3;
      }
      else
      {
        v19 = 0;
        v18 = 1;
      }
      if (SHIBYTE(v34) < 0)
      {
        operator delete((void *)__p);
        if (v19)
        {
LABEL_22:
          *v19 = v6;
          *(_OWORD *)(v19 + 1) = v35;
          v19[3] = v36;
          if ((v18 & 1) == 0)
            goto LABEL_59;
          goto LABEL_28;
        }
      }
      else if (v19)
      {
        goto LABEL_22;
      }
      if (!v18)
        goto LABEL_59;
LABEL_28:
      v6 = *(unsigned __int8 **)(a1 + 32);
      v4 = *(unsigned __int8 **)(a1 + 64);
    }
  }
  do
  {
LABEL_29:
    while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
      ;
  }
  while ((sub_20C14CB94((_QWORD *)a1) & 1) != 0);
}

void sub_20C1819F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  *v20 = v22;
  *(_OWORD *)v21 = a19;
  *(_QWORD *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

void sub_20C181A10(char **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  void *__p[2];
  char v10;
  void *v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned int *v14[3];

  v14[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  sub_20BE93368(&v11, *a1, *(char **)(a2 + 32), *(_QWORD *)(a2 + 32) - (_QWORD)*a1);
  if (((char)v13 & 0x80000000) == 0)
  {
    if (v13 >= 2u)
    {
      if (v11 == 34)
      {
        if (*((_BYTE *)&v11 + v13 - 1) == 34)
          goto LABEL_15;
      }
      else if (v11 == 39)
      {
        v4 = (char *)&v11;
        v5 = v13;
        goto LABEL_11;
      }
    }
    v7 = 0;
    goto LABEL_19;
  }
  v5 = v12;
  if (v12 <= 1)
  {
LABEL_10:
    v7 = 0;
LABEL_17:
    v8 = (pxrInternal__aapl__pxrReserved__ *)v11;
    goto LABEL_20;
  }
  v4 = (char *)v11;
  v6 = *(unsigned __int8 *)v11;
  if (v6 != 39)
  {
    if (v6 == 34 && *((char *)v11 + v12 - 1) == 34)
      goto LABEL_15;
    goto LABEL_10;
  }
LABEL_11:
  if (v4[v5 - 1] != 39)
  {
    v7 = 0;
    if ((v13 & 0x80) != 0)
      goto LABEL_16;
    goto LABEL_19;
  }
LABEL_15:
  v7 = 1;
  if ((v13 & 0x80) != 0)
  {
LABEL_16:
    v5 = v12;
    goto LABEL_17;
  }
LABEL_19:
  v8 = (pxrInternal__aapl__pxrReserved__ *)&v11;
  v5 = v13;
LABEL_20:
  pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString(v8, (const char *)v5, v7, 0, (unsigned __int8 *)__p);
  v14[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v14, (uint64_t)__p);
  sub_20C181174(a3, v14);
  sub_20BF4C2D8((uint64_t)v14);
  if (v10 < 0)
    operator delete(__p[0]);
  if ((char)v13 < 0)
    operator delete(v11);
}

void sub_20C181B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_20BF4C2D8(v21 - 40);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20C181BDC(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C181CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C181D18(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C181DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C181E54(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C181F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C181F90(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C18205C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C1820CC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  if ((sub_20C180A4C(a1, a2) & 1) == 0 && (sub_20C180D58(a1, a2) & 1) == 0 && (sub_20C180EDC(a1, a2) & 1) == 0)
  {
    v4 = *(_OWORD *)(a1 + 48);
    v6[0] = *(_OWORD *)(a1 + 32);
    v6[1] = v4;
    v7 = a1 + 32;
    sub_20C1815E4(a1);
    sub_20C181A10((char **)v6, a1, a2);
  }
  return 1;
}

void sub_20C182150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C18215C(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonArgsE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonArgsE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C182228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C182298(uint64_t a1, int a2)
{
  uint64_t i;
  uint64_t v4;

  sub_20C18231C((uint64_t *)(*(_QWORD *)(a1 + 8) - 48), a2, a1 + 24, (__int128 *)(a1 + 72));
  if (*(char *)(a1 + 47) < 0)
  {
    **(_BYTE **)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 47) = 0;
  }
  v4 = *(_QWORD *)(a1 + 72);
  for (i = *(_QWORD *)(a1 + 80); i != v4; sub_20C00BFA8(a1 + 88, i))
    i -= 40;
  *(_QWORD *)(a1 + 80) = v4;
}

void sub_20C18231C(uint64_t *a1, int a2, uint64_t a3, __int128 *a4)
{
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  void *v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  void **v20;

  v9 = a2;
  *(_OWORD *)v10 = *(_OWORD *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v12 = *a4;
  v13 = *((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeCall((uint64_t)&v9, (char **)v14);
  v5 = a1[4];
  if (v5 >= a1[5])
  {
    v7 = sub_20C14F04C(a1 + 3, (uint64_t)v14);
    v8 = SHIBYTE(v19);
    a1[4] = v7;
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_OWORD *)v5 = *(_OWORD *)v14;
    *(_QWORD *)(v5 + 16) = v15;
    v14[0] = 0;
    v14[1] = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_OWORD *)(v5 + 24) = v16;
    *(_QWORD *)(v5 + 40) = v17;
    v15 = 0;
    v16 = 0uLL;
    v17 = 0;
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 64) = v19;
    *(_OWORD *)(v5 + 48) = v6;
    __p[1] = 0;
    v19 = 0;
    __p[0] = 0;
    a1[4] = v5 + 72;
  }
  v20 = (void **)&v16;
  sub_20C00BE5C(&v20);
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  v20 = (void **)&v12;
  sub_20C00BF24(&v20);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
}

void sub_20C182450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20C14652C((uint64_t)va1);
  sub_20C15EED0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C182474(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  char v5;
  __int128 v7;
  __int128 v8;

  v4 = (_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  v5 = sub_20C1824EC((_QWORD *)a1);
  *v4 = v7;
  v4[1] = v8;
  if ((v5 & 1) != 0)
    return 0;
  else
    return sub_20C1820CC(a1, a2);
}

void sub_20C1824E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C1824EC(_QWORD *a1)
{
  uint64_t result;
  _BYTE *v3;
  uint64_t v4;

  result = sub_20C18256C((uint64_t)a1);
  if ((_DWORD)result)
  {
    while ((sub_20C01AA0C(a1) & 1) != 0)
      ;
    v3 = (_BYTE *)a1[4];
    if (v3 == (_BYTE *)a1[8] || *v3 != 61)
    {
      return 0;
    }
    else
    {
      v4 = a1[5] + 1;
      a1[4] = v3 + 1;
      a1[5] = v4;
      ++a1[7];
      while ((sub_20C01AA0C(a1) & 1) != 0)
        ;
      return 1;
    }
  }
  return result;
}

uint64_t sub_20C18256C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;
  __int128 __p;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 40;
  v13 = *(_OWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  if (!sub_20C01DDD0((_QWORD *)a1))
    goto LABEL_8;
  while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
    ;
  v4 = *(_QWORD *)(a1 + 32);
  v8 = v2;
  *(_QWORD *)v9 = v2;
  *(_OWORD *)&v9[8] = v13;
  *(_QWORD *)&v9[24] = v14;
  v10 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 88);
  }
  v15 = *(_OWORD *)v9;
  v16 = *(_OWORD *)&v9[16];
  v5 = sub_20C18083C((uint64_t)&v8);
  v6 = v5;
  *(_OWORD *)v9 = v15;
  *(_OWORD *)&v9[16] = v16;
  if (SHIBYTE(v12) < 0)
  {
    operator delete((void *)__p);
    if (v6)
      goto LABEL_8;
  }
  else if (v5)
  {
LABEL_8:
    result = 0;
    *(_QWORD *)(a1 + 32) = v2;
    *(_OWORD *)v3 = v13;
    *(_QWORD *)(v3 + 16) = v14;
    return result;
  }
  return 1;
}

void sub_20C18266C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v20 + 32) = v22;
  *(_OWORD *)v21 = a19;
  *(_QWORD *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

uint64_t sub_20C182684(uint64_t a1, std::string *a2)
{
  char *v4;
  std::string *v5;
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  void *exception;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string __str;

  v4 = *(char **)(a1 + 32);
  v5 = (std::string *)(a1 + 40);
  v12 = *(std::string *)(a1 + 40);
  result = sub_20C180724(a1);
  if ((_DWORD)result)
  {
    sub_20BE93368(&__str, v4, *(char **)(a1 + 32), *(_QWORD *)(a1 + 32) - (_QWORD)v4);
    std::string::operator=(a2 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
      ;
    v7 = *(_BYTE **)(a1 + 32);
    if (v7 == *(_BYTE **)(a1 + 64) || *v7 != 61)
    {
      return 0;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v7 + 1;
      *(_QWORD *)(a1 + 40) = v8;
      ++*(_QWORD *)(a1 + 56);
      while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
        ;
      if ((sub_20C1809BC(a1, (uint64_t)a2) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x28uLL);
        sub_20C16E92C(&v12);
        v10 = std::string::insert(&v12, 0, "parse error matching ");
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        sub_20C01ADA0((uint64_t)exception, (uint64_t)&__str, a1);
        __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
      }
      return 1;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v4;
    *v5 = v12;
  }
  return result;
}

void sub_20C182804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a13 < 0)
  {
    operator delete((void *)a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

__n128 sub_20C182898(uint64_t a1, std::string *a2)
{
  __n128 *v4;
  __n128 result;
  __n128 v6;
  __n128 v7;

  v4 = (__n128 *)(a1 + 32);
  v6 = *(__n128 *)(a1 + 32);
  v7 = *(__n128 *)(a1 + 48);
  if (sub_20C14CD4C((_QWORD *)a1))
  {
    do
    {
      if ((sub_20C182684(a1, a2) & 1) == 0)
        break;
      v6 = *v4;
      v7 = v4[1];
    }
    while ((sub_20C14CD4C((_QWORD *)a1) & 1) != 0);
  }
  result = v6;
  *v4 = v6;
  v4[1] = v7;
  return result;
}

void sub_20C182908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C182914(uint64_t a1)
{
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  __int128 v6;
  std::string::size_type v7;

  exception = __cxa_allocate_exception(0x28uLL);
  sub_20C0A4E60(&v5);
  v3 = std::string::insert(&v5, 0, "parse error matching ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7 = v3->__r_.__value_.__r.__words[2];
  v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C1829A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C182A00(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  while ((sub_20C01AA0C(a1) & 1) != 0)
    ;
  v4 = sub_20C17FC80(a1, a2);
  if ((_DWORD)v4)
  {
    while ((sub_20C01AA0C(a1) & 1) != 0)
      ;
  }
  return v4;
}

void sub_20C182A50(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C182B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C182B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 32);
  if ((_QWORD)v4 == *(_QWORD *)(a1 + 64) || *(_BYTE *)v4 != 41)
    return 0;
  v2 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = v2;
  ++*(_QWORD *)(a1 + 56);
  sub_20C182C10(a2);
  return 1;
}

void sub_20C182C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C182C10(uint64_t a1)
{
  uint64_t v2;
  void *v3[3];
  uint64_t v4;
  void *__p;
  char v6;
  void **v7;

  sub_20C15EAF8((uint64_t *)(*(_QWORD *)(a1 + 8) - 48), (uint64_t)v3);
  v2 = *(_QWORD *)(a1 + 8);
  sub_20C15E9BC(a1 + 16, v2 - 48);
  *(_QWORD *)(a1 + 8) = v2 - 48;
  sub_20C182CB8((uint64_t *)(v2 - 96), (uint64_t)v3);
  if (v6 < 0)
    operator delete(__p);
  v7 = (void **)&v4;
  sub_20C00BE5C(&v7);
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_20C182CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C14652C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C182CB8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  uint64_t result;

  v3 = a1[4];
  if (v3 >= a1[5])
  {
    result = sub_20C14F04C(a1 + 3, a2);
  }
  else
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_OWORD *)v3 = *(_OWORD *)a2;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(v3 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 48) = v4;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    result = v3 + 72;
  }
  a1[4] = result;
  return result;
}

void sub_20C182D4C(uint64_t a1)
{
  void *exception;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  exception = __cxa_allocate_exception(0x28uLL);
  v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_20BDDC0E4(&v6, v3);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  v4 = std::string::insert(&v6, 0, "parse error matching ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C182E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20C182E88(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;

  sub_20C14B278((uint64_t)a1);
  if ((sub_20C182F70((uint64_t)a1) & 1) != 0
    || (sub_20C183058((uint64_t)a1) & 1) != 0
    || (sub_20C183294((uint64_t)a1) & 1) != 0)
  {
    return 1;
  }
  v4 = (_BYTE *)a1[4];
  if (v4 != (_BYTE *)a1[8] && *v4 == 40)
  {
    v5 = a1[5] + 1;
    a1[4] = v4 + 1;
    a1[5] = v5;
    ++a1[7];
    if ((sub_20C183A84((uint64_t)a1, a2) & 1) == 0)
      sub_20C182A50((uint64_t)a1);
    v6 = (_BYTE *)a1[4];
    if (v6 == (_BYTE *)a1[8] || *v6 != 41)
      sub_20C182D4C((uint64_t)a1);
    v7 = a1[5] + 1;
    a1[4] = v6 + 1;
    a1[5] = v7;
    ++a1[7];
    return 1;
  }
  return 0;
}

uint64_t sub_20C182F70(uint64_t a1)
{
  _OWORD *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;

  v2 = (_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  if (sub_20C18256C(a1) && (v3 = *(_BYTE **)(a1 + 32), v3 != *(_BYTE **)(a1 + 64)) && *v3 == 58)
  {
    do
    {
      v4 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v3 + 1;
      *(_QWORD *)(a1 + 40) = v4;
      ++*(_QWORD *)(a1 + 56);
      sub_20C1833AC((__n128 *)a1);
      v3 = *(_BYTE **)(a1 + 32);
    }
    while (v3 != *(_BYTE **)(a1 + 64) && *v3 == 44);
    return 1;
  }
  else
  {
    result = 0;
    *v2 = v6;
    v2[1] = v7;
  }
  return result;
}

void sub_20C183048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C183058(uint64_t a1)
{
  __int128 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = (__int128 *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  if (!sub_20C18256C(a1))
    goto LABEL_14;
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v3 = *(_BYTE **)(a1 + 32);
  if (v3 == *(_BYTE **)(a1 + 64) || *v3 != 40)
  {
LABEL_14:
    result = 0;
    *v2 = v8;
    v2[1] = v9;
    return result;
  }
  v4 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v3 + 1;
  *(_QWORD *)(a1 + 40) = v4;
  ++*(_QWORD *)(a1 + 56);
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v10 = *v2;
  v11 = v2[1];
  if (sub_20C1839AC(a1))
  {
    v12 = *v2;
    v14 = v2[1];
    if (sub_20C14CD4C((_QWORD *)a1))
    {
      do
      {
        if ((sub_20C1839AC(a1) & 1) == 0)
          break;
        v12 = *v2;
        v14 = v2[1];
      }
      while ((sub_20C14CD4C((_QWORD *)a1) & 1) != 0);
    }
    *v2 = v12;
    v2[1] = v14;
    v13 = *v2;
    v15 = v2[1];
    if (sub_20C14CD4C((_QWORD *)a1) && sub_20C1824EC((_QWORD *)a1))
      goto LABEL_13;
LABEL_16:
    *v2 = v13;
    v2[1] = v15;
    goto LABEL_17;
  }
  *v2 = v10;
  v2[1] = v11;
  v13 = *v2;
  v15 = v2[1];
  if (!sub_20C1824EC((_QWORD *)a1))
    goto LABEL_16;
LABEL_13:
  sub_20C1833AC((__n128 *)a1);
  sub_20C183A10((__n128 *)a1);
LABEL_17:
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  v6 = *(_BYTE **)(a1 + 32);
  if (v6 == *(_BYTE **)(a1 + 64) || *v6 != 41)
    sub_20C182914(a1);
  v7 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v6 + 1;
  *(_QWORD *)(a1 + 40) = v7;
  ++*(_QWORD *)(a1 + 56);
  return 1;
}

void sub_20C18320C()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C183240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14)
{
  _OWORD *v14;

  *v14 = a13;
  v14[1] = a14;
  *v14 = a9;
  v14[1] = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C183294(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;
  __int128 __p;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 40;
  v13 = *(_OWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  if (!sub_20C01DDD0((_QWORD *)a1))
    goto LABEL_8;
  while ((sub_20C01D710((_QWORD *)a1) & 1) != 0)
    ;
  v4 = *(_QWORD *)(a1 + 32);
  v8 = v2;
  *(_QWORD *)v9 = v2;
  *(_OWORD *)&v9[8] = v13;
  *(_QWORD *)&v9[24] = v14;
  v10 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 88);
  }
  v15 = *(_OWORD *)v9;
  v16 = *(_OWORD *)&v9[16];
  v5 = sub_20C18083C((uint64_t)&v8);
  v6 = v5;
  *(_OWORD *)v9 = v15;
  *(_OWORD *)&v9[16] = v16;
  if (SHIBYTE(v12) < 0)
  {
    operator delete((void *)__p);
    if ((v6 & 1) != 0)
      goto LABEL_8;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_8:
    result = 0;
    *(_QWORD *)(a1 + 32) = v2;
    *(_OWORD *)v3 = v13;
    *(_QWORD *)(v3 + 16) = v14;
    return result;
  }
  return 1;
}

void sub_20C183394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v20 + 32) = v22;
  *(_OWORD *)v21 = a19;
  *(_QWORD *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

void sub_20C1833AC(__n128 *a1)
{
  char v2;

  if ((sub_20C18340C((uint64_t)a1) & 1) == 0)
  {
    sub_20C14BDE4(a1);
    if ((v2 & 1) == 0 && (sub_20C14BE58((uint64_t)a1) & 1) == 0 && (sub_20C183590((uint64_t)a1) & 1) == 0)
    {
      do
      {
        while ((sub_20C01D710(a1) & 1) != 0)
          ;
      }
      while ((sub_20C14CB94(a1) & 1) != 0);
    }
  }
}

uint64_t sub_20C18340C(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  char v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = (__int128 *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  if ((_QWORD)v8 != *(_QWORD *)(a1 + 64) && *(_BYTE *)v8 == 45)
  {
    v3 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v8 + 1;
    *(_QWORD *)(a1 + 40) = v3;
    ++*(_QWORD *)(a1 + 56);
  }
  v10 = *v2;
  v11 = *(_OWORD *)(a1 + 48);
  if (sub_20C14BEF8((_QWORD *)a1))
  {
    v12 = *v2;
    v14 = v2[1];
    v4 = sub_20C01D710((_QWORD *)a1);
    *v2 = v12;
    v2[1] = v14;
    if ((v4 & 1) == 0)
      return 1;
  }
  *v2 = v10;
  v2[1] = v11;
  if (!sub_20C14BF5C((_QWORD *)a1))
    goto LABEL_16;
  v5 = *(_BYTE **)(a1 + 32);
  if (v5 != *(_BYTE **)(a1 + 64) && *v5 == 46)
  {
    v6 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v5 + 1;
    *(_QWORD *)(a1 + 40) = v6;
    ++*(_QWORD *)(a1 + 56);
    if (sub_20C14BF5C((_QWORD *)a1))
    {
      v13 = *v2;
      v15 = v2[1];
      if (sub_20C14C120((_QWORD *)a1))
      {
        sub_20C14C1B8((_QWORD *)a1);
        if ((sub_20C14BF5C((_QWORD *)a1) & 1) == 0)
          sub_20C181088(a1);
      }
      else
      {
        *v2 = v13;
        v2[1] = v15;
      }
      return 1;
    }
LABEL_15:
    sub_20C181088(a1);
  }
  if (!sub_20C14C120((_QWORD *)a1))
  {
LABEL_16:
    result = 0;
    *v2 = v8;
    v2[1] = v9;
    return result;
  }
  sub_20C14C1B8((_QWORD *)a1);
  if ((sub_20C14BF5C((_QWORD *)a1) & 1) == 0)
    goto LABEL_15;
  return 1;
}

void sub_20C183578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;

  v12 = *(_OWORD *)(v11 - 32);
  *v10 = *(_OWORD *)(v11 - 48);
  v10[1] = v12;
  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C183590(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  int v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned __int8 **v19;
  uint64_t v21;
  __int128 *v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  __int128 __p;
  uint64_t v35;
  __int128 v36;
  unsigned __int8 *v37;

  v2 = (unsigned __int8 **)(a1 + 32);
  v1 = *(unsigned __int8 **)(a1 + 32);
  v3 = *(unsigned __int8 **)(a1 + 64);
  if (v1 == v3)
    return 0;
  v5 = *v1;
  if (v5 != 39)
  {
    if (v5 == 34)
    {
      v6 = v1 + 1;
      v7 = (_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v8;
      v9 = (_QWORD *)(a1 + 56);
      v10 = (__int128 *)(a1 + 72);
      ++*(_QWORD *)(a1 + 56);
      while (1)
      {
        if (v6 != v3)
        {
          v11 = *v6;
          if (v11 == 92)
          {
            *v2 = v6 + 1;
            v14 = (*v7)++;
            v15 = (*v9)++;
            if (v6 + 1 == v3 || v6[1] != 34)
            {
              if ((sub_20C14CA8C((_QWORD *)a1) & 1) == 0)
                sub_20C181BDC(a1);
            }
            else
            {
              *v2 = v6 + 2;
              *v7 = v14 + 2;
              *v9 = v15 + 2;
            }
            goto LABEL_28;
          }
          if (v11 == 34)
            goto LABEL_55;
        }
        v36 = *(_OWORD *)v7;
        v37 = *(unsigned __int8 **)(a1 + 56);
        if (!sub_20C14CB30((_QWORD *)a1))
        {
          *v2 = v6;
          *(_OWORD *)v7 = v36;
          *(_QWORD *)(a1 + 56) = v37;
LABEL_57:
          sub_20C181D18(a1);
        }
        v12 = *(unsigned __int8 **)(a1 + 32);
        v32 = v12;
        if (*(char *)(a1 + 95) < 0)
        {
          sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
          v13 = v6;
          v12 = v32;
        }
        else
        {
          __p = *v10;
          v35 = *(_QWORD *)(a1 + 88);
          v13 = v6;
        }
        if (v13 != v12 && (v17 = *v13, v16 = v13 + 1, v17 == 34) && v16 == v12)
        {
          v18 = 0;
          v19 = v2;
        }
        else
        {
          v19 = 0;
          v18 = 1;
        }
        if (SHIBYTE(v35) < 0)
        {
          operator delete((void *)__p);
          if (v19)
          {
LABEL_22:
            *v19 = v6;
            *(_OWORD *)(v19 + 1) = v36;
            v19[3] = v37;
            if ((v18 & 1) == 0)
              goto LABEL_57;
            goto LABEL_28;
          }
        }
        else if (v19)
        {
          goto LABEL_22;
        }
        if (!v18)
          goto LABEL_57;
LABEL_28:
        v6 = *(unsigned __int8 **)(a1 + 32);
        v3 = *(unsigned __int8 **)(a1 + 64);
      }
    }
    return 0;
  }
  v6 = v1 + 1;
  v7 = (_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v21;
  v9 = (_QWORD *)(a1 + 56);
  v22 = (__int128 *)(a1 + 72);
  ++*(_QWORD *)(a1 + 56);
  while (1)
  {
    if (v6 != v3)
    {
      v23 = *v6;
      if (v23 == 92)
      {
        *v2 = v6 + 1;
        v26 = (*v7)++;
        v27 = (*v9)++;
        if (v6 + 1 == v3 || v6[1] != 39)
        {
          if ((sub_20C14CA8C((_QWORD *)a1) & 1) == 0)
            sub_20C181E54(a1);
        }
        else
        {
          *v2 = v6 + 2;
          *v7 = v26 + 2;
          *v9 = v27 + 2;
        }
        goto LABEL_54;
      }
      if (v23 == 39)
        break;
    }
    v36 = *(_OWORD *)v7;
    v37 = *(unsigned __int8 **)(a1 + 56);
    if (!sub_20C14CB30((_QWORD *)a1))
    {
      *v2 = v6;
      *(_OWORD *)v7 = v36;
      *(_QWORD *)(a1 + 56) = v37;
LABEL_59:
      sub_20C181F90(a1);
    }
    v24 = *(unsigned __int8 **)(a1 + 32);
    v33 = v24;
    if (*(char *)(a1 + 95) < 0)
    {
      sub_20BDDBFAC(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
      v25 = v6;
      v24 = v33;
    }
    else
    {
      __p = *v22;
      v35 = *(_QWORD *)(a1 + 88);
      v25 = v6;
    }
    if (v25 != v24 && (v29 = *v25, v28 = v25 + 1, v29 == 39) && v28 == v24)
    {
      v30 = 0;
      v31 = v2;
    }
    else
    {
      v31 = 0;
      v30 = 1;
    }
    if (SHIBYTE(v35) < 0)
    {
      operator delete((void *)__p);
      if (v31)
      {
LABEL_48:
        *v31 = v6;
        *(_OWORD *)(v31 + 1) = v36;
        v31[3] = v37;
        if ((v30 & 1) == 0)
          goto LABEL_59;
        goto LABEL_54;
      }
    }
    else if (v31)
    {
      goto LABEL_48;
    }
    if (!v30)
      goto LABEL_59;
LABEL_54:
    v6 = *(unsigned __int8 **)(a1 + 32);
    v3 = *(unsigned __int8 **)(a1 + 64);
  }
LABEL_55:
  *v2 = v6 + 1;
  ++*v7;
  ++*v9;
  return 1;
}

void sub_20C183990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  *v20 = v22;
  *(_OWORD *)v21 = a19;
  *(_QWORD *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

uint64_t sub_20C1839AC(uint64_t a1)
{
  _OWORD *v2;
  int v3;
  __int128 v5;
  __int128 v6;

  v2 = (_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  v3 = sub_20C1824EC((_QWORD *)a1);
  *v2 = v5;
  v2[1] = v6;
  if ((v3 & 1) == 0)
    sub_20C1833AC((__n128 *)a1);
  return v3 ^ 1u;
}

void sub_20C183A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_20C183A10(__n128 *a1)
{
  __n128 *v2;
  __n128 result;
  __n128 v4;
  __n128 v5;

  v2 = a1 + 2;
  v4 = a1[2];
  v5 = a1[3];
  if (sub_20C14CD4C(a1))
  {
    do
    {
      if (!sub_20C1824EC(a1))
        break;
      sub_20C1833AC(a1);
      v4 = *v2;
      v5 = v2[1];
    }
    while ((sub_20C14CD4C(a1) & 1) != 0);
  }
  result = v4;
  *v2 = v4;
  v2[1] = v5;
  return result;
}

void sub_20C183A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C183A84(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __int128 *v8;
  int v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  sub_20C14B278(a1);
  if ((sub_20C182F70(a1) & 1) == 0 && (sub_20C183058(a1) & 1) == 0 && (sub_20C183294(a1) & 1) == 0)
  {
    v4 = *(_BYTE **)(a1 + 32);
    if (v4 == *(_BYTE **)(a1 + 64) || *v4 != 40)
      return 0;
    v5 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v4 + 1;
    *(_QWORD *)(a1 + 40) = v5;
    ++*(_QWORD *)(a1 + 56);
    if ((sub_20C183A84(a1, a2) & 1) == 0)
      sub_20C182A50(a1);
    v6 = *(_BYTE **)(a1 + 32);
    if (v6 == *(_BYTE **)(a1 + 64) || *v6 != 41)
      sub_20C182D4C(a1);
    v7 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v6 + 1;
    *(_QWORD *)(a1 + 40) = v7;
    ++*(_QWORD *)(a1 + 56);
  }
  v8 = (__int128 *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 48);
  v13 = v11;
  v14 = v12;
  if (sub_20C14D398(a1))
  {
    while (1)
    {
      v9 = sub_20C182E88(a1, a2);
      *v8 = v13;
      *(_OWORD *)(a1 + 48) = v14;
      if (!v9 || !sub_20C14D398(a1) || !sub_20C182E88(a1, a2))
        break;
      v11 = *v8;
      v12 = *(_OWORD *)(a1 + 48);
      v13 = *v8;
      v14 = v12;
      if ((sub_20C14D398(a1) & 1) == 0)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    *v8 = v13;
    *(_OWORD *)(a1 + 48) = v14;
  }
  *v8 = v11;
  *(_OWORD *)(a1 + 48) = v12;
  while ((sub_20C01AA0C((_QWORD *)a1) & 1) != 0)
    ;
  return 1;
}

void sub_20C183C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C183C30()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "SdfPredicateFunctionResult::ConstantOverDescendants");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529898, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPredicateFunctionResult::MayVaryOverDescendants");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C529898, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C183CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::_CountDefaults(pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v2)
    return 0;
  result = 0;
  do
  {
    if (*(_QWORD *)(v1 + 32))
      ++result;
    v1 += 40;
  }
  while (v1 != v2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity(pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  unint64_t *Instance;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;
  unint64_t v18;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v3)
  {
    v4 = 0;
    do
    {
      if (*(char *)(v2 + 23) < 0)
      {
        if (!*(_QWORD *)(v2 + 8))
        {
LABEL_7:
          v13 = "sdf/predicateLibrary.cpp";
          v14 = "CheckValidity";
          v15 = 62;
          v16 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity() const";
          v17 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Specified empty predicate expression parameter name");
        }
      }
      else if (!*(_BYTE *)(v2 + 23))
      {
        goto LABEL_7;
      }
      v5 = *(_QWORD *)(v2 + 32);
      if (v4)
      {
        if (!v5)
        {
          v13 = "sdf/predicateLibrary.cpp";
          v14 = "CheckValidity";
          v15 = 70;
          v16 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity() const";
          v17 = 0;
          v6 = (const char *)v2;
          if (*(char *)(v2 + 23) < 0)
            v6 = *(const char **)v2;
          v7 = (const char *)v4;
          if (*(char *)(v4 + 23) < 0)
            v7 = *(const char **)v4;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-default predicate function parameter '%s' follows default parameter '%s'", v6, v7);
        }
      }
      else if (v5)
      {
        v4 = v2;
      }
      else
      {
        v4 = 0;
      }
      v2 += 40;
    }
    while (v2 != v3);
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v9 = v18;
  v10 = atomic_load(Instance + 18);
  v11 = v9 >= v10
     || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  return v11;
}

void sub_20C183ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C183EF0()
{
}

void sub_20C183F08()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v0 = sub_20C18BE88();
  v1 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_20BDDC0E4(__p, "SdfPrimSpecHandleVector");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v2 = sub_20C18BF88();
  v3 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v2);
  sub_20BDDC0E4(__p, "map<string, SdfVariantSetSpecHandle>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v3, (char *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C183FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New@<X0>(uint64_t *a1@<X0>, int a2@<W2>, _QWORD *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16;

  v6 = sub_20BFD2F78(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v8, &v16);
  }
  else
  {
    v16 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v15);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v14);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(&v16, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, a2, (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)&v14, a3);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = v15;
  if ((v15 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
}

void sub_20C1840AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a4);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((a4 & 7) != 0)
  {
    v7 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *a4@<X3>, _QWORD *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *IsDormant;
  unint64_t v11;
  const char *v12;
  uint64_t *EmptyString;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _BOOL8 v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v23;
  const char *Text;
  unint64_t v25;
  const char *v26;
  const char *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  char v44;
  int v45;

  v45 = a3;
  IsDormant = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1);
  if ((_DWORD)IsDormant)
  {
    v40 = "sdf/primSpec.cpp";
    v41 = "_New";
    v42 = 102;
    v43 = "static SdfPrimSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(const SdfPrimSpecHandle &, const "
          "TfToken &, SdfSpecifier, const TfToken &)";
    v44 = 0;
    v11 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0)
        v12 = *(const char **)v12;
    }
    else
    {
      v12 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim '%s' because the parent prim is NULL", v12);
LABEL_49:
    *a5 = 0;
    return;
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsDormant);
  if ((MEMORY[0x212B90570](EmptyString) & 1) == 0)
  {
    v40 = "sdf/primSpec.cpp";
    v41 = "_New";
    v42 = 109;
    v43 = "static SdfPrimSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(const SdfPrimSpecHandle &, const "
          "TfToken &, SdfSpecifier, const TfToken &)";
    v44 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v37);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, a2, &v38);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    v25 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v25)
    {
      v26 = (const char *)(v25 + 16);
      if (*(char *)(v25 + 39) < 0)
        v26 = *(const char **)v26;
    }
    else
    {
      v26 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim '%s' because '%s' is not a valid name", Text, v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
    sub_20BFD265C(&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    sub_20BFD265C(&v37);
    goto LABEL_49;
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v38);
  if (!*(_QWORD *)a4 && !a3)
  {
    a4 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
    if (!a4)
      a4 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
  }
  v14 = *(_QWORD *)a4;
  v37 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
    {
      v37 = v14 & 0xFFFFFFFFFFFFFFF8;
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, (uint64_t *)&v40);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v33);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, a2, &v35);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_20BFD265C(&v33);
  v18 = v45 == 1 && v14 == 0;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec((uint64_t)&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, 6, v18) & 1) != 0)
  {
    v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v40);
    v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20)
      v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C184620(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v20 + 312), &v45);
    if (v37)
    {
      v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v40);
      v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22)
        v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      sub_20C0A9E04(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v22 + 448), (uint64_t *)&v37);
    }
    v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v40);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v23, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, a5);
  }
  else
  {
    *a5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_20BFD265C(&v35);
  v27 = v41;
  if (v41)
  {
    v28 = (unsigned int *)(v41 + 8);
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(const char *))(*(_QWORD *)v27 + 8))(v27);
  }
  if ((v37 & 7) != 0)
  {
    v31 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v38);
}

void sub_20C184474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, int a2@<W2>, _QWORD *a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2, (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)&v10, a3);
  if ((v10 & 7) != 0)
  {
    v6 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((v11 & 7) != 0)
  {
    v8 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

uint64_t sub_20C184620(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int *a4)
{
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&off_24C527CC0 + 3;
  v5 = *a4;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  return sub_20BF4C2D8((uint64_t)&v5);
}

void sub_20C184694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  int SpecType;
  unint64_t v4;
  const char *v5;
  _QWORD v7[4];
  char v8;

  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (SpecType == 7)
  {
    v7[0] = "sdf/primSpec.cpp";
    v7[1] = "_ValidateEdit";
    v7[2] = 145;
    v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(const TfToken &) const";
    v8 = 0;
    v4 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (const char *)(v4 + 16);
      if (*(char *)(v4 + 39) < 0)
        v5 = *(const char **)v5;
    }
    else
    {
      v5 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot edit %s on a pseudo-root", v5);
  }
  return SpecType != 7;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_IsPseudoRoot(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this) == 7;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetName(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  uint64_t *Name;
  int v3;
  int v4;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v3);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  sub_20BFD265C(&v3);
  return Name;
}

void sub_20C1847B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v8;
  int v9;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v8);
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  v4 = *(unsigned int **)NameToken;
  *a2 = *(unsigned int **)NameToken;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C184844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::CanSetName(uint64_t **a1, uint64_t a2, _BOOL8 a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  std::string __str;
  char v10;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1) == 7)
  {
    if (a3)
    {
      MEMORY[0x212B929D0](a3, "The pseudo-root cannot be renamed");
      return 0;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v8);
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanRename(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8, (uint64_t)&__str);
    if (a3 && v10)
      std::string::operator=((std::string *)a3, &__str);
    a3 = v10 == 0;
    if (v10 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if ((v8 & 7) != 0)
    {
      v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
  }
  return a3;
}

void sub_20C18492C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  unsigned int *v18;
  unsigned int v19;

  if (a17 && a16 < 0)
    operator delete(__p);
  if ((a10 & 7) != 0)
  {
    v18 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetName(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *a1)
{
  uint64_t v2;
  unint64_t v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v24);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameToken(a1, (unsigned int **)&v23);
  v2 = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Rename(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24);
  v3 = v23;
  if ((v2 & 1) != 0 && (v24 & 0xFFFFFFFFFFFFFFF8) != (v23 & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v18);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, &v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
    sub_20BFD265C(&v18);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v18);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v18);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v20);
    v5 = v19;
    if (v19)
    {
      v6 = (unsigned int *)(v19 + 8);
      do
      {
        v7 = __ldxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v20) & 1) == 0)
    {
      v9 = (unsigned int **)sub_20C0B0CA4(&v20);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(v9, (uint64_t)&v18);
      if (sub_20C104BE4((uint64_t)&v18))
      {
        sub_20C184CD8((unsigned int *)&v18, &v24);
        sub_20C184D8C((unsigned int *)&v18, &v23, &v24);
      }
      v10 = (std::__shared_weak_count *)v19;
      if (v19)
      {
        v11 = (unint64_t *)(v19 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    v3 = v23;
  }
  if ((v3 & 7) != 0)
  {
    v13 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if ((v24 & 7) != 0)
  {
    v15 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  return v2;
}

void sub_20C184B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a12);
  sub_20BFD1A18(&a14);
  if ((a15 & 7) != 0)
  {
    v18 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if ((a16 & 7) != 0)
  {
    v20 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v16 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(unsigned int **this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v7;

  sub_20C0A92A4(this, (unsigned int **)&v6);
  v3 = (unsigned int *)v6;
  v7 = v6;
  if (v6)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfGetNameOrderProxy(&v7, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 216), a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C184CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C184CD8(unsigned int *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  void **v7;

  v3 = sub_20C18CC38((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(_QWORD *)a1)
    {
      v4 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a1[4]);
      v5 = (uint64_t)(v4[1] - *v4) >> 3;
    }
    else
    {
      v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_20C18CC7C(a1, v5, 0, v6);
    v7 = (void **)v6;
    sub_20BEEB2B8(&v7);
  }
  else
  {
    sub_20C185BAC(a1, v3);
  }
}

void sub_20C184D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C184D8C(unsigned int *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  void **v10;

  v5 = sub_20C18CC38((uint64_t)a1, a2);
  if (v5 == -1)
  {
    if (*(_QWORD *)a1)
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a1[4]);
      v8 = (uint64_t)(v7[1] - *v7) >> 3;
    }
    else
    {
      v8 = 0;
    }
    memset(v9, 0, sizeof(v9));
    sub_20C18CC7C(a1, v8, 0, v9);
    v10 = (void **)v9;
  }
  else
  {
    v6 = v5;
    sub_20C105A88(v9, 1uLL, a3);
    sub_20C18CC7C(a1, v6, 1, v9);
    v10 = (void **)v9;
  }
  sub_20BEEB2B8(&v10);
}

void sub_20C184E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameRoot@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v8);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v8);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v3, a2);
  result = v9;
  if (v9)
  {
    v5 = (unsigned int *)(v9 + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C184EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameParent@<X0>(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v16);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16))
  {
    *a2 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v14);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v14);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v12);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_20BFD265C(&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    v5 = v15;
    if (v15)
    {
      v6 = (unsigned int *)(v15 + 8);
      do
      {
        v7 = __ldxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  return sub_20BFD265C(&v16);
}

void sub_20C184FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20BFD1A18((uint64_t *)va1);
  sub_20BFD1A18((uint64_t *)va);
  v3 = v12;
  if (v12)
  {
    v4 = (unsigned int *)(v12 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_20BFD1A18((int *)va2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRealNameParent@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v13);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v13);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, &v11);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  result = v14;
  if (v14)
  {
    v6 = (unsigned int *)(v14 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C18512C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&a9);
  v14 = a13;
  if (a13)
  {
    v15 = (unsigned int *)(a13 + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Sdf_Children(a2, &v11, &v9, (uint64_t *)v4 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  result = v12;
  if (v12)
  {
    v6 = (unsigned int *)(v12 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C18523C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetNameChildren(uint64_t **a1, __int128 *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, &v10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::SetChildren(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  result = v11;
  if (v11)
  {
    v5 = (unsigned int *)(v11 + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C18531C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertNameChild(uint64_t **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 inserted;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, &v14);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v12);
  inserted = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::InsertChild(&v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  v7 = v15;
  if (v15)
  {
    v8 = (unsigned int *)(v15 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return inserted;
}

void sub_20C18540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(uint64_t **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t **v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  _BOOL4 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v15;
  const char *Text;
  const char *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v19;
  pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  char v21;
  unsigned int *v22;
  unsigned int v23;
  const char *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  char v33;
  unsigned int *v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t **)sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v4, (uint64_t *)&v29);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, &v38);
  if (sub_20BEB560C((uint64_t)&v29, (uint64_t)&v38))
  {
    v5 = sub_20C0B0CA4(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v5, &v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, &v37);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v34);
    v6 = v37 != (_QWORD)v34;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_20BFD265C(&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    sub_20BFD265C(&v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
  }
  else
  {
    v6 = 1;
  }
  v7 = v39;
  if (v39)
  {
    v8 = (unsigned int *)(v39 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v11 = v30;
  if (v30)
  {
    v12 = (unsigned int *)(v30 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v6)
  {
    v29 = "sdf/primSpec.cpp";
    v30 = "RemoveNameChild";
    v31 = 287;
    v32 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(const SdfPrimSpecHandle &)";
    v33 = 0;
    v15 = sub_20C0B0CA4(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v15, &v38);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v37);
    v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove child prim '%s' from parent '%s' because it is not a child of that prim", Text, v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    sub_20BFD265C(&v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_20BFD265C(&v38);
    return 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)&v29);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v38);
    v19 = sub_20C0B0CA4(a2);
    NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPrimSpec *)v19, (unsigned int **)&v37);
    v21 = v37;
    v22 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    if ((v37 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
    v18 = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild((uint64_t *)&v29, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    if ((v21 & 7) != 0)
    {
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_20BFD265C(&v38);
    v24 = v30;
    if (v30)
    {
      v25 = (unsigned int *)(v30 + 8);
      do
      {
        v26 = __ldxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        (*(void (**)(const char *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  return v18;
}

void sub_20C1856DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  if (a12)
  {
    v18 = a12 + 2;
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasNameChildrenOrder(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _BYTE v6[8];
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(this, (uint64_t)v6);
  v1 = sub_20C104BE4((uint64_t)v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1 != 0;
}

void sub_20C18586C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetNameChildrenOrder(unsigned int **a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(a1, (uint64_t)&v6);
  sub_20C185904(&v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C1858F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C185904(unsigned int *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  if (v4)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 112))(v4, a1[4]);
    v6 = (uint64_t)(v5[1] - *v5) >> 3;
  }
  else
  {
    v6 = 0;
  }
  sub_20C18CC7C(a1, 0, v6, a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertInNameChildrenOrder(unsigned int **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  std::__shared_weak_count *v9;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(this, (uint64_t)&v8);
  sub_20C1859F0(&v8, a3, (uint64_t *)a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20C1859DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C1859F0(unsigned int *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  void **v9;

  if ((_DWORD)a2 == -1)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 112))(v5, a1[4]);
      a2 = (v6[1] - *v6) >> 3;
    }
    else
    {
      LODWORD(a2) = 0;
    }
  }
  v7 = (int)a2;
  sub_20C105A88(v8, 1uLL, a3);
  sub_20C18CC7C(a1, v7, 0, v8);
  v9 = (void **)v8;
  sub_20BEEB2B8(&v9);
}

void sub_20C185A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromNameChildrenOrder(unsigned int **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(this, (uint64_t)&v6);
  sub_20C184CD8(&v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C185B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromNameChildrenOrderByIndex(unsigned int **this, int a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(this, (uint64_t)&v6);
  sub_20C185BAC(&v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C185B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C185BAC(unsigned int *a1, uint64_t a2)
{
  _QWORD v2[3];
  void **v3;

  memset(v2, 0, sizeof(v2));
  sub_20C18CC7C(a1, a2, 1, v2);
  v3 = (void **)v2;
  sub_20BEEB2B8(&v3);
}

void sub_20C185BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ApplyNameChildrenOrder(unsigned int **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(a1, (uint64_t)&v6);
  sub_20C185C90(&v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C185C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C185C90(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)sub_20C18CE5C((uint64_t)a1);
  if ((_DWORD)result)
  {
    v5 = *a1;
    v8 = 0;
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v5 + 72))(v5, a2, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_20C185D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Sdf_Children(a2, &v11, &v9, (uint64_t *)v4 + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  result = v12;
  if (v12)
  {
    v6 = (unsigned int *)(v12 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C185E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetProperties(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, __int128 *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40));
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v11);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::SetChildren(&v11, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    result = v12;
    if (v12)
    {
      v6 = (unsigned int *)(v12 + 8);
      do
      {
        v7 = __ldxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_20C185F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertProperty(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v6;
  _BOOL8 inserted;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v6)
    v6 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v6 + 40)))return 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v15);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v13);
  inserted = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::InsertChild(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  v8 = v16;
  if (v16)
  {
    v9 = (unsigned int *)(v16 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return inserted;
}

void sub_20C186064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  const char *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  const char *Text;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v20;
  pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;
  unsigned int *v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40));
  if ((_DWORD)result)
  {
    v6 = (uint64_t **)sub_20BFE6874(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, (uint64_t *)&v27);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v36);
    if (sub_20BEB560C((uint64_t)&v27, (uint64_t)&v36))
    {
      v7 = sub_20BFE6874(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v33);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v35);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v32);
      v8 = v35 != (_QWORD)v32;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
      sub_20BFD265C(&v32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
      sub_20BFD265C(&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_20BFD265C(&v33);
    }
    else
    {
      v8 = 1;
    }
    v9 = v37;
    if (v37)
    {
      v10 = (unsigned int *)(v37 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    v13 = v28;
    if (v28)
    {
      v14 = (unsigned int *)(v28 + 8);
      do
      {
        v15 = __ldxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(const char *))(*(_QWORD *)v13 + 8))(v13);
    }
    if (v8)
    {
      v27 = "sdf/primSpec.cpp";
      v28 = "RemoveProperty";
      v29 = 382;
      v30 = "void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(const SdfPropertySpecHandle &)";
      v31 = 0;
      v17 = sub_20BFE6874(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &v36);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v36);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v35);
      v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove property '%s' from prim '%s' because it does not belong to that prim", Text, v19);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
      sub_20BFD265C(&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
      return (uint64_t)sub_20BFD265C(&v36);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v27);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v36);
      v20 = sub_20BFE6874(a2);
      NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v20, (unsigned int **)&v35);
      if ((v35 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::RemoveChild((uint64_t *)&v27, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v36);
      if ((v35 & 7) != 0)
      {
        v22 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
      sub_20BFD265C(&v36);
      result = (uint64_t)v28;
      if (v28)
      {
        v24 = (unsigned int *)(v28 + 8);
        do
        {
          v25 = __ldxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void sub_20C186360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  if (a12)
  {
    v18 = a12 + 2;
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributes@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C18CED0(a2, &v11, &v9, (uint64_t *)v4 + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  result = v12;
  if (v12)
  {
    v6 = (unsigned int *)(v12 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C186538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelationships@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C18CFA8(a2, &v11, &v9, (uint64_t *)v4 + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  result = v12;
  if (v12)
  {
    v6 = (unsigned int *)(v12 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C18663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(unsigned int **this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v7;

  sub_20C0A92A4(this, (unsigned int **)&v6);
  v3 = (unsigned int *)v6;
  v7 = v6;
  if (v6)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfGetNameOrderProxy(&v7, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 272), a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C186714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasPropertyOrder(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _BYTE v6[8];
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)v6);
  v1 = sub_20C104BE4((uint64_t)v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1 != 0;
}

void sub_20C1867A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetPropertyOrder(unsigned int **this, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  std::__shared_weak_count *v9;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v8);
    sub_20C185904(&v8, a2);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_20C186860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertInPropertyOrder(unsigned int **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int v10;
  std::__shared_weak_count *v11;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v6)
    v6 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v6 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v10);
    sub_20C1859F0(&v10, a3, (uint64_t *)a2);
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_20C18692C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromPropertyOrder(unsigned int **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  std::__shared_weak_count *v9;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v8);
    sub_20C184CD8(&v8, a2);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_20C1869E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromPropertyOrderByIndex(unsigned int **this, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  std::__shared_weak_count *v9;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v8);
    sub_20C185BAC(&v8, a2);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_20C186AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ApplyPropertyOrder(unsigned int **this, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v8);
    sub_20C185C90(&v8, a2);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_20C186B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetObjectAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
    sub_20BFD265C(&v13);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v13);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3);
    v7 = v14;
    if (v14)
    {
      v8 = (unsigned int *)(v14 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_20BFD265C(&v11);
  }
  else
  {
    v13 = "sdf/primSpec.cpp";
    v14 = "GetObjectAtPath";
    v15 = 465;
    v16 = "SdfSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetObjectAtPath(const SdfPath &) const";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get object at the empty path");
    *a3 = 0;
  }
}

void sub_20C186C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
    sub_20BFD265C(&v13);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v13);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3);
    v7 = v14;
    if (v14)
    {
      v8 = (unsigned int *)(v14 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_20BFD265C(&v11);
  }
  else
  {
    v13 = "sdf/primSpec.cpp";
    v14 = "GetPrimAtPath";
    v15 = 476;
    v16 = "SdfPrimSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrimAtPath(const SdfPath &) const";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get prim at the empty path");
    *a3 = 0;
  }
}

void sub_20C186E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
    sub_20BFD265C(&v13);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v13);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    v7 = v14;
    if (v14)
    {
      v8 = (unsigned int *)(v14 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_20BFD265C(&v11);
  }
  else
  {
    v13 = "sdf/primSpec.cpp";
    v14 = "GetPropertyAtPath";
    v15 = 487;
    v16 = "SdfPropertySpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyAtPath(const SdfPath &) const";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get property at the empty path");
    *a3 = 0;
  }
}

void sub_20C186F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
    sub_20BFD265C(&v13);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v13);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    v7 = v14;
    if (v14)
    {
      v8 = (unsigned int *)(v14 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_20BFD265C(&v11);
  }
  else
  {
    v13 = "sdf/primSpec.cpp";
    v14 = "GetAttributeAtPath";
    v15 = 498;
    v16 = "SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributeAtPath(const SdfPath &) const";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get attribute at the empty path");
    *a3 = 0;
  }
}

void sub_20C1870E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelationshipAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
    sub_20BFD265C(&v13);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v13);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetRelationshipAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    v7 = v14;
    if (v14)
    {
      v8 = (unsigned int *)(v14 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_20BFD265C(&v11);
  }
  else
  {
    v13 = "sdf/primSpec.cpp";
    v14 = "GetRelationshipAtPath";
    v15 = 509;
    v16 = "SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelationshipAtPath(const SdfPath &) const";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get relationship at the empty path");
    *a3 = 0;
  }
}

void sub_20C18725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  unsigned int **v12;
  unsigned int *v13;
  char v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448), (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v16 && (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v15) & 1) != 0)
  {
    v5 = (unsigned int **)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    v6 = *v5;
    *a2 = *v5;
    if ((v6 & 7) == 0)
      return sub_20BF4C2D8((uint64_t)v15);
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    goto LABEL_14;
  }
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 448));
  v12 = (unsigned int **)sub_20BFB46E8(Fallback);
  v13 = *v12;
  *a2 = *v12;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
LABEL_14:
    if ((v8 & 1) == 0)
      *a2 = v7;
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C1873F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetComment@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 48));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C187534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetComment(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C18D080(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 48), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 136));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C187704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetDocumentation(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C18D080(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 136), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetHidden(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned __int8 *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned __int8 *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 176));
    v3 = (unsigned __int8 *)sub_20BFB0910(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C187894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetHidden(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  char v6;

  v6 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 176));
  if ((_DWORD)result)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C0A9030(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 176), &v6);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetryFunction@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  unsigned int **v12;
  unsigned int *v13;
  char v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 416), (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v16 && (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v15) & 1) != 0)
  {
    v5 = (unsigned int **)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    v6 = *v5;
    *a2 = *v5;
    if ((v6 & 7) == 0)
      return sub_20BF4C2D8((uint64_t)v15);
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    goto LABEL_14;
  }
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 416));
  v12 = (unsigned int **)sub_20BFB46E8(Fallback);
  v13 = *v12;
  *a2 = *v12;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
LABEL_14:
    if ((v8 & 1) == 0)
      *a2 = v7;
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C187A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSymmetryFunction(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 416));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C0A90C0(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 416), (uint64_t *)a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetricPeer@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 392), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 392));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C187C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSymmetricPeer(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 392));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C18D080(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 392), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrefix@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 256), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 256));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C187E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetPrefix(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 256));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C18D080(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 256), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSuffix@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 376), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 376));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C187FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSuffix(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 376));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C18D080(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 376), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrefixSubstitutions@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 264), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v5);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 264));
    v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC(Fallback);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v9);
  }
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C188188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetPrefixSubstitutions(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const void ****a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 264));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C131B44(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 264), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSuffixSubstitutions@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 384), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v5);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 384));
    v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC(Fallback);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v9);
  }
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C188334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSuffixSubstitutions(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const void ****a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 384));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C131B44(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 384), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetActive(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned __int8 *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, v2, (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned __int8 *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, v5);
    v3 = (unsigned __int8 *)sub_20BFB0910(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C1884C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetActive(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  char v6;

  v6 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, v3);
  if ((_DWORD)result)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C0A9030(this, v5, &v6);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasActive(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, v2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearActive(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, v2);
  if ((_DWORD)result)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4)
      v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, v4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetKind@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  unsigned int **v12;
  unsigned int *v13;
  char v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208), (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v16 && (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v15) & 1) != 0)
  {
    v5 = (unsigned int **)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    v6 = *v5;
    *a2 = *v5;
    if ((v6 & 7) == 0)
      return sub_20BF4C2D8((uint64_t)v15);
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    goto LABEL_14;
  }
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 208));
  v12 = (unsigned int **)sub_20BFB46E8(Fallback);
  v13 = *v12;
  *a2 = *v12;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
LABEL_14:
    if ((v8 & 1) == 0)
      *a2 = v7;
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C188758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetKind(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208));
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C0A90C0(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 208), (uint64_t *)a2);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasKind(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 208));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearKind(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 208));
  if ((_DWORD)result)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4)
      v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInstanceable(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned __int8 *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 200), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned __int8 *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 200));
    v3 = (unsigned __int8 *)sub_20BFB0910(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C1889A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetInstanceable(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  char v6;

  v6 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 200));
  if ((_DWORD)result)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C0A9030(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 200), &v6);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasInstanceable(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 200));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearInstanceable(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 200));
  if ((_DWORD)result)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4)
      v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 200));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned int *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 312), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20C0DE26C((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned int *)sub_20C0DE204((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 312));
    v3 = (unsigned int *)sub_20C0DE204(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C188BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSpecifier(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  int v6;

  v6 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 312));
  if ((_DWORD)result)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C18D128(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 312), &v6);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPermission(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned int *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 248), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20C188D88((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned int *)sub_20C188E00((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 248));
    v3 = (unsigned int *)sub_20C188E00(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C188D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C188D88(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CABC45ALL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C5298C8);
}

uint64_t sub_20C188E00(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20C188D88(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C18D1B8, (uint64_t)&stru_24C5298C8);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetPermission(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  int v6;

  v6 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 248));
  if ((_DWORD)result)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C18D204(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 248), &v6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetryArguments(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  unsigned int *v4;

  sub_20C188F60(this, &v4);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(a2, &v4, (uint64_t *)v3 + 51);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C188F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_20C188F60(unsigned int **a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;

  sub_20C0A92A4(a1, &v5);
  v3 = v5;
  *a2 = v5;
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSymmetryArgument(unsigned int **this, __int128 *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int *v11[4];
  uint64_t v12;
  std::__shared_weak_count *v13;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 408)))
  {
    sub_20C188F60(this, v11);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C18D458(&v12, v11, (uint64_t *)v7 + 51);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v11);
    if (*(_QWORD *)(a3 + 8))
    {
      sub_20C18916C(&v12, a2, (uint64_t)v11);
      sub_20C189284((uint64_t)v11, a3);
    }
    else
    {
      sub_20C1890E4(&v12, (uint64_t)a2);
    }
    v8 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_20C1890BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1890E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;

  if (!sub_20C18D554(a1))
    return 0;
  if (*a1)
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 24))(&v5);
  else
    v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  if (sub_20C18D5F0(a1))
    return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 80))(*a1, a2);
  else
    return 0;
}

double sub_20C18916C@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[2];
  void *__dst[2];
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v11[1] = 0;
  sub_20BF4C1A4(__dst, a2, v11);
  sub_20C18D724(a1, (uint64_t)__dst, (uint64_t)&v7);
  v9 = v7;
  v10 = v8;
  sub_20BF4C2D8((uint64_t)v14);
  if (v13 < 0)
    operator delete(__dst[0]);
  sub_20BF4C2D8((uint64_t)v11);
  v7 = 0u;
  v8 = 0u;
  if ((sub_20C18DB20(&v9, &v7) & 1) != 0)
  {
    a1 = 0;
    v5 = 0;
  }
  else
  {
    v5 = *a1;
    if (*a1)
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  }
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v5;
  result = *(double *)&v10;
  *(_OWORD *)(a3 + 16) = v10;
  return result;
}

void sub_20C189258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_20BF4AAE4(v11 - 80);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C189284(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD v5[4];
  char v6;

  v3 = *(_QWORD **)a1;
  if (v3)
  {
    sub_20C18DBF0(v3, *(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16), a2);
  }
  else
  {
    v5[0] = "sdf/mapEditProxy.h";
    v5[1] = "operator=";
    v5[2] = 162;
    v5[3] = "_ValueProxy &pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionar"
            "y>::_ValueProxy::operator=(const U &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = px"
            "rInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDicti"
            "onary>, U = pxrInternal__aapl__pxrReserved__::VtValue]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Assignment to invalid map proxy");
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetCustomData(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  unsigned int *v4;

  sub_20C188F60(this, &v4);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(a2, &v4, (uint64_t *)v3 + 9);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C189368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetCustomData(unsigned int **this, __int128 *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int *v11[4];
  uint64_t v12;
  std::__shared_weak_count *v13;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 72)))
  {
    sub_20C188F60(this, v11);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C18D458(&v12, v11, (uint64_t *)v7 + 9);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v11);
    if (*(_QWORD *)(a3 + 8))
    {
      sub_20C18916C(&v12, a2, (uint64_t)v11);
      sub_20C189284((uint64_t)v11, a3);
    }
    else
    {
      sub_20C1890E4(&v12, (uint64_t)a2);
    }
    v8 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_20C189488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAssetInfo(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  unsigned int *v4;

  sub_20C188F60(this, &v4);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(a2, &v4, (uint64_t *)v3 + 2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C189514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetAssetInfo(unsigned int **this, __int128 *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int *v11[4];
  uint64_t v12;
  std::__shared_weak_count *v13;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 16)))
  {
    sub_20C188F60(this, v11);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C18D458(&v12, v11, (uint64_t *)v7 + 2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v11);
    if (*(_QWORD *)(a3 + 8))
    {
      sub_20C18916C(&v12, a2, (uint64_t)v11);
      sub_20C189284((uint64_t)v11, a3);
    }
    else
    {
      sub_20C1890E4(&v12, (uint64_t)a2);
    }
    v8 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_20C189634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetTypeName(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  unsigned int *v8;
  unsigned int v9;
  const char *Text;
  int v11;
  int v12;
  uint64_t v13[4];
  char v14;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 || pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(this) == 1)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4)
      v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448));
    if ((_DWORD)result)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v6)
        v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 448);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v13);
      result = sub_20C0A90C0(this, v7, v13);
      if ((v13[0] & 7) != 0)
      {
        v8 = (unsigned int *)(v13[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
    }
  }
  else
  {
    v13[0] = (uint64_t)"sdf/primSpec.cpp";
    v13[1] = (uint64_t)"SetTypeName";
    v13[2] = 570;
    v13[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetTypeName(const std::string &)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v11);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set empty type name on prim '%s'", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    return (uint64_t)sub_20BFD265C(&v11);
  }
  return result;
}

void sub_20C1897AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  unsigned int *v6;
  unsigned int *v7;

  sub_20C0A92A4(this, &v6);
  v3 = v6;
  v7 = v6;
  if (v6)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(&v7, (uint64_t *)v5 + 24, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C189870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasInheritPaths(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(this, &v6);
  if (sub_20BFE71C4((uint64_t)&v6))
    v1 = sub_20BFE7798(v6);
  else
    v1 = 1;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20C189910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearInheritPathList(unsigned int **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 192)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(this, &v6);
    if (sub_20C0AA0E4((uint64_t)&v6))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_20C1899D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  unsigned int *v6;
  unsigned int *v7;

  sub_20C0A92A4(this, &v6);
  v3 = v6;
  v7 = v6;
  if (v6)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(&v7, (uint64_t *)v5 + 38, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C189A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasSpecializes(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(this, &v6);
  if (sub_20BFE71C4((uint64_t)&v6))
    v1 = sub_20BFE7798(v6);
  else
    v1 = 1;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20C189B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearSpecializesList(unsigned int **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 304)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(this, &v6);
    if (sub_20C0AA0E4((uint64_t)&v6))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_20C189BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v7;

  sub_20C0A92A4(this, (unsigned int **)&v6);
  v3 = (unsigned int *)v6;
  v7 = v6;
  if (v6)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfGetPayloadEditorProxy(&v7, (uint64_t *)v5 + 30, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C189C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasPayloads(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(this, &v6);
  if (sub_20C1027F8((uint64_t)&v6))
    v1 = sub_20BFE7798(v6);
  else
    v1 = 1;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20C189D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearPayloadList(unsigned int **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 240)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(this, &v6);
    if (sub_20C105864((uint64_t)&v6))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_20C189DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v7;

  sub_20C0A92A4(this, (unsigned int **)&v6);
  v3 = (unsigned int *)v6;
  v7 = v6;
  if (v6)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfGetReferenceEditorProxy(&v7, (uint64_t *)v5 + 35, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C189E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasReferences(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(this, &v6);
  if (sub_20C102684((uint64_t)&v6))
    v1 = sub_20BFE7798(v6);
  else
    v1 = 1;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20C189F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearReferenceList(unsigned int **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 280)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(this, &v6);
    if (sub_20C10525C((uint64_t)&v6))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_20C189FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList(unsigned int **this@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count_vtbl *v5;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v14;

  sub_20C0A92A4(this, (unsigned int **)&v13);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v4 = (std::__shared_weak_count_vtbl *)operator new(0xB8uLL);
  v5 = v4;
  v6 = (unsigned int *)v13;
  v14 = v13;
  if (v13)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  sub_20C18DEDC((uint64_t)v4, &v14, (uint64_t *)v3 + 59);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C529BB8;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v5;
  *a2 = v5;
  a2[1] = (std::__shared_weak_count_vtbl *)v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
}

void sub_20C18A104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasVariantSetNames(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList(this, &v6);
  if (sub_20BFE4690((uint64_t)&v6))
    v1 = sub_20BFE7798((uint64_t)v6);
  else
    v1 = 1;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20C18A1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantNames(pxrInternal__aapl__pxrReserved__::SdfSpec *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  BOOL IsPrimPath;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v8;
  uint64_t v9;
  uint64_t **v10;
  void ***v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  uint64_t *EmptyString;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  __int128 i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  int v30;
  __int128 v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v31 = 0uLL;
  v32 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1) == 7
    || (pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, __p),
        IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p),
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1),
        sub_20BFD265C(__p),
        !IsPrimPath))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
    sub_20BDDC0E4(__p, "");
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&i, a2, (uint64_t)__p, &v29);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
    sub_20BFD265C(&i);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v25);
    v7 = sub_20BFCF650(&v25);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v8)
      v8 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    i = 0uLL;
    v24 = 0;
    v9 = sub_20C0A683C((uint64_t *)(v7 + 112));
    (*(void (**)(uint64_t ***__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v9 + 136))(&v33, v9, &v29, (uint64_t)v8 + 56);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v33))
    {
      if ((v34 & 4) != 0)
        v10 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(&v33);
      else
        v10 = v33;
    }
    else
    {
      v10 = (uint64_t **)&i;
    }
    __p[0] = 0;
    __p[1] = 0;
    v28 = 0;
    sub_20BFE538C(__p, *v10, v10[1], v10[1] - *v10);
    v11 = (void ***)sub_20BF4C2D8((uint64_t)&v33);
    v33 = (uint64_t **)&i;
    sub_20BEEB2B8(v11);
    v12 = v26;
    if (v26)
    {
      v13 = (unsigned int *)(v26 + 8);
      do
      {
        v14 = __ldxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    sub_20BE71C2C((uint64_t *)&v31, ((char *)__p[1] - (char *)__p[0]) >> 3);
    for (i = *(_OWORD *)__p; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
    {
      v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B90(&i, v16, v17);
      if ((**(_QWORD **)v18 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((**(_QWORD **)v18 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      v20 = (__int128 *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1) >= v32)
      {
        v22 = sub_20BE4EE50((uint64_t *)&v31, (__int128 *)EmptyString);
      }
      else
      {
        if (*((char *)EmptyString + 23) < 0)
        {
          sub_20BDDBFAC(*((_BYTE **)&v31 + 1), (void *)*EmptyString, EmptyString[1]);
        }
        else
        {
          v21 = *(_OWORD *)EmptyString;
          *(_QWORD *)(*((_QWORD *)&v31 + 1) + 16) = EmptyString[2];
          *v20 = v21;
        }
        v22 = (uint64_t)v20 + 24;
      }
      *((_QWORD *)&v31 + 1) = v22;
    }
    *(_OWORD *)a3 = v31;
    a3[2] = v32;
    v31 = 0uLL;
    v32 = 0;
    *(_QWORD *)&i = __p;
    sub_20BEEB2B8((void ***)&i);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_20BFD265C(&v29);
  }
  __p[0] = &v31;
  sub_20BDE5038((void ***)__p);
}

void sub_20C18A4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *__p[2];
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[80];

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v13);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v11);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children((uint64_t)v15, &v13, &v11, (uint64_t *)v4 + 8);
  sub_20BDDC0E4(__p, "variant sets");
  sub_20C18F45C(a2, (uint64_t)v15, (__int128 *)__p, 4);
  if (v10 < 0)
    operator delete(__p[0]);
  sub_20BFE6D38((uint64_t)v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  result = v14;
  if (v14)
  {
    v6 = (unsigned int *)(v14 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C18A6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  sub_20BFD1A18(&a17);
  v21 = a19;
  if (a19)
  {
    v22 = (unsigned int *)(a19 + 8);
    do
    {
      v23 = __ldxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveVariantSet(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v2;
  uint64_t result;
  _BYTE v4[80];
  void *__p;
  char v6;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v2)
    v2 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v2 + 64));
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets((uint64_t **)this, (uint64_t)v4);
    sub_20C18F4D0((uint64_t)v4);
    if (v6 < 0)
      operator delete(__p);
    return sub_20BFE6D38((uint64_t)v4);
  }
  return result;
}

void sub_20C18A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BFE6BD4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  unsigned int *v7;
  unsigned int *v8;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this) == 7)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    sub_20C0A92A4(this, &v7);
    v4 = v7;
    v8 = v7;
    if (v7)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C18F5E8(a2, &v8, (uint64_t *)v6 + 57);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  }
}

void sub_20C18A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetVariantSelection(unsigned int **this, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11[3];
  _BYTE v12[8];
  uint64_t v13;
  std::__shared_weak_count *v14;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 456)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(this, &v13);
    if (v13
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13)
      && (!v13 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13) & 1) == 0))
    {
      v7 = *(unsigned __int8 *)(a3 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(a3 + 8);
      if (v7)
      {
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v12);
        sub_20C18AA74(&v13, a2, v11);
        sub_20C18AB6C((uint64_t)v11, a3);
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v12);
      }
      else
      {
        sub_20C18A9EC(&v13, a2);
      }
    }
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_20C18A9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18A9EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;

  if (!sub_20C18F6E4(a1))
    return 0;
  if (*a1)
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 24))(&v5);
  else
    v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  if (sub_20C18F780(a1))
    return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 80))(*a1, a2);
  else
    return 0;
}

uint64_t sub_20C18AA74@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  BOOL v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  void *v9[2];
  uint64_t v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
  }
  __p = 0;
  v12 = 0;
  v13 = 0;
  sub_20C18F8B4(a1, (uint64_t)v9, (uint64_t)&v14);
  v16 = v14;
  v17 = v15;
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v5 = sub_20C18FCAC((uint64_t)&v16, (uint64_t)v9);
  v6 = 0;
  result = 0;
  if (!v5)
  {
    result = *a1;
    if (*a1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    v6 = a1;
  }
  v8 = v17;
  *a3 = v6;
  a3[1] = (uint64_t *)result;
  a3[2] = v8;
  return result;
}

void sub_20C18AB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18AB6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD v5[4];
  char v6;

  v3 = *(_QWORD **)a1;
  if (v3)
  {
    sub_20C18FD4C(v3, *(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16), a2);
  }
  else
  {
    v5[0] = "sdf/mapEditProxy.h";
    v5[1] = "operator=";
    v5[2] = 162;
    v5[3] = "_ValueProxy &pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValuePr"
            "oxy::operator=(const U &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrRese"
            "rved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>, U = std::string]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Assignment to invalid map proxy");
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::BlockVariantSelection(unsigned int **this, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8[3];
  void *__p[2];
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 456)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(this, &v12);
    if (v12
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12)
      && (!v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12) & 1) == 0))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v11);
      __p[0] = 0;
      __p[1] = 0;
      v10 = 0;
      sub_20C18AA74(&v12, a2, v8);
      sub_20C18AB6C((uint64_t)v8, (uint64_t)__p);
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v11);
    }
    v5 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_20C18ACFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v18 - 32));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  unsigned int *v7;
  unsigned int *v8;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this) == 7)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    sub_20C0A92A4(this, &v7);
    v4 = v7;
    v8 = v7;
    if (v7)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C190038(a2, &v8, (uint64_t *)v6 + 36);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  }
}

void sub_20C18ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetRelocates(unsigned int **this, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 288)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates(this, &v8);
    sub_20C190134(&v8, a2);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_20C18AE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasRelocates(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 288));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearRelocates(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 288));
  if ((_DWORD)result)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4)
      v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 288));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_UncheckedCreatePrimInLayer(pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5;
  unint64_t PathElementCount;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  uint64_t v18;
  void **p_s1;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  _BOOL4 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char IsDormant;
  unsigned int **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  char *v36;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v37;
  size_t v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  int v42;
  int v43;
  void *v45;
  int v46;
  char v47;
  const char *Text;
  uint64_t Identifier;
  const char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  const char *v55;
  uint64_t v56;
  const char *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _DWORD *v63;
  _DWORD *v64;
  unint64_t v65;
  unsigned int *v66;
  void *__s1;
  size_t __n;
  unsigned __int8 v69;
  unsigned int *v70[7];
  char *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  _BYTE v75[8];
  uint64_t v76;
  void **v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  char v81;
  void *__p;
  char v83;
  unsigned __int8 *v84[2];
  unsigned __int8 v85;
  __int128 v86;
  unsigned __int8 v87;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v88;
  unsigned int *v89[2];

  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(this, a2) & 1) != 0)
    return 1;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a2);
  sub_20C0B8D74((uint64_t *)&v63, PathElementCount);
  v58 = pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a2);
  sub_20BFD6E54(&v61, a2);
  sub_20BFD6EA4(&v62, (_DWORD *)a2 + 1);
  do
  {
    v7 = v64;
    if ((unint64_t)v64 >= v65)
    {
      v8 = (_DWORD *)sub_20C1909D4((uint64_t *)&v63, &v61);
    }
    else
    {
      sub_20BFD38A4(v64, &v61);
      sub_20BFD38DC(v7 + 1, &v62);
      v8 = v7 + 2;
    }
    v64 = v8;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 2), &v77);
    sub_20BFD3EBC(&v61, (int *)&v77);
    sub_20BFD3F10(&v62, (int *)&v77 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v77 + 1);
    sub_20BFD265C(&v77);
  }
  while (!pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v61));
  v9 = v64;
  if (v63 == v64)
  {
LABEL_96:
    v5 = 1;
    goto LABEL_97;
  }
LABEL_9:
  v59 = *(v9 - 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9 - 2);
  v60 = *(v9 - 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v9 - 1);
  v10 = v64 - 2;
  sub_20BFD6F64((uint64_t)&v65, v64 - 2);
  v64 = v10;
  if (v58
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59))
  {
    v89[0] = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, &v77);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v77, &v88);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v77 + 1);
    sub_20BFD265C(&v77);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v88))
    {
      v77 = (void **)"sdf/primSpec.cpp";
      v78 = "_FindOrCreateVariantSpec";
      v79 = 824;
      v80 = "BOOL pxrInternal__aapl__pxrReserved__::_FindOrCreateVariantSpec(SdfLayer *, const SdfPath &)";
      v81 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v77, "primSpec", 0) & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v88);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v89);
        goto LABEL_103;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, (uint64_t)v84);
    v11 = (uint64_t **)sub_20C0B0CA4(&v88);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets(v11, (uint64_t)&v77);
    sub_20C18C484((uint64_t *)&v71, (uint64_t)&v77);
    while (v73 != v76)
    {
      v14 = sub_20C18C088((uint64_t)&v71, v12, v13);
      sub_20C18C104(v14, (uint64_t)&__s1);
      if ((v69 & 0x80u) == 0)
        v15 = v69;
      else
        v15 = __n;
      v16 = (unsigned __int8 *)v85;
      if ((v85 & 0x80u) != 0)
        v16 = v84[1];
      if ((unsigned __int8 *)v15 == v16)
      {
        if ((v85 & 0x80u) == 0)
          v17 = v84;
        else
          v17 = (unsigned __int8 **)v84[0];
        if ((v69 & 0x80) != 0)
        {
          v26 = memcmp(__s1, v17, __n) == 0;
        }
        else if (v69)
        {
          v18 = v69 - 1;
          p_s1 = &__s1;
          do
          {
            v21 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            v20 = v21;
            v23 = *(unsigned __int8 *)v17;
            v17 = (unsigned __int8 **)((char *)v17 + 1);
            v22 = v23;
            v25 = v18-- != 0;
            v26 = v20 == v22;
          }
          while (v20 == v22 && v25);
        }
        else
        {
          v26 = 1;
        }
      }
      else
      {
        v26 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v70);
      if ((char)v69 < 0)
        operator delete(__s1);
      if (v26)
      {
        v29 = sub_20C18C088((uint64_t)&v71, v27, v28);
        sub_20C18C104(v29, (uint64_t)&__s1);
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v89, v70);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v70);
        if ((char)v69 < 0)
          operator delete(__s1);
        break;
      }
      sub_20C18C1E8((uint64_t)&v71);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v89))
    {
      pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(&v88, (uint64_t)v84, (void **)&v71);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v89, (unsigned int **)&v71);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v89);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v71);
      if ((IsDormant & 1) == 0)
      {
        v31 = (unsigned int **)sub_20C0B0CA4(&v88);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList(v31, (std::__shared_weak_count_vtbl **)&v71);
        sub_20C18C268((uint64_t *)&v71, v84);
        v32 = (std::__shared_weak_count *)v72;
        if (v72)
        {
          v33 = (unint64_t *)(v72 + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v89))
    {
      v71 = "sdf/primSpec.cpp";
      v72 = "_FindOrCreateVariantSpec";
      v73 = 846;
      v74 = "BOOL pxrInternal__aapl__pxrReserved__::_FindOrCreateVariantSpec(SdfLayer *, const SdfPath &)";
      v75[0] = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(this);
      v52 = *(char *)(Identifier + 23) >= 0 ? Identifier : *(_QWORD *)Identifier;
      v53 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Failed to create variant set for '%s' in @%s@", v50, v51, Text, v52);
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v71, "varSetSpec", v53) & 1) == 0)
      {
        v47 = 0;
        goto LABEL_80;
      }
    }
    v35 = (uint64_t **)sub_20C0B3C54((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v89);
    pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariants(v35, (uint64_t)&__s1);
    sub_20C18CADC((uint64_t)&v71, (uint64_t)&__s1);
    sub_20C18CB50((uint64_t)&__s1);
    while (1)
    {
      if (v72 == v74)
      {
        sub_20C18CB50((uint64_t)v75);
        pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v89, &v86, &v71);
        v47 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v71) ^ 1;
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v71);
        goto LABEL_80;
      }
      sub_20C18C378((uint64_t)&v71, v36, &v66);
      v37 = sub_20BFE8634((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v66);
      pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v37, (uint64_t)&__s1);
      if ((v69 & 0x80u) == 0)
        v38 = v69;
      else
        v38 = __n;
      v39 = v87;
      if ((v87 & 0x80u) != 0)
        v39 = *((_QWORD *)&v86 + 1);
      if (v38 == v39)
      {
        if ((v87 & 0x80u) == 0)
          v40 = &v86;
        else
          v40 = (__int128 *)v86;
        if ((v69 & 0x80) != 0)
        {
          v45 = __s1;
          v46 = memcmp(__s1, v40, __n);
          operator delete(v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v66);
          if (!v46)
            goto LABEL_79;
        }
        else
        {
          if (!v69)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v66);
LABEL_79:
            sub_20C18CB50((uint64_t)v75);
            v47 = 1;
LABEL_80:
            if (v83 < 0)
              operator delete(__p);
            sub_20BFE6D38((uint64_t)&v77);
            if ((char)v87 < 0)
              operator delete((void *)v86);
            if ((char)v85 < 0)
              operator delete(v84[0]);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v88);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v89);
            if ((v47 & 1) == 0)
              goto LABEL_103;
LABEL_87:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
            sub_20BFD265C(&v59);
            v9 = v64;
            if (v63 == v64)
              goto LABEL_96;
            goto LABEL_9;
          }
          v41 = 0;
          do
          {
            v42 = *((unsigned __int8 *)&__s1 + v41);
            v43 = *((unsigned __int8 *)v40 + v41);
          }
          while (v42 == v43 && v69 - 1 != v41++);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v66);
          if (v42 == v43)
            goto LABEL_79;
        }
      }
      else
      {
        if ((v69 & 0x80) != 0)
          operator delete(__s1);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v66);
      }
      sub_20C18C404((uint64_t)&v71);
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec(this, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, 6, 1) & 1) != 0)goto LABEL_87;
  v77 = (void **)"sdf/primSpec.cpp";
  v78 = "Sdf_UncheckedCreatePrimInLayer";
  v79 = 963;
  v80 = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_UncheckedCreatePrimInLayer(SdfLayer *, const SdfPath &)";
  v81 = 0;
  v55 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
  v56 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(this);
  if (*(char *)(v56 + 23) >= 0)
    v57 = (const char *)v56;
  else
    v57 = *(const char **)v56;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v77, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to create prim at path '%s' in layer @%s@", v55, v57);
LABEL_103:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
  sub_20BFD265C(&v59);
  v5 = 0;
LABEL_97:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
  sub_20BFD265C(&v61);
  v77 = (void **)&v63;
  sub_20BFD6F90(&v77);
  return v5;
}

void sub_20C18B694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, int a16, int a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  uint64_t v22;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 104));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 96));
  sub_20BFD1A18(&a14);
  sub_20BFD1A18(&a16);
  a22 = (void **)&a18;
  sub_20BFD6F90(&a22);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  int v13;
  int v14;

  sub_20C18B8D0((uint64_t)&v11, a2);
  if (a1[1])
  {
    if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
      v5 = (pxrInternal__aapl__pxrReserved__ *)*a1;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  if (!sub_20C18B9B4((uint64_t)v5, &v11))
    goto LABEL_9;
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v10);
  v6 = v12;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_UncheckedCreatePrimInLayer(v5, v12, v7))
  {
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v10);
LABEL_9:
    *a3 = 0;
    goto LABEL_10;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v8, v6, a3);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v10);
LABEL_10:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_20BFD265C(&v13);
}

void sub_20C18B8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C18BBD4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18B8D0(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  _BOOL8 IsAbsolutePath;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  IsAbsolutePath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a1);
  if (IsAbsolutePath)
  {
    v3 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
  }
  else
  {
    v6 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
    v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsAbsolutePath);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v6, v7, &v8);
    sub_20BFD3EBC((int *)v3, &v8);
    sub_20BFD3F10((int *)(a1 + 20), &v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_20BFD265C(&v8);
  }
  *(_QWORD *)(a1 + 8) = v3;
  return a1;
}

void sub_20C18B990(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18B9B4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  const char *v12;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *__p;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;

  v4 = a2[1];
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(v4)
    && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v4))
  {
    goto LABEL_25;
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(v4);
  if (!(_DWORD)v5)
    goto LABEL_23;
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v4, v6, (int *)&v21);
  while (1)
  {
    v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
    v9 = v21;
    v10 = *v8;
    if (v21 == *v8)
      break;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (uint64_t)&v15);
    v11 = HIBYTE(v17);
    v12 = v16;
    if (v17 >= 0)
      v12 = (const char *)HIBYTE(v17);
    if (v12)
    {
      if (!((v20 & 0x80u) == 0 ? v20 : v19))
      {
        if ((v20 & 0x80) != 0)
        {
          operator delete(__p);
          v11 = HIBYTE(v17);
        }
        if (v11 < 0)
          operator delete(v15);
        break;
      }
    }
    if ((v20 & 0x80) != 0)
    {
      operator delete(__p);
      if ((v17 & 0x8000000000000000) == 0)
        goto LABEL_15;
    }
    else if ((v17 & 0x8000000000000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(v15);
LABEL_15:
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v15);
    sub_20BFD3EBC((int *)&v21, (int *)&v15);
    sub_20BFD3F10((int *)&v21 + 1, (int *)&v15 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v15);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_20BFD265C(&v21);
  if (v9 != v10)
  {
LABEL_25:
    v15 = "sdf/primSpec.cpp";
    v16 = "Sdf_CanCreatePrimInLayer";
    v17 = 979;
    __p = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_CanCreatePrimInLayer(SdfLayer *, const _AbsPathHelper &)";
    LOBYTE(v19) = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim at path '%s' because it is not a valid prim or prim variant selection path");
    return 0;
  }
LABEL_23:
  if (a1)
    return 1;
  v15 = "sdf/primSpec.cpp";
  v16 = "Sdf_CanCreatePrimInLayer";
  v17 = 985;
  __p = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_CanCreatePrimInLayer(SdfLayer *, const _AbsPathHelper &)";
  LOBYTE(v19) = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*a2);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim at path '%s' in null or expired layer");
  return 0;
}

void sub_20C18BBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18BBD4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimInLayer(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__ *v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t PrimInLayer;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8[2];
  int v9;
  int v10;

  sub_20C18B8D0((uint64_t)v8, a2);
  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(a1 + 8)) + 14))
      v3 = *(pxrInternal__aapl__pxrReserved__ **)a1;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  if (sub_20C18B9B4((uint64_t)v3, v8))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v7);
    PrimInLayer = pxrInternal__aapl__pxrReserved__::Sdf_UncheckedCreatePrimInLayer(v3, v8[1], v4);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v7);
  }
  else
  {
    PrimInLayer = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  return PrimInLayer;
}

void sub_20C18BCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a9);
  sub_20C18BBD4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C18BCD8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C18BDF8((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527C50, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527C50, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527AF0, (void *(*)(void *, BOOL))nullsub_263);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C18BDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C18BDF8(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C527AF0, (uint64_t)__p);
  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C18BE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C18BE88()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5298A8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C5298A8, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C18BF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C18BF88()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5298B8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C5298B8, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C18C044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18C088(uint64_t result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*(_QWORD *)(result + 16) == *(_QWORD *)(result + 40))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfChildrenPr"
            "oxy<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildP"
            "olicy>>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrInternal__aapl__pxrR"
            "eserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C18C104(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  void *__p[2];
  uint64_t v6;
  unsigned int *v7;

  sub_20C18C504(*(_QWORD *)a1, *(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)__p);
  if (SHIBYTE(v6) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v6;
  }
  v3 = v7;
  *(_QWORD *)(a2 + 24) = v7;
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20C18C19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C18C1B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18C1B0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C18C1E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a1 + 40))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfChildrenProxy<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_Va"
            "riantSetChildPolicy>>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrIntern"
            "al__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>, Reverse = false]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v2 + 1;
  }
  return a1;
}

void sub_20C18C268(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;

  if (sub_20C18C5A8((uint64_t)a1)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) & 1) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1))
    {
      sub_20C18C61C(a1, 0, a2);
    }
    else
    {
      v4 = a1[1];
      v10 = *a1;
      v11 = (std::__shared_weak_count *)v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v12 = 2;
      sub_20C18C704((unsigned int *)&v10, a2);
      v7 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      sub_20C18C61C(a1, 4, a2);
    }
  }
}

void sub_20C18C364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C18C378(uint64_t a1@<X0>, char *a2@<X2>, unsigned int **a3@<X8>)
{
  uint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxr"
            "Internal__aapl__pxrReserved__::Sdf_VariantChildPolicy>>::operator*() [T = pxrInternal__aapl__pxrReserved__::"
            "SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a2);
  }
  sub_20C18CBE8(*(uint64_t **)a1, v3, a3);
}

void sub_20C18C3FC()
{
  JUMPOUT(0x20C18C3A0);
}

uint64_t sub_20C18C404(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfCh"
            "ildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>>::operator++() [T = pxrInternal__aapl__"
            "pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>, Reverse = false]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2 + 1;
  }
  return a1;
}

uint64_t *sub_20C18C484(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Size;

  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  a1[5] = 0;
  if (sub_20BFE6C04(a2))
    v4 = a2;
  else
    v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize(a2);
  *a1 = v4;
  a1[1] = a2;
  a1[2] = 0;
  if (sub_20BFE6C04(a2))
    v5 = a2;
  else
    v5 = 0;
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize(a2);
  a1[3] = v5;
  a1[4] = a2;
  a1[5] = Size;
  return a1;
}

void sub_20C18C504(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  void *__p[2];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v11 = a2;
  v12 = a3;
  sub_20BFE6C88(a1, (uint64_t)&v11, __p);
  sub_20BFE6CE8(v11, v12, &v8);
  *(_OWORD *)a4 = *(_OWORD *)__p;
  v5 = v10;
  __p[1] = 0;
  v10 = 0;
  __p[0] = 0;
  v6 = v8;
  *(_QWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 24) = v6;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_20C18C58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C18C5A8(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 410;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy"
            ">::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void sub_20C18C61C(uint64_t *a1, int a2, unsigned __int8 **a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int v18;

  v4 = (std::__shared_weak_count *)a1[1];
  v16 = *a1;
  v17 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v18 = a2;
  v7 = sub_20C18C7C4((uint64_t)&v16, a3);
  if (v7 == -1)
    goto LABEL_7;
  if (v7)
  {
    sub_20C18C808((unsigned int *)&v16, v7);
LABEL_7:
    if (sub_20C18CA68((uint64_t)&v16))
      v9 = &v16;
    else
      v9 = 0;
    v14.n128_u64[1] = (unint64_t)v9;
    v15 = 0;
    v8 = sub_20C18C868((unsigned int *)&v16, &v14, (__int128 *)a3, &v13);
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v8);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20C18C6EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_20C18C704(unsigned int *a1, unsigned __int8 **a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  void **v7;

  v3 = sub_20C18C7C4((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(_QWORD *)a1)
    {
      v4 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a1[4]);
      v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
    }
    else
    {
      v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_20C18C900(a1, v5, 0, v6);
    v7 = (void **)v6;
    sub_20BDE5038(&v7);
  }
  else
  {
    sub_20C18C808(a1, v3);
  }
}

void sub_20C18C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20C18C7C4(uint64_t a1, unsigned __int8 **a2)
{
  if (sub_20BFE4760(a1))
    return sub_20C104F4C(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), a2);
  else
    return -1;
}

void sub_20C18C808(unsigned int *a1, uint64_t a2)
{
  _QWORD v2[3];
  void **v3;

  memset(v2, 0, sizeof(v2));
  sub_20C18C900(a1, a2, 1, v2);
  v3 = (void **)v2;
  sub_20BDE5038(&v3);
}

void sub_20C18C84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BDE5038(&a12);
  _Unwind_Resume(a1);
}

__n128 sub_20C18C868@<Q0>(unsigned int *a1@<X0>, __n128 *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7;
  __n128 result;
  _QWORD v9[3];
  void **v10;

  v7 = a2[1].n128_i64[0];
  sub_20BED7D38(v9, 1uLL, a3);
  sub_20C18C900(a1, v7, 0, v9);
  v10 = (void **)v9;
  sub_20BDE5038(&v10);
  result = *a2;
  *a4 = *a2;
  a4[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

void sub_20C18C8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C18C900(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *WhyNot;
  const char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  void *__p[2];
  char v16;
  char v17;

  if (sub_20C18CA68((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 32))(__p, *(_QWORD *)a1, a1[4]);
      if (v17)
      {
        v10 = "sdf/listProxy.h";
        v11 = "_Edit";
        v12 = 750;
        v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy>::_"
              "Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
        v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0)
          v9 = (const char *)WhyNot;
        else
          v9 = (const char *)*WhyNot;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0)
          operator delete(__p[0]);
      }
    }
    else if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      v10 = "sdf/listProxy.h";
      v11 = "_Edit";
      v12 = 758;
      v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy>::_Ed"
            "it(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
      v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_20C18CA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C18CA68(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy>::_Va"
            "lidate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_20C18CADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Size;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = a1 + 32;
  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Sdf_Children(a1 + 32, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetSize(v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetSize(v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetSize(v3);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = Size;
  return a1;
}

void sub_20C18CB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C18CB50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18CB50(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void **v10;

  v10 = (void **)(a1 + 40);
  sub_20BEEB2B8(&v10);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return a1;
}

void sub_20C18CBE8(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetChild(a1, &v6, a2);
  v4 = v6;
  *a3 = v6;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

uint64_t sub_20C18CC38(uint64_t a1, _QWORD *a2)
{
  if (sub_20C104C34(a1))
    return sub_20C18CDE4(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), a2);
  else
    return -1;
}

void sub_20C18CC7C(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *WhyNot;
  const char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  void *__p[2];
  char v16;
  char v17;

  if (sub_20C18CE5C((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 32))(__p, *(_QWORD *)a1, a1[4]);
      if (v17)
      {
        v10 = "sdf/listProxy.h";
        v11 = "_Edit";
        v12 = 750;
        v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolic"
              "y>::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfN"
              "ameTokenKeyPolicy]";
        v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0)
          v9 = (const char *)WhyNot;
        else
          v9 = (const char *)*WhyNot;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0)
          operator delete(__p[0]);
      }
    }
    else if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      v10 = "sdf/listProxy.h";
      v11 = "_Edit";
      v12 = 758;
      v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy>"
            "::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
      v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_20C18CDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C18CDE4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = *(_QWORD **)(v4 + 8);
  if (*(_QWORD **)v4 == v5)
  {
    v6 = *(_QWORD **)v4;
  }
  else
  {
    v6 = *(_QWORD **)v4;
    while ((*v6 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v6 == v5)
      {
        v6 = *(_QWORD **)(v4 + 8);
        break;
      }
    }
  }
  if (v6 == v5)
    return -1;
  else
    return ((uint64_t)v6 - *(_QWORD *)v4) >> 3;
}

uint64_t sub_20C18CE5C(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy>"
            "::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_20C18CED0(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  v5 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Sdf_Children(a1, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::SdfAttributeViewPredicate::SdfAttributeViewPredicate((_DWORD *)(v5 + 72));
  return a1;
}

void sub_20C18CEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C18CF10(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18CF10(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void **v10;

  v10 = (void **)(a1 + 40);
  sub_20BEEB2B8(&v10);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t sub_20C18CFA8(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  v5 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Sdf_Children(a1, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::SdfRelationshipViewPredicate::SdfRelationshipViewPredicate((_DWORD *)(v5 + 72));
  return a1;
}

void sub_20C18CFD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C18CFE8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18CFE8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void **v10;

  v10 = (void **)(a1 + 40);
  sub_20BEEB2B8(&v10);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return a1;
}

BOOL sub_20C18D080(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _BOOL8 v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C18D10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C18D128(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  _BOOL8 v3;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&off_24C527CC0 + 3;
  v5 = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_20BF4C2D8((uint64_t)&v5);
  return v3;
}

void sub_20C18D1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C18D1B8@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20C18D1F8;
  a1[2] = &stru_24C5298C8;
  return result;
}

void sub_20C18D1F8(void *__p)
{
  if (__p)
    operator delete(__p);
}

BOOL sub_20C18D204(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  _BOOL8 v3;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&off_24C5298D8 + 3;
  v5 = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_20BF4C2D8((uint64_t)&v5);
  return v3;
}

void sub_20C18D280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C18D294(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20C18D2A4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C18D2B0()
{
  return 1;
}

unint64_t sub_20C18D2B8(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20C18D2D8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20C18D2EC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20C18D304()
{
  return 0;
}

void *sub_20C18D314()
{
  return &unk_24C5298C8;
}

uint64_t sub_20C18D320()
{
  return 0;
}

uint64_t sub_20C18D328()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C18D334()
{
  return 0;
}

uint64_t sub_20C18D33C()
{
  return 0;
}

BOOL sub_20C18D344(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CABC45ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C18D37C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C5298C8, a2, a3);
}

void *sub_20C18D39C()
{
  return &unk_24C5298C8;
}

_DWORD *sub_20C18D3AC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5298D8 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *sub_20C18D3C8(unsigned int *a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C5298C8, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C18D43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C18D458(_QWORD *a1, unsigned int **a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>(a2, a3, &v7);
  v4 = v7;
  *a1 = v7;
  if (v4)
  {
    v5 = operator new(0x20uLL);
    *v5 = &unk_24C5299A0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = v5;
  return a1;
}

void sub_20C18D4C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20C18D4E8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C18D4FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C18D514(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5299E0))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C18D554(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  v4[2] = 761;
  v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ate() [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal__aapl__pxrReserved__::Sd"
          "fIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing an invalid map proxy");
  return 0;
}

uint64_t sub_20C18D5F0(uint64_t *a1)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t v4;
  void **v5;
  void *__p[2];
  uint64_t v8;
  _QWORD v9[4];
  char v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v11;

  v2 = *a1;
  if (v2)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)v2 + 24))(&v11);
  else
    v11 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11) & 1) != 0
    || (v3 = sub_20BFD5244(&v11), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v9[0] = "sdf/mapEditProxy.h";
    v9[1] = "_ValidateErase";
    v9[2] = 1019;
    v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Val"
            "idateErase(const key_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal"
            "__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
    v10 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(__p);
      if (v8 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v5 = __p;
      v8 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't erase value from %s: Permission denied.", (const char *)v5);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return v4;
}

void sub_20C18D6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v15 - 24));
  _Unwind_Resume(a1);
}

double sub_20C18D724@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double result;
  __int128 v8;
  char v9;

  if (!sub_20C18D554(a1))
    goto LABEL_9;
  if (*a1)
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 24))(&v8);
  else
    *(_QWORD *)&v8 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
  if (sub_20C18D7E8(a1, a2))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a1 + 72))(&v8, *a1, a2);
    v6 = *a1;
    if (*a1)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v6;
    result = *(double *)&v8;
    *(_OWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 32) = v9;
  }
  else
  {
LABEL_9:
    *(_BYTE *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

BOOL sub_20C18D7E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  char v6;
  void **v7;
  _BOOL8 v8;
  char v9;
  void **v10;
  void **v11;
  uint64_t *WhyNot;
  void **p_p;
  const char *v14;
  uint64_t *v16;
  void **v17;
  const char *v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  char v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v30;

  v4 = *a1;
  if (v4)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)v4 + 24))(&v30);
  else
    v30 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v30) & 1) == 0)
  {
    v5 = sub_20BFD5244(&v30);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5) & 1) == 0)
    {
      v25 = "sdf/mapEditProxy.h";
      v26 = "_ValidateInsert";
      v27 = 980;
      v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Val"
            "idateInsert(const value_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInter"
            "nal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
      v29 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(v22);
        if (v23 >= 0)
          v11 = v22;
        else
          v11 = (void **)v22[0];
      }
      else
      {
        v22[0] = 0;
        v22[1] = 0;
        v11 = v22;
        v23 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: Permission denied.", (const char *)v11);
LABEL_28:
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
LABEL_30:
      v8 = 0;
      goto LABEL_31;
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 88))(v22, *a1, a2);
  if (v24)
  {
    v25 = "sdf/mapEditProxy.h";
    v26 = "_ValidateInsert";
    v27 = 990;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ateInsert(const value_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal_"
          "_aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
    v29 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(&__p);
      v6 = HIBYTE(v21);
      v7 = (void **)__p;
    }
    else
    {
      v7 = 0;
      v6 = 0;
      __p = 0;
      v20 = 0;
      v21 = 0;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v22);
    p_p = &__p;
    if (v6 < 0)
      p_p = v7;
    if (*((char *)WhyNot + 23) >= 0)
      v14 = (const char *)WhyNot;
    else
      v14 = (const char *)*WhyNot;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert key in %s: %s", (const char *)p_p, v14);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    if (!v24)
      goto LABEL_30;
    goto LABEL_28;
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 96))(v22, *a1, a2 + 24);
  v8 = v24 == 0;
  if (v24)
  {
    v25 = "sdf/mapEditProxy.h";
    v26 = "_ValidateInsert";
    v27 = 1000;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ateInsert(const value_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal_"
          "_aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
    v29 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(&__p);
      v9 = HIBYTE(v21);
      v10 = (void **)__p;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      __p = 0;
      v20 = 0;
      v21 = 0;
    }
    v16 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v22);
    v17 = &__p;
    if (v9 < 0)
      v17 = v10;
    if (*((char *)v16 + 23) >= 0)
      v18 = (const char *)v16;
    else
      v18 = (const char *)*v16;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: %s", (const char *)v17, v18);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    if (v24 && SHIBYTE(v23) < 0)
      operator delete(v22[0]);
  }
LABEL_31:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v30);
  return v8;
}

void sub_20C18DAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (a24)
  {
    if (a23 < 0)
      operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20C18DB20(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  if (*a1 == *a2)
  {
    v3 = a1[3];
    if (v3 == a2[3] && (!v3 || a1[2] == a2[2]))
      return 1;
  }
  result = sub_20C18DB8C((uint64_t)a1);
  if ((_DWORD)result)
    return sub_20C18DB8C((uint64_t)a2);
  return result;
}

BOOL sub_20C18DB8C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtDictionary **v1;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(pxrInternal__aapl__pxrReserved__::VtDictionary ***)a1;
  if (!*(_QWORD *)a1)
    return 1;
  v3 = *v1;
  if (*v1)
    v3 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary *))(*(_QWORD *)v3 + 48))(v3);
  v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v3);
  return *(_QWORD *)(a1 + 24) == v5 && (!v5 || *(_QWORD *)(a1 + 16) == v4);
}

uint64_t sub_20C18DBF0(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = sub_20C18D554(a1);
  if ((_DWORD)result)
  {
    if (*a1)
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 24))(&v8);
    else
      v8 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
    result = sub_20C18DC88(a1, *a3 + 32, a4);
    if ((_DWORD)result)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, *a3 + 32, a4);
  }
  return result;
}

BOOL sub_20C18DC88(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  _BOOL8 v7;
  char v8;
  void **v9;
  void **v10;
  uint64_t *WhyNot;
  void **v12;
  const char *v13;
  void *__p[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v25;

  v5 = *a1;
  if (v5)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)v5 + 24))(&v25);
  else
    v25 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v25) & 1) != 0
    || (v6 = sub_20BFD5244(&v25), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v6) & 1) != 0))
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 96))(v17, *a1, a3);
    v7 = v19 == 0;
    if (v19)
    {
      v20 = "sdf/mapEditProxy.h";
      v21 = "_ValidateSet";
      v22 = 952;
      v23 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Val"
            "idateSet(const key_type &, const mapped_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValueP"
            "olicy = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved_"
            "_::VtDictionary>]";
      v24 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(__p);
        v8 = HIBYTE(v16);
        v9 = (void **)__p[0];
      }
      else
      {
        v9 = 0;
        v8 = 0;
        __p[0] = 0;
        __p[1] = 0;
        v16 = 0;
      }
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v17);
      v12 = __p;
      if (v8 < 0)
        v12 = v9;
      if (*((char *)WhyNot + 23) >= 0)
        v13 = (const char *)WhyNot;
      else
        v13 = (const char *)*WhyNot;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value in %s: %s", (const char *)v12, v13);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      if (v19 && SHIBYTE(v18) < 0)
        operator delete(v17[0]);
    }
  }
  else
  {
    v20 = "sdf/mapEditProxy.h";
    v21 = "_ValidateSet";
    v22 = 942;
    v23 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ateSet(const key_type &, const mapped_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolic"
          "y = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
    v24 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(v17);
      if (v18 >= 0)
        v10 = v17;
      else
        v10 = (void **)v17[0];
    }
    else
    {
      v17[0] = 0;
      v17[1] = 0;
      v10 = v17;
      v18 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value in %s: Permission denied.", (const char *)v10);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
  return v7;
}

void sub_20C18DE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20C18DEDC(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void **v32;

  *(_QWORD *)a1 = &unk_24C529AB0;
  v5 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v5)
  {
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
  }
  v7 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = &unk_24C529A00;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp(a1 + 32);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) == 0)
  {
    v10 = sub_20BFD5244(a2);
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v12);
    sub_20C18E1D8(v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (uint64_t)v12, (uint64_t)v19);
    *(_BYTE *)(a1 + 32) = v19[0];
    sub_20BE7598C((uint64_t *)(a1 + 40));
    *(_OWORD *)(a1 + 40) = v20;
    *(_QWORD *)(a1 + 56) = v21;
    v21 = 0;
    v20 = 0uLL;
    sub_20BE7598C((uint64_t *)(a1 + 64));
    *(_OWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 80) = v23;
    v23 = 0;
    v22 = 0uLL;
    sub_20BE7598C((uint64_t *)(a1 + 88));
    *(_OWORD *)(a1 + 88) = v24;
    *(_QWORD *)(a1 + 104) = v25;
    v25 = 0;
    v24 = 0uLL;
    sub_20BE7598C((uint64_t *)(a1 + 112));
    *(_OWORD *)(a1 + 112) = v26;
    *(_QWORD *)(a1 + 128) = v27;
    v27 = 0;
    v26 = 0uLL;
    sub_20BE7598C((uint64_t *)(a1 + 136));
    *(_OWORD *)(a1 + 136) = v28;
    *(_QWORD *)(a1 + 152) = v29;
    v29 = 0;
    v28 = 0uLL;
    sub_20BE7598C((uint64_t *)(a1 + 160));
    *(_OWORD *)(a1 + 160) = v30;
    *(_QWORD *)(a1 + 176) = v31;
    v31 = 0;
    v30 = 0uLL;
    v32 = (void **)&v30;
    sub_20BDE5038(&v32);
    v32 = (void **)&v28;
    sub_20BDE5038(&v32);
    v32 = (void **)&v26;
    sub_20BDE5038(&v32);
    v32 = (void **)&v24;
    sub_20BDE5038(&v32);
    v32 = (void **)&v22;
    sub_20BDE5038(&v32);
    v32 = (void **)&v20;
    sub_20BDE5038(&v32);
    v32 = (void **)&v18;
    sub_20BDE5038(&v32);
    v32 = (void **)&v17;
    sub_20BDE5038(&v32);
    v32 = (void **)&v16;
    sub_20BDE5038(&v32);
    v32 = (void **)&v15;
    sub_20BDE5038(&v32);
    v32 = (void **)&v14;
    sub_20BDE5038(&v32);
    v32 = (void **)&v13;
    sub_20BDE5038(&v32);
  }
  return a1;
}

void sub_20C18E174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v3;
  void **v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a2);
  sub_20C020EAC((void **)va);
  sub_20C020EAC(v4);
  *v2 = v5 + 16;
  v7 = v2[2];
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18E1D8@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_20BFE5104((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0)
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    else
      a3 = v7;
  }
  sub_20C02F650(a4, a3);
  return sub_20BF4C2D8((uint64_t)&v7);
}

void sub_20C18E280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_20C18E2A0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C18ECF4(a1);
  operator delete(v1);
}

double sub_20C18E2B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  char *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v4 = "List editor is expired";
  }
  else
  {
    v5 = sub_20BFD5244(v3);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5) & 1) != 0)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    v4 = "Permission denied";
  }
  sub_20BDDC0E4(&v7, v4);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

BOOL sub_20C18E338(uint64_t a1, void *lpsrc)
{
  _BYTE *v3;
  _BYTE *v4;
  _QWORD v6[4];
  char v7;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C529A78, (const struct __class_type_info *)&unk_24C529A88, 0);
  v4 = v3;
  if (v3)
  {
    sub_20C18EDC4(a1, v3 + 32, 0);
  }
  else
  {
    v6[0] = "sdf/listOpListEditor.h";
    v6[1] = "CopyEdits";
    v6[2] = 221;
    v6[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfNam"
            "eKeyPolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy from list editor of different type");
  }
  return v4 != 0;
}

uint64_t sub_20C18E3DC(uint64_t a1)
{
  _BYTE v3[8];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v3);
  sub_20C18EDC4(a1, v3, 0);
  v10 = (void **)&v9;
  sub_20BDE5038(&v10);
  v10 = (void **)&v8;
  sub_20BDE5038(&v10);
  v10 = (void **)&v7;
  sub_20BDE5038(&v10);
  v10 = (void **)&v6;
  sub_20BDE5038(&v10);
  v10 = (void **)&v5;
  sub_20BDE5038(&v10);
  v10 = (void **)&v4;
  sub_20BDE5038(&v10);
  return 1;
}

void sub_20C18E480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C020EAC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18E494(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)&v3);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ClearAndMakeExplicit(&v3);
  sub_20C18EDC4(a1, &v3, 0);
  v10 = (void **)&v9;
  sub_20BDE5038(&v10);
  v10 = (void **)&v8;
  sub_20BDE5038(&v10);
  v10 = (void **)&v7;
  sub_20BDE5038(&v10);
  v10 = (void **)&v6;
  sub_20BDE5038(&v10);
  v10 = (void **)&v5;
  sub_20BDE5038(&v10);
  v10 = (void **)&v4;
  sub_20BDE5038(&v10);
  return 1;
}

void sub_20C18E540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C020EAC(&a9);
  _Unwind_Resume(a1);
}

void sub_20C18E554(void **a1, void **a2)
{
  void ***v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13[3];
  void ***v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_20C02F650((uint64_t)&v6, (uint64_t)(a1 + 4));
  v13[0] = (void **)&unk_24C529B38;
  v13[1] = a1;
  v13[2] = a2;
  v14 = v13;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ModifyOperations(&v6, (uint64_t)v13, 1);
  v4 = v14;
  if (v14 == v13)
  {
    v5 = 4;
    v4 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v5 = 5;
LABEL_5:
    ((void (*)(void))(*v4)[v5])();
  }
  sub_20C18EDC4((uint64_t)a1, &v6, 0);
  v13[0] = (void **)&v12;
  sub_20BDE5038(v13);
  v13[0] = (void **)&v11;
  sub_20BDE5038(v13);
  v13[0] = (void **)&v10;
  sub_20BDE5038(v13);
  v13[0] = (void **)&v9;
  sub_20BDE5038(v13);
  v13[0] = (void **)&v8;
  sub_20BDE5038(v13);
  v13[0] = (void **)&v7;
  sub_20BDE5038(v13);
}

void sub_20C18E684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C020EAC(&a9);
  _Unwind_Resume(a1);
}

void sub_20C18E6D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(a1 + 32, a2, a3);
}

uint64_t sub_20C18E6DC(uint64_t a1, int a2, unint64_t a3, uint64_t a4, std::string **a5)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void **v20;

  v19 = a2;
  sub_20C02F650((uint64_t)&v12, a1 + 32);
  v10 = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ReplaceOperations(&v12, a2, a3, a4, a5);
  if ((v10 & 1) != 0)
    sub_20C18EDC4(a1, &v12, &v19);
  v20 = (void **)&v18;
  sub_20BDE5038(&v20);
  v20 = (void **)&v17;
  sub_20BDE5038(&v20);
  v20 = (void **)&v16;
  sub_20BDE5038(&v20);
  v20 = (void **)&v15;
  sub_20BDE5038(&v20);
  v20 = (void **)&v14;
  sub_20BDE5038(&v20);
  v20 = (void **)&v13;
  sub_20BDE5038(&v20);
  return v10;
}

void sub_20C18E7C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C020EAC((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C18E7DC(uint64_t a1, int a2, void *lpsrc)
{
  void *v5;
  void *v6;
  char *v7;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  v14 = a2;
  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C529A78, (const struct __class_type_info *)&unk_24C529A88, 0);
  if (v5)
  {
    v6 = v5;
    sub_20C02F650((uint64_t)&v7, a1 + 32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ComposeOperations((uint64_t *)&v7, (uint64_t)v6 + 32, a2);
    sub_20C18EDC4(a1, &v7, &v14);
    v15 = (void **)&v13;
    sub_20BDE5038(&v15);
    v15 = (void **)&v12;
    sub_20BDE5038(&v15);
    v15 = (void **)&v11;
    sub_20BDE5038(&v15);
    v15 = (void **)&v10;
    sub_20BDE5038(&v15);
    v15 = (void **)&v9;
    sub_20BDE5038(&v15);
    v15 = (void **)v8;
    sub_20BDE5038(&v15);
  }
  else
  {
    v7 = "sdf/listOpListEditor.h";
    v8[0] = "ApplyList";
    v8[1] = 296;
    v8[2] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfNam"
            "eKeyPolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserv"
            "ed__::SdfNameKeyPolicy]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
  }
}

void sub_20C18E908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C020EAC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18E91C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned __int8 *v14;
  unsigned __int8 **j;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v20;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *FieldDefinition;
  uint64_t *v23;
  uint64_t v24;
  void **v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  const char *Text;
  unint64_t v36;
  const char *v37;
  uint64_t *WhyNot;
  const char *v39;
  void *__p[2];
  char v41;
  char v42;
  int v43;
  int v44;
  char *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  char v49;

  v5 = *a3;
  v6 = a3[1];
  v8 = *a4;
  v7 = a4[1];
  v9 = *a3 == v6 || v8 == v7;
  i = *a4;
  if (!v9)
  {
    for (i = *a4; v5 != v6 && i != v7; i += 24)
    {
      v28 = *(unsigned __int8 *)(v5 + 23);
      if ((v28 & 0x80u) == 0)
        v29 = *(unsigned __int8 *)(v5 + 23);
      else
        v29 = *(_QWORD *)(v5 + 8);
      v30 = *(unsigned __int8 *)(i + 23);
      v31 = (char)v30;
      if ((v30 & 0x80u) != 0)
        v30 = *(_QWORD *)(i + 8);
      if (v29 != v30)
        break;
      if (v31 >= 0)
        v32 = (unsigned __int8 *)i;
      else
        v32 = *(unsigned __int8 **)i;
      if ((v28 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v5, v32, *(_QWORD *)(v5 + 8)))
          break;
      }
      else if (*(_BYTE *)(v5 + 23))
      {
        v33 = 0;
        while (*(unsigned __int8 *)(v5 + v33) == v32[v33])
        {
          if (v28 == ++v33)
            goto LABEL_55;
        }
        break;
      }
LABEL_55:
      v5 += 24;
    }
  }
  if (i != v7)
  {
    v11 = i;
    do
    {
      if (v8 != v11)
      {
        v12 = *(unsigned __int8 *)(v11 + 23);
        v13 = *(_QWORD *)(v11 + 8);
        if ((v12 & 0x80u) == 0)
          v14 = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 23);
        else
          v14 = *(unsigned __int8 **)(v11 + 8);
        for (j = (unsigned __int8 **)v8; j != (unsigned __int8 **)v11; j += 3)
        {
          v16 = (unsigned __int8 *)*((unsigned __int8 *)j + 23);
          v17 = (char)v16;
          if ((char)v16 < 0)
            v16 = j[1];
          if (v14 == v16)
          {
            if (v17 >= 0)
              v18 = (unsigned __int8 *)j;
            else
              v18 = *j;
            if ((v12 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v11, v18, v13))
              {
LABEL_34:
                v45 = "sdf/listEditor.h";
                v46 = "_ValidateEdit";
                v47 = 262;
                v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::Sd"
                      "fNameKeyPolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &"
                      ") const [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
                v49 = 0;
                v25 = __p;
                pxrInternal__aapl__pxrReserved__::TfStringify((char *)v11, (uint64_t)__p);
                if (v41 < 0)
                  v25 = (void **)__p[0];
                v26 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
                if (v26)
                {
                  v27 = (const char *)(v26 + 16);
                  if (*(char *)(v26 + 39) < 0)
                    v27 = *(const char **)v27;
                }
                else
                {
                  v27 = "";
                }
                sub_20BFD711C(a1, &v43);
                Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v25, v27, Text);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
                sub_20BFD265C(&v43);
                goto LABEL_60;
              }
            }
            else
            {
              if (!(_DWORD)v12)
                goto LABEL_34;
              v19 = 0;
              while (*(unsigned __int8 *)(v11 + v19) == v18[v19])
              {
                if (v12 == ++v19)
                  goto LABEL_34;
              }
            }
          }
        }
      }
      v11 += 24;
    }
    while (v11 != v7);
  }
  v20 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v20);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (i == v7)
    {
      return 1;
    }
    else
    {
      v23 = FieldDefinition;
      while (1)
      {
        sub_20C02115C(v23, i, __p);
        if (v42)
          break;
        i += 24;
        if (i == v7)
          return 1;
      }
      v45 = "sdf/listEditor.h";
      v46 = "_ValidateEdit";
      v47 = 279;
      v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameKeyPo"
            "licy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy "
            "= pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
      v49 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0)
        v39 = (const char *)WhyNot;
      else
        v39 = (const char *)*WhyNot;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v39);
      if (v42)
      {
LABEL_60:
        if (v41 < 0)
          operator delete(__p[0]);
      }
      return 0;
    }
  }
  else
  {
    v45 = "sdf/listEditor.h";
    v46 = "_ValidateEdit";
    v47 = 273;
    v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameKeyPoli"
          "cy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy = px"
          "rInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    v49 = 0;
    v36 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v36)
    {
      v37 = (const char *)(v36 + 16);
      if (*(char *)(v36 + 39) < 0)
        v37 = *(const char **)v37;
    }
    else
    {
      v37 = "";
    }
    v24 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v37);
  }
  return v24;
}

void sub_20C18ECA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C18ECEC(uint64_t a1, int a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a1 + 32, a2);
}

uint64_t sub_20C18ECF4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24C529A00;
  v6 = (void **)(a1 + 160);
  sub_20BDE5038(&v6);
  v6 = (void **)(a1 + 136);
  sub_20BDE5038(&v6);
  v6 = (void **)(a1 + 112);
  sub_20BDE5038(&v6);
  v6 = (void **)(a1 + 88);
  sub_20BDE5038(&v6);
  v6 = (void **)(a1 + 64);
  sub_20BDE5038(&v6);
  v6 = (void **)(a1 + 40);
  sub_20BDE5038(&v6);
  *(_QWORD *)a1 = &unk_24C529AB0;
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_20C18EDC4(uint64_t a1, _BYTE *a2, _DWORD *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  uint64_t **v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  char v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t Items;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t i;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[8];
  unsigned int *v41[2];
  _OWORD v42[3];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v31 = "sdf/listOpListEditor.h";
    v32 = "_UpdateListOp";
    v33 = 113;
    v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy"
          ">::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    v30 = v6;
    v7 = (uint64_t **)sub_20BFD5244(v6);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v31);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v31);
    v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8);
    v10 = v32;
    if (v32)
    {
      v11 = (unsigned int *)(v32 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
    }
    if ((v9 & 1) != 0)
    {
      v14 = 0;
      v15 = 0;
      v42[0] = xmmword_20CABC628;
      v42[1] = unk_20CABC638;
      v42[2] = xmmword_20CABC648;
      v16 = (char *)v42;
      while (2)
      {
        v17 = v15;
        v18 = (unsigned int *)v16;
        ++v15;
        v16 = (char *)v42 + 8 * v17 + 8;
        while (1)
        {
          v19 = *v18;
          if (!a3 || *a3 == (_DWORD)v19)
          {
            v20 = sub_20C18F1C0(v19, (uint64_t)a2, a1 + 32);
            *(v16 - 4) = v20;
            if (v20)
              break;
          }
          ++v17;
          v18 = (unsigned int *)v42 + 2 * v17;
          ++v15;
          v16 += 8;
          if (v15 == 7)
          {
            if ((v14 & 1) == 0 && (*a2 != 0) == (*(_BYTE *)(a1 + 32) != 0))
              return;
            goto LABEL_22;
          }
        }
        Items = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a1 + 32, v19);
        v22 = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems((uint64_t)a2, v19);
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, v19, Items, v22) & 1) == 0)return;
        v14 = 1;
        if (v15 != 6)
          continue;
        break;
      }
LABEL_22:
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
      sub_20C02F650((uint64_t)&v31, (uint64_t)a2);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Swap((char *)(a1 + 32), (char *)&v31);
      if (pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::HasKeys((uint64_t)a2))
      {
        v23 = sub_20BFD5244(v30);
        v41[1] = (unsigned int *)&off_24C5266D8;
        sub_20C02FE24(v41, (uint64_t)a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        sub_20BF4C2D8((uint64_t)v41);
      }
      else
      {
        v24 = sub_20BFD5244(v30);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
      }
      for (i = 0; i != 48; i += 8)
      {
        v26 = (int *)((char *)v42 + i);
        if (*((_BYTE *)v42 + i + 4))
        {
          v27 = *v26;
          v28 = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems((uint64_t)&v31, *v26);
          v29 = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems((uint64_t)a2, v27);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v27, v28, v29);
        }
      }
      v41[0] = (unsigned int *)&v39;
      sub_20BDE5038((void ***)v41);
      v41[0] = (unsigned int *)&v38;
      sub_20BDE5038((void ***)v41);
      v41[0] = (unsigned int *)&v37;
      sub_20BDE5038((void ***)v41);
      v41[0] = (unsigned int *)&v36;
      sub_20BDE5038((void ***)v41);
      v41[0] = (unsigned int *)&v35;
      sub_20BDE5038((void ***)v41);
      v41[0] = (unsigned int *)&v32;
      sub_20BDE5038((void ***)v41);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
    }
    else
    {
      v31 = "sdf/listOpListEditor.h";
      v32 = "_UpdateListOp";
      v33 = 118;
      v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfNameKeyPoli"
            "cy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__"
            "::SdfNameKeyPolicy]";
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_20C18F168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  sub_20BF4C2D8(v30 - 160);
  sub_20C020EAC(&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18F1C0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t Items;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  char v12;

  Items = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a2, a1);
  v6 = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(a3, a1);
  v7 = *(unsigned __int8 **)Items;
  v8 = *(unsigned __int8 **)(Items + 8);
  v9 = *(unsigned __int8 **)v6;
  if (&v8[-*(_QWORD *)Items] == (unsigned __int8 *)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6))
  {
    if (v7 == v8)
    {
      v10 = 1;
    }
    else
    {
      do
      {
        v10 = sub_20BEB4EF8((uint64_t)&v12, v7, v9);
        if (!v10)
          break;
        v7 += 24;
        v9 += 24;
      }
      while (v7 != v8);
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 ^ 1u;
}

__n128 sub_20C18F26C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C529B38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C18F2A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C529B38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C18F2CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20C18F324(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20C18F2DC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C529B98))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C18F318()
{
  return &unk_24C529B98;
}

void sub_20C18F324(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *__p[2];
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_20BE9E974();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(__p, v3, a2);
  if (v7)
  {
    if (SHIBYTE(v6) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 16) = v6;
    }
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    sub_20C0210BC(a3, (__int128 *)__p);
  }
  if (v7)
  {
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
}

void sub_20C18F3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C18F3F0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C18F404(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C18F41C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C529BF8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C18F45C(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v7;
  __int128 v8;

  v7 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children(a1, a2)+ 80;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(_DWORD *)(a1 + 104) = a4;
  return a1;
}

void sub_20C18F4BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE6D38(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C18F4D0(uint64_t a1)
{
  uint64_t result;

  result = sub_20C18F514(a1, 4);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Erase(a1);
  return result;
}

BOOL sub_20C18F514(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v5;
  char v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  const char *v10;
  const char *v11;
  _QWORD v12[4];
  char v13;

  result = sub_20BFE6C04(a1);
  if (result)
  {
    v5 = *(_DWORD *)(a1 + 104);
    if ((a2 & ~v5) != 0)
    {
      v6 = a2 & ~(_BYTE)v5;
      v7 = "insert";
      v8 = "remove";
      if ((v6 & 4) == 0)
        v8 = "edit";
      if ((v6 & 2) == 0)
        v7 = v8;
      v9 = (v6 & 1) == 0;
      v12[0] = "sdf/childrenProxy.h";
      v12[1] = "_Validate";
      v12[2] = 460;
      v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrInternal__aapl__pxrReserved__::SdfChildrenView"
               "<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>::_Validate(int) [_View = pxrInternal__aapl"
               "__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>]";
      v13 = 0;
      v10 = "replace";
      if (v9)
        v10 = v7;
      v11 = (const char *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0)
        v11 = *(const char **)v11;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s %s", v10, v11);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

_QWORD *sub_20C18F5E8(_QWORD *a1, unsigned int **a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<std::map<std::string,std::string>>(a2, a3, &v7);
  v4 = v7;
  *a1 = v7;
  if (v4)
  {
    v5 = operator new(0x20uLL);
    *v5 = &unk_24C529C18;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = v5;
  return a1;
}

void sub_20C18F654(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20C18F678(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C18F68C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C18F6A4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C529C58))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C18F6E4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  v4[2] = 761;
  v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_Validate() [T = s"
          "td::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyVal"
          "uePolicy<std::map<std::string, std::string>>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing an invalid map proxy");
  return 0;
}

uint64_t sub_20C18F780(uint64_t *a1)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t v4;
  void **v5;
  void *__p[2];
  uint64_t v8;
  _QWORD v9[4];
  char v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v11;

  v2 = *a1;
  if (v2)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)v2 + 24))(&v11);
  else
    v11 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11) & 1) != 0
    || (v3 = sub_20BFD5244(&v11), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v9[0] = "sdf/mapEditProxy.h";
    v9[1] = "_ValidateErase";
    v9[2] = 1019;
    v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateErase(c"
            "onst key_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::S"
            "dfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
    v10 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(__p);
      if (v8 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v5 = __p;
      v8 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't erase value from %s: Permission denied.", (const char *)v5);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return v4;
}

void sub_20C18F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v15 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C18F8B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  result = sub_20C18F6E4(a1);
  if (!(_DWORD)result)
    goto LABEL_9;
  if (*a1)
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 24))(&v10);
  else
    v10 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  result = sub_20C18F974(a1, a2);
  if ((_DWORD)result)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 72))(*a1, a2);
    v9 = v8;
    result = *a1;
    if (*a1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = v7;
    *(_BYTE *)(a3 + 24) = v9;
  }
  else
  {
LABEL_9:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

BOOL sub_20C18F974(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  char v6;
  void **v7;
  _BOOL8 v8;
  char v9;
  void **v10;
  void **v11;
  uint64_t *WhyNot;
  void **p_p;
  const char *v14;
  uint64_t *v16;
  void **v17;
  const char *v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  char v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v30;

  v4 = *a1;
  if (v4)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)v4 + 24))(&v30);
  else
    v30 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v30) & 1) == 0)
  {
    v5 = sub_20BFD5244(&v30);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5) & 1) == 0)
    {
      v25 = "sdf/mapEditProxy.h";
      v26 = "_ValidateInsert";
      v27 = 980;
      v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateInsert("
            "const value_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__"
            "::SdfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
      v29 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(v22);
        if (v23 >= 0)
          v11 = v22;
        else
          v11 = (void **)v22[0];
      }
      else
      {
        v22[0] = 0;
        v22[1] = 0;
        v11 = v22;
        v23 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: Permission denied.", (const char *)v11);
LABEL_28:
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
LABEL_30:
      v8 = 0;
      goto LABEL_31;
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 88))(v22, *a1, a2);
  if (v24)
  {
    v25 = "sdf/mapEditProxy.h";
    v26 = "_ValidateInsert";
    v27 = 990;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateInsert(co"
          "nst value_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::Sd"
          "fIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
    v29 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(&__p);
      v6 = HIBYTE(v21);
      v7 = (void **)__p;
    }
    else
    {
      v7 = 0;
      v6 = 0;
      __p = 0;
      v20 = 0;
      v21 = 0;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v22);
    p_p = &__p;
    if (v6 < 0)
      p_p = v7;
    if (*((char *)WhyNot + 23) >= 0)
      v14 = (const char *)WhyNot;
    else
      v14 = (const char *)*WhyNot;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert key in %s: %s", (const char *)p_p, v14);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    if (!v24)
      goto LABEL_30;
    goto LABEL_28;
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 96))(v22, *a1, a2 + 24);
  v8 = v24 == 0;
  if (v24)
  {
    v25 = "sdf/mapEditProxy.h";
    v26 = "_ValidateInsert";
    v27 = 1000;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateInsert(co"
          "nst value_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::Sd"
          "fIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
    v29 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(&__p);
      v9 = HIBYTE(v21);
      v10 = (void **)__p;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      __p = 0;
      v20 = 0;
      v21 = 0;
    }
    v16 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v22);
    v17 = &__p;
    if (v9 < 0)
      v17 = v10;
    if (*((char *)v16 + 23) >= 0)
      v18 = (const char *)v16;
    else
      v18 = (const char *)*v16;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: %s", (const char *)v17, v18);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    if (v24 && SHIBYTE(v23) < 0)
      operator delete(v22[0]);
  }
LABEL_31:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v30);
  return v8;
}

void sub_20C18FC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (a24)
  {
    if (a23 < 0)
      operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_20C18FCAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *(uint64_t **)a1;
  v4 = *(uint64_t **)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
    return 1;
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *v3;
    if (*v3)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    if (v5 != v6 + 8)
      return 0;
    v4 = *(uint64_t **)a2;
  }
  if (!v4)
    return 1;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *v4;
  if (*v4)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  return v8 == v9 + 8;
}

uint64_t sub_20C18FD4C(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = sub_20C18F6E4(a1);
  if ((_DWORD)result)
  {
    if (*a1)
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 24))(&v8);
    else
      v8 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
    result = sub_20C18FDE4(a1, *a3 + 32, a4);
    if ((_DWORD)result)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, *a3 + 32, a4);
  }
  return result;
}

BOOL sub_20C18FDE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  _BOOL8 v7;
  char v8;
  void **v9;
  void **v10;
  uint64_t *WhyNot;
  void **v12;
  const char *v13;
  void *__p[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v25;

  v5 = *a1;
  if (v5)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)v5 + 24))(&v25);
  else
    v25 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v25) & 1) != 0
    || (v6 = sub_20BFD5244(&v25), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v6) & 1) != 0))
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 96))(v17, *a1, a3);
    v7 = v19 == 0;
    if (v19)
    {
      v20 = "sdf/mapEditProxy.h";
      v21 = "_ValidateSet";
      v22 = 952;
      v23 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateSet(con"
            "st key_type &, const mapped_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aap"
            "l__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
      v24 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(__p);
        v8 = HIBYTE(v16);
        v9 = (void **)__p[0];
      }
      else
      {
        v9 = 0;
        v8 = 0;
        __p[0] = 0;
        __p[1] = 0;
        v16 = 0;
      }
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v17);
      v12 = __p;
      if (v8 < 0)
        v12 = v9;
      if (*((char *)WhyNot + 23) >= 0)
        v13 = (const char *)WhyNot;
      else
        v13 = (const char *)*WhyNot;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value in %s: %s", (const char *)v12, v13);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      if (v19 && SHIBYTE(v18) < 0)
        operator delete(v17[0]);
    }
  }
  else
  {
    v20 = "sdf/mapEditProxy.h";
    v21 = "_ValidateSet";
    v22 = 942;
    v23 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateSet(const"
          " key_type &, const mapped_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__p"
          "xrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
    v24 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(v17);
      if (v18 >= 0)
        v10 = v17;
      else
        v10 = (void **)v17[0];
    }
    else
    {
      v17[0] = 0;
      v17[1] = 0;
      v10 = v17;
      v18 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value in %s: Permission denied.", (const char *)v10);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
  return v7;
}

void sub_20C18FFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C190038(_QWORD *a1, unsigned int **a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(a2, a3, &v7);
  v4 = v7;
  *a1 = v7;
  if (v4)
  {
    v5 = operator new(0x20uLL);
    *v5 = &unk_24C529C78;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = v5;
  return a1;
}

void sub_20C1900A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20C1900C8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C1900DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C1900F4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C529CB8))
    return a1 + 24;
  else
    return 0;
}

void sub_20C190134(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  _DWORD *v6;
  char v7;
  char v8;
  void **v9;
  void **v10;
  const char *p_p;
  void *__p;
  char v13;
  void *v14[2];
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16[4];
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25[2];

  if (sub_20C1903C4(a1))
  {
    v25[0] = 0;
    v25[1] = 0;
    v22 = (_QWORD *)*a2;
    v23 = a2 + 1;
    v24 = (uint64_t *)v25;
    while (v22 != v23)
    {
      if (*a1)
        (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)*a1 + 24))(v16);
      else
        v16[0] = 0;
      v6 = (_DWORD *)sub_20C190460(&v22, v4, v5);
      pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizePair(v16, v6, &v18);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
      sub_20C132FB4(&v24, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, &v18);
      if ((v7 & 1) == 0)
      {
        v16[0] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)"sdf/mapEditProxy.h";
        v16[1] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)"_Copy";
        v16[2] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)892;
        v16[3] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)"void pxrInternal__aapl__pxrReserved__::SdfMapEditProx"
                                                                   "y<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,"
                                                                   " pxrInternal__aapl__pxrReserved__::SdfPath>, pxrInter"
                                                                   "nal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePo"
                                                                   "licy>::_Copy(const Type &) [T = std::map<pxrInternal_"
                                                                   "_aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxr"
                                                                   "Reserved__::SdfPath>, _ValuePolicy = pxrInternal__aap"
                                                                   "l__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
        v17 = 0;
        if (*a1)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(v14);
          v8 = HIBYTE(v15);
          v9 = (void **)v14[0];
        }
        else
        {
          v9 = 0;
          v8 = 0;
          v14[0] = 0;
          v14[1] = 0;
          v15 = 0;
        }
        sub_20BFD8C8C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
        v10 = v14;
        if (v8 < 0)
          v10 = v9;
        if (v13 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't copy to %s: Duplicate key '%s' exists in map.", (const char *)v10, p_p);
        if (v13 < 0)
          operator delete(__p);
        if (SHIBYTE(v15) < 0)
          operator delete(v14[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
        sub_20BFD265C(&v20);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_20BFD265C(&v18);
        goto LABEL_24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_20BFD265C(&v18);
      sub_20BFEB78C(&v22);
    }
    if (sub_20C19051C(a1, (uint64_t)&v24))
      (*(void (**)(_QWORD, uint64_t **))(*(_QWORD *)*a1 + 56))(*a1, &v24);
LABEL_24:
    sub_20BFE4CE8((uint64_t)&v24, v25[0]);
  }
}

void sub_20C190340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  uint64_t v28;

  sub_20C1904DC(&a28);
  sub_20BFE4CE8(v28 - 72, *(_QWORD **)(v28 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20C1903C4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  v4[2] = 761;
  v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "Validate() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>"
          ", _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing an invalid map proxy");
  return 0;
}

uint64_t sub_20C190460(_QWORD *a1, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;

  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath, pxrInternal__aapl__pxrReserved__::SdfPath>>::operator*() [T = const std::map<pxrInternal__aapl__pxrRese"
            "rved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 28;
}

void sub_20C1904D4()
{
  JUMPOUT(0x20C19047CLL);
}

_DWORD *sub_20C1904DC(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

BOOL sub_20C19051C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  _BOOL8 v8;
  uint64_t v9;
  void **v10;
  void *__p[2];
  uint64_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v19;

  v4 = *a1;
  if (v4)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)v4 + 24))(&v19);
  else
    v19 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v19) & 1) != 0
    || (v7 = sub_20BFD5244(&v19), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v7) & 1) != 0))
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v14 = *(char **)a2;
      v15 = (const char *)(a2 + 8);
      while (1)
      {
        v8 = v14 == v15;
        if (v14 == v15)
          break;
        v9 = sub_20C190460(&v14, v5, v6);
        if (!sub_20C19069C(a1, v9))
          break;
        sub_20BFEB78C(&v14);
      }
    }
    else
    {
      v8 = 1;
    }
  }
  else
  {
    v14 = "sdf/mapEditProxy.h";
    v15 = "_ValidateCopy";
    v16 = 908;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "ValidateCopy(const Type &) [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrRese"
          "rved__::SdfPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
    v18 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(__p);
      if (v13 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v10 = __p;
      v13 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't copy to %s: Permission denied.", (const char *)v10);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    v8 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v19);
  return v8;
}

void sub_20C190668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v15 - 24));
  _Unwind_Resume(a1);
}

BOOL sub_20C19069C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  char v6;
  void **v7;
  _BOOL8 v8;
  char v9;
  void **v10;
  void **v11;
  uint64_t *WhyNot;
  void **p_p;
  const char *v14;
  uint64_t *v16;
  void **v17;
  const char *v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  char v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v30;

  v4 = *a1;
  if (v4)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(_QWORD *)v4 + 24))(&v30);
  else
    v30 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v30) & 1) == 0)
  {
    v5 = sub_20BFD5244(&v30);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5) & 1) == 0)
    {
      v25 = "sdf/mapEditProxy.h";
      v26 = "_ValidateInsert";
      v27 = 980;
      v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, p"
            "xrInternal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy"
            ">::_ValidateInsert(const value_type &) [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal_"
            "_aapl__pxrReserved__::SdfPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
      v29 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(v22);
        if (v23 >= 0)
          v11 = v22;
        else
          v11 = (void **)v22[0];
      }
      else
      {
        v22[0] = 0;
        v22[1] = 0;
        v11 = v22;
        v23 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: Permission denied.", (const char *)v11);
LABEL_28:
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
LABEL_30:
      v8 = 0;
      goto LABEL_31;
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 88))(v22, *a1, a2);
  if (v24)
  {
    v25 = "sdf/mapEditProxy.h";
    v26 = "_ValidateInsert";
    v27 = 990;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "ValidateInsert(const value_type &) [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl_"
          "_pxrReserved__::SdfPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
    v29 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(&__p);
      v6 = HIBYTE(v21);
      v7 = (void **)__p;
    }
    else
    {
      v7 = 0;
      v6 = 0;
      __p = 0;
      v20 = 0;
      v21 = 0;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v22);
    p_p = &__p;
    if (v6 < 0)
      p_p = v7;
    if (*((char *)WhyNot + 23) >= 0)
      v14 = (const char *)WhyNot;
    else
      v14 = (const char *)*WhyNot;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert key in %s: %s", (const char *)p_p, v14);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    if (!v24)
      goto LABEL_30;
    goto LABEL_28;
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 96))(v22, *a1, a2 + 8);
  v8 = v24 == 0;
  if (v24)
  {
    v25 = "sdf/mapEditProxy.h";
    v26 = "_ValidateInsert";
    v27 = 1000;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "ValidateInsert(const value_type &) [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl_"
          "_pxrReserved__::SdfPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
    v29 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(&__p);
      v9 = HIBYTE(v21);
      v10 = (void **)__p;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      __p = 0;
      v20 = 0;
      v21 = 0;
    }
    v16 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v22);
    v17 = &__p;
    if (v9 < 0)
      v17 = v10;
    if (*((char *)v16 + 23) >= 0)
      v18 = (const char *)v16;
    else
      v18 = (const char *)*v16;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: %s", (const char *)v17, v18);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    if (v24 && SHIBYTE(v23) < 0)
      operator delete(v22[0]);
  }
LABEL_31:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v30);
  return v8;
}

void sub_20C19096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (a24)
  {
    if (a23 < 0)
      operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20C1909D4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDDF6A8(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[8 * v4];
  v16 = &v10[8 * v9];
  sub_20BFD38A4(v14, a2);
  sub_20BFD38DC((_DWORD *)v14 + 1, a2 + 1);
  v15 = v14 + 8;
  sub_20BFD797C(a1, &v13);
  v11 = a1[1];
  sub_20BFD7B28(&v13);
  return v11;
}

void sub_20C190AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD7B28((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C190AC4()
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  uint64_t *Name;
  int v3;
  int v4;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v3);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  sub_20BFD265C(&v3);
  return Name;
}

void sub_20C190B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v8;
  int v9;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v8);
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  v4 = *(unsigned int **)NameToken;
  *a2 = *(unsigned int **)NameToken;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C190BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::CanSetName(uint64_t **a1, uint64_t a2, std::string *a3)
{
  int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  std::string __str;
  unsigned __int8 v11;

  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanRename(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (uint64_t)&__str);
  if (a3 && v11)
    std::string::operator=(a3, &__str);
  v5 = v11;
  if (v11 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((v9 & 7) != 0)
  {
    v6 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return v5 == 0;
}

void sub_20C190C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  unsigned int *v18;
  unsigned int v19;

  if (a17 && a16 < 0)
    operator delete(__p);
  if ((a10 & 7) != 0)
  {
    v18 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetName(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v5);
  result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Rename(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  if ((v5 & 7) != 0)
  {
    v3 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetOwner@<X0>(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_20BFD265C(&v10);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v10);
    sub_20BFD3EBC(&v12, (int *)&v10);
    sub_20BFD3F10(&v13, (int *)&v10 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_20BFD265C(&v10);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v10);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v10);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, a2);
  v5 = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_20BFD265C(&v12);
}

void sub_20C190E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDisplayGroup@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 104), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 104));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C190FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDisplayGroup(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C18D080(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 104), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDisplayName@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 120), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 120));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C191150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDisplayName(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C18D080(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 120), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 136));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C1912E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDocumentation(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C18D080(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetHidden(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned __int8 *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned __int8 *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 176));
    v3 = (unsigned __int8 *)sub_20BFB0910(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C191430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetHidden(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  char v5;

  v5 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0A9030(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 176), &v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPrefix@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 256), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 256));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C1915CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetPrefix(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C18D080(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 256), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSuffix@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 376), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 376));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C19175C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetSuffix(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C18D080(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 376), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetricPeer@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 392), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 392));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C1918EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetSymmetricPeer(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C18D080(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 392), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryFunction@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  unsigned int **v12;
  unsigned int *v13;
  char v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 416), (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v16 && (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v15) & 1) != 0)
  {
    v5 = (unsigned int **)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    v6 = *v5;
    *a2 = *v5;
    if ((v6 & 7) == 0)
      return sub_20BF4C2D8((uint64_t)v15);
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    goto LABEL_14;
  }
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 416));
  v12 = (unsigned int **)sub_20BFB46E8(Fallback);
  v13 = *v12;
  *a2 = *v12;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
LABEL_14:
    if ((v8 & 1) == 0)
      *a2 = v7;
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C191A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetSymmetryFunction(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0A90C0(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 416), (uint64_t *)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned int *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 248), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20C188D88((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned int *)sub_20C188E00((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 248));
    v3 = (unsigned int *)sub_20C188E00(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C191BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetPermission(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  int v5;

  v5 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C18D204(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 248), &v5);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetCustomData(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  unsigned int *v4;

  sub_20C188F60(this, &v4);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(a2, &v4, (uint64_t *)v3 + 9);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C191CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetCustomData(unsigned int **a1, __int128 *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int *v9[4];
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_20C188F60(a1, v9);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(&v10, v9, (uint64_t *)v5 + 9);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v9);
  if (*(_QWORD *)(a3 + 8))
  {
    sub_20C18916C(&v10, a2, (uint64_t)v9);
    sub_20C189284((uint64_t)v9, a3);
  }
  else
  {
    sub_20C1890E4(&v10, (uint64_t)a2);
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C191DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryArguments(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  unsigned int *v4;

  sub_20C188F60(this, &v4);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(a2, &v4, (uint64_t *)v3 + 51);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C191E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetSymmetryArgument(unsigned int **a1, __int128 *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int *v9[4];
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_20C188F60(a1, v9);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(&v10, v9, (uint64_t *)v5 + 51);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v9);
  if (*(_QWORD *)(a3 + 8))
  {
    sub_20C18916C(&v10, a2, (uint64_t)v9);
    sub_20C189284((uint64_t)v9, a3);
  }
  else
  {
    sub_20C1890E4(&v10, (uint64_t)a2);
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C191F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetAssetInfo(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  unsigned int *v4;

  sub_20C188F60(this, &v4);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(a2, &v4, (uint64_t *)v3 + 2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C191FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetAssetInfo(unsigned int **a1, __int128 *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int *v9[4];
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_20C188F60(a1, v9);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C18D458(&v10, v9, (uint64_t *)v5 + 2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v9);
  if (*(_QWORD *)(a3 + 8))
  {
    sub_20C18916C(&v10, a2, (uint64_t)v9);
    sub_20C189284((uint64_t)v9, a3);
  }
  else
  {
    sub_20C1890E4(&v10, (uint64_t)a2);
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C19208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  _QWORD *Fallback;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v9[1])
  {
    sub_20BF4C6D0(a2, v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 88));
    sub_20BF4C6D0(a2, Fallback);
  }
  return sub_20BF4C2D8((uint64_t)v9);
}

void sub_20C19219C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPropertySpec::HasDefaultValue(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 88));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::ClearDefaultValue(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 88));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned __int8 *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 64), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned __int8 *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 64));
    v3 = (unsigned __int8 *)sub_20BFB0910(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C192328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetCustom(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  char v5;

  v5 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0A9030(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 64), &v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v5 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_20BDDBFAC((_BYTE *)a2, *(void **)v5, *(_QWORD *)(v5 + 8));
      return sub_20BF4C2D8((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 48));
    v5 = sub_20BFB2D9C(Fallback);
    if (*(char *)(v5 + 23) < 0)
      goto LABEL_11;
  }
  v9 = *(_OWORD *)v5;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C1924C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetComment(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C18D080(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned int *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 464), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20C030CF4((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned int *)sub_20C02569C((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 464));
    v3 = (unsigned int *)sub_20C02569C(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C192614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  unsigned __int8 v4;
  unint64_t Typeid;
  const std::type_info *v6;
  char *v7;
  uint64_t Type;
  const char *v9;
  uint64_t v10;
  void **v11;
  const char *v12;
  _BOOL8 v13;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v14;
  void **v16;
  unint64_t v17;
  const char *v18;
  const char *Text;
  unint64_t v20;
  const char *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  const pxrInternal__aapl__pxrReserved__::VtValue *v23;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v24;
  unsigned int *v25;
  unsigned int v26;
  void **v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  const std::type_info *v32;
  char *v33;
  uint64_t v34;
  void *__p[2];
  char v36;
  uint64_t TypeName;
  void **v38;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *ValueType;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v40;
  unint64_t v41;
  uint64_t v42;
  const char *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a2 + 1))
  {
    v3 = a2;
    ValueType = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetValueType(this);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v40);
    if (ValueType == v40)
    {
      if (!sub_20C0AA3E8(v3))
      {
        v40 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)"sdf/propertySpec.cpp";
        v41 = (unint64_t)"SetDefaultValue";
        v42 = 180;
        v43 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(const VtValue &)";
        v44 = 0;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, __p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        TypeName = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(this);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v38);
        v20 = (unint64_t)v38 & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v21 = (const char *)(v20 + 16);
          if (*(char *)(v20 + 39) < 0)
            v21 = *(const char **)v21;
        }
        else
        {
          v21 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on attribute <%s> with unknown type \"%s\"", Text, v21);
        if ((v38 & 7) != 0)
        {
          v28 = (unsigned int *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        v27 = __p;
        goto LABEL_53;
      }
      v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v14)
        v14 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      return pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 88), v3);
    }
    else
    {
      v4 = atomic_load((unsigned __int8 *)&qword_254987DB8);
      if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254987DB8))
      {
        qword_254987DB0 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D80, v32, v33);
        __cxa_guard_release(&qword_254987DB8);
      }
      if (ValueType == (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)qword_254987DB0)
      {
        v40 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)"sdf/propertySpec.cpp";
        v41 = (unint64_t)"SetDefaultValue";
        v42 = 188;
        v43 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(const VtValue &)";
        v44 = 0;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v38);
        v16 = __p;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38, (uint64_t)__p);
        if (v36 < 0)
          v16 = (void **)__p[0];
        v34 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(this);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v34, (unsigned int **)&TypeName);
        v17 = TypeName & 0xFFFFFFFFFFFFFFF8;
        if ((TypeName & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v18 = (const char *)(v17 + 16);
          if (*(char *)(v17 + 39) < 0)
            v18 = *(const char **)v18;
        }
        else
        {
          v18 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on <%s>: %s-typed attributes cannot have an authored default value", (const char *)v16, v18);
        if ((TypeName & 7) != 0)
        {
          v25 = (unsigned int *)(TypeName & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        if (v36 < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
        goto LABEL_47;
      }
      Typeid = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&ValueType);
      if (!sub_20BDE150C(Typeid, MEMORY[0x24BEDB7C8])
        && !pxrInternal__aapl__pxrReserved__::TfType::IsEnumType((pxrInternal__aapl__pxrReserved__::TfType *)&ValueType, (uint64_t)v6, v7))
      {
        v23 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&ValueType);
        pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(v3, v23, &v40);
        if (v41)
        {
          if (sub_20BFEFCF0((pxrInternal__aapl__pxrReserved__::VtValue *)&v40)
            && ((v41 & 4) != 0
              ? (v24 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPathExpression **))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(&v40))
              : (v24 = v40),
                !pxrInternal__aapl__pxrReserved__::SdfPathExpression::IsAbsolute(v24)))
          {
            __p[0] = this;
            sub_20C192F5C((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::SdfSpec **)__p);
          }
          else if (sub_20BFEFDCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v40))
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v38);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38, __p);
            sub_20BFD1A18(&v38);
            v38 = __p;
            sub_20C193238(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v38);
            sub_20BFD1A18(__p);
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v31)
            v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v40;
        }
        else
        {
          if (!sub_20C0AA3E8(v3))
          {
            sub_20BF4C2D8((uint64_t)&v40);
            goto LABEL_8;
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v31)
            v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        v13 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v31 + 88), v3);
        sub_20BF4C2D8((uint64_t)&v40);
        return v13;
      }
      Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v3, v6, v7);
      if (ValueType != (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)Type)
      {
LABEL_8:
        v40 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)"sdf/propertySpec.cpp";
        v41 = (unint64_t)"SetDefaultValue";
        v42 = 249;
        v43 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(const VtValue &)";
        v44 = 0;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v38);
        v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
        sub_20BF834B0((uint64_t)v3);
        v10 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&ValueType);
        v11 = __p;
        if (v36 < 0)
          v11 = (void **)__p[0];
        if (*(char *)(v10 + 23) >= 0)
          v12 = (const char *)v10;
        else
          v12 = *(const char **)v10;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on <%s> to %s: expected a value of type \"%s\"", v9, (const char *)v11, v12);
        if (v36 < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
LABEL_47:
        v27 = (void **)&v38;
LABEL_53:
        sub_20BFD265C(v27);
        return 0;
      }
      v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22)
        v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      return pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v22 + 88), v3);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::ClearDefaultValue(this);
    return 1;
  }
}

void sub_20C192B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  __cxa_guard_abort(&qword_254987DB8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetValueType(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int SpecType;
  unint64_t ***Schema;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 v6;
  const char *Text;
  const std::type_info *v9;
  char *v10;
  _QWORD v11[4];
  char v12;
  unint64_t v13;
  uint64_t v14;

  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (SpecType == 8)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254987DC8);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254987DC8))
    {
      qword_254987DC0 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524BC8, v9, v10);
      __cxa_guard_release(&qword_254987DC8);
    }
    return qword_254987DC0;
  }
  else if (SpecType == 1)
  {
    Schema = (unint64_t ***)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    sub_20C193558(this, (unsigned int **)&v13);
    v11[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13);
    v14 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v11);
    if ((v13 & 7) != 0)
    {
      v4 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else
  {
    v11[0] = "sdf/propertySpec.cpp";
    v11[1] = "GetValueType";
    v11[2] = 279;
    v11[3] = "TfType pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetValueType() const";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v13);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Unrecognized subclass of SdfPropertySpec on <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
    sub_20BFD265C(&v13);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v14);
  }
  return v14;
}

void sub_20C192DD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254987DC8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int SpecType;
  tbb::spin_rw_mutex_v3 ***Schema;
  unsigned int *v4;
  unsigned int v5;
  const char *Text;
  int v8;
  int v9;
  unsigned int *v10[4];
  char v11;
  uint64_t Type;

  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (SpecType == 8)
    goto LABEL_8;
  if (SpecType != 1)
  {
    v10[0] = (unsigned int *)"sdf/propertySpec.cpp";
    v10[1] = (unsigned int *)"GetTypeName";
    v10[2] = (unsigned int *)297;
    v10[3] = (unsigned int *)"SdfValueTypeName pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName() const";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v8);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Unrecognized subclass of SdfPropertySpec on <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_20BFD265C(&v8);
LABEL_8:
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
    return Type;
  }
  Schema = (tbb::spin_rw_mutex_v3 ***)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  sub_20C193558(this, v10);
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindOrCreateType(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)v10);
  if (((uint64_t)v10[0] & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v10[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return Type;
}

void sub_20C192F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a11 & 7) != 0)
  {
    v11 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

void sub_20C192F5C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfSpec **a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  void **v7;
  __int128 v8;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void **v29;

  v3 = sub_20C1938C4(a1);
  *(_OWORD *)__p = *(_OWORD *)v3;
  v10 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  v4 = *(_OWORD *)(v3 + 24);
  *(_QWORD *)v3 = 0;
  v11 = v4;
  v12 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  v13 = *(_OWORD *)(v3 + 48);
  v14 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  v5 = *(_OWORD *)(v3 + 72);
  v16 = *(_QWORD *)(v3 + 88);
  *(_OWORD *)v15 = v5;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(*a2, &v17);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, &v19);
  sub_20C193954((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (uint64_t)v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = *(_OWORD *)v21;
  v10 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  sub_20C00BC18((void **)&v11);
  v11 = v23;
  v12 = v24;
  v24 = 0;
  v23 = 0uLL;
  sub_20C00BCC0((void **)&v13);
  v13 = v25;
  v14 = v26;
  v26 = 0;
  v25 = 0uLL;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  *(_OWORD *)v15 = v27;
  v16 = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  v29 = (void **)&v25;
  sub_20C00E25C(&v29);
  v29 = (void **)&v23;
  sub_20C00D5A8(&v29);
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  v6 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v6;
    operator delete(v6);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  v7 = (void **)(v3 + 72);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 16) = v10;
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  sub_20C00BC18((void **)(v3 + 24));
  *(_OWORD *)(v3 + 24) = v11;
  *(_QWORD *)(v3 + 40) = v12;
  v11 = 0uLL;
  v12 = 0;
  sub_20C00BCC0((void **)(v3 + 48));
  *(_OWORD *)(v3 + 48) = v13;
  *(_QWORD *)(v3 + 64) = v14;
  v13 = 0uLL;
  v14 = 0;
  if (*(char *)(v3 + 95) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)v15;
  *(_QWORD *)(v3 + 88) = v16;
  *(_OWORD *)v7 = v8;
  HIBYTE(v16) = 0;
  LOBYTE(v15[0]) = 0;
  v21[0] = &v13;
  sub_20C00E25C((void ***)v21);
  v21[0] = &v11;
  sub_20C00D5A8((void ***)v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20C193204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,int a23)
{
  sub_20BFD1A18(&a23);
  sub_20BFD1A18(&a21);
  sub_20C00BBB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C193238(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t i;
  void *v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void **v26;

  v3 = sub_20C1939F0(a1);
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  v17 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15, v5, v6);
  v7 = v17;
  sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15, v8, v9);
  for (i = v17 + 96 * v15; v7 != i; v7 += 96)
  {
    sub_20C193954(v7, *a2, (uint64_t)__p);
    v11 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(v7 + 8) = v11;
      operator delete(v11);
    }
    *(_OWORD *)v7 = *(_OWORD *)__p;
    *(_QWORD *)(v7 + 16) = v19;
    __p[0] = 0;
    __p[1] = 0;
    v19 = 0;
    sub_20C00BC18((void **)(v7 + 24));
    *(_OWORD *)(v7 + 24) = v20;
    *(_QWORD *)(v7 + 40) = v21;
    v20 = 0uLL;
    v21 = 0;
    sub_20C00BCC0((void **)(v7 + 48));
    *(_OWORD *)(v7 + 48) = v22;
    *(_QWORD *)(v7 + 64) = v23;
    v22 = 0uLL;
    v23 = 0;
    v12 = (void **)(v7 + 72);
    if (*(char *)(v7 + 95) < 0)
      operator delete(*v12);
    v13 = v24;
    *(_QWORD *)(v7 + 88) = v25;
    *(_OWORD *)v12 = v13;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    v26 = (void **)&v22;
    sub_20C00E25C(&v26);
    v26 = (void **)&v20;
    sub_20C00D5A8(&v26);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if ((__int128 *)v3 != &v15)
  {
    sub_20C00E910((_QWORD *)v3);
    v14 = v16;
    *(_OWORD *)v3 = v15;
    *(_OWORD *)(v3 + 16) = v14;
    v15 = 0u;
    v16 = 0u;
    *(_QWORD *)(v3 + 32) = v17;
    v17 = 0;
  }
  sub_20C00E910(&v15);
}

void sub_20C1933E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E910(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTimeSampleMap(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _QWORD **v5;
  _QWORD *v6[2];

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  sub_20C193494(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 432), (uint64_t)&v5, a2);
  sub_20BFED2B4((uint64_t)&v5, v6[0]);
}

void sub_20C19347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BFED2B4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C193494@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0)
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    else
      a3 = v7;
  }
  sub_20BFECEF8(a4, a3);
  return sub_20BF4C2D8((uint64_t)&v7);
}

void sub_20C19353C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C193558@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  unsigned int **v12;
  unsigned int *v13;
  char v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448), (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v16 && (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v15) & 1) != 0)
  {
    v5 = (unsigned int **)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    v6 = *v5;
    *a2 = *v5;
    if ((v6 & 7) == 0)
      return sub_20BF4C2D8((uint64_t)v15);
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    goto LABEL_14;
  }
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(a1);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 448));
  v12 = (unsigned int **)sub_20BFB46E8(Fallback);
  v13 = *v12;
  *a2 = *v12;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
LABEL_14:
    if ((v8 & 1) == 0)
      *a2 = v7;
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C193690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::HasOnlyRequiredFields(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer **v2;
  _BOOL8 IsInert;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v11);
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_20BFCF650(&v11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  IsInert = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(v2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, 1, 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  v4 = v12;
  if (v12)
  {
    v5 = (unsigned int *)(v12 + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return IsInert;
}

void sub_20C193754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1937A0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C18BDF8((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527B00, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527B00, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527AF0, (void *(*)(void *, BOOL))nullsub_270);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C193874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1938C4(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C00D160(a1);
}

void sub_20C193954(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5[3];
  uint64_t v6;
  uint64_t v7;
  void *__p;
  char v9;
  void **v10;

  sub_20C00D1F0(v5, a1);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAbsolute(a2, (uint64_t)v5, a3);
  if (v9 < 0)
    operator delete(__p);
  v10 = (void **)&v7;
  sub_20C00E25C(&v10);
  v10 = (void **)&v6;
  sub_20C00D5A8(&v10);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_20C1939DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C00BBB0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1939F0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C00E850((_OWORD **)a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizeType@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  int *v26;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v21 = "sdf/proxyPolicies.cpp";
    v22 = "CanonicalizeType";
    v23 = 40;
    v24 = "static SdfRelocatesMapProxyValuePolicy::Type pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy"
          "::CanonicalizeType(const SdfSpecHandle &, const Type &)";
    v25 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v21, "spec", 0) & 1) == 0)
      return sub_20C0E4308(a3, (uint64_t)a2);
  }
  v6 = sub_20BFD5244(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, &v19);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = (uint64_t)(a3 + 1);
  v21 = (char *)*a2;
  v22 = (const char *)(a2 + 1);
  while (v21 != v22)
  {
    v9 = sub_20BFEB714(&v21, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v9 + 36), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v17);
    v12 = sub_20BFEB714(&v21, v10, v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v12 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v15);
    v26 = &v15;
    v13 = sub_20BFE4B68((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (uint64_t)&unk_20CAC184C, &v26);
    sub_20BFD3EBC((int *)v13 + 9, &v17);
    sub_20BFD3F10((int *)v13 + 10, &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_20BFD265C(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_20BFD265C(&v17);
    sub_20BFEB78C(&v21);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  return (uint64_t *)sub_20BFD265C(&v19);
}

void sub_20C193C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_20BFE4CE8(v3, *(_QWORD **)(v3 + 8));
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizeKey@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  int v8;
  int v9;
  _QWORD v10[4];
  char v11;

  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1)
    || (v10[0] = "sdf/proxyPolicies.cpp",
        v10[1] = "CanonicalizeKey",
        v10[2] = 58,
        v10[3] = "static SdfRelocatesMapProxyValuePolicy::key_type pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxy"
                 "ValuePolicy::CanonicalizeKey(const SdfSpecHandle &, const key_type &)",
        v11 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "spec", 0)))
  {
    v6 = sub_20BFD5244(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, &v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    return sub_20BFD265C(&v8);
  }
  else
  {
    sub_20BFD6E54(a3, a2);
    return sub_20BFD6EA4(a3 + 1, (_DWORD *)a2 + 1);
  }
}

void sub_20C193D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizeValue@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  int v8;
  int v9;
  _QWORD v10[4];
  char v11;

  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1)
    || (v10[0] = "sdf/proxyPolicies.cpp",
        v10[1] = "CanonicalizeValue",
        v10[2] = 66,
        v10[3] = "static SdfRelocatesMapProxyValuePolicy::mapped_type pxrInternal__aapl__pxrReserved__::SdfRelocatesMapPr"
                 "oxyValuePolicy::CanonicalizeValue(const SdfSpecHandle &, const mapped_type &)",
        v11 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "spec", 0)))
  {
    v6 = sub_20BFD5244(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, &v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    return sub_20BFD265C(&v8);
  }
  else
  {
    sub_20BFD6E54(a3, a2);
    return sub_20BFD6EA4(a3 + 1, (_DWORD *)a2 + 1);
  }
}

void sub_20C193E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizePair@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  int v8;
  int v9;
  int v10;
  int v11;
  _QWORD v12[4];
  char v13;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v12[0] = "sdf/proxyPolicies.cpp";
    v12[1] = "CanonicalizePair";
    v12[2] = 74;
    v12[3] = "static SdfRelocatesMapProxyValuePolicy::value_type pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyVa"
             "luePolicy::CanonicalizePair(const SdfSpecHandle &, const value_type &)";
    v13 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "spec", 0) & 1) == 0)
      return sub_20C0D9B58(a3, a2);
  }
  v6 = sub_20BFD5244(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, v12);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v12, &v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v12, &v8);
  sub_20C1434D0(a3, &v10, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v12 + 1);
  return sub_20BFD265C(v12);
}

void sub_20C193F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfAttributeViewPredicate::SdfAttributeViewPredicate(_DWORD *this)
{
  *this = 1;
  return this;
}

{
  *this = 1;
  return this;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelationshipViewPredicate::SdfRelationshipViewPredicate(_DWORD *this)
{
  *this = 8;
  return this;
}

{
  *this = 8;
  return this;
}

void sub_20C193F90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *__p[2];
  char v7;

  sub_20C19431C();
  sub_20C19441C();
  sub_20C19451C();
  v0 = sub_20C19461C();
  v1 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_20BDDC0E4(__p, "SdfInheritsProxy");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  v2 = sub_20C19471C();
  v3 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v2);
  sub_20BDDC0E4(__p, "SdfReferencesProxy");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v3, (char *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  v4 = sub_20C19481C();
  v5 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v4);
  sub_20BDDC0E4(__p, "SdfPayloadsProxy");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v4, v5, (char *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_20C19407C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(unsigned int **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_20C19491C(a1, a2, &v10);
  v4 = v11;
  *a3 = v10;
  a3[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfGetReferenceEditorProxy(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_20C194D58(a1, a2, &v10);
  v4 = v11;
  *a3 = v10;
  a3[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfGetPayloadEditorProxy(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_20C196754(a1, a2, &v10);
  v4 = v11;
  *a3 = v10;
  a3[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfGetNameOrderProxy(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_11:
    *(_DWORD *)(a3 + 16) = 3;
    return;
  }
  v6 = operator new(0x48uLL);
  sub_20C198210((uint64_t)v6, a1, a2, 3);
  sub_20C199678(&v13, (uint64_t)v6);
  v7 = v14;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v7;
  if (!v7)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = v14;
  *(_DWORD *)(a3 + 16) = 3;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20C194308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C19431C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529CC8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C529CC8, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1943D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C19441C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529CD8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C529CD8, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1944D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C19451C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529CE8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C529CE8, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1945D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C19461C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529CF8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C529CF8, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1946D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C19471C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529D08, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C529D08, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1947D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C19481C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529D18, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C529D18, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1948D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C19491C(unsigned int **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 53) & 0xFFFFFFFFFFFFFFF8))
  {
    v14 = operator new(0xB8uLL);
    v15 = (uint64_t)v14;
    v16 = *a1;
    v20 = v16;
    if (v16)
    {
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor::Sdf_RelationshipTargetListEditor(v14, a1, &v20);
    sub_20C194AD0(a3, v15);
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
    v9 = *((_QWORD *)v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v10 = operator new(0xB8uLL);
    v11 = (uint64_t)v10;
    if (v8 == v9)
    {
      v18 = *a1;
      v20 = v18;
      if (v18)
      {
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::Sdf_AttributeConnectionListEditor(v10, a1, &v20);
      sub_20C194BA8(a3, v11);
    }
    else
    {
      v12 = *a1;
      v20 = v12;
      if (v12)
      {
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
      sub_20BFD669C((uint64_t)v10, a1, a2, &v20);
      sub_20C194C80(a3, v11);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v20);
}

void sub_20C194A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C194AD0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C529D38;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C194B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C194B3C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C194B50(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C194B68(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C529D88))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C194BA8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C529DB0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C194BF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C194C14(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C194C28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C194C40(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C529E00))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C194C80(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C529E28;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C194CC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C194CEC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C194D00(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C194D18(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C529E78))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C194D58@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;

  v6 = operator new(0xB8uLL);
  sub_20C194DC8((uint64_t)v6, a1, a2);
  return sub_20C19667C(a3, (uint64_t)v6);
}

void sub_20C194DB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C194DC8(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void **v32;

  *(_QWORD *)a1 = &unk_24C529F50;
  v5 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v5)
  {
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
  }
  v7 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = &unk_24C529EA0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp(a1 + 32);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) == 0)
  {
    v10 = sub_20BFD5244(a2);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v12);
    sub_20C1950C4(v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (uint64_t)v12, (uint64_t)v19);
    *(_BYTE *)(a1 + 32) = v19[0];
    sub_20C0E314C((void **)(a1 + 40));
    *(_OWORD *)(a1 + 40) = v20;
    *(_QWORD *)(a1 + 56) = v21;
    v21 = 0;
    v20 = 0uLL;
    sub_20C0E314C((void **)(a1 + 64));
    *(_OWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 80) = v23;
    v23 = 0;
    v22 = 0uLL;
    sub_20C0E314C((void **)(a1 + 88));
    *(_OWORD *)(a1 + 88) = v24;
    *(_QWORD *)(a1 + 104) = v25;
    v25 = 0;
    v24 = 0uLL;
    sub_20C0E314C((void **)(a1 + 112));
    *(_OWORD *)(a1 + 112) = v26;
    *(_QWORD *)(a1 + 128) = v27;
    v27 = 0;
    v26 = 0uLL;
    sub_20C0E314C((void **)(a1 + 136));
    *(_OWORD *)(a1 + 136) = v28;
    *(_QWORD *)(a1 + 152) = v29;
    v29 = 0;
    v28 = 0uLL;
    sub_20C0E314C((void **)(a1 + 160));
    *(_OWORD *)(a1 + 160) = v30;
    *(_QWORD *)(a1 + 176) = v31;
    v31 = 0;
    v30 = 0uLL;
    v32 = (void **)&v30;
    sub_20C021740(&v32);
    v32 = (void **)&v28;
    sub_20C021740(&v32);
    v32 = (void **)&v26;
    sub_20C021740(&v32);
    v32 = (void **)&v24;
    sub_20C021740(&v32);
    v32 = (void **)&v22;
    sub_20C021740(&v32);
    v32 = (void **)&v20;
    sub_20C021740(&v32);
    v32 = (void **)&v18;
    sub_20C021740(&v32);
    v32 = (void **)&v17;
    sub_20C021740(&v32);
    v32 = (void **)&v16;
    sub_20C021740(&v32);
    v32 = (void **)&v15;
    sub_20C021740(&v32);
    v32 = (void **)&v14;
    sub_20C021740(&v32);
    v32 = (void **)&v13;
    sub_20C021740(&v32);
  }
  return a1;
}

void sub_20C195060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v3;
  void **v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a2);
  sub_20C029B80((void **)va);
  sub_20C029B80(v4);
  *v2 = v5 + 16;
  v7 = v2[2];
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1950C4@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_20BFE4618((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0)
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    else
      a3 = v7;
  }
  sub_20C02BDC4(a4, a3);
  return sub_20BF4C2D8((uint64_t)&v7);
}

void sub_20C19516C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_20C19518C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C195AFC(a1);
  operator delete(v1);
}

double sub_20C1951A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  char *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v4 = "List editor is expired";
  }
  else
  {
    v5 = sub_20BFD5244(v3);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5) & 1) != 0)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    v4 = "Permission denied";
  }
  sub_20BDDC0E4(&v7, v4);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

BOOL sub_20C195224(uint64_t a1, void *lpsrc)
{
  _BYTE *v3;
  _BYTE *v4;
  _QWORD v6[4];
  char v7;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C529F18, (const struct __class_type_info *)&unk_24C529F28, 0);
  v4 = v3;
  if (v3)
  {
    sub_20C195BCC(a1, v3 + 32, 0);
  }
  else
  {
    v6[0] = "sdf/listOpListEditor.h";
    v6[1] = "CopyEdits";
    v6[2] = 221;
    v6[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfRef"
            "erenceTypePolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::Sdf"
            "ReferenceTypePolicy]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy from list editor of different type");
  }
  return v4 != 0;
}

uint64_t sub_20C1952C8(uint64_t a1)
{
  _BYTE v3[8];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v3);
  sub_20C195BCC(a1, v3, 0);
  v10 = (void **)&v9;
  sub_20C021740(&v10);
  v10 = (void **)&v8;
  sub_20C021740(&v10);
  v10 = (void **)&v7;
  sub_20C021740(&v10);
  v10 = (void **)&v6;
  sub_20C021740(&v10);
  v10 = (void **)&v5;
  sub_20C021740(&v10);
  v10 = (void **)&v4;
  sub_20C021740(&v10);
  return 1;
}

void sub_20C19536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C029B80(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C195380(uint64_t a1)
{
  unsigned __int8 v3[8];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ClearAndMakeExplicit(v3);
  sub_20C195BCC(a1, v3, 0);
  v10 = (void **)&v9;
  sub_20C021740(&v10);
  v10 = (void **)&v8;
  sub_20C021740(&v10);
  v10 = (void **)&v7;
  sub_20C021740(&v10);
  v10 = (void **)&v6;
  sub_20C021740(&v10);
  v10 = (void **)&v5;
  sub_20C021740(&v10);
  v10 = (void **)&v4;
  sub_20C021740(&v10);
  return 1;
}

void sub_20C19542C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C029B80(&a9);
  _Unwind_Resume(a1);
}

void sub_20C195440(void **a1, void **a2)
{
  void ***v4;
  uint64_t v5;
  __int128 v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12[3];
  void ***v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_20C02BDC4((uint64_t)v6, (uint64_t)(a1 + 4));
  v12[0] = (void **)&unk_24C529FD8;
  v12[1] = a1;
  v12[2] = a2;
  v13 = v12;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations(v6, (uint64_t)v12, 1);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v5 = 5;
LABEL_5:
    ((void (*)(void))(*v4)[v5])();
  }
  sub_20C195BCC((uint64_t)a1, v6, 0);
  v12[0] = (void **)&v11;
  sub_20C021740(v12);
  v12[0] = (void **)&v10;
  sub_20C021740(v12);
  v12[0] = (void **)&v9;
  sub_20C021740(v12);
  v12[0] = (void **)&v8;
  sub_20C021740(v12);
  v12[0] = (void **)&v7;
  sub_20C021740(v12);
  v12[0] = (void **)v6 + 1;
  sub_20C021740(v12);
}

void sub_20C195570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C029B80(&a9);
  _Unwind_Resume(a1);
}

void sub_20C1955C0(uint64_t a1, __int128 **a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(a1 + 32, a2, a3);
}

uint64_t sub_20C1955C8(uint64_t a1, int a2, unint64_t a3, uint64_t a4, std::string **a5)
{
  uint64_t v10;
  unsigned __int8 v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void **v20;

  v19 = a2;
  sub_20C02BDC4((uint64_t)v12, a1 + 32);
  v10 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ReplaceOperations(v12, a2, a3, a4, a5);
  if ((v10 & 1) != 0)
    sub_20C195BCC(a1, v12, &v19);
  v20 = (void **)&v18;
  sub_20C021740(&v20);
  v20 = (void **)&v17;
  sub_20C021740(&v20);
  v20 = (void **)&v16;
  sub_20C021740(&v20);
  v20 = (void **)&v15;
  sub_20C021740(&v20);
  v20 = (void **)&v14;
  sub_20C021740(&v20);
  v20 = (void **)&v13;
  sub_20C021740(&v20);
  return v10;
}

void sub_20C1956B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C029B80((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C1956C8(uint64_t a1, int a2, void *lpsrc)
{
  void *v5;
  void *v6;
  char *v7;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  v14 = a2;
  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C529F18, (const struct __class_type_info *)&unk_24C529F28, 0);
  if (v5)
  {
    v6 = v5;
    sub_20C02BDC4((uint64_t)&v7, a1 + 32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ComposeOperations((unsigned __int8 *)&v7, (uint64_t)v6 + 32, a2);
    sub_20C195BCC(a1, &v7, &v14);
    v15 = (void **)&v13;
    sub_20C021740(&v15);
    v15 = (void **)&v12;
    sub_20C021740(&v15);
    v15 = (void **)&v11;
    sub_20C021740(&v15);
    v15 = (void **)&v10;
    sub_20C021740(&v15);
    v15 = (void **)&v9;
    sub_20C021740(&v15);
    v15 = (void **)v8;
    sub_20C021740(&v15);
  }
  else
  {
    v7 = "sdf/listOpListEditor.h";
    v8[0] = "ApplyList";
    v8[1] = 296;
    v8[2] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfRef"
            "erenceTypePolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxr"
            "Reserved__::SdfReferenceTypePolicy]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
  }
}

void sub_20C1957F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C029B80((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C195808(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *i;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *FieldDefinition;
  uint64_t *v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  const char *v20;
  const char *Text;
  unint64_t v23;
  const char *v24;
  uint64_t *WhyNot;
  const char *v26;
  void *__p[2];
  char v28;
  char v29;
  int v30;
  int v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;

  v6 = *a3;
  v7 = a3[1];
  v8 = *a4;
  v9 = a4[1];
  if (*a3 != v7 && v8 != v9)
  {
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v6, v8))
        break;
      v6 += 56;
      v8 += 56;
      if (v6 == v7)
        break;
    }
    while (v8 != v9);
  }
  if (v8 != v9)
  {
    v11 = v8;
    while (2)
    {
      for (i = *a4; i != v11; i += 56)
      {
        if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v11, i))
        {
          v32 = "sdf/listEditor.h";
          v33 = "_ValidateEdit";
          v34 = 262;
          v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfRefer"
                "enceTypePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) cons"
                "t [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
          v36 = 0;
          v18 = __p;
          sub_20C196200((uint64_t)v11);
          if (v28 < 0)
            v18 = (void **)__p[0];
          v19 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
          if (v19)
          {
            v20 = (const char *)(v19 + 16);
            if (*(char *)(v19 + 39) < 0)
              v20 = *(const char **)v20;
          }
          else
          {
            v20 = "";
          }
          sub_20BFD711C(a1, &v30);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v18, v20, Text);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
          sub_20BFD265C(&v30);
          goto LABEL_30;
        }
      }
      v11 += 56;
      if (v11 != v9)
        continue;
      break;
    }
  }
  v13 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v13);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (v8 == v9)
    {
      return 1;
    }
    else
    {
      v16 = FieldDefinition;
      while (1)
      {
        sub_20C1962C8(v16, (__int128 *)v8, __p);
        if (v29)
          break;
        v8 += 56;
        if (v8 == v9)
          return 1;
      }
      v32 = "sdf/listEditor.h";
      v33 = "_ValidateEdit";
      v34 = 279;
      v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfReference"
            "TypePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypeP"
            "olicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
      v36 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0)
        v26 = (const char *)WhyNot;
      else
        v26 = (const char *)*WhyNot;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v26);
      if (v29)
      {
LABEL_30:
        if (v28 < 0)
          operator delete(__p[0]);
      }
      return 0;
    }
  }
  else
  {
    v32 = "sdf/listEditor.h";
    v33 = "_ValidateEdit";
    v34 = 273;
    v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfReferenceTy"
          "pePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolic"
          "y = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    v36 = 0;
    v23 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0)
        v24 = *(const char **)v24;
    }
    else
    {
      v24 = "";
    }
    v17 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v24);
  }
  return v17;
}

void sub_20C195AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C195AF4(uint64_t a1, int a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a1 + 32, a2);
}

uint64_t sub_20C195AFC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24C529EA0;
  v6 = (void **)(a1 + 160);
  sub_20C021740(&v6);
  v6 = (void **)(a1 + 136);
  sub_20C021740(&v6);
  v6 = (void **)(a1 + 112);
  sub_20C021740(&v6);
  v6 = (void **)(a1 + 88);
  sub_20C021740(&v6);
  v6 = (void **)(a1 + 64);
  sub_20C021740(&v6);
  v6 = (void **)(a1 + 40);
  sub_20C021740(&v6);
  *(_QWORD *)a1 = &unk_24C529F50;
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_20C195BCC(uint64_t a1, _BYTE *a2, _DWORD *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  uint64_t **v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  char v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t Items;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t i;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[8];
  unsigned int *v41[2];
  _OWORD v42[3];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v31 = "sdf/listOpListEditor.h";
    v32 = "_UpdateListOp";
    v33 = 113;
    v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfReferenceType"
          "Policy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved"
          "__::SdfReferenceTypePolicy]";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    v30 = v6;
    v7 = (uint64_t **)sub_20BFD5244(v6);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v31);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v31);
    v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8);
    v10 = v32;
    if (v32)
    {
      v11 = (unsigned int *)(v32 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
    }
    if ((v9 & 1) != 0)
    {
      v14 = 0;
      v15 = 0;
      v42[0] = xmmword_20CABDB64;
      v42[1] = unk_20CABDB74;
      v42[2] = xmmword_20CABDB84;
      v16 = (char *)v42;
      while (2)
      {
        v17 = v15;
        v18 = (unsigned int *)v16;
        ++v15;
        v16 = (char *)v42 + 8 * v17 + 8;
        while (1)
        {
          v19 = *v18;
          if (!a3 || *a3 == (_DWORD)v19)
          {
            v20 = sub_20C195FC8(v19, (uint64_t)a2, a1 + 32);
            *(v16 - 4) = v20;
            if (v20)
              break;
          }
          ++v17;
          v18 = (unsigned int *)v42 + 2 * v17;
          ++v15;
          v16 += 8;
          if (v15 == 7)
          {
            if ((v14 & 1) == 0 && (*a2 != 0) == (*(_BYTE *)(a1 + 32) != 0))
              return;
            goto LABEL_22;
          }
        }
        Items = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a1 + 32, v19);
        v22 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems((uint64_t)a2, v19);
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, v19, Items, v22) & 1) == 0)return;
        v14 = 1;
        if (v15 != 6)
          continue;
        break;
      }
LABEL_22:
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
      sub_20C02BDC4((uint64_t)&v31, (uint64_t)a2);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Swap((char *)(a1 + 32), (char *)&v31);
      if (pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::HasKeys((uint64_t)a2))
      {
        v23 = sub_20BFD5244(v30);
        v41[1] = (unsigned int *)&off_24C526568;
        sub_20C02C8C8(v41, (uint64_t)a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        sub_20BF4C2D8((uint64_t)v41);
      }
      else
      {
        v24 = sub_20BFD5244(v30);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
      }
      for (i = 0; i != 48; i += 8)
      {
        v26 = (int *)((char *)v42 + i);
        if (*((_BYTE *)v42 + i + 4))
        {
          v27 = *v26;
          v28 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems((uint64_t)&v31, *v26);
          v29 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems((uint64_t)a2, v27);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v27, v28, v29);
        }
      }
      v41[0] = (unsigned int *)&v39;
      sub_20C021740((void ***)v41);
      v41[0] = (unsigned int *)&v38;
      sub_20C021740((void ***)v41);
      v41[0] = (unsigned int *)&v37;
      sub_20C021740((void ***)v41);
      v41[0] = (unsigned int *)&v36;
      sub_20C021740((void ***)v41);
      v41[0] = (unsigned int *)&v35;
      sub_20C021740((void ***)v41);
      v41[0] = (unsigned int *)&v32;
      sub_20C021740((void ***)v41);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
    }
    else
    {
      v31 = "sdf/listOpListEditor.h";
      v32 = "_UpdateListOp";
      v33 = 118;
      v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfReferenceTy"
            "pePolicy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrRese"
            "rved__::SdfReferenceTypePolicy]";
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_20C195F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  sub_20BF4C2D8(v30 - 160);
  sub_20C029B80(&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20C195FC8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t Items;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;

  Items = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a2, a1);
  v6 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(a3, a1);
  v7 = *(unsigned __int8 **)Items;
  v8 = *(unsigned __int8 **)(Items + 8);
  v9 = *(unsigned __int8 **)v6;
  if (&v8[-*(_QWORD *)Items] != (unsigned __int8 *)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6))
    return 1;
  if (v7 == v8)
    return 0;
  do
  {
    v10 = pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v7, v9);
    if (!v10)
      break;
    v7 += 56;
    v9 += 56;
  }
  while (v7 != v8);
  return v10 ^ 1u;
}

__n128 sub_20C196068(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C529FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C1960A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C529FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C1960C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return sub_20C196120(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20C1960D8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52A038))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C196114()
{
  return &unk_24C52A038;
}

uint64_t sub_20C196120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v3;
  __int128 v6[3];
  char v7;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_20BE9E974();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v6, v3, a2);
  if (v7)
  {
    sub_20C029E64(a3, v6);
    a3[56] = 1;
  }
  else
  {
    sub_20C1961AC(a3, (uint64_t)v6);
  }
  return sub_20C124A94((uint64_t)v6);
}

void sub_20C196198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C124A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20C1961AC(char *__dst, uint64_t a2)
{
  *__dst = 0;
  __dst[56] = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    sub_20C029E64(__dst, (__int128 *)a2);
    __dst[56] = 1;
  }
  return __dst;
}

void sub_20C1961EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C124A94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C196200(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C1962B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1962C8@<X0>(uint64_t *result@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, _QWORD *);
  uint64_t v4;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, _QWORD *))result[9];
  if (v3)
  {
    v4 = *result;
    v5[1] = &off_24C52A048;
    sub_20C196610(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20C196364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C196380(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 56);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_20C1963A8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C196504(a1);
}

uint64_t sub_20C1963B8()
{
  return 1;
}

unint64_t sub_20C1963C0(pxrInternal__aapl__pxrReserved__ **a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  unsigned int *v2;
  int8x16_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = (unsigned int *)((char *)*a1 + 24);
  v3 = (int8x16_t *)((char *)*a1 + 32);
  v4 = (uint64_t *)((char *)*a1 + 48);
  v6 = 0;
  v7 = 0;
  sub_20C02C578((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

uint64_t sub_20C19641C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfReference::operator==(*a1, *a2);
}

uint64_t sub_20C196428(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfReference::operator==(*a1, a2);
}

uint64_t sub_20C196434()
{
  return 0;
}

_QWORD *sub_20C196440(uint64_t *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20C196450()
{
  return &unk_24C52A100;
}

uint64_t sub_20C19645C()
{
  return 0;
}

uint64_t sub_20C196464()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C196470()
{
  return 0;
}

uint64_t sub_20C196478()
{
  return 0;
}

BOOL sub_20C196480(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CABD888 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C1964B8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52A100, a2, a3);
}

void *sub_20C1964D8()
{
  return &unk_24C52A100;
}

uint64_t sub_20C1964E4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C1964EC@<X0>(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;

  v2 = *a1;
  a2[1] = &off_24C52A048;
  return sub_20C196610(a2, v2);
}

uint64_t *sub_20C196504(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 56);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF49F14((_QWORD ***)(v2 + 48), 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 + 28));
      sub_20BFD265C((_DWORD *)(v2 + 24));
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      operator delete((void *)v2);
    }
  }
  return a1;
}

__int128 *sub_20C196580(__int128 **a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 *v7;

  v2 = atomic_load((unsigned int *)*a1 + 14);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x40uLL);
    sub_20C029E64(v3, *a1);
    v4 = (unsigned int *)(v3 + 56);
    atomic_store(0, (unsigned int *)v3 + 14);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = *a1;
    *a1 = (__int128 *)v3;
    sub_20C196504((uint64_t *)&v7);
  }
  return *a1;
}

void sub_20C1965FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20C196610(_QWORD *a1, __int128 *a2)
{
  char *v4;
  char *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (char *)operator new(0x40uLL);
  result = sub_20C029E64(v4, a2);
  v6 = (unsigned int *)(v4 + 56);
  atomic_store(0, (unsigned int *)v4 + 14);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C196668(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C19667C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52A120;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C1966C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C1966E8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C1966FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C196714(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52A170))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C196754@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;

  v6 = operator new(0xB8uLL);
  sub_20C1967C4((uint64_t)v6, a1, a2);
  return sub_20C198138(a3, (uint64_t)v6);
}

void sub_20C1967B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1967C4(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void **v32;

  *(_QWORD *)a1 = &unk_24C52A248;
  v5 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v5)
  {
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
  }
  v7 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = &unk_24C52A198;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp(a1 + 32);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) == 0)
  {
    v10 = sub_20BFD5244(a2);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v12);
    sub_20C196AC0(v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (uint64_t)v12, (uint64_t)v19);
    *(_BYTE *)(a1 + 32) = v19[0];
    sub_20C0E38EC((void **)(a1 + 40));
    *(_OWORD *)(a1 + 40) = v20;
    *(_QWORD *)(a1 + 56) = v21;
    v21 = 0;
    v20 = 0uLL;
    sub_20C0E38EC((void **)(a1 + 64));
    *(_OWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 80) = v23;
    v23 = 0;
    v22 = 0uLL;
    sub_20C0E38EC((void **)(a1 + 88));
    *(_OWORD *)(a1 + 88) = v24;
    *(_QWORD *)(a1 + 104) = v25;
    v25 = 0;
    v24 = 0uLL;
    sub_20C0E38EC((void **)(a1 + 112));
    *(_OWORD *)(a1 + 112) = v26;
    *(_QWORD *)(a1 + 128) = v27;
    v27 = 0;
    v26 = 0uLL;
    sub_20C0E38EC((void **)(a1 + 136));
    *(_OWORD *)(a1 + 136) = v28;
    *(_QWORD *)(a1 + 152) = v29;
    v29 = 0;
    v28 = 0uLL;
    sub_20C0E38EC((void **)(a1 + 160));
    *(_OWORD *)(a1 + 160) = v30;
    *(_QWORD *)(a1 + 176) = v31;
    v31 = 0;
    v30 = 0uLL;
    v32 = (void **)&v30;
    sub_20C021818(&v32);
    v32 = (void **)&v28;
    sub_20C021818(&v32);
    v32 = (void **)&v26;
    sub_20C021818(&v32);
    v32 = (void **)&v24;
    sub_20C021818(&v32);
    v32 = (void **)&v22;
    sub_20C021818(&v32);
    v32 = (void **)&v20;
    sub_20C021818(&v32);
    v32 = (void **)&v18;
    sub_20C021818(&v32);
    v32 = (void **)&v17;
    sub_20C021818(&v32);
    v32 = (void **)&v16;
    sub_20C021818(&v32);
    v32 = (void **)&v15;
    sub_20C021818(&v32);
    v32 = (void **)&v14;
    sub_20C021818(&v32);
    v32 = (void **)&v13;
    sub_20C021818(&v32);
  }
  return a1;
}

void sub_20C196A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v3;
  void **v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a2);
  sub_20C02C9C4((void **)va);
  sub_20C02C9C4(v4);
  *v2 = v5 + 16;
  v7 = v2[2];
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20C196AC0@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_20BFE45A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0)
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    else
      a3 = v7;
  }
  sub_20C02E924(a4, a3);
  return sub_20BF4C2D8((uint64_t)&v7);
}

void sub_20C196B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_20C196B88(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C1974F8(a1);
  operator delete(v1);
}

double sub_20C196B9C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  char *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v4 = "List editor is expired";
  }
  else
  {
    v5 = sub_20BFD5244(v3);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5) & 1) != 0)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    v4 = "Permission denied";
  }
  sub_20BDDC0E4(&v7, v4);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

BOOL sub_20C196C20(uint64_t a1, void *lpsrc)
{
  _BYTE *v3;
  _BYTE *v4;
  _QWORD v6[4];
  char v7;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C52A210, (const struct __class_type_info *)&unk_24C52A220, 0);
  v4 = v3;
  if (v3)
  {
    sub_20C1975C8(a1, v3 + 32, 0);
  }
  else
  {
    v6[0] = "sdf/listOpListEditor.h";
    v6[1] = "CopyEdits";
    v6[2] = 221;
    v6[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPay"
            "loadTypePolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPa"
            "yloadTypePolicy]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy from list editor of different type");
  }
  return v4 != 0;
}

uint64_t sub_20C196CC4(uint64_t a1)
{
  _BYTE v3[8];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v3);
  sub_20C1975C8(a1, v3, 0);
  v10 = (void **)&v9;
  sub_20C021818(&v10);
  v10 = (void **)&v8;
  sub_20C021818(&v10);
  v10 = (void **)&v7;
  sub_20C021818(&v10);
  v10 = (void **)&v6;
  sub_20C021818(&v10);
  v10 = (void **)&v5;
  sub_20C021818(&v10);
  v10 = (void **)&v4;
  sub_20C021818(&v10);
  return 1;
}

void sub_20C196D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C02C9C4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C196D7C(uint64_t a1)
{
  unsigned __int8 v3[8];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit(v3);
  sub_20C1975C8(a1, v3, 0);
  v10 = (void **)&v9;
  sub_20C021818(&v10);
  v10 = (void **)&v8;
  sub_20C021818(&v10);
  v10 = (void **)&v7;
  sub_20C021818(&v10);
  v10 = (void **)&v6;
  sub_20C021818(&v10);
  v10 = (void **)&v5;
  sub_20C021818(&v10);
  v10 = (void **)&v4;
  sub_20C021818(&v10);
  return 1;
}

void sub_20C196E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C02C9C4(&a9);
  _Unwind_Resume(a1);
}

void sub_20C196E3C(void **a1, void **a2)
{
  void ***v4;
  uint64_t v5;
  __int128 v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12[3];
  void ***v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_20C02E924((uint64_t)v6, (uint64_t)(a1 + 4));
  v12[0] = (void **)&unk_24C52A2D0;
  v12[1] = a1;
  v12[2] = a2;
  v13 = v12;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations(v6, (uint64_t)v12, 1);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v5 = 5;
LABEL_5:
    ((void (*)(void))(*v4)[v5])();
  }
  sub_20C1975C8((uint64_t)a1, v6, 0);
  v12[0] = (void **)&v11;
  sub_20C021818(v12);
  v12[0] = (void **)&v10;
  sub_20C021818(v12);
  v12[0] = (void **)&v9;
  sub_20C021818(v12);
  v12[0] = (void **)&v8;
  sub_20C021818(v12);
  v12[0] = (void **)&v7;
  sub_20C021818(v12);
  v12[0] = (void **)v6 + 1;
  sub_20C021818(v12);
}

void sub_20C196F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C02C9C4(&a9);
  _Unwind_Resume(a1);
}

void sub_20C196FBC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(a1 + 32, a2, a3);
}

uint64_t sub_20C196FC4(uint64_t a1, int a2, unint64_t a3, uint64_t a4, std::string **a5)
{
  uint64_t v10;
  unsigned __int8 v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void **v20;

  v19 = a2;
  sub_20C02E924((uint64_t)v12, a1 + 32);
  v10 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ReplaceOperations(v12, a2, a3, a4, a5);
  if ((v10 & 1) != 0)
    sub_20C1975C8(a1, v12, &v19);
  v20 = (void **)&v18;
  sub_20C021818(&v20);
  v20 = (void **)&v17;
  sub_20C021818(&v20);
  v20 = (void **)&v16;
  sub_20C021818(&v20);
  v20 = (void **)&v15;
  sub_20C021818(&v20);
  v20 = (void **)&v14;
  sub_20C021818(&v20);
  v20 = (void **)&v13;
  sub_20C021818(&v20);
  return v10;
}

void sub_20C1970B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C1970C4(uint64_t a1, int a2, void *lpsrc)
{
  void *v5;
  void *v6;
  char *v7;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  v14 = a2;
  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C52A210, (const struct __class_type_info *)&unk_24C52A220, 0);
  if (v5)
  {
    v6 = v5;
    sub_20C02E924((uint64_t)&v7, a1 + 32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ComposeOperations((unsigned __int8 *)&v7, (uint64_t)v6 + 32, a2);
    sub_20C1975C8(a1, &v7, &v14);
    v15 = (void **)&v13;
    sub_20C021818(&v15);
    v15 = (void **)&v12;
    sub_20C021818(&v15);
    v15 = (void **)&v11;
    sub_20C021818(&v15);
    v15 = (void **)&v10;
    sub_20C021818(&v15);
    v15 = (void **)&v9;
    sub_20C021818(&v15);
    v15 = (void **)v8;
    sub_20C021818(&v15);
  }
  else
  {
    v7 = "sdf/listOpListEditor.h";
    v8[0] = "ApplyList";
    v8[1] = 296;
    v8[2] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPay"
            "loadTypePolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrRe"
            "served__::SdfPayloadTypePolicy]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
  }
}

void sub_20C1971F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C197204(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *i;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *FieldDefinition;
  uint64_t *v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  const char *v20;
  const char *Text;
  unint64_t v23;
  const char *v24;
  uint64_t *WhyNot;
  const char *v26;
  void *__p[2];
  char v28;
  char v29;
  int v30;
  int v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;

  v6 = *a3;
  v7 = a3[1];
  v8 = *a4;
  v9 = a4[1];
  if (*a3 != v7 && v8 != v9)
  {
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v6, v8))
        break;
      v6 += 48;
      v8 += 48;
      if (v6 == v7)
        break;
    }
    while (v8 != v9);
  }
  if (v8 != v9)
  {
    v11 = v8;
    while (2)
    {
      for (i = *a4; i != v11; i += 48)
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v11, i))
        {
          v32 = "sdf/listEditor.h";
          v33 = "_ValidateEdit";
          v34 = 262;
          v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPaylo"
                "adTypePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const "
                "[TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
          v36 = 0;
          v18 = __p;
          sub_20C197C60((uint64_t)v11);
          if (v28 < 0)
            v18 = (void **)__p[0];
          v19 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
          if (v19)
          {
            v20 = (const char *)(v19 + 16);
            if (*(char *)(v19 + 39) < 0)
              v20 = *(const char **)v20;
          }
          else
          {
            v20 = "";
          }
          sub_20BFD711C(a1, &v30);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v18, v20, Text);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
          sub_20BFD265C(&v30);
          goto LABEL_30;
        }
      }
      v11 += 48;
      if (v11 != v9)
        continue;
      break;
    }
  }
  v13 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v13);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (v8 == v9)
    {
      return 1;
    }
    else
    {
      v16 = FieldDefinition;
      while (1)
      {
        sub_20C197D28(v16, (__int128 *)v8, __p);
        if (v29)
          break;
        v8 += 48;
        if (v8 == v9)
          return 1;
      }
      v32 = "sdf/listEditor.h";
      v33 = "_ValidateEdit";
      v34 = 279;
      v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPayloadTy"
            "pePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePol"
            "icy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
      v36 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0)
        v26 = (const char *)WhyNot;
      else
        v26 = (const char *)*WhyNot;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v26);
      if (v29)
      {
LABEL_30:
        if (v28 < 0)
          operator delete(__p[0]);
      }
      return 0;
    }
  }
  else
  {
    v32 = "sdf/listEditor.h";
    v33 = "_ValidateEdit";
    v34 = 273;
    v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPayloadType"
          "Policy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy "
          "= pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    v36 = 0;
    v23 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0)
        v24 = *(const char **)v24;
    }
    else
    {
      v24 = "";
    }
    v17 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v24);
  }
  return v17;
}

void sub_20C1974AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1974F0(uint64_t a1, int a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a1 + 32, a2);
}

uint64_t sub_20C1974F8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24C52A198;
  v6 = (void **)(a1 + 160);
  sub_20C021818(&v6);
  v6 = (void **)(a1 + 136);
  sub_20C021818(&v6);
  v6 = (void **)(a1 + 112);
  sub_20C021818(&v6);
  v6 = (void **)(a1 + 88);
  sub_20C021818(&v6);
  v6 = (void **)(a1 + 64);
  sub_20C021818(&v6);
  v6 = (void **)(a1 + 40);
  sub_20C021818(&v6);
  *(_QWORD *)a1 = &unk_24C52A248;
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_20C1975C8(uint64_t a1, _BYTE *a2, _DWORD *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  uint64_t **v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  char v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t Items;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t i;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[8];
  unsigned int *v41[2];
  _OWORD v42[3];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v31 = "sdf/listOpListEditor.h";
    v32 = "_UpdateListOp";
    v33 = 113;
    v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePo"
          "licy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__"
          "::SdfPayloadTypePolicy]";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    v30 = v6;
    v7 = (uint64_t **)sub_20BFD5244(v6);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v31);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v31);
    v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8);
    v10 = v32;
    if (v32)
    {
      v11 = (unsigned int *)(v32 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
    }
    if ((v9 & 1) != 0)
    {
      v14 = 0;
      v15 = 0;
      v42[0] = xmmword_20CABDB64;
      v42[1] = unk_20CABDB74;
      v42[2] = xmmword_20CABDB84;
      v16 = (char *)v42;
      while (2)
      {
        v17 = v15;
        v18 = (unsigned int *)v16;
        ++v15;
        v16 = (char *)v42 + 8 * v17 + 8;
        while (1)
        {
          v19 = *v18;
          if (!a3 || *a3 == (_DWORD)v19)
          {
            v20 = sub_20C1979C4(v19, (uint64_t)a2, a1 + 32);
            *(v16 - 4) = v20;
            if (v20)
              break;
          }
          ++v17;
          v18 = (unsigned int *)v42 + 2 * v17;
          ++v15;
          v16 += 8;
          if (v15 == 7)
          {
            if ((v14 & 1) == 0 && (*a2 != 0) == (*(_BYTE *)(a1 + 32) != 0))
              return;
            goto LABEL_22;
          }
        }
        Items = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a1 + 32, v19);
        v22 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems((uint64_t)a2, v19);
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, v19, Items, v22) & 1) == 0)return;
        v14 = 1;
        if (v15 != 6)
          continue;
        break;
      }
LABEL_22:
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
      sub_20C02E924((uint64_t)&v31, (uint64_t)a2);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Swap((char *)(a1 + 32), (char *)&v31);
      if (pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::HasKeys((uint64_t)a2))
      {
        v23 = sub_20BFD5244(v30);
        v41[1] = (unsigned int *)&off_24C526620;
        sub_20C02F37C(v41, (uint64_t)a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        sub_20BF4C2D8((uint64_t)v41);
      }
      else
      {
        v24 = sub_20BFD5244(v30);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
      }
      for (i = 0; i != 48; i += 8)
      {
        v26 = (int *)((char *)v42 + i);
        if (*((_BYTE *)v42 + i + 4))
        {
          v27 = *v26;
          v28 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems((uint64_t)&v31, *v26);
          v29 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems((uint64_t)a2, v27);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v27, v28, v29);
        }
      }
      v41[0] = (unsigned int *)&v39;
      sub_20C021818((void ***)v41);
      v41[0] = (unsigned int *)&v38;
      sub_20C021818((void ***)v41);
      v41[0] = (unsigned int *)&v37;
      sub_20C021818((void ***)v41);
      v41[0] = (unsigned int *)&v36;
      sub_20C021818((void ***)v41);
      v41[0] = (unsigned int *)&v35;
      sub_20C021818((void ***)v41);
      v41[0] = (unsigned int *)&v32;
      sub_20C021818((void ***)v41);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
    }
    else
    {
      v31 = "sdf/listOpListEditor.h";
      v32 = "_UpdateListOp";
      v33 = 118;
      v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPayloadType"
            "Policy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserv"
            "ed__::SdfPayloadTypePolicy]";
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_20C19796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  sub_20BF4C2D8(v30 - 160);
  sub_20C02C9C4(&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1979C4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t Items;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _BOOL4 v10;

  Items = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a2, a1);
  v6 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(a3, a1);
  v7 = *(unsigned __int8 **)Items;
  v8 = *(unsigned __int8 **)(Items + 8);
  v9 = *(unsigned __int8 **)v6;
  if (&v8[-*(_QWORD *)Items] != (unsigned __int8 *)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6))
    return 1;
  if (v7 == v8)
    return 0;
  do
  {
    v10 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v7, v9);
    if (!v10)
      break;
    v7 += 48;
    v9 += 48;
  }
  while (v7 != v8);
  return !v10;
}

__n128 sub_20C197A64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52A2D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C197AA0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52A2D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C197AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_20C197B1C(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20C197AD4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52A330))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C197B10()
{
  return &unk_24C52A330;
}

uint64_t sub_20C197B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v6[3];
  char v7;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_20BE9E974();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v6, v3, a2);
  if (v7)
    sub_20C1057F0(a3, v6);
  else
    sub_20C197BA0(a3, (uint64_t)v6);
  return sub_20C124BA4((uint64_t)v6);
}

void sub_20C197B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C124BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C197BA0(_BYTE *__dst, uint64_t a2)
{
  *__dst = 0;
  __dst[48] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    sub_20C197BF4(__dst, (__int128 *)a2);
    __dst[48] = 1;
  }
  return __dst;
}

void sub_20C197BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C124BA4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C197BF4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20BFD6E54((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_20BFD6EA4((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  return __dst;
}

uint64_t sub_20C197C60(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C197D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C197D28@<X0>(uint64_t *result@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, _QWORD *);
  uint64_t v4;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, _QWORD *))result[9];
  if (v3)
  {
    v4 = *result;
    v5[1] = &off_24C52A340;
    sub_20C1980D0(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20C197DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C197DE0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_20C197E08(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C197F60(a1);
}

uint64_t sub_20C197E18()
{
  return 1;
}

unint64_t sub_20C197E20(pxrInternal__aapl__pxrReserved__ **a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  unsigned int *v2;
  int8x16_t *v3;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v2 = (unsigned int *)((char *)*a1 + 24);
  v3 = (int8x16_t *)((char *)*a1 + 32);
  v5 = 0;
  v6 = 0;
  sub_20C02F0AC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL sub_20C197E78(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(*a1, *a2);
}

BOOL sub_20C197E84(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(*a1, a2);
}

uint64_t sub_20C197E90()
{
  return 0;
}

_QWORD *sub_20C197E9C(uint64_t *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20C197EAC()
{
  return &unk_24C529858;
}

uint64_t sub_20C197EB8()
{
  return 0;
}

uint64_t sub_20C197EC0()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C197ECC()
{
  return 0;
}

uint64_t sub_20C197ED4()
{
  return 0;
}

BOOL sub_20C197EDC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CABDD1ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C197F14(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C529858, a2, a3);
}

void *sub_20C197F34()
{
  return &unk_24C529858;
}

uint64_t sub_20C197F40(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_BYTE *sub_20C197F48@<X0>(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;

  v2 = *a1;
  a2[1] = &off_24C52A340;
  return sub_20C1980D0(a2, v2);
}

uint64_t *sub_20C197F60(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 + 28));
      sub_20BFD265C((_DWORD *)(v2 + 24));
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      operator delete((void *)v2);
    }
  }
  return a1;
}

__int128 *sub_20C197FD0(__int128 **a1)
{
  unsigned int v2;
  _BYTE *v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 *v7;

  v2 = atomic_load((unsigned int *)*a1 + 12);
  if (v2 != 1)
  {
    v3 = operator new(0x38uLL);
    sub_20C19805C(v3, *a1);
    v4 = (unsigned int *)(v3 + 48);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = *a1;
    *a1 = (__int128 *)v3;
    sub_20C197F60((uint64_t *)&v7);
  }
  return *a1;
}

void sub_20C198048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C19805C(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20BFD6E54((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_20BFD6EA4((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  atomic_store(0, (unsigned int *)__dst + 12);
  return __dst;
}

_BYTE *sub_20C1980D0(_QWORD *a1, __int128 *a2)
{
  _BYTE *v4;
  _BYTE *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new(0x38uLL);
  result = sub_20C19805C(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)(v4 + 48);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C198124(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C198138(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52A408;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C198180(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C1981A4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C1981B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C1981D0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52A458))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C198210(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t *v15[3];
  uint64_t *v16;
  uint64_t *v17;
  void **v18;

  *(_QWORD *)a1 = &unk_24C52A530;
  v7 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v7)
  {
    do
      v8 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v8 + 1, (unsigned int *)v7));
  }
  v9 = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a3;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = &unk_24C52A480;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = 0;
  v12 = (uint64_t **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) == 0)
  {
    v13 = sub_20BFD5244(a2);
    memset(v15, 0, sizeof(v15));
    sub_20C1983E0(v13, a3, v15, &v16);
    if (v12 != &v16)
      sub_20C106430((_QWORD *)(a1 + 48), v16, v17, v17 - v16);
    v18 = (void **)&v16;
    sub_20BEEB2B8(&v18);
    v18 = (void **)v15;
    sub_20BEEB2B8(&v18);
  }
  return a1;
}

void sub_20C198344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, void ***a16)
{
  _QWORD *v16;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v17;
  uint64_t v18;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;

  a16 = &a13;
  sub_20BEEB2B8((void ***)&a16);
  a16 = (void ***)&a10;
  sub_20BEEB2B8((void ***)&a16);
  sub_20BEEB2B8(&a13);
  v20 = v16[4];
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  *v16 = v18 + 16;
  v23 = v16[2];
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1983E0@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0)
      a3 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    else
      a3 = v7;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20BFE538C(a4, *a3, a3[1], a3[1] - *a3);
  return sub_20BF4C2D8((uint64_t)&v7);
}

void sub_20C198498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void **sub_20C1984B4(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20BEEB2B8(&v3);
  return a1;
}

void sub_20C1984EC(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C199064(a1);
  operator delete(v1);
}

double sub_20C198500@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  char *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v4 = "List editor is expired";
  }
  else
  {
    v5 = sub_20BFD5244(v3);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5) & 1) != 0)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    v4 = "Permission denied";
  }
  sub_20BDDC0E4(&v7, v4);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_20C198584(uint64_t a1, void *lpsrc)
{
  uint64_t **v3;
  char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  char v9;

  v3 = (uint64_t **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C52A4F8, (const struct __class_type_info *)&unk_24C52A508, 0);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 40) == *((_DWORD *)v3 + 10))
    {
      sub_20C199104(a1, v3 + 6);
      return 1;
    }
    v5 = "sdf/vectorListEditor.h";
    v6 = "CopyEdits";
    v7 = 223;
    v8 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTo"
         "kenKeyPolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTok"
         "enKeyPolicy, FieldStorageType = pxrInternal__aapl__pxrReserved__::TfToken]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy from list editor in different mode");
  }
  else
  {
    v5 = "sdf/vectorListEditor.h";
    v6 = "CopyEdits";
    v7 = 218;
    v8 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTo"
         "kenKeyPolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTok"
         "enKeyPolicy, FieldStorageType = pxrInternal__aapl__pxrReserved__::TfToken]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy from list editor of different type");
  }
  return 0;
}

BOOL sub_20C198664(uint64_t a1)
{
  int v1;
  uint64_t *v3[3];
  void **v4;

  v1 = *(_DWORD *)(a1 + 40);
  if (v1)
  {
    memset(v3, 0, sizeof(v3));
    sub_20C199104(a1, v3);
    v4 = (void **)v3;
    sub_20BEEB2B8(&v4);
  }
  return v1 != 0;
}

void sub_20C1986B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C1986CC(uint64_t a1)
{
  int v1;
  uint64_t *v3[3];
  void **v4;

  v1 = *(_DWORD *)(a1 + 40);
  if (!v1)
  {
    memset(v3, 0, sizeof(v3));
    sub_20C199104(a1, v3);
    v4 = (void **)v3;
    sub_20BEEB2B8(&v4);
  }
  return v1 == 0;
}

void sub_20C19871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C198734(uint64_t a1, void **a2)
{
  uint64_t **v2;
  void ***v5;
  uint64_t v6;
  uint64_t **Items;
  unsigned __int8 v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15[3];
  void ***v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)(a1 + 48);
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 56))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v8);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems(v8, v2, *(_DWORD *)(a1 + 40));
    v15[0] = (void **)&unk_24C52A5B8;
    v15[1] = (void **)a1;
    v15[2] = a2;
    v16 = v15;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ModifyOperations((uint64_t)v8, (uint64_t)v15, 1);
    v5 = v16;
    if (v16 == v15)
    {
      v6 = 4;
      v5 = v15;
    }
    else
    {
      if (!v16)
      {
LABEL_7:
        Items = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems((uint64_t)v8, *(_DWORD *)(a1 + 40));
        sub_20C199104(a1, Items);
        v15[0] = (void **)&v14;
        sub_20BEEB2B8(v15);
        v15[0] = (void **)&v13;
        sub_20BEEB2B8(v15);
        v15[0] = (void **)&v12;
        sub_20BEEB2B8(v15);
        v15[0] = (void **)&v11;
        sub_20BEEB2B8(v15);
        v15[0] = (void **)&v10;
        sub_20BEEB2B8(v15);
        v15[0] = (void **)&v9;
        sub_20BEEB2B8(v15);
        return;
      }
      v6 = 5;
    }
    ((void (*)(void))(*v5)[v6])();
    goto LABEL_7;
  }
}

void sub_20C198888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 48);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 72);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  sub_20C03507C(&a9);
  _Unwind_Resume(a1);
}

void sub_20C1988D8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v3 = (uint64_t **)(a1 + 48);
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 56))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v7);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems((unsigned __int8 *)&v7, v3, *(_DWORD *)(a1 + 40));
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(&v7, a2, a3);
    v14 = (void **)&v13;
    sub_20BEEB2B8(&v14);
    v14 = (void **)&v12;
    sub_20BEEB2B8(&v14);
    v14 = (void **)&v11;
    sub_20BEEB2B8(&v14);
    v14 = (void **)&v10;
    sub_20BEEB2B8(&v14);
    v14 = (void **)&v9;
    sub_20BEEB2B8(&v14);
    v14 = (void **)&v8;
    sub_20BEEB2B8(&v14);
  }
}

void sub_20C1989A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C03507C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1989BC(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v10;
  uint64_t **Items;
  unsigned __int8 v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  if (*(_DWORD *)(a1 + 40) != a2)
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v13);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems(v13, (uint64_t **)(a1 + 48), a2);
  v10 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperations(v13, a2, a3, a4, a5);
  if ((v10 & 1) != 0)
  {
    Items = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems((uint64_t)v13, a2);
    sub_20C199104(a1, Items);
  }
  v20 = (void **)&v19;
  sub_20BEEB2B8(&v20);
  v20 = (void **)&v18;
  sub_20BEEB2B8(&v20);
  v20 = (void **)&v17;
  sub_20BEEB2B8(&v20);
  v20 = (void **)&v16;
  sub_20BEEB2B8(&v20);
  v20 = (void **)&v15;
  sub_20BEEB2B8(&v20);
  v20 = (void **)&v14;
  sub_20BEEB2B8(&v20);
  return v10;
}

void sub_20C198ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C03507C(&a9);
  _Unwind_Resume(a1);
}

void sub_20C198AE0(uint64_t a1, int a2, void *lpsrc)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **Items;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[3];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  v5 = (uint64_t **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C52A4F8, (const struct __class_type_info *)&unk_24C52A508, 0);
  if (v5)
  {
    v6 = v5;
    if (*(_DWORD *)(a1 + 40) == a2 || *((_DWORD *)v5 + 10) == a2)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v15);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems((unsigned __int8 *)&v15, (uint64_t **)(a1 + 48), a2);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v8);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems((unsigned __int8 *)&v8, v6 + 6, a2);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ComposeOperations((unsigned __int8 *)&v15, (uint64_t)&v8, a2);
      Items = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems((uint64_t)&v15, a2);
      sub_20C199104(a1, Items);
      v22 = (void **)&v14;
      sub_20BEEB2B8(&v22);
      v22 = (void **)&v13;
      sub_20BEEB2B8(&v22);
      v22 = (void **)&v12;
      sub_20BEEB2B8(&v22);
      v22 = (void **)&v11;
      sub_20BEEB2B8(&v22);
      v22 = (void **)&v10;
      sub_20BEEB2B8(&v22);
      v22 = (void **)&v9;
      sub_20BEEB2B8(&v22);
      v8 = (void **)&v21;
      sub_20BEEB2B8(&v8);
      v8 = (void **)&v20;
      sub_20BEEB2B8(&v8);
      v8 = (void **)&v19;
      sub_20BEEB2B8(&v8);
      v8 = (void **)&v18;
      sub_20BEEB2B8(&v8);
      v8 = (void **)&v17;
      sub_20BEEB2B8(&v8);
      v8 = (void **)v16;
      sub_20BEEB2B8(&v8);
    }
  }
  else
  {
    v15 = "sdf/vectorListEditor.h";
    v16[0] = "ApplyList";
    v16[1] = 322;
    v16[2] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNa"
             "meTokenKeyPolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__px"
             "rReserved__::SdfNameTokenKeyPolicy, FieldStorageType = pxrInternal__aapl__pxrReserved__::TfToken]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
  }
}

void sub_20C198CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  sub_20C03507C(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20C198CD8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t **a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *FieldDefinition;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *Text;
  unint64_t v23;
  const char *v24;
  uint64_t *WhyNot;
  const char *v26;
  void *__p[2];
  char v28;
  char v29;
  int v30;
  int v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;

  v5 = a3[1];
  v6 = *a4;
  v7 = a4[1];
  v8 = *a3 == v5 || v6 == v7;
  v9 = *a4;
  if (!v8)
  {
    v20 = *a3 + 8;
    v9 = *a4;
    do
    {
      if ((*(_QWORD *)(v20 - 8) & 0xFFFFFFFFFFFFFFF8) != (*v9 & 0xFFFFFFFFFFFFFFF8))
        break;
      ++v9;
      if (v20 == v5)
        break;
      v20 += 8;
    }
    while (v9 != v7);
  }
  if (v9 != v7)
  {
    v10 = v9;
    while (v6 == v10)
    {
LABEL_12:
      if (++v10 == v7)
        goto LABEL_13;
    }
    v11 = *a4;
    while ((*v10 & 0xFFFFFFFFFFFFFFF8) != (*v11 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v11 == v10)
        goto LABEL_12;
    }
    v32 = "sdf/listEditor.h";
    v33 = "_ValidateEdit";
    v34 = 262;
    v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKe"
          "yPolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy"
          " = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
    v36 = 0;
    v17 = __p;
    sub_20C018DEC(v10);
    if (v28 < 0)
      v17 = (void **)__p[0];
    v18 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0)
        v19 = *(const char **)v19;
    }
    else
    {
      v19 = "";
    }
    sub_20BFD711C(a1, &v30);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v17, v19, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_20BFD265C(&v30);
LABEL_30:
    if (v28 < 0)
      operator delete(__p[0]);
    return 0;
  }
LABEL_13:
  v12 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v12);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (v9 != v7)
    {
      v15 = FieldDefinition;
      while (1)
      {
        sub_20C1995B8(v15, v9, __p);
        if (v29)
          break;
        if (++v9 == v7)
          return 1;
      }
      v32 = "sdf/listEditor.h";
      v33 = "_ValidateEdit";
      v34 = 279;
      v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameToken"
            "KeyPolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePo"
            "licy = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
      v36 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0)
        v26 = (const char *)WhyNot;
      else
        v26 = (const char *)*WhyNot;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v26);
      if (!v29)
        return 0;
      goto LABEL_30;
    }
    return 1;
  }
  else
  {
    v32 = "sdf/listEditor.h";
    v33 = "_ValidateEdit";
    v34 = 273;
    v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKe"
          "yPolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy"
          " = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
    v36 = 0;
    v23 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0)
        v24 = *(const char **)v24;
    }
    else
    {
      v24 = "";
    }
    v16 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v24);
  }
  return v16;
}

void sub_20C198F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C198FD4(uint64_t a1, int a2)
{
  unsigned __int8 v3;

  if (*(_DWORD *)(a1 + 40) == a2)
    return (uint64_t *)(a1 + 48);
  if ((v3 & 1) != 0)
    return &pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy,pxrInternal__aapl__pxrReserved__::TfToken>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty;
  {
    pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy,pxrInternal__aapl__pxrReserved__::TfToken>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty = 0;
    *(_QWORD *)algn_25473C578 = 0;
    qword_25473C580 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy,pxrInternal__aapl__pxrReserved__::TfToken>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty, &dword_20BDBC000);
  }
  return &pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy,pxrInternal__aapl__pxrReserved__::TfToken>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty;
}

uint64_t sub_20C199064(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void **v9;

  *(_QWORD *)a1 = &unk_24C52A480;
  v9 = (void **)(a1 + 48);
  sub_20BEEB2B8(&v9);
  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  *(_QWORD *)a1 = &unk_24C52A530;
  v5 = *(_QWORD *)(a1 + 16);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_20C199104(uint64_t a1, uint64_t **a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  uint64_t **v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v20;
  void **v21[3];
  _BYTE v22[8];
  __int128 v23;
  uint64_t v24;
  const char *v25;
  char v26;
  void ***v27;

  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    *(_QWORD *)&v23 = "sdf/vectorListEditor.h";
    *((_QWORD *)&v23 + 1) = "_UpdateFieldData";
    v24 = 142;
    v25 = "void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyP"
          "olicy>::_UpdateFieldData(const value_vector_type &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTok"
          "enKeyPolicy, FieldStorageType = pxrInternal__aapl__pxrReserved__::TfToken]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    v5 = (uint64_t **)sub_20BFD5244(v4);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5, (uint64_t *)&v23);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v23);
    v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
    v8 = *((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v9 = (unsigned int *)(*((_QWORD *)&v23 + 1) + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    if ((v7 & 1) != 0)
    {
      v12 = *(_QWORD **)(a1 + 48);
      v14 = *a2;
      v13 = a2[1];
      if ((char *)v13 - (char *)*a2 == *(_QWORD *)(a1 + 56) - (_QWORD)v12)
      {
        while (v14 != v13)
        {
          if ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_15;
          ++v14;
          ++v12;
        }
      }
      else
      {
LABEL_15:
        if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)a1 + 96))(a1, *(unsigned int *)(a1 + 40), a1 + 48, a2))
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v22);
          v23 = 0uLL;
          v24 = 0;
          sub_20BFE538C(&v23, *a2, a2[1], a2[1] - *a2);
          v15 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)(a1 + 48) = v23;
          v23 = v15;
          v16 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v24;
          v24 = v16;
          v17 = *a2;
          v18 = a2[1];
          if (*a2 == v18)
          {
            v20 = sub_20BFD5244(v4);
            pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
          }
          else
          {
            memset(v21, 0, sizeof(v21));
            sub_20BFE538C(v21, v17, v18, v18 - v17);
            v19 = sub_20BFD5244(v4);
            sub_20C19939C(v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (uint64_t **)v21);
            v27 = v21;
            sub_20BEEB2B8((void ***)&v27);
          }
          (*(void (**)(uint64_t, _QWORD, __int128 *, uint64_t **))(*(_QWORD *)a1 + 104))(a1, *(unsigned int *)(a1 + 40), &v23, a2);
          v21[0] = (void **)&v23;
          sub_20BEEB2B8(v21);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v22);
        }
      }
    }
    else
    {
      *(_QWORD *)&v23 = "sdf/vectorListEditor.h";
      *((_QWORD *)&v23 + 1) = "_UpdateFieldData";
      v24 = 147;
      v25 = "void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKe"
            "yPolicy>::_UpdateFieldData(const value_vector_type &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNam"
            "eTokenKeyPolicy, FieldStorageType = pxrInternal__aapl__pxrReserved__::TfToken]";
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_20C199340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, int a13, char a14)
{
  a9 = (void **)&a14;
  sub_20BEEB2B8(&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_20C19939C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t **a3)
{
  _BOOL8 v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C526790;
  sub_20C030230(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C199428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C19944C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52A5B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C199488(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52A5B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C1994AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20C199504(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20C1994BC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52A628))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C1994F8()
{
  return &unk_24C52A628;
}

_QWORD *sub_20C199504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_20BE9E974();
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(&v11, v3, a2);
  if (v12)
  {
    v6 = v11;
    *(_QWORD *)a3 = v11;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *(_QWORD *)a3 = v7;
    }
    *(_BYTE *)(a3 + 8) = 1;
    if (v12 && (v11 & 7) != 0)
    {
      v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t *sub_20C1995B8@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, _QWORD *);
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, _QWORD *))result[9];
  if (v3)
  {
    v4 = *result;
    v5 = *a2;
    v8[0] = v5;
    v8[1] = (char *)&off_24C5207B8 + 1;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v8[0] = v6;
    }
    v3(v4, v8);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)v8);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20C199664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C199678(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52A648;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C1996C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C1996E4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C1996F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C199710(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52A698))
    return a1 + 24;
  else
    return 0;
}

void sub_20C199754()
{
}

uint64_t *sub_20C19976C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C19988C((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52A6B0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C52A6B0, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527C50, (void *(*)(void *, BOOL))nullsub_280);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C199840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C19988C(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527C50, (uint64_t)__p);
  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C1998F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C19991C()
{
  sub_20C199DD4();
  return sub_20C199ED4();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(uint64_t a1, uint64_t a2, _DWORD *a3, _OWORD *a4, const pxrInternal__aapl__pxrReserved__::VtDictionary *a5)
{
  void *v10[2];
  uint64_t v11;
  void *__p;
  char v13;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v10, a2);
  if (SHIBYTE(v11) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a1, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(_QWORD *)(a1 + 16) = v11;
  }
  if (v13 < 0)
    operator delete(__p);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  sub_20BFD6E54((_DWORD *)(a1 + 24), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 28), a3 + 1);
  *(_OWORD *)(a1 + 32) = *a4;
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 48), a5);
  return a1;
}

void sub_20C1999F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **pxrInternal__aapl__pxrReserved__::SdfReference::SetCustomData(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t ***v3;
  uint64_t *v5;

  v3 = (uint64_t ***)(a1 + 48);
  if (!a3[1])
    return pxrInternal__aapl__pxrReserved__::VtDictionary::erase(v3, a2);
  v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)v3, (__int128 *)a2);
  return (uint64_t **)sub_20BF4A9BC(v5, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfReference::IsInternal(pxrInternal__aapl__pxrReserved__::SdfReference *this)
{
  uint64_t v1;

  if (*((char *)this + 23) < 0)
    v1 = *((_QWORD *)this + 1);
  else
    v1 = *((unsigned __int8 *)this + 23);
  return v1 == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfReference::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  char *v9;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (*((_QWORD *)a1 + 3) == *((_QWORD *)v6 + 3)
    && pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)a1 + 4, (double *)v6 + 4))
  {
    return pxrInternal__aapl__pxrReserved__::operator==((_QWORD **)a1 + 6, (uint64_t *)v6 + 6, v9);
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfReference::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double *v3;
  int v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  unsigned __int8 *v10;
  size_t v11;
  int v12;
  BOOL v13;
  _BOOL8 result;
  double *v15;
  unint64_t v16;

  v3 = (double *)a1;
  v4 = (char)a2[23];
  v5 = a1[23];
  v7 = *(const void **)a1;
  v6 = *((_QWORD *)a1 + 1);
  if ((v5 & 0x80u) == 0)
    v8 = a1[23];
  else
    v8 = *((_QWORD *)a1 + 1);
  if ((v5 & 0x80u) != 0)
    a1 = *(unsigned __int8 **)a1;
  if (v4 >= 0)
    v9 = a2[23];
  else
    v9 = *((_QWORD *)a2 + 1);
  if (v4 >= 0)
    v10 = a2;
  else
    v10 = *(unsigned __int8 **)a2;
  if (v9 >= v8)
    v11 = v8;
  else
    v11 = v9;
  v12 = memcmp(a1, v10, v11);
  v13 = v8 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  if (v8 != v9)
    return 0;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(v7, v10, v6))
      return 0;
  }
  else if ((_DWORD)v5)
  {
    v15 = v3;
    while (*(unsigned __int8 *)v15 == *v10)
    {
      v15 = (double *)((char *)v15 + 1);
      ++v10;
      if (!--v5)
        goto LABEL_27;
    }
    return 0;
  }
LABEL_27:
  if ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24)) & 1) != 0)return 1;
  if (*((_QWORD *)v3 + 3) != *((_QWORD *)a2 + 3))
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator<(v3 + 4, (double *)a2 + 4))
    return 1;
  result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(v3 + 4, (double *)a2 + 4);
  if (result)
  {
    v16 = pxrInternal__aapl__pxrReserved__::VtDictionary::size((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v3 + 6));
    return v16 < pxrInternal__aapl__pxrReserved__::VtDictionary::size((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 48));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFindReferenceByIdentity(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
    return 0xFFFFFFFFLL;
  while (!sub_20C199FD4((uint64_t)&v7, a2, v2))
  {
    v2 += 56;
    if (v2 == v3)
    {
      v2 = v3;
      break;
    }
  }
  if (v2 == a1[1])
    return 0xFFFFFFFFLL;
  else
    return -1227133513 * ((unint64_t)(v2 - *a1) >> 3);
}

uint64_t *sub_20C199DD4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52A100, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C52A100, (char *)0x38, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C199E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C199ED4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52A6C8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C52A6C8, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C199F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL sub_20C199FD4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *i;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v10, v5))
      return *((_QWORD *)a2 + 3) == *((_QWORD *)a3 + 3);
    return 0;
  }
  if ((_DWORD)v4)
  {
    for (i = a2; *i == *v10; ++i)
    {
      ++v10;
      if (!--v4)
        return *((_QWORD *)a2 + 3) == *((_QWORD *)a3 + 3);
    }
    return 0;
  }
  return *((_QWORD *)a2 + 3) == *((_QWORD *)a3 + 3);
}

void sub_20C19A088()
{
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, int a4@<W3>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t **v12;
  char Spec;
  const char *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t **v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  const char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  const char *Text;
  const char *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  char v41;
  int v42;
  unsigned __int8 v43;

  v43 = a3;
  v42 = a4;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v37 = "sdf/relationshipSpec.cpp";
    v38 = "New";
    v39 = 63;
    v40 = "static SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(const SdfPrimSpecH"
          "andle &, const std::string &, BOOL, SdfVariability)";
    v41 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL owner prim");
LABEL_28:
    *a5 = 0;
    return;
  }
  if ((MEMORY[0x212B9084C](a2) & 1) == 0)
  {
    v37 = "sdf/relationshipSpec.cpp";
    v38 = "New";
    v39 = 69;
    v40 = "static SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(const SdfPrimSpecH"
          "andle &, const std::string &, BOOL, SdfVariability)";
    v41 = 0;
    v28 = sub_20C0B0CA4(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v35);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    if (*(char *)(a2 + 23) >= 0)
      v30 = (const char *)a2;
    else
      v30 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create a relationship on %s with invalid name: %s", Text, v30);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    goto LABEL_28;
  }
  v8 = sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8, &v37);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, &v35);
  if ((v34 & 7) != 0)
  {
    v9 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
  sub_20BFD265C(&v37);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35) & 1) != 0)
  {
    v11 = v43;
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v34);
    v12 = (uint64_t **)sub_20C0B0CA4(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v12, (uint64_t *)&v37);
    Spec = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, 8, v11 == 0);
    v14 = v38;
    if (v38)
    {
      v15 = (unsigned int *)(v38 + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(const char *))(*(_QWORD *)v14 + 8))(v14);
    }
    if ((Spec & 1) != 0)
    {
      v18 = (uint64_t **)sub_20C0B0CA4(a1);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, (uint64_t *)&v37);
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v37);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetRelationshipAtPath(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      v20 = v38;
      if (v38)
      {
        v21 = (unsigned int *)(v38 + 8);
        do
        {
          v22 = __ldxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          (*(void (**)(const char *))(*(_QWORD *)v20 + 8))(v20);
      }
      v24 = sub_20C0B22EC(a5);
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      sub_20C0A9030(v24, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v25 + 64), &v43);
      v26 = sub_20C0B22EC(a5);
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      sub_20C0A9170(v26, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v27 + 464), &v42);
    }
    else
    {
      *a5 = 0;
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v34);
  }
  else
  {
    v37 = "sdf/relationshipSpec.cpp";
    v38 = "New";
    v39 = 77;
    v40 = "static SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(const SdfPrimSpecH"
          "andle &, const std::string &, BOOL, SdfVariability)";
    v41 = 0;
    v31 = sub_20C0B0CA4(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v31, &v34);
    v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
    if (*(char *)(a2 + 23) >= 0)
      v33 = (const char *)a2;
    else
      v33 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create relationship at invalid path <%s.%s>", v32, v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_20BFD265C(&v34);
    *a5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_20BFD265C(&v35);
}

void sub_20C19A3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v15 = a14;
  if (a14)
  {
    v16 = (unsigned int *)(a14 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a11);
  sub_20BFD1A18(&a12);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, &v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C19A564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_MakeCompleteTargetSpecPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;

  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath(this, a2, &v8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C19A604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  sub_20BFD1A18(&a9);
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_GetTargetSpec@<X0>(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v13);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v13);
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_MakeCompleteTargetSpecPath((pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *)this, a2, &v11);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  result = v14;
  if (v14)
  {
    v8 = (unsigned int *)(v14 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C19A6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  unsigned int *v6;
  unsigned int *v7;

  sub_20C0A92A4(this, &v6);
  v3 = v6;
  v7 = v6;
  if (v6)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(&v7, (uint64_t *)v5 + 53, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C19A7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::HasTargetPathList(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(this, &v6);
  if (sub_20BFE71C4((uint64_t)&v6))
    v1 = sub_20BFE7798(v6);
  else
    v1 = 1;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20C19A848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ClearTargetPathList(unsigned int **this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(this, &v4);
  if (sub_20C0AA0E4((uint64_t)&v4))
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20C19A8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v7;
  uint64_t v8;
  __int128 *v9;
  void ***v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v18;
  const pxrInternal__aapl__pxrReserved__::TfToken *v19;
  const pxrInternal__aapl__pxrReserved__::TfToken *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  int *v22;
  int *v23;
  int *v24;
  char *i;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v27;
  char v28;
  const char *v29;
  const char *v30;
  const char *Text;
  const char *v32;
  uint64_t *String;
  const char *v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v36;
  uint64_t v37;
  void ***v38;
  void ***v39;
  _QWORD *v40;
  void ***v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  const char *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  void **v72;
  const pxrInternal__aapl__pxrReserved__::TfToken *v73;
  void ***v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void ***v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(this) & 1) == 0)
  {
    *(_QWORD *)&v53 = "sdf/relationshipSpec.cpp";
    *((_QWORD *)&v53 + 1) = "ReplaceTargetPath";
    v54 = 173;
    v55 = "void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(const SdfPath &, const SdfPath &)";
    v56 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"ReplaceTargetPath: Permission denied.");
    return;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v68);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v66);
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath((pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *)this, a2, (int *)&v65);
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath((pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *)this, a3, (int *)&v64);
  if (v65 != v64)
  {
    v6 = sub_20BFCF650(&v66);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v7)
      v7 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v53 = 0uLL;
    v54 = 0;
    v8 = sub_20C0A683C((uint64_t *)(v6 + 112));
    (*(void (**)(void ***__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v8 + 136))(&v72, v8, &v68, (uint64_t)v7 + 48);
    if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v72))
    {
      if ((v73 & 4) != 0)
        v9 = (__int128 *)(*(uint64_t (**)(void ***))(((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8) + 168))(&v72);
      else
        v9 = (__int128 *)v72;
    }
    else
    {
      v9 = &v53;
    }
    v61 = 0;
    v62 = 0;
    v63 = 0;
    sub_20BFD6D38(&v61, *(_DWORD **)v9, *((_DWORD **)v9 + 1), (uint64_t)(*((_QWORD *)v9 + 1) - *(_QWORD *)v9) >> 3);
    v10 = (void ***)sub_20BF4C2D8((uint64_t)&v72);
    v72 = (void **)&v53;
    sub_20BFD6F90(v10);
    if (v62 != v61)
    {
      v11 = 0;
      v12 = -1;
      v13 = -1;
      do
      {
        v14 = *(_QWORD *)&v61[8 * v11];
        if (v14 == v64)
          v15 = v11;
        else
          v15 = v13;
        if (v14 == v65)
          v12 = v11;
        else
          v13 = v15;
        ++v11;
      }
      while ((v62 - v61) >> 3 != v11);
      if (v12 != -1)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v65, &v80);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64, &v70);
        v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v66);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70))
        {
          Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
          v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_20BFCF650(&v66);
          pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, &v72);
          v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v72;
          v20 = v73;
          while (v19 != v20)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::HoldsChildren(Schema, v19))
            {
              *(_QWORD *)&v53 = "sdf/relationshipSpec.cpp";
              *((_QWORD *)&v53 + 1) = "ReplaceTargetPath";
              v54 = 220;
              v55 = "void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(const SdfPath &, const SdfPath &)";
              v56 = 0;
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
              v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
              String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
              if (*((char *)String + 23) >= 0)
                v34 = (const char *)String;
              else
                v34 = (const char *)*String;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't replace target %s with target %s in relationship %s: %s", Text, v32, v34, "Target already exists");
              *(_QWORD *)&v53 = &v72;
              sub_20BEEB2B8((void ***)&v53);
              goto LABEL_40;
            }
            v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v19 + 8);
          }
          *(_QWORD *)&v53 = &v72;
          sub_20BEEB2B8((void ***)&v53);
          pxrInternal__aapl__pxrReserved__::SdfSpec::_DeleteSpec(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70);
          v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v66);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70))
          {
            *(_QWORD *)&v53 = "sdf/relationshipSpec.cpp";
            *((_QWORD *)&v53 + 1) = "ReplaceTargetPath";
            v54 = 228;
            v55 = "void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(const SdfPath &, const SdfPath &)";
            v56 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v53, "!layer->HasSpec(newTargetSpecPath)", 0);
          }
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::_MoveSpec(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v80, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70) & 1) != 0)
        {
          v22 = (int *)&v61[8 * v12];
          sub_20C01A074(v22, &v64);
          sub_20C01A0C8(v22 + 1, (_DWORD *)&v64 + 1);
          if (v13 != -1)
          {
            sub_20C0D8454((uint64_t)&v53, (int *)&v61[8 * v13 + 8], (int *)v62, (int *)&v61[8 * v13]);
            v24 = v23;
            for (i = v62; i != (char *)v24; sub_20BFD6F64((uint64_t)&v63, i))
              i -= 8;
            v62 = (char *)v24;
          }
          v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v66);
          v27 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v27)
            v27 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          sub_20C0B8F7C(v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v68, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v27 + 48), (_DWORD **)&v61);
          v28 = 1;
        }
        else
        {
          *(_QWORD *)&v53 = "sdf/relationshipSpec.cpp";
          *((_QWORD *)&v53 + 1) = "ReplaceTargetPath";
          v54 = 234;
          v55 = "void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(const SdfPath &, const SdfPath &)";
          v56 = 0;
          v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v65);
          v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot move %s to %s", v29, v30);
LABEL_40:
          v28 = 0;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v71);
        sub_20BFD265C(&v70);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v80 + 1);
        sub_20BFD265C(&v80);
        if ((v28 & 1) == 0)
          goto LABEL_58;
      }
    }
    v35 = sub_20BFCF650(&v66);
    v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v36)
      v36 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v72);
    v37 = sub_20C0A683C((uint64_t *)(v35 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v37 + 136))(&v80, v37, &v68, (uint64_t)v36 + 424);
    if (sub_20BFD6B4C((pxrInternal__aapl__pxrReserved__::VtValue *)&v80))
    {
      if ((v81 & 4) != 0)
        v38 = (void ***)(*(uint64_t (**)(void ****))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(&v80);
      else
        v38 = v80;
    }
    else
    {
      v38 = &v72;
    }
    sub_20BFD6BC4((uint64_t)&v53, (uint64_t)v38);
    v39 = (void ***)sub_20BF4C2D8((uint64_t)&v80);
    v80 = (void ***)&v79;
    sub_20BFD6F90(v39);
    v80 = (void ***)&v78;
    sub_20BFD6F90((void ***)&v80);
    v80 = (void ***)&v77;
    sub_20BFD6F90((void ***)&v80);
    v80 = (void ***)&v76;
    sub_20BFD6F90((void ***)&v80);
    v80 = (void ***)&v75;
    sub_20BFD6F90((void ***)&v80);
    v80 = (void ***)&v73;
    sub_20BFD6F90((void ***)&v80);
    if (!pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::HasItem((uint64_t)&v53, &v65))
    {
LABEL_57:
      v72 = (void **)&v60;
      sub_20BFD6F90(&v72);
      v72 = (void **)&v59;
      sub_20BFD6F90(&v72);
      v72 = (void **)&v58;
      sub_20BFD6F90(&v72);
      v72 = (void **)&v57;
      sub_20BFD6F90(&v72);
      v72 = (void **)&v56;
      sub_20BFD6F90(&v72);
      v72 = (void **)&v53 + 1;
      sub_20BFD6F90(&v72);
LABEL_58:
      *(_QWORD *)&v53 = &v61;
      sub_20BFD6F90((void ***)&v53);
      goto LABEL_59;
    }
    sub_20C028354(&v49, &v65, &v64);
    v74 = 0;
    v40 = operator new(0x20uLL);
    *v40 = &unk_24C52A6E8;
    v40[1] = sub_20C19B23C;
    sub_20C0308C4((_DWORD *)v40 + 4, &v49);
    v74 = (void ***)v40;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ModifyOperations(&v53, (uint64_t)&v72, 0);
    v41 = v74;
    if (v74 == &v72)
    {
      v42 = 4;
      v41 = &v72;
    }
    else
    {
      if (!v74)
      {
LABEL_54:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
        sub_20BFD265C(&v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
        sub_20BFD265C(&v49);
        v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v66);
        v44 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v44)
          v44 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C19B310(v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v68, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v44 + 424), (uint64_t)&v53);
        goto LABEL_57;
      }
      v42 = 5;
    }
    ((void (*)(void))(*v41)[v42])();
    goto LABEL_54;
  }
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
  sub_20BFD265C(&v65);
  v45 = v67;
  if (v67)
  {
    v46 = (unsigned int *)(v67 + 8);
    do
    {
      v47 = __ldxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
  sub_20BFD265C(&v68);
}

void sub_20C19B0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,int a39,int a40,int a41,uint64_t a42,uint64_t a43,int a44,void **a45)
{
  uint64_t v45;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  sub_20BFD1A18(&a45);
  sub_20BFD1A18((_DWORD *)(v45 - 104));
  a45 = (void **)&a36;
  sub_20BFD6F90(&a45);
  sub_20BFD1A18(&a39);
  sub_20BFD1A18(&a41);
  v47 = a43;
  if (a43)
  {
    v48 = (unsigned int *)(a43 + 8);
    do
    {
      v49 = __ldxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  sub_20BFD1A18(&a44);
  _Unwind_Resume(a1);
}

void sub_20C19B234()
{
  JUMPOUT(0x20C19B22CLL);
}

_DWORD *sub_20C19B23C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  if (*(_QWORD *)a3 == *(_QWORD *)result)
  {
    sub_20BFD6E54((_DWORD *)a4, a2);
    v6 = (_DWORD *)(a4 + 4);
    v7 = a2 + 1;
LABEL_6:
    result = sub_20BFD6EA4(v6, v7);
    v8 = 1;
    goto LABEL_7;
  }
  if (*(_QWORD *)a3 != *(_QWORD *)a2)
  {
    sub_20BFD6E54((_DWORD *)a4, a3);
    v6 = (_DWORD *)(a4 + 4);
    v7 = a3 + 1;
    goto LABEL_6;
  }
  v8 = 0;
  *(_BYTE *)a4 = 0;
LABEL_7:
  *(_BYTE *)(a4 + 8) = v8;
  return result;
}

_DWORD *sub_20C19B2C8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  return a1;
}

uint64_t sub_20C19B310(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  unsigned int *v8[3];

  v8[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v8[1] = (unsigned int *)&off_24C5249C8;
  sub_20BFD86E0(v8, a4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C19B3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::RemoveTargetPath(pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  int v20;
  int v21;
  void **v22;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v15);
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath(this, a2, (int *)&v17);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, &v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
  sub_20BFD265C(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v17);
  v15 = 0uLL;
  v16 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::SetChildren(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, &v15);
  v22 = (void **)&v15;
  sub_20BFE69E4(&v22);
  v6 = v18;
  if (v18)
  {
    v7 = (unsigned int *)(v18 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList((unsigned int **)this, &v15);
    sub_20C19B5FC(&v15, a2);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (!*((_QWORD *)&v15 + 1))
      goto LABEL_16;
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList((unsigned int **)this, &v15);
    sub_20C19B810((uint64_t *)&v15, a2);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (!*((_QWORD *)&v15 + 1))
      goto LABEL_16;
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v13);
    while (__stlxr(v12 - 1, v13));
  }
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_16:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  return sub_20BFD265C(&v20);
}

void sub_20C19B554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, int a15, int a16)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a14);
  sub_20BFD1A18(&a16);
  _Unwind_Resume(a1);
}

void sub_20C19B5FC(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;

  if (sub_20C0AA0E4((uint64_t)a1)
    && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1))
    {
      v4 = (std::__shared_weak_count *)a1[1];
      v26 = *a1;
      v27 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v28 = 0;
      sub_20C19BF70((unsigned int *)&v26, a2);
      v7 = v27;
      if (v27)
      {
        v8 = (unint64_t *)&v27->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
LABEL_33:
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v10 = (std::__shared_weak_count *)a1[1];
      v26 = *a1;
      v27 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v28 = 1;
      sub_20C19BF70((unsigned int *)&v26, a2);
      v13 = v27;
      if (v27)
      {
        v14 = (unint64_t *)&v27->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)a1[1];
      v26 = *a1;
      v27 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v28 = 4;
      sub_20C19BF70((unsigned int *)&v26, a2);
      v19 = v27;
      if (v27)
      {
        v20 = (unint64_t *)&v27->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)a1[1];
      v26 = *a1;
      v27 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v28 = 5;
      sub_20C19BF70((unsigned int *)&v26, a2);
      v7 = v27;
      if (v27)
      {
        v25 = (unint64_t *)&v27->__shared_owners_;
        do
          v9 = __ldaxr(v25);
        while (__stlxr(v9 - 1, v25));
        goto LABEL_33;
      }
    }
  }
}

void sub_20C19B7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *sub_20C19B810(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock *result;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  int v43;
  char v44[8];

  result = (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)sub_20C0AA0E4((uint64_t)a1);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v44);
    v5 = (std::__shared_weak_count *)a1[1];
    v41 = *a1;
    v42 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v43 = 0;
    sub_20C19BF70((unsigned int *)&v41, a2);
    v8 = v42;
    if (v42)
    {
      v9 = (unint64_t *)&v42->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)a1[1];
    v41 = *a1;
    v42 = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v43 = 1;
    sub_20C19BF70((unsigned int *)&v41, a2);
    v14 = v42;
    if (v42)
    {
      v15 = (unint64_t *)&v42->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)a1[1];
    v41 = *a1;
    v42 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v43 = 4;
    sub_20C19BF70((unsigned int *)&v41, a2);
    v20 = v42;
    if (v42)
    {
      v21 = (unint64_t *)&v42->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)a1[1];
    v41 = *a1;
    v42 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v43 = 5;
    sub_20C19BF70((unsigned int *)&v41, a2);
    v26 = v42;
    if (v42)
    {
      v27 = (unint64_t *)&v42->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)a1[1];
    v41 = *a1;
    v42 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v43 = 2;
    sub_20C19BF70((unsigned int *)&v41, a2);
    v32 = v42;
    if (v42)
    {
      v33 = (unint64_t *)&v42->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)a1[1];
    v41 = *a1;
    v42 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v43 = 3;
    sub_20C19BF70((unsigned int *)&v41, a2);
    v38 = v42;
    if (v42)
    {
      v39 = (unint64_t *)&v42->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v44);
  }
  return result;
}

void sub_20C19BADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetNoLoadHint(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned __int8 *v3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 224), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    v3 = (unsigned __int8 *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 224));
    v3 = (unsigned __int8 *)sub_20BFB0910(Fallback);
  }
  v7 = *v3;
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C19BBF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::SetNoLoadHint(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  char v5;

  v5 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0A9030(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 224), &v5);
}

uint64_t *sub_20C19BC68()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C0AA054((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527C68, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527C68, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527B00, (void *(*)(void *, BOOL))nullsub_281);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C19BD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C19BD8C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C52A6E8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C19BDE0(_DWORD *a1)
{
  *(_QWORD *)a1 = &unk_24C52A6E8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_20BFD265C(a1 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  operator delete(a1);
}

_QWORD *sub_20C19BE34(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x20uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &unk_24C52A6E8;
  v2[1] = v3;
  sub_20C0D9B58((_DWORD *)v2 + 4, (_DWORD *)(a1 + 16));
  return v2;
}

_DWORD *sub_20C19BE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C52A6E8;
  *(_QWORD *)(a2 + 8) = v2;
  return sub_20C0D9B58((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
}

_DWORD *sub_20C19BEA0(uint64_t a1)
{
  return sub_20C19BF30((_DWORD *)(a1 + 8));
}

void sub_20C19BEA8(_DWORD *a1)
{
  sub_20C19BF30(a1 + 2);
  operator delete(a1);
}

uint64_t sub_20C19BED0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 24, a2);
}

uint64_t sub_20C19BEE8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52A758))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C19BF24()
{
  return &unk_24C52A758;
}

_DWORD *sub_20C19BF30(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  return sub_20BFD265C(a1 + 2);
}

void sub_20C19BF70(unsigned int *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  void **v7;

  v3 = sub_20C19C024((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(_QWORD *)a1)
    {
      v4 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a1[4]);
      v5 = (uint64_t)(v4[1] - *v4) >> 3;
    }
    else
    {
      v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_20C19C0C8(a1, v5, 0, v6);
    v7 = (void **)v6;
    sub_20BFD6F90(&v7);
  }
  else
  {
    sub_20C19C068(a1, v3);
  }
}

void sub_20C19C00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C19C024(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_20BFE738C(a1))
    return sub_20C19C230(*(pxrInternal__aapl__pxrReserved__::Sdf_Identity ***)a1, *(unsigned int *)(a1 + 16), a2);
  else
    return -1;
}

void sub_20C19C068(unsigned int *a1, uint64_t a2)
{
  _QWORD v2[3];
  void **v3;

  memset(v2, 0, sizeof(v2));
  sub_20C19C0C8(a1, a2, 1, v2);
  v3 = (void **)v2;
  sub_20BFD6F90(&v3);
}

void sub_20C19C0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

void sub_20C19C0C8(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *WhyNot;
  const char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  void *__p[2];
  char v16;
  char v17;

  if (sub_20C19C2E0((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 32))(__p, *(_QWORD *)a1, a1[4]);
      if (v17)
      {
        v10 = "sdf/listProxy.h";
        v11 = "_Edit";
        v12 = 750;
        v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_"
              "Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
        v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0)
          v9 = (const char *)WhyNot;
        else
          v9 = (const char *)*WhyNot;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0)
          operator delete(__p[0]);
      }
    }
    else if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      v10 = "sdf/listProxy.h";
      v11 = "_Edit";
      v12 = 758;
      v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_Ed"
            "it(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
      v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_20C19C20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C19C230(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;

  v4 = a1 + 3;
  v5 = (*((uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*a1 + 14))(a1);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  sub_20BFD88E0(v4, a3, (int *)&v9);
  if (v6 != v7)
  {
    while (*v6 != v9)
    {
      if (++v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_20BFD265C(&v9);
  if (v6 == *(_QWORD **)(v5 + 8))
    return -1;
  else
    return ((uint64_t)v6 - *(_QWORD *)v5) >> 3;
}

uint64_t sub_20C19C2E0(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_Va"
            "lidate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfSchemaE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdfSchema*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdfSchema*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)operator new(0x3B8uLL);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(v10);
      *(_QWORD *)v10 = off_24C52A7A0;
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_C"
                "reateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::SdfSchema]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_C"
                "reateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::SdfSchema]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdfSchema*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_9SdfSchemaEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20C19C548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::SetI"
            "nstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::SdfSchema]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::DeleteInstance()
{
  uint64_t result;
  unint64_t v1;

  for (result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        result;
        result = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (v1 == result)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance))return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase *pxrInternal__aapl__pxrReserved__::SdfSchema::SdfSchema(pxrInternal__aapl__pxrReserved__::SdfSchema *this)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *result;

  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(this);
  *(_QWORD *)result = off_24C52A7A0;
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *result;

  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(this);
  *(_QWORD *)result = off_24C52A7A0;
  return result;
}

void sub_20C19C6CC()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS);
  }
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::FieldDefinition(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)this = a2;
  v5 = *(_QWORD *)a3;
  *((_QWORD *)this + 1) = *(_QWORD *)a3;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *((_QWORD *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF4C6D0((_QWORD *)this + 2, a4);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_DWORD *)((char *)this + 55) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetName(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return (uint64_t)this + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return (uint64_t)this + 16;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetInfo(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return (uint64_t)this + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsPlugin(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsReadOnly(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::HoldsChildren(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return *((unsigned __int8 *)this + 58);
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::FallbackValue(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  sub_20BF4A9BC((_QWORD *)this + 2, a2);
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::Plugin(uint64_t this)
{
  *(_BYTE *)(this + 56) = 1;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::ReadOnly(uint64_t this)
{
  *(_BYTE *)(this + 57) = 1;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::Children(uint64_t this)
{
  *(_WORD *)(this + 57) = 257;
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::AddInfo(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::JsValue *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD v17[2];
  std::__shared_weak_count *v18;

  v4 = (uint64_t *)((char *)this + 32);
  v5 = *(_QWORD *)a2;
  v17[0] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v17[0] = v6;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
  v17[1] = *(_QWORD *)a3;
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20C19C940(v4, (uint64_t)v17);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((v17[0] & 7) != 0)
  {
    v14 = (unsigned int *)(v17[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  return this;
}

void sub_20C19C90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;
  unsigned int *v12;
  unsigned int v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C19C940(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_20BDE4FF4(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_QWORD *)v14 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_20C1B31C4(a1, v16);
    v8 = a1[1];
    result = sub_20C1B3360((uint64_t)v16);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_20C19CA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1B3360((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::ValueValidator(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 64) = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::ListValueValidator(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::MapKeyValidator(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::MapValueValidator(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 88) = a2;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetFields@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;

  result = sub_20C143C84(a2, *((_QWORD *)this + 3));
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  if (v4)
  {
    result = (_QWORD *)*result;
    do
    {
      v5 = result + 1;
      sub_20BF32220(result, v4 + 2);
      v4 = (_QWORD *)*v4;
      result = v5;
    }
    while (v4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFields@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v13 = *(_QWORD *)(this + 16);
  v14 = 0;
  while (v13 != v14)
  {
    if (*(_BYTE *)(*sub_20C19CBB4(&v13, a2, a3) + 25))
    {
      v7 = (uint64_t *)(*sub_20C19CBB4(&v13, v5, v6) + 16);
      v8 = *(uint64_t **)(a4 + 8);
      if ((unint64_t)v8 >= *(_QWORD *)(a4 + 16))
      {
        v12 = sub_20BFCA068((char **)a4, v7);
      }
      else
      {
        v9 = *v7;
        *v8 = *v7;
        if ((v9 & 7) != 0)
        {
          v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 2, v10));
          if ((v11 & 1) == 0)
            *v8 &= 0xFFFFFFFFFFFFFFF8;
        }
        v12 = (char *)(v8 + 1);
      }
      *(_QWORD *)(a4 + 8) = v12;
    }
    this = sub_20C19CC2C((uint64_t)&v13);
  }
  return this;
}

void sub_20C19CB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C19CBB4(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfHashMap<pxr"
            "Internal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_FieldInfo, pxrInte"
            "rnal__aapl__pxrReserved__::TfToken::HashFunctor>>::operator->() [T = const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<pxrInternal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_Fiel"
            "dInfo, pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C19CC2C(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<pxrInternal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_Fiel"
            "dInfo, pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor>>::operator++() [T = const pxrInternal__aapl__"
            "pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::SdfSch"
            "emaBase::_FieldInfo, pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v2;
  BOOL v3;

  v2 = sub_20BF2B2B4(this, a2);
  if (v2)
    v3 = *((_BYTE *)v2 + 25) != 0;
  return (v2 != 0) & v3;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFieldDisplayGroup@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, unsigned int **a3@<X8>)
{
  _QWORD *result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;

  result = sub_20BF2B2B4(this, a2);
  if (!result || !*((_BYTE *)result + 25))
  {
    v6 = 0;
LABEL_9:
    *a3 = v6;
    return result;
  }
  v5 = (unsigned int *)result[4];
  *a3 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      goto LABEL_9;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v2;
  BOOL v3;

  v2 = sub_20BF2B2B4(this, a2);
  if (v2)
    v3 = *((_BYTE *)v2 + 24) != 0;
  return (v2 != 0) & v3;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsValidField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_20BF2B2B4(this, a2) != 0;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField(this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6, a3);
  if ((v6 & 7) != 0)
  {
    v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[8];
  uint64_t v11;

  v10[1] = 1;
  v11 = 0;
  sub_20BF32220(&v11, a3);
  v10[0] = a4;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::_AddField(*((_QWORD *)this + 1), (uint64_t *)a2, v10);
  if (a4)
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_AddRequiredFieldName(*(char **)this, a2);
  if ((v11 & 7) != 0)
  {
    v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::_AddField(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  const char *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  char v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;

  sub_20C1AE388((uint64_t)&v28, a2, (uint64_t)a3);
  v23 = v28;
  LOWORD(v24) = v29;
  v25 = v30;
  v28 = 0;
  v30 = 0;
  sub_20C1B3404(a1, &v23, (uint64_t *)&v23);
  if ((v25 & 7) != 0)
  {
    v7 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v23 & 7) != 0)
  {
    v9 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((v30 & 7) != 0)
  {
    v11 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if ((v28 & 7) != 0)
  {
    v13 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if ((v6 & 1) != 0)
  {
    if (*a3)
    {
      v19 = *(char **)(a1 + 40);
      v17 = *(char **)(a1 + 48);
      v18 = (_QWORD *)(a1 + 40);
      if (v17 != v19)
      {
        v20 = (v17 - v19) >> 3;
        do
        {
          v21 = (uint64_t *)&v19[8 * (v20 >> 1)];
          v22 = sub_20BF1E6D8((uint64_t)&v23, v21, a2);
          if (v22)
            v20 += ~(v20 >> 1);
          else
            v20 >>= 1;
          if (v22)
            v19 = (char *)(v21 + 1);
        }
        while (v20);
        v17 = v19;
      }
      sub_20C0B66C4(v18, v17, (char *)a2);
    }
  }
  else
  {
    v23 = (unint64_t)"sdf/schema.cpp";
    v24 = "_AddField";
    v25 = 304;
    v26 = "void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::_AddField(const TfToken &, const _FieldInfo &)";
    v27 = 0;
    v15 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      v16 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0)
        v16 = *(const char **)v16;
    }
    else
    {
      v16 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate registration for field '%s'", v16);
  }
}

void sub_20C19D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  if ((v10 & 7) != 0)
  {
    v5 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C96B6F0((uint64_t *)va, v3, (uint64_t *)va1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_AddRequiredFieldName(char *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = this;
  v3 = (_QWORD *)*((_QWORD *)this + 116);
  v4 = (_QWORD *)*((_QWORD *)this + 117);
  if (v3 != v4)
  {
    while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v3 == v4)
      {
        v3 = (_QWORD *)*((_QWORD *)this + 117);
        break;
      }
    }
  }
  if (v3 == v4)
  {
    if ((unint64_t)v4 >= *((_QWORD *)this + 118))
    {
      this = sub_20BFCA068((char **)this + 116, (uint64_t *)a2);
    }
    else
    {
      v5 = *(_QWORD *)a2;
      *v4 = *(_QWORD *)a2;
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 2, v6));
        if ((v7 & 1) == 0)
          *v4 &= 0xFFFFFFFFFFFFFFF8;
      }
      this = (char *)(v4 + 1);
    }
    *((_QWORD *)v2 + 117) = this;
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;

  v9[1] = 0;
  v10 = 0;
  v9[0] = a3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::_AddField(*((_QWORD *)this + 1), (uint64_t *)a2, v9);
  if (a3)
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_AddRequiredFieldName(*(char **)this, a2);
  if ((v10 & 7) != 0)
  {
    v6 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::CopyFrom(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *this, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if ((const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)v3 != a2)
  {
    *(_DWORD *)(v3 + 32) = *((_DWORD *)a2 + 8);
    sub_20C1AE3FC((_QWORD *)v3, *((uint64_t **)a2 + 2), 0);
    sub_20C106430((_QWORD *)(v3 + 40), *((uint64_t **)a2 + 5), *((uint64_t **)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType::~SdfChildrenKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void **v28;

  v28 = (void **)((char *)this + 72);
  sub_20BEEB2B8(&v28);
  v2 = *((_QWORD *)this + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 7);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 6);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 5);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 4);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 3);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 2);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v26 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType::SdfChildrenKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "connectionChildren", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "expressionChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "mapperArgChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "mapperChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "primChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "properties", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "targetChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "variantChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "variantSetChildren", 0);
  v3 = *(_QWORD *)this;
  v41 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *v2;
  v42 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_QWORD *)this + 2);
  v43 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *((_QWORD *)this + 3);
  v44 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *((_QWORD *)this + 4);
  v45 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  v18 = *((_QWORD *)this + 5);
  v46 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  v21 = *((_QWORD *)this + 6);
  v47 = v21;
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v24 = *((_QWORD *)this + 7);
  v48 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v27 = *((_QWORD *)this + 8);
  v49 = v27;
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 2, v28));
    if ((v29 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v30 = operator new(0x48uLL);
  v31 = 0;
  *((_QWORD *)this + 9) = v30;
  *((_QWORD *)this + 10) = v30;
  *((_QWORD *)this + 11) = v30 + 9;
  do
  {
    v32 = *(&v41 + v31);
    *v30 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) == 0)
        *v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v31;
    ++v30;
  }
  while (v31 != 9);
  v35 = &v50;
  *((_QWORD *)this + 10) = v30;
  do
  {
    v37 = *--v35;
    v36 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
  }
  while (v35 != &v41);
  return this;
}

void sub_20C19D798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;

  sub_20BEEB2B8(&a9);
  v30 = &a20;
  while (1)
  {
    v32 = *--v30;
    v31 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    if (v30 == (uint64_t *)&a11)
    {
      if ((*v28 & 7) != 0)
      {
        v35 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((*v27 & 7) != 0)
      {
        v37 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((*v26 & 7) != 0)
      {
        v39 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v25 & 7) != 0)
      {
        v41 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v24 & 7) != 0)
      {
        v43 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v23 & 7) != 0)
      {
        v45 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v22 & 7) != 0)
      {
        v47 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v21 & 7) != 0)
      {
        v49 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v20 & 7) != 0)
      {
        v51 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  void **v187;

  v187 = (void **)((char *)this + 496);
  sub_20BEEB2B8(&v187);
  v2 = *((_QWORD *)this + 61);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 60);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 59);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 58);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 57);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 56);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 55);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 54);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 53);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 52);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 51);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 50);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 49);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 48);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 47);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 46);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 45);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 44);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 43);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 42);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 41);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 40);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 39);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 38);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 37);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 36);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 35);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 34);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 33);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 32);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 31);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *((_QWORD *)this + 30);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *((_QWORD *)this + 29);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *((_QWORD *)this + 28);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *((_QWORD *)this + 27);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *((_QWORD *)this + 26);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *((_QWORD *)this + 25);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *((_QWORD *)this + 24);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *((_QWORD *)this + 23);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *((_QWORD *)this + 22);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *((_QWORD *)this + 21);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *((_QWORD *)this + 20);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v128 = *((_QWORD *)this + 19);
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  v131 = *((_QWORD *)this + 18);
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  v134 = *((_QWORD *)this + 17);
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  v137 = *((_QWORD *)this + 16);
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = *((_QWORD *)this + 15);
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  v143 = *((_QWORD *)this + 14);
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  v146 = *((_QWORD *)this + 13);
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stlxr(v148 - 2, v147));
  }
  v149 = *((_QWORD *)this + 12);
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stlxr(v151 - 2, v150));
  }
  v152 = *((_QWORD *)this + 11);
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stlxr(v154 - 2, v153));
  }
  v155 = *((_QWORD *)this + 10);
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stlxr(v157 - 2, v156));
  }
  v158 = *((_QWORD *)this + 9);
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  v161 = *((_QWORD *)this + 8);
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stlxr(v163 - 2, v162));
  }
  v164 = *((_QWORD *)this + 7);
  if ((v164 & 7) != 0)
  {
    v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stlxr(v166 - 2, v165));
  }
  v167 = *((_QWORD *)this + 6);
  if ((v167 & 7) != 0)
  {
    v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stlxr(v169 - 2, v168));
  }
  v170 = *((_QWORD *)this + 5);
  if ((v170 & 7) != 0)
  {
    v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stlxr(v172 - 2, v171));
  }
  v173 = *((_QWORD *)this + 4);
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stlxr(v175 - 2, v174));
  }
  v176 = *((_QWORD *)this + 3);
  if ((v176 & 7) != 0)
  {
    v177 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stlxr(v178 - 2, v177));
  }
  v179 = *((_QWORD *)this + 2);
  if ((v179 & 7) != 0)
  {
    v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stlxr(v181 - 2, v180));
  }
  v182 = *((_QWORD *)this + 1);
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stlxr(v184 - 2, v183));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v185 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v186 = __ldxr(v185);
    while (__stlxr(v186 - 2, v185));
  }
}

pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  unsigned int v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int *v196;
  unsigned int v197;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;

  v262 = *MEMORY[0x24BDAC8D0];
  v199 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "active", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v199, "allowedTokens", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "assetInfo", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "colorConfiguration", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "colorManagementSystem", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "colorSpace", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "comment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "connectionPaths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "custom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "customData", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "customLayerData", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "default", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "defaultPrim", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "displayGroup", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "displayGroupOrder", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "displayName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "displayUnit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "documentation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "endTimeCode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "expressionVariables", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "framePrecision", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "framesPerSecond", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "hidden", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "hasOwnedSubLayers", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "inheritPaths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "instanceable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "kind", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "primOrder", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "noLoadHint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "owner", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "payload", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "permission", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "prefix", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "prefixSubstitutions", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "propertyOrder", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "references", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "relocates", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "sessionOwner", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "specializes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "specifier", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "startTimeCode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "playbackMode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 336, "autoPlay", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 344, "preliminary:collidesWithEnvironment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 352, "sceneName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 360, "subLayers", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 368, "subLayerOffsets", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 376, "suffix", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 384, "suffixSubstitutions", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 392, "symmetricPeer", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 400, "symmetryArgs", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 408, "symmetryArguments", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 416, "symmetryFunction", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 424, "targetPaths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 432, "timeSamples", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 440, "timeCodesPerSecond", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 448, "typeName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 456, "variantSelection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 464, "variability", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 472, "variantSetNames", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 480, "endFrame", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 488, "startFrame", 0);
  v2 = *(_QWORD *)this;
  v200 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v200 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v199;
  v201 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v201 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v202 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v202 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v203 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v203 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v204 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v204 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v205 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v205 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v206 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v206 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v207 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v207 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v208 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v208 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v209 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v209 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v210 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v210 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v211 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v211 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v212 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v212 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v213 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v213 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v214 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v214 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v215 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v215 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v216 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v216 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v217 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v217 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v218 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v218 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v219 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v219 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v220 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v220 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v221 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v221 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v222 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v222 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v223 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v223 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v224 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v224 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v225 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v225 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v226 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v226 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v227 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v227 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v228 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v228 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v229 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v229 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v230 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v230 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v231 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v231 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v232 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v232 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v233 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v233 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v234 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v234 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v235 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v235 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v236 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v236 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v237 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v237 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v238 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v238 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v239 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v239 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v240 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v240 &= 0xFFFFFFFFFFFFFFF8;
  }
  v125 = *((_QWORD *)this + 41);
  v241 = v125;
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 2, v126));
    if ((v127 & 1) == 0)
      v241 &= 0xFFFFFFFFFFFFFFF8;
  }
  v128 = *((_QWORD *)this + 42);
  v242 = v128;
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 2, v129));
    if ((v130 & 1) == 0)
      v242 &= 0xFFFFFFFFFFFFFFF8;
  }
  v131 = *((_QWORD *)this + 43);
  v243 = v131;
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 2, v132));
    if ((v133 & 1) == 0)
      v243 &= 0xFFFFFFFFFFFFFFF8;
  }
  v134 = *((_QWORD *)this + 44);
  v244 = v134;
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 2, v135));
    if ((v136 & 1) == 0)
      v244 &= 0xFFFFFFFFFFFFFFF8;
  }
  v137 = *((_QWORD *)this + 45);
  v245 = v137;
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 2, v138));
    if ((v139 & 1) == 0)
      v245 &= 0xFFFFFFFFFFFFFFF8;
  }
  v140 = *((_QWORD *)this + 46);
  v246 = v140;
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 2, v141));
    if ((v142 & 1) == 0)
      v246 &= 0xFFFFFFFFFFFFFFF8;
  }
  v143 = *((_QWORD *)this + 47);
  v247 = v143;
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 2, v144));
    if ((v145 & 1) == 0)
      v247 &= 0xFFFFFFFFFFFFFFF8;
  }
  v146 = *((_QWORD *)this + 48);
  v248 = v146;
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 2, v147));
    if ((v148 & 1) == 0)
      v248 &= 0xFFFFFFFFFFFFFFF8;
  }
  v149 = *((_QWORD *)this + 49);
  v249 = v149;
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 2, v150));
    if ((v151 & 1) == 0)
      v249 &= 0xFFFFFFFFFFFFFFF8;
  }
  v152 = *((_QWORD *)this + 50);
  v250 = v152;
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 2, v153));
    if ((v154 & 1) == 0)
      v250 &= 0xFFFFFFFFFFFFFFF8;
  }
  v155 = *((_QWORD *)this + 51);
  v251 = v155;
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 2, v156));
    if ((v157 & 1) == 0)
      v251 &= 0xFFFFFFFFFFFFFFF8;
  }
  v158 = *((_QWORD *)this + 52);
  v252 = v158;
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 2, v159));
    if ((v160 & 1) == 0)
      v252 &= 0xFFFFFFFFFFFFFFF8;
  }
  v161 = *((_QWORD *)this + 53);
  v253 = v161;
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stxr(v163 + 2, v162));
    if ((v163 & 1) == 0)
      v253 &= 0xFFFFFFFFFFFFFFF8;
  }
  v164 = *((_QWORD *)this + 54);
  v254 = v164;
  if ((v164 & 7) != 0)
  {
    v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 2, v165));
    if ((v166 & 1) == 0)
      v254 &= 0xFFFFFFFFFFFFFFF8;
  }
  v167 = *((_QWORD *)this + 55);
  v255 = v167;
  if ((v167 & 7) != 0)
  {
    v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stxr(v169 + 2, v168));
    if ((v169 & 1) == 0)
      v255 &= 0xFFFFFFFFFFFFFFF8;
  }
  v170 = *((_QWORD *)this + 56);
  v256 = v170;
  if ((v170 & 7) != 0)
  {
    v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 2, v171));
    if ((v172 & 1) == 0)
      v256 &= 0xFFFFFFFFFFFFFFF8;
  }
  v173 = *((_QWORD *)this + 57);
  v257 = v173;
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stxr(v175 + 2, v174));
    if ((v175 & 1) == 0)
      v257 &= 0xFFFFFFFFFFFFFFF8;
  }
  v176 = *((_QWORD *)this + 58);
  v258 = v176;
  if ((v176 & 7) != 0)
  {
    v177 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 2, v177));
    if ((v178 & 1) == 0)
      v258 &= 0xFFFFFFFFFFFFFFF8;
  }
  v179 = *((_QWORD *)this + 59);
  v259 = v179;
  if ((v179 & 7) != 0)
  {
    v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 2, v180));
    if ((v181 & 1) == 0)
      v259 &= 0xFFFFFFFFFFFFFFF8;
  }
  v182 = *((_QWORD *)this + 60);
  v260 = v182;
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 2, v183));
    if ((v184 & 1) == 0)
      v260 &= 0xFFFFFFFFFFFFFFF8;
  }
  v185 = *((_QWORD *)this + 61);
  v261 = v185;
  if ((v185 & 7) != 0)
  {
    v186 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 2, v186));
    if ((v187 & 1) == 0)
      v261 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  v188 = operator new(0x1F0uLL);
  v189 = 0;
  *((_QWORD *)this + 62) = v188;
  *((_QWORD *)this + 63) = v188;
  *((_QWORD *)this + 64) = v188 + 62;
  do
  {
    v190 = *(&v200 + v189);
    *v188 = v190;
    if ((v190 & 7) != 0)
    {
      v191 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
      do
        v192 = __ldxr(v191);
      while (__stxr(v192 + 2, v191));
      if ((v192 & 1) == 0)
        *v188 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v189;
    ++v188;
  }
  while (v189 != 62);
  v193 = &v262;
  *((_QWORD *)this + 63) = v188;
  do
  {
    v195 = *--v193;
    v194 = v195;
    if ((v195 & 7) != 0)
    {
      v196 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
      do
        v197 = __ldxr(v196);
      while (__stlxr(v197 - 2, v196));
    }
  }
  while (v193 != &v200);
  return this;
}

void sub_20C19F588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,_QWORD *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,_QWORD *a48,_QWORD *a49,_QWORD *a50,_QWORD *a51,_QWORD *a52,_QWORD *a53,_QWORD *a54,_QWORD *a55,_QWORD *a56,_QWORD *a57,_QWORD *a58,_QWORD *a59,_QWORD *a60,_QWORD *a61,_QWORD *a62,void **a63)
{
  char a65;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int *v202;
  unsigned int v203;

  sub_20BEEB2B8(&a63);
  v75 = (char *)&STACK[0x3B0];
  while (1)
  {
    v77 = *((_QWORD *)v75 - 1);
    v75 -= 8;
    v76 = v77;
    if ((v77 & 7) != 0)
    {
      v78 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
      do
        v79 = __ldxr(v78);
      while (__stlxr(v79 - 2, v78));
    }
    if (v75 == &a65)
    {
      if ((*v72 & 7) != 0)
      {
        v80 = (unsigned int *)(*v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*v71 & 7) != 0)
      {
        v82 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*v70 & 7) != 0)
      {
        v84 = (unsigned int *)(*v70 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*v69 & 7) != 0)
      {
        v86 = (unsigned int *)(*v69 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*v68 & 7) != 0)
      {
        v88 = (unsigned int *)(*v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*v67 & 7) != 0)
      {
        v90 = (unsigned int *)(*v67 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v66 & 7) != 0)
      {
        v92 = (unsigned int *)(*v66 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*v74 & 7) != 0)
      {
        v94 = (unsigned int *)(*v74 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*v73 & 7) != 0)
      {
        v96 = (unsigned int *)(*v73 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a11 & 7) != 0)
      {
        v98 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a12 & 7) != 0)
      {
        v100 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a13 & 7) != 0)
      {
        v102 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a14 & 7) != 0)
      {
        v104 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a15 & 7) != 0)
      {
        v106 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a16 & 7) != 0)
      {
        v108 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a17 & 7) != 0)
      {
        v110 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a18 & 7) != 0)
      {
        v112 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a19 & 7) != 0)
      {
        v114 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a20 & 7) != 0)
      {
        v116 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a21 & 7) != 0)
      {
        v118 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a22 & 7) != 0)
      {
        v120 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a23 & 7) != 0)
      {
        v122 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a24 & 7) != 0)
      {
        v124 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a25 & 7) != 0)
      {
        v126 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a26 & 7) != 0)
      {
        v128 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a27 & 7) != 0)
      {
        v130 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a28 & 7) != 0)
      {
        v132 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a29 & 7) != 0)
      {
        v134 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*a30 & 7) != 0)
      {
        v136 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      if ((*a31 & 7) != 0)
      {
        v138 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v139 = __ldxr(v138);
        while (__stlxr(v139 - 2, v138));
      }
      if ((*a32 & 7) != 0)
      {
        v140 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v141 = __ldxr(v140);
        while (__stlxr(v141 - 2, v140));
      }
      if ((*a33 & 7) != 0)
      {
        v142 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      if ((*a34 & 7) != 0)
      {
        v144 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      if ((*a35 & 7) != 0)
      {
        v146 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v147 = __ldxr(v146);
        while (__stlxr(v147 - 2, v146));
      }
      if ((*a36 & 7) != 0)
      {
        v148 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v149 = __ldxr(v148);
        while (__stlxr(v149 - 2, v148));
      }
      if ((*a37 & 7) != 0)
      {
        v150 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v151 = __ldxr(v150);
        while (__stlxr(v151 - 2, v150));
      }
      if ((*a38 & 7) != 0)
      {
        v152 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v153 = __ldxr(v152);
        while (__stlxr(v153 - 2, v152));
      }
      if ((*a39 & 7) != 0)
      {
        v154 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v155 = __ldxr(v154);
        while (__stlxr(v155 - 2, v154));
      }
      if ((*a40 & 7) != 0)
      {
        v156 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v157 = __ldxr(v156);
        while (__stlxr(v157 - 2, v156));
      }
      if ((*a41 & 7) != 0)
      {
        v158 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v159 = __ldxr(v158);
        while (__stlxr(v159 - 2, v158));
      }
      if ((*a42 & 7) != 0)
      {
        v160 = (unsigned int *)(*a42 & 0xFFFFFFFFFFFFFFF8);
        do
          v161 = __ldxr(v160);
        while (__stlxr(v161 - 2, v160));
      }
      if ((*a43 & 7) != 0)
      {
        v162 = (unsigned int *)(*a43 & 0xFFFFFFFFFFFFFFF8);
        do
          v163 = __ldxr(v162);
        while (__stlxr(v163 - 2, v162));
      }
      if ((*a44 & 7) != 0)
      {
        v164 = (unsigned int *)(*a44 & 0xFFFFFFFFFFFFFFF8);
        do
          v165 = __ldxr(v164);
        while (__stlxr(v165 - 2, v164));
      }
      if ((*a45 & 7) != 0)
      {
        v166 = (unsigned int *)(*a45 & 0xFFFFFFFFFFFFFFF8);
        do
          v167 = __ldxr(v166);
        while (__stlxr(v167 - 2, v166));
      }
      if ((*a46 & 7) != 0)
      {
        v168 = (unsigned int *)(*a46 & 0xFFFFFFFFFFFFFFF8);
        do
          v169 = __ldxr(v168);
        while (__stlxr(v169 - 2, v168));
      }
      if ((*a47 & 7) != 0)
      {
        v170 = (unsigned int *)(*a47 & 0xFFFFFFFFFFFFFFF8);
        do
          v171 = __ldxr(v170);
        while (__stlxr(v171 - 2, v170));
      }
      if ((*a48 & 7) != 0)
      {
        v172 = (unsigned int *)(*a48 & 0xFFFFFFFFFFFFFFF8);
        do
          v173 = __ldxr(v172);
        while (__stlxr(v173 - 2, v172));
      }
      if ((*a49 & 7) != 0)
      {
        v174 = (unsigned int *)(*a49 & 0xFFFFFFFFFFFFFFF8);
        do
          v175 = __ldxr(v174);
        while (__stlxr(v175 - 2, v174));
      }
      if ((*a50 & 7) != 0)
      {
        v176 = (unsigned int *)(*a50 & 0xFFFFFFFFFFFFFFF8);
        do
          v177 = __ldxr(v176);
        while (__stlxr(v177 - 2, v176));
      }
      if ((*a51 & 7) != 0)
      {
        v178 = (unsigned int *)(*a51 & 0xFFFFFFFFFFFFFFF8);
        do
          v179 = __ldxr(v178);
        while (__stlxr(v179 - 2, v178));
      }
      if ((*a52 & 7) != 0)
      {
        v180 = (unsigned int *)(*a52 & 0xFFFFFFFFFFFFFFF8);
        do
          v181 = __ldxr(v180);
        while (__stlxr(v181 - 2, v180));
      }
      if ((*a53 & 7) != 0)
      {
        v182 = (unsigned int *)(*a53 & 0xFFFFFFFFFFFFFFF8);
        do
          v183 = __ldxr(v182);
        while (__stlxr(v183 - 2, v182));
      }
      if ((*a54 & 7) != 0)
      {
        v184 = (unsigned int *)(*a54 & 0xFFFFFFFFFFFFFFF8);
        do
          v185 = __ldxr(v184);
        while (__stlxr(v185 - 2, v184));
      }
      if ((*a55 & 7) != 0)
      {
        v186 = (unsigned int *)(*a55 & 0xFFFFFFFFFFFFFFF8);
        do
          v187 = __ldxr(v186);
        while (__stlxr(v187 - 2, v186));
      }
      if ((*a56 & 7) != 0)
      {
        v188 = (unsigned int *)(*a56 & 0xFFFFFFFFFFFFFFF8);
        do
          v189 = __ldxr(v188);
        while (__stlxr(v189 - 2, v188));
      }
      if ((*a57 & 7) != 0)
      {
        v190 = (unsigned int *)(*a57 & 0xFFFFFFFFFFFFFFF8);
        do
          v191 = __ldxr(v190);
        while (__stlxr(v191 - 2, v190));
      }
      if ((*a58 & 7) != 0)
      {
        v192 = (unsigned int *)(*a58 & 0xFFFFFFFFFFFFFFF8);
        do
          v193 = __ldxr(v192);
        while (__stlxr(v193 - 2, v192));
      }
      if ((*a59 & 7) != 0)
      {
        v194 = (unsigned int *)(*a59 & 0xFFFFFFFFFFFFFFF8);
        do
          v195 = __ldxr(v194);
        while (__stlxr(v195 - 2, v194));
      }
      if ((*a60 & 7) != 0)
      {
        v196 = (unsigned int *)(*a60 & 0xFFFFFFFFFFFFFFF8);
        do
          v197 = __ldxr(v196);
        while (__stlxr(v197 - 2, v196));
      }
      if ((*a61 & 7) != 0)
      {
        v198 = (unsigned int *)(*a61 & 0xFFFFFFFFFFFFFFF8);
        do
          v199 = __ldxr(v198);
        while (__stlxr(v199 - 2, v198));
      }
      if ((*a62 & 7) != 0)
      {
        v200 = (unsigned int *)(*a62 & 0xFFFFFFFFFFFFFFF8);
        do
          v201 = __ldxr(v200);
        while (__stlxr(v201 - 2, v200));
      }
      if ((*v65 & 7) != 0)
      {
        v202 = (unsigned int *)(*v65 & 0xFFFFFFFFFFFFFFF8);
        do
          v203 = __ldxr(v202);
        while (__stlxr(v203 - 2, v202));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C19FE9C()
{
  JUMPOUT(0x20C19F724);
}

void sub_20C19FEA4()
{
  JUMPOUT(0x20C19F748);
}

void sub_20C19FEAC()
{
  JUMPOUT(0x20C19F76CLL);
}

void sub_20C19FEB4()
{
  JUMPOUT(0x20C19F790);
}

void sub_20C19FEBC()
{
  JUMPOUT(0x20C19F7B4);
}

void sub_20C19FEC4()
{
  JUMPOUT(0x20C19F7D8);
}

void sub_20C19FECC()
{
  JUMPOUT(0x20C19F7FCLL);
}

void sub_20C19FED4()
{
  JUMPOUT(0x20C19F820);
}

void sub_20C19FEDC()
{
  JUMPOUT(0x20C19F844);
}

void sub_20C19FEE4()
{
  JUMPOUT(0x20C19F868);
}

void sub_20C19FEEC()
{
  JUMPOUT(0x20C19F88CLL);
}

void sub_20C19FEF4()
{
  JUMPOUT(0x20C19F8B0);
}

void sub_20C19FEFC()
{
  JUMPOUT(0x20C19F8D4);
}

void sub_20C19FF04()
{
  JUMPOUT(0x20C19F8F8);
}

void sub_20C19FF0C()
{
  JUMPOUT(0x20C19F91CLL);
}

void sub_20C19FF14()
{
  JUMPOUT(0x20C19F940);
}

void sub_20C19FF1C()
{
  JUMPOUT(0x20C19F964);
}

void sub_20C19FF24()
{
  JUMPOUT(0x20C19F988);
}

void sub_20C19FF2C()
{
  JUMPOUT(0x20C19F9ACLL);
}

void sub_20C19FF34()
{
  JUMPOUT(0x20C19F9D0);
}

void sub_20C19FF3C()
{
  JUMPOUT(0x20C19F9F4);
}

void sub_20C19FF44()
{
  JUMPOUT(0x20C19FA18);
}

void sub_20C19FF4C()
{
  JUMPOUT(0x20C19FA3CLL);
}

void sub_20C19FF54()
{
  JUMPOUT(0x20C19FA60);
}

void sub_20C19FF5C()
{
  JUMPOUT(0x20C19FA84);
}

void sub_20C19FF64()
{
  JUMPOUT(0x20C19FAA8);
}

void sub_20C19FF6C()
{
  JUMPOUT(0x20C19FACCLL);
}

void sub_20C19FF74()
{
  JUMPOUT(0x20C19FAF0);
}

void sub_20C19FF7C()
{
  JUMPOUT(0x20C19FB14);
}

void sub_20C19FF84()
{
  JUMPOUT(0x20C19FB38);
}

void sub_20C19FF8C()
{
  JUMPOUT(0x20C19FB5CLL);
}

void sub_20C19FF94()
{
  JUMPOUT(0x20C19FB80);
}

void sub_20C19FF9C()
{
  JUMPOUT(0x20C19FBA4);
}

void sub_20C19FFA4()
{
  JUMPOUT(0x20C19FBC8);
}

void sub_20C19FFAC()
{
  JUMPOUT(0x20C19FBECLL);
}

void sub_20C19FFB4()
{
  JUMPOUT(0x20C19FC10);
}

void sub_20C19FFBC()
{
  JUMPOUT(0x20C19FC34);
}

void sub_20C19FFC4()
{
  JUMPOUT(0x20C19FC58);
}

void sub_20C19FFCC()
{
  JUMPOUT(0x20C19FC7CLL);
}

void sub_20C19FFD4()
{
  JUMPOUT(0x20C19FCA0);
}

void sub_20C19FFDC()
{
  JUMPOUT(0x20C19FCC4);
}

void sub_20C19FFE4()
{
  JUMPOUT(0x20C19FCE8);
}

void sub_20C19FFEC()
{
  JUMPOUT(0x20C19FD0CLL);
}

void sub_20C19FFF4()
{
  JUMPOUT(0x20C19FD30);
}

void sub_20C19FFFC()
{
  JUMPOUT(0x20C19FD54);
}

void sub_20C1A0004()
{
  JUMPOUT(0x20C19FD78);
}

void sub_20C1A000C()
{
  JUMPOUT(0x20C19FD9CLL);
}

void sub_20C1A0014()
{
  JUMPOUT(0x20C19FDC0);
}

void sub_20C1A001C()
{
  JUMPOUT(0x20C19FDE4);
}

void sub_20C1A0024()
{
  JUMPOUT(0x20C19FE08);
}

void sub_20C1A002C()
{
  JUMPOUT(0x20C19FE2CLL);
}

void sub_20C1A0034()
{
  JUMPOUT(0x20C19FE50);
}

void sub_20C1A003C()
{
  JUMPOUT(0x20C19FE74);
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::Type(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  void *v8;

  v8 = operator new(0x90uLL);
  sub_20C1AE628((uint64_t)v8, (uint64_t *)a2, a3, a4);
  *(_QWORD *)this = v8;
  return this;
}

void sub_20C1A00A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::Type(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  void *v6;

  v6 = operator new(0x90uLL);
  sub_20C1AE710((uint64_t)v6, (uint64_t *)a2, a3);
  *(_QWORD *)this = v6;
  return this;
}

void sub_20C1A0108(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::~Type(char **this)
{
  char *v1;

  v1 = *this;
  *this = 0;
  if (v1)
    sub_20C1B3668((uint64_t)this, v1);
}

{
  char *v1;

  v1 = *this;
  *this = 0;
  if (v1)
    sub_20C1B3668((uint64_t)this, v1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::CPPTypeName(uint64_t *a1, const std::string *a2)
{
  sub_20C1A01B0(*a1, a2);
  return a1;
}

uint64_t sub_20C1A01B0(uint64_t a1, const std::string *a2)
{
  std::string *v3;
  std::string::size_type v4;
  char v5;
  uint64_t v6;
  std::string __p;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (*(_QWORD *)(a1 + 40))
  {
    std::operator+<char>();
    v3 = std::string::append(&__p, ">");
    v4 = v3->__r_.__value_.__r.__words[0];
    v9[0] = v3->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v9 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
    v6 = v9[0];
    *(_QWORD *)(a1 + 72) = v4;
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)v9 + 7);
    *(_BYTE *)(a1 + 95) = v5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_20C1A0294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::Dimensions(uint64_t *a1, __n128 *a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *a1;
  result = *a2;
  *(_QWORD *)(v2 + 136) = a2[1].n128_u64[0];
  *(__n128 *)(v2 + 120) = result;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::DefaultUnit(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v3;

  v3 = *result;
  *(_QWORD *)(v3 + 96) = a2;
  *(_DWORD *)(v3 + 104) = a3;
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::Role(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_20BF32220((_QWORD *)(*(_QWORD *)this + 112), a2);
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::NoArrays(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *this)
{
  sub_20C1A0334(*(_QWORD *)this);
  return this;
}

uint64_t sub_20C1A0334(uint64_t a1)
{
  void **v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v4[1] = 0;
  sub_20BF4B5D8((_QWORD *)(a1 + 32), v4);
  sub_20BF4C2D8((uint64_t)v4);
  v2 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v2);
  *v2 = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::_ValueTypeRegistrar(_QWORD *this, pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::AddType(tbb::spin_rw_mutex_v3 ***this, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(*this, *(_QWORD *)a2, a3);
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  tbb::spin_rw_mutex_v3 ***v2;
  uint64_t v3;
  char *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *v5;
  const pxrInternal__aapl__pxrReserved__::TfEnum *v6;
  const pxrInternal__aapl__pxrReserved__::TfEnum *v7;

  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)this = off_24C52A780;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  v2 = (tbb::spin_rw_mutex_v3 ***)((char *)this + 920);
  v3 = 56;
  do
  {
    v4 = (char *)this + v3;
    *((_QWORD *)v4 + 4) = 0;
    *((_QWORD *)v4 + 5) = 0;
    *(_OWORD *)v4 = 0uLL;
    *((_OWORD *)v4 + 1) = 0uLL;
    *((_DWORD *)v4 + 8) = 1065353216;
    *((_QWORD *)v4 + 6) = 0;
    *((_QWORD *)v4 + 7) = 0;
    v3 += 72;
    v4[64] = 0;
  }
  while (v4 + 72 != (char *)v2);
  v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *)operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::Sdf_ValueTypeRegistry(v5);
  *((_QWORD *)this + 115) = v5;
  *((_QWORD *)this + 116) = 0;
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 117) = 0;
  sub_20C1A324C((tbb::spin_rw_mutex_v3 **)v5, v6);
  sub_20C1A5DC0(*v2, v7);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterStandardFields(this);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterPluginFields(this);
  return this;
}

void sub_20C1A04B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int **v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t i;
  const void *v17;

  v14 = v13;
  operator delete(v14);
  for (i = 848; i != -16; i -= 72)
    sub_20C1A051C(v11 + i);
  sub_20C1AE87C(v12);
  sub_20BEBCE60(v10, v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1A051C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 40);
  sub_20BEEB2B8(&v3);
  return sub_20C0383FC(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterStandardTypes(tbb::spin_rw_mutex_v3 ***this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  return sub_20C1A324C(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterLegacyTypes(tbb::spin_rw_mutex_v3 ***this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  return sub_20C1A5DC0(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterStandardFields(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  _QWORD *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  _QWORD *v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  _QWORD *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v33;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v34;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v35;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v37;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v38;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v39;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v40;
  unsigned int *v41;
  unsigned int v42;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v43;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v44;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v45;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v46;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v47;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v48;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v49;
  _QWORD *v50;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v51;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v52;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v53;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v54;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v55;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v56;
  _QWORD *v57;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v58;
  _QWORD *v59;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v60;
  _QWORD *v61;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v62;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v63;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v64;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v65;
  unsigned int *v66;
  unsigned int v67;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v68;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v69;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v70;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v71;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v72;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v73;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v74;
  _QWORD *v75;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v76;
  _QWORD *v77;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v78;
  unsigned int *v79;
  unsigned int v80;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v81;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v82;
  unsigned int *v83;
  unsigned int v84;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v85;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v86;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v87;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v88;
  _QWORD *v89;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v90;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v91;
  _QWORD *v92;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v93;
  _QWORD *v94;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v95;
  _QWORD *v96;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v97;
  _QWORD *v98;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v99;
  _QWORD *v100;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v101;
  _QWORD *v102;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v103;
  _QWORD *v104;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v105;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v106;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v107;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v108;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v109;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v110;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v111;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v112;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v113;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v114;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v115;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v116;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v117;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v118;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v119;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v120;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v121;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v122;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v123;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v124;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v125;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v126;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v127;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v128;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v129;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v130;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v131;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v132;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v133;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v134;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v135;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v136;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v137;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v138;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v139;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v140;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v141;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v142;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v143;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v144;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v145;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v146;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v147;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v148;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v149;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v150;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v151;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v152;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v153;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v154;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v155;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v156;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v157;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v158;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v159;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v160;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v161;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v162;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v163;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v164;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v165;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v166;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v167;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v168;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v169;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v170;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v171;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v172;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v173;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v174;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v175;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v176;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v177;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v178;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v179;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v180;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v181;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v182;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v183;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v184;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v185;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v186;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v187;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v188;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v189;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v190;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v191;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v192;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v193;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v194;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v195;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v196;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v197;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v198;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v199;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v200;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v201;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v202;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v203;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v204;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v205;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v206;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v207;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v208;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v209;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v210;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v211;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v212;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v213;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v214;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v215;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v216;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v217;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v218;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v219;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v220;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v221;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v222;
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v223;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v224;
  const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *v225;
  void **v227;
  void **v228;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v229;
  void *v230[2];
  void *__p[2];
  uint64_t v232;
  _QWORD v233[2];
  _QWORD v234[3];
  _BYTE v235[24];
  _BYTE v236[24];
  _QWORD v237[4];

  v237[3] = *MEMORY[0x24BDAC8D0];
  v229 = this;
  sub_20C1A75C4(&v229);
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LOBYTE(v230[0]) = 1;
  sub_20C1A7FE8(this, v2, v230);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v232 = 0;
  *(_OWORD *)v230 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20C1A8078(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 8), (uint64_t)v230);
  sub_20C00918C(v230);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v5 = sub_20C1A8120(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), (const void ****)v230);
  v5[10] = sub_20C1A81C8;
  v5[11] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue;
  sub_20BF49F14((_QWORD ***)v230, 0);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[1] = 0;
  __p[0] = 0;
  v230[0] = &v230[1];
  sub_20C1A8244(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 432), (uint64_t)v230);
  sub_20BFED2B4((uint64_t)v230, (_QWORD *)v230[1]);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v230);
  sub_20C1A82EC(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 24), (__int128 *)v230);
  if (SHIBYTE(v233[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v230[0]);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A8394(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 32), (uint64_t *)v230);
  if (((uint64_t)v230[0] & 7) != 0)
  {
    v9 = (unsigned int *)((unint64_t)v230[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11)
    v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A8394(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v11 + 40), (uint64_t *)v230);
  if (((uint64_t)v230[0] & 7) != 0)
  {
    v12 = (unsigned int *)((unint64_t)v230[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v14)
    v14 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 48), "");
  v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v15)
    v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v230);
  v16 = sub_20C1A84E4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v15 + 56), (uint64_t)v230);
  *((_BYTE *)v16 + 57) = 1;
  v16[9] = sub_20C1A858C;
  v227 = (void **)v237;
  sub_20BFD6F90(&v227);
  v227 = (void **)v236;
  sub_20BFD6F90(&v227);
  v227 = (void **)v235;
  sub_20BFD6F90(&v227);
  v227 = (void **)v234;
  sub_20BFD6F90(&v227);
  v227 = (void **)&v232;
  sub_20BFD6F90(&v227);
  v227 = &v230[1];
  sub_20BFD6F90(&v227);
  v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v17)
    v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LOBYTE(v230[0]) = 0;
  sub_20C1A7FE8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v17 + 64), v230);
  v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v18)
    v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v19 = sub_20C1A8120(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v18 + 72), (const void ****)v230);
  v19[10] = sub_20C1A81C8;
  v19[11] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue;
  sub_20BF49F14((_QWORD ***)v230, 0);
  v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20)
    v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v21 = sub_20C1A8120(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v20 + 80), (const void ****)v230);
  v21[10] = sub_20C1A81C8;
  v21[11] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue;
  sub_20BF49F14((_QWORD ***)v230, 0);
  v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22)
    v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[1] = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v22 + 88), (const pxrInternal__aapl__pxrReserved__::VtValue *)v230)[8] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue;
  sub_20BF4C2D8((uint64_t)v230);
  v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23)
    v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v23 + 104), "");
  v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24)
    v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v232 = 0;
  *(_OWORD *)v230 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20C1A87F8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v24 + 112), (uint64_t)v230);
  sub_20C008280(v230);
  v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v25)
    v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v25 + 120), "");
  v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v26)
    v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = &unk_24C526E38;
  LODWORD(v230[1]) = 1;
  sub_20C1A88A0(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v26 + 128), v230);
  v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v27)
    v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v27 + 136), "");
  v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v28)
    v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A8394(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v28 + 96), (uint64_t *)v230);
  if (((uint64_t)v230[0] & 7) != 0)
  {
    v29 = (unsigned int *)((unint64_t)v230[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v31)
    v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A896C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v31 + 480), v230);
  v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v32)
    v32 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A896C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v32 + 144), v230);
  v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v33)
    v33 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A8120(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v33 + 152), (const void ****)v230);
  sub_20BF49F14((_QWORD ***)v230, 0);
  v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v34)
    v34 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LODWORD(v230[0]) = 3;
  sub_20C1A89FC(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v34 + 160), (int *)v230);
  v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v35)
    v35 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = (void *)0x4038000000000000;
  sub_20C1A896C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v35 + 168), v230)[8] = sub_20C1A8A8C;
  v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v36)
    v36 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LOBYTE(v230[0]) = 0;
  sub_20C1A7FE8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v36 + 176), v230);
  v37 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v37)
    v37 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LOBYTE(v230[0]) = 0;
  sub_20C1A7FE8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v37 + 184), v230);
  v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v38)
    v38 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LOBYTE(v230[0]) = 0;
  sub_20C1A7FE8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v38 + 200), v230);
  v39 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v39)
    v39 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v230);
  sub_20C1A84E4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v39 + 192), (uint64_t)v230)[9] = sub_20C1A8B18;
  v227 = (void **)v237;
  sub_20BFD6F90(&v227);
  v227 = (void **)v236;
  sub_20BFD6F90(&v227);
  v227 = (void **)v235;
  sub_20BFD6F90(&v227);
  v227 = (void **)v234;
  sub_20BFD6F90(&v227);
  v227 = (void **)&v232;
  sub_20BFD6F90(&v227);
  v227 = &v230[1];
  sub_20BFD6F90(&v227);
  v40 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v40)
    v40 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A8394(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v40 + 208), (uint64_t *)v230);
  if (((uint64_t)v230[0] & 7) != 0)
  {
    v41 = (unsigned int *)((unint64_t)v230[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  v43 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v43)
    v43 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v43 + 232), "");
  v44 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v44)
    v44 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  sub_20C1A8B90(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v44 + 216), (uint64_t **)v230)[9] = sub_20C1A8C38;
  v227 = v230;
  sub_20BEEB2B8(&v227);
  v45 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v45)
    v45 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LOBYTE(v230[0]) = 0;
  sub_20C1A7FE8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v45 + 224), v230);
  v46 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v46)
    v46 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v230);
  sub_20C1A8CC8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v46 + 240), (uint64_t)v230)[9] = sub_20C1A8D70;
  v227 = (void **)v237;
  sub_20C021818(&v227);
  v227 = (void **)v236;
  sub_20C021818(&v227);
  v227 = (void **)v235;
  sub_20C021818(&v227);
  v227 = (void **)v234;
  sub_20C021818(&v227);
  v227 = (void **)&v232;
  sub_20C021818(&v227);
  v227 = &v230[1];
  sub_20C021818(&v227);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v47)
    v47 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LODWORD(v230[0]) = 0;
  sub_20C1A8DE8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v47 + 248), (int *)v230);
  v48 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v48)
    v48 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v48 + 256), "");
  v49 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v49)
    v49 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v50 = sub_20C1A8120(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v49 + 264), (const void ****)v230);
  v50[10] = sub_20C1A8E78;
  v50[11] = sub_20C1A8F5C;
  sub_20BF49F14((_QWORD ***)v230, 0);
  v51 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v51)
    v51 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  sub_20C1A8B90(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v51 + 272), (uint64_t **)v230)[9] = sub_20C1A8FC0;
  v227 = v230;
  sub_20BEEB2B8(&v227);
  v52 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v52)
    v52 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v230);
  sub_20C1A9050(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v52 + 280), (uint64_t)v230)[9] = sub_20C1A90F8;
  v227 = (void **)v237;
  sub_20C021740(&v227);
  v227 = (void **)v236;
  sub_20C021740(&v227);
  v227 = (void **)v235;
  sub_20C021740(&v227);
  v227 = (void **)v234;
  sub_20C021740(&v227);
  v227 = (void **)&v232;
  sub_20C021740(&v227);
  v227 = &v230[1];
  sub_20C021740(&v227);
  v53 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v53)
    v53 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v53 + 296), "");
  v54 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v54)
    v54 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v230);
  sub_20C1A84E4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v54 + 304), (uint64_t)v230)[9] = sub_20C1A9170;
  v227 = (void **)v237;
  sub_20BFD6F90(&v227);
  v227 = (void **)v236;
  sub_20BFD6F90(&v227);
  v227 = (void **)v235;
  sub_20BFD6F90(&v227);
  v227 = (void **)v234;
  sub_20BFD6F90(&v227);
  v227 = (void **)&v232;
  sub_20BFD6F90(&v227);
  v227 = &v230[1];
  sub_20BFD6F90(&v227);
  v55 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v55)
    v55 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v55 + 376), "");
  v56 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v56)
    v56 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v57 = sub_20C1A8120(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v56 + 384), (const void ****)v230);
  v57[10] = sub_20C1A8E78;
  v57[11] = sub_20C1A8F5C;
  sub_20BF49F14((_QWORD ***)v230, 0);
  v58 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v58)
    v58 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v230);
  v59 = sub_20C1A84E4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v58 + 424), (uint64_t)v230);
  *((_BYTE *)v59 + 57) = 1;
  v59[9] = sub_20C1A91E8;
  v227 = (void **)v237;
  sub_20BFD6F90(&v227);
  v227 = (void **)v236;
  sub_20BFD6F90(&v227);
  v227 = (void **)v235;
  sub_20BFD6F90(&v227);
  v227 = (void **)v234;
  sub_20BFD6F90(&v227);
  v227 = (void **)&v232;
  sub_20BFD6F90(&v227);
  v227 = &v230[1];
  sub_20BFD6F90(&v227);
  v60 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v60)
    v60 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[1] = 0;
  __p[0] = 0;
  v230[0] = &v230[1];
  v61 = sub_20C1A9260(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v60 + 288), (uint64_t)v230);
  v61[10] = sub_20C1A9308;
  v61[11] = sub_20C1A9308;
  sub_20BFE4CE8((uint64_t)v230, (_QWORD *)v230[1]);
  v62 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v62)
    v62 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LODWORD(v230[0]) = 1;
  sub_20C1A9380(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v62 + 312), (int *)v230);
  v63 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v63)
    v63 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A896C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v63 + 488), v230);
  v64 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v64)
    v64 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A896C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v64 + 320), v230);
  v65 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v65)
    v65 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v230, "loop");
  sub_20C1A8394(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v65 + 328), (uint64_t *)v230);
  if (((uint64_t)v230[0] & 7) != 0)
  {
    v66 = (unsigned int *)((unint64_t)v230[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v68)
    v68 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LOBYTE(v230[0]) = 1;
  sub_20C1A7FE8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v68 + 336), v230);
  v69 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v69)
    v69 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LOBYTE(v230[0]) = 0;
  sub_20C1A7FE8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v69 + 344), v230);
  v70 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v70)
    v70 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v70 + 352), "");
  v71 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v71)
    v71 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  sub_20C1A9410(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v71 + 360), (__int128 **)v230)[9] = sub_20C1A94B8;
  v227 = v230;
  sub_20BDE5038(&v227);
  v72 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v72)
    v72 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  sub_20C1A9530(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v72 + 368), (uint64_t)v230);
  if (v230[0])
  {
    v230[1] = v230[0];
    operator delete(v230[0]);
  }
  v73 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v73)
    v73 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1A8444(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v73 + 392), "");
  v74 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v74)
    v74 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v75 = sub_20C1A8120(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v74 + 400), (const void ****)v230);
  v75[10] = sub_20C1A81C8;
  v75[11] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue;
  sub_20BF49F14((_QWORD ***)v230, 0);
  v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v76)
    v76 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  v77 = sub_20C1A8120(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v76 + 408), (const void ****)v230);
  v77[10] = sub_20C1A81C8;
  v77[11] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue;
  sub_20BF49F14((_QWORD ***)v230, 0);
  v78 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v78)
    v78 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A8394(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v78 + 416), (uint64_t *)v230);
  if (((uint64_t)v230[0] & 7) != 0)
  {
    v79 = (unsigned int *)((unint64_t)v230[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v80 = __ldxr(v79);
    while (__stlxr(v80 - 2, v79));
  }
  v81 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v81)
    v81 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = (void *)0x4038000000000000;
  sub_20C1A896C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v81 + 440), v230);
  v82 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v82)
    v82 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[0] = 0;
  sub_20C1A8394(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v82 + 448), (uint64_t *)v230);
  if (((uint64_t)v230[0] & 7) != 0)
  {
    v83 = (unsigned int *)((unint64_t)v230[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stlxr(v84 - 2, v83));
  }
  v85 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v85)
    v85 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v230);
  sub_20C1A95D8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v85 + 472), (uint64_t)v230)[9] = sub_20C1A81C8;
  v227 = (void **)v237;
  sub_20BDE5038(&v227);
  v227 = (void **)v236;
  sub_20BDE5038(&v227);
  v227 = (void **)v235;
  sub_20BDE5038(&v227);
  v227 = (void **)v234;
  sub_20BDE5038(&v227);
  v227 = (void **)&v232;
  sub_20BDE5038(&v227);
  v227 = &v230[1];
  sub_20BDE5038(&v227);
  v86 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v86)
    v86 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v230[1] = 0;
  __p[0] = 0;
  v230[0] = &v230[1];
  sub_20C1A9680(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v86 + 456), (const void ***)v230)[11] = sub_20C1A9728;
  sub_20BDE9D48((uint64_t)v230, (_QWORD *)v230[1]);
  v87 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v87)
    v87 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  LODWORD(v230[0]) = 0;
  sub_20C1A97A0(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v87 + 464), (int *)v230);
  v88 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v88)
    v88 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  v89 = sub_20C1A9830(this, v88, (_DWORD **)v230);
  *(_WORD *)((char *)v89 + 57) = 257;
  v89[9] = sub_20C1A858C;
  v227 = v230;
  sub_20BFD6F90(&v227);
  v90 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v90)
    v90 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  *(_WORD *)((char *)sub_20C1A8B90(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v90 + 8), (uint64_t **)v230)+ 57) = 257;
  v227 = v230;
  sub_20BEEB2B8(&v227);
  v91 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v91)
    v91 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  v92 = sub_20C1A8B90(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v91 + 16), (uint64_t **)v230);
  *(_WORD *)((char *)v92 + 57) = 257;
  v92[9] = sub_20C1A81C8;
  v227 = v230;
  sub_20BEEB2B8(&v227);
  v93 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v93)
    v93 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  v94 = sub_20C1A9830(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v93 + 24), (_DWORD **)v230);
  *(_WORD *)((char *)v94 + 57) = 257;
  v94[9] = sub_20C1A858C;
  v227 = v230;
  sub_20BFD6F90(&v227);
  v95 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v95)
    v95 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  v96 = sub_20C1A8B90(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v95 + 32), (uint64_t **)v230);
  *(_WORD *)((char *)v96 + 57) = 257;
  v96[9] = sub_20C1A81C8;
  v227 = v230;
  sub_20BEEB2B8(&v227);
  v97 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v97)
    v97 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  v98 = sub_20C1A8B90(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v97 + 40), (uint64_t **)v230);
  *(_WORD *)((char *)v98 + 57) = 257;
  v98[9] = sub_20C1A81C8;
  v227 = v230;
  sub_20BEEB2B8(&v227);
  v99 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v99)
    v99 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  v100 = sub_20C1A9830(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v99 + 48), (_DWORD **)v230);
  *(_WORD *)((char *)v100 + 57) = 257;
  v100[9] = sub_20C1A91E8;
  v227 = v230;
  sub_20BFD6F90(&v227);
  v101 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v101)
    v101 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  v102 = sub_20C1A8B90(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v101 + 56), (uint64_t **)v230);
  *(_WORD *)((char *)v102 + 57) = 257;
  v102[9] = sub_20C1A98D8;
  v227 = v230;
  sub_20BEEB2B8(&v227);
  v103 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v103)
    v103 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v230[0] = 0;
  v230[1] = 0;
  __p[0] = 0;
  v104 = sub_20C1A8B90(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v103 + 64), (uint64_t **)v230);
  *(_WORD *)((char *)v104 + 57) = 257;
  v104[9] = sub_20C1A81C8;
  v227 = v230;
  sub_20BEEB2B8(&v227);
  *((_BYTE *)this + 624) = 1;
  v230[0] = this;
  v230[1] = (char *)this + 560;
  v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v105)
    v105 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v105 + 24), 0);
  v106 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v106)
    v106 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v106 + 32), 0);
  v107 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v107)
    v107 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v107 + 48), 0);
  v108 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v108)
    v108 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v108 + 80), 0);
  v109 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v109)
    v109 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v109 + 96), 0);
  v110 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v110)
    v110 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v110 + 136), 0);
  v111 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v111)
    v111 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v111 + 144), 0);
  v112 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v112)
    v112 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v112 + 152), 0);
  v113 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v113)
    v113 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v113 + 168), 0);
  v114 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v114)
    v114 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v114 + 160), 0);
  v115 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v115)
    v115 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v115 + 184), 0);
  v116 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v116)
    v116 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v116 + 232), 0);
  v117 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v117)
    v117 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v117 + 296), 0);
  v118 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v118)
    v118 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v118 + 320), 0);
  v119 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v119)
    v119 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v119 + 440), 0);
  v120 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v120)
    v120 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v120 + 480), 0);
  v121 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v121)
    v121 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v121 + 488), 0);
  v122 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v122)
    v122 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v122 + 328), 0);
  v123 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v123)
    v123 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v123 + 336), 0);
  v124 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v124)
    v124 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v124 + 32), 0);
  v125 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v125)
    v125 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v125 + 216), 0);
  v126 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v126)
    v126 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v126 + 360), 0);
  v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v127)
    v127 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v127 + 368), 0);
  *((_BYTE *)this + 552) = 1;
  v230[0] = this;
  v230[1] = (char *)this + 488;
  v128 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v128)
    v128 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v128 + 312), 1);
  v129 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v129)
    v129 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v129 + 48), 0);
  v130 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v130)
    v130 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v130 + 192), 0);
  v131 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v131)
    v131 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v131 + 304), 0);
  v132 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v132)
    v132 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v132 + 32), 0);
  v133 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v133)
    v133 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v133 + 216), 0);
  v134 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v134)
    v134 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v134 + 40), 0);
  v135 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v135)
    v135 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v135 + 272), 0);
  v136 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v136)
    v136 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v136 + 280), 0);
  v137 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v137)
    v137 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v137 + 288), 0);
  v138 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v138)
    v138 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v138 + 456), 0);
  v139 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v139)
    v139 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v139 + 64), 0);
  v140 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v140)
    v140 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v140 + 472), 0);
  v141 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v141)
    v141 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v142 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v142)
    v142 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, v141, v142, 0);
  v143 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v143)
    v143 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v144 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v144)
    v144 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v143 + 16), v144, 0);
  v145 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v145)
    v145 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v146 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v146)
    v146 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v145 + 72), v146, 0);
  v147 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v147)
    v147 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v148 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v148)
    v148 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v147 + 112), v148, 0);
  v149 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v149)
    v149 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v150 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v150)
    v150 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v149 + 120), v150, 0);
  v151 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v151)
    v151 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v152 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v152)
    v152 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v151 + 136), v152, 0);
  v153 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v153)
    v153 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v154 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v154)
    v154 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v153 + 176), v154, 0);
  v155 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v155)
    v155 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v156 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v156)
    v156 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v155 + 200), v156, 0);
  v157 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v157)
    v157 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v158 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v158)
    v158 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v157 + 208), v158, 0);
  v159 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v159)
    v159 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v160 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v160)
    v160 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v159 + 240), v160, 0);
  v161 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v161)
    v161 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v162 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v162)
    v162 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v161 + 248), v162, 0);
  v163 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v163)
    v163 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v164 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v164)
    v164 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v163 + 256), v164, 0);
  v165 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v165)
    v165 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v166 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v166)
    v166 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v165 + 264), v166, 0);
  v167 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v167)
    v167 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v168 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v168)
    v168 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v167 + 376), v168, 0);
  v169 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v169)
    v169 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v170 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v170)
    v170 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v169 + 384), v170, 0);
  v171 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v171)
    v171 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v172 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v172)
    v172 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v171 + 392), (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)((char *)v172 + 32), 0);
  v173 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v173)
    v173 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v174 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v174)
    v174 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v173 + 408), (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)((char *)v174 + 32), 0);
  v175 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v175)
    v175 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v176 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v176)
    v176 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v175 + 416), (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)((char *)v176 + 32), 0);
  v177 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v177)
    v177 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v178 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v178)
    v178 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v177 + 448), v178, 0);
  v179 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v179)
    v179 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v180 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v180)
    v180 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v179 + 344), v180, 0);
  v181 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v181)
    v181 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v182 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v182)
    v182 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v181 + 352), v182, 0);
  *(_OWORD *)v230 = 0u;
  *(_OWORD *)__p = 0u;
  LODWORD(v232) = 1065353216;
  v233[1] = 0;
  v234[0] = 0;
  v233[0] = 0;
  v227 = (void **)this;
  v228 = v230;
  v183 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v183)
    v183 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v183 + 64), 1);
  v184 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v184)
    v184 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v184 + 464), 1);
  v185 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v185)
    v185 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v185 + 48), 0);
  v186 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v186)
    v186 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v186 + 88), 0);
  v187 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v187)
    v187 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v187 + 432), 0);
  v188 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v188)
    v188 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v189 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v189)
    v189 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v188 + 16), v189, 0);
  v190 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v190)
    v190 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v191 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v191)
    v191 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v190 + 72), v191, 0);
  v192 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v192)
    v192 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v193 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v193)
    v193 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v192 + 104), v193, 0);
  v194 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v194)
    v194 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v195 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v195)
    v195 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v194 + 120), v195, 0);
  v196 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v196)
    v196 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v197 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v197)
    v197 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v196 + 136), v197, 0);
  v198 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v198)
    v198 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v199 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v199)
    v199 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v198 + 176), v199, 0);
  v200 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v200)
    v200 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v201 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v201)
    v201 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v200 + 248), v201, 0);
  v202 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v202)
    v202 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v203 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v203)
    v203 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v202 + 256), v203, 0);
  v204 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v204)
    v204 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v205 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v205)
    v205 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v204 + 376), v205, 0);
  v206 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v206)
    v206 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v207 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v207)
    v207 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v206 + 392), (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)((char *)v207 + 32), 0);
  v208 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v208)
    v208 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v209 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v209)
    v209 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v208 + 408), (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)((char *)v209 + 32), 0);
  v210 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v210)
    v210 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v211 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v211)
    v211 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v210 + 416), (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)((char *)v211 + 32), 0);
  *((_BYTE *)this + 192) = 1;
  v227 = (void **)this;
  v228 = (void **)((char *)this + 128);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::CopyFrom((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)v230);
  v212 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v212)
    v212 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v212 + 448), 1);
  v213 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v213)
    v213 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, v213, 0);
  v214 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v214)
    v214 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v214 + 56), 0);
  v215 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v215)
    v215 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v215 + 128), 0);
  v216 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v216)
    v216 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v217 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v217)
    v217 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v216 + 8), v217, 0);
  v218 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v218)
    v218 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v219 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v219)
    v219 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v218 + 40), v219, 0);
  *((_BYTE *)this + 264) = 1;
  *((_BYTE *)this + 696) = 1;
  v227 = (void **)this;
  v228 = (void **)((char *)this + 632);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::CopyFrom((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)v230);
  v220 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v220)
    v220 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v220 + 48), 0);
  v221 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v221)
    v221 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v221 + 424), 0);
  v222 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v222)
    v222 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v223 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  if (!v223)
    v223 = sub_20C1B4B1C(&pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v222 + 224), v223, 0);
  *((_BYTE *)this + 768) = 1;
  *((_BYTE *)this + 912) = 1;
  v227 = (void **)this;
  v228 = (void **)((char *)this + 848);
  v224 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v224)
    v224 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v224 + 56), 0);
  *((_BYTE *)this + 840) = 1;
  v227 = (void **)this;
  v228 = (void **)((char *)this + 776);
  if (*((_BYTE *)this + 552))
    v225 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)this + 488);
  else
    v225 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::CopyFrom((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&v227, v225);
  v227 = (void **)v233;
  sub_20BEEB2B8(&v227);
  return sub_20C0383FC((uint64_t)v230);
}

void sub_20C1A2BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  sub_20C1A051C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterPluginFields(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry *Instance;
  void ***v3;
  uint64_t v4;
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__::TfNotice *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  uint64_t *v19[3];
  void *__p[3];
  void **v21;
  uint64_t v22;
  void ***v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)v19, Instance);
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v23 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_UpdateMetadataFromPlugins(this, v19, (uint64_t)v17, (uint64_t)&v21, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition ***)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v3 = v23;
  if (v23 == &v21)
  {
    v4 = 4;
    v3 = &v21;
  }
  else
  {
    if (!v23)
      goto LABEL_8;
    v4 = 5;
  }
  ((void (*)(void))(*v3)[v4])();
LABEL_8:
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  v21 = (void **)v19;
  sub_20BEB4844(&v21);
  v5 = sub_20C1B4BA4(&v21, (uint64_t)this);
  v6 = (pxrInternal__aapl__pxrReserved__::TfNotice *)sub_20C1B4C5C(v5, (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_OnDidRegisterPlugins, 0);
  pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v6, &v15);
  v7 = v16;
  if (v16)
  {
    v8 = (unsigned int *)(v16 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  result = v22;
  if (v22)
  {
    v12 = (unsigned int *)(v22 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C1A302C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 32);
  if (v20 == v17)
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 56);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  if (a16 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 - 56) = &a17;
  sub_20BEB4844((void ***)(v18 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = off_24C52A780;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  v2 = 56;
  do
  {
    v3 = a1 + v2;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_OWORD *)v3 = 0uLL;
    *(_OWORD *)(v3 + 16) = 0uLL;
    *(_DWORD *)(v3 + 32) = 1065353216;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    v2 += 72;
    *(_BYTE *)(v3 + 64) = 0;
  }
  while (v3 + 72 != a1 + 920);
  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *)operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::Sdf_ValueTypeRegistry(v4);
  *(_QWORD *)(a1 + 920) = v4;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  return a1;
}

void sub_20C1A3150(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t i;
  const void *v8;

  v5 = v4;
  operator delete(v5);
  for (i = 848; i != -16; i -= 72)
    sub_20C1A051C(v1 + i);
  sub_20C1AE87C(v3);
  sub_20BEBCE60(v2, v8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::~SdfSchemaBase(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  uint64_t i;
  const void *v3;
  void **v4;

  *(_QWORD *)this = off_24C52A780;
  v4 = (void **)((char *)this + 928);
  sub_20BEEB2B8(&v4);
  sub_20C1B3700((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **)this + 115, 0);
  for (i = 0; i != -864; i -= 72)
  {
    v4 = (void **)((char *)this + i + 888);
    sub_20BEEB2B8(&v4);
    sub_20C0383FC((uint64_t)this + i + 848);
  }
  sub_20C1AE87C((uint64_t)this + 16);
  sub_20BEBCE60((unsigned int **)this + 1, v3);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::~SdfSchemaBase(this);
  operator delete(v1);
}

uint64_t sub_20C1A324C(tbb::spin_rw_mutex_v3 **a1, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v3;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v4;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  char *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  char *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  char *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  char *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  char *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  char *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  char *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v92;
  char *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  char *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  char *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  char *v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  char *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  char *v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  char *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  char *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  char *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  char *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  char *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  char *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  char *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  char *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  uint64_t v163;
  char *v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  uint64_t v169;
  char *v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int *v173;
  unsigned int v174;
  uint64_t v175;
  char *v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  _QWORD *v181;
  uint64_t v182;
  char *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  char *v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t v194;
  char *v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int v199;
  _QWORD *v200;
  uint64_t v201;
  char *v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int v206;
  uint64_t v207;
  char *v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int *v211;
  unsigned int v212;
  uint64_t v213;
  char *v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int v218;
  _QWORD *v219;
  char *v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  char *v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  char *v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int *v233;
  unsigned int v234;
  char *v235;
  unsigned int *v236;
  unsigned int v237;
  unsigned int *v238;
  unsigned int v239;
  char *v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int *v243;
  unsigned int v244;
  char *v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int *v248;
  unsigned int v249;
  char *v250;
  unsigned int *v251;
  unsigned int v252;
  unsigned int *v253;
  unsigned int v254;
  char *v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int *v258;
  unsigned int v259;
  char *v260;
  unsigned int *v261;
  unsigned int v262;
  unsigned int *v263;
  unsigned int v264;
  char *v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  char *v270;
  unsigned int *v271;
  unsigned int v272;
  unsigned int *v273;
  unsigned int v274;
  char *v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int *v278;
  unsigned int v279;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v280;
  char *v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int *v284;
  unsigned int v285;
  _QWORD *v286;
  char *v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int *v290;
  unsigned int v291;
  char *v292;
  unsigned int *v293;
  unsigned int v294;
  unsigned int *v295;
  unsigned int v296;
  char *v297;
  unsigned int *v298;
  unsigned int v299;
  unsigned int *v300;
  unsigned int v301;
  char *v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int *v305;
  unsigned int v306;
  char *v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int *v310;
  unsigned int v311;
  char *v312;
  unsigned int *v313;
  unsigned int v314;
  uint64_t result;
  unsigned int *v316;
  unsigned int v317;
  void *v318[2];
  __int128 v319;
  __int128 v320;
  __int128 v321;
  void *v322[2];
  __int128 v323;
  std::string v324;
  unint64_t v325;
  int v326;
  _BYTE v327[16];
  _BYTE v328[16];
  void *v329;
  char v330;
  void *__p;
  char v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  int64x2_t v336;
  uint64_t v337;
  uint64_t v338;

  v338 = *MEMORY[0x24BDAC8D0];
  v325 = (unint64_t)&unk_24C52A7F0;
  v326 = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::SdfDefaultUnit((pxrInternal__aapl__pxrReserved__ *)&v325, a2);
  v4 = v3;
  v5 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v5)
  {
    v3 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    v5 = v3;
  }
  v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v6)
  {
    v3 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    v6 = (unint64_t)v3;
  }
  v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v7)
  {
    v3 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    v7 = (unint64_t)v3;
  }
  v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v8)
  {
    v3 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    v8 = (unint64_t)v3;
  }
  v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v9)
  {
    v3 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    v9 = (unint64_t)v3;
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v3);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_24C51BE20);
  LOBYTE(v318[0]) = 0;
  sub_20C1AE96C((uint64_t)&v325, (uint64_t)"BOOL", v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v11);
  if ((v335 & 7) != 0)
  {
    v12 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v14 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v324.__r_.__value_.__s.__data_[0] = 0;
  sub_20C1AEB74((uint64_t)&v325, (uint64_t)"uchar", &v324);
  sub_20BDDC0E4(v318, "unsigned char");
  v16 = sub_20C1A01B0((uint64_t)&v325, (const std::string *)v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v16, v17);
  if (SBYTE7(v319) < 0)
    operator delete(v318[0]);
  if ((v335 & 7) != 0)
  {
    v18 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v20 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  LODWORD(v324.__r_.__value_.__l.__data_) = 0;
  sub_20C1AECEC((uint64_t)&v325, (uint64_t)"int", &v324);
  sub_20BDDC0E4(v318, "int");
  v22 = sub_20C1A01B0((uint64_t)&v325, (const std::string *)v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v22, v23);
  if (SBYTE7(v319) < 0)
    operator delete(v318[0]);
  if ((v335 & 7) != 0)
  {
    v24 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v26 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  LODWORD(v324.__r_.__value_.__l.__data_) = 0;
  sub_20C1AEE64((uint64_t)&v325, (uint64_t)"uint", &v324);
  sub_20BDDC0E4(v318, "unsigned int");
  v28 = sub_20C1A01B0((uint64_t)&v325, (const std::string *)v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v28, v29);
  if (SBYTE7(v319) < 0)
    operator delete(v318[0]);
  if ((v335 & 7) != 0)
  {
    v30 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v32 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  v324.__r_.__value_.__r.__words[0] = 0;
  sub_20C1AEFDC((uint64_t)&v325, (uint64_t)"int64", &v324);
  sub_20BDDC0E4(v318, "int64_t");
  v34 = sub_20C1A01B0((uint64_t)&v325, (const std::string *)v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v34, v35);
  if (SBYTE7(v319) < 0)
    operator delete(v318[0]);
  if ((v335 & 7) != 0)
  {
    v36 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v38 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  v324.__r_.__value_.__r.__words[0] = 0;
  sub_20C1AF150((uint64_t)&v325, (uint64_t)"uint64", &v324);
  sub_20BDDC0E4(v318, "uint64_t");
  v40 = sub_20C1A01B0((uint64_t)&v325, (const std::string *)v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v40, v41);
  if (SBYTE7(v319) < 0)
    operator delete(v318[0]);
  if ((v335 & 7) != 0)
  {
    v42 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v44 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  LOWORD(v324.__r_.__value_.__l.__data_) = 0;
  sub_20C1AF2C4((uint64_t)&v325, (uint64_t)"half", &v324);
  sub_20BDDC0E4(v318, "GfHalf");
  v46 = sub_20C1A01B0((uint64_t)&v325, (const std::string *)v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v46, v47);
  if (SBYTE7(v319) < 0)
    operator delete(v318[0]);
  if ((v335 & 7) != 0)
  {
    v48 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v50 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  LODWORD(v318[0]) = 0;
  sub_20C1AF43C((uint64_t)&v325, (uint64_t)"float", v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v52);
  if ((v335 & 7) != 0)
  {
    v53 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v55 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  v318[0] = 0;
  sub_20C1AF5B4((uint64_t)&v325, (uint64_t)"double", v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v57);
  if ((v335 & 7) != 0)
  {
    v58 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v60 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v318[0] = 0;
  sub_20C1AF72C((uint64_t)&v325, (uint64_t)"timecode", v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v62);
  if ((v335 & 7) != 0)
  {
    v63 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v65 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v66 = __ldxr(v65);
    while (__stlxr(v66 - 2, v65));
  }
  v318[0] = 0;
  v318[1] = 0;
  *(_QWORD *)&v319 = 0;
  sub_20C1AF8A0((uint64_t)&v325, (uint64_t)"string", (uint64_t)v318);
  sub_20BDDC0E4(&v324, "std::string");
  v67 = sub_20C1A01B0((uint64_t)&v325, &v324);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v67, v68);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  if ((v335 & 7) != 0)
  {
    v69 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v71 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stlxr(v72 - 2, v71));
  }
  if (SBYTE7(v319) < 0)
    operator delete(v318[0]);
  v318[0] = 0;
  sub_20C1AFA20((uint64_t)&v325, (uint64_t)"token", v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v73);
  if ((v335 & 7) != 0)
  {
    v74 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stlxr(v75 - 2, v74));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v76 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  if (((uint64_t)v318[0] & 7) != 0)
  {
    v78 = (unsigned int *)((unint64_t)v318[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v318);
  sub_20C1AFBB8((uint64_t)&v325, (uint64_t)"asset", (__int128 *)v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v80);
  if ((v335 & 7) != 0)
  {
    v81 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v83 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stlxr(v84 - 2, v83));
  }
  if (SHIBYTE(v320) < 0)
    operator delete(*((void **)&v319 + 1));
  if (SBYTE7(v319) < 0)
    operator delete(v318[0]);
  sub_20C1AFD38((uint64_t)&v325, (uint64_t)"opaque");
  v85 = sub_20C1A0334((uint64_t)&v325);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v85, v86);
  if ((v335 & 7) != 0)
  {
    v87 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v89 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  sub_20C1AFD38((uint64_t)&v325, (uint64_t)"group");
  v91 = sub_20C1A0334((uint64_t)&v325);
  v92 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v92)
    v92 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  sub_20BF32220((_QWORD *)(v91 + 112), (_QWORD *)v92 + 9);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v91, v93);
  if ((v335 & 7) != 0)
  {
    v94 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v96 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  *(_OWORD *)v322 = 0u;
  v323 = 0u;
  v320 = 0u;
  v321 = 0u;
  *(_OWORD *)v318 = 0u;
  v319 = 0u;
  sub_20C1AFEA4((uint64_t)&v325, (uint64_t)"pathExpression", (uint64_t)v318);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v98);
  if ((v335 & 7) != 0)
  {
    v99 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v101 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v102 = __ldxr(v101);
    while (__stlxr(v102 - 2, v101));
  }
  if (SHIBYTE(v323) < 0)
    operator delete(v322[1]);
  v324.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
  sub_20C00E25C((void ***)&v324);
  v324.__r_.__value_.__r.__words[0] = (std::string::size_type)&v319 + 8;
  sub_20C00D5A8((void ***)&v324);
  if (v318[0])
  {
    v318[1] = v318[0];
    operator delete(v318[0]);
  }
  v318[0] = 0;
  v318[1] = 0;
  sub_20C1B0024((uint64_t)&v325, (uint64_t)"double2", v318);
  v336.i64[0] = 2;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v103);
  if ((v335 & 7) != 0)
  {
    v104 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v105 = __ldxr(v104);
    while (__stlxr(v105 - 2, v104));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v106 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v107 = __ldxr(v106);
    while (__stlxr(v107 - 2, v106));
  }
  v318[0] = 0;
  v318[1] = 0;
  *(_QWORD *)&v319 = 0;
  sub_20C1B01C8((uint64_t)&v325, (uint64_t)"double3", (uint64_t)v318);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v108);
  if ((v335 & 7) != 0)
  {
    v109 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v110 = __ldxr(v109);
    while (__stlxr(v110 - 2, v109));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v111 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  *(_OWORD *)v318 = 0u;
  v319 = 0u;
  sub_20C1B0374((uint64_t)&v325, (uint64_t)"double4", v318);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v113);
  if ((v335 & 7) != 0)
  {
    v114 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v116 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v117 = __ldxr(v116);
    while (__stlxr(v117 - 2, v116));
  }
  v318[0] = 0;
  sub_20C1B0518((uint64_t)&v325, (uint64_t)"float2", v318);
  v336.i64[0] = 2;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v118);
  if ((v335 & 7) != 0)
  {
    v119 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v120 = __ldxr(v119);
    while (__stlxr(v120 - 2, v119));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v121 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v122 = __ldxr(v121);
    while (__stlxr(v122 - 2, v121));
  }
  v318[0] = 0;
  LODWORD(v318[1]) = 0;
  sub_20C1B068C((uint64_t)&v325, (uint64_t)"float3", (uint64_t)v318);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v123);
  if ((v335 & 7) != 0)
  {
    v124 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v125 = __ldxr(v124);
    while (__stlxr(v125 - 2, v124));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v126 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v318[0] = 0;
  v318[1] = 0;
  sub_20C1B0838((uint64_t)&v325, (uint64_t)"float4", v318);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v128);
  if ((v335 & 7) != 0)
  {
    v129 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v131 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v132 = __ldxr(v131);
    while (__stlxr(v132 - 2, v131));
  }
  LODWORD(v318[0]) = 0;
  sub_20C1B09DC((uint64_t)&v325, (uint64_t)"half2", v318);
  v336.i64[0] = 2;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v133);
  if ((v335 & 7) != 0)
  {
    v134 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v135 = __ldxr(v134);
    while (__stlxr(v135 - 2, v134));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v136 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v137 = __ldxr(v136);
    while (__stlxr(v137 - 2, v136));
  }
  LODWORD(v318[0]) = 0;
  WORD2(v318[0]) = 0;
  sub_20C1B0B54((uint64_t)&v325, (uint64_t)"half3", (uint64_t)v318);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v138);
  if ((v335 & 7) != 0)
  {
    v139 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v140 = __ldxr(v139);
    while (__stlxr(v140 - 2, v139));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v141 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  v318[0] = 0;
  sub_20C1B0CD4((uint64_t)&v325, (uint64_t)"half4", v318);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v143);
  if ((v335 & 7) != 0)
  {
    v144 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v146 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v147 = __ldxr(v146);
    while (__stlxr(v147 - 2, v146));
  }
  v318[0] = 0;
  sub_20C1B0E48((uint64_t)&v325, (uint64_t)"int2", v318);
  v336.i64[0] = 2;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v148);
  if ((v335 & 7) != 0)
  {
    v149 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v150 = __ldxr(v149);
    while (__stlxr(v150 - 2, v149));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v151 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v152 = __ldxr(v151);
    while (__stlxr(v152 - 2, v151));
  }
  v318[0] = 0;
  LODWORD(v318[1]) = 0;
  sub_20C1B0FBC((uint64_t)&v325, (uint64_t)"int3", (uint64_t)v318);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v153);
  if ((v335 & 7) != 0)
  {
    v154 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v155 = __ldxr(v154);
    while (__stlxr(v155 - 2, v154));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v156 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stlxr(v157 - 2, v156));
  }
  v318[0] = 0;
  v318[1] = 0;
  sub_20C1B1168((uint64_t)&v325, (uint64_t)"int4", v318);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v158);
  if ((v335 & 7) != 0)
  {
    v159 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v161 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v162 = __ldxr(v161);
    while (__stlxr(v162 - 2, v161));
  }
  LODWORD(v318[0]) = 0;
  WORD2(v318[0]) = 0;
  sub_20C1B0B54((uint64_t)&v325, (uint64_t)"point3h", (uint64_t)v318);
  v163 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v163;
  sub_20BF32220(&v335, v5);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v164);
  if ((v335 & 7) != 0)
  {
    v165 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stlxr(v166 - 2, v165));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v167 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v168 = __ldxr(v167);
    while (__stlxr(v168 - 2, v167));
  }
  v318[0] = 0;
  LODWORD(v318[1]) = 0;
  sub_20C1B068C((uint64_t)&v325, (uint64_t)"point3f", (uint64_t)v318);
  v169 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v169;
  sub_20BF32220(&v335, v5);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v170);
  if ((v335 & 7) != 0)
  {
    v171 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stlxr(v172 - 2, v171));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v173 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v174 = __ldxr(v173);
    while (__stlxr(v174 - 2, v173));
  }
  v318[0] = 0;
  v318[1] = 0;
  *(_QWORD *)&v319 = 0;
  sub_20C1B01C8((uint64_t)&v325, (uint64_t)"point3d", (uint64_t)v318);
  v175 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v175;
  sub_20BF32220(&v335, v5);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v176);
  if ((v335 & 7) != 0)
  {
    v177 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stlxr(v178 - 2, v177));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v179 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v180 = __ldxr(v179);
    while (__stlxr(v180 - 2, v179));
  }
  LODWORD(v318[0]) = 0;
  WORD2(v318[0]) = 0;
  sub_20C1B0B54((uint64_t)&v325, (uint64_t)"vector3h", (uint64_t)v318);
  v181 = (_QWORD *)(v6 + 16);
  v182 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v182;
  sub_20BF32220(&v335, v181);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v183);
  if ((v335 & 7) != 0)
  {
    v184 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v185 = __ldxr(v184);
    while (__stlxr(v185 - 2, v184));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v186 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v187 = __ldxr(v186);
    while (__stlxr(v187 - 2, v186));
  }
  v318[0] = 0;
  LODWORD(v318[1]) = 0;
  sub_20C1B068C((uint64_t)&v325, (uint64_t)"vector3f", (uint64_t)v318);
  v188 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v188;
  sub_20BF32220(&v335, v181);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v189);
  if ((v335 & 7) != 0)
  {
    v190 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v191 = __ldxr(v190);
    while (__stlxr(v191 - 2, v190));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v192 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stlxr(v193 - 2, v192));
  }
  v318[0] = 0;
  v318[1] = 0;
  *(_QWORD *)&v319 = 0;
  sub_20C1B01C8((uint64_t)&v325, (uint64_t)"vector3d", (uint64_t)v318);
  v194 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v194;
  sub_20BF32220(&v335, v181);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v195);
  if ((v335 & 7) != 0)
  {
    v196 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v197 = __ldxr(v196);
    while (__stlxr(v197 - 2, v196));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v198 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v199 = __ldxr(v198);
    while (__stlxr(v199 - 2, v198));
  }
  LODWORD(v318[0]) = 0;
  WORD2(v318[0]) = 0;
  sub_20C1B0B54((uint64_t)&v325, (uint64_t)"normal3h", (uint64_t)v318);
  v200 = (_QWORD *)(v7 + 8);
  v201 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v201;
  sub_20BF32220(&v335, v200);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v202);
  if ((v335 & 7) != 0)
  {
    v203 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v204 = __ldxr(v203);
    while (__stlxr(v204 - 2, v203));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v205 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v206 = __ldxr(v205);
    while (__stlxr(v206 - 2, v205));
  }
  v318[0] = 0;
  LODWORD(v318[1]) = 0;
  sub_20C1B068C((uint64_t)&v325, (uint64_t)"normal3f", (uint64_t)v318);
  v207 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v207;
  sub_20BF32220(&v335, v200);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v208);
  if ((v335 & 7) != 0)
  {
    v209 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v210 = __ldxr(v209);
    while (__stlxr(v210 - 2, v209));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v211 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v212 = __ldxr(v211);
    while (__stlxr(v212 - 2, v211));
  }
  v318[0] = 0;
  v318[1] = 0;
  *(_QWORD *)&v319 = 0;
  sub_20C1B01C8((uint64_t)&v325, (uint64_t)"normal3d", (uint64_t)v318);
  v213 = *((_QWORD *)v4 + 1);
  v333 = *(_QWORD *)v4;
  v334 = v213;
  sub_20BF32220(&v335, v200);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v214);
  if ((v335 & 7) != 0)
  {
    v215 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v216 = __ldxr(v215);
    while (__stlxr(v216 - 2, v215));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v217 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v218 = __ldxr(v217);
    while (__stlxr(v218 - 2, v217));
  }
  LODWORD(v318[0]) = 0;
  WORD2(v318[0]) = 0;
  sub_20C1B0B54((uint64_t)&v325, (uint64_t)"color3h", (uint64_t)v318);
  v219 = (_QWORD *)(v8 + 24);
  sub_20BF32220(&v335, v219);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v220);
  if ((v335 & 7) != 0)
  {
    v221 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v222 = __ldxr(v221);
    while (__stlxr(v222 - 2, v221));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v223 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v224 = __ldxr(v223);
    while (__stlxr(v224 - 2, v223));
  }
  v318[0] = 0;
  LODWORD(v318[1]) = 0;
  sub_20C1B068C((uint64_t)&v325, (uint64_t)"color3f", (uint64_t)v318);
  sub_20BF32220(&v335, v219);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v225);
  if ((v335 & 7) != 0)
  {
    v226 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v227 = __ldxr(v226);
    while (__stlxr(v227 - 2, v226));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v228 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stlxr(v229 - 2, v228));
  }
  v318[0] = 0;
  v318[1] = 0;
  *(_QWORD *)&v319 = 0;
  sub_20C1B01C8((uint64_t)&v325, (uint64_t)"color3d", (uint64_t)v318);
  sub_20BF32220(&v335, v219);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v230);
  if ((v335 & 7) != 0)
  {
    v231 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v232 = __ldxr(v231);
    while (__stlxr(v232 - 2, v231));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v233 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v234 = __ldxr(v233);
    while (__stlxr(v234 - 2, v233));
  }
  v318[0] = 0;
  sub_20C1B0CD4((uint64_t)&v325, (uint64_t)"color4h", v318);
  sub_20BF32220(&v335, v219);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v235);
  if ((v335 & 7) != 0)
  {
    v236 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v237 = __ldxr(v236);
    while (__stlxr(v237 - 2, v236));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v238 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v239 = __ldxr(v238);
    while (__stlxr(v239 - 2, v238));
  }
  v318[0] = 0;
  v318[1] = 0;
  sub_20C1B0838((uint64_t)&v325, (uint64_t)"color4f", v318);
  sub_20BF32220(&v335, v219);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v240);
  if ((v335 & 7) != 0)
  {
    v241 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v242 = __ldxr(v241);
    while (__stlxr(v242 - 2, v241));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v243 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stlxr(v244 - 2, v243));
  }
  *(_OWORD *)v318 = 0u;
  v319 = 0u;
  sub_20C1B0374((uint64_t)&v325, (uint64_t)"color4d", v318);
  sub_20BF32220(&v335, v219);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v245);
  if ((v335 & 7) != 0)
  {
    v246 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v247 = __ldxr(v246);
    while (__stlxr(v247 - 2, v246));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v248 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v249 = __ldxr(v248);
    while (__stlxr(v249 - 2, v248));
  }
  v318[0] = (void *)0x3C00000000000000;
  sub_20C1B130C((uint64_t)&v325, (uint64_t)"quath", v318);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v250);
  if ((v335 & 7) != 0)
  {
    v251 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v252 = __ldxr(v251);
    while (__stlxr(v252 - 2, v251));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v253 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v254 = __ldxr(v253);
    while (__stlxr(v254 - 2, v253));
  }
  *(_OWORD *)v318 = xmmword_20CA9B220;
  sub_20C1B1480((uint64_t)&v325, (uint64_t)"quatf", v318);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v255);
  if ((v335 & 7) != 0)
  {
    v256 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v257 = __ldxr(v256);
    while (__stlxr(v257 - 2, v256));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v258 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v259 = __ldxr(v258);
    while (__stlxr(v259 - 2, v258));
  }
  v318[0] = 0;
  v318[1] = 0;
  *(_QWORD *)&v319 = 0;
  *((_QWORD *)&v319 + 1) = 0x3FF0000000000000;
  sub_20C1B1620((uint64_t)&v325, (uint64_t)"quatd", v318);
  v336.i64[0] = 4;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v260);
  if ((v335 & 7) != 0)
  {
    v261 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v262 = __ldxr(v261);
    while (__stlxr(v262 - 2, v261));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v263 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v264 = __ldxr(v263);
    while (__stlxr(v264 - 2, v263));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)v318, 1.0);
  sub_20C1B17C0((uint64_t)&v325, (uint64_t)"matrix2d", v318);
  v336 = vdupq_n_s64(2uLL);
  v337 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v265);
  if ((v335 & 7) != 0)
  {
    v266 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v267 = __ldxr(v266);
    while (__stlxr(v267 - 2, v266));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v268 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v269 = __ldxr(v268);
    while (__stlxr(v269 - 2, v268));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)v318, 1.0);
  sub_20C1B1964((uint64_t)&v325, (uint64_t)"matrix3d", (uint64_t)v318);
  v336 = vdupq_n_s64(3uLL);
  v337 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v270);
  if ((v335 & 7) != 0)
  {
    v271 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v272 = __ldxr(v271);
    while (__stlxr(v272 - 2, v271));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v273 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v274 = __ldxr(v273);
    while (__stlxr(v274 - 2, v273));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v318, 1.0);
  sub_20C1B1B18((uint64_t)&v325, (uint64_t)"matrix4d", v318);
  v336 = vdupq_n_s64(4uLL);
  v337 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v275);
  if ((v335 & 7) != 0)
  {
    v276 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v277 = __ldxr(v276);
    while (__stlxr(v277 - 2, v276));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v278 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v279 = __ldxr(v278);
    while (__stlxr(v279 - 2, v278));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v318, 1.0);
  sub_20C1B1B18((uint64_t)&v325, (uint64_t)"frame4d", v318);
  v280 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v280)
    v280 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  sub_20BF32220(&v335, (_QWORD *)v280 + 4);
  v336 = vdupq_n_s64(4uLL);
  v337 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v281);
  if ((v335 & 7) != 0)
  {
    v282 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v283 = __ldxr(v282);
    while (__stlxr(v283 - 2, v282));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v284 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v285 = __ldxr(v284);
    while (__stlxr(v285 - 2, v284));
  }
  v318[0] = 0;
  sub_20C1B0518((uint64_t)&v325, (uint64_t)"texCoord2f", v318);
  v286 = (_QWORD *)(v9 + 80);
  sub_20BF32220(&v335, v286);
  v336.i64[0] = 2;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v287);
  if ((v335 & 7) != 0)
  {
    v288 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v289 = __ldxr(v288);
    while (__stlxr(v289 - 2, v288));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v290 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v291 = __ldxr(v290);
    while (__stlxr(v291 - 2, v290));
  }
  v318[0] = 0;
  v318[1] = 0;
  sub_20C1B0024((uint64_t)&v325, (uint64_t)"texCoord2d", v318);
  sub_20BF32220(&v335, v286);
  v336.i64[0] = 2;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v292);
  if ((v335 & 7) != 0)
  {
    v293 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v294 = __ldxr(v293);
    while (__stlxr(v294 - 2, v293));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v295 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v296 = __ldxr(v295);
    while (__stlxr(v296 - 2, v295));
  }
  LODWORD(v318[0]) = 0;
  sub_20C1B09DC((uint64_t)&v325, (uint64_t)"texCoord2h", v318);
  sub_20BF32220(&v335, v286);
  v336.i64[0] = 2;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v297);
  if ((v335 & 7) != 0)
  {
    v298 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v299 = __ldxr(v298);
    while (__stlxr(v299 - 2, v298));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v300 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v301 = __ldxr(v300);
    while (__stlxr(v301 - 2, v300));
  }
  v318[0] = 0;
  LODWORD(v318[1]) = 0;
  sub_20C1B068C((uint64_t)&v325, (uint64_t)"texCoord3f", (uint64_t)v318);
  sub_20BF32220(&v335, v286);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v302);
  if ((v335 & 7) != 0)
  {
    v303 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v304 = __ldxr(v303);
    while (__stlxr(v304 - 2, v303));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v305 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v306 = __ldxr(v305);
    while (__stlxr(v306 - 2, v305));
  }
  v318[0] = 0;
  v318[1] = 0;
  *(_QWORD *)&v319 = 0;
  sub_20C1B01C8((uint64_t)&v325, (uint64_t)"texCoord3d", (uint64_t)v318);
  sub_20BF32220(&v335, v286);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v307);
  if ((v335 & 7) != 0)
  {
    v308 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v309 = __ldxr(v308);
    while (__stlxr(v309 - 2, v308));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v310 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v311 = __ldxr(v310);
    while (__stlxr(v311 - 2, v310));
  }
  LODWORD(v318[0]) = 0;
  WORD2(v318[0]) = 0;
  sub_20C1B0B54((uint64_t)&v325, (uint64_t)"texCoord3h", (uint64_t)v318);
  sub_20BF32220(&v335, v286);
  v336.i64[0] = 3;
  v337 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v325, v312);
  if ((v335 & 7) != 0)
  {
    v313 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v314 = __ldxr(v313);
    while (__stlxr(v314 - 2, v313));
  }
  if (v332 < 0)
    operator delete(__p);
  if (v330 < 0)
    operator delete(v329);
  sub_20BF4C2D8((uint64_t)v328);
  result = sub_20BF4C2D8((uint64_t)v327);
  if ((v325 & 7) != 0)
  {
    v316 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v317 = __ldxr(v316);
    while (__stlxr(v317 - 2, v316));
  }
  return result;
}

void sub_20C1A5BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  sub_20C1AEAE4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1A5DC0(tbb::spin_rw_mutex_v3 **a1, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  uint64_t *v3;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  char *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  char *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  char *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  uint64_t v100;
  char *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  _QWORD *v106;
  char *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  char *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  char *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  char *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  char *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  char *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  char *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  char *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v147;
  char *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v153;
  char *v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v159;
  char *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v165;
  char *v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v171;
  char *v172;
  unsigned int *v173;
  unsigned int v174;
  uint64_t result;
  unsigned int *v176;
  unsigned int v177;
  __int128 v178;
  __int128 v179;
  unint64_t v180;
  int v181;
  _BYTE v182[16];
  _BYTE v183[16];
  void *v184;
  char v185;
  void *__p;
  char v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int64x2_t v191;
  uint64_t v192;
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  v180 = (unint64_t)&unk_24C52A7F0;
  v181 = 0;
  v3 = pxrInternal__aapl__pxrReserved__::SdfDefaultUnit((pxrInternal__aapl__pxrReserved__ *)&v180, a2);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v4)
    v4 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v5)
    v5 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v6)
    v6 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v7)
    v7 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  *(_QWORD *)&v178 = 0;
  sub_20C1B0E48((uint64_t)&v180, (uint64_t)"Vec2i", &v178);
  v191.i64[0] = 2;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v8);
  if ((v190 & 7) != 0)
  {
    v9 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v11 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  LODWORD(v178) = 0;
  sub_20C1B09DC((uint64_t)&v180, (uint64_t)"Vec2h", &v178);
  v191.i64[0] = 2;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v13);
  if ((v190 & 7) != 0)
  {
    v14 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v16 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  *(_QWORD *)&v178 = 0;
  sub_20C1B0518((uint64_t)&v180, (uint64_t)"Vec2f", &v178);
  v191.i64[0] = 2;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v18);
  if ((v190 & 7) != 0)
  {
    v19 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v21 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v178 = 0uLL;
  sub_20C1B0024((uint64_t)&v180, (uint64_t)"Vec2d", &v178);
  v191.i64[0] = 2;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v23);
  if ((v190 & 7) != 0)
  {
    v24 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v26 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  *(_QWORD *)&v178 = 0;
  DWORD2(v178) = 0;
  sub_20C1B0FBC((uint64_t)&v180, (uint64_t)"Vec3i", (uint64_t)&v178);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v28);
  if ((v190 & 7) != 0)
  {
    v29 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v31 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  LODWORD(v178) = 0;
  WORD2(v178) = 0;
  sub_20C1B0B54((uint64_t)&v180, (uint64_t)"Vec3h", (uint64_t)&v178);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v33);
  if ((v190 & 7) != 0)
  {
    v34 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v36 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  *(_QWORD *)&v178 = 0;
  DWORD2(v178) = 0;
  sub_20C1B068C((uint64_t)&v180, (uint64_t)"Vec3f", (uint64_t)&v178);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v38);
  if ((v190 & 7) != 0)
  {
    v39 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v41 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  v178 = 0uLL;
  *(_QWORD *)&v179 = 0;
  sub_20C1B01C8((uint64_t)&v180, (uint64_t)"Vec3d", (uint64_t)&v178);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v43);
  if ((v190 & 7) != 0)
  {
    v44 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v46 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  v178 = 0uLL;
  sub_20C1B1168((uint64_t)&v180, (uint64_t)"Vec4i", &v178);
  v191.i64[0] = 4;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v48);
  if ((v190 & 7) != 0)
  {
    v49 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v51 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  *(_QWORD *)&v178 = 0;
  sub_20C1B0CD4((uint64_t)&v180, (uint64_t)"Vec4h", &v178);
  v191.i64[0] = 4;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v53);
  if ((v190 & 7) != 0)
  {
    v54 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v56 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  v178 = 0uLL;
  sub_20C1B0838((uint64_t)&v180, (uint64_t)"Vec4f", &v178);
  v191.i64[0] = 4;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v58);
  if ((v190 & 7) != 0)
  {
    v59 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v61 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  v178 = 0u;
  v179 = 0u;
  sub_20C1B0374((uint64_t)&v180, (uint64_t)"Vec4d", &v178);
  v191.i64[0] = 4;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v63);
  if ((v190 & 7) != 0)
  {
    v64 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v65 = __ldxr(v64);
    while (__stlxr(v65 - 2, v64));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v66 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v178 = 0uLL;
  *(_QWORD *)&v179 = 0;
  sub_20C1B01C8((uint64_t)&v180, (uint64_t)"Point", (uint64_t)&v178);
  v68 = v3[1];
  v188 = *v3;
  v189 = v68;
  sub_20BF32220(&v190, v4);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v69);
  if ((v190 & 7) != 0)
  {
    v70 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v71 = __ldxr(v70);
    while (__stlxr(v71 - 2, v70));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v72 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  *(_QWORD *)&v178 = 0;
  DWORD2(v178) = 0;
  sub_20C1B068C((uint64_t)&v180, (uint64_t)"PointFloat", (uint64_t)&v178);
  v74 = v3[1];
  v188 = *v3;
  v189 = v74;
  sub_20BF32220(&v190, v4);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v75);
  if ((v190 & 7) != 0)
  {
    v76 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v78 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v178 = 0uLL;
  *(_QWORD *)&v179 = 0;
  sub_20C1B01C8((uint64_t)&v180, (uint64_t)"Normal", (uint64_t)&v178);
  v80 = (_QWORD *)((char *)v6 + 8);
  v81 = v3[1];
  v188 = *v3;
  v189 = v81;
  sub_20BF32220(&v190, v80);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v82);
  if ((v190 & 7) != 0)
  {
    v83 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stlxr(v84 - 2, v83));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v85 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
  *(_QWORD *)&v178 = 0;
  DWORD2(v178) = 0;
  sub_20C1B068C((uint64_t)&v180, (uint64_t)"NormalFloat", (uint64_t)&v178);
  v87 = v3[1];
  v188 = *v3;
  v189 = v87;
  sub_20BF32220(&v190, v80);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v88);
  if ((v190 & 7) != 0)
  {
    v89 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v91 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v92 = __ldxr(v91);
    while (__stlxr(v92 - 2, v91));
  }
  v178 = 0uLL;
  *(_QWORD *)&v179 = 0;
  sub_20C1B01C8((uint64_t)&v180, (uint64_t)"Vector", (uint64_t)&v178);
  v93 = (_QWORD *)((char *)v5 + 16);
  v94 = v3[1];
  v188 = *v3;
  v189 = v94;
  sub_20BF32220(&v190, v93);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v95);
  if ((v190 & 7) != 0)
  {
    v96 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v98 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stlxr(v99 - 2, v98));
  }
  *(_QWORD *)&v178 = 0;
  DWORD2(v178) = 0;
  sub_20C1B068C((uint64_t)&v180, (uint64_t)"VectorFloat", (uint64_t)&v178);
  v100 = v3[1];
  v188 = *v3;
  v189 = v100;
  sub_20BF32220(&v190, v93);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v101);
  if ((v190 & 7) != 0)
  {
    v102 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v104 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v105 = __ldxr(v104);
    while (__stlxr(v105 - 2, v104));
  }
  v178 = 0uLL;
  *(_QWORD *)&v179 = 0;
  sub_20C1B01C8((uint64_t)&v180, (uint64_t)"Color", (uint64_t)&v178);
  v106 = (_QWORD *)((char *)v7 + 24);
  sub_20BF32220(&v190, v106);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v107);
  if ((v190 & 7) != 0)
  {
    v108 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v110 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v111 = __ldxr(v110);
    while (__stlxr(v111 - 2, v110));
  }
  *(_QWORD *)&v178 = 0;
  DWORD2(v178) = 0;
  sub_20C1B068C((uint64_t)&v180, (uint64_t)"ColorFloat", (uint64_t)&v178);
  sub_20BF32220(&v190, v106);
  v191.i64[0] = 3;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v112);
  if ((v190 & 7) != 0)
  {
    v113 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v114 = __ldxr(v113);
    while (__stlxr(v114 - 2, v113));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v115 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v116 = __ldxr(v115);
    while (__stlxr(v116 - 2, v115));
  }
  *(_QWORD *)&v178 = 0x3C00000000000000;
  sub_20C1B130C((uint64_t)&v180, (uint64_t)"Quath", &v178);
  v191.i64[0] = 4;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v117);
  if ((v190 & 7) != 0)
  {
    v118 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v120 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v178 = xmmword_20CA9B220;
  sub_20C1B1480((uint64_t)&v180, (uint64_t)"Quatf", &v178);
  v191.i64[0] = 4;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v122);
  if ((v190 & 7) != 0)
  {
    v123 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v125 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v126 = __ldxr(v125);
    while (__stlxr(v126 - 2, v125));
  }
  v178 = 0uLL;
  *(_QWORD *)&v179 = 0;
  *((_QWORD *)&v179 + 1) = 0x3FF0000000000000;
  sub_20C1B1620((uint64_t)&v180, (uint64_t)"Quatd", &v178);
  v191.i64[0] = 4;
  v192 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v127);
  if ((v190 & 7) != 0)
  {
    v128 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v129 = __ldxr(v128);
    while (__stlxr(v129 - 2, v128));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v130 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v131 = __ldxr(v130);
    while (__stlxr(v131 - 2, v130));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v178, 1.0);
  sub_20C1B17C0((uint64_t)&v180, (uint64_t)"Matrix2d", &v178);
  v191 = vdupq_n_s64(2uLL);
  v192 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v132);
  if ((v190 & 7) != 0)
  {
    v133 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v134 = __ldxr(v133);
    while (__stlxr(v134 - 2, v133));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v135 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)&v178, 1.0);
  sub_20C1B1964((uint64_t)&v180, (uint64_t)"Matrix3d", (uint64_t)&v178);
  v191 = vdupq_n_s64(3uLL);
  v192 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v137);
  if ((v190 & 7) != 0)
  {
    v138 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v140 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v141 = __ldxr(v140);
    while (__stlxr(v141 - 2, v140));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v178, 1.0);
  sub_20C1B1B18((uint64_t)&v180, (uint64_t)"Matrix4d", &v178);
  v191 = vdupq_n_s64(4uLL);
  v192 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v142);
  if ((v190 & 7) != 0)
  {
    v143 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v144 = __ldxr(v143);
    while (__stlxr(v144 - 2, v143));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v145 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v146 = __ldxr(v145);
    while (__stlxr(v146 - 2, v145));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v178, 1.0);
  sub_20C1B1B18((uint64_t)&v180, (uint64_t)"Frame", &v178);
  v147 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v147)
    v147 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  sub_20BF32220(&v190, (_QWORD *)v147 + 4);
  v191 = vdupq_n_s64(4uLL);
  v192 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v148);
  if ((v190 & 7) != 0)
  {
    v149 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v150 = __ldxr(v149);
    while (__stlxr(v150 - 2, v149));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v151 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v152 = __ldxr(v151);
    while (__stlxr(v152 - 2, v151));
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v178, 1.0);
  sub_20C1B1B18((uint64_t)&v180, (uint64_t)"Transform", &v178);
  v153 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v153)
    v153 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  sub_20BF32220(&v190, (_QWORD *)v153 + 5);
  v191 = vdupq_n_s64(4uLL);
  v192 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v154);
  if ((v190 & 7) != 0)
  {
    v155 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v156 = __ldxr(v155);
    while (__stlxr(v156 - 2, v155));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v157 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v158 = __ldxr(v157);
    while (__stlxr(v158 - 2, v157));
  }
  LODWORD(v178) = 0;
  sub_20C1AECEC((uint64_t)&v180, (uint64_t)"PointIndex", &v178);
  v159 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v159)
    v159 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  sub_20BF32220(&v190, (_QWORD *)v159 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v160);
  if ((v190 & 7) != 0)
  {
    v161 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v162 = __ldxr(v161);
    while (__stlxr(v162 - 2, v161));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v163 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v164 = __ldxr(v163);
    while (__stlxr(v164 - 2, v163));
  }
  LODWORD(v178) = 0;
  sub_20C1AECEC((uint64_t)&v180, (uint64_t)"EdgeIndex", &v178);
  v165 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v165)
    v165 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  sub_20BF32220(&v190, (_QWORD *)v165 + 7);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v166);
  if ((v190 & 7) != 0)
  {
    v167 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v168 = __ldxr(v167);
    while (__stlxr(v168 - 2, v167));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v169 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v170 = __ldxr(v169);
    while (__stlxr(v170 - 2, v169));
  }
  LODWORD(v178) = 0;
  sub_20C1AECEC((uint64_t)&v180, (uint64_t)"FaceIndex", &v178);
  v171 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v171)
    v171 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  sub_20BF32220(&v190, (_QWORD *)v171 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v180, v172);
  if ((v190 & 7) != 0)
  {
    v173 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v174 = __ldxr(v173);
    while (__stlxr(v174 - 2, v173));
  }
  if (v187 < 0)
    operator delete(__p);
  if (v185 < 0)
    operator delete(v184);
  sub_20BF4C2D8((uint64_t)v183);
  result = sub_20BF4C2D8((uint64_t)v182);
  if ((v180 & 7) != 0)
  {
    v176 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v177 = __ldxr(v176);
    while (__stlxr(v177 - 2, v176));
  }
  return result;
}

void sub_20C1A7528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20C1AEAE4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20C1A75C4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v29;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v33;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v34;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v35;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v37;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v38;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v39;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v40;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v41;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v42;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v43;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v44;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v45;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v46;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v47;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v48;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v49;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v50;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v51;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v52;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v53;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v54;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v55;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v56;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v57;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v58;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v59;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v60;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v61;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v62;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v63;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v64;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v65;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v66;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v67;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v68;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v69;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v70;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v71;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v72;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B372C(a1, v2);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B37B8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 8));
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B38B4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16));
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3974(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 24));
  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3A50(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 32));
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3A50(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 40));
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 48));
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9)
    v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3BA4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v9 + 56));
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B372C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 64));
  v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11)
    v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B38B4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v11 + 72));
  v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12)
    v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B38B4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v12 + 80));
  v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13)
    v13 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3CC4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 88));
  v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v14)
    v14 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3A50(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 96));
  v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v15)
    v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v15 + 104));
  v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v16)
    v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3D40(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v16 + 112));
  v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v17)
    v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v17 + 120));
  v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v18)
    v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3E3C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v18 + 128));
  v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v19)
    v19 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v19 + 136));
  v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20)
    v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3F00(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v20 + 480));
  v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21)
    v21 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3F00(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v21 + 144));
  v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22)
    v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B38B4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v22 + 152));
  v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23)
    v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3F88(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v23 + 160));
  v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24)
    v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3F00(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v24 + 168));
  v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v25)
    v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B372C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v25 + 176));
  v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v26)
    v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B372C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v26 + 184));
  v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v27)
    v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3BA4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v27 + 192));
  v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v28)
    v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B372C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v28 + 200));
  v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v29)
    v29 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3A50(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v29 + 208));
  v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v30)
    v30 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v30 + 232));
  v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v31)
    v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B4014(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v31 + 216));
  v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v32)
    v32 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B372C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v32 + 224));
  v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v33)
    v33 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B40E0(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v33 + 240));
  v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v34)
    v34 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B4200(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v34 + 248));
  v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v35)
    v35 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v35 + 256));
  v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v36)
    v36 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B38B4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v36 + 264));
  v37 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v37)
    v37 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B4014(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v37 + 272));
  v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v38)
    v38 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B428C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v38 + 280));
  v39 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v39)
    v39 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v39 + 296));
  v40 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v40)
    v40 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3BA4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v40 + 424));
  v41 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v41)
    v41 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B43AC(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v41 + 432));
  v42 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v42)
    v42 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B4478(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v42 + 288));
  v43 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v43)
    v43 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3BA4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v43 + 304));
  v44 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v44)
    v44 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B4544(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v44 + 312));
  v45 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v45)
    v45 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3F00(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v45 + 488));
  v46 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v46)
    v46 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3F00(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v46 + 320));
  v47 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v47)
    v47 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3A50(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v47 + 328));
  v48 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v48)
    v48 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B372C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v48 + 336));
  v49 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v49)
    v49 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B372C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v49 + 344));
  v50 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v50)
    v50 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v50 + 352));
  v51 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v51)
    v51 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B45D0(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v51 + 360));
  v52 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v52)
    v52 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B469C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v52 + 368));
  v53 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v53)
    v53 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v53 + 376));
  v54 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v54)
    v54 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B38B4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v54 + 384));
  v55 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v55)
    v55 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3AD8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v55 + 392));
  v56 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v56)
    v56 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B38B4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v56 + 400));
  v57 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v57)
    v57 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B38B4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v57 + 408));
  v58 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v58)
    v58 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3A50(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v58 + 416));
  v59 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v59)
    v59 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3F00(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v59 + 440));
  v60 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v60)
    v60 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B3A50(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v60 + 448));
  v61 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v61)
    v61 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B4768(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v61 + 472));
  v62 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v62)
    v62 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B4888(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v62 + 456));
  v63 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v63)
    v63 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C1B4954(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v63 + 464));
  v64 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v64)
    v64 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B49E0(a1, v64);
  v65 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v65)
    v65 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B4014(a1, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v65 + 8));
  v66 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v66)
    v66 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B4014(a1, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v66 + 16));
  v67 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v67)
    v67 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B49E0(a1, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v67 + 24));
  v68 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v68)
    v68 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B4014(a1, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v68 + 32));
  v69 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v69)
    v69 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B4014(a1, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v69 + 40));
  v70 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v70)
    v70 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B49E0(a1, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v70 + 48));
  v71 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v71)
    v71 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B4014(a1, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v71 + 56));
  v72 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v72)
    v72 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  sub_20C1B4014(a1, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v72 + 64));
}

_QWORD *sub_20C1A7FE8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _BYTE *a3)
{
  _QWORD *v3;
  _BYTE v5[8];
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C51FCF3;
  v5[0] = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  sub_20BF4C2D8((uint64_t)v5);
  return v3;
}

void sub_20C1A8064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A8078(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = off_24C525500;
  sub_20BF56B40(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A8104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A8120(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ****a3)
{
  _QWORD *v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C51D8C8;
  sub_20BF4D058(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A81AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A81C8@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFB4608(a1) & 1) != 0)
  {
    v4 = sub_20BFB2D9C(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type std::string");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

_QWORD *sub_20C1A8244(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C528438;
  sub_20C0E81C4(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A82D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A82EC(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v7[3];

  v7[2] = *(char **)MEMORY[0x24BDAC8D0];
  v7[1] = (char *)&off_24C5255B8;
  sub_20C00A0DC(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A8378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A8394(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v8[0] = v3;
  v8[1] = (char *)&off_24C5207B8 + 1;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v8[0] = v4;
  }
  v6 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_20BF4C2D8((uint64_t)v8);
  return v6;
}

void sub_20C1A8430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A8444(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, char *a3)
{
  _QWORD *v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  sub_20C1B4AAC((uint64_t)v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A84C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A84E4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C5249C8;
  sub_20BFD86E0(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A8570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A858C@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFEA640(a1) & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFEA710(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidAttributeConnectionPath(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type SdfPath");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  const char *v9;
  uint64_t Typeid;
  uint64_t v11;
  const std::type_info *v12;
  char *v13;
  unint64_t v14;
  const char *v15;
  int v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  char *v20;
  void **v21;
  void **v22;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;
  int v33;

  v5 = sub_20BF2B388((_QWORD *)this + 2, a2);
  v7 = v5;
  if (!v5)
  {
    v28 = "sdf/schema.cpp";
    v29 = "_DoRegisterField";
    v30 = 1050;
    v31 = "SdfSchemaBase::FieldDefinition &pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(const TfToke"
          "n &, const VtValue &)";
    v32 = 0;
    v33 = 4;
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v28, (pxrInternal__aapl__pxrReserved__ *)"Field '%s' has not been created.", v6, v9);
  }
  Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 5));
  v11 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a3);
  if (strcmp((const char *)(*(_QWORD *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v11 + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v28 = "sdf/schema.cpp";
    v29 = "_DoRegisterField";
    v30 = 1060;
    v31 = "SdfSchemaBase::FieldDefinition &pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(const TfToke"
          "n &, const VtValue &)";
    v32 = 0;
    v33 = 4;
    v14 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0)
        v15 = *(const char **)v15;
    }
    else
    {
      v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 5), v12, v13, (uint64_t)v26);
    v16 = v27;
    v17 = (void **)v26[0];
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v18, v19, (uint64_t)__p);
    if (v16 >= 0)
      v21 = v26;
    else
      v21 = v17;
    if (v25 >= 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v28, (pxrInternal__aapl__pxrReserved__ *)"Registered fallback value for field '%s' does not match field type definition. (expected: %s, got: %s)", v20, v15, v21, v22);
  }
  sub_20BF4A9BC(v7 + 5, a3);
  return v7 + 3;
}

void sub_20C1A87C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C1A87F8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = off_24C525448;
  sub_20BF56B40(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A8884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A88A0(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _OWORD *a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v11[1] = &off_24C527B88;
  v6 = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)v6 = *a3;
  v7 = v6 + 4;
  atomic_store(0, v6 + 4);
  v11[0] = v6;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_20BF4C2D8((uint64_t)v11);
  return v9;
}

void sub_20C1A8958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A896C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v5[1] = &unk_24C52064B;
  v5[0] = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  sub_20BF4C2D8((uint64_t)v5);
  return v3;
}

void sub_20C1A89E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A89FC(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  _QWORD *v3;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52008B;
  v5 = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_20BF4C2D8((uint64_t)&v5);
  return v3;
}

void sub_20C1A8A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A8A8C@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL4 v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BF78EEC(a1) & 1) != 0)
  {
    v4 = *(double *)sub_20BF78F24(a1) > 0.0;
    sub_20C1B1E60(a2, v4, "Value must be greater than 0");
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type double");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

double sub_20C1A8B18@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFEA640(a1) & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFEA710(a1);
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidInheritPath(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type SdfPath");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

_QWORD *sub_20C1A8B90(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t **a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C526790;
  sub_20C030230(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A8C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1A8C38(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFB5E50(a1) & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFB46E8(a1);
    if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier((uint64_t)EmptyString, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type TfToken");
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

_QWORD *sub_20C1A8CC8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C526620;
  sub_20C02F37C(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A8D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A8D70@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20C1B1F04(a1) & 1) != 0)
  {
    v4 = sub_20C1B1F7C(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidPayload(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type SdfPayload");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

_QWORD *sub_20C1A8DE8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  _QWORD *v3;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&off_24C5298D8 + 3;
  v5 = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_20BF4C2D8((uint64_t)&v5);
  return v3;
}

void sub_20C1A8E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1A8E78(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string __p;
  char v7;
  std::string v8;

  sub_20C1A8F5C(a1, (uint64_t)a2);
  if (!a2[1].__r_.__value_.__s.__data_[0])
  {
    v4 = sub_20BFB2D9C(a1);
    v5 = *(unsigned __int8 *)(v4 + 23);
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
    {
      sub_20BDDC0E4(&v8, "Expected non-empty string");
      __p = v8;
      v7 = 1;
      sub_20C1B2170(a2, &__p);
      if (v7)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_20C1A8F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 && a14 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v15 + 24))
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1A8F5C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  __int128 v5;
  uint64_t v6;

  result = sub_20BFB4608(a1);
  if ((result & 1) != 0)
  {
    v4 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    result = (uint64_t)sub_20BDDC0E4(&v5, "Expected value of type string");
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
    v4 = 1;
  }
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

void sub_20C1A8FC0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFB5E50(a1) & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFB46E8(a1);
    if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidNamespacedIdentifier((size_t *)EmptyString, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type TfToken");
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

_QWORD *sub_20C1A9050(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C526568;
  sub_20C02C8C8(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A90DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A90F8@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20C1B2200(a1) & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20C1B2278(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidReference(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type SdfReference");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

double sub_20C1A9170@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFEA640(a1) & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFEA710(a1);
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSpecializesPath(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type SdfPath");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

double sub_20C1A91E8@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFEA640(a1) & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFEA710(a1);
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelationshipTargetPath(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type SdfPath");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

_QWORD *sub_20C1A9260(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C528048;
  sub_20C0E4994(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A92EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A9308@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFEA640(a1) & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFEA710(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type SdfPath");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

_QWORD *sub_20C1A9380(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  _QWORD *v3;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&off_24C527CC0 + 3;
  v5 = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_20BF4C2D8((uint64_t)&v5);
  return v3;
}

void sub_20C1A93FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A9410(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, __int128 **a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C526420;
  sub_20C020E24(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A949C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A94B8@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFB4608(a1) & 1) != 0)
  {
    v4 = sub_20BFB2D9C(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSubLayer(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type std::string");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

_QWORD *sub_20C1A9530(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C526368;
  sub_20C020690(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A95BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A95D8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C5266D8;
  sub_20C02FE24(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A9664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A9680(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ***a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C526858;
  sub_20C0307AC(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A970C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A9728@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFB4608(a1) & 1) != 0)
  {
    v4 = (__int128 *)sub_20BFB2D9C(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantSelection(v4, (_BYTE *)a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type std::string");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

_QWORD *sub_20C1A97A0(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  _QWORD *v3;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&off_24C5269E8 + 3;
  v5 = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_20BF4C2D8((uint64_t)&v5);
  return v3;
}

void sub_20C1A981C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1A9830(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _DWORD **a3)
{
  _QWORD *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &off_24C526910;
  sub_20C030C78(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1A98BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C1A98D8@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((sub_20BFB4608(a1) & 1) != 0)
  {
    v4 = (__int128 *)sub_20BFB2D9C(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(v4, a2);
  }
  else
  {
    sub_20BDDC0E4(&v6, "Expected value of type std::string");
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_UpdateMetadataFromPlugins(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition ***a5@<X8>)
{
  unsigned __int8 v8;
  uint64_t v9;
  const void **v10;
  uint64_t *v11;
  const void ***v12;
  _BOOL4 v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  uint64_t *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  const char *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  pxrInternal__aapl__pxrReserved__::TfToken *v30;
  uint64_t *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  std::string::size_type size;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  BOOL v41;
  std::string *v50;
  std::string::size_type v53;
  uint64_t v54;
  std::string *v57;
  _QWORD *DefaultValue;
  unint64_t JsArray;
  pxrInternal__aapl__pxrReserved__::JsValue *v60;
  pxrInternal__aapl__pxrReserved__::JsValue *v61;
  unint64_t v62;
  __int128 v63;
  pxrInternal__aapl__pxrReserved__::JsValue **v64;
  pxrInternal__aapl__pxrReserved__::JsValue *v65;
  pxrInternal__aapl__pxrReserved__::JsValue *v66;
  uint64_t v67;
  unint64_t String;
  __int128 v69;
  __int128 v70;
  __int128 *i;
  __int128 *v72;
  __int128 v73;
  unint64_t v74;
  pxrInternal__aapl__pxrReserved__::JsValue *v75;
  pxrInternal__aapl__pxrReserved__::JsValue *v76;
  std::string *v77;
  unint64_t *Instance;
  _QWORD *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  unint64_t v90;
  const char *v91;
  int Int;
  uint64_t v93;
  const char *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  pxrInternal__aapl__pxrReserved__::TfToken *v98;
  uint64_t *v99;
  unsigned int *v100;
  unsigned int v101;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *v102;
  pxrInternal__aapl__pxrReserved__::TfToken *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  pxrInternal__aapl__pxrReserved__::JsValue *v113;
  pxrInternal__aapl__pxrReserved__::JsValue *v114;
  const void **v115;
  pxrInternal__aapl__pxrReserved__::JsValue **v116;
  pxrInternal__aapl__pxrReserved__::JsValue *v117;
  pxrInternal__aapl__pxrReserved__::JsValue *v118;
  uint64_t v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  const void **v123;
  const void **j;
  pxrInternal__aapl__pxrReserved__::TfToken *v125;
  uint64_t *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::string::size_type v132;
  uint64_t v133;
  uint64_t v134;
  std::string::size_type v135;
  _BOOL4 v136;
  std::string::size_type v137;
  _BOOL4 v138;
  std::string::size_type v139;
  _BOOL4 v140;
  std::string::size_type v141;
  uint64_t *v142;
  unsigned int *v143;
  unsigned int v144;
  uint64_t *v145;
  uint64_t *v146;
  unint64_t v147;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition **v148;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition **v155;
  char *v156;
  char *v157;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *v158;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition ***v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t *v164;
  uint64_t *v165;
  const char *v166;
  char *v167;
  std::string *v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  void **v173;
  uint64_t ***v174;
  uint64_t **v175;
  uint64_t **v176;
  _DWORD *v177;
  std::string::size_type *v178;
  std::string::size_type *v179;
  uint64_t v180;
  unint64_t v181;
  pxrInternal__aapl__pxrReserved__::JsValue *v182;
  pxrInternal__aapl__pxrReserved__::JsValue *v183;
  uint64_t ***v184;
  uint64_t **v185;
  uint64_t **v186;
  double *v187;
  std::string::size_type *v188;
  uint64_t *v190;
  const void **v191;
  unint64_t v193;
  __int128 v194;
  std::string v195;
  uint64_t *v196;
  _QWORD *v197[2];
  uint64_t v198;
  uint64_t v199[3];
  uint64_t *v200;
  _QWORD *v201[2];
  void *v202[2];
  uint64_t v203;
  uint64_t Type;
  int64x2_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  unsigned int *v211;
  std::type_info **v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  std::type_info **v216;
  std::string __dst;
  const char *v218;
  void *v219[2];
  int v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226[3];
  void *__p;
  void *v228;
  void *v229;
  char v230;
  _BYTE v231[24];
  _BYTE *v232;
  char v233;
  _BYTE v234[24];
  _BYTE *v235;
  void *v236;
  char v237;
  uint64_t v238;

  v238 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_254987E10);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254987E10))
  {
    sub_20BDDC0E4(qword_254987DF8, "SdfMetadata");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254987DF8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254987E10);
  }
  v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (v9)
    v10 = (const void **)a3;
  else
    v10 = (const void **)qword_254987DF8;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v11 = *a2;
  v190 = a2[1];
  v191 = v10;
  if (*a2 != v190)
  {
    while (1)
    {
      v201[0] = 0;
      v201[1] = 0;
      v200 = (uint64_t *)v201;
      v12 = (const void ***)sub_20BF444D8(v11);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v12, v199);
      v13 = sub_20BFC9BA0((uint64_t)v199, v191, &v200);
      v14 = v200;
      if (v200 != (uint64_t *)v201 && v13)
        break;
LABEL_427:
      sub_20BE78E5C((uint64_t)v199, (_QWORD *)v199[1]);
      sub_20BE78E5C((uint64_t)&v200, v201[0]);
      v11 += 2;
      if (v11 == v190)
        return;
    }
    while (1)
    {
      v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v198);
      v197[0] = 0;
      v197[1] = 0;
      v196 = (uint64_t *)v197;
      if ((v198 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((v198 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      if (!sub_20BFC9BA0((uint64_t)&v200, (const void **)EmptyString, &v196))
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
        __dst.__r_.__value_.__r.__words[2] = 1707;
        v218 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBase"
               "::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
        LOBYTE(v219[0]) = 0;
        v20 = v198 & 0xFFFFFFFFFFFFFFF8;
        if ((v198 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v21 = (const char *)(v20 + 16);
          if (*(char *)(v20 + 39) < 0)
            v21 = *(const char **)v21;
        }
        else
        {
          v21 = "";
        }
        v22 = sub_20BF444D8(v11);
        v23 = (const char *)(v22 + 32);
        if (*(char *)(v22 + 55) < 0)
          v23 = *(const char **)v23;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Value must be a dictionary (at \"%s\" in plugin \"%s\")", v21, v23);
        goto LABEL_353;
      }
      memset(&v195, 0, sizeof(v195));
      v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C1AD528();
      if ((*((_QWORD *)v18 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
        v19 = (uint64_t *)((*((_QWORD *)v18 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v19 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      if (!sub_20C1AD494(&v196, (const void **)v19, &v195))
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
        __dst.__r_.__value_.__r.__words[2] = 1716;
        v218 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBase"
               "::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
        LOBYTE(v219[0]) = 0;
        v26 = v198 & 0xFFFFFFFFFFFFFFF8;
        if ((v198 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v27 = (const char *)(v26 + 16);
          if (*(char *)(v26 + 39) < 0)
            v27 = *(const char **)v27;
        }
        else
        {
          v27 = "";
        }
        v28 = sub_20BF444D8(v11);
        v29 = (const char *)(v28 + 32);
        if (*(char *)(v28 + 55) < 0)
          v29 = *(const char **)v29;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not read a string for \"type\" (at \"%s\" in plugin \"%s\")", v27, v29);
        goto LABEL_351;
      }
      if (sub_20BF2B2B4((_QWORD *)a1 + 2, &v198))
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
        __dst.__r_.__value_.__r.__words[2] = 1724;
        v218 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBase"
               "::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
        LOBYTE(v219[0]) = 0;
        v24 = v198 & 0xFFFFFFFFFFFFFFF8;
        if ((v198 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v25 = (const char *)(v24 + 16);
          if (*(char *)(v24 + 39) < 0)
            v25 = *(const char **)v25;
        }
        else
        {
          v25 = "";
        }
        v32 = sub_20BF444D8(v11);
        v33 = (const char *)(v32 + 32);
        if (*(char *)(v32 + 55) < 0)
          v33 = *(const char **)v33;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"\"%s\" is already a registered field (in plugin \"%s\")", v25, v33);
        goto LABEL_351;
      }
      v214 = 0;
      v30 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C1AD528();
      if ((*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8) != 0)
        v31 = (uint64_t *)((*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v31 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v30);
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&__dst);
      v34 = sub_20BDEEBA4((uint64_t)&v196, (const void **)v31);
      if (v197 == (_QWORD **)v34)
      {
        size = __dst.__r_.__value_.__l.__size_;
        v194 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        if (!__dst.__r_.__value_.__l.__size_)
          goto LABEL_56;
      }
      else
      {
        size = *(_QWORD *)(v34 + 64);
        *(_QWORD *)&v194 = *(_QWORD *)(v34 + 56);
        *((_QWORD *)&v194 + 1) = size;
        if (!size)
          goto LABEL_51;
      }
      v36 = (unint64_t *)(size + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
LABEL_51:
      v38 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v39 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
LABEL_56:
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v193);
      if ((*((_BYTE *)&v195.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v195.__r_.__value_.__l.__size_ != 10)
        {
          if (v195.__r_.__value_.__l.__size_ != 9)
          {
            if (v195.__r_.__value_.__l.__size_ != 11)
            {
              if (v195.__r_.__value_.__l.__size_ != 12)
                goto LABEL_134;
              if (*(_QWORD *)v195.__r_.__value_.__l.__data_ != 0x696C3436746E6975
                || *(_DWORD *)(v195.__r_.__value_.__r.__words[0] + 8) != 1886352499)
              {
                if (*(_QWORD *)v195.__r_.__value_.__l.__data_ != 0x696C676E69727473
                  || *(_DWORD *)(v195.__r_.__value_.__r.__words[0] + 8) != 1886352499)
                {
LABEL_134:
                  v216 = 0;
                  goto LABEL_135;
                }
LABEL_104:
                pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)&__dst);
                v216 = &off_24C5266D8;
                sub_20C02FE24(&v215, (uint64_t)&__dst);
                v205.i64[0] = (uint64_t)&__p;
                sub_20BDE5038((void ***)&v205);
                v205.i64[0] = (uint64_t)v226;
                sub_20BDE5038((void ***)&v205);
                v205.i64[0] = (uint64_t)&v223;
                sub_20BDE5038((void ***)&v205);
                v205.i64[0] = (uint64_t)&v221;
                sub_20BDE5038((void ***)&v205);
                v205.i64[0] = (uint64_t)v219;
                sub_20BDE5038((void ***)&v205);
                v205.i64[0] = (uint64_t)&__dst.__r_.__value_.__l.__size_;
                sub_20BDE5038((void ***)&v205);
                goto LABEL_183;
              }
LABEL_170:
              pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)&__dst);
              v216 = (std::type_info **)&off_24C526CC8;
              sub_20C0345C8(&v215, (uint64_t)&__dst);
              goto LABEL_171;
            }
            v50 = (std::string *)v195.__r_.__value_.__r.__words[0];
            if (*(_QWORD *)v195.__r_.__value_.__l.__data_ != 0x73696C3436746E69
              || *(_QWORD *)(v195.__r_.__value_.__r.__words[0] + 3) != 0x706F7473696C3436)
            {
LABEL_123:
              v53 = v50->__r_.__value_.__r.__words[0];
              v54 = *(std::string::size_type *)((char *)v50->__r_.__value_.__r.__words + 3);
              if (v53 != 0x73696C6E656B6F74 || v54 != 0x706F7473696C6E65)
                goto LABEL_134;
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&__dst);
              v216 = (std::type_info **)&off_24C526D80;
              sub_20C036F00(&v215, (uint64_t)&__dst);
              v205.i64[0] = (uint64_t)&__p;
              sub_20BEEB2B8((void ***)&v205);
              v205.i64[0] = (uint64_t)v226;
              sub_20BEEB2B8((void ***)&v205);
              v205.i64[0] = (uint64_t)&v223;
              sub_20BEEB2B8((void ***)&v205);
              v205.i64[0] = (uint64_t)&v221;
              sub_20BEEB2B8((void ***)&v205);
              v205.i64[0] = (uint64_t)v219;
              sub_20BEEB2B8((void ***)&v205);
              v205.i64[0] = (uint64_t)&__dst.__r_.__value_.__l.__size_;
              sub_20BEEB2B8((void ***)&v205);
              goto LABEL_183;
            }
LABEL_129:
            pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp((uint64_t)&__dst);
            v216 = (std::type_info **)&off_24C526B58;
            sub_20C032E60(&v215, (uint64_t)&__dst);
            goto LABEL_171;
          }
          if (*(_QWORD *)v195.__r_.__value_.__l.__data_ != 0x6F7473696C746E69
            || *(_BYTE *)(v195.__r_.__value_.__r.__words[0] + 8) != 112)
          {
            goto LABEL_134;
          }
LABEL_169:
          pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)&__dst);
          v216 = (std::type_info **)&off_24C526AA0;
          sub_20C032218(&v215, (uint64_t)&__dst);
          goto LABEL_171;
        }
        if (*(_QWORD *)v195.__r_.__value_.__l.__data_ != 0x616E6F6974636964
          || *(_WORD *)(v195.__r_.__value_.__r.__words[0] + 8) != 31090)
        {
          if (*(_QWORD *)v195.__r_.__value_.__l.__data_ != 0x7473696C746E6975
            || *(_WORD *)(v195.__r_.__value_.__r.__words[0] + 8) != 28783)
          {
            goto LABEL_134;
          }
LABEL_78:
          pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)&__dst);
          v216 = (std::type_info **)&off_24C526C10;
          sub_20C0339F8(&v215, (uint64_t)&__dst);
LABEL_171:
          if (__p)
          {
            v228 = __p;
            operator delete(__p);
          }
          if (v226[0])
          {
            v226[1] = v226[0];
            operator delete(v226[0]);
          }
          if (v223)
          {
            v224 = v223;
            operator delete(v223);
          }
          if (v221)
          {
            v222 = v221;
            operator delete(v221);
          }
          if (v219[0])
          {
            v219[1] = v219[0];
            operator delete(v219[0]);
          }
          if (__dst.__r_.__value_.__l.__size_)
          {
            __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__l.__size_;
            operator delete((void *)__dst.__r_.__value_.__l.__size_);
          }
LABEL_183:
          if (v216)
          {
            if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
            {
              sub_20BF4C6D0(&v211, &v215);
              goto LABEL_190;
            }
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetDefaultMetadataValue";
            __dst.__r_.__value_.__r.__words[2] = 1650;
            v218 = "VtValue pxrInternal__aapl__pxrReserved__::_GetDefaultMetadataValue(const SdfSchemaBase &, const std::"
                   "string &, const JsValue &)";
            LOBYTE(v219[0]) = 0;
            v77 = &v195;
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v77 = (std::string *)v195.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Default values are not allowed on fields of type \"%s\", which will alwaysdefault to an empty list op.", (const char *)v77);
LABEL_189:
            v212 = 0;
            goto LABEL_190;
          }
LABEL_135:
          Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType((uint64_t)a1);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type))
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetDefaultMetadataValue";
            __dst.__r_.__value_.__r.__words[2] = 1673;
            v218 = "VtValue pxrInternal__aapl__pxrReserved__::_GetDefaultMetadataValue(const SdfSchemaBase &, const std::"
                   "string &, const JsValue &)";
            LOBYTE(v219[0]) = 0;
            v57 = &v195;
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v57 = (std::string *)v195.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"\"%s\" is not a registered value type", (const char *)v57);
            goto LABEL_189;
          }
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
          {
            DefaultValue = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultValue((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
            sub_20BF4C6D0(&v211, DefaultValue);
LABEL_190:
            sub_20BF4C2D8((uint64_t)&v215);
            goto LABEL_191;
          }
          v202[0] = 0;
          v202[1] = 0;
          v203 = 0;
          v206 = 0u;
          v207 = 0u;
          v205 = 0u;
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
          {
            JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v194);
            v61 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
            v60 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
            while (v61 != v60)
            {
              if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v61))
                goto LABEL_146;
              v61 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v61 + 16);
            }
            v64 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v194);
            sub_20BDE4F04(&v209, (v64[1] - *v64) >> 4);
            v65 = *v64;
            v66 = v64[1];
            if (*v64 != v66)
            {
              v67 = v209;
              do
              {
                String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v65);
                if (*(char *)(String + 23) < 0)
                {
                  sub_20BDDBFAC(&__dst, *(void **)String, *(_QWORD *)(String + 8));
                }
                else
                {
                  v69 = *(_OWORD *)String;
                  __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v69;
                }
                if (*(char *)(v67 + 23) < 0)
                  operator delete(*(void **)v67);
                v70 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                *(_QWORD *)(v67 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                *(_OWORD *)v67 = v70;
                v67 += 24;
                v65 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v65 + 16);
              }
              while (v65 != v66);
            }
            v72 = (__int128 *)*((_QWORD *)&v209 + 1);
            for (i = (__int128 *)v209; i != v72; i = (__int128 *)((char *)i + 24))
            {
              if (*((char *)i + 23) < 0)
              {
                sub_20BDDBFAC(&__dst, *(void **)i, *((_QWORD *)i + 1));
              }
              else
              {
                v73 = *i;
                __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)i + 2);
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v73;
              }
              v220 = 3;
              sub_20C1B2A4C(&v205, (uint64_t)&__dst);
              sub_20BFCD42C((uint64_t)&__dst);
            }
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
            sub_20BDE5038((void ***)&__dst);
LABEL_366:
            pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Sdf_ParserValueContext((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)&__dst);
            if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)&__dst, &v195) & 1) != 0)
            {
              if (v233)
                pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginList((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)&__dst);
              while (*((_QWORD *)&v207 + 1))
                sub_20C1B28FC(&v205, (uint64_t)&__dst, 0);
              if (v233)
                pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndList((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)&__dst);
              pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)&__dst, v202, v167, &v211);
            }
            else
            {
              v168 = &v195;
              if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v168 = (std::string *)v195.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is not a valid type", v166, v167, v168);
              if (SHIBYTE(v203) < 0)
                operator delete(v202[0]);
              *(_OWORD *)v202 = v209;
              v203 = v210;
              v212 = 0;
            }
            if (v237 < 0)
              operator delete(v236);
            v169 = v235;
            if (v235 == v234)
            {
              v169 = v234;
              v170 = 4;
LABEL_385:
              (*(void (**)(void))(*v169 + 8 * v170))();
            }
            else if (v235)
            {
              v170 = 5;
              goto LABEL_385;
            }
            v171 = v232;
            if (v232 == v231)
            {
              v171 = v231;
              v172 = 4;
LABEL_390:
              (*(void (**)(void))(*v171 + 8 * v172))();
            }
            else if (v232)
            {
              v172 = 5;
              goto LABEL_390;
            }
            if (v230 < 0)
              operator delete(v229);
            if (SHIBYTE(v228) < 0)
              operator delete(v226[2]);
            if (v224)
            {
              v225 = v224;
              operator delete(v224);
            }
            *(_QWORD *)&v209 = &v222;
            sub_20C0215E0((void ***)&v209);
            if (__dst.__r_.__value_.__l.__size_)
            {
              __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__l.__size_;
              operator delete((void *)__dst.__r_.__value_.__l.__size_);
            }
LABEL_399:
            sub_20C1B2EE0(&v205);
            if (!v212)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetDefaultMetadataValue";
              __dst.__r_.__value_.__r.__words[2] = 1666;
              v218 = "VtValue pxrInternal__aapl__pxrReserved__::_GetDefaultMetadataValue(const SdfSchemaBase &, const std"
                     "::string &, const JsValue &)";
              LOBYTE(v219[0]) = 0;
              v173 = v202;
              if (v203 < 0)
                v173 = (void **)v202[0];
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not parse default value: %s", (const char *)v173);
            }
            if (SHIBYTE(v203) < 0)
              operator delete(v202[0]);
            goto LABEL_190;
          }
LABEL_146:
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
          {
            v62 = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v194);
            if (*(char *)(v62 + 23) < 0)
            {
              sub_20BDDBFAC(&__dst, *(void **)v62, *(_QWORD *)(v62 + 8));
            }
            else
            {
              v63 = *(_OWORD *)v62;
              __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v62 + 16);
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
            }
            v220 = 3;
            sub_20C1B2A4C(&v205, (uint64_t)&__dst);
            goto LABEL_365;
          }
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
          {
            v74 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v194);
            v76 = *(pxrInternal__aapl__pxrReserved__::JsValue **)v74;
            v75 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(v74 + 8);
            while (v76 != v75)
            {
              if (!pxrInternal__aapl__pxrReserved__::JsValue::IsInt(v76))
                goto LABEL_213;
              v76 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v76 + 16);
            }
            v174 = (uint64_t ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v194);
            sub_20BDE39A0(&v209, ((char *)v174[1] - (char *)*v174) >> 4);
            v176 = *v174;
            v175 = v174[1];
            if (*v174 != v175)
            {
              v177 = (_DWORD *)v209;
              do
              {
                *v177++ = pxrInternal__aapl__pxrReserved__::JsValue::GetInt(v176);
                v176 += 2;
              }
              while (v176 != v175);
            }
            v178 = (std::string::size_type *)*((_QWORD *)&v209 + 1);
            v179 = (std::string::size_type *)v209;
            if ((_QWORD)v209 != *((_QWORD *)&v209 + 1))
            {
              do
              {
                v180 = *(int *)v179;
                __dst.__r_.__value_.__r.__words[0] = 0;
                v220 = 0;
                v208 = v180;
                sub_20BFCD4C4((uint64_t)&__dst, &v208);
                sub_20C1B2A4C(&v205, (uint64_t)&__dst);
                sub_20BFCD42C((uint64_t)&__dst);
                v179 = (std::string::size_type *)((char *)v179 + 4);
              }
              while (v179 != v178);
LABEL_423:
              v179 = (std::string::size_type *)v209;
            }
            goto LABEL_424;
          }
LABEL_213:
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
          {
            Int = pxrInternal__aapl__pxrReserved__::JsValue::GetInt((uint64_t **)&v194);
            __dst.__r_.__value_.__r.__words[0] = 0;
            v220 = 0;
            *(_QWORD *)&v209 = Int;
            sub_20BFCD4C4((uint64_t)&__dst, &v209);
            sub_20C1B2A4C(&v205, (uint64_t)&__dst);
          }
          else
          {
            if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
            {
              v181 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v194);
              v183 = *(pxrInternal__aapl__pxrReserved__::JsValue **)v181;
              v182 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(v181 + 8);
              while (v183 != v182)
              {
                if (!pxrInternal__aapl__pxrReserved__::JsValue::IsReal(v183))
                  goto LABEL_416;
                v183 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v183 + 16);
              }
              v184 = (uint64_t ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v194);
              sub_20BDE48D4(&v209, ((char *)v184[1] - (char *)*v184) >> 4);
              v186 = *v184;
              v185 = v184[1];
              if (*v184 != v185)
              {
                v187 = (double *)v209;
                do
                {
                  *v187++ = pxrInternal__aapl__pxrReserved__::JsValue::GetReal(v186);
                  v186 += 2;
                }
                while (v186 != v185);
              }
              v188 = (std::string::size_type *)*((_QWORD *)&v209 + 1);
              v179 = (std::string::size_type *)v209;
              if ((_QWORD)v209 != *((_QWORD *)&v209 + 1))
              {
                do
                {
                  __dst.__r_.__value_.__r.__words[0] = *v179;
                  v220 = 2;
                  sub_20C1B2A4C(&v205, (uint64_t)&__dst);
                  sub_20BFCD42C((uint64_t)&__dst);
                  ++v179;
                }
                while (v179 != v188);
                goto LABEL_423;
              }
LABEL_424:
              if (v179)
              {
                *((_QWORD *)&v209 + 1) = v179;
                operator delete(v179);
              }
              goto LABEL_366;
            }
LABEL_416:
            if (!pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
            {
              MEMORY[0x212B929D0](v202, "Value was not a string, an int, a double, or a vector of those types");
              v212 = 0;
              goto LABEL_399;
            }
            __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)&v194);
            v220 = 2;
            sub_20C1B2A4C(&v205, (uint64_t)&__dst);
          }
LABEL_365:
          sub_20BFCD42C((uint64_t)&__dst);
          goto LABEL_366;
        }
      }
      else
      {
        if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 10)
        {
          if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 9)
          {
            if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 11)
            {
              if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 12)
                goto LABEL_134;
              if (v195.__r_.__value_.__r.__words[0] != 0x696C3436746E6975
                || LODWORD(v195.__r_.__value_.__r.__words[1]) != 1886352499)
              {
                if (v195.__r_.__value_.__r.__words[0] != 0x696C676E69727473
                  || LODWORD(v195.__r_.__value_.__r.__words[1]) != 1886352499)
                {
                  goto LABEL_134;
                }
                goto LABEL_104;
              }
              goto LABEL_170;
            }
            if (v195.__r_.__value_.__r.__words[0] != 0x73696C3436746E69
              || *(std::string::size_type *)((char *)v195.__r_.__value_.__r.__words + 3) != 0x706F7473696C3436)
            {
              v50 = &v195;
              goto LABEL_123;
            }
            goto LABEL_129;
          }
          if (v195.__r_.__value_.__r.__words[0] != 0x6F7473696C746E69 || v195.__r_.__value_.__s.__data_[8] != 112)
            goto LABEL_134;
          goto LABEL_169;
        }
        v41 = v195.__r_.__value_.__r.__words[0] == 0x616E6F6974636964
           && LOWORD(v195.__r_.__value_.__r.__words[1]) == 31090;
        if (!v41)
        {
          if (v195.__r_.__value_.__r.__words[0] != 0x7473696C746E6975
            || LOWORD(v195.__r_.__value_.__r.__words[1]) != 28783)
          {
            goto LABEL_134;
          }
          goto LABEL_78;
        }
      }
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v194))
      {
        __dst.__r_.__value_.__r.__words[0] = 0;
        v212 = &off_24C51D8C8;
        sub_20BF4D058(&v211, (const void ****)&__dst);
        sub_20BF49F14(&__dst, 0);
      }
      else
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetDefaultMetadataValue";
        __dst.__r_.__value_.__r.__words[2] = 1636;
        v218 = "VtValue pxrInternal__aapl__pxrReserved__::_GetDefaultMetadataValue(const SdfSchemaBase &, const std::stri"
               "ng &, const JsValue &)";
        LOBYTE(v219[0]) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Default values are not allowed on fields of type \"dictionary\", which will always default to an empty dictionary.");
        v212 = 0;
      }
LABEL_191:
      sub_20BF4B5D8(&v213, &v211);
      sub_20BF4C2D8((uint64_t)&v211);
      if (v214
        || (v82 = *(_QWORD *)(a4 + 24)) != 0
        && ((*(void (**)(std::string *__return_ptr, uint64_t, std::string *, __int128 *))(*(_QWORD *)v82 + 48))(&__dst, v82, &v195, &v194), sub_20BF4B5D8(&v213, &__dst), sub_20BF4C2D8((uint64_t)&__dst), v214))
      {
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v79 = sub_20BEC5244(&v193, 0);
        __dst.__r_.__value_.__s.__data_[0] = 0;
        v80 = (_QWORD *)sub_20BEB5B80(Instance + 19, &__dst);
        if (v80 != v79)
          pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v79, v80);
        v81 = 0;
      }
      else
      {
        v83 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v83)
          v83 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v84 = v193;
        v85 = atomic_load(v83 + 18);
        if (v84 >= v85
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v193, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v83))
        {
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
          __dst.__r_.__value_.__r.__words[2] = 1755;
          v218 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBa"
                 "se::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
          LOBYTE(v219[0]) = 0;
          v86 = v198 & 0xFFFFFFFFFFFFFFF8;
          if ((v198 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v87 = (const char *)(v86 + 16);
            if (*(char *)(v86 + 39) < 0)
              v87 = *(const char **)v87;
          }
          else
          {
            v87 = "";
          }
          v88 = sub_20BF444D8(v11);
          v89 = (const char *)(v88 + 32);
          if (*(char *)(v88 + 55) < 0)
            v89 = *(const char **)v89;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"No default value for metadata (at \"%s\" in plugin \"%s\")", v87, v89);
        }
        else
        {
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
          __dst.__r_.__value_.__r.__words[2] = 1761;
          v218 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBa"
                 "se::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
          LOBYTE(v219[0]) = 0;
          v90 = v198 & 0xFFFFFFFFFFFFFFF8;
          if ((v198 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v91 = (const char *)(v90 + 16);
            if (*(char *)(v90 + 39) < 0)
              v91 = *(const char **)v91;
          }
          else
          {
            v91 = "";
          }
          v93 = sub_20BF444D8(v11);
          v94 = (const char *)(v93 + 32);
          if (*(char *)(v93 + 55) < 0)
            v94 = *(const char **)v94;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Error parsing default value for metadata (at \"%s\" in plugin \"%s\")", v91, v94);
        }
        v81 = 1;
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v193);
      v95 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
      if (!*((_QWORD *)&v194 + 1))
        goto LABEL_224;
      v96 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
        if ((v81 & 1) == 0)
        {
LABEL_225:
          *(_QWORD *)&v194 = 0;
          memset(&__dst, 0, sizeof(__dst));
          v98 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C1AD528();
          if ((*((_QWORD *)v98 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
            v99 = (uint64_t *)((*((_QWORD *)v98 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v99 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v98);
          if (sub_20C1AD494(&v196, (const void **)v99, &__dst))
          {
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v205);
            if ((v194 & 7) != 0)
            {
              v100 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
              do
                v101 = __ldxr(v100);
              while (__stlxr(v101 - 2, v100));
            }
            *(_QWORD *)&v194 = v205.i64[0];
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v102 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)sub_20C1AD8F4(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v198, &v213, 1);
          v205.i64[1] = 0;
          *(_QWORD *)&v206 = 0;
          v205.i64[0] = (uint64_t)&v205.i64[1];
          v103 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C1AD528();
          if ((*((_QWORD *)v103 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
            v104 = (uint64_t *)((*((_QWORD *)v103 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v104 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v103);
          pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&__dst);
          v105 = sub_20BDEEBA4((uint64_t)&v196, (const void **)v104);
          if (v197 == (_QWORD **)v105)
          {
            v106 = (unint64_t *)__dst.__r_.__value_.__l.__size_;
            *(_OWORD *)v202 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            if (!__dst.__r_.__value_.__l.__size_)
              goto LABEL_251;
          }
          else
          {
            v106 = *(unint64_t **)(v105 + 64);
            v202[0] = *(void **)(v105 + 56);
            v202[1] = v106;
            if (!v106)
            {
LABEL_246:
              v109 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
              if (__dst.__r_.__value_.__l.__size_)
              {
                v110 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                  std::__shared_weak_count::__release_weak(v109);
                }
              }
LABEL_251:
              if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)v202))
              {
                v112 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v202);
                v114 = *(pxrInternal__aapl__pxrReserved__::JsValue **)v112;
                v113 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(v112 + 8);
                while (v114 != v113)
                {
                  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v114))
                    goto LABEL_256;
                  v114 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v114 + 16);
                }
                v116 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v202);
                sub_20BDE4F04(&v209, (v116[1] - *v116) >> 4);
                v118 = *v116;
                v117 = v116[1];
                if (v118 != v117)
                {
                  v119 = v209;
                  do
                  {
                    v120 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v118);
                    if (*(char *)(v120 + 23) < 0)
                    {
                      sub_20BDDBFAC(&__dst, *(void **)v120, *(_QWORD *)(v120 + 8));
                    }
                    else
                    {
                      v121 = *(_OWORD *)v120;
                      __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v120 + 16);
                      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v121;
                    }
                    if (*(char *)(v119 + 23) < 0)
                      operator delete(*(void **)v119);
                    v122 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v119 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                    *(_OWORD *)v119 = v122;
                    v119 += 24;
                    v118 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v118 + 16);
                  }
                  while (v118 != v117);
                }
                v123 = (const void **)*((_QWORD *)&v209 + 1);
                for (j = (const void **)v209; j != v123; j += 3)
                  sub_20BE7AA28((uint64_t **)&v205, &v205.i64[1], j, (uint64_t)j);
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
                sub_20BDE5038((void ***)&__dst);
              }
              else
              {
LABEL_256:
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)v202))
                {
                  v115 = (const void **)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)v202);
                  sub_20BE74FC0((uint64_t **)&v205, v115, (uint64_t)v115);
                }
              }
              v125 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C1AD528();
              if ((*((_QWORD *)v125 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
                v126 = (uint64_t *)((*((_QWORD *)v125 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v126 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v125);
              sub_20C1B5B28(&v196, (const void **)v126);
              v127 = (std::__shared_weak_count *)v202[1];
              if (v202[1])
              {
                v128 = (unint64_t *)((char *)v202[1] + 8);
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              if ((_QWORD)v206)
              {
                sub_20BDDC0E4(&__dst, "layers");
                v130 = sub_20BDDDEF8((uint64_t)&v205, (const void **)&__dst.__r_.__value_.__l.__data_);
                v131 = v130;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  if (!v131)
                    goto LABEL_284;
                }
                else if (!v130)
                {
LABEL_284:
                  if ((_QWORD)v206)
                  {
                    sub_20BDDC0E4(&__dst, "prims");
                    v133 = sub_20BDDDEF8((uint64_t)&v205, (const void **)&__dst.__r_.__value_.__l.__data_);
                    v134 = v133;
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      if (!v134)
                        goto LABEL_290;
                    }
                    else if (!v133)
                    {
LABEL_290:
                      if ((_QWORD)v206)
                      {
                        sub_20BDDC0E4(&__dst, "properties");
                        if (sub_20BDDDEF8((uint64_t)&v205, (const void **)&__dst.__r_.__value_.__l.__data_))
                        {
                          v136 = 1;
                        }
                        else
                        {
                          sub_20BDDC0E4(&v209, "attributes");
                          v136 = sub_20BDDDEF8((uint64_t)&v205, (const void **)&v209) != 0;
                          if (SHIBYTE(v210) < 0)
                            operator delete((void *)v209);
                        }
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__dst.__r_.__value_.__l.__data_);
                          if (!v136)
                            goto LABEL_300;
                        }
                        else if (!v136)
                        {
LABEL_300:
                          if ((_QWORD)v206)
                          {
                            sub_20BDDC0E4(&__dst, "properties");
                            if (sub_20BDDDEF8((uint64_t)&v205, (const void **)&__dst.__r_.__value_.__l.__data_))
                            {
                              v138 = 1;
                            }
                            else
                            {
                              sub_20BDDC0E4(&v209, "relationships");
                              v138 = sub_20BDDDEF8((uint64_t)&v205, (const void **)&v209) != 0;
                              if (SHIBYTE(v210) < 0)
                                operator delete((void *)v209);
                            }
                            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(__dst.__r_.__value_.__l.__data_);
                              if (!v138)
                                goto LABEL_310;
                            }
                            else if (!v138)
                            {
LABEL_310:
                              if (!(_QWORD)v206)
                                goto LABEL_319;
                              sub_20BDDC0E4(&__dst, "variants");
                              if (sub_20BDDDEF8((uint64_t)&v205, (const void **)&__dst.__r_.__value_.__l.__data_))
                              {
                                v140 = 1;
                              }
                              else
                              {
                                sub_20BDDC0E4(&v209, "prims");
                                v140 = sub_20BDDDEF8((uint64_t)&v205, (const void **)&v209) != 0;
                                if (SHIBYTE(v210) < 0)
                                  operator delete((void *)v209);
                              }
                              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(__dst.__r_.__value_.__l.__data_);
                                if (v140)
                                  goto LABEL_319;
                              }
                              else
                              {
                                if (!v140)
                                  goto LABEL_320;
LABEL_319:
                                __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 0xAu);
                                __dst.__r_.__value_.__l.__size_ = v141;
                                pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v198, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, 0);
                              }
LABEL_320:
                              v142 = v196;
                              if (v196 != (uint64_t *)v197)
                              {
                                do
                                {
                                  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__dst);
                                  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::AddInfo(v102, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__dst, (const pxrInternal__aapl__pxrReserved__::JsValue *)(v142 + 7));
                                  if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
                                  {
                                    v143 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v144 = __ldxr(v143);
                                    while (__stlxr(v144 - 2, v143));
                                  }
                                  v145 = (uint64_t *)v142[1];
                                  if (v145)
                                  {
                                    do
                                    {
                                      v146 = v145;
                                      v145 = (uint64_t *)*v145;
                                    }
                                    while (v145);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v146 = (uint64_t *)v142[2];
                                      v41 = *v146 == (_QWORD)v142;
                                      v142 = v146;
                                    }
                                    while (!v41);
                                  }
                                  v142 = v146;
                                }
                                while (v146 != (uint64_t *)v197);
                              }
                              v148 = a5[1];
                              v147 = (unint64_t)a5[2];
                              if ((unint64_t)v148 >= v147)
                              {
                                v150 = v148 - *a5;
                                if ((unint64_t)(v150 + 1) >> 61)
                                  sub_20BDDF694();
                                v151 = v147 - (_QWORD)*a5;
                                v152 = v151 >> 2;
                                if (v151 >> 2 <= (unint64_t)(v150 + 1))
                                  v152 = v150 + 1;
                                if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
                                  v153 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v153 = v152;
                                if (v153)
                                  v154 = (char *)sub_20BDDF6A8((uint64_t)(a5 + 2), v153);
                                else
                                  v154 = 0;
                                v155 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition **)&v154[8 * v150];
                                *v155 = v102;
                                v149 = v155 + 1;
                                v157 = (char *)*a5;
                                v156 = (char *)a5[1];
                                if (v156 == (char *)*a5)
                                {
                                  v159 = a5;
                                }
                                else
                                {
                                  do
                                  {
                                    v158 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)*((_QWORD *)v156 - 1);
                                    v156 -= 8;
                                    *--v155 = v158;
                                  }
                                  while (v156 != v157);
                                  v159 = a5;
                                  v156 = (char *)*a5;
                                }
                                *v159 = v155;
                                v159[1] = v149;
                                v159[2] = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition **)&v154[8 * v153];
                                if (v156)
                                  operator delete(v156);
                              }
                              else
                              {
                                *v148 = v102;
                                v149 = v148 + 1;
                              }
                              a5[1] = v149;
                              sub_20BDECAB8((uint64_t)&v205, (char *)v205.i64[1]);
                              if ((v194 & 7) != 0)
                              {
                                v160 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v161 = __ldxr(v160);
                                while (__stlxr(v161 - 2, v160));
                              }
                              goto LABEL_350;
                            }
                          }
                          __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 8u);
                          __dst.__r_.__value_.__l.__size_ = v139;
                          pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v198, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, 0);
                          goto LABEL_310;
                        }
                      }
                      __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 1u);
                      __dst.__r_.__value_.__l.__size_ = v137;
                      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v198, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, 0);
                      goto LABEL_300;
                    }
                  }
                  __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 6u);
                  __dst.__r_.__value_.__l.__size_ = v135;
                  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v198, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, 0);
                  goto LABEL_290;
                }
              }
              __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 7u);
              __dst.__r_.__value_.__l.__size_ = v132;
              pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v198, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, 0);
              goto LABEL_284;
            }
          }
          v107 = v106 + 1;
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
          goto LABEL_246;
        }
      }
      else
      {
LABEL_224:
        if ((v81 & 1) == 0)
          goto LABEL_225;
      }
LABEL_350:
      sub_20BF4C2D8((uint64_t)&v213);
LABEL_351:
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
LABEL_353:
      sub_20BE78E5C((uint64_t)&v196, v197[0]);
      if ((v198 & 7) != 0)
      {
        v162 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFF8);
        do
          v163 = __ldxr(v162);
        while (__stlxr(v163 - 2, v162));
      }
      v164 = (uint64_t *)v14[1];
      if (v164)
      {
        do
        {
          v165 = v164;
          v164 = (uint64_t *)*v164;
        }
        while (v164);
      }
      else
      {
        do
        {
          v165 = (uint64_t *)v14[2];
          v41 = *v165 == (_QWORD)v14;
          v14 = v165;
        }
        while (!v41);
      }
      v14 = v165;
      if (v165 == (uint64_t *)v201)
        goto LABEL_427;
    }
  }
}

void sub_20C1AB35C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254987E10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_OnDidRegisterPlugins(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, uint64_t **a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4[2];
  uint64_t v5;
  void *__p[3];
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4[0] = 0;
  v4[1] = 0;
  v5 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_UpdateMetadataFromPlugins(this, a2 + 1, (uint64_t)v4, (uint64_t)v7, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition ***)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20C1AB7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;

  v23 = a22;
  if (a22 == &a19)
  {
    v24 = 4;
    v23 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, int a4)
{
  _QWORD *v7;
  char v8;
  char v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  const char *v19;
  unsigned int *v20;
  unsigned int v21;
  void **v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28[2];
  uint64_t v29;
  const char *v30;
  char v31;
  uint64_t v32;
  _BYTE v33[8];
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[64];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::FieldDefinition((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)v33, this, a2, a3);
  if (a4)
    v36[24] = 1;
  sub_20C1B24A0((uint64_t)v24, (uint64_t *)a2, (uint64_t)v33);
  sub_20C1B287C((uint64_t)v28, (uint64_t)v24);
  v7 = sub_20C1B52B0((uint64_t)this + 16, v28, (uint64_t *)v28);
  v9 = v8;
  v23 = (void **)&v32;
  sub_20C1B27D4(&v23);
  sub_20BF4C2D8((uint64_t)&v30);
  if ((v29 & 7) != 0)
  {
    v10 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if (((uint64_t)v28[0] & 7) != 0)
  {
    v12 = (unsigned int *)((unint64_t)v28[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v23 = (void **)&v27;
  sub_20C1B27D4(&v23);
  sub_20BF4C2D8((uint64_t)&v26);
  if ((v25 & 7) != 0)
  {
    v14 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if ((v24[0] & 7) != 0)
  {
    v16 = (unsigned int *)(v24[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if (!v9)
  {
    v28[0] = (void **)"sdf/schema.cpp";
    v28[1] = (void **)"_CreateField";
    v29 = 1036;
    v30 = "SdfSchemaBase::FieldDefinition &pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(const TfToken &,"
          " const VtValue &, BOOL)";
    v31 = 0;
    v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0)
        v19 = *(const char **)v19;
    }
    else
    {
      v19 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate creation for field '%s'", v19);
  }
  v28[0] = (void **)v36;
  sub_20C1B27D4(v28);
  sub_20BF4C2D8((uint64_t)&v35);
  if ((v34 & 7) != 0)
  {
    v20 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  return v7 + 3;
}

void sub_20C1ABA20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1ABAD8(v1 - 152);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1ABA58(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v8 = (void **)(a1 + 40);
  sub_20C1B27D4(&v8);
  sub_20BF4C2D8(a1 + 24);
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return a1;
}

uint64_t sub_20C1ABAD8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void **v6;

  v6 = (void **)(a1 + 32);
  sub_20C1B27D4(&v6);
  sub_20BF4C2D8(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition(uint64_t result, unsigned int a2)
{
  char *v2;
  void **v3;
  void *__p[2];
  char v5;
  _QWORD v6[4];
  char v7;
  int v8;

  if (!*(_BYTE *)(result + 72 * a2 + 120))
  {
    v6[0] = "sdf/schema.cpp";
    v6[1] = "_ExtendSpecDefinition";
    v6[2] = 1076;
    v6[3] = "SdfSchemaBase::_SpecDefiner pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition(SdfSpecType)";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, a2, (uint64_t)__p);
    if (v5 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"No definition for spec type %s", v2, v3);
  }
  return result;
}

void sub_20C1ABC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v2;

  v2 = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  if (v2)
    return v2 + 3;
  else
    return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  int v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v7;

  v2 = atomic_load((unsigned __int8 *)&qword_254987DE0);
  if ((v2 & 1) == 0)
  {
    v6 = a2;
    v7 = this;
    v5 = __cxa_guard_acquire(&qword_254987DE0);
    a2 = v6;
    this = v7;
    if (v5)
    {
      qword_254987DD8 = 0;
      __cxa_atexit((void (*)(void *))sub_20C1A87F4, &unk_254987DD0, &dword_20BDBC000);
      __cxa_guard_release(&qword_254987DE0);
      a2 = v6;
      this = v7;
    }
  }
  v3 = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  if (v3)
    return v3 + 5;
  else
    return &unk_254987DD0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsRegistered(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  v5 = v4;
  if (a3 && v4)
    sub_20BF4A9BC(a3, v4 + 5);
  return v5 != 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::HoldsChildren(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  if (result)
    return (_QWORD *)(*((_BYTE *)result + 82) != 0);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::CastToTypeOf@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v6 = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  if (v6)
  {
    sub_20BF4A9BC(&v8, v6 + 5);
    if (v9)
      pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf(a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v8, a4);
    else
      sub_20BF4C6D0(a4, a3);
  }
  else
  {
    a4[1] = 0;
  }
  return sub_20BF4C2D8((uint64_t)&v8);
}

void sub_20C1ABDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  void **v4;
  void *__p[2];
  char v6;
  _QWORD v7[4];
  char v8;

  v2 = a1 + 72 * a2;
  if (*(_BYTE *)(v2 + 120))
    return v2 + 56;
  v7[0] = "sdf/schema.cpp";
  v7[1] = "_CheckAndGetSpecDefinition";
  v7[2] = 1140;
  v7[3] = "const SdfSchemaBase::SpecDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefiniti"
          "on(SdfSpecType) const";
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, a2, (uint64_t)__p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"No definition for spec type %s", (const char *)v4);
  if (v6 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20C1ABEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a3);
  if (result)
    return (_QWORD *)(sub_20BF2B2B4(result, a2) != 0);
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFields@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *result;

  result = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a2);
  if (result)
    return (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetFields(result, a3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;

  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a2);
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFields(result, v5, v6, (uint64_t)a3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFieldDisplayGroup@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, unsigned int **a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *result;

  result = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a2);
  if (result)
    return (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFieldDisplayGroup(result, a3, a4);
  *a4 = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetRequiredFields(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  _QWORD *v5;

  v2 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a2);
  if (v2)
    return v2 + 40;
  v4 = atomic_load((unsigned __int8 *)&qword_254987DF0);
  if ((v4 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254987DF0))
    {
      v5 = operator new(0x18uLL);
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
      qword_254987DE8 = (uint64_t)v5;
      __cxa_guard_release(&qword_254987DF0);
    }
  }
  return qword_254987DE8;
}

void sub_20C1AC03C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254987DF0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue(unint64_t ***this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type size;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  unint64_t v21;
  void *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  const std::type_info *v29;
  char *v30;
  const char *v31;
  char *v32;
  void **v33;
  _BOOL4 IsEmpty;
  const std::type_info *v35;
  char *v36;
  unsigned int *v37;
  unsigned int v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  int v42;
  void *__p[2];
  char v44;
  void *v45[2];
  uint64_t v46;
  std::string v47;
  char v48;
  std::string v49;
  uint64_t v50;

  if (!*((_QWORD *)a2 + 1))
    goto LABEL_32;
  if (sub_20BF4A73C(a2))
  {
    v6 = *((_QWORD *)a2 + 1);
    if ((v6 & 4) != 0)
      v7 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v7 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)a2;
    v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v7);
    size = v9;
    v49.__r_.__value_.__r.__words[0] = v8;
    v49.__r_.__value_.__l.__size_ = v9;
    v49.__r_.__value_.__r.__words[2] = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v7);
    v50 = v11;
    while (size != v11 || v11 && v49.__r_.__value_.__r.__words[0] != v49.__r_.__value_.__r.__words[2])
    {
      v13 = sub_20BF4B4BC(&v49, v11, v12);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue((uint64_t *)&v47, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)this, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*v13 + 56));
      if (v48)
      {
        v24 = sub_20BF4B4BC(&v49, v14, v15);
        v27 = (_QWORD *)(*v24 + 32);
        if (*(char *)(*v24 + 55) < 0)
          v27 = (_QWORD *)*v27;
        v28 = sub_20BF4B4BC(&v49, v25, v26);
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)(*v28 + 56), v29, v30, (uint64_t)__p);
        if (v44 >= 0)
          v33 = __p;
        else
          v33 = (void **)__p[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Value for key '%s' does not have a valid scene description type (%s)", v31, v32, v27, v33);
        if (v44 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v46) < 0)
        {
          sub_20BDDBFAC((_BYTE *)a3, v45[0], (unint64_t)v45[1]);
          v42 = SHIBYTE(v46);
          *(_BYTE *)(a3 + 24) = 1;
          if (v42 < 0)
            operator delete(v45[0]);
        }
        else
        {
          *(_OWORD *)a3 = *(_OWORD *)v45;
          *(_QWORD *)(a3 + 16) = v46;
          *(_BYTE *)(a3 + 24) = 1;
        }
        if (v48)
          goto LABEL_41;
        return;
      }
      sub_20BF4B6E0(&v49, v14, v15);
      size = v49.__r_.__value_.__l.__size_;
      v11 = v50;
    }
    goto LABEL_32;
  }
  if (sub_20BFEFCF0(a2))
  {
    v16 = *((_QWORD *)a2 + 1);
    if ((v16 & 4) != 0)
      v17 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v17 = *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)a2;
    if (!pxrInternal__aapl__pxrReserved__::SdfPathExpression::IsAbsolute(v17))
    {
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)&v47, v17);
      v18 = std::string::insert(&v47, 0, "pathExpression paths must be absolute paths (\"");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v49, "\")");
      v22 = (void *)v20->__r_.__value_.__r.__words[0];
      v21 = v20->__r_.__value_.__l.__size_;
      LODWORD(v45[0]) = v20->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v45 + 3) = *(_DWORD *)((char *)&v20->__r_.__value_.__r.__words[2] + 3);
      v23 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v23 < 0)
        goto LABEL_38;
      goto LABEL_31;
    }
LABEL_32:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  v47.__r_.__value_.__r.__words[0] = 0;
  v49.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(this[115], a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47);
  IsEmpty = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v49);
  if ((v47.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v37 = (unsigned int *)(v47.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  if (!IsEmpty)
    goto LABEL_32;
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v35, v36, (uint64_t)&v47);
  v39 = std::string::insert(&v47, 0, "Value does not have a valid scene description type (");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v49, ")");
  v22 = (void *)v41->__r_.__value_.__r.__words[0];
  v21 = v41->__r_.__value_.__l.__size_;
  LODWORD(v45[0]) = v41->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v45 + 3) = *(_DWORD *)((char *)&v41->__r_.__value_.__r.__words[2] + 3);
  v23 = SHIBYTE(v41->__r_.__value_.__r.__words[2]);
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (v23 < 0)
  {
LABEL_38:
    sub_20BDDBFAC((_BYTE *)a3, v22, v21);
    *(_BYTE *)(a3 + 24) = 1;
    operator delete(v22);
    goto LABEL_39;
  }
LABEL_31:
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 16) = v45[0];
  *(_DWORD *)(a3 + 19) = *(_DWORD *)((char *)v45 + 3);
  *(_BYTE *)(a3 + 23) = v23;
  *(_BYTE *)(a3 + 24) = 1;
LABEL_39:
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
LABEL_41:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_20C1AC3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  void *v29;
  uint64_t v30;

  operator delete(v29);
  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(unint64_t ***this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(this[115], a2, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetAllTypes@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **this@<X0>, _QWORD *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::GetAllTypes(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(unint64_t ***this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const char *a2)
{
  unint64_t **v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v2 = (unint64_t **)*((_QWORD *)this + 115);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v6, a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
  if ((v6 & 7) != 0)
  {
    v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(uint64_t a1)
{
  unint64_t **v1;
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v1 = *(unint64_t ***)(a1 + 920);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v5);
  result = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  if ((v5 & 7) != 0)
  {
    v3 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(unint64_t ***this, const pxrInternal__aapl__pxrReserved__::TfType *a2, unsigned int **a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(this[115], a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindOrCreateType(tbb::spin_rw_mutex_v3 ***this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindOrCreateTypeName(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_GetTypeRegistrar(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  return *((_QWORD *)this + 115);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v3;
  unint64_t size;
  void *v5;
  int v6;
  std::string __p;
  _DWORD v8[2];

  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier(a1) & 1) != 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    std::operator+<char>();
    v3 = std::string::append(&__p, "\" is not a valid identifier");
    v5 = (void *)v3->__r_.__value_.__r.__words[0];
    size = v3->__r_.__value_.__l.__size_;
    v8[0] = v3->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)&v3->__r_.__value_.__r.__words[2] + 3);
    v6 = SHIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v6 < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, v5, size);
      *(_BYTE *)(a2 + 24) = 1;
      operator delete(v5);
    }
    else
    {
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = v8[0];
      *(_DWORD *)(a2 + 19) = *(_DWORD *)((char *)v8 + 3);
      *(_BYTE *)(a2 + 23) = v6;
      *(_BYTE *)(a2 + 24) = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20C1AC678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidNamespacedIdentifier(size_t *a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v3;
  unint64_t size;
  void *v5;
  int v6;
  std::string __p;
  _DWORD v8[2];

  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier(a1) & 1) != 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    std::operator+<char>();
    v3 = std::string::append(&__p, "\" is not a valid identifier");
    v5 = (void *)v3->__r_.__value_.__r.__words[0];
    size = v3->__r_.__value_.__l.__size_;
    v8[0] = v3->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)&v3->__r_.__value_.__r.__words[2] + 3);
    v6 = SHIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v6 < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, v5, size);
      *(_BYTE *)(a2 + 24) = 1;
      operator delete(v5);
    }
    else
    {
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = v8[0];
      *(_DWORD *)(a2 + 19) = *(_DWORD *)((char *)v8 + 3);
      *(_BYTE *)(a2 + 23) = v6;
      *(_BYTE *)(a2 + 24) = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20C1AC778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  const char *v5;
  char *v6;
  uint64_t *v7;
  int v8;
  void *__p[2];
  uint64_t v10;
  _QWORD v11[4];
  void *v12[2];
  void *v13[2];
  __int128 v14;

  sub_20C019C58(v11, 1uLL);
  *(_OWORD *)v13 = 0u;
  v14 = 0u;
  *(_OWORD *)v12 = 0u;
  sub_20C019D64((unsigned __int8 *)__p, a1, "");
  v4 = sub_20C1B570C(__p);
  sub_20C019D24((uint64_t)__p);
  if ((v4 & 1) != 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    if (*((char *)a1 + 23) >= 0)
      v7 = (uint64_t *)a1;
    else
      v7 = *(uint64_t **)a1;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is not a valid variant name", v5, v6, v7);
    if (SHIBYTE(v10) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
      v8 = SHIBYTE(v10);
      *(_BYTE *)(a2 + 24) = 1;
      if (v8 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 16) = v10;
      *(_BYTE *)(a2 + 24) = 1;
    }
  }
  if (SHIBYTE(v14) < 0)
    operator delete(v13[1]);
  if (SHIBYTE(v13[0]) < 0)
    operator delete(v12[0]);
  __p[0] = v11;
  sub_20BFD6F90((void ***)__p);
}

void sub_20C1AC8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  void *v25;
  const char *v26;
  char *v27;

  if (SHIBYTE(a12) < 0)
    operator delete((void *)__p);
  if (a2 == 1)
  {
    v25 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(_QWORD *)v25 + 16))(v25);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is not a valid variant name due to '%s'", v26, v27);
    if (SHIBYTE(a12) < 0)
    {
      sub_20BDDBFAC((_BYTE *)v22, (void *)__p, *((unint64_t *)&__p + 1));
      *(_BYTE *)(v22 + 24) = 1;
      operator delete((void *)__p);
    }
    else
    {
      *(_OWORD *)v22 = __p;
      *(_QWORD *)(v22 + 16) = a12;
      *(_BYTE *)(v22 + 24) = 1;
    }
    __cxa_end_catch();
    JUMPOUT(0x20C1AC880);
  }
  sub_20C019C04((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantSelection(__int128 *a1@<X0>, _BYTE *a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsExpression())
  {
    *a2 = 0;
    a2[24] = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(a1, (uint64_t)a2);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v5;
  unint64_t size;
  void *v7;
  int v8;
  _BYTE v9[7];
  std::string v10;

  if (sub_20C1ACB50(this))
  {
    sub_20BDDC0E4(&v10, "Relocate paths cannot contain variant selections");
    *(std::string *)a2 = v10;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetString(this);
    std::operator+<char>();
    v5 = std::string::append(&v10, "> must be a prim path");
    v7 = (void *)v5->__r_.__value_.__r.__words[0];
    size = v5->__r_.__value_.__l.__size_;
    *(_DWORD *)v9 = v5->__r_.__value_.__r.__words[2];
    *(_DWORD *)&v9[3] = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
    v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v8 < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, v7, size);
      *(_BYTE *)(a2 + 24) = 1;
      operator delete(v7);
    }
    else
    {
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)v9;
      *(_DWORD *)(a2 + 19) = *(_DWORD *)&v9[3];
      *(_BYTE *)(a2 + 23) = v8;
      *(_BYTE *)(a2 + 24) = 1;
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_20C1ACB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1ACB50(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  unsigned __int8 v1;
  int v3;
  _DWORD *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254987E38);
  if ((v1 & 1) == 0)
  {
    v5 = a1;
    v3 = __cxa_guard_acquire(&qword_254987E38);
    a1 = v5;
    if (v3)
    {
      v4 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS);
      if (!v4)
      {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS);
        v4 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS);
      }
      byte_254987E30 = *v4 != 0;
      __cxa_guard_release(&qword_254987E38);
      a1 = v5;
    }
  }
  if (byte_254987E30)
    return pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a1);
  else
    return 0;
}

void sub_20C1ACC0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254987E38);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidInheritPath@<D0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  char *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (sub_20C1ACB50(this))
  {
    v5 = "Inherit paths cannot contain variant selections";
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
      && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    v5 = "Inherit paths must be absolute prim paths";
  }
  sub_20BDDC0E4(&v7, v5);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

double pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSpecializesPath@<D0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  char *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (sub_20C1ACB50(this))
  {
    v5 = "Specializes paths cannot contain variant selections";
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
      && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    v5 = "Specializes paths must be absolute prim paths";
  }
  sub_20BDDC0E4(&v7, v5);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidAttributeConnectionPath(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  const char *Text;
  const char *v6;
  char *v7;
  int v8;
  void *__p[2];
  uint64_t v10;

  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(this))
  {
    sub_20BDDC0E4(__p, "Attribute connection paths cannot contain variant selections");
LABEL_8:
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
    && ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this) & 1) != 0
     || pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this)))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Connection paths must be absolute prim or property paths: <%s>", v6, v7, Text);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
    goto LABEL_8;
  sub_20BDDBFAC((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
  v8 = SHIBYTE(v10);
  *(_BYTE *)(a2 + 24) = 1;
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20C1ACE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelationshipTargetPath@<D0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  char *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(this))
  {
    v5 = "Relationship target paths cannot contain variant selections";
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
      && ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this) & 1) != 0
       || pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this)
       || pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(this)))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    v5 = "Relationship target paths must be absolute prim, property or mapper paths";
  }
  sub_20BDDC0E4(&v7, v5);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidReference(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  std::string *v5;
  unint64_t size;
  void *v7;
  int v8;
  _BYTE v9[7];
  std::string v10;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)this + 24);
  if (sub_20C1ACB50((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)this + 24)))
  {
    sub_20BDDC0E4(&v10, "Reference paths cannot contain variant selections");
    *(std::string *)a2 = v10;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v4)
         || pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v4)
         && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v4))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v4);
    std::operator+<char>();
    v5 = std::string::append(&v10, "> must be either empty or an absolute prim path");
    v7 = (void *)v5->__r_.__value_.__r.__words[0];
    size = v5->__r_.__value_.__l.__size_;
    *(_DWORD *)v9 = v5->__r_.__value_.__r.__words[2];
    *(_DWORD *)&v9[3] = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
    v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v8 < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, v7, size);
      *(_BYTE *)(a2 + 24) = 1;
      operator delete(v7);
    }
    else
    {
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)v9;
      *(_DWORD *)(a2 + 19) = *(_DWORD *)&v9[3];
      *(_BYTE *)(a2 + 23) = v8;
      *(_BYTE *)(a2 + 24) = 1;
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_20C1ACFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidPayload(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  std::string *v4;
  unint64_t size;
  void *v6;
  int v7;
  _BYTE v8[7];
  std::string v9;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24);
  if (sub_20C1ACB50((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24)))
  {
    sub_20BDDC0E4(&v9, "Payload paths cannot contain variant selections");
    *(std::string *)a2 = v9;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v3)
         || pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v3)
         && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v3))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v3);
    std::operator+<char>();
    v4 = std::string::append(&v9, "> must be either empty or an absolute prim path");
    v6 = (void *)v4->__r_.__value_.__r.__words[0];
    size = v4->__r_.__value_.__l.__size_;
    *(_DWORD *)v8 = v4->__r_.__value_.__r.__words[2];
    *(_DWORD *)&v8[3] = *(_DWORD *)((char *)&v4->__r_.__value_.__r.__words[2] + 3);
    v7 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (v7 < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, v6, size);
      *(_BYTE *)(a2 + 24) = 1;
      operator delete(v6);
    }
    else
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)v8;
      *(_DWORD *)(a2 + 19) = *(_DWORD *)&v8[3];
      *(_BYTE *)(a2 + 23) = v7;
      *(_BYTE *)(a2 + 24) = 1;
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_20C1AD158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSubLayer(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t *Instance;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  char *v17;
  std::string *v18;
  int v19;
  std::string v20;
  void *__p[2];
  uint64_t v22;
  std::string *v23;
  void *__dst;
  unint64_t v25;
  void *v26[2];
  uint64_t v27;
  void *v28;
  char v29;
  unint64_t v30;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v26, a1);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v6 = v30;
    v7 = atomic_load(Instance + 18);
    if (v6 >= v7
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
    }
    else
    {
      v23 = 0;
      __dst = 0;
      v25 = 0;
      v8 = sub_20BEC5244(&v30, 0);
      v9 = sub_20BEDAF68();
      if (v8 != (_QWORD *)v9)
      {
        v10 = (unint64_t)__dst;
        do
        {
          v11 = (__int128 *)(v8 + 7);
          if (v10 >= v25)
          {
            v10 = sub_20BE4EE50((uint64_t *)&v23, v11);
          }
          else
          {
            if (*((char *)v8 + 79) < 0)
            {
              sub_20BDDBFAC((_BYTE *)v10, (void *)v8[7], v8[8]);
            }
            else
            {
              v12 = *v11;
              *(_QWORD *)(v10 + 16) = v8[9];
              *(_OWORD *)v10 = v12;
            }
            v10 += 24;
          }
          __dst = (void *)v10;
          v8 = (_QWORD *)v8[1];
        }
        while (v8 != (_QWORD *)v9);
      }
      v13 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v13)
        v13 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v14 = sub_20BEC5244(&v30, 0);
      v20.__r_.__value_.__s.__data_[0] = 0;
      v15 = (_QWORD *)sub_20BEB5B80(v13 + 19, &v20);
      if (v15 != v14)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v13, v14, v15);
      pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", &v23, &v20);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v20;
      else
        v18 = (std::string *)v20.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer path: %s", v16, v17, v18);
      if (SHIBYTE(v22) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
        v19 = SHIBYTE(v22);
        *(_BYTE *)(a2 + 24) = 1;
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 16) = v22;
        *(_BYTE *)(a2 + 24) = 1;
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      __p[0] = &v23;
      sub_20BDE5038((void ***)__p);
    }
    if (v29 < 0)
      operator delete(v28);
    if (SHIBYTE(v27) < 0)
      operator delete(v26[0]);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
  }
  else
  {
    sub_20BDDC0E4(v26, "Sublayer paths must not be empty");
    *(_OWORD *)a2 = *(_OWORD *)v26;
    *(_QWORD *)(a2 + 16) = v27;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void sub_20C1AD40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  __p = &a23;
  sub_20BDE5038((void ***)&__p);
  sub_20BE930F8((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v26 - 56));
  _Unwind_Resume(a1);
}

BOOL sub_20C1AD494(uint64_t **a1, const void **a2, std::string *a3)
{
  uint64_t v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::JsValue *v7;
  _BOOL8 result;
  const std::string *String;

  v5 = sub_20BDEEBA4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v5)
    return 0;
  v6 = (uint64_t *)v5;
  v7 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v5 + 56);
  result = pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v5 + 56));
  if (result)
  {
    String = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString(v7);
    std::string::operator=(a3, String);
    sub_20BE10B80(a1, v6);
    sub_20BE78EA4((uint64_t)(v6 + 4));
    operator delete(v6);
    return 1;
  }
  return result;
}

unint64_t sub_20C1AD528()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  void **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_254987E18);
  if (!v0)
  {
    v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "default", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "displayGroup", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "type", 0);
    v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "appliesTo", 0);
    v5 = *(void ***)v0;
    v36 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v36 = (void **)v6;
    }
    v8 = (unsigned int *)*v2;
    v37 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v37 = v9;
    }
    v11 = (unsigned int *)*v3;
    v38 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v38 = v12;
    }
    v14 = (unsigned int *)*v4;
    v39 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v39 = v15;
    }
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    *((_QWORD *)v0 + 6) = 0;
    v17 = operator new(0x20uLL);
    v18 = 0;
    *((_QWORD *)v0 + 4) = v17;
    *((_QWORD *)v0 + 5) = v17;
    *((_QWORD *)v0 + 6) = v17 + 4;
    do
    {
      v19 = (unint64_t)(&v36)[v18];
      *v17 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          *v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v18;
      ++v17;
    }
    while (v18 != 4);
    v22 = (void ***)&v40;
    *((_QWORD *)v0 + 5) = v17;
    do
    {
      v24 = (uint64_t)*--v22;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != &v36);
    while (!__ldaxr(&qword_254987E18))
    {
      if (!__stlxr((unint64_t)v0, &qword_254987E18))
        return (unint64_t)v0;
    }
    __clrex();
    v36 = (void **)(v0 + 32);
    sub_20BEEB2B8(&v36);
    if ((*v4 & 7) != 0)
    {
      v28 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if ((*v3 & 7) != 0)
    {
      v30 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    if ((*v2 & 7) != 0)
    {
      v32 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v34 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    operator delete(v0);
    return atomic_load(&qword_254987E18);
  }
  return (unint64_t)v0;
}

void sub_20C1AD808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      operator delete(v16);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *sub_20C1AD8F4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, int a4)
{
  _QWORD *Field;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  sub_20BF4C6D0(v9, a3);
  Field = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9, a4);
  sub_20BF4C2D8((uint64_t)v9);
  return Field;
}

void sub_20C1AD984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchema::~SdfSchema(pxrInternal__aapl__pxrReserved__::SdfSchema *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::~SdfSchemaBase(this);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::Sdf_InitializeValueTypeNames(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v2;

  v1 = atomic_load((unsigned __int8 *)&qword_254987E28);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254987E28))
  {
    sub_20C1AE338();
    __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::~Sdf_ValueTypeRegistry, &qword_254987E20, &dword_20BDBC000);
    __cxa_guard_release(&qword_254987E28);
  }
  v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)operator new(0x378uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::Sdf_ValueTypeNamesType(v2);
  *(_QWORD *)v2 = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "BOOL");
  *((_QWORD *)v2 + 1) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "uchar");
  *((_QWORD *)v2 + 2) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int");
  *((_QWORD *)v2 + 3) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "uint");
  *((_QWORD *)v2 + 4) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int64");
  *((_QWORD *)v2 + 5) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "uint64");
  *((_QWORD *)v2 + 6) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "half");
  *((_QWORD *)v2 + 7) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "float");
  *((_QWORD *)v2 + 8) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "double");
  *((_QWORD *)v2 + 9) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "timecode");
  *((_QWORD *)v2 + 10) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "string");
  *((_QWORD *)v2 + 11) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "token");
  *((_QWORD *)v2 + 12) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "asset");
  *((_QWORD *)v2 + 53) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "opaque");
  *((_QWORD *)v2 + 54) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "group");
  *((_QWORD *)v2 + 55) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "pathExpression");
  *((_QWORD *)v2 + 13) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int2");
  *((_QWORD *)v2 + 14) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int3");
  *((_QWORD *)v2 + 15) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int4");
  *((_QWORD *)v2 + 16) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "half2");
  *((_QWORD *)v2 + 17) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "half3");
  *((_QWORD *)v2 + 18) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "half4");
  *((_QWORD *)v2 + 19) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "float2");
  *((_QWORD *)v2 + 20) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "float3");
  *((_QWORD *)v2 + 21) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "float4");
  *((_QWORD *)v2 + 22) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "double2");
  *((_QWORD *)v2 + 23) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "double3");
  *((_QWORD *)v2 + 24) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "double4");
  *((_QWORD *)v2 + 25) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "point3h");
  *((_QWORD *)v2 + 26) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "point3f");
  *((_QWORD *)v2 + 27) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "point3d");
  *((_QWORD *)v2 + 28) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "vector3h");
  *((_QWORD *)v2 + 29) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "vector3f");
  *((_QWORD *)v2 + 30) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "vector3d");
  *((_QWORD *)v2 + 31) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "normal3h");
  *((_QWORD *)v2 + 32) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "normal3f");
  *((_QWORD *)v2 + 33) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "normal3d");
  *((_QWORD *)v2 + 34) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color3h");
  *((_QWORD *)v2 + 35) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color3f");
  *((_QWORD *)v2 + 36) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color3d");
  *((_QWORD *)v2 + 37) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color4h");
  *((_QWORD *)v2 + 38) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color4f");
  *((_QWORD *)v2 + 39) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color4d");
  *((_QWORD *)v2 + 40) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "quath");
  *((_QWORD *)v2 + 41) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "quatf");
  *((_QWORD *)v2 + 42) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "quatd");
  *((_QWORD *)v2 + 43) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "matrix2d");
  *((_QWORD *)v2 + 44) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "matrix3d");
  *((_QWORD *)v2 + 45) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "matrix4d");
  *((_QWORD *)v2 + 46) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "frame4d");
  *((_QWORD *)v2 + 48) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord2f");
  *((_QWORD *)v2 + 49) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord2d");
  *((_QWORD *)v2 + 47) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord2h");
  *((_QWORD *)v2 + 51) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord3f");
  *((_QWORD *)v2 + 52) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord3d");
  *((_QWORD *)v2 + 50) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord3h");
  *((_QWORD *)v2 + 56) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "BOOL[]");
  *((_QWORD *)v2 + 57) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "uchar[]");
  *((_QWORD *)v2 + 58) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int[]");
  *((_QWORD *)v2 + 60) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "uint[]");
  *((_QWORD *)v2 + 59) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "ushort[]");
  *((_QWORD *)v2 + 61) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int64[]");
  *((_QWORD *)v2 + 62) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "uint64[]");
  *((_QWORD *)v2 + 63) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "half[]");
  *((_QWORD *)v2 + 64) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "float[]");
  *((_QWORD *)v2 + 65) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "double[]");
  *((_QWORD *)v2 + 66) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "timecode[]");
  *((_QWORD *)v2 + 67) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "string[]");
  *((_QWORD *)v2 + 68) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "token[]");
  *((_QWORD *)v2 + 69) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "asset[]");
  *((_QWORD *)v2 + 110) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "pathExpression[]");
  *((_QWORD *)v2 + 70) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int2[]");
  *((_QWORD *)v2 + 71) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int3[]");
  *((_QWORD *)v2 + 72) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "int4[]");
  *((_QWORD *)v2 + 73) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "half2[]");
  *((_QWORD *)v2 + 74) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "half3[]");
  *((_QWORD *)v2 + 75) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "half4[]");
  *((_QWORD *)v2 + 76) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "float2[]");
  *((_QWORD *)v2 + 77) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "float3[]");
  *((_QWORD *)v2 + 78) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "float4[]");
  *((_QWORD *)v2 + 79) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "double2[]");
  *((_QWORD *)v2 + 80) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "double3[]");
  *((_QWORD *)v2 + 81) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "double4[]");
  *((_QWORD *)v2 + 82) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "point3h[]");
  *((_QWORD *)v2 + 83) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "point3f[]");
  *((_QWORD *)v2 + 84) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "point3d[]");
  *((_QWORD *)v2 + 85) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "vector3h[]");
  *((_QWORD *)v2 + 86) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "vector3f[]");
  *((_QWORD *)v2 + 87) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "vector3d[]");
  *((_QWORD *)v2 + 88) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "normal3h[]");
  *((_QWORD *)v2 + 89) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "normal3f[]");
  *((_QWORD *)v2 + 90) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "normal3d[]");
  *((_QWORD *)v2 + 91) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color3h[]");
  *((_QWORD *)v2 + 92) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color3f[]");
  *((_QWORD *)v2 + 93) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color3d[]");
  *((_QWORD *)v2 + 94) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color4h[]");
  *((_QWORD *)v2 + 95) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color4f[]");
  *((_QWORD *)v2 + 96) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "color4d[]");
  *((_QWORD *)v2 + 97) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "quath[]");
  *((_QWORD *)v2 + 98) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "quatf[]");
  *((_QWORD *)v2 + 99) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "quatd[]");
  *((_QWORD *)v2 + 100) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "matrix2d[]");
  *((_QWORD *)v2 + 101) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "matrix3d[]");
  *((_QWORD *)v2 + 102) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "matrix4d[]");
  *((_QWORD *)v2 + 103) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "frame4d[]");
  *((_QWORD *)v2 + 105) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord2f[]");
  *((_QWORD *)v2 + 106) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord2d[]");
  *((_QWORD *)v2 + 104) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord2h[]");
  *((_QWORD *)v2 + 108) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord3f[]");
  *((_QWORD *)v2 + 109) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord3d[]");
  *((_QWORD *)v2 + 107) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType((unint64_t **)&qword_254987E20, "texCoord3h[]");
  return v2;
}

void sub_20C1AE310(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254987E28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1AE338()
{
  tbb::spin_rw_mutex_v3 **v0;
  const pxrInternal__aapl__pxrReserved__::TfEnum *v1;
  const pxrInternal__aapl__pxrReserved__::TfEnum *v2;

  v0 = (tbb::spin_rw_mutex_v3 **)pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::Sdf_ValueTypeRegistry((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *)&qword_254987E20);
  sub_20C1A324C(v0, v1);
  return sub_20C1A5DC0(&qword_254987E20, v2);
}

void sub_20C1AE36C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::~Sdf_ValueTypeRegistry((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *)&qword_254987E20);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1AE388(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a2;
  *(_QWORD *)result = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_WORD *)(result + 8) = *(_WORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_20C1AE3FC(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        sub_20BF32220(v8 + 2, v4 + 2);
        *((_WORD *)v8 + 12) = *((_WORD *)v4 + 12);
        sub_20BF32220(v8 + 4, v4 + 4);
        v10 = (_QWORD *)*v8;
        sub_20BF321C0(a1, v8);
        v4 = (uint64_t *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    sub_20C038434((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_20C1AE504(a1, v4 + 2);
    v4 = (uint64_t *)*v4;
  }
}

void sub_20C1AE4D8(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_20C038434(v1, v2);
  __cxa_rethrow();
}

void sub_20C1AE4F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1AE504(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;

  v4 = operator new(0x28uLL);
  *v4 = 0;
  v4[1] = 0;
  sub_20C1AE5B4((uint64_t)(v4 + 2), a2);
  v4[1] = bswap64(0x9E3779B97F4A7C55 * (v4[2] & 0xFFFFFFFFFFFFFFF8));
  return sub_20BF321C0(a1, v4);
}

void sub_20C1AE598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20C038E18(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1AE5B4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *a2;
  *(_QWORD *)result = *a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  v5 = a2[2];
  *(_QWORD *)(result + 16) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_20C1AE628(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 8));
  sub_20BF4C6D0((_QWORD *)(a1 + 16), a3);
  sub_20BF4C6D0((_QWORD *)(a1 + 32), a4);
  *(_OWORD *)(a1 + 80) = 0u;
  v10 = MEMORY[0x24BEDB798];
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = v10;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_20C1AE6D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;

  sub_20BF4C2D8(v2);
  if ((*v1 & 7) != 0)
  {
    v4 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  _Unwind_Resume(a1);
}

double sub_20C1AE710(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  double result;
  uint64_t v7;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v7 = MEMORY[0x24BEDB798];
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v7;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

uint64_t *sub_20C1AE77C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1AE838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1AE87C(uint64_t a1)
{
  void *v2;

  sub_20C1AE8B4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C1AE8B4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C1AE8F0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C1AE8F0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  void **v8;

  v8 = (void **)(a1 + 40);
  sub_20C1B27D4(&v8);
  result = sub_20BF4C2D8(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v6 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t sub_20C1AE96C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = &unk_24C51FCF3;
  LOBYTE(v15[0]) = *a3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C524F38;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AEA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AEAE4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 112);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  sub_20BF4C2D8(a1 + 32);
  sub_20BF4C2D8(a1 + 16);
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return a1;
}

uint64_t sub_20C1AEB74(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = &unk_24C51FE63;
  LOBYTE(v15[0]) = *a3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C51F668;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AEC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AECEC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = &unk_24C52008B;
  LODWORD(v15[0]) = *a3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C51F5B0;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AEDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AEE64(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = &unk_24C520143;
  LODWORD(v15[0]) = *a3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C51F4F8;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AEF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AEFDC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[0] = *a3;
  v15[1] = &unk_24C52036B;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C5250B0;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AF0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AF150(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[0] = *a3;
  v15[1] = &unk_24C520423;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C525198;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AF25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AF2C4(uint64_t a1, uint64_t a2, _WORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = (char *)&off_24C5204D8 + 3;
  LOWORD(v15[0]) = *a3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C51E8C0;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AF3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AF43C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = &unk_24C520593;
  LODWORD(v15[0]) = *a3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C51E808;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AF54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AF5B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = &unk_24C52064B;
  v15[0] = *a3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C51E978;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AF6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AF72C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[0] = *a3;
  v15[1] = (char *)&off_24C5252B0 + 1;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C525378;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AF838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AF8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  unsigned int *v15[3];

  v15[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v15, a3);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C525448;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20C008280(v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AF9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AFA20(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v5;
  unsigned int v6;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v15, a2, 0);
  v17[0] = *a3;
  v17[1] = (char *)&off_24C5207B8 + 1;
  if ((v17[0] & 7) != 0)
  {
    v5 = (unsigned int *)(v17[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v17[0] = v5;
  }
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v16[1] = off_24C525500;
  v7 = (char *)operator new(0x30uLL);
  v8 = (unsigned int *)(v7 + 40);
  *((_QWORD *)v7 + 4) = 0;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  atomic_store(0, (unsigned int *)v7 + 10);
  v16[0] = v7;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  sub_20C1AE628(a1, &v15, v17, v16);
  sub_20BF4C2D8((uint64_t)v16);
  sub_20C00918C(v13);
  sub_20BF4C2D8((uint64_t)v17);
  if ((v15 & 7) != 0)
  {
    v10 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  return a1;
}

void sub_20C1AFB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AFBB8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  char *v15[3];

  v15[2] = *(char **)MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = (char *)&off_24C5255B8;
  sub_20C00A0DC(v15, a3);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = &off_24C525670;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20C00A724(v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AFCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AFD38(uint64_t a1, uint64_t a2)
{
  char *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11, a2, 0);
  v13[1] = (char *)&off_24C52A800 + 3;
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v12[1] = &off_24C525728;
  v3 = (char *)operator new(0x30uLL);
  v4 = (unsigned int *)(v3 + 40);
  *((_QWORD *)v3 + 4) = 0;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  atomic_store(0, (unsigned int *)v3 + 10);
  v12[0] = v3;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  sub_20C1AE628(a1, &v11, v13, v12);
  sub_20BF4C2D8((uint64_t)v12);
  sub_20BF5618C((uint64_t)v9);
  sub_20BF4C2D8((uint64_t)v13);
  if ((v11 & 7) != 0)
  {
    v6 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return a1;
}

void sub_20C1AFE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1AFEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  unsigned int *v15[3];

  v15[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = (unsigned int *)&off_24C5257F8;
  sub_20C00E2E0(v15, a3);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C5258B0;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20C00E910(v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1AFFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B0024(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16, a2, 0);
  v18[1] = (char *)&off_24C51DF68 + 2;
  v5 = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)v5 = *a3;
  v6 = v5 + 4;
  atomic_store(0, v5 + 4);
  v18[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v17[1] = off_24C51EBA0;
  v8 = (char *)operator new(0x30uLL);
  v9 = (unsigned int *)(v8 + 40);
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  atomic_store(0, (unsigned int *)v8 + 10);
  v17[0] = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  sub_20C1AE628(a1, &v16, v18, v17);
  sub_20BF4C2D8((uint64_t)v17);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF4C2D8((uint64_t)v18);
  if ((v16 & 7) != 0)
  {
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return a1;
}

void sub_20C1B0158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B01C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16, a2, 0);
  v18[1] = (char *)&off_24C51E190 + 2;
  v5 = (char *)operator new(0x20uLL);
  *(_OWORD *)v5 = *(_OWORD *)a3;
  *((_QWORD *)v5 + 2) = *(_QWORD *)(a3 + 16);
  v6 = (unsigned int *)(v5 + 24);
  atomic_store(0, (unsigned int *)v5 + 6);
  v18[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v17[1] = off_24C51EDC8;
  v8 = (char *)operator new(0x30uLL);
  v9 = (unsigned int *)(v8 + 40);
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  atomic_store(0, (unsigned int *)v8 + 10);
  v17[0] = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  sub_20C1AE628(a1, &v16, v18, v17);
  sub_20BF4C2D8((uint64_t)v17);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF4C2D8((uint64_t)v18);
  if ((v16 & 7) != 0)
  {
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return a1;
}

void sub_20C1B0304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B0374(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  char *v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v17, a2, 0);
  v19[1] = (char *)&off_24C51E3B8 + 2;
  v5 = (char *)operator new(0x28uLL);
  v6 = a3[1];
  *(_OWORD *)v5 = *a3;
  *((_OWORD *)v5 + 1) = v6;
  v7 = (unsigned int *)(v5 + 32);
  atomic_store(0, (unsigned int *)v5 + 8);
  v19[0] = v5;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v18[1] = off_24C51EFF0;
  v9 = (char *)operator new(0x30uLL);
  v10 = (unsigned int *)(v9 + 40);
  *((_QWORD *)v9 + 4) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  atomic_store(0, (unsigned int *)v9 + 10);
  v18[0] = v9;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  sub_20C1AE628(a1, &v17, v19, v18);
  sub_20BF4C2D8((uint64_t)v18);
  sub_20BF5618C((uint64_t)v15);
  sub_20BF4C2D8((uint64_t)v19);
  if ((v17 & 7) != 0)
  {
    v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return a1;
}

void sub_20C1B04A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B0518(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[0] = *a3;
  v15[1] = (char *)&off_24C51DEB0 + 3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C51EA30;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1B0624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B068C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16, a2, 0);
  v18[1] = (char *)&off_24C51E0D8 + 2;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = *(_QWORD *)a3;
  v5[2] = *(_DWORD *)(a3 + 8);
  v6 = v5 + 3;
  atomic_store(0, v5 + 3);
  v18[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v17[1] = off_24C51EC58;
  v8 = (char *)operator new(0x30uLL);
  v9 = (unsigned int *)(v8 + 40);
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  atomic_store(0, (unsigned int *)v8 + 10);
  v17[0] = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  sub_20C1AE628(a1, &v16, v18, v17);
  sub_20BF4C2D8((uint64_t)v17);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF4C2D8((uint64_t)v18);
  if ((v16 & 7) != 0)
  {
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return a1;
}

void sub_20C1B07C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B0838(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16, a2, 0);
  v18[1] = (char *)&off_24C51E300 + 2;
  v5 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)v5 = *a3;
  v6 = v5 + 4;
  atomic_store(0, v5 + 4);
  v18[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v17[1] = off_24C51EE80;
  v8 = (char *)operator new(0x30uLL);
  v9 = (unsigned int *)(v8 + 40);
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  atomic_store(0, (unsigned int *)v8 + 10);
  v17[0] = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  sub_20C1AE628(a1, &v16, v18, v17);
  sub_20BF4C2D8((uint64_t)v17);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF4C2D8((uint64_t)v18);
  if ((v16 & 7) != 0)
  {
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return a1;
}

void sub_20C1B096C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B09DC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = (char *)&off_24C51DDF8 + 3;
  LODWORD(v15[0]) = *a3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C51EAE8;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1B0AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B0B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[1] = (char *)&off_24C51E020 + 3;
  LODWORD(v15[0]) = *(_DWORD *)a3;
  WORD2(v15[0]) = *(_WORD *)(a3 + 4);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C51ED10;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1B0C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B0CD4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[0] = *a3;
  v15[1] = (char *)&off_24C51E248 + 3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C51EF38;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1B0DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B0E48(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[0] = *a3;
  v15[1] = (char *)&off_24C525968 + 3;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C525A20;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1B0F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B0FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16, a2, 0);
  v18[1] = (char *)&off_24C525AD8 + 2;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = *(_QWORD *)a3;
  v5[2] = *(_DWORD *)(a3 + 8);
  v6 = v5 + 3;
  atomic_store(0, v5 + 3);
  v18[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v17[1] = off_24C525B90;
  v8 = (char *)operator new(0x30uLL);
  v9 = (unsigned int *)(v8 + 40);
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  atomic_store(0, (unsigned int *)v8 + 10);
  v17[0] = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  sub_20C1AE628(a1, &v16, v18, v17);
  sub_20BF4C2D8((uint64_t)v17);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF4C2D8((uint64_t)v18);
  if ((v16 & 7) != 0)
  {
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return a1;
}

void sub_20C1B10F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B1168(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16, a2, 0);
  v18[1] = (char *)&off_24C525C48 + 2;
  v5 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)v5 = *a3;
  v6 = v5 + 4;
  atomic_store(0, v5 + 4);
  v18[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v17[1] = &off_24C525D00;
  v8 = (char *)operator new(0x30uLL);
  v9 = (unsigned int *)(v8 + 40);
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  atomic_store(0, (unsigned int *)v8 + 10);
  v17[0] = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  sub_20C1AE628(a1, &v16, v18, v17);
  sub_20BF4C2D8((uint64_t)v17);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF4C2D8((uint64_t)v18);
  if ((v16 & 7) != 0)
  {
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return a1;
}

void sub_20C1B129C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B130C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13, a2, 0);
  v15[0] = *a3;
  v15[1] = (char *)&off_24C51E698 + 1;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v14[1] = off_24C51F2D0;
  v5 = (char *)operator new(0x30uLL);
  v6 = (unsigned int *)(v5 + 40);
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v14[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  sub_20C1AE628(a1, &v13, v15, v14);
  sub_20BF4C2D8((uint64_t)v14);
  sub_20BF5618C((uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v15);
  if ((v13 & 7) != 0)
  {
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

void sub_20C1B1418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B1480(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16, a2, 0);
  v18[1] = &off_24C51E5E0;
  v5 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)v5 = *a3;
  v6 = v5 + 4;
  atomic_store(0, v5 + 4);
  v18[0] = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v17[1] = off_24C51F218;
  v8 = (char *)operator new(0x30uLL);
  v9 = (unsigned int *)(v8 + 40);
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  atomic_store(0, (unsigned int *)v8 + 10);
  v17[0] = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  sub_20C1AE628(a1, &v16, v18, v17);
  sub_20BF4C2D8((uint64_t)v17);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF4C2D8((uint64_t)v18);
  if ((v16 & 7) != 0)
  {
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return a1;
}

void sub_20C1B15B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B1620(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  char *v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v17, a2, 0);
  v19[1] = &off_24C51E750;
  v5 = (char *)operator new(0x28uLL);
  v6 = a3[1];
  *(_OWORD *)v5 = *a3;
  *((_OWORD *)v5 + 1) = v6;
  v7 = (unsigned int *)(v5 + 32);
  atomic_store(0, (unsigned int *)v5 + 8);
  v19[0] = v5;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v18[1] = off_24C51F388;
  v9 = (char *)operator new(0x30uLL);
  v10 = (unsigned int *)(v9 + 40);
  *((_QWORD *)v9 + 4) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  atomic_store(0, (unsigned int *)v9 + 10);
  v18[0] = v9;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  sub_20C1AE628(a1, &v17, v19, v18);
  sub_20BF4C2D8((uint64_t)v18);
  sub_20BF5618C((uint64_t)v15);
  sub_20BF4C2D8((uint64_t)v19);
  if ((v17 & 7) != 0)
  {
    v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return a1;
}

void sub_20C1B1750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B17C0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  char *v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v17, a2, 0);
  v19[1] = (char *)&off_24C5221E8 + 2;
  v5 = (char *)operator new(0x28uLL);
  v6 = a3[1];
  *(_OWORD *)v5 = *a3;
  *((_OWORD *)v5 + 1) = v6;
  v7 = (unsigned int *)(v5 + 32);
  atomic_store(0, (unsigned int *)v5 + 8);
  v19[0] = v5;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v18[1] = off_24C525DB8;
  v9 = (char *)operator new(0x30uLL);
  v10 = (unsigned int *)(v9 + 40);
  *((_QWORD *)v9 + 4) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  atomic_store(0, (unsigned int *)v9 + 10);
  v18[0] = v9;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  sub_20C1AE628(a1, &v17, v19, v18);
  sub_20BF4C2D8((uint64_t)v18);
  sub_20BF5618C((uint64_t)v15);
  sub_20BF4C2D8((uint64_t)v19);
  if ((v17 & 7) != 0)
  {
    v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return a1;
}

void sub_20C1B18F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B1964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18, a2, 0);
  v20[1] = (char *)&off_24C522470 + 2;
  v5 = (char *)operator new(0x50uLL);
  v6 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v5 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v5 + 3) = v6;
  *((_QWORD *)v5 + 8) = *(_QWORD *)(a3 + 64);
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a3;
  *((_OWORD *)v5 + 1) = v7;
  v8 = (unsigned int *)(v5 + 72);
  atomic_store(0, (unsigned int *)v5 + 18);
  v20[0] = v5;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v19[1] = off_24C525E70;
  v10 = (char *)operator new(0x30uLL);
  v11 = (unsigned int *)(v10 + 40);
  *((_QWORD *)v10 + 4) = 0;
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  atomic_store(0, (unsigned int *)v10 + 10);
  v19[0] = v10;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  sub_20C1AE628(a1, &v18, v20, v19);
  sub_20BF4C2D8((uint64_t)v19);
  sub_20BF5618C((uint64_t)v16);
  sub_20BF4C2D8((uint64_t)v20);
  if ((v18 & 7) != 0)
  {
    v13 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  return a1;
}

void sub_20C1B1AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B1B18(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v20, a2, 0);
  v22[1] = (char *)&off_24C51E470 + 2;
  v5 = (char *)operator new(0x88uLL);
  v6 = a3[5];
  *((_OWORD *)v5 + 4) = a3[4];
  *((_OWORD *)v5 + 5) = v6;
  v7 = a3[7];
  *((_OWORD *)v5 + 6) = a3[6];
  *((_OWORD *)v5 + 7) = v7;
  v8 = a3[1];
  *(_OWORD *)v5 = *a3;
  *((_OWORD *)v5 + 1) = v8;
  v9 = a3[3];
  *((_OWORD *)v5 + 2) = a3[2];
  *((_OWORD *)v5 + 3) = v9;
  v10 = (unsigned int *)(v5 + 128);
  atomic_store(0, (unsigned int *)v5 + 32);
  v22[0] = v5;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v21[1] = off_24C51F0A8;
  v12 = (char *)operator new(0x30uLL);
  v13 = (unsigned int *)(v12 + 40);
  *((_QWORD *)v12 + 4) = 0;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  atomic_store(0, (unsigned int *)v12 + 10);
  v21[0] = v12;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  sub_20C1AE628(a1, &v20, v22, v21);
  sub_20BF4C2D8((uint64_t)v21);
  sub_20BF5618C((uint64_t)v18);
  sub_20BF4C2D8((uint64_t)v22);
  if ((v20 & 7) != 0)
  {
    v15 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return a1;
}

void sub_20C1B1C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *sub_20C1B1CD4(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *result;
  void *v4;

  result = sub_20C1B1D1C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType::~SdfValueRoleNames_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *sub_20C1B1D1C()
{
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType::SdfValueRoleNames_StaticTokenType(v0);
  return v0;
}

void sub_20C1B1D48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B1D68()
{
  return 1;
}

unint64_t sub_20C1B1D70()
{
  return 0xFD5E9E798547F38FLL;
}

uint64_t sub_20C1B1D84()
{
  return 1;
}

uint64_t sub_20C1B1D8C()
{
  return 1;
}

uint64_t sub_20C1B1D98()
{
  return 0;
}

_QWORD *sub_20C1B1DA4(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20C1B1DB4()
{
  return &unk_24C524D80;
}

uint64_t sub_20C1B1DC0()
{
  return 0;
}

uint64_t sub_20C1B1DC8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C1B1DD4()
{
  return 0;
}

uint64_t sub_20C1B1DDC()
{
  return 0;
}

BOOL sub_20C1B1DE4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAE6BD6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C1B1E1C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D80, a2, a3);
}

void *sub_20C1B1E3C()
{
  return &unk_24C524D80;
}

void sub_20C1B1E4C(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = (char *)&off_24C52A800 + 3;
}

uint64_t sub_20C1B1E60(uint64_t a1, int a2, char *__s)
{
  char v5;
  void *__p[2];
  uint64_t v8;

  sub_20BDDC0E4(__p, __s);
  if (a2)
  {
    v5 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    if (SHIBYTE(v8) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a1, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 16) = v8;
    }
    v5 = 1;
  }
  *(_BYTE *)(a1 + 24) = v5;
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20C1B1EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B1F04(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CABDD1ELL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C529858);
}

uint64_t sub_20C1B1F7C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20C1B1F04(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C1B1FE4, (uint64_t)&stru_24C529858);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20C1B1FE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  _QWORD v4[2];

  sub_20C1B2038(v4);
  v2 = (uint64_t (*)(_QWORD))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &stru_24C529858;
  return v2(0);
}

void sub_20C1B2038(_QWORD *a1@<X8>)
{
  void *v2;
  double v3[2];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  v2 = operator new(0x30uLL);
  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v4 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v3, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(v2, __p, &v4, v3);
  *a1 = v2;
  a1[1] = sub_20C1B211C;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v4 + 1);
  sub_20BFD265C(&v4);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20C1B20F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  sub_20BFD1A18(&a11);
  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_20C1B211C(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_20BFD265C((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    operator delete((void *)a1);
  }
}

void sub_20C1B2170(std::string *__dst, const std::string *a2)
{
  __int128 v3;

  if (__dst[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (__dst[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(__dst, a2);
  }
  else if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst->__r_.__value_.__l.__data_);
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t sub_20C1B2200(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CABD888 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C52A100);
}

uint64_t sub_20C1B2278(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20C1B2200(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C1B22E0, (uint64_t)&stru_24C52A100);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20C1B22E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  _QWORD v4[2];

  sub_20C1B2334(v4);
  v2 = (uint64_t (*)(_QWORD))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &stru_24C52A100;
  return v2(0);
}

void sub_20C1B2334(_QWORD *a1@<X8>)
{
  void *v2;
  _QWORD **v3;
  double v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;

  v2 = operator new(0x38uLL);
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v5 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v4, 0.0, 1.0);
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(v2, __p, &v5, v4, &v3);
  *a1 = v2;
  a1[1] = sub_20C1B2440;
  sub_20BF49F14(&v3, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  sub_20BFD265C(&v5);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20C1B2400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11, uint64_t a12, int a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  sub_20BF49F14(&a10, 0);
  sub_20BFD1A18(&a13);
  if (a19 < 0)
    operator delete(__p);
  operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_20C1B2440(uint64_t a1)
{
  if (a1)
  {
    sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_20BFD265C((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    operator delete((void *)a1);
  }
}

uint64_t sub_20C1B24A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
  v8 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 16) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF4C6D0((_QWORD *)(a1 + 24), (_QWORD *)(a3 + 16));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_20C1B25E4((uint64_t *)(a1 + 40), *(uint64_t **)(a3 + 32), *(uint64_t **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  v11 = *(_OWORD *)(a3 + 56);
  v12 = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a3 + 88);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v12;
  return a1;
}

void sub_20C1B2588(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;

  sub_20BF4C2D8(v2);
  v4 = v1[2];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((*v1 & 7) != 0)
  {
    v7 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1B25E4(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDE4FA4(result, a4);
    result = sub_20C1B2668((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_20C1B2648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C1B27D4(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1B2668(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C1B26F0(v4, v6);
      v6 += 3;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C1B2748((uint64_t)v8);
  return v4;
}

uint64_t *sub_20C1B26F0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *a2;
  *result = *a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = a2[2];
  result[1] = a2[1];
  result[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t sub_20C1B2748(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C1B277C(a1);
  return a1;
}

void sub_20C1B277C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 - 16));
    v4 = *(_QWORD *)(v1 - 24);
    v1 -= 24;
    v3 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
  }
}

void sub_20C1B27D4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C1B2814((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_20C1B2814(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 24)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(i - 16));
    v6 = *(_QWORD *)(i - 24);
    v5 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_20C1B287C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  sub_20BF4C200((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  return a1;
}

void sub_20C1B28FC(int64x2_t *a1, uint64_t a2, char *a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 232);
  if (v5)
  {
    v6 = (int)a3;
    if (v5 <= (int)a3)
    {
      if (a1[2].i64[1])
      {
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue((int *)a2, *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL));
        sub_20C1B2E14(a1);
      }
    }
    else
    {
      v7 = a2 + 216;
      v8 = (int)a3;
      pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginTuple((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)a2, (const char *)a2, a3);
      if (*(_QWORD *)(v7 + 8 * v6))
      {
        v11 = 0;
        v12 = (v6 + 1);
        do
        {
          sub_20C1B28FC(a1, a2, v12);
          ++v11;
        }
        while (v11 < *(_QWORD *)(v7 + 8 * v8));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndTuple((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)a2, v9, v10);
    }
  }
  else
  {
    while (a1[2].i64[1])
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue((int *)a2, *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL));
      sub_20C1B2E14(a1);
    }
  }
}

uint64_t sub_20C1B2A4C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 73 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_20C1B2B00(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  }
  result = sub_20C0197DC(v8, a2);
  ++a1[5];
  return result;
}

void sub_20C1B2B00(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF8uLL);
      sub_20BE972A0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF8uLL);
    sub_20BE973B4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20BDDF6A8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF8uLL);
  sub_20BE974D0(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20BE975E4((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20C1B2DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B2E14(int64x2_t *a1)
{
  sub_20BFCD42C(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_20CAB4590);
  return sub_20C1B2E84((uint64_t)a1, 1);
}

uint64_t sub_20C1B2E84(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x49)
    a2 = 1;
  if (v2 < 0x92)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 73;
  }
  return v4 ^ 1u;
}

uint64_t sub_20C1B2EE0(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x49];
    v7 = (uint64_t)*v6 + 56 * (v5 % 0x49);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v7 != v8)
    {
      do
      {
        v7 = sub_20BFCD42C(v7) + 56;
        if (v7 - (_QWORD)*v6 == 4088)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 36;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 73;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_20BE97BCC((uint64_t)a1);
}

uint64_t *sub_20C1B3014()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1B3134((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C1B30E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C1B3134(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C1B31A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B31C4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1B3238((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C1B3238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 24);
      a3 -= 24;
      *(_QWORD *)(v7 - 24) = v8;
      *(_QWORD *)a3 = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C1B32D0((uint64_t)v11);
  return v9;
}

uint64_t sub_20C1B32D0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C1B3304(a1);
  return a1;
}

void sub_20C1B3304(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 1));
    if ((*v1 & 7) != 0)
    {
      v3 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v1 += 3;
  }
}

uint64_t sub_20C1B3360(uint64_t a1)
{
  sub_20C1B3394(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C1B3394(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(i - 16));
    v5 = *(_QWORD *)(i - 24);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
}

_QWORD *sub_20C1B3404(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  sub_20C1AE5B4((uint64_t)(i + 2), a3);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C1B364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20C038E18(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C1B3668(uint64_t a1, char *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  if (a2)
  {
    v3 = *((_QWORD *)a2 + 14);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    if (a2[95] < 0)
      operator delete(*((void **)a2 + 9));
    if (a2[71] < 0)
      operator delete(*((void **)a2 + 6));
    sub_20BF4C2D8((uint64_t)(a2 + 32));
    sub_20BF4C2D8((uint64_t)(a2 + 16));
    if ((*(_QWORD *)a2 & 7) != 0)
    {
      v6 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    operator delete(a2);
  }
}

void sub_20C1B3700(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **a1, pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::~Sdf_ValueTypeRegistry(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C1B372C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v2;
  _BYTE v4[8];
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v5 = &unk_24C51FCF3;
  v4[0] = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v4, 0);
  return sub_20BF4C2D8((uint64_t)v4);
}

void sub_20C1B37A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1B37B8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  char *v4;
  unsigned int *v5;
  unsigned int v6;
  _OWORD v7[2];
  uint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v9[1] = off_24C525500;
  v4 = (char *)operator new(0x30uLL);
  v5 = (unsigned int *)(v4 + 40);
  *((_QWORD *)v4 + 4) = 0;
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  atomic_store(0, (unsigned int *)v4 + 10);
  v9[0] = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9, 0);
  sub_20BF4C2D8((uint64_t)v9);
  sub_20C00918C(v7);
}

void sub_20C1B3878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

void sub_20C1B38B4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _QWORD **v4;
  unsigned int *v5[3];

  v5[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = 0;
  v5[1] = (unsigned int *)&off_24C51D8C8;
  sub_20BF4D058(v5, (const void ****)&v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5, 0);
  sub_20BF4C2D8((uint64_t)v5);
  sub_20BF49F14(&v4, 0);
}

void sub_20C1B394C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9, char a10)
{
  sub_20BF4C2D8((uint64_t)&a10);
  sub_20BF49F14(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20C1B3974(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  void *v4[2];
  char v5;
  void *__p;
  char v7;
  char *v8[3];

  v8[2] = *(char **)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v4);
  v8[1] = (char *)&off_24C5255B8;
  sub_20C00A0DC(v8, (__int128 *)v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8, 0);
  sub_20BF4C2D8((uint64_t)v8);
  if (v7 < 0)
    operator delete(__p);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_20C1B3A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8(v2 - 40);
  sub_20BE930F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B3A50(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v4[0] = 0;
  v4[1] = (char *)&off_24C5207B8 + 1;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v4, 0);
  return sub_20BF4C2D8((uint64_t)v4);
}

void sub_20C1B3AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1B3AD8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  void *__p[2];
  uint64_t v5;
  unsigned int *v6[3];

  v6[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  v6[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v6, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_20BF4C2D8((uint64_t)v6);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20C1B3B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BF4C2D8((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C1B3BA4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _BYTE v4[8];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unsigned int *v12[3];

  v12[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v4);
  v12[1] = (unsigned int *)&off_24C5249C8;
  sub_20BFD86E0(v12, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12, 0);
  sub_20BF4C2D8((uint64_t)v12);
  v11 = (void **)&v10;
  sub_20BFD6F90(&v11);
  v11 = (void **)&v9;
  sub_20BFD6F90(&v11);
  v11 = (void **)&v8;
  sub_20BFD6F90(&v11);
  v11 = (void **)&v7;
  sub_20BFD6F90(&v11);
  v11 = (void **)&v6;
  sub_20BFD6F90(&v11);
  v11 = (void **)&v5;
  sub_20BFD6F90(&v11);
}

void sub_20C1B3C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8(v2 - 40);
  sub_20BFD6A50((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B3CC4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v2;
  _BYTE v4[8];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v4, 0);
  return sub_20BF4C2D8((uint64_t)v4);
}

void sub_20C1B3D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1B3D40(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  char *v4;
  unsigned int *v5;
  unsigned int v6;
  _OWORD v7[2];
  uint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v9[1] = off_24C525448;
  v4 = (char *)operator new(0x30uLL);
  v5 = (unsigned int *)(v4 + 40);
  *((_QWORD *)v4 + 4) = 0;
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  atomic_store(0, (unsigned int *)v4 + 10);
  v9[0] = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9, 0);
  sub_20BF4C2D8((uint64_t)v9);
  sub_20C008280(v7);
}

void sub_20C1B3E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

uint64_t sub_20C1B3E3C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v8[1] = &off_24C527B88;
  v4 = operator new(0x18uLL);
  *(_QWORD *)v4 = MEMORY[0x24BEDB798];
  v4[2] = 0;
  v5 = v4 + 4;
  atomic_store(0, v4 + 4);
  v8[0] = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8, 0);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C1B3EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B3F00(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v4[0] = 0;
  v4[1] = &unk_24C52064B;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v4, 0);
  return sub_20BF4C2D8((uint64_t)v4);
}

void sub_20C1B3F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B3F88(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v2;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v5 = &unk_24C52008B;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v4, 0);
  return sub_20BF4C2D8((uint64_t)&v4);
}

void sub_20C1B4000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1B4014(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  uint64_t *v4[3];
  void **v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  memset(v4, 0, sizeof(v4));
  v6[1] = &off_24C526790;
  sub_20C030230(v6, v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_20BF4C2D8((uint64_t)v6);
  v5 = (void **)v4;
  sub_20BEEB2B8(&v5);
}

void sub_20C1B40B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, void **);
  sub_20BF4C2D8((uint64_t)va2);
  va_copy((va_list)v7, va);
  sub_20BEEB2B8((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_20C1B40E0(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _BYTE v4[8];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unsigned int *v12[3];

  v12[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v4);
  v12[1] = (unsigned int *)&off_24C526620;
  sub_20C02F37C(v12, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12, 0);
  sub_20BF4C2D8((uint64_t)v12);
  v11 = (void **)&v10;
  sub_20C021818(&v11);
  v11 = (void **)&v9;
  sub_20C021818(&v11);
  v11 = (void **)&v8;
  sub_20C021818(&v11);
  v11 = (void **)&v7;
  sub_20C021818(&v11);
  v11 = (void **)&v6;
  sub_20C021818(&v11);
  v11 = (void **)&v5;
  sub_20C021818(&v11);
}

void sub_20C1B41D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8(v2 - 40);
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B4200(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v2;
  int v4;
  char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v5 = (char *)&off_24C5298D8 + 3;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v4, 0);
  return sub_20BF4C2D8((uint64_t)&v4);
}

void sub_20C1B4278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1B428C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _BYTE v4[8];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unsigned int *v12[3];

  v12[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v4);
  v12[1] = (unsigned int *)&off_24C526568;
  sub_20C02C8C8(v12, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12, 0);
  sub_20BF4C2D8((uint64_t)v12);
  v11 = (void **)&v10;
  sub_20C021740(&v11);
  v11 = (void **)&v9;
  sub_20C021740(&v11);
  v11 = (void **)&v8;
  sub_20C021740(&v11);
  v11 = (void **)&v7;
  sub_20C021740(&v11);
  v11 = (void **)&v6;
  sub_20C021740(&v11);
  v11 = (void **)&v5;
  sub_20C021740(&v11);
}

void sub_20C1B4380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8(v2 - 40);
  sub_20C029B80((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C1B43AC(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _QWORD **v4;
  _QWORD *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v5[0] = 0;
  v5[1] = 0;
  v4 = v5;
  v6[1] = &off_24C528438;
  sub_20C0E81C4(v6, (uint64_t)&v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_20BF4C2D8((uint64_t)v6);
  sub_20BFED2B4((uint64_t)&v4, v5[0]);
}

void sub_20C1B4450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12)
{
  sub_20BF4C2D8((uint64_t)&a12);
  sub_20BFED2B4((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20C1B4478(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _QWORD **v4;
  _QWORD *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v5[0] = 0;
  v5[1] = 0;
  v4 = v5;
  v6[1] = &off_24C528048;
  sub_20C0E4994(v6, (uint64_t)&v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_20BF4C2D8((uint64_t)v6);
  sub_20BFE4CE8((uint64_t)&v4, v5[0]);
}

void sub_20C1B451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12)
{
  sub_20BF4C2D8((uint64_t)&a12);
  sub_20BFE4CE8((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B4544(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v2;
  int v4;
  char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v5 = (char *)&off_24C527CC0 + 3;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v4, 0);
  return sub_20BF4C2D8((uint64_t)&v4);
}

void sub_20C1B45BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1B45D0(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  __int128 *v4[3];
  __int128 **v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  memset(v4, 0, sizeof(v4));
  v6[1] = &off_24C526420;
  sub_20C020E24(v6, v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_20BF4C2D8((uint64_t)v6);
  v5 = v4;
  sub_20BDE5038((void ***)&v5);
}

void sub_20C1B4670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, void **);
  sub_20BF4C2D8((uint64_t)va2);
  va_copy((va_list)v7, va);
  sub_20BDE5038((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_20C1B469C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  void *__p;
  void *v5;
  uint64_t v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  __p = 0;
  v5 = 0;
  v6 = 0;
  v7[1] = &off_24C526368;
  sub_20C020690(v7, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7, 0);
  sub_20BF4C2D8((uint64_t)v7);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_20C1B473C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  sub_20BF4C2D8((uint64_t)&a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C1B4768(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _BYTE v4[8];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unsigned int *v12[3];

  v12[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v4);
  v12[1] = (unsigned int *)&off_24C5266D8;
  sub_20C02FE24(v12, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12, 0);
  sub_20BF4C2D8((uint64_t)v12);
  v11 = (void **)&v10;
  sub_20BDE5038(&v11);
  v11 = (void **)&v9;
  sub_20BDE5038(&v11);
  v11 = (void **)&v8;
  sub_20BDE5038(&v11);
  v11 = (void **)&v7;
  sub_20BDE5038(&v11);
  v11 = (void **)&v6;
  sub_20BDE5038(&v11);
  v11 = (void **)&v5;
  sub_20BDE5038(&v11);
}

void sub_20C1B485C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8(v2 - 40);
  sub_20C020EAC((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C1B4888(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  const void **v4;
  _QWORD *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v5[0] = 0;
  v5[1] = 0;
  v4 = (const void **)v5;
  v6[1] = &off_24C526858;
  sub_20C0307AC(v6, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_20BF4C2D8((uint64_t)v6);
  sub_20BDE9D48((uint64_t)&v4, v5[0]);
}

void sub_20C1B492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12)
{
  sub_20BF4C2D8((uint64_t)&a12);
  sub_20BDE9D48((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B4954(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v2;
  int v4;
  char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v5 = (char *)&off_24C5269E8 + 3;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v4, 0);
  return sub_20BF4C2D8((uint64_t)&v4);
}

void sub_20C1B49CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1B49E0(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v3;
  _DWORD *v4[3];
  void **v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  memset(v4, 0, sizeof(v4));
  v6[1] = &off_24C526910;
  sub_20C030C78(v6, v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_20BF4C2D8((uint64_t)v6);
  v5 = (void **)v4;
  sub_20BFD6F90(&v5);
}

void sub_20C1B4A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, void **);
  sub_20BF4C2D8((uint64_t)va2);
  va_copy((va_list)v7, va);
  sub_20BFD6F90((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_20C1B4AAC(uint64_t a1, char *a2)
{
  void *__p[2];
  char v4;

  sub_20BDDC0E4(__p, a2);
  *(_QWORD *)(a1 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20C1B4B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *sub_20C1B4B1C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C1B4B64();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType::~SdfMetadataDisplayGroupTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *sub_20C1B4B64()
{
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType::SdfMetadataDisplayGroupTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C1B4B90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1B4BA4(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 8), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20C1B4C44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

void *sub_20C1B4C5C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  _BYTE v6[8];
  _QWORD v7[4];
  __int128 v8;

  *(_QWORD *)&v8 = a2;
  *((_QWORD *)&v8 + 1) = a3;
  v4 = operator new(0x68uLL);
  v7[0] = off_24C51AF48;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v6);
  sub_20C1B4CF8((uint64_t)v4, a1, &v8, (uint64_t)v7);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *__hidden))v7[0])((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *)v7);
  return v4;
}

void sub_20C1B4CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(_QWORD))
{
  void *v11;

  (*a11)(&a11);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B4CF8(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)a1 = &unk_24C52A8C8;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a2[1];
  *(_QWORD *)(a1 + 40) = *a2;
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = *a3;
  return a1;
}

void sub_20C1B4D74(_Unwind_Exception *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 48);
  if (v4)
    sub_20C96B36C(v4);
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)v2, a2);
  _Unwind_Resume(a1);
}

void sub_20C1B4D94(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)a1 = &unk_24C52A8C8;
  (**(void (***)(uint64_t))(a1 + 56))(a1 + 56);
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)a1, v2);
}

void sub_20C1B4DFC(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  *(_QWORD *)a1 = &unk_24C52A8C8;
  (**(void (***)(uint64_t))(a1 + 56))(a1 + 56);
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)a1, v2);
  operator delete(v7);
}

uint64_t sub_20C1B4E68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v18)(_QWORD *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = a1[6];
  v8 = a1 + 6;
  if (!v9)
    return 0;
  v13 = v8 - 1;
  v14 = sub_20BEB47BC(v8);
  v15 = *v13;
  v16 = !*(_BYTE *)(v14 + 14) || v15 == 0;
  if (v16
    || (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 7)) & 1) != 0)
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    v25 = v15;
    v21 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
    v22 = sub_20C1B520C(v13) + 8;
    if (v21)
      v23 = a6;
    else
      v23 = MEMORY[0x24BEDB7C8];
    v24 = v21;
    v15 = v25;
  }
  v18 = (void (*)(_QWORD *, uint64_t))a1[11];
  v19 = a1[12];
  v20 = (_QWORD *)(v15 + (v19 >> 1));
  if ((v19 & 1) != 0)
    v18 = *(void (**)(_QWORD *, uint64_t))(*v20 + v18);
  v18(v20, a2);
  if (*a7 != a7[1])
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery((uint64_t)a1, a7);
  return 1;
}

uint64_t sub_20C1B4F80(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;
  _QWORD v13[4];
  char v14;
  int v15;

  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v13);
  if (v13[0] == v3)
  {
    v13[0] = "tf/notice.h";
    v13[1] = "GetNoticeType";
    v13[2] = 563;
    v13[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::Sdf"
             "SchemaBase>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__aapl__pxrReserved__::SdfSch"
             "emaBase::*)(const pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins &), pxrInternal__aapl__p"
             "xrReserved__::PlugNotice::DidRegisterPlugins>>::GetNoticeType() const [Derived = pxrInternal__aapl__pxrRese"
             "rved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::"
             "SdfSchemaBase>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__aapl__pxrReserved__::Sdf"
             "SchemaBase::*)(const pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins &), pxrInternal__aapl"
             "__pxrReserved__::PlugNotice::DidRegisterPlugins>]";
    v14 = 0;
    v15 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10PlugNotice18DidRegisterPluginsE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v9);
    v4 = std::string::insert(&v9, 0, "notice type ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v10, " undefined in the TfType system");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)v13, (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_20C1B509C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B50E8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *v9;
  char IsInvalid;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  result = pxrInternal__aapl__pxrReserved__::TfType::IsA(a2, v6, v7);
  if ((_DWORD)result)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
    IsInvalid = pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(v9);
    result = 0;
    if (a3)
    {
      if ((IsInvalid & 1) == 0)
        return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v9) == a3;
    }
  }
  return result;
}

uint64_t sub_20C1B515C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
  if (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL(a1 + 56))
    return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v1);
  else
    return 0;
}

void *sub_20C1B5198(uint64_t a1)
{
  void *v2;

  v2 = operator new(0x68uLL);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  sub_20C1B4CF8((uint64_t)v2, (_QWORD *)(a1 + 40), (_OWORD *)(a1 + 88), a1 + 56);
  return v2;
}

void sub_20C1B51F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B520C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::SdfSchemaBase>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReser"
            "ved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CABE832 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

_QWORD *sub_20C1B52B0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C1B5514(a1, v6, a3, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1B56C8((uint64_t)v21, 0);
  return v10;
}

void sub_20C1B54FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1B56C8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B5514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x78uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C1B5588((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C1B5570(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1B56C8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B5588(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = a2[1];
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF4C6D0((_QWORD *)(a1 + 24), a2 + 3);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_20C1B25E4((uint64_t *)(a1 + 40), (uint64_t *)a2[5], (uint64_t *)a2[6], 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 3));
  v10 = *((_OWORD *)a2 + 4);
  v11 = *((_OWORD *)a2 + 5);
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  return a1;
}

void sub_20C1B566C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;

  sub_20BF4C2D8(v2);
  v4 = v1[2];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((*v1 & 7) != 0)
  {
    v7 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  _Unwind_Resume(a1);
}

void sub_20C1B56C8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C1AE8F0((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C1B570C(_QWORD *a1)
{
  if ((sub_20C01C0A4(a1) & 1) == 0)
    sub_20C1B5788((uint64_t)a1);
  if (a1[4] != a1[8])
    sub_20C1B5958((uint64_t)a1);
  return 1;
}

void sub_20C1B577C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C1B5788(uint64_t a1)
{
  sub_20C1B57DC(a1);
}

void sub_20C1B5798()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C1B57C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20C1B57DC(uint64_t a1)
{
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  __int128 v6;
  std::string::size_type v7;

  exception = __cxa_allocate_exception(0x28uLL);
  sub_20C1B58C8(&v5);
  v3 = std::string::insert(&v5, 0, "parse error matching ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7 = v3->__r_.__value_.__r.__words[2];
  v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C1B5868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C1B58C8(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABE876 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABE876 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C1B5944(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C1B5958(uint64_t a1)
{
  sub_20C1B59AC(a1);
}

void sub_20C1B5968()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C1B5998(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20C1B59AC(uint64_t a1)
{
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  __int128 v6;
  std::string::size_type v7;

  exception = __cxa_allocate_exception(0x28uLL);
  sub_20C1B5A98(&v5);
  v3 = std::string::insert(&v5, 0, "parse error matching ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7 = v3->__r_.__value_.__r.__words[2];
  v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C1B5A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C1B5A98(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CABE8B8 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CABE8B8 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C1B5B14(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B5B28(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_20BDEEBA4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_20BE10B80(a1, v3);
  sub_20BE78EA4((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_20C1B5B84()
{
}

unsigned int **pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v6;

  v3 = *a2;
  v6 = v3;
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v3 = v6;
  }
  v6 = *a1;
  *a1 = v3;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t *Layer;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;

  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(Layer);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer@<X0>(uint64_t **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  result = *this;
  if (result)
  {
    result = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer((pxrInternal__aapl__pxrReserved__::Sdf_Identity *)result);
    v4 = result[1];
    *a2 = *result;
    a2[1] = v4;
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfSpec *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)this;
  v3 = a2 + 1;
  if (*(_QWORD *)this)
  {
    sub_20BFD6E54(a2, (_DWORD *)(v2 + 4));
    return sub_20BFD6EA4(v3, (_DWORD *)(v2 + 8));
  }
  else
  {
    *(_QWORD *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v1;
  uint64_t *Layer;
  int v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  BOOL v5;

  v1 = *this;
  if (*this
    && (Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this), Layer[1])
    && ((v3 = *(unsigned __int8 *)(sub_20BEB47BC(Layer + 1) + 14),
         v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)*Layer,
         v3)
      ? (v5 = v4 == 0)
      : (v5 = 1),
        !v5))
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v4, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)v1 + 4));
  }
  else
  {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v1;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  uint64_t *Layer;
  uint64_t (*v5)(uint64_t *);
  char v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;

  v1 = *this;
  if (!*this)
    return 1;
  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)v1 + 4);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v1 + 1))
    return 1;
  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
  v5 = sub_20BFD2F78(Layer);
  if (!(v6 & 1 | (unint64_t)v5))
    return 1;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(Layer);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v7, v3) ^ 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v1;
  uint64_t *Layer;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *this;
  if (!v1)
    return 0;
  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v1);
  v3 = Layer[1];
  v13 = *Layer;
  v14 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v13);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = v14;
  if (v14)
  {
    v9 = (unsigned int *)(v14 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return v7;
}

void sub_20C1B5E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v3;
  uint64_t *Layer;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;

  v3 = *this;
  if (*this)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
    v5 = Layer[1];
    v12 = *Layer;
    v13 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_20BFCF650(&v12);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v8, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)v3 + 4), a2);
    this = v13;
    if (v13)
    {
      v9 = (unsigned int *)(v13 + 1);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        return (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*((uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*this
                                                                   + 1))(this);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_20C1B5EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfSpec::_HasField(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t (***a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *result;
  uint64_t *Layer;
  _QWORD *v8;

  result = *a1;
  if (result)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(result);
    v8 = (_QWORD *)sub_20BFCF650(Layer);
    return (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v8, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*a1 + 4), a2, a3);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *result;
  uint64_t *Layer;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;

  result = *this;
  if (result)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(result);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(Layer);
    return (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*this + 4), a2, 0);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **pxrInternal__aapl__pxrReserved__::SdfSpec::GetField@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;
  uint64_t *Layer;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;

  v4 = *this;
  if (*this)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(Layer);
    return (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v7, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)v4 + 4), a2, a3);
  }
  else
  {
    *((_QWORD *)a3 + 1) = 0;
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v3;
  uint64_t *Layer;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;

  v3 = *this;
  if (*this)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(Layer);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v8, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*this + 4), a2, a3);
  }
  return v3 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v2;
  uint64_t *Layer;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;

  v2 = *this;
  if (*this)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(Layer);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*this + 4), a2);
  }
  return v2 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetMetaDataInfoKeys@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Schema;
  unsigned int SpecType;

  Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields(Schema, SpecType, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfSpec::GetMetaDataDisplayGroup@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t Schema;
  _QWORD *result;

  Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (*(_BYTE *)(Schema + 72 * result + 120))
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFieldDisplayGroup((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(Schema+ 72 * result+ 56), a2, a3);
  *a3 = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::ListInfoKeys(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  unsigned int SpecType;
  uint64_t v6;
  char *v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  uint64_t v10;
  char *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  char *v20;
  __int128 i;
  _OWORD v22[2];

  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (*((_BYTE *)Schema + 72 * SpecType + 120))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetFields((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)Schema + 72 * SpecType + 56), v22);
    for (i = v22[0]; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFEF824(&i))
    {
      v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFEF7A8((uint64_t *)&i, v6, v7);
      FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, v8);
      if (!FieldDefinition
        || (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::HoldsChildren(FieldDefinition) & 1) == 0)
      {
        v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFEF7A8((uint64_t *)&i, v10, v11);
        if (pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, v12))
        {
          v15 = (uint64_t *)sub_20BFEF7A8((uint64_t *)&i, v13, v14);
          v16 = *(uint64_t **)(a2 + 8);
          if ((unint64_t)v16 >= *(_QWORD *)(a2 + 16))
          {
            v20 = sub_20BFCA068((char **)a2, v15);
          }
          else
          {
            v17 = *v15;
            *v16 = *v15;
            if ((v17 & 7) != 0)
            {
              v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 2, v18));
              if ((v19 & 1) == 0)
                *v16 &= 0xFFFFFFFFFFFFFFF8;
            }
            v20 = (char *)(v16 + 1);
          }
          *(_QWORD *)(a2 + 8) = v20;
        }
      }
    }
    *(_QWORD *)&i = v22;
    sub_20BEEB2B8((void ***)&i);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

void sub_20C1B62B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  unsigned int SpecType;
  uint64_t result;
  _QWORD *FallbackValue;
  const std::type_info *v11;
  char *v12;
  unint64_t v13;
  const char *v14;
  void **v15;
  const char *v16;
  const std::type_info *v17;
  char *v18;
  int v19;
  void **v20;
  uint64_t *String;
  void **v22;
  const char *v23;
  int v24;
  int v25;
  void *__p[2];
  char v27;
  void *v28;
  char v29;
  void *v30[2];
  char v31;
  _QWORD v32[4];
  char v33;
  _QWORD v34[2];
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  result = sub_20C1B65C4(a2, SpecType, (uint64_t)Schema, FieldDefinition);
  if ((_DWORD)result)
  {
    FallbackValue = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
    sub_20BF4C6D0(v35, FallbackValue);
    if (v35[1])
      pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf(a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v35, v34);
    else
      sub_20BF4C6D0(v34, a3);
    if (v34[1])
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(this, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v34);
    }
    else
    {
      v32[0] = "sdf/spec.cpp";
      v32[1] = "SetInfo";
      v32[2] = 268;
      v32[3] = "void pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(const TfToken &, const VtValue &)";
      v33 = 0;
      v13 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0)
          v14 = *(const char **)v14;
      }
      else
      {
        v14 = "";
      }
      v15 = v30;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v35, v11, v12, (uint64_t)v30);
      if (v31 < 0)
        v15 = (void **)v30[0];
      v16 = (const char *)&v28;
      sub_20BF834B0((uint64_t)a3);
      if (v29 < 0)
        v16 = (const char *)v28;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v17, v18, (uint64_t)__p);
      v19 = v27;
      v20 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v24);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
      v22 = __p;
      if (v19 < 0)
        v22 = v20;
      if (*((char *)String + 23) >= 0)
        v23 = (const char *)String;
      else
        v23 = (const char *)*String;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set field '%s' of type '%s' to provided value '%s' because the value is an incompatible type '%s', on spec <%s>", v14, (const char *)v15, v16, (const char *)v22, v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
      sub_20BFD265C(&v24);
      if (v27 < 0)
        operator delete(__p[0]);
      if (v29 < 0)
        operator delete(v28);
      if (v31 < 0)
        operator delete(v30[0]);
    }
    sub_20BF4C2D8((uint64_t)v34);
    return sub_20BF4C2D8((uint64_t)v35);
  }
  return result;
}

void sub_20C1B6534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1B65C4(_QWORD *a1, unsigned int a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  _QWORD *Name;
  unint64_t v10;
  const char *v11;
  void **v12;
  void *__p[2];
  char v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  if (this)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsReadOnly(this))
    {
      v15 = "sdf/spec.cpp";
      v16 = "_CanEditInfoOnSpec";
      v17 = 229;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::_CanEditInfoOnSpec(const TfToken &, SdfSpecType, const SdfSchemaBase "
            "&, const SdfSchema::FieldDefinition *, const char *)";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s value for read-only field '%s'");
    }
    else
    {
      Name = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetName(this);
      if ((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(a3, Name, a2) & 1) != 0)
        return 1;
      v15 = "sdf/spec.cpp";
      v16 = "_CanEditInfoOnSpec";
      v17 = 236;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::_CanEditInfoOnSpec(const TfToken &, SdfSpecType, const SdfSchemaBase "
            "&, const SdfSchema::FieldDefinition *, const char *)";
      v19 = 0;
      v10 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
      {
        v11 = (const char *)(v10 + 16);
        if (*(char *)(v10 + 39) < 0)
          v11 = *(const char **)v11;
      }
      else
      {
        v11 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, a2, (uint64_t)__p);
      if (v14 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Field '%s' is not valid for spec type %s", v11, (const char *)v12);
      if (v14 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v15 = "sdf/spec.cpp";
    v16 = "_CanEditInfoOnSpec";
    v17 = 223;
    v18 = "BOOL pxrInternal__aapl__pxrReserved__::_CanEditInfoOnSpec(const TfToken &, SdfSpecType, const SdfSchemaBase &,"
          " const SdfSchema::FieldDefinition *, const char *)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s value for unknown field '%s'");
  }
  return 0;
}

void sub_20C1B67AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfoDictionaryValue(unsigned int **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  unint64_t v12;
  uint64_t *EmptyString;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int *v16;
  uint64_t **v17;
  unsigned int *v18;
  std::type_info **v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_20C1B697C(this, &v16);
  sub_20C18D458(&v18, &v16, (uint64_t *)a2);
  sub_20C1B69E4(&v18, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17);
  v8 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v9 = (unint64_t *)(v19 + 1);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
  v12 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (*((_QWORD *)a4 + 1))
  {
    if (v12)
      EmptyString = (uint64_t *)(v12 + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
    v15 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17, (__int128 *)EmptyString);
    sub_20BF4A9BC(v15, a4);
  }
  else
  {
    if (v12)
      v14 = (uint64_t *)(v12 + 16);
    else
      v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
    pxrInternal__aapl__pxrReserved__::VtDictionary::erase(&v17, (const void **)v14);
  }
  v19 = &off_24C51D8C8;
  sub_20BF4D058(&v18, (const void ****)&v17);
  pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  sub_20BF4C2D8((uint64_t)&v18);
  sub_20BF49F14(&v17, 0);
}

void sub_20C1B6928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD **v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD **);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C1B697C(unsigned int **a1@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  if (!a1)
  {
    v6 = 0;
    goto LABEL_8;
  }
  v2 = *a1;
  v6 = v2;
  if (!v2)
  {
LABEL_8:
    *a2 = 0;
    goto LABEL_9;
  }
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = v6;
  *a2 = v6;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
LABEL_9:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

uint64_t sub_20C1B69E4@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v5;

  result = sub_20C1B731C(a1);
  if ((_DWORD)result)
  {
    v5 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
    return pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v5);
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfSpec::ClearInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *v6;
  unsigned int SpecType;
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock *result;
  _BOOL8 v9;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v13;
  _BYTE v14[8];

  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  if (!FieldDefinition
    || (v6 = FieldDefinition,
        SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this),
        result = (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)sub_20C1B65C4(a2, SpecType, (uint64_t)Schema, v6),
        (_DWORD)result))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v14);
    v9 = pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, a2);
    Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)v9);
    v11 = *this;
    v13 = v11;
    if (v11)
    {
      do
        v12 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v12 + 1, (unsigned int *)v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v13);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v14);
  }
  return result;
}

void sub_20C1B6AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetTypeForInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  const std::type_info *v5;
  char *v6;

  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, a2);
  return pxrInternal__aapl__pxrReserved__::VtValue::GetType(Fallback, v5, v6);
}

void *pxrInternal__aapl__pxrReserved__::SdfSpec::GetFallbackForInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned __int8 v4;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *v7;
  uint64_t SpecType;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  void **v14;
  void *__p[2];
  char v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  v4 = atomic_load((unsigned __int8 *)&qword_254987E50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254987E50))
  {
    qword_254987E48 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1A87F4, &unk_254987E40, &dword_20BDBC000);
    __cxa_guard_release(&qword_254987E50);
  }
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  if (FieldDefinition)
  {
    v7 = FieldDefinition;
    SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
    if (*((_BYTE *)Schema + 72 * SpecType + 120)
      && (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)Schema + 72 * SpecType + 56), a2) & 1) != 0)
    {
      return (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(v7);
    }
    v17 = "sdf/spec.cpp";
    v18 = "GetFallbackForInfo";
    v19 = 369;
    v20 = "const VtValue &pxrInternal__aapl__pxrReserved__::SdfSpec::GetFallbackForInfo(const TfToken &) const";
    v21 = 0;
    v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, SpecType, (uint64_t)__p);
    if (v16 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-metadata key '%s' for type %s", v11, (const char *)v14);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v17 = "sdf/spec.cpp";
    v18 = "GetFallbackForInfo";
    v19 = 360;
    v20 = "const VtValue &pxrInternal__aapl__pxrReserved__::SdfSpec::GetFallbackForInfo(const TfToken &) const";
    v21 = 0;
    v12 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0)
        v13 = *(const char **)v13;
    }
    else
    {
      v13 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown field '%s'", v13);
  }
  return &unk_254987E40;
}

void sub_20C1B6D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::WriteToStream(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v6;
  uint64_t *Layer;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t *FileFormat;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (v6)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v6);
    v8 = Layer[1];
    v23 = *Layer;
    v24 = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v23);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v11);
  v13 = sub_20BFCF6F4(FileFormat);
  v14 = (unsigned int *)*a1;
  v22 = v14;
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = (*(uint64_t (**)(uint64_t, unsigned int **, uint64_t, uint64_t))(*(_QWORD *)v13 + 80))(v13, &v22, a2, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
  v17 = v24;
  if (v24)
  {
    v18 = (unsigned int *)(v24 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return v16;
}

void sub_20C1B6E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, int a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v3;
  uint64_t *Layer;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v9;
  _BOOL8 IsInert;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;

  v3 = *this;
  if (!v3)
    return 0;
  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v3);
  v6 = Layer[1];
  v16 = *Layer;
  v17 = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_20BFCF650(&v16);
  IsInert = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*this + 4), a2, 0);
  v11 = v17;
  if (v17)
  {
    v12 = (unsigned int *)(v17 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return IsInert;
}

void sub_20C1B6F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *v8;
  char **FallbackValue;
  unint64_t v10;
  const char *v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  if (FieldDefinition)
  {
    v8 = FieldDefinition;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
    if (v13)
      FallbackValue = &v12;
    else
      FallbackValue = (char **)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(v8);
    sub_20BF4C6D0(a3, FallbackValue);
    sub_20BF4C2D8((uint64_t)&v12);
  }
  else
  {
    v12 = "sdf/spec.cpp";
    v13 = "GetInfo";
    v14 = 394;
    v15 = "VtValue pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(const TfToken &) const";
    v16 = 0;
    v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid info key: %s", v11);
    a3[1] = 0;
  }
}

void sub_20C1B7068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::operator<(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::_MoveSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v5;
  uint64_t *Layer;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;

  v5 = *this;
  if (v5)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v5);
    v7 = Layer[1];
    v17 = *Layer;
    v18 = v7;
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v17);
  v11 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v10, a2, a3);
  v12 = v18;
  if (v18)
  {
    v13 = (unsigned int *)(v18 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return v11;
}

void sub_20C1B7150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::_DeleteSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v3;
  uint64_t *Layer;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v3 = *this;
  if (v3)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v3);
    v5 = Layer[1];
    v15 = *Layer;
    v16 = v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v15);
  v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v8, a2);
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return v9;
}

void sub_20C1B7204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C1B721C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527AF0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527AF0, (char *)8, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1B72D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B731C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  v4[2] = 772;
  v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ate() const [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal__aapl__pxrReserved"
          "__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing an invalid map proxy");
  return 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CABE918 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = operator new(0x90uLL);
      sub_20C1B8108((unint64_t)v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (void *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeIn"
                "fo>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeIn"
                "fo>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_16Sdf_SpecTypeInfoEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20C1B75A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo"
            ">::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::DeleteInstance()
{
  uint64_t i;
  unint64_t v1;
  void *v2;
  void *v3;

  for (i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
        i;
        i = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
    if (v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance))
      {
        v2 = *(void **)(i + 128);
        *(_QWORD *)(i + 128) = 0;
        if (v2)
          operator delete[](v2);
        sub_20BEC57F0(i + 80);
        sub_20BEC57F0(i + 40);
        v3 = (void *)sub_20BEB3FA4(i);
        operator delete(v3);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::SdfSpecTypeRegistration::_RegisterSpecType(pxrInternal__aapl__pxrReserved__::TfType *a1, const std::type_info *a2, pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unsigned int v4;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  const std::type_info *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  const char *p_p;
  const char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t TypeName;
  int v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void *__p;
  int v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  const char *v61;
  char v62;

  v4 = a2;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  v7 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(this, a2, (char *)this);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v59);
  if (*(_QWORD *)v7 == (_QWORD)v59)
  {
    *(_QWORD *)&v59 = "sdf/specType.cpp";
    *((_QWORD *)&v59 + 1) = "_RegisterSpecType";
    v60 = 138;
    v61 = "static void pxrInternal__aapl__pxrReserved__::SdfSpecTypeRegistration::_RegisterSpecType(const std::type_info "
          "&, SdfSpecType, const std::type_info &)";
    v62 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
    if (v58 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Schema type %s must be registered with the TfType system.", p_p);
LABEL_24:
    if (v58 < 0)
      operator delete(__p);
    return;
  }
  v10 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(a1, v8, v9);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v59);
  if (*v10 == (_QWORD)v59)
  {
    *(_QWORD *)&v59 = "sdf/specType.cpp";
    *((_QWORD *)&v59 + 1) = "_RegisterSpecType";
    v60 = 146;
    v61 = "static void pxrInternal__aapl__pxrReserved__::SdfSpecTypeRegistration::_RegisterSpecType(const std::type_info "
          "&, SdfSpecType, const std::type_info &)";
    v62 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((_QWORD *)a1 + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
    if (v58 >= 0)
      v26 = (const char *)&__p;
    else
      v26 = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec type %s must be registered with the TfType system.", v26);
    goto LABEL_24;
  }
  __p = (void *)(Instance + 128);
  v57 = -1;
  sub_20BECED08((uint64_t)&__p, v11, v12);
  v59 = (unint64_t)*v10;
  v15 = sub_20BED9934(Instance, &v59, &v59) + 3;
  v59 = *(unint64_t *)(Instance + 16);
  v16 = v4;
  while ((_QWORD)v59 != *((_QWORD *)&v59 + 1))
  {
    if (v4
      && (v17 = sub_20C1B7BE4(&v59, v13, v14),
          pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)v10, *(_QWORD *)(*v17 + 16), v18)))
    {
      v19 = (_QWORD *)(*sub_20C1B7BE4(&v59, v13, v14) + 24);
      v20 = 1 << v4;
    }
    else
    {
      v21 = sub_20C1B7BE4(&v59, v13, v14);
      if (!pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(*v21 + 16), *v10, v22))
        goto LABEL_13;
      v20 = *(_QWORD *)(*sub_20C1B7BE4(&v59, v23, v24) + 24);
      v19 = v15;
    }
    *v19 |= v20;
LABEL_13:
    sub_20C1B7C5C((uint64_t)&v59);
  }
  if (v4 == 6)
  {
    *v15 |= 0x400uLL;
    goto LABEL_27;
  }
  if (v4)
  {
LABEL_27:
    *(_QWORD *)&v59 = v7;
    v27 = sub_20C1B8244(Instance + 40, v7, (uint64_t)&unk_20CAC184C, (_QWORD **)&v59);
    v28 = v27[3];
    v29 = v27 + 3;
    if (v28 == v27[4])
    {
      sub_20C1B7CD8((uint64_t)(v27 + 3), 0xCuLL);
      v28 = *v29;
    }
    *(_QWORD *)(v28 + 8 * v16) = *v10;
  }
  *(_QWORD *)&v59 = v10;
  v30 = sub_20C1B8244(Instance + 80, v10, (uint64_t)&unk_20CAC184C, (_QWORD **)&v59);
  v33 = v30;
  v35 = (void **)(v30 + 3);
  v34 = (_QWORD *)v30[3];
  v36 = (_QWORD *)v30[4];
  if (v34 == v36)
  {
    v37 = (_QWORD *)v30[3];
  }
  else
  {
    v37 = (_QWORD *)v30[3];
    while (*v37 != *(_QWORD *)v7)
    {
      if (++v37 == v36)
      {
        v37 = (_QWORD *)v30[4];
        break;
      }
    }
  }
  if (v37 == v36)
  {
    v44 = (uint64_t)(v30 + 5);
    v45 = v33[5];
    if ((unint64_t)v36 >= v45)
    {
      v47 = v36 - v34;
      if ((unint64_t)(v47 + 1) >> 61)
        sub_20BDDF694();
      v48 = v45 - (_QWORD)v34;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v49;
      if (v31)
        v50 = (char *)sub_20BDDF6A8(v44, v31);
      else
        v50 = 0;
      v51 = &v50[8 * v47];
      v52 = &v50[8 * v31];
      *(_QWORD *)v51 = *(_QWORD *)v7;
      v46 = v51 + 8;
      v54 = (char *)v33[3];
      v53 = (char *)v33[4];
      if (v53 != v54)
      {
        do
        {
          v55 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *((_QWORD *)v51 - 1) = v55;
          v51 -= 8;
        }
        while (v53 != v54);
        v53 = (char *)*v35;
      }
      v33[3] = v51;
      v33[4] = v46;
      v33[5] = v52;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v36 = *(_QWORD *)v7;
      v46 = v36 + 1;
    }
    v33[4] = v46;
  }
  else
  {
    *(_QWORD *)&v59 = "sdf/specType.cpp";
    *((_QWORD *)&v59 + 1) = "_RegisterSpecType";
    v60 = 193;
    v61 = "static void pxrInternal__aapl__pxrReserved__::SdfSpecTypeRegistration::_RegisterSpecType(const std::type_info "
          "&, SdfSpecType, const std::type_info &)";
    v62 = 0;
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v10);
    v39 = *(char *)(TypeName + 23);
    v40 = *(const char **)TypeName;
    v41 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (v39 >= 0)
      v42 = (const char *)TypeName;
    else
      v42 = v40;
    if (*(char *)(v41 + 23) >= 0)
      v43 = (const char *)v41;
    else
      v43 = *(const char **)v41;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec type %s already registered for schema type %s", v42, v43);
  }
  sub_20BECC0B0((uint64_t)&__p, v31, v32);
}

void sub_20C1B7B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C1B7BE4(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashMap<pxrIntern"
            "al__aapl__pxrReserved__::TfType, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T "
            "= pxrInternal__aapl__pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::TfType, unsigned long, pxrIn"
            "ternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C1B7C5C(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hMap<pxrInternal__aapl__pxrReserved__::TfType, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>>::op"
            "erator++() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::TfType, unsign"
            "ed long, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

void sub_20C1B7CD8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_20C1B84A8((void **)a1, a2 - v2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_SpecType::Cast(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfSpec *a2, const std::type_info *a3)
{
  _QWORD *v5;
  _QWORD *Schema;
  const std::type_info *v7;
  char *v8;
  char **v9;
  unsigned int SpecType;
  const std::type_info *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  uint64_t v25;

  v5 = (_QWORD *)sub_20C1B7E70();
  Schema = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  v9 = (char **)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*Schema - 8), v7, v8);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v20);
  if (*v9 != v20
    || (v20 = "sdf/specType.cpp",
        v21 = "Cast",
        v22 = 215,
        v23 = "static TfType pxrInternal__aapl__pxrReserved__::Sdf_SpecType::Cast(const SdfSpec &, const std::type_info &)",
        v24 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v20, "!schemaType.IsUnknown()", 0) & 1) != 0))
  {
    SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
    v13 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(a2, v11, v12);
    v20 = (char *)(v5 + 16);
    LODWORD(v21) = -1;
    sub_20BECED94((uint64_t)&v20, v14, v15);
    if (sub_20C1B7EC4(v5, SpecType, v13))
    {
      v18 = sub_20BEDA270(v5 + 5, v9)[3];
      if (SpecType == 10 && *v13 == *(_QWORD *)(v18 + 48))
        v25 = *v13;
      else
        v25 = *(_QWORD *)(v18 + 8 * SpecType);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
    }
    sub_20BECC0B0((uint64_t)&v20, v16, v17);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
  }
  return v25;
}

void sub_20C1B7E50(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

unint64_t sub_20C1B7E70()
{
  unint64_t Instance;
  unsigned __int8 v1;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  while (1)
  {
    v1 = atomic_load((unsigned __int8 *)(Instance + 120));
    if ((v1 & 1) != 0)
      break;
    sched_yield();
  }
  return Instance;
}

BOOL sub_20C1B7EC4(_QWORD *a1, char a2, _QWORD *a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v10);
  if (*a3 == v10)
  {
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v9);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v10);
    return v9 != v10;
  }
  else
  {
    v6 = sub_20BEDA270(a1, a3);
    if (v6)
      v7 = v6[3];
    else
      v7 = 0;
    return (v7 >> a2) & 1;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(char a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  _QWORD *v4;
  const std::type_info *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _BOOL8 v9;
  uint64_t v10;
  char *v11;
  _QWORD *v13;
  int v14;
  uint64_t v15;

  v4 = (_QWORD *)sub_20C1B7E70();
  v15 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(a2, v5, v6);
  v13 = v4 + 16;
  v14 = -1;
  sub_20BECED94((uint64_t)&v13, v7, v8);
  v9 = sub_20C1B7EC4(v4, a1, &v15);
  sub_20BECC0B0((uint64_t)&v13, v10, v11);
  return v9;
}

void sub_20C1B7FD8(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BECC0B0((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfSpec *a2, const std::type_info *a3)
{
  _QWORD *v5;
  char SpecType;
  const std::type_info *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *Schema;
  const std::type_info *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t IsA;
  uint64_t v23;
  int v24;
  _QWORD *v26;
  int v27;

  v5 = (_QWORD *)sub_20C1B7E70();
  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  v9 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(a2, v7, v8);
  Schema = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  v13 = (char *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*Schema - 8), v11, v12);
  v26 = v5 + 16;
  v27 = -1;
  sub_20BECED94((uint64_t)&v26, v14, v15);
  if (sub_20C1B7EC4(v5, SpecType, v9)
    && (v18 = sub_20BEDA270(v5 + 10, v9)) != 0
    && (v19 = v18[3], v20 = v18[4], v19 != v20))
  {
    v21 = v19 + 8;
    do
    {
      IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(v13, *(_QWORD *)(v21 - 8), v17);
      v23 = IsA;
      if (v21 == v20)
        v24 = 1;
      else
        v24 = IsA;
      v21 += 8;
    }
    while (v24 != 1);
  }
  else
  {
    v23 = 0;
  }
  sub_20BECC0B0((uint64_t)&v26, v16, v17);
  return v23;
}

void sub_20C1B80E4(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

unint64_t sub_20C1B8108(unint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfBigRWMutex *v2;
  char *v3;
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  _QWORD v7[4];
  char v8;
  int v9;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_20BDEC6E0(a1, 0);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_BYTE *)(a1 + 120) = 0;
  v2 = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::TfBigRWMutex((pxrInternal__aapl__pxrReserved__::TfBigRWMutex *)(a1 + 128));
  do
    v4 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  while (__stlxr(a1, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance));
  if (v4)
  {
    v7[0] = "tf/instantiateSingleton.h";
    v7[1] = "SetInstanceConstructed";
    v7[2] = 56;
    v7[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo"
            ">::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v2);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_24C52A930);
  atomic_store(1u, (unsigned __int8 *)(a1 + 120));
  return a1;
}

void sub_20C1B8200(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BEC57F0(v3);
  sub_20BEC57F0(v2);
  sub_20BEB3FA4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1B8244(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C1B848C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BEC604C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C1B84A8(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::TfType *v15;
  pxrInternal__aapl__pxrReserved__::TfType *v16;
  char *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::TfType *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(pxrInternal__aapl__pxrReserved__::TfType **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 3)
  {
    if (a2)
    {
      v14 = 8 * a2;
      v15 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 + 8 * a2);
      do
      {
        pxrInternal__aapl__pxrReserved__::TfType::TfType(v7);
        v7 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 + 8);
        v14 -= 8;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (pxrInternal__aapl__pxrReserved__::TfType *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      sub_20BDDF694();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_20BDDF6A8(v4, v12);
    else
      v13 = 0;
    v16 = (pxrInternal__aapl__pxrReserved__::TfType *)&v13[8 * v10];
    v17 = &v13[8 * v12];
    v18 = 8 * a2;
    v19 = v16;
    v20 = (char *)v16 + 8 * a2;
    do
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)pxrInternal__aapl__pxrReserved__::TfType::TfType(v19)
                                                       + 8);
      v18 -= 8;
    }
    while (v18);
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v16 - 1) = v23;
        v16 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v16 - 8);
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v20;
    a1[2] = v17;
    if (v21)
      operator delete(v21);
  }
}

void sub_20C1B85D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType::~SdfTextFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  v10 = (void **)((char *)this + 24);
  sub_20BEEB2B8(&v10);
  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType::SdfTextFileFormatTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "sdf", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.4.32", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "sdf", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)this;
}

void sub_20C1B8858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C1B8910()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_TEXTFILE_SIZE_WARNING_MB))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_TEXTFILE_SIZE_WARNING_MB);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_TEXTFILE_SIZE_WARNING_MB);
  }
}

uint64_t sub_20C1B8954()
{
  uint64_t *v0;

  v0 = sub_20C1B9F94();
  return sub_20C1BA0B4(v0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::SdfTextFileFormat(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *this)
{
  uint64_t *v2;
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *v3;
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *v5;
  uint64_t *EmptyString;
  uint64_t result;

  v2 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if (!v2)
    v2 = (uint64_t *)sub_20C103260(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if (!v3)
    v3 = sub_20C103260(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if (!v4)
    v4 = sub_20C103260(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if (!v5)
    v5 = sub_20C103260(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if ((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  result = pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)this, v2, (uint64_t *)v3 + 1, (uint64_t *)v4 + 2, (uint64_t)EmptyString);
  *(_QWORD *)this = off_24C52A950;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::SdfTextFileFormat(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *v7;
  uint64_t *EmptyString;
  uint64_t result;

  v5 = (uint64_t *)a3;
  v7 = this;
  if (!*(_QWORD *)a3)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    if (!this)
      this = sub_20C103260(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    v5 = (uint64_t *)((char *)this + 8);
  }
  if (!*(_QWORD *)a4)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    if (!this)
      this = sub_20C103260(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    a4 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *)((char *)this + 16);
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  result = pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)v7, (uint64_t *)a2, v5, (uint64_t *)a4, (uint64_t)EmptyString);
  *(_QWORD *)v7 = off_24C52A950;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::~SdfTextFileFormat(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(this);
  operator delete(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::CanRead(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2)
{
  uint64_t *Resolver;
  const char *FileCookie;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v12 = *(_QWORD *)(a2 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (v13)
  {
    FileCookie = (const char *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
    v6 = sub_20C1B8C3C(&v13, FileCookie);
  }
  else
  {
    v6 = 0;
  }
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_20C1B8C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C1B8C3C(_QWORD *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t *Instance;
  _QWORD *v7;
  _QWORD *v8;
  _BOOL8 v9;
  int v11;
  unint64_t v12;
  size_t v13;
  size_t v14;
  void **v15;
  void *__p[2];
  unsigned __int8 v17;
  unint64_t v18;
  char __s[512];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v4 >= 0x200)
    v5 = 512;
  else
    v5 = v4;
  if ((*(uint64_t (**)(_QWORD, char *, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, __s, v5, 0) != v5)
    goto LABEL_11;
  __s[v5] = 0;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = sub_20BEC5244(&v18, 0);
  LOBYTE(__p[0]) = 0;
  v8 = (_QWORD *)sub_20BEB5B80(Instance + 19, __p);
  if (v8 != v7)
  {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v7, v8);
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  sub_20BDDC0E4(__p, __s);
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v11 = (char)v17;
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (unint64_t)__p[1];
  v13 = strlen(a2);
  if (v12 < v13)
  {
    v9 = 0;
    if (((char)v17 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_25:
    operator delete(__p[0]);
    goto LABEL_12;
  }
  v14 = v13;
  if ((v17 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  v9 = strncmp((const char *)v15, a2, v14) == 0;
  if (v11 < 0)
    goto LABEL_25;
LABEL_12:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  return v9;
}

void sub_20C1B8DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_CanReadFromAsset(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, uint64_t a2, _QWORD *a3)
{
  const char *FileCookie;

  FileCookie = (const char *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
  return sub_20C1B8C3C(a3, FileCookie);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::Read(pxrInternal__aapl__pxrReserved__ *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, char a4)
{
  uint64_t *Resolver;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v15 = *(_QWORD *)(a3 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (v16)
    v9 = pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ReadFromAsset(a1, a2, (const std::string *)a3, &v16, a4);
  else
    v9 = 0;
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_20C1B8F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ReadFromAsset(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, const std::string *a3, _QWORD *a4, char a5)
{
  const char *FileCookie;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t FileFormatArguments;
  pxrInternal__aapl__pxrReserved__::TfToken *FormatId;
  const std::string *EmptyString;
  const char *v19;
  unint64_t v20;
  const char *v21;
  _BOOL8 v22;
  pxrInternal__aapl__pxrReserved__::TfToken *VersionString;
  const std::string *v24;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  char v28;
  void *lpsrc;
  const char *v30;
  uint64_t v31;
  const char *v32;
  char v33;

  FileCookie = (const char *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
  if (sub_20C1B8C3C(a4, FileCookie))
  {
    v11 = (unsigned int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_TEXTFILE_SIZE_WARNING_MB);
    if (!v11)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_TEXTFILE_SIZE_WARNING_MB);
      v11 = (unsigned int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_TEXTFILE_SIZE_WARNING_MB);
    }
    v12 = *v11;
    if ((int)v12 >= 1
      && (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 16))(*a4) > (unint64_t)(v12 << 20))
    {
      lpsrc = "sdf/textFileFormat.cpp";
      v30 = "_ReadFromAsset";
      v31 = 194;
      v32 = "BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ReadFromAsset(SdfLayer *, const string &, const s"
            "td::shared_ptr<ArAsset> &, BOOL) const";
      v33 = 0;
      v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 16))(*a4);
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = (uint64_t *)a3;
      else
        v15 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&lpsrc, (pxrInternal__aapl__pxrReserved__ *)"Performance warning: reading %lu MB text-based layer <%s>.", v14, v13 >> 20, v15);
    }
    v28 = 1;
    FileFormatArguments = pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(a2);
    (*(void (**)(void **__return_ptr, pxrInternal__aapl__pxrReserved__::SdfFileFormat *, uint64_t))(*(_QWORD *)a1 + 40))(&lpsrc, a1, FileFormatArguments);
    FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1);
    if ((*(_QWORD *)FormatId & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const std::string *)((*(_QWORD *)FormatId & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(FormatId);
    VersionString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(a1);
    if ((*(_QWORD *)VersionString & 0xFFFFFFFFFFFFFFF8) != 0)
      v24 = (const std::string *)((*(_QWORD *)VersionString & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v24 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(VersionString);
    v25 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)lpsrc;
    if (lpsrc)
    v27 = v25;
    sub_20BF1DD04((uint64_t *)&v27);
    v22 = Sdf_ParseLayer(a3, a4, EmptyString, v24, a5, (uint64_t *)&v27, &v28);
    sub_20C0218E4(&v27);
    if (v22)
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(a2, (uint64_t *)&lpsrc, v28);
    sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&lpsrc);
  }
  else
  {
    lpsrc = "sdf/textFileFormat.cpp";
    v30 = "_ReadFromAsset";
    v31 = 184;
    v32 = "BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ReadFromAsset(SdfLayer *, const string &, const std"
          "::shared_ptr<ArAsset> &, BOOL) const";
    v33 = 0;
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = (const char *)a3;
    else
      v19 = (const char *)a3->__r_.__value_.__r.__words[0];
    v20 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1) & 0xFFFFFFFFFFFFFFF8;
    if (v20)
    {
      v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0)
        v21 = *(const char **)v21;
    }
    else
    {
      v21 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&lpsrc, 3, (pxrInternal__aapl__pxrReserved__ *)"<%s> is not a valid %s layer", v19, v21);
    return 0;
  }
  return v22;
}

void sub_20C1B91B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  v7 = va_arg(va1, _QWORD);
  sub_20C0218E4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToFile(pxrInternal__aapl__pxrReserved__ *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Resolver;
  uint64_t FileCookie;
  pxrInternal__aapl__pxrReserved__::TfToken *VersionString;
  uint64_t *EmptyString;
  const char *v12;
  uint64_t v13;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v19[4];
  char v20;
  void *__p[2];
  uint64_t v22;
  const char *v23;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v22 = *(_QWORD *)(a3 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAssetForWrite((uint64_t)Resolver);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if (!v25)
  {
    __p[0] = "sdf/textFileFormat.cpp";
    __p[1] = "WriteToFile";
    v22 = 352;
    v23 = "virtual BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToFile(const SdfLayer &, const std::str"
          "ing &, const std::string &, const FileFormatArguments &) const";
    v24 = 0;
    if (*(char *)(a3 + 23) >= 0)
      v12 = (const char *)a3;
    else
      v12 = *(const char **)a3;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open %s for write", v12);
    v13 = 0;
    goto LABEL_23;
  }
  sub_20BFDF084((uint64_t)__p, (uint64_t)&v25);
  FileCookie = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
  VersionString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(a1);
  if ((*(_QWORD *)VersionString & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)VersionString & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(VersionString);
  if (!sub_20C1B9414(a2, (pxrInternal__aapl__pxrReserved__::TfToken *)__p, FileCookie, (uint64_t)EmptyString, a4))goto LABEL_21;
  if ((sub_20BFE87E8(__p) & 1) == 0)
  {
    v19[0] = "sdf/textFileFormat.cpp";
    v19[1] = "WriteToFile";
    v19[2] = 362;
    v19[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToFile(const SdfLayer &, const std::"
             "string &, const std::string &, const FileFormatArguments &) const";
    v20 = 0;
    if (*(char *)(a3 + 23) >= 0)
      v14 = (const char *)a3;
    else
      v14 = *(const char **)a3;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not close %s", v14);
LABEL_21:
    v13 = 0;
    goto LABEL_22;
  }
  v13 = 1;
LABEL_22:
  sub_20BFE87A4((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)__p);
LABEL_23:
  v15 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v13;
}

void sub_20C1B93D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  sub_20BFE87A4((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20C1B9414(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v8;
  const char *v9;
  int IsDormant;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  const pxrInternal__aapl__pxrReserved__::TfToken *v13;
  unint64_t Instance;
  std::string::size_type v15;
  unint64_t v16;
  std::string::size_type size;
  unint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::TfToken *v20;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::__shared_weak_count *v36;
  const char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  int v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  unsigned int *v47;
  std::string __p[3];
  uint64_t v49[3];
  void *v50;
  std::__shared_weak_count *v51;
  unsigned __int8 v52;
  std::string __dst;
  pxrInternal__aapl__pxrReserved__::TfToken *v54[3];
  _QWORD v55[6];
  _QWORD v56[13];
  char v57;
  uint64_t v58;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v59[3];

  if (*(char *)(a3 + 23) >= 0)
    v8 = (const char *)a3;
  else
    v8 = *(const char **)a3;
  if (*(char *)(a4 + 23) >= 0)
    v9 = (const char *)a4;
  else
    v9 = *(const char **)a4;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"%s %s\n", v8, v9);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, v59);
  IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v59);
  if ((IsDormant & 1) != 0)
    goto LABEL_93;
  sub_20C1C00F0((uint64_t)v55);
  v45 = IsDormant;
  v11 = sub_20C0B0CA4(v59);
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(v11, v54);
  v12 = v54[0];
  v13 = v54[1];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v15 = Instance + 560;
  if (!*(_BYTE *)(Instance + 624))
    v15 = 0;
  __p[0].__r_.__value_.__r.__words[0] = v15;
  v46 = sub_20C1BA980(v12, v13, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)__p);
  if (*(char *)(a5 + 23) < 0)
  {
    v16 = *(_QWORD *)(a5 + 8);
    if (v16)
    {
      sub_20BDDBFAC(&__dst, *(void **)a5, v16);
      goto LABEL_18;
    }
LABEL_17:
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetComment((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)a1, (uint64_t)&__dst);
    goto LABEL_18;
  }
  if (!*(_BYTE *)(a5 + 23))
    goto LABEL_17;
  __dst = *(std::string *)a5;
LABEL_18:
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(v55, 1, &__dst);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v55, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
  }
  v18 = 126 - 2 * __clz((v46 - v54[0]) >> 3);
  if (v46 == v54[0])
    v19 = 0;
  else
    v19 = v18;
  sub_20C0353A4((uint64_t)v54[0], (uint64_t *)v46, (uint64_t)__p, v19, 1);
  v20 = v54[0];
  if (v54[0] != v46)
  {
    while (1)
    {
      v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v21)
        v21 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v21 + 17) & 0xFFFFFFFFFFFFFFF8))
        break;
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)a1, (uint64_t)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        v35 = __p[0].__r_.__value_.__l.__size_;
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (v35)
        {
LABEL_63:
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v55, 1, (pxrInternal__aapl__pxrReserved__ *)"doc = ");
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)a1, (uint64_t)__p);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(v55, 0, __p);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v55, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
        }
      }
      else if (*((_BYTE *)&__p[0].__r_.__value_.__s + 23))
      {
        goto LABEL_63;
      }
LABEL_66:
      v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v20 + 8);
      if (v20 == v46)
        goto LABEL_70;
    }
    v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v22)
      v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v22 + 45) & 0xFFFFFFFFFFFFFFF8))
    {
      v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23)
        v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 23) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetHasOwnedSubLayers((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)a1))
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v55, 1, (pxrInternal__aapl__pxrReserved__ *)"hasOwnedSubLayers = true\n");
      }
      else
      {
        sub_20C1BA268((pxrInternal__aapl__pxrReserved__::TfToken *)v55, 1, v59, v20);
      }
      goto LABEL_66;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v55, 1, (pxrInternal__aapl__pxrReserved__ *)"subLayers = [\n");
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)__p);
    v24 = sub_20BFD19BC((uint64_t)__p);
    v25 = v24;
    v26 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (!__p[0].__r_.__value_.__l.__size_)
      goto LABEL_43;
    v27 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (v25)
      {
LABEL_44:
        v29 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)&v50);
          if (sub_20C1038CC((uint64_t)&v50))
            v30 = (uint64_t *)&v50;
          else
            v30 = 0;
          sub_20BFD46DC(v30, v29, __p);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteAssetPath(v55, 2, __p);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          v31 = v51;
          if (v51)
          {
            p_shared_owners = (unint64_t *)&v51->__shared_owners_;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          __p[0].__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffset(a1, v29);
          __p[0].__r_.__value_.__l.__size_ = v34;
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteLayerOffset(v55, 0, 0, (double *)__p);
          if (v29 >= v25 - 1)
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v55, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
          else
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v55, 0, (pxrInternal__aapl__pxrReserved__ *)",\n");
          ++v29;
        }
        while (v29 != v25);
      }
    }
    else
    {
LABEL_43:
      if (v24)
        goto LABEL_44;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v55, 1, (pxrInternal__aapl__pxrReserved__ *)"]\n");
    goto LABEL_66;
  }
LABEL_70:
  sub_20BFE87E8(v55);
  std::stringbuf::str();
  v36 = (std::__shared_weak_count *)v52;
  if ((v52 & 0x80u) != 0)
    v36 = v51;
  if (v36)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"(\n");
    v37 = (const char *)&v50;
    if ((v52 & 0x80u) != 0)
      v37 = (const char *)v50;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", v37);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)")\n");
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrimOrder(a1, (uint64_t)__p);
  sub_20BFE5328((uint64_t)__p, v49);
  v38 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (__p[0].__r_.__value_.__l.__size_)
  {
    v39 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v49[1] - v49[0] >= 9uLL)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"reorder rootPrims = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, 0, v49);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(a1, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)__p);
  v41 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)__p);
  if (v41)
  {
    for (i = 0; i != v41; ++i)
    {
      sub_20BFE6B84((uint64_t *)__p, i, &v47);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
      sub_20C1BA6D0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v47, a2, 0);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v47);
    }
  }
  sub_20BFE6A54((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
  sub_20BEEB2B8((void ***)__p);
  if ((char)v52 < 0)
    operator delete(v50);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
  sub_20BEEB2B8((void ***)__p);
  v56[0] = *MEMORY[0x24BEDB7F0];
  v43 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v56 + *(_QWORD *)(v56[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v56[2] = v43;
  v56[3] = MEMORY[0x24BEDB848] + 16;
  if (v57 < 0)
    operator delete((void *)v56[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](&v58);
  sub_20BFE87A4((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v55);
  IsDormant = v45;
LABEL_93:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v59);
  return IsDormant ^ 1u;
}

void sub_20C1B9B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  a37 = &a43;
  sub_20BEEB2B8((void ***)&a37);
  sub_20C1B9EF0((uint64_t)&a46);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v46 - 104));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::ReadFromString(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t a3)
{
  uint64_t FileFormatArguments;
  pxrInternal__aapl__pxrReserved__::TfToken *FormatId;
  const std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *VersionString;
  const std::string *v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  _BOOL8 v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  void *lpsrc;
  char v16;

  v16 = 1;
  FileFormatArguments = pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(this);
  (*(void (**)(void **__return_ptr, pxrInternal__aapl__pxrReserved__::SdfFileFormat *, uint64_t))(*(_QWORD *)a1 + 40))(&lpsrc, a1, FileFormatArguments);
  FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1);
  if ((*(_QWORD *)FormatId & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)FormatId & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(FormatId);
  VersionString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(a1);
  if ((*(_QWORD *)VersionString & 0xFFFFFFFFFFFFFFF8) != 0)
    v10 = (const std::string *)((*(_QWORD *)VersionString & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v10 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(VersionString);
  v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)lpsrc;
  if (lpsrc)
  v14 = v11;
  sub_20BF1DD04((uint64_t *)&v14);
  v12 = Sdf_ParseLayerFromString(a3, EmptyString, v10, (uint64_t *)&v14, &v16);
  sub_20C0218E4(&v14);
  if (v12)
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(this, (uint64_t *)&lpsrc, v16);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&lpsrc);
  return v12;
}

void sub_20C1B9D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  sub_20C0218E4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToString(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t FileCookie;
  pxrInternal__aapl__pxrReserved__::TfToken *VersionString;
  uint64_t *EmptyString;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[6];
  _QWORD v17[13];
  char v18;
  uint64_t v19;

  sub_20C1C00F0((uint64_t)v16);
  FileCookie = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
  VersionString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(a1);
  if ((*(_QWORD *)VersionString & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)VersionString & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(VersionString);
  v11 = sub_20C1B9414(a2, (pxrInternal__aapl__pxrReserved__::TfToken *)v16, FileCookie, (uint64_t)EmptyString, a4);
  if ((v11 & 1) != 0)
  {
    sub_20BFE87E8(v16);
    std::stringbuf::str();
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  v17[0] = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v17[2] = v12;
  v17[3] = MEMORY[0x24BEDB848] + 16;
  if (v18 < 0)
    operator delete((void *)v17[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](&v19);
  sub_20BFE87A4((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v16);
  return v11;
}

void sub_20C1B9ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C1B9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1B9EF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 72) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 64) = v4;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](a1 + 176);
  sub_20BFE87A4((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToStream(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_WriteToStream(a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ShouldSkipAnonymousReload(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *this)
{
  return 0;
}

uint64_t *sub_20C1B9F94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1BA13C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C1BA068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1BA0B4(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C52AA08;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C1BA118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C1BA13C(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C1BA1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1BA1D0(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1BA1E4@<X0>(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::SdfTextFileFormat(v2);
  *a1 = v2;
  v4 = 0;
  return sub_20C1BA23C(&v4);
}

void sub_20C1BA228(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1BA23C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C1BA268(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  const std::string *v7;
  const std::string *v8;
  const std::string *v9;
  const std::string *v10;
  const std::string *v11;
  const std::string *v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  const char *v20;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v21;
  unsigned __int8 *v22;
  std::string *p_p;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v24;
  uint64_t v25;
  const char *v26;
  std::string __p;
  const std::string *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
  if (sub_20BFE4F24((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v7 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v7 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<int>(a1, a2, a4, (uint64_t)v7);
  }
  else if (sub_20BFE4F9C((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v8 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v8 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<long long>(a1, a2, a4, (uint64_t)v8);
  }
  else if (sub_20BFE5014((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v9 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v9 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned int>(a1, a2, a4, (uint64_t)v9);
  }
  else if (sub_20BFE508C((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v10 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v10 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned long long>(a1, a2, a4, (uint64_t)v10);
  }
  else if (sub_20BFE5104((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v11 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v11 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<std::string>(a1, a2, a4, (uint64_t)v11);
  }
  else if (sub_20BFE517C((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v12 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v12 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, a4, (uint64_t)v12);
  }
  else if (sub_20BFE4DCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    v14 = (uint64_t *)sub_20BFE4E44((pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
    if (sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v15 = v14[1];
      if ((v15 & 4) != 0)
        v16 = (*(uint64_t (**)(uint64_t *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v14);
      else
        v16 = *v14;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(a1, a2, a4, v16);
    }
    else
    {
      v19 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s = ", v20);
      if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
      {
        v24 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2, 1, v24, 0);
      }
      else if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
      {
        v25 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        if (*(char *)(v25 + 23) >= 0)
          v26 = (const char *)v25;
        else
          v26 = *(const char **)v25;
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s\n", v26);
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v17)
    {
      v18 = (const char *)(v17 + 16);
      if (*(char *)(v17 + 39) < 0)
        v18 = *(const char **)v18;
    }
    else
    {
      v18 = "";
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s = ", v18);
    if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
    {
      v21 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2, 1, v21, 0);
    }
    else
    {
      if (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
      {
        v22 = (unsigned __int8 *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
        pxrInternal__aapl__pxrReserved__::TfStringify((pxrInternal__aapl__pxrReserved__ *)*v22, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue(&v28, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s\n", (const char *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return sub_20BF4C2D8((uint64_t)&v28);
}

void sub_20C1BA688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20BF4C2D8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20C1BA6D0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unsigned int Specifier;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  std::string::size_type v8;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v9;
  unsigned int *v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  unint64_t v15;
  uint64_t *Name;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  std::string __p;

  Specifier = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(a1);
  if (Specifier == 1)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448)))goto LABEL_10;
  }
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName(a1, (unsigned int **)&__p);
  v8 = __p.__r_.__value_.__r.__words[0];
  v9 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
  if (!v9)
    v9 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
  v10 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v8 & 7) != 0)
    {
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
LABEL_10:
    v8 = 0;
  }
  v12 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Specifier);
  v13 = " ";
  v14 = "";
  if (v8)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v14 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0)
        v14 = *(const char **)v14;
    }
  }
  else
  {
    v13 = "";
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s ", v12, v13, v14);
  Name = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPrimSpec *)a1);
  if (*((char *)Name + 23) >= 0)
    v17 = (char *)Name;
  else
    v17 = (char *)*Name;
  sub_20BDDC0E4(&__p, v17);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v8 & 7) != 0)
  {
    v18 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  sub_20C1BAA84(a1, a2, a3);
  sub_20BDDC0E4(&__p, "\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&__p, "{\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20C1BC1A4((unsigned int **)a1, a2, a3);
  sub_20BDDC0E4(&__p, "}\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C1BA910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(exception_object);
}

const pxrInternal__aapl__pxrReserved__::TfToken *sub_20C1BA980(const pxrInternal__aapl__pxrReserved__::TfToken *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = a1;
    v3 = a2;
    while (2)
    {
      while (sub_20C1BAA20(a3, v5))
      {
        v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
        if (v5 == v3)
          return v3;
      }
      do
      {
        v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 - 8);
        if (v3 == v5)
          return v5;
      }
      while (!sub_20C1BAA20(a3, v3));
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = *(_QWORD *)v3;
      v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      *(_QWORD *)v3 = v6;
      if (v3 != v5)
        continue;
      break;
    }
  }
  return v3;
}

BOOL sub_20C1BAA20(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  if ((sub_20BFE1978(a1, a2) & 1) != 0)
    return 1;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 45) & 0xFFFFFFFFFFFFFFF8);
}

void sub_20C1BAA84(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  unint64_t Instance;
  unint64_t v9;
  uint64_t *v10;
  std::string::size_type size;
  int v12;
  _BOOL8 v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  unint64_t v15;
  uint64_t v16;
  const pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v29;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  int Permission;
  unint64_t v34;
  const char *v35;
  int v36;
  const std::type_info *v37;
  char *v38;
  char v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  const char *v44;
  int v45;
  const std::type_info *v46;
  char *v47;
  char v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char v60;
  const std::type_info *v61;
  char *v62;
  unsigned int *v63;
  unsigned int v64;
  unint64_t v65;
  const char *v66;
  char v67;
  const std::type_info *v68;
  char *v69;
  unsigned int *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned int *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  _QWORD *v82;
  unsigned int *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  unsigned int *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  unsigned int *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _QWORD *v120;
  uint64_t *v121;
  const char *v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  void *__p[2];
  _OWORD v129[2];
  uint64_t v130;
  std::__shared_weak_count *v131;
  __int128 *v132;
  _QWORD *v133[2];
  char *v134;
  std::string v135;
  _QWORD v136[3];
  __int128 v137;
  uint64_t v138;
  unsigned int *v139;
  _QWORD *v140[4];

  v140[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(a1, v136);
  v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v136[0];
  v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v136[1];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v9 = Instance + 488;
  if (!*(_BYTE *)(Instance + 552))
    v9 = 0;
  *(_QWORD *)&v137 = v9;
  v10 = (uint64_t *)sub_20BFE1708(v6, v7, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&v137);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetComment(a1, (uint64_t)&v135);
  size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v135.__r_.__value_.__l.__size_;
  if (size)
  {
    v12 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3 + 1, &v135);
    sub_20BDDC0E4(__p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
    if (SBYTE7(v129[0]) < 0)
      operator delete(__p[0]);
    v13 = 1;
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)v136[0];
  }
  else
  {
    v12 = 0;
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)v136[0];
    v13 = v136[0] != (_QWORD)v10;
  }
  v15 = 126 - 2 * __clz(((char *)v10 - (char *)v14) >> 3);
  if (v10 == (uint64_t *)v14)
    v16 = 0;
  else
    v16 = v15;
  sub_20BFE19BC(v14, v10, (uint64_t)&v137, v16, 1);
  v17 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v136[0];
  if ((uint64_t *)v136[0] != v10)
  {
    v18 = a3 + 1;
    if (v13)
      v19 = a3 + 1;
    else
      v19 = 0;
    v123 = v19;
    v20 = "";
    if (v13)
      v20 = "\n";
    v122 = v20;
    while (1)
    {
      v12 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v12 & 1, v13);
      v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v21)
        v21 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v21 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20BDDC0E4(__p, "doc = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetDocumentation(a1, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, (const std::string *)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
        sub_20BDDC0E4(__p, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
        goto LABEL_228;
      }
      v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22)
        v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 31) & 0xFFFFFFFFFFFFFFF8))
      {
        Permission = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPermission(a1);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
        if (v13)
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v18, (pxrInternal__aapl__pxrReserved__ *)"permission = %s\n");
        else
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"permission = %s");
        goto LABEL_228;
      }
      v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23)
        v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 52) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetryFunction(a1, (unsigned int **)__p);
        v34 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v35 = (const char *)(v34 + 16);
          if (*(char *)(v34 + 39) < 0)
            v35 = *(const char **)v35;
        }
        else
        {
          v35 = "";
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v123, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v35, v122);
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v53 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v54 = __ldxr(v53);
          while (__stlxr(v54 - 2, v53));
        }
        goto LABEL_228;
      }
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 30) & 0xFFFFFFFFFFFFFFF8))
        break;
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 35) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v17, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "references");
        v45 = sub_20BFE4618((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        v48 = v45;
        if (v45)
        {
          if (((uint64_t)v140[0] & 4) != 0)
            v49 = (unsigned int *)(*(uint64_t (**)(unsigned int **))(((unint64_t)v140[0] & 0xFFFFFFFFFFFFFFF8)
                                                                             + 168))(&v139);
          else
            v49 = v139;
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfReference>(a2, v18, __p, (uint64_t)v49);
        }
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v50 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v51 = __ldxr(v50);
          while (__stlxr(v51 - 2, v50));
        }
        if ((v48 & 1) != 0)
          goto LABEL_227;
        __p[0] = "sdf/fileIO_Common.h";
        __p[1] = "Sdf_WritePrimMetadata";
        *(_QWORD *)&v129[0] = 397;
        *((_QWORD *)&v129[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, Sd"
                                    "f_TextOutput &, size_t)";
        LOBYTE(v129[1]) = 0;
        v52 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
        if (v52)
        {
          v44 = (const char *)(v52 + 16);
          if (*(char *)(v52 + 39) < 0)
            v44 = *(const char **)v44;
        }
        else
        {
          v44 = "";
        }
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139, v46, v47, (uint64_t)&v137);
        v66 = (const char *)&v137;
        if (v138 < 0)
          v66 = (const char *)v137;
        goto LABEL_225;
      }
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 59) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList((unsigned int **)a1, (std::__shared_weak_count_vtbl **)&v139);
        if (sub_20BFE4690((uint64_t)&v139)
          && !(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v139 + 16))(v139))
        {
          __p[0] = v139;
          __p[1] = v140[0];
          if (v140[0])
          {
            v73 = v140[0] + 1;
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          LODWORD(v129[0]) = 2;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "delete variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v76 = v139;
          v75 = v140[0];
          if (v140[0])
          {
            v77 = v140[0] + 1;
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          v79 = (std::__shared_weak_count *)__p[1];
          __p[0] = v76;
          __p[1] = v75;
          if (v79)
          {
            p_shared_owners = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(p_shared_owners);
            while (__stlxr(v81 - 1, p_shared_owners));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          LODWORD(v129[0]) = 1;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "add variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v83 = v139;
          v82 = v140[0];
          if (v140[0])
          {
            v84 = v140[0] + 1;
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v86 = (std::__shared_weak_count *)__p[1];
          __p[0] = v83;
          __p[1] = v82;
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          LODWORD(v129[0]) = 4;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "prepend variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v90 = v139;
          v89 = v140[0];
          if (v140[0])
          {
            v91 = v140[0] + 1;
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v93 = (std::__shared_weak_count *)__p[1];
          __p[0] = v90;
          __p[1] = v89;
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          LODWORD(v129[0]) = 5;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "append variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v97 = v139;
          v96 = v140[0];
          if (v140[0])
          {
            v98 = v140[0] + 1;
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
          }
          v100 = (std::__shared_weak_count *)__p[1];
          __p[0] = v97;
          __p[1] = v96;
          if (v100)
          {
            v101 = (unint64_t *)&v100->__shared_owners_;
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          LODWORD(v129[0]) = 3;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "reorder variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v57 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v103 = (unint64_t *)((char *)__p[1] + 8);
            do
              v59 = __ldaxr(v103);
            while (__stlxr(v59 - 1, v103));
            goto LABEL_196;
          }
        }
        else
        {
          __p[0] = v139;
          __p[1] = v140[0];
          if (v140[0])
          {
            v55 = v140[0] + 1;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          LODWORD(v129[0]) = 0;
          sub_20BDDC0E4(&v137, "variantSets = ");
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
          if (SHIBYTE(v138) < 0)
            operator delete((void *)v137);
          sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
          v132 = &v137;
          sub_20BDE5038((void ***)&v132);
          sub_20BDDC0E4(&v137, "\n");
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
          if (SHIBYTE(v138) < 0)
            operator delete((void *)v137);
          v57 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v58 = (unint64_t *)((char *)__p[1] + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
LABEL_196:
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        v104 = (std::__shared_weak_count *)v140[0];
        if (v140[0])
        {
          v105 = v140[0] + 1;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        goto LABEL_228;
      }
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v27 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v17, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "inherits");
        v60 = sub_20BFE0F88(a2, v18, __p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v63 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v64 = __ldxr(v63);
          while (__stlxr(v64 - 2, v63));
        }
        if ((v60 & 1) == 0)
        {
          __p[0] = "sdf/fileIO_Common.h";
          __p[1] = "Sdf_WritePrimMetadata";
          *(_QWORD *)&v129[0] = 448;
          *((_QWORD *)&v129[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, "
                                      "Sdf_TextOutput &, size_t)";
          LOBYTE(v129[1]) = 0;
          v65 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
          if (v65)
          {
            v44 = (const char *)(v65 + 16);
            if (*(char *)(v65 + 39) < 0)
              v44 = *(const char **)v44;
          }
          else
          {
            v44 = "";
          }
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139, v61, v62, (uint64_t)&v137);
          v66 = (const char *)&v137;
          if (v138 < 0)
            v66 = (const char *)v137;
          goto LABEL_225;
        }
LABEL_227:
        sub_20BF4C2D8((uint64_t)&v139);
        goto LABEL_228;
      }
      v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v28)
        v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v28 + 38) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v17, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "specializes");
        v67 = sub_20BFE0F88(a2, v18, __p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v70 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v71 = __ldxr(v70);
          while (__stlxr(v71 - 2, v70));
        }
        if ((v67 & 1) == 0)
        {
          __p[0] = "sdf/fileIO_Common.h";
          __p[1] = "Sdf_WritePrimMetadata";
          *(_QWORD *)&v129[0] = 457;
          *((_QWORD *)&v129[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, "
                                      "Sdf_TextOutput &, size_t)";
          LOBYTE(v129[1]) = 0;
          v72 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
          if (v72)
          {
            v44 = (const char *)(v72 + 16);
            if (*(char *)(v72 + 39) < 0)
              v44 = *(const char **)v44;
          }
          else
          {
            v44 = "";
          }
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139, v68, v69, (uint64_t)&v137);
          v66 = (const char *)&v137;
          if (v138 < 0)
            v66 = (const char *)v137;
          goto LABEL_225;
        }
        goto LABEL_227;
      }
      v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v29)
        v29 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v29 + 36) & 0xFFFFFFFFFFFFFFF8))
      {
        v140[0] = 0;
        v140[1] = 0;
        v139 = (unsigned int *)v140;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v134);
        v133[0] = 0;
        v133[1] = 0;
        v132 = (__int128 *)v133;
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates((unsigned int **)a1, &v130);
        memset(v129, 0, sizeof(v129));
        *(_OWORD *)__p = 0u;
        sub_20BFE47D4(&v130, &v137);
        *(_OWORD *)__p = v137;
        *(_QWORD *)&v129[0] = v138;
        sub_20BFE48DC(&v130, (uint64_t **)&v137);
        *(_OWORD *)((char *)v129 + 8) = v137;
        *((_QWORD *)&v129[1] + 1) = v138;
        while (!sub_20BFE4958((uint64_t)__p, (uint64_t)v129 + 8))
        {
          v107 = sub_20BFE1008((uint64_t)__p);
          v108 = sub_20BFE49FC(*(uint64_t **)v107, *(_QWORD *)(v107 + 8), *(char **)(v107 + 16));
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v108 + 8), &v134, &v126);
          v109 = sub_20BFE1008((uint64_t)__p);
          v110 = sub_20BFE49FC(*(uint64_t **)v109, *(_QWORD *)(v109 + 8), *(char **)(v109 + 16));
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v110, &v134, &v124);
          *(_QWORD *)&v137 = &v124;
          v111 = sub_20BFE4B68((uint64_t **)&v132, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v124, (uint64_t)&unk_20CAC184C, (_DWORD **)&v137);
          sub_20BFD3EBC((int *)v111 + 9, &v126);
          sub_20BFD3F10((int *)v111 + 10, &v127);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v125);
          sub_20BFD265C(&v124);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v127);
          sub_20BFD265C(&v126);
          sub_20BFE1080((uint64_t)__p);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteRelocates(a2, v18, v13, &v132);
        v112 = v131;
        if (v131)
        {
          v113 = (unint64_t *)&v131->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        sub_20BFE4CE8((uint64_t)&v132, v133[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v134 + 1);
        sub_20BFD265C(&v134);
        sub_20BFE4CE8((uint64_t)&v139, v140[0]);
        goto LABEL_228;
      }
      v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v30)
        v30 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v30 + 33) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrefixSubstitutions(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v137);
        sub_20BDDC0E4(__p, "prefixSubstitutions = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v31)
          v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v31 + 48) & 0xFFFFFFFFFFFFFFF8))
        {
          v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v32)
            v32 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v32 + 57) & 0xFFFFFFFFFFFFFFF8))
          {
            pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections((unsigned int **)a1, &v137);
            sub_20BFE1128(&v137, (uint64_t *)__p);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v137);
            if (*(_QWORD *)&v129[0])
            {
              v132 = 0;
              *(void **)&v137 = __p[0];
              *((_QWORD *)&v137 + 1) = &__p[1];
              while ((_QWORD)v137 != *((_QWORD *)&v137 + 1))
              {
                v117 = *sub_20BFE1184(&v137, v115, v116) + 56;
                v140[0] = &off_24C520700;
                sub_20BF77444(&v139, v117);
                v120 = sub_20BFE1184(&v137, v118, v119);
                v121 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v132, (__int128 *)(*v120 + 32));
                sub_20BF4B5D8(v121, &v139);
                sub_20BF4C2D8((uint64_t)&v139);
                sub_20BFE11FC(&v137);
              }
              sub_20BDDC0E4(&v137, "variants = ");
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
              if (SHIBYTE(v138) < 0)
                operator delete((void *)v137);
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a2, v18, v13, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v132, 0);
              sub_20BF49F14((_QWORD ***)&v132, 0);
            }
            sub_20BDE9D48((uint64_t)__p, (_QWORD *)__p[1]);
          }
          else
          {
            sub_20C1BA268(a2, v18, a1, v17);
          }
          goto LABEL_228;
        }
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSuffixSubstitutions(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v137);
        sub_20BDDC0E4(__p, "suffixSubstitutions = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a2, v18, v13, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v137, 1);
      sub_20BF49F14((_QWORD ***)&v137, 0);
LABEL_228:
      v17 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v17 + 8);
      if (v17 == (const pxrInternal__aapl__pxrReserved__::TfToken *)v10)
        goto LABEL_240;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v17, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "payload");
    v36 = sub_20BFE45A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
    v39 = v36;
    if (v36)
    {
      if (((uint64_t)v140[0] & 4) != 0)
        v40 = (unsigned int *)(*(uint64_t (**)(unsigned int **))(((unint64_t)v140[0] & 0xFFFFFFFFFFFFFFF8)
                                                                         + 168))(&v139);
      else
        v40 = v139;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>(a2, v18, __p, (uint64_t)v40);
    }
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v41 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    if ((v39 & 1) != 0)
      goto LABEL_227;
    __p[0] = "sdf/fileIO_Common.h";
    __p[1] = "Sdf_WritePrimMetadata";
    *(_QWORD *)&v129[0] = 388;
    *((_QWORD *)&v129[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, Sdf_Te"
                                "xtOutput &, size_t)";
    LOBYTE(v129[1]) = 0;
    v43 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
    if (v43)
    {
      v44 = (const char *)(v43 + 16);
      if (*(char *)(v43 + 39) < 0)
        v44 = *(const char **)v44;
    }
    else
    {
      v44 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139, v37, v38, (uint64_t)&v137);
    v66 = (const char *)&v137;
    if (v138 < 0)
      v66 = (const char *)v137;
LABEL_225:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' field holding unexpected type '%s'", v44, v66);
    if (SHIBYTE(v138) < 0)
      operator delete((void *)v137);
    goto LABEL_227;
  }
LABEL_240:
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, a3, v12, v13);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  __p[0] = v136;
  sub_20BEEB2B8((void ***)__p);
}

void sub_20C1BBDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,void *__p,_QWORD *a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_20BF49F14((_QWORD ***)&a38, 0);
  sub_20BDE9D48((uint64_t)&__p, a27);
  if (*(char *)(v41 - 177) < 0)
    operator delete(*(void **)(v41 - 200));
  __p = (void *)(v41 - 176);
  sub_20BEEB2B8((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1BC1A4(unsigned int **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t i;
  void **v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int **v22;
  uint64_t **v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v27;
  void *__p;
  std::__shared_weak_count *v29;
  char v30;
  void **v31;
  __int128 v32;
  uint64_t *v33;
  void *v34[2];
  char v35;
  void *v36;
  char v37;
  unsigned int **v38;
  unsigned int **v39;
  std::string v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v41;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v42[2];

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(a1, (uint64_t)&__p);
  sub_20BFE5328((uint64_t)&__p, v34);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((void *)((char *)v34[1] - (char *)v34[0]) >= (void *)9)
  {
    sub_20BDDC0E4(&__p, "reorder properties = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3 + 1, (uint64_t)&__p);
    if (v30 < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, a3 + 1, (uint64_t *)v34);
    sub_20BDDC0E4(&__p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
    if (v30 < 0)
      operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(a1, (uint64_t)&v40);
  sub_20BFE5328((uint64_t)&v40, &__p);
  size = (std::__shared_weak_count *)v40.__r_.__value_.__l.__size_;
  if (v40.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(v40.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if ((unint64_t)((char *)v29 - (_BYTE *)__p) >= 9)
  {
    sub_20BDDC0E4(&v40, "reorder nameChildren = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3 + 1, (uint64_t)&v40);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, a3 + 1, (uint64_t *)&__p);
    sub_20BDDC0E4(&v40, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v40);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_20BEEB2B8((void ***)&v40);
  __p = v34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20C1BC920((uint64_t **)a1, a2, a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties((uint64_t **)a1, (uint64_t)v34);
  if (sub_20BFE52B0((uint64_t)v34))
  {
    sub_20BFE6AEC((uint64_t)v34);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren((uint64_t **)a1, (uint64_t)&__p);
    v12 = sub_20BFE52EC((uint64_t)&__p);
    sub_20BFE6A54((uint64_t)&__p);
    sub_20BFE6AEC((uint64_t)v34);
    if (!v12)
    {
      sub_20BDDC0E4(v34, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)v34);
      if (v35 < 0)
        operator delete(v34[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren((uint64_t **)a1, (uint64_t)v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v34);
  v13 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v34);
  if (v13)
  {
    v14 = 0;
    for (i = 0; i != v13; ++i)
    {
      sub_20BFE6B84((uint64_t *)v34, i, (unsigned int **)&v40);
      if ((v14 & 1) != 0)
      {
        sub_20BDDC0E4(&__p, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
        if (v30 < 0)
          operator delete(__p);
      }
      sub_20C1BA6D0(&v40, a2, a3 + 1);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v40);
      v14 = 1;
    }
  }
  sub_20BFE6A54((uint64_t)v34);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets((uint64_t **)a1, (uint64_t)v34);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid((uint64_t)v34))
  {
    v16 = v34;
    if (!sub_20BFE6C04((uint64_t)v34))
      v16 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v34);
    sub_20BFE6C04((uint64_t)v34);
    v27 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v34);
    if (v27)
    {
      v17 = 0;
      v18 = a3 + 1;
      v19 = a3 + 2;
      do
      {
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v40.__r_.__value_.__l.__size_ = v17;
        sub_20BFE6C88((uint64_t)v16, (uint64_t)&v40, &__p);
        v31 = v16;
        v32 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
        sub_20BFE6CE8((uint64_t *)v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_, (unsigned int **)&v33);
        pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariantList(&v33, &v38);
        v20 = 126 - 2 * __clz(v39 - v38);
        if (v39 == v38)
          v21 = 0;
        else
          v21 = v20;
        sub_20C1BF39C(v38, v39, v21, 1);
        if (v38 != v39)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v18, (pxrInternal__aapl__pxrReserved__ *)"variantSet ");
          pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec *)&v33, (uint64_t)&v40);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &v40);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = {\n");
          v23 = (uint64_t **)v38;
          v22 = v39;
          while (v23 != (uint64_t **)v22)
          {
            pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(v23, &v41);
            v24 = (unsigned int *)v41;
            v42[0] = v41;
            if (v41)
            {
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 + 1, v24));
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v41);
            pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v23, (uint64_t)&v40);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, v19, &v40);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
            sub_20C1BAA84(v42, a2, v19);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" {\n");
            sub_20C1BC1A4(v42, a2, v19);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v19, (pxrInternal__aapl__pxrReserved__ *)"}\n");
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42);
            ++v23;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v18, (pxrInternal__aapl__pxrReserved__ *)"}\n");
        }
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
        sub_20BFE69E4((void ***)&v40);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v33);
        if (v30 < 0)
          operator delete(__p);
        ++v17;
      }
      while (v17 != v27);
    }
  }
  if (v37 < 0)
    operator delete(v36);
  return sub_20BFE6D38((uint64_t)v34);
}

void sub_20C1BC758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1BC920(uint64_t **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v8;
  unsigned int v9;
  int Variability;
  char *v11;
  std::string::size_type v12;
  _BOOL4 v13;
  unsigned int *v14;
  unsigned int v15;
  _BOOL4 v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  int IsCustom;
  __int128 v22;
  unint64_t Instance;
  std::string::size_type v24;
  uint64_t *v25;
  BOOL v26;
  int v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  unsigned int v29;
  int v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v33;
  unsigned int v34;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  uint64_t *EmptyString;
  __int128 v38;
  unsigned int *v39;
  unsigned int v40;
  const pxrInternal__aapl__pxrReserved__::TfToken *v41;
  const pxrInternal__aapl__pxrReserved__::TfToken *v42;
  unint64_t v43;
  unsigned int *v44;
  pxrInternal__aapl__pxrReserved__::TfToken *v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  _BOOL4 v47;
  int v48;
  int v49;
  std::string::size_type v50;
  int v51;
  const char *v52;
  uint64_t *v53;
  const char *p_dst;
  std::string *v55;
  const char *v56;
  const char *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  pxrInternal__aapl__pxrReserved__::TfToken *v61;
  uint64_t v62;
  const char *v63;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v64;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v65;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v66;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v67;
  int v68;
  const char *v69;
  std::string::size_type v70;
  const char *v71;
  const pxrInternal__aapl__pxrReserved__::TfEnum *v72;
  uint64_t *NameForUnit;
  const char *v74;
  unsigned int *v75;
  unsigned int v76;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v77;
  int v78;
  std::string::size_type v79;
  int v80;
  const char *v81;
  uint64_t *v82;
  const char *v83;
  std::string *v84;
  const char *v85;
  uint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  char *v95;
  int v96;
  uint64_t *v97;
  uint64_t *v98;
  char *v99;
  int v100;
  uint64_t *v101;
  uint64_t *Name;
  const char *v103;
  const char *v104;
  uint64_t **v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  __int128 v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  __int128 v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  __int128 v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unsigned int **v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  pxrInternal__aapl__pxrReserved__::TfToken *v149;
  uint64_t v150;
  const char *v151;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v152;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v153;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v154;
  int Permission;
  std::string::size_type v156;
  const char *v157;
  unsigned int *v158;
  unsigned int v159;
  unint64_t *v160;
  unint64_t v161;
  int v162;
  uint64_t *v163;
  uint64_t *v164;
  const char *v165;
  const char *v166;
  __int128 v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *size;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  uint64_t *v174;
  uint64_t *v175;
  const char *v176;
  const char *v177;
  __int128 v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  int v184;
  uint64_t *v185;
  uint64_t *v186;
  const char *v187;
  const char *v188;
  __int128 v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  int v195;
  uint64_t *v196;
  uint64_t *v197;
  const char *v198;
  const char *v199;
  __int128 v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  int v206;
  uint64_t *v207;
  uint64_t *v208;
  const char *v209;
  const char *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  int v217;
  uint64_t *v218;
  uint64_t *v219;
  const char *v220;
  const char *v221;
  int v222;
  uint64_t *v223;
  uint64_t *v224;
  const char *v225;
  const char *v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int **v231;
  int v232;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v233;
  uint64_t v234;
  uint64_t v235;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v236;
  unsigned int **v237;
  unsigned int **v238;
  __int128 v239;
  std::string v240;
  std::string __p[3];
  unsigned int *v242[2];
  pxrInternal__aapl__pxrReserved__::TfToken *v243[3];
  __int128 __dst;
  uint64_t v245;
  std::string *TypeName;
  std::__shared_weak_count *v247;
  char v248;
  uint64_t v249;

  v249 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties(a1, (uint64_t)__p);
  sub_20BFE5454((uint64_t *)__p, (uint64_t)&v237);
  sub_20BFE6AEC((uint64_t)__p);
  v5 = 126 - 2 * __clz(v238 - v237);
  if (v238 == v237)
    v6 = 0;
  else
    v6 = v5;
  sub_20C1BE514(v237, v238, v6, 1);
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v237;
  v231 = v238;
  if (v237 != v238)
  {
    v234 = a3 + 1;
    v235 = a3 + 2;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v7) != 1)
      {
        v242[0] = (unsigned int *)*v7;
        v14 = v242[0];
        if (v242[0])
        {
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
        pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, (uint64_t)__p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = __p[0].__r_.__value_.__l.__size_ == 0;
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        else
        {
          v16 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) == 0;
        }
        v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v17)
          v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v18 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v17 + 424));
        v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v19)
          v19 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v227 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v19 + 88));
        v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v20)
          v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v229 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v20 + 432));
        IsCustom = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, __p);
        v22 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        if (!Instance)
          Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        v24 = Instance + 632;
        if (!*(_BYTE *)(Instance + 696))
          v24 = 0;
        v240.__r_.__value_.__r.__words[0] = v24;
        v25 = (uint64_t *)sub_20BFE76F8((const pxrInternal__aapl__pxrReserved__::TfToken *)v22, *((const pxrInternal__aapl__pxrReserved__::TfToken **)&v22 + 1), (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&v240);
        v26 = v16;
        v27 = (uint64_t *)__p[0].__r_.__value_.__l.__data_ != v25 || !v16;
        if (v18)
        {
          pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v242, &TypeName);
          if (sub_20BFE71C4((uint64_t)&TypeName)
            && !(*(unsigned int (**)(std::string *))(TypeName->__r_.__value_.__r.__words[0] + 16))(TypeName))
          {
            v18 = 0;
          }
          else if (sub_20BFE71C4((uint64_t)&TypeName))
          {
            v18 = sub_20BFE7798((uint64_t)TypeName);
          }
          else
          {
            v18 = 1;
          }
          if (sub_20BFE71C4((uint64_t)&TypeName)
            && ((*(uint64_t (**)(std::string *))(TypeName->__r_.__value_.__r.__words[0] + 16))(TypeName) & 1) == 0)
          {
            if (sub_20BFE71C4((uint64_t)&TypeName))
              v232 = sub_20BFE7798((uint64_t)TypeName);
            else
              v232 = 1;
          }
          else
          {
            v232 = 0;
          }
          v92 = v247;
          if (v247)
          {
            p_shared_owners = (unint64_t *)&v247->__shared_owners_;
            do
              v94 = __ldaxr(p_shared_owners);
            while (__stlxr(v94 - 1, p_shared_owners));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
        }
        else
        {
          v232 = 0;
        }
        if (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242))
          v95 = "";
        else
          v95 = "varying ";
        sub_20BDDC0E4(&TypeName, v95);
        if (((v27 | v18) & 1) == 0
          && ((v232 & 1) != 0
           || (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242) & 1) != 0))
        {
          if (IsCustom)
          {
            v100 = v248;
            v101 = (uint64_t *)TypeName;
            Name = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
            v103 = (const char *)&TypeName;
            if (v100 < 0)
              v103 = (const char *)v101;
            if (*((char *)Name + 23) >= 0)
              v104 = (const char *)Name;
            else
              v104 = (const char *)*Name;
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"custom %srel %s\n", v103, v104);
          }
LABEL_311:
          if (v232)
          {
            pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v242, &__dst);
            *(_OWORD *)&v240.__r_.__value_.__l.__data_ = __dst;
            if (*((_QWORD *)&__dst + 1))
            {
              v160 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 1, v160));
            }
            LODWORD(v240.__r_.__value_.__r.__words[2]) = 2;
            if (sub_20BFE7238((uint64_t)&v240))
            {
              v162 = v248;
              v163 = (uint64_t *)TypeName;
              v164 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
              v165 = (const char *)&TypeName;
              if (v162 < 0)
                v165 = (const char *)v163;
              if (*((char *)v164 + 23) >= 0)
                v166 = (const char *)v164;
              else
                v166 = (const char *)*v164;
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"delete %srel %s", v165, v166);
              sub_20C1BF218((unsigned int *)&v240, a2, v234, 0);
            }
            v167 = __dst;
            if (*((_QWORD *)&__dst + 1))
            {
              v168 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v169 = __ldxr(v168);
              while (__stxr(v169 + 1, v168));
            }
            size = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
            *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v167;
            if (size)
            {
              v171 = (unint64_t *)&size->__shared_owners_;
              do
                v172 = __ldaxr(v171);
              while (__stlxr(v172 - 1, v171));
              if (!v172)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            LODWORD(v240.__r_.__value_.__r.__words[2]) = 1;
            if (sub_20BFE7238((uint64_t)&v240))
            {
              v173 = v248;
              v174 = (uint64_t *)TypeName;
              v175 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
              v176 = (const char *)&TypeName;
              if (v173 < 0)
                v176 = (const char *)v174;
              if (*((char *)v175 + 23) >= 0)
                v177 = (const char *)v175;
              else
                v177 = (const char *)*v175;
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"add %srel %s", v176, v177);
              sub_20C1BF218((unsigned int *)&v240, a2, v234, 1);
            }
            v178 = __dst;
            if (*((_QWORD *)&__dst + 1))
            {
              v179 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v180 = __ldxr(v179);
              while (__stxr(v180 + 1, v179));
            }
            v181 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
            *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v178;
            if (v181)
            {
              v182 = (unint64_t *)&v181->__shared_owners_;
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 - 1, v182));
              if (!v183)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
            LODWORD(v240.__r_.__value_.__r.__words[2]) = 4;
            if (sub_20BFE7238((uint64_t)&v240))
            {
              v184 = v248;
              v185 = (uint64_t *)TypeName;
              v186 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
              v187 = (const char *)&TypeName;
              if (v184 < 0)
                v187 = (const char *)v185;
              if (*((char *)v186 + 23) >= 0)
                v188 = (const char *)v186;
              else
                v188 = (const char *)*v186;
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"prepend %srel %s", v187, v188);
              sub_20C1BF218((unsigned int *)&v240, a2, v234, 1);
            }
            v189 = __dst;
            if (*((_QWORD *)&__dst + 1))
            {
              v190 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v191 = __ldxr(v190);
              while (__stxr(v191 + 1, v190));
            }
            v192 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
            *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v189;
            if (v192)
            {
              v193 = (unint64_t *)&v192->__shared_owners_;
              do
                v194 = __ldaxr(v193);
              while (__stlxr(v194 - 1, v193));
              if (!v194)
              {
                ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                std::__shared_weak_count::__release_weak(v192);
              }
            }
            LODWORD(v240.__r_.__value_.__r.__words[2]) = 5;
            if (sub_20BFE7238((uint64_t)&v240))
            {
              v195 = v248;
              v196 = (uint64_t *)TypeName;
              v197 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
              v198 = (const char *)&TypeName;
              if (v195 < 0)
                v198 = (const char *)v196;
              if (*((char *)v197 + 23) >= 0)
                v199 = (const char *)v197;
              else
                v199 = (const char *)*v197;
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"append %srel %s", v198, v199);
              sub_20C1BF218((unsigned int *)&v240, a2, v234, 1);
            }
            v200 = __dst;
            if (*((_QWORD *)&__dst + 1))
            {
              v201 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v202 = __ldxr(v201);
              while (__stxr(v202 + 1, v201));
            }
            v203 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
            *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v200;
            if (v203)
            {
              v204 = (unint64_t *)&v203->__shared_owners_;
              do
                v205 = __ldaxr(v204);
              while (__stlxr(v205 - 1, v204));
              if (!v205)
              {
                ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                std::__shared_weak_count::__release_weak(v203);
              }
            }
            LODWORD(v240.__r_.__value_.__r.__words[2]) = 3;
            if (sub_20BFE7238((uint64_t)&v240))
            {
              v206 = v248;
              v207 = (uint64_t *)TypeName;
              v208 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
              v209 = (const char *)&TypeName;
              if (v206 < 0)
                v209 = (const char *)v207;
              if (*((char *)v208 + 23) >= 0)
                v210 = (const char *)v208;
              else
                v210 = (const char *)*v208;
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"reorder %srel %s", v209, v210);
              sub_20C1BF218((unsigned int *)&v240, a2, v234, 0);
            }
            v211 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
            if (v240.__r_.__value_.__l.__size_)
            {
              v212 = (unint64_t *)(v240.__r_.__value_.__l.__size_ + 8);
              do
                v213 = __ldaxr(v212);
              while (__stlxr(v213 - 1, v212));
              if (!v213)
              {
                ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                std::__shared_weak_count::__release_weak(v211);
              }
            }
            v214 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
            if (*((_QWORD *)&__dst + 1))
            {
              v215 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v216 = __ldaxr(v215);
              while (__stlxr(v216 - 1, v215));
              if (!v216)
              {
                ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                std::__shared_weak_count::__release_weak(v214);
              }
            }
          }
          if (v229)
          {
            v217 = v248;
            v218 = (uint64_t *)TypeName;
            v219 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
            v220 = (const char *)&TypeName;
            if (v217 < 0)
              v220 = (const char *)v218;
            if (*((char *)v219 + 23) >= 0)
              v221 = (const char *)v219;
            else
              v221 = (const char *)*v219;
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"%srel %s.timeSamples = {\n", v220, v221);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteTimeSamples(a2, v234, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242);
            sub_20BDDC0E4(&v240, "}\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v234, (uint64_t)&v240);
            if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v240.__r_.__value_.__l.__data_);
          }
          if (v227)
          {
            pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, &__dst);
            if (*((_QWORD *)&__dst + 1))
            {
              v222 = v248;
              v223 = (uint64_t *)TypeName;
              v224 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
              v225 = (const char *)&TypeName;
              if (v222 < 0)
                v225 = (const char *)v223;
              if (*((char *)v224 + 23) >= 0)
                v226 = (const char *)v224;
              else
                v226 = (const char *)*v224;
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"%srel %s.default = ", v225, v226);
              sub_20BF4C6D0(v243, &__dst);
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(a2, 0, (pxrInternal__aapl__pxrReserved__::VtValue *)v243);
              sub_20BF4C2D8((uint64_t)v243);
              sub_20BDDC0E4(&v240, "\n");
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v234, (uint64_t)&v240);
              if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v240.__r_.__value_.__l.__data_);
            }
            sub_20BF4C2D8((uint64_t)&__dst);
          }
          if (v248 < 0)
            operator delete(TypeName);
          TypeName = __p;
          sub_20BEEB2B8((void ***)&TypeName);
          v139 = v242;
          goto LABEL_413;
        }
        v96 = v248;
        v97 = (uint64_t *)TypeName;
        v98 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v242);
        if (IsCustom)
          v99 = "custom %srel %s";
        else
          v99 = "%srel %s";
        v105 = (uint64_t **)&TypeName;
        if (v96 < 0)
          v105 = (uint64_t **)v97;
        if (*((char *)v98 + 23) >= 0)
          v106 = (uint64_t)v98;
        else
          v106 = *v98;
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)v99, v105, v106);
        if (!v18)
          goto LABEL_270;
        pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v242, &__dst);
        *(_OWORD *)&v240.__r_.__value_.__l.__data_ = __dst;
        if (*((_QWORD *)&__dst + 1))
        {
          v107 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        LODWORD(v240.__r_.__value_.__r.__words[2]) = 0;
        if (sub_20BFE7238((uint64_t)&v240))
          sub_20C1BF218((unsigned int *)&v240, a2, v234, 3);
        else
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = None");
        v140 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
        if (v240.__r_.__value_.__l.__size_)
        {
          v141 = (unint64_t *)(v240.__r_.__value_.__l.__size_ + 8);
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        v143 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
        if (!*((_QWORD *)&__dst + 1))
          goto LABEL_270;
        v144 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
          if (!v26)
            goto LABEL_273;
LABEL_271:
          v146 = 0;
        }
        else
        {
LABEL_270:
          if (v26)
            goto LABEL_271;
LABEL_273:
          v146 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, 1);
          pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, (uint64_t)&v240);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, v235, &v240);
          if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v240.__r_.__value_.__l.__data_);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
        }
        v147 = 126 - 2 * __clz((uint64_t)((uint64_t)v25 - __p[0].__r_.__value_.__r.__words[0]) >> 3);
        if (v25 == (uint64_t *)__p[0].__r_.__value_.__l.__data_)
          v148 = 0;
        else
          v148 = v147;
        sub_20BFE19BC((pxrInternal__aapl__pxrReserved__::TfToken *)__p[0].__r_.__value_.__l.__data_, v25, (uint64_t)&v240, v148, 1);
        v149 = (pxrInternal__aapl__pxrReserved__::TfToken *)__p[0].__r_.__value_.__r.__words[0];
        if ((uint64_t *)__p[0].__r_.__value_.__l.__data_ != v25)
        {
          if (v27)
            v150 = v235;
          else
            v150 = 0;
          if (v27)
            v151 = "\n";
          else
            v151 = "";
          do
          {
            v146 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v146 & 1, v27);
            v152 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v152)
              v152 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if ((*(_QWORD *)v149 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v152 + 17) & 0xFFFFFFFFFFFFFFF8))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v235, (pxrInternal__aapl__pxrReserved__ *)"doc = ");
              pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDocumentation((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, (uint64_t)&v240);
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &v240);
              if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v240.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
            }
            else
            {
              v153 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v153)
                v153 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if ((*(_QWORD *)v149 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v153 + 31) & 0xFFFFFFFFFFFFFFF8))
              {
                Permission = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242);
                pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
                if (v27)
                  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v235, (pxrInternal__aapl__pxrReserved__ *)"permission = %s\n");
                else
                  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"permission = %s");
              }
              else
              {
                v154 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v154)
                  v154 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if ((*(_QWORD *)v149 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v154 + 52) & 0xFFFFFFFFFFFFFFF8))
                {
                  pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryFunction((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, (unsigned int **)&v240);
                  v156 = v240.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
                  if ((v240.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v157 = (const char *)(v156 + 16);
                    if (*(char *)(v156 + 39) < 0)
                      v157 = *(const char **)v157;
                  }
                  else
                  {
                    v157 = "";
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v150, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v157, v151);
                  if ((v240.__r_.__value_.__s.__data_[0] & 7) != 0)
                  {
                    v158 = (unsigned int *)(v240.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v159 = __ldxr(v158);
                    while (__stlxr(v159 - 2, v158));
                  }
                }
                else
                {
                  sub_20C1BA268(a2, v235, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v242, v149);
                }
              }
            }
            v149 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v149 + 8);
          }
          while (v149 != (pxrInternal__aapl__pxrReserved__::TfToken *)v25);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, v234, v146, v27);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
        goto LABEL_311;
      }
      v8 = *v7;
      v236 = v8;
      if (v8)
      {
        do
          v9 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v9 + 1, (unsigned int *)v8));
      }
      Variability = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(&v236);
      v11 = (char *)pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Variability);
      sub_20BDDC0E4(&v240, v11);
      v12 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
      if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v240.__r_.__value_.__l.__size_;
      if (v12)
        std::string::push_back(&v240, 32);
      pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(&v236, (uint64_t)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = __p[0].__r_.__value_.__l.__size_ == 0;
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      else
      {
        v13 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) == 0;
      }
      v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v28)
        v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v29 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(&v236, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v28 + 88));
      v30 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(&v236);
      v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v31)
        v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v32 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(&v236, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v31 + 56));
      v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v33)
        v33 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v34 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(&v236, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v33 + 432));
      if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames))
        sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      TypeName = (std::string *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(&v236);
      pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName((uint64_t **)&TypeName, (unsigned int **)__p);
      if ((__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
      if (*((char *)EmptyString + 23) < 0)
      {
        sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
      }
      else
      {
        v38 = *(_OWORD *)EmptyString;
        v245 = EmptyString[2];
        __dst = v38;
      }
      if ((__p[0].__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v39 = (unsigned int *)(__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(&v236, v243);
      v41 = v243[0];
      v42 = v243[1];
      v43 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
      if (!v43)
        v43 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
      v44 = (unsigned int *)(v43 + 128);
      if (!*(_BYTE *)(v43 + 192))
        v44 = 0;
      v242[0] = v44;
      v45 = sub_20BFE6E18(v41, v42, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)v242);
      v46 = v45;
      if (v13)
      {
        v47 = v243[0] != v45;
        if (v243[0] == v45)
          v48 = v29;
        else
          v48 = 1;
        if ((v48 | v30) != 1 && ((v32 | v34) & 1) != 0)
        {
          if (!v34)
            goto LABEL_142;
          goto LABEL_134;
        }
      }
      else
      {
        v47 = 1;
      }
      v247 = 0;
      if (v29)
      {
        pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue(&v236, __p);
        sub_20BF4B5D8(&TypeName, __p);
        sub_20BF4C2D8((uint64_t)__p);
      }
      v228 = v34;
      v230 = v32;
      v233 = v7;
      v49 = SHIBYTE(v240.__r_.__value_.__r.__words[2]);
      v50 = v240.__r_.__value_.__r.__words[0];
      v51 = SHIBYTE(v245);
      v52 = (const char *)__dst;
      v53 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)&v236);
      p_dst = (const char *)&__dst;
      if (v51 < 0)
        p_dst = v52;
      v55 = &v240;
      if (v49 < 0)
        v55 = (std::string *)v50;
      v56 = "";
      if (v30)
        v56 = "custom ";
      if (*((char *)v53 + 23) >= 0)
        v57 = (const char *)v53;
      else
        v57 = (const char *)*v53;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s %s", v56, (const char *)v55, p_dst, v57);
      if (v247)
      {
        sub_20BF4C6D0(v242, &TypeName);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(a2, v234, (pxrInternal__aapl__pxrReserved__::VtValue *)v242);
        sub_20BF4C2D8((uint64_t)v242);
      }
      if (v13)
      {
        v58 = 0;
      }
      else
      {
        v58 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, v47);
        pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(&v236, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, v235, __p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        sub_20BDDC0E4(__p, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      v59 = 126 - 2 * __clz((v46 - v243[0]) >> 3);
      if (v46 == v243[0])
        v60 = 0;
      else
        v60 = v59;
      sub_20BFE19BC(v243[0], (uint64_t *)v46, (uint64_t)&v239, v60, 1);
      v61 = v243[0];
      if (v243[0] != v46)
      {
        if (v47)
          v62 = v235;
        else
          v62 = 0;
        if (v47)
          v63 = "\n";
        else
          v63 = "";
        do
        {
          v58 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v58 & 1, v47);
          v64 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v64)
            v64 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if ((*(_QWORD *)v61 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v64 + 17) & 0xFFFFFFFFFFFFFFF8))
          {
            sub_20BDDC0E4(__p, "doc = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v235, (uint64_t)__p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDocumentation(&v236, (uint64_t)__p);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, __p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            sub_20BDDC0E4(__p, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          else
          {
            v65 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v65)
              v65 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if ((*(_QWORD *)v61 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v65 + 31) & 0xFFFFFFFFFFFFFFF8))
            {
              v68 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(&v236);
              v69 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(v68);
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v62, (pxrInternal__aapl__pxrReserved__ *)"permission = %s%s", v69, v63);
            }
            else
            {
              v66 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v66)
                v66 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if ((*(_QWORD *)v61 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v66 + 52) & 0xFFFFFFFFFFFFFFF8))
              {
                pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryFunction(&v236, (unsigned int **)__p);
                v70 = __p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
                if ((__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v71 = (const char *)(v70 + 16);
                  if (*(char *)(v70 + 39) < 0)
                    v71 = *(const char **)v71;
                }
                else
                {
                  v71 = "";
                }
                pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v62, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v71, v63);
                if ((__p[0].__r_.__value_.__s.__data_[0] & 7) != 0)
                {
                  v75 = (unsigned int *)(__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v76 = __ldxr(v75);
                  while (__stlxr(v76 - 2, v75));
                }
              }
              else
              {
                v67 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v67)
                  v67 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if ((*(_QWORD *)v61 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v67 + 16) & 0xFFFFFFFFFFFFFFF8))
                {
                  __p[0].__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetDisplayUnit(&v236);
                  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v72;
                  NameForUnit = pxrInternal__aapl__pxrReserved__::SdfGetNameForUnit((pxrInternal__aapl__pxrReserved__ *)__p, v72);
                  if (*((char *)NameForUnit + 23) >= 0)
                    v74 = (const char *)NameForUnit;
                  else
                    v74 = (const char *)*NameForUnit;
                  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v62, (pxrInternal__aapl__pxrReserved__ *)"displayUnit = %s%s", v74, v63);
                }
                else
                {
                  sub_20C1BA268(a2, v235, &v236, v61);
                }
              }
            }
          }
          v61 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v61 + 8);
        }
        while (v61 != v46);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, v234, v58, v47);
      sub_20BDDC0E4(__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
      v7 = v233;
      v32 = v230;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      sub_20BF4C2D8((uint64_t)&TypeName);
      if (!v228)
      {
LABEL_142:
        if (v32)
          goto LABEL_143;
        goto LABEL_255;
      }
LABEL_134:
      v77 = v7;
      v78 = SHIBYTE(v240.__r_.__value_.__r.__words[2]);
      v79 = v240.__r_.__value_.__r.__words[0];
      v80 = SHIBYTE(v245);
      v81 = (const char *)__dst;
      v82 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)&v236);
      v83 = (const char *)&__dst;
      if (v80 < 0)
        v83 = v81;
      v84 = &v240;
      if (v78 < 0)
        v84 = (std::string *)v79;
      if (*((char *)v82 + 23) >= 0)
        v85 = (const char *)v82;
      else
        v85 = (const char *)*v82;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v234, (pxrInternal__aapl__pxrReserved__ *)"%s%s %s.timeSamples = {\n", (const char *)v84, v83, v85);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteTimeSamples(a2, v234, &v236);
      sub_20BDDC0E4(__p, "}\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v234, (uint64_t)__p);
      v7 = v77;
      if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_142;
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v32)
      {
LABEL_143:
        pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList((unsigned int **)&v236, &v239);
        v86 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)&v236);
        if (sub_20BFE71C4((uint64_t)&v239)
          && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v239 + 16))(v239))
        {
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v239;
          if (*((_QWORD *)&v239 + 1))
          {
            v109 = (unint64_t *)(*((_QWORD *)&v239 + 1) + 8);
            do
              v110 = __ldxr(v109);
            while (__stxr(v110 + 1, v109));
          }
          LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 2;
          if (sub_20BFE7238((uint64_t)__p))
          {
            sub_20BDDC0E4(&TypeName, "delete ");
            sub_20C1BEF70(a2, v234, (unsigned int *)__p, (uint64_t)&TypeName, (uint64_t)&v240, (uint64_t)&__dst, (uint64_t)v86);
            if (v248 < 0)
              operator delete(TypeName);
          }
          v111 = v239;
          if (*((_QWORD *)&v239 + 1))
          {
            v112 = (unint64_t *)(*((_QWORD *)&v239 + 1) + 8);
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          v114 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v111;
          if (v114)
          {
            v115 = (unint64_t *)&v114->__shared_owners_;
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 1;
          if (sub_20BFE7238((uint64_t)__p))
          {
            sub_20BDDC0E4(&TypeName, "add ");
            sub_20C1BEF70(a2, v234, (unsigned int *)__p, (uint64_t)&TypeName, (uint64_t)&v240, (uint64_t)&__dst, (uint64_t)v86);
            if (v248 < 0)
              operator delete(TypeName);
          }
          v117 = v239;
          if (*((_QWORD *)&v239 + 1))
          {
            v118 = (unint64_t *)(*((_QWORD *)&v239 + 1) + 8);
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
          }
          v120 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v117;
          if (v120)
          {
            v121 = (unint64_t *)&v120->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 4;
          if (sub_20BFE7238((uint64_t)__p))
          {
            sub_20BDDC0E4(&TypeName, "prepend ");
            sub_20C1BEF70(a2, v234, (unsigned int *)__p, (uint64_t)&TypeName, (uint64_t)&v240, (uint64_t)&__dst, (uint64_t)v86);
            if (v248 < 0)
              operator delete(TypeName);
          }
          v123 = v239;
          if (*((_QWORD *)&v239 + 1))
          {
            v124 = (unint64_t *)(*((_QWORD *)&v239 + 1) + 8);
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          v126 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v123;
          if (v126)
          {
            v127 = (unint64_t *)&v126->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
          LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 5;
          if (sub_20BFE7238((uint64_t)__p))
          {
            sub_20BDDC0E4(&TypeName, "append ");
            sub_20C1BEF70(a2, v234, (unsigned int *)__p, (uint64_t)&TypeName, (uint64_t)&v240, (uint64_t)&__dst, (uint64_t)v86);
            if (v248 < 0)
              operator delete(TypeName);
          }
          v129 = v239;
          if (*((_QWORD *)&v239 + 1))
          {
            v130 = (unint64_t *)(*((_QWORD *)&v239 + 1) + 8);
            do
              v131 = __ldxr(v130);
            while (__stxr(v131 + 1, v130));
          }
          v132 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v129;
          if (v132)
          {
            v133 = (unint64_t *)&v132->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 3;
          if (sub_20BFE7238((uint64_t)__p))
          {
            sub_20BDDC0E4(&TypeName, "reorder ");
            sub_20C1BEF70(a2, v234, (unsigned int *)__p, (uint64_t)&TypeName, (uint64_t)&v240, (uint64_t)&__dst, (uint64_t)v86);
            if (v248 < 0)
              operator delete(TypeName);
          }
          v89 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          if (__p[0].__r_.__value_.__l.__size_)
          {
            v135 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
            do
              v91 = __ldaxr(v135);
            while (__stlxr(v91 - 1, v135));
            goto LABEL_248;
          }
        }
        else
        {
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v239;
          if (*((_QWORD *)&v239 + 1))
          {
            v87 = (unint64_t *)(*((_QWORD *)&v239 + 1) + 8);
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 0;
          sub_20BDDC0E4(&TypeName, "");
          sub_20C1BEF70(a2, v234, (unsigned int *)__p, (uint64_t)&TypeName, (uint64_t)&v240, (uint64_t)&__dst, (uint64_t)v86);
          if (v248 < 0)
            operator delete(TypeName);
          v89 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          if (__p[0].__r_.__value_.__l.__size_)
          {
            v90 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
LABEL_248:
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
        }
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v239 + 1);
        if (*((_QWORD *)&v239 + 1))
        {
          v137 = (unint64_t *)(*((_QWORD *)&v239 + 1) + 8);
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
      }
LABEL_255:
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v243;
      sub_20BEEB2B8((void ***)__p);
      if (SHIBYTE(v245) < 0)
        operator delete((void *)__dst);
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      v139 = (unsigned int **)&v236;
LABEL_413:
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v139);
      ++v7;
    }
    while (v7 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v231);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v237;
  sub_20BFE69E4((void ***)__p);
}

void sub_20C1BE1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a33 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a19);
  *(_QWORD *)(v39 - 120) = &a21;
  sub_20BFE69E4((void ***)(v39 - 120));
  _Unwind_Resume(a1);
}

void sub_20C1BE514(unsigned int **a1, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  unsigned int *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v18;
  unsigned int v19;
  unsigned int *v20;
  char v21;
  unsigned int *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  unsigned int *v24;
  int v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  int v27;
  unsigned int **v28;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v29;
  unsigned int v30;
  char v31;
  unsigned int *v32;
  char v33;
  int v34;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v35;
  unsigned int *v36;
  unsigned int **v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v38;
  BOOL v40;
  uint64_t v41;
  unsigned int **v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unsigned int **v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int **v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int **v60;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int **v64;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int **v70;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v71;
  unsigned int v72;
  unsigned int **v73;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int **v78;
  unsigned int **v79;
  unsigned int **v80;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v81;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v82;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v83;

  v6 = a2;
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1;
  v79 = a2;
  v80 = a1;
  while (2)
  {
    v8 = (char *)v6 - (char *)v7;
    v9 = ((char *)v6 - (char *)v7) >> 3;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v79 = v6 - 1;
        if (sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6 - 1, v7))
          sub_20BFE6458(&v80, &v79);
        return;
      case 3uLL:
        v79 = v6 - 1;
        sub_20BFE6590((unsigned int **)v7, (unsigned int **)v7 + 1, v6 - 1);
        return;
      case 4uLL:
        v79 = v6 - 1;
        sub_20BFE694C((unsigned int **)v7, (unsigned int **)v7 + 1, (unsigned int **)v7 + 2, v6 - 1);
        return;
      case 5uLL:
        v79 = v6 - 1;
        sub_20BFE64CC((unsigned int **)v7, (unsigned int **)v7 + 1, (unsigned int **)v7 + 2, (unsigned int **)v7 + 3, v6 - 1);
        return;
      default:
        if (v8 <= 191)
        {
          v38 = v7 + 1;
          v40 = v7 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6
             || v38 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6;
          if ((a4 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = (unsigned int **)v7;
              do
              {
                v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42;
                v42 = (unsigned int **)v38;
                if (sub_20BFE62D8(v38, v43))
                {
                  v44 = *v42;
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v44;
                  if (v44)
                  {
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 + 1, v44));
                  }
                  v46 = v41;
                  while (1)
                  {
                    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)((char *)v7 + v46 + 8), (unsigned int **)((char *)v7 + v46));
                    if (!v46)
                      break;
                    v47 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)((char *)v7 + v46 - 8));
                    v46 -= 8;
                    if ((v47 & 1) == 0)
                    {
                      v48 = (unsigned int **)((char *)v7 + v46 + 8);
                      goto LABEL_81;
                    }
                  }
                  v48 = (unsigned int **)v7;
LABEL_81:
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v48, (unsigned int **)&v83);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
                }
                v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v42 + 1);
                v41 += 8;
              }
              while (v42 + 1 != v6);
            }
          }
          else if (!v40)
          {
            do
            {
              v75 = (unsigned int **)v38;
              if (sub_20BFE62D8(v38, v7))
              {
                v76 = *v75;
                v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v76;
                if (v76)
                {
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 + 1, v76));
                }
                do
                {
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 + 1, (unsigned int **)v7);
                  --v7;
                }
                while ((sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83, v7) & 1) != 0);
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 + 1, (unsigned int **)&v83);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
              }
              v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v75 + 1);
              v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75;
            }
            while (v75 + 1 != v6);
          }
        }
        else if (a3)
        {
          v10 = v9 >> 1;
          v11 = v6 - 1;
          if ((unint64_t)v8 < 0x401)
          {
            sub_20BFE6590((unsigned int **)&v7[v9 >> 1], (unsigned int **)v7, v11);
          }
          else
          {
            sub_20BFE6590((unsigned int **)v7, (unsigned int **)&v7[v9 >> 1], v11);
            v12 = 8 * v10 - 8;
            sub_20BFE6590(v80 + 1, (unsigned int **)((char *)v80 + v12), v79 - 2);
            v13 = 8 * v10 + 8;
            sub_20BFE6590(v80 + 2, (unsigned int **)((char *)v80 + v13), v79 - 3);
            sub_20BFE6590((unsigned int **)((char *)v80 + v12), &v80[v10], (unsigned int **)((char *)v80 + v13));
            v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80[v10];
            sub_20BFE6640(&v80, (unsigned int ***)&v83);
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v14 = (unsigned int *)v79;
          }
          else
          {
            v15 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80);
            v14 = (unsigned int *)v79;
            if ((v15 & 1) == 0)
            {
              v28 = v80;
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v79;
              v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
              v29 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v80;
              v81 = v29;
              if (v29)
              {
                do
                  v30 = __ldaxr((unsigned int *)v29);
                while (__stlxr(v30 + 1, (unsigned int *)v29));
                v14 = (unsigned int *)v82;
              }
              v31 = sub_20BFE62D8(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v14 - 1);
              v32 = (unsigned int *)(v83 + 1);
              if ((v31 & 1) != 0)
              {
                do
                {
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32;
                  v33 = sub_20BFE62D8(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32);
                  v32 += 2;
                }
                while ((v33 & 1) == 0);
              }
              else
              {
                do
                {
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32;
                  if (v32 >= (unsigned int *)v82)
                    break;
                  v34 = sub_20BFE62D8(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32);
                  v32 += 2;
                }
                while (!v34);
              }
              v36 = (unsigned int *)v82;
              v35 = v83;
              if (v83 < v82)
              {
                do
                {
                  v36 -= 2;
                  v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36;
                }
                while ((sub_20BFE62D8(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36) & 1) != 0);
                v35 = v83;
              }
              if (v35 < (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36)
              {
                do
                {
                  sub_20BFE6458((unsigned int ***)&v83, (unsigned int ***)&v82);
                  do
                    ++v83;
                  while (!sub_20BFE62D8(&v81, v83));
                  do
                    --v82;
                  while ((sub_20BFE62D8(&v81, v82) & 1) != 0);
                  v35 = v83;
                }
                while (v83 < v82);
              }
              v37 = (unsigned int **)(v35 - 1);
              if (v35 - 1 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v28)
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v28, (unsigned int **)v35 - 1);
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v37, (unsigned int **)&v81);
              v7 = v83;
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v81);
              goto LABEL_53;
            }
          }
          v16 = (unsigned int *)v80;
          v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v14;
          v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
          v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v80;
          v81 = v17;
          v18 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
          if (v17)
          {
            do
              v19 = __ldaxr((unsigned int *)v17);
            while (__stlxr(v19 + 1, (unsigned int *)v17));
            v18 = v83;
          }
          v20 = (unsigned int *)(v18 + 1);
          do
          {
            v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v20;
            v21 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v20, &v81);
            v20 += 2;
          }
          while ((v21 & 1) != 0);
          v22 = (unsigned int *)v82;
          v23 = v83;
          if (v83 - 1 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16)
          {
            do
            {
              if (v23 >= (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22)
                break;
              v22 -= 2;
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22;
            }
            while ((sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22, &v81) & 1) == 0);
          }
          else
          {
            v24 = (unsigned int *)(v82 - 1);
            do
            {
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v24;
              v25 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v24, &v81);
              v24 -= 2;
            }
            while (!v25);
            v23 = v83;
          }
          v26 = v82;
          v7 = v23;
          if (v23 < v82)
          {
            do
            {
              sub_20BFE6458((unsigned int ***)&v83, (unsigned int ***)&v82);
              do
                ++v83;
              while ((sub_20BFE62D8(v83, &v81) & 1) != 0);
              do
                --v82;
              while (!sub_20BFE62D8(v82, &v81));
              v7 = v83;
            }
            while (v83 < v82);
          }
          if (v7 - 1 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16)
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v16, (unsigned int **)v7 - 1);
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 - 1, (unsigned int **)&v81);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v81);
          if (v23 < v26)
          {
LABEL_30:
            sub_20C1BE514(v80, v7 - 1, a3, a4 & 1);
LABEL_53:
            a4 = 0;
LABEL_54:
            v80 = (unsigned int **)v7;
            goto LABEL_55;
          }
          v27 = sub_20C1BEDB0(v80, (unsigned int **)v7 - 1);
          if (!sub_20C1BEDB0((unsigned int **)v7, v79))
          {
            if (v27)
              goto LABEL_54;
            goto LABEL_30;
          }
          if ((v27 & 1) == 0)
          {
            v79 = (unsigned int **)(v7 - 1);
            v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
LABEL_55:
            v6 = v79;
            continue;
          }
        }
        else if (v7 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6)
        {
          v78 = v6;
          v49 = (v9 - 2) >> 1;
          v50 = v49;
          do
          {
            v51 = v50;
            if (v49 >= v50)
            {
              v52 = (2 * v50) | 1;
              v53 = &v7[v52];
              if (2 * v50 + 2 < (uint64_t)v9 && sub_20BFE62D8(&v7[v52], v53 + 1))
              {
                ++v53;
                v52 = 2 * v51 + 2;
              }
              v54 = (unsigned int **)&v7[v51];
              if ((sub_20BFE62D8(v53, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v54) & 1) == 0)
              {
                v55 = *v54;
                v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v55;
                if (v55)
                {
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 + 1, v55));
                }
                do
                {
                  v57 = (unsigned int **)v53;
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v54, (unsigned int **)v53);
                  if (v49 < v52)
                    break;
                  v58 = (2 * v52) | 1;
                  v53 = &v7[v58];
                  v52 = 2 * v52 + 2;
                  if (v52 >= (uint64_t)v9)
                  {
                    v52 = v58;
                  }
                  else if (sub_20BFE62D8(&v7[v58], v53 + 1))
                  {
                    ++v53;
                  }
                  else
                  {
                    v52 = v58;
                  }
                  v54 = v57;
                }
                while (!sub_20BFE62D8(v53, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83));
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v57, (unsigned int **)&v83);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
              }
            }
            v50 = v51 - 1;
          }
          while (v51);
          v59 = (unint64_t)v8 >> 3;
          v60 = v78;
          do
          {
            v61 = *v7;
            v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v61;
            if (v61)
            {
              do
                v62 = __ldaxr((unsigned int *)v61);
              while (__stlxr(v62 + 1, (unsigned int *)v61));
            }
            v63 = 0;
            v64 = (unsigned int **)v7;
            do
            {
              v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v64[v63 + 1];
              v66 = 2 * v63;
              v63 = (2 * v63) | 1;
              v67 = v66 + 2;
              if (v66 + 2 < v59 && sub_20BFE62D8(v65, v65 + 1))
              {
                ++v65;
                v63 = v67;
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v64, (unsigned int **)v65);
              v64 = (unsigned int **)v65;
            }
            while (v63 <= (uint64_t)((unint64_t)(v59 - 2) >> 1));
            if (v65 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)--v60)
            {
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, (unsigned int **)&v82);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, v60);
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v60, (unsigned int **)&v82);
              v68 = (char *)v65 - (char *)v7 + 8;
              if (v68 >= 9)
              {
                v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                v70 = (unsigned int **)&v7[v69];
                if (sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v70, v65))
                {
                  v71 = *v65;
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v71;
                  if (v71)
                  {
                    do
                      v72 = __ldaxr((unsigned int *)v71);
                    while (__stlxr(v72 + 1, (unsigned int *)v71));
                  }
                  do
                  {
                    v73 = v70;
                    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, v70);
                    if (!v69)
                      break;
                    v69 = (v69 - 1) >> 1;
                    v70 = (unsigned int **)&v7[v69];
                    v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v73;
                  }
                  while ((sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v70, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83) & 1) != 0);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v73, (unsigned int **)&v83);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v82);
          }
          while (v59-- > 2);
        }
        return;
    }
  }
}

void sub_20C1BED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1BEDB0(unsigned int **a1, unsigned int **a2)
{
  _BOOL8 v4;
  unsigned int **v5;
  unsigned int **v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int **v10;
  unsigned int *v12;
  unsigned int **v13;
  unsigned int **v14;

  v13 = a2;
  v14 = a1;
  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v13 = a2 - 1;
      if (sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))sub_20BFE6458(&v14, &v13);
      return v4;
    case 3:
      sub_20BFE6590(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_20BFE694C(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_20BFE64CC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v5 = a1 + 2;
      sub_20BFE6590(a1, a1 + 1, a1 + 2);
      v6 = a1 + 3;
      if (v6 == a2)
        return 1;
      v7 = 0;
      break;
  }
  while (!sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5))
  {
LABEL_13:
    v5 = v6++;
    if (v6 == v13)
      return 1;
  }
  v8 = *v6;
  v12 = v8;
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  do
  {
    v10 = v5;
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5 + 1, v5);
    if (v5 == v14)
      break;
    --v5;
  }
  while ((sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10 - 1) & 1) != 0);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v10, &v12);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    goto LABEL_13;
  }
  v4 = v6 + 1 == v13;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
  return v4;
}

void sub_20C1BEF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_20C1BEF70(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  unsigned int *v14;
  void *v15[2];
  char v16;
  void *__p[2];
  uint64_t v18;
  _QWORD v19[3];

  if (*(char *)(a4 + 23) >= 0)
    v10 = (const char *)a4;
  else
    v10 = *(const char **)a4;
  if (*(char *)(a5 + 23) >= 0)
    v11 = (const char *)a5;
  else
    v11 = *(const char **)a5;
  if (*(char *)(a6 + 23) >= 0)
    v12 = (const char *)a6;
  else
    v12 = *(const char **)a6;
  if (*(char *)(a7 + 23) >= 0)
    v13 = (const char *)a7;
  else
    v13 = *(const char **)a7;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s %s.connect = ", v10, v11, v12, v13);
  if (sub_20BFE7238((uint64_t)a3))
  {
    if (sub_20BFE7238((uint64_t)a3) == 1)
    {
      sub_20BFE7400(a3, 0, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a1, 0, (pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      sub_20BDDC0E4(__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
    }
    else
    {
      sub_20BDDC0E4(__p, "[\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      v19[1] = 0;
      v19[2] = 0;
      if (sub_20BFE738C((uint64_t)a3))
        v14 = a3;
      else
        v14 = 0;
      __p[1] = v14;
      v18 = 0;
      sub_20BFE7490((uint64_t)a3, (uint64_t)v19);
      while (!sub_20BFE74F8((uint64_t)__p, (uint64_t)v19))
      {
        sub_20BFE7288((uint64_t)__p, v15);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v15 + 1);
        sub_20BFD265C(v15);
        sub_20BDDC0E4(v15, ",\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)v15);
        if (v16 < 0)
          operator delete(v15[0]);
        sub_20BFE730C((uint64_t)__p);
      }
      sub_20BDDC0E4(__p, "]\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
    }
  }
  else
  {
    sub_20BDDC0E4(__p, "None\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_20C1BF1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1BF218(unsigned int *a1, _QWORD *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  int v9;
  int v10;

  if ((unint64_t)sub_20BFE7238((uint64_t)a1) < 2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = ");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = [\n");
    ++a3;
  }
  if (sub_20BFE7238((uint64_t)a1))
  {
    v8 = 0;
    do
    {
      if ((unint64_t)sub_20BFE7238((uint64_t)a1) >= 2)
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"");
      sub_20BFE7400(a1, v8, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a2, 0, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
      sub_20BFD265C(&v9);
      if ((unint64_t)sub_20BFE7238((uint64_t)a1) >= 2)
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)",\n");
      ++v8;
    }
    while (v8 < sub_20BFE7238((uint64_t)a1));
  }
  if ((unint64_t)sub_20BFE7238((uint64_t)a1) > 1)
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3 - 1, (pxrInternal__aapl__pxrReserved__ *)"]");
  if ((a4 & 2) == 0)
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
}

void sub_20C1BF388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C1BF39C(unsigned int **a1, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  BOOL v15;
  unsigned int *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v18;
  unsigned int v19;
  unsigned int *v20;
  BOOL v21;
  unsigned int *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  unsigned int *v24;
  _BOOL4 v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  int v27;
  unsigned int **v28;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v29;
  unsigned int v30;
  BOOL v31;
  unsigned int *v32;
  BOOL v33;
  _BOOL4 v34;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v35;
  unsigned int *v36;
  unsigned int **v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v38;
  BOOL v40;
  uint64_t v41;
  unsigned int **v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  BOOL v47;
  unsigned int **v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int **v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int **v60;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int **v64;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int **v70;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v71;
  unsigned int v72;
  unsigned int **v73;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int **v78;
  unsigned int **v79;
  unsigned int **v80;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v81;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v82;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v83;

  v6 = a2;
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1;
  v79 = a2;
  v80 = a1;
  while (2)
  {
    v8 = (char *)v6 - (char *)v7;
    v9 = ((char *)v6 - (char *)v7) >> 3;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v79 = v6 - 1;
        if (sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6 - 1, v7))
          sub_20BFE8218(&v80, &v79);
        return;
      case 3uLL:
        v79 = v6 - 1;
        sub_20C1BFDE8((unsigned int **)v7, (unsigned int **)v7 + 1, v6 - 1);
        return;
      case 4uLL:
        v79 = v6 - 1;
        sub_20C1C0058((unsigned int **)v7, (unsigned int **)v7 + 1, (unsigned int **)v7 + 2, v6 - 1);
        return;
      case 5uLL:
        v79 = v6 - 1;
        sub_20C1BFD24((unsigned int **)v7, (unsigned int **)v7 + 1, (unsigned int **)v7 + 2, (unsigned int **)v7 + 3, v6 - 1);
        return;
      default:
        if (v8 <= 191)
        {
          v38 = v7 + 1;
          v40 = v7 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6
             || v38 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6;
          if ((a4 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = (unsigned int **)v7;
              do
              {
                v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42;
                v42 = (unsigned int **)v38;
                if (sub_20C1BFC38(v38, v43))
                {
                  v44 = *v42;
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v44;
                  if (v44)
                  {
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 + 1, v44));
                  }
                  v46 = v41;
                  while (1)
                  {
                    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)((char *)v7 + v46 + 8), (unsigned int **)((char *)v7 + v46));
                    if (!v46)
                      break;
                    v47 = sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)((char *)v7 + v46 - 8));
                    v46 -= 8;
                    if (!v47)
                    {
                      v48 = (unsigned int **)((char *)v7 + v46 + 8);
                      goto LABEL_81;
                    }
                  }
                  v48 = (unsigned int **)v7;
LABEL_81:
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v48, (unsigned int **)&v83);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
                }
                v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v42 + 1);
                v41 += 8;
              }
              while (v42 + 1 != v6);
            }
          }
          else if (!v40)
          {
            do
            {
              v75 = (unsigned int **)v38;
              if (sub_20C1BFC38(v38, v7))
              {
                v76 = *v75;
                v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v76;
                if (v76)
                {
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 + 1, v76));
                }
                do
                {
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 + 1, (unsigned int **)v7);
                  --v7;
                }
                while (sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83, v7));
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 + 1, (unsigned int **)&v83);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
              }
              v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v75 + 1);
              v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75;
            }
            while (v75 + 1 != v6);
          }
        }
        else if (a3)
        {
          v10 = v9 >> 1;
          v11 = v6 - 1;
          if ((unint64_t)v8 < 0x401)
          {
            sub_20C1BFDE8((unsigned int **)&v7[v9 >> 1], (unsigned int **)v7, v11);
          }
          else
          {
            sub_20C1BFDE8((unsigned int **)v7, (unsigned int **)&v7[v9 >> 1], v11);
            v12 = 8 * v10 - 8;
            sub_20C1BFDE8(v80 + 1, (unsigned int **)((char *)v80 + v12), v79 - 2);
            v13 = 8 * v10 + 8;
            sub_20C1BFDE8(v80 + 2, (unsigned int **)((char *)v80 + v13), v79 - 3);
            sub_20C1BFDE8((unsigned int **)((char *)v80 + v12), &v80[v10], (unsigned int **)((char *)v80 + v13));
            v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80[v10];
            sub_20BFE8400(&v80, (unsigned int ***)&v83);
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v14 = (unsigned int *)v79;
          }
          else
          {
            v15 = sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80);
            v14 = (unsigned int *)v79;
            if (!v15)
            {
              v28 = v80;
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v79;
              v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
              v29 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v80;
              v81 = v29;
              if (v29)
              {
                do
                  v30 = __ldaxr((unsigned int *)v29);
                while (__stlxr(v30 + 1, (unsigned int *)v29));
                v14 = (unsigned int *)v82;
              }
              v31 = sub_20C1BFC38(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v14 - 1);
              v32 = (unsigned int *)(v83 + 1);
              if (v31)
              {
                do
                {
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32;
                  v33 = sub_20C1BFC38(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32);
                  v32 += 2;
                }
                while (!v33);
              }
              else
              {
                do
                {
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32;
                  if (v32 >= (unsigned int *)v82)
                    break;
                  v34 = sub_20C1BFC38(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32);
                  v32 += 2;
                }
                while (!v34);
              }
              v36 = (unsigned int *)v82;
              v35 = v83;
              if (v83 < v82)
              {
                do
                {
                  v36 -= 2;
                  v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36;
                }
                while (sub_20C1BFC38(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36));
                v35 = v83;
              }
              if (v35 < (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36)
              {
                do
                {
                  sub_20BFE8218((unsigned int ***)&v83, (unsigned int ***)&v82);
                  do
                    ++v83;
                  while (!sub_20C1BFC38(&v81, v83));
                  do
                    --v82;
                  while (sub_20C1BFC38(&v81, v82));
                  v35 = v83;
                }
                while (v83 < v82);
              }
              v37 = (unsigned int **)(v35 - 1);
              if (v35 - 1 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v28)
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v28, (unsigned int **)v35 - 1);
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v37, (unsigned int **)&v81);
              v7 = v83;
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v81);
              goto LABEL_53;
            }
          }
          v16 = (unsigned int *)v80;
          v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v14;
          v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
          v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v80;
          v81 = v17;
          v18 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
          if (v17)
          {
            do
              v19 = __ldaxr((unsigned int *)v17);
            while (__stlxr(v19 + 1, (unsigned int *)v17));
            v18 = v83;
          }
          v20 = (unsigned int *)(v18 + 1);
          do
          {
            v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v20;
            v21 = sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v20, &v81);
            v20 += 2;
          }
          while (v21);
          v22 = (unsigned int *)v82;
          v23 = v83;
          if (v83 - 1 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16)
          {
            do
            {
              if (v23 >= (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22)
                break;
              v22 -= 2;
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22;
            }
            while (!sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22, &v81));
          }
          else
          {
            v24 = (unsigned int *)(v82 - 1);
            do
            {
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v24;
              v25 = sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v24, &v81);
              v24 -= 2;
            }
            while (!v25);
            v23 = v83;
          }
          v26 = v82;
          v7 = v23;
          if (v23 < v82)
          {
            do
            {
              sub_20BFE8218((unsigned int ***)&v83, (unsigned int ***)&v82);
              do
                ++v83;
              while (sub_20C1BFC38(v83, &v81));
              do
                --v82;
              while (!sub_20C1BFC38(v82, &v81));
              v7 = v83;
            }
            while (v83 < v82);
          }
          if (v7 - 1 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16)
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v16, (unsigned int **)v7 - 1);
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 - 1, (unsigned int **)&v81);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v81);
          if (v23 < v26)
          {
LABEL_30:
            sub_20C1BF39C(v80, v7 - 1, a3, a4 & 1);
LABEL_53:
            a4 = 0;
LABEL_54:
            v80 = (unsigned int **)v7;
            goto LABEL_55;
          }
          v27 = sub_20C1BFE98(v80, (unsigned int **)v7 - 1);
          if (!sub_20C1BFE98((unsigned int **)v7, v79))
          {
            if (v27)
              goto LABEL_54;
            goto LABEL_30;
          }
          if ((v27 & 1) == 0)
          {
            v79 = (unsigned int **)(v7 - 1);
            v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
LABEL_55:
            v6 = v79;
            continue;
          }
        }
        else if (v7 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6)
        {
          v78 = v6;
          v49 = (v9 - 2) >> 1;
          v50 = v49;
          do
          {
            v51 = v50;
            if (v49 >= v50)
            {
              v52 = (2 * v50) | 1;
              v53 = &v7[v52];
              if (2 * v50 + 2 < (uint64_t)v9 && sub_20C1BFC38(&v7[v52], v53 + 1))
              {
                ++v53;
                v52 = 2 * v51 + 2;
              }
              v54 = (unsigned int **)&v7[v51];
              if (!sub_20C1BFC38(v53, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v54))
              {
                v55 = *v54;
                v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v55;
                if (v55)
                {
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 + 1, v55));
                }
                do
                {
                  v57 = (unsigned int **)v53;
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v54, (unsigned int **)v53);
                  if (v49 < v52)
                    break;
                  v58 = (2 * v52) | 1;
                  v53 = &v7[v58];
                  v52 = 2 * v52 + 2;
                  if (v52 >= (uint64_t)v9)
                  {
                    v52 = v58;
                  }
                  else if (sub_20C1BFC38(&v7[v58], v53 + 1))
                  {
                    ++v53;
                  }
                  else
                  {
                    v52 = v58;
                  }
                  v54 = v57;
                }
                while (!sub_20C1BFC38(v53, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83));
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v57, (unsigned int **)&v83);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
              }
            }
            v50 = v51 - 1;
          }
          while (v51);
          v59 = (unint64_t)v8 >> 3;
          v60 = v78;
          do
          {
            v61 = *v7;
            v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v61;
            if (v61)
            {
              do
                v62 = __ldaxr((unsigned int *)v61);
              while (__stlxr(v62 + 1, (unsigned int *)v61));
            }
            v63 = 0;
            v64 = (unsigned int **)v7;
            do
            {
              v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v64[v63 + 1];
              v66 = 2 * v63;
              v63 = (2 * v63) | 1;
              v67 = v66 + 2;
              if (v66 + 2 < v59 && sub_20C1BFC38(v65, v65 + 1))
              {
                ++v65;
                v63 = v67;
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v64, (unsigned int **)v65);
              v64 = (unsigned int **)v65;
            }
            while (v63 <= (uint64_t)((unint64_t)(v59 - 2) >> 1));
            if (v65 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)--v60)
            {
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, (unsigned int **)&v82);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, v60);
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v60, (unsigned int **)&v82);
              v68 = (char *)v65 - (char *)v7 + 8;
              if (v68 >= 9)
              {
                v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                v70 = (unsigned int **)&v7[v69];
                if (sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v70, v65))
                {
                  v71 = *v65;
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v71;
                  if (v71)
                  {
                    do
                      v72 = __ldaxr((unsigned int *)v71);
                    while (__stlxr(v72 + 1, (unsigned int *)v71));
                  }
                  do
                  {
                    v73 = v70;
                    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, v70);
                    if (!v69)
                      break;
                    v69 = (v69 - 1) >> 1;
                    v70 = (unsigned int **)&v7[v69];
                    v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v73;
                  }
                  while (sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v70, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83));
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v73, (unsigned int **)&v83);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v82);
          }
          while (v59-- > 2);
        }
        return;
    }
  }
}

void sub_20C1BFBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C1BFC38(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  int v5;
  void *v6;
  unsigned __int8 v7;
  size_t v8;
  void **v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  _QWORD v15[2];
  unsigned __int8 v16;
  void *__p[2];
  unsigned __int8 v18;

  v3 = sub_20BFE8634(a1);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v3, (uint64_t)__p);
  v4 = sub_20BFE8634(a2);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v4, (uint64_t)v15);
  v5 = (char)v16;
  v6 = (void *)v15[0];
  v7 = v18;
  if ((v18 & 0x80u) == 0)
    v8 = v18;
  else
    v8 = (size_t)__p[1];
  if ((v18 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v10 = v16;
  else
    v10 = v15[1];
  if ((v16 & 0x80u) == 0)
    v11 = v15;
  else
    v11 = (_QWORD *)v15[0];
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v5 < 0)
  {
    operator delete(v6);
    if ((v18 & 0x80) == 0)
      goto LABEL_18;
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if (v13)
    return v13 < 0;
  else
    return v8 < v10;
}

void sub_20C1BFD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1BFD24(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int **v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  unsigned int **v14;

  v13 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v14 = a1;
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4;
  v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  v10 = a5;
  sub_20C1C0058(a1, a2, a3, a4);
  if (sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4))
  {
    sub_20BFE8218((unsigned int ***)&v11, &v10);
    if (sub_20C1BFC38(v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
    {
      sub_20BFE8218((unsigned int ***)&v12, (unsigned int ***)&v11);
      if (sub_20C1BFC38(v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
      {
        sub_20BFE8218((unsigned int ***)&v13, (unsigned int ***)&v12);
        if (sub_20C1BFC38(v13, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
          sub_20BFE8218(&v14, (unsigned int ***)&v13);
      }
    }
  }
}

void sub_20C1BFDE8(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  BOOL v5;
  _BOOL4 v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity ***v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity ***v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;

  v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1;
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  v5 = sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1);
  v6 = sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
  if (v5)
  {
    if (v6)
    {
      v7 = &v11;
    }
    else
    {
      sub_20BFE8218((unsigned int ***)&v11, (unsigned int ***)&v10);
      if (!sub_20C1BFC38(v9, v10))
        return;
      v7 = &v10;
    }
    v8 = &v9;
    goto LABEL_10;
  }
  if (v6)
  {
    sub_20BFE8218((unsigned int ***)&v10, (unsigned int ***)&v9);
    if (sub_20C1BFC38(v10, v11))
    {
      v7 = &v11;
      v8 = &v10;
LABEL_10:
      sub_20BFE8218((unsigned int ***)v7, (unsigned int ***)v8);
    }
  }
}

uint64_t sub_20C1BFE98(unsigned int **a1, unsigned int **a2)
{
  _BOOL8 v4;
  unsigned int **v5;
  unsigned int **v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int **v10;
  unsigned int *v12;
  unsigned int **v13;
  unsigned int **v14;

  v13 = a2;
  v14 = a1;
  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v13 = a2 - 1;
      if (sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
      {
        sub_20BFE8218(&v14, &v13);
      }
      return v4;
    case 3:
      sub_20C1BFDE8(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_20C1C0058(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_20C1BFD24(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v5 = a1 + 2;
      sub_20C1BFDE8(a1, a1 + 1, a1 + 2);
      v6 = a1 + 3;
      if (v6 == a2)
        return 1;
      v7 = 0;
      break;
  }
  while (!sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5))
  {
LABEL_13:
    v5 = v6++;
    if (v6 == v13)
      return 1;
  }
  v8 = *v6;
  v12 = v8;
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  do
  {
    v10 = v5;
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5 + 1, v5);
    if (v5 == v14)
      break;
    --v5;
  }
  while (sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10 - 1));
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v10, &v12);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    goto LABEL_13;
  }
  v4 = v6 + 1 == v13;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
  return v4;
}

void sub_20C1C0040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_20C1C0058(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  unsigned int **v11;

  v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v11 = a1;
  v8 = a4;
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  sub_20C1BFDE8(a1, a2, a3);
  if (sub_20C1BFC38((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
  {
    sub_20BFE8218((unsigned int ***)&v9, &v8);
    if (sub_20C1BFC38(v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
    {
      sub_20BFE8218((unsigned int ***)&v10, (unsigned int ***)&v9);
      if (sub_20C1BFC38(v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
        sub_20BFE8218(&v11, (unsigned int ***)&v10);
    }
  }
}

uint64_t sub_20C1C00F0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  sub_20C1C0138(a1, a1 + 64);
  sub_20BDDBD68(v2);
  return a1;
}

void sub_20C1C0124(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  sub_20BFE87A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1C0138(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;

  sub_20BFDEF88(a2, &v10);
  v11 = v10;
  v10 = 0uLL;
  sub_20BFDF084(a1, (uint64_t)&v11);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_20C1C01F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C0210()
{
  sub_20C1C0278();
  return sub_20C1C0378();
}

void sub_20C1C0224()
{
  uint64_t v0;

  v0 = MEMORY[0x24BEDB780];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x24BEDB780], (uint64_t)&stru_24C525368, (uint64_t)sub_20C1C0478);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C525368, v0, (uint64_t)sub_20C1C04C0);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<()
{
  return std::ostream::operator<<();
}

uint64_t *sub_20C1C0278()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C525368, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C525368, (char *)8, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C0334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C0378()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C525430, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C525430, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C0434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1C0478@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = result[1];
  if ((v3 & 4) != 0)
    result = (_QWORD *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = (char *)&off_24C5252B0 + 1;
  return result;
}

double sub_20C1C04C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = *(double *)a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType::~SdfTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType::SdfTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "__AnyType__", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C1C0698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::~SdfPathTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  void **v37;

  v37 = (void **)((char *)this + 96);
  sub_20BEEB2B8(&v37);
  v2 = *((_QWORD *)this + 11);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 10);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 9);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 8);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 7);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 6);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 5);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 4);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 3);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 2);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 1);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v35 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::SdfPathTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v49 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "/", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v49, ".", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "/", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, ".", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "[", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "]", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "..", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "mapper", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "expression", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, ".", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, ":", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "", 0);
  v2 = *(_QWORD *)this;
  v50 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v49;
  v51 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v52 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v53 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v54 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v55 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v56 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v57 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v58 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v59 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v60 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v61 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v38 = operator new(0x60uLL);
  v39 = 0;
  *((_QWORD *)this + 12) = v38;
  *((_QWORD *)this + 13) = v38;
  *((_QWORD *)this + 14) = v38 + 12;
  do
  {
    v40 = *(&v50 + v39);
    *v38 = v40;
    if ((v40 & 7) != 0)
    {
      v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 2, v41));
      if ((v42 & 1) == 0)
        *v38 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v39;
    ++v38;
  }
  while (v39 != 12);
  v43 = &v62;
  *((_QWORD *)this + 13) = v38;
  do
  {
    v45 = *--v43;
    v44 = v45;
    if ((v45 & 7) != 0)
    {
      v46 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
  }
  while (v43 != &v50);
  return this;
}

void sub_20C1C0D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10, _QWORD *a11, void **a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;

  sub_20BEEB2B8(&a12);
  v36 = (char *)&a26;
  while (1)
  {
    v38 = *((_QWORD *)v36 - 1);
    v36 -= 8;
    v37 = v38;
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
    if (v36 == &a14)
    {
      if ((*v28 & 7) != 0)
      {
        v41 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v27 & 7) != 0)
      {
        v43 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v35 & 7) != 0)
      {
        v45 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v34 & 7) != 0)
      {
        v47 = (unsigned int *)(*v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v33 & 7) != 0)
      {
        v49 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v32 & 7) != 0)
      {
        v51 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v31 & 7) != 0)
      {
        v53 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v30 & 7) != 0)
      {
        v55 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*v29 & 7) != 0)
      {
        v57 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*a10 & 7) != 0)
      {
        v59 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      if ((*a11 & 7) != 0)
      {
        v61 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v62 = __ldxr(v61);
        while (__stlxr(v62 - 2, v61));
      }
      if ((*v26 & 7) != 0)
      {
        v63 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C1C0F50()
{
  JUMPOUT(0x20C1C0EE0);
}

void sub_20C1C0F58()
{
  JUMPOUT(0x20C1C0F04);
}

void sub_20C1C0F60()
{
  JUMPOUT(0x20C1C0F28);
}

void pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType::~SdfMetadataDisplayGroupTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void **v19;

  v19 = (void **)((char *)this + 48);
  sub_20BEEB2B8(&v19);
  v2 = *((_QWORD *)this + 5);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 4);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 2);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v17 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType::SdfMetadataDisplayGroupTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "Internal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "Direct Manip", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "Pipeline", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "Symmetry", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 5, "User Interface", 0);
  v3 = *this;
  v32 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v32 = v4;
  }
  v6 = *v2;
  v33 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v33 = v7;
  }
  v9 = this[2];
  v34 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v34 = v10;
  }
  v12 = this[3];
  v35 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v35 = v13;
  }
  v15 = this[4];
  v36 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v36 = v16;
  }
  v18 = this[5];
  v37 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v37 = v19;
  }
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  v21 = (unsigned int *)operator new(0x30uLL);
  v22 = 0;
  this[6] = v21;
  this[7] = v21;
  this[8] = v21 + 12;
  do
  {
    v23 = (&v32)[v22];
    *(_QWORD *)v21 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        *(_QWORD *)v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v22;
    v21 += 2;
  }
  while (v22 != 6);
  v26 = (unsigned int **)&v38;
  this[7] = v21;
  do
  {
    v28 = (uint64_t)*--v26;
    v27 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
  }
  while (v26 != &v32);
  return (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)this;
}

void sub_20C1C130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;

  sub_20BEEB2B8(&a10);
  v25 = &a18;
  while (1)
  {
    v27 = *--v25;
    v26 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if (v25 == (uint64_t *)&a12)
    {
      if ((*v23 & 7) != 0)
      {
        v30 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v22 & 7) != 0)
      {
        v32 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      if ((*v21 & 7) != 0)
      {
        v34 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((*v20 & 7) != 0)
      {
        v36 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v19 & 7) != 0)
      {
        v38 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v18 & 7) != 0)
      {
        v40 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType::~SdfValueRoleNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  void **v34;

  v34 = (void **)((char *)this + 88);
  sub_20BEEB2B8(&v34);
  v2 = *((_QWORD *)this + 10);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 9);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 8);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 7);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 6);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 5);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 4);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 3);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 2);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v32 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
}

pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType::SdfValueRoleNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v46 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "Point", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v46, "Normal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "Vector", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "Color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "Frame", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "Transform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "PointIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "EdgeIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "FaceIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "Group", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "TextureCoordinate", 0);
  v2 = *(_QWORD *)this;
  v47 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v46;
  v48 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v49 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v50 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v51 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v52 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v53 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v54 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v55 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v56 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v57 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v35 = operator new(0x58uLL);
  v36 = 0;
  *((_QWORD *)this + 11) = v35;
  *((_QWORD *)this + 12) = v35;
  *((_QWORD *)this + 13) = v35 + 11;
  do
  {
    v37 = *(&v47 + v36);
    *v35 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        *v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v36;
    ++v35;
  }
  while (v36 != 11);
  v40 = &v58;
  *((_QWORD *)this + 12) = v35;
  do
  {
    v42 = *--v40;
    v41 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
  }
  while (v40 != &v47);
  return this;
}

void sub_20C1C1A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;

  sub_20BEEB2B8(&a11);
  v34 = (char *)&a24;
  while (1)
  {
    v36 = *((_QWORD *)v34 - 1);
    v34 -= 8;
    v35 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    if (v34 == &a13)
    {
      if ((*v25 & 7) != 0)
      {
        v39 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v33 & 7) != 0)
      {
        v41 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v32 & 7) != 0)
      {
        v43 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v31 & 7) != 0)
      {
        v45 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v30 & 7) != 0)
      {
        v47 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v29 & 7) != 0)
      {
        v49 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v28 & 7) != 0)
      {
        v51 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v27 & 7) != 0)
      {
        v53 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v26 & 7) != 0)
      {
        v55 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*a10 & 7) != 0)
      {
        v57 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*v24 & 7) != 0)
      {
        v59 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C1C1C1C()
{
  JUMPOUT(0x20C1C1BD0);
}

void sub_20C1C1C24()
{
  JUMPOUT(0x20C1C1BF4);
}

uint64_t *sub_20C1C1C30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::TfType *v4;
  uint64_t v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  sub_20C1C4A98();
  sub_20C1C4B98();
  sub_20C1C4C98();
  sub_20C1C4D98();
  v0 = sub_20C1C4E98();
  v1 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_20BDDC0E4(__p, "SdfTimeSampleMap");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  sub_20C1C4F98();
  v2 = sub_20C1C5098();
  v3 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v2);
  sub_20BDDC0E4(__p, "SdfRelocatesMap");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v3, (char *)__p);
  v5 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot(v4);
  sub_20BDDC0E4(v7, "map<SdfPath, SdfPath>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v5, (char *)v7);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(__p[0]);
  sub_20C1C5198();
  return sub_20C1C5298();
}

void sub_20C1C1D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20C1C1D60()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C5298C8, (uint64_t)&unk_24C51B650, (uint64_t)sub_20C1C5398);
  v0 = MEMORY[0x24BEDB798];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x24BEDB798], (uint64_t)&stru_24C5298C8, (uint64_t)sub_20C1C53FC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C5298C8, v0, (uint64_t)sub_20C1C5448);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C527CB0, (uint64_t)&unk_24C51B650, (uint64_t)sub_20C1C5494);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(v0, (uint64_t)&stru_24C527CB0, (uint64_t)sub_20C1C54F8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C527CB0, v0, (uint64_t)sub_20C1C5544);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C5269D8, (uint64_t)&unk_24C51B650, (uint64_t)sub_20C1C5590);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(v0, (uint64_t)&stru_24C5269D8, (uint64_t)sub_20C1C55F4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C5269D8, v0, (uint64_t)sub_20C1C5640);
}

void sub_20C1C1E58()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "SdfSpecTypeUnknown");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeAttribute");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeConnection");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeExpression");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeMapper");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeMapperArg");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypePrim");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypePseudoRoot");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 7, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeRelationship");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeRelationshipTarget");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 9, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeVariant");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 10, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecTypeVariantSet");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C524D70, 11, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecifierDef");
  sub_20BDDC0E4(&__p, "Def");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C527CB0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecifierOver");
  sub_20BDDC0E4(&__p, "Over");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C527CB0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfSpecifierClass");
  sub_20BDDC0E4(&__p, "Class");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C527CB0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPermissionPublic");
  sub_20BDDC0E4(&__p, "Public");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C5298C8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfPermissionPrivate");
  sub_20BDDC0E4(&__p, "Private");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C5298C8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfVariabilityVarying");
  sub_20BDDC0E4(&__p, "Varying");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C5269D8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfVariabilityUniform");
  sub_20BDDC0E4(&__p, "Uniform");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&stru_24C5269D8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfAuthoringErrorUnrecognizedFields");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C528BB8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfAuthoringErrorUnrecognizedSpecType");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C528BB8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C1C2540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20C1C25DC()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "SdfLengthUnitMillimeter");
  sub_20BDDC0E4(__p, "mm");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfLengthUnitCentimeter");
  sub_20BDDC0E4(__p, "cm");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfLengthUnitDecimeter");
  sub_20BDDC0E4(__p, "dm");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfLengthUnitMeter");
  sub_20BDDC0E4(__p, "m");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfLengthUnitKilometer");
  sub_20BDDC0E4(__p, "km");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfLengthUnitInch");
  sub_20BDDC0E4(__p, "in");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfLengthUnitFoot");
  sub_20BDDC0E4(__p, "ft");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfLengthUnitYard");
  sub_20BDDC0E4(__p, "yd");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 7, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfLengthUnitMile");
  sub_20BDDC0E4(__p, "mi");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52A7F0, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C1C2914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20C1C2988()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "SdfAngularUnitDegrees");
  sub_20BDDC0E4(__p, "deg");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AA38, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfAngularUnitRadians");
  sub_20BDDC0E4(__p, "rad");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AA38, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C1C2A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20C1C2A94()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "SdfDimensionlessUnitPercent");
  sub_20BDDC0E4(__p, "%");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C526E38, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "SdfDimensionlessUnitDefault");
  sub_20BDDC0E4(__p, "default");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C526E38, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C1C2B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20C1C2BA4()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C52A7F0, (uint64_t)&unk_24C51B650, (uint64_t)sub_20C1C578C);
  v0 = MEMORY[0x24BEDB798];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x24BEDB798], (uint64_t)&stru_24C52A7F0, (uint64_t)sub_20C1C591C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C52A7F0, v0, (uint64_t)sub_20C1C5B2C);
}

void sub_20C1C2C0C()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C52AA38, (uint64_t)&unk_24C51B650, (uint64_t)sub_20C1C5C78);
  v0 = MEMORY[0x24BEDB798];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x24BEDB798], (uint64_t)&stru_24C52AA38, (uint64_t)sub_20C1C5E08);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C52AA38, v0, (uint64_t)sub_20C1C6018);
}

void sub_20C1C2C74()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C526E38, (uint64_t)&unk_24C51B650, (uint64_t)sub_20C1C6164);
  v0 = MEMORY[0x24BEDB798];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x24BEDB798], (uint64_t)&stru_24C526E38, (uint64_t)sub_20C1C62F4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C526E38, v0, (uint64_t)sub_20C1C6504);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfDefaultUnit(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t ***Instance;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, this);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultUnit((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfDefaultUnit(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  void **v8;
  void *v9[2];
  char v10;
  void *__p[2];
  uint64_t v12;
  const char *v13;
  char v14;

  v3 = atomic_load((unsigned __int8 *)&qword_254987E68);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254987E68))
  {
    qword_254987E58 = MEMORY[0x24BEDB798];
    dword_254987E60 = 0;
    __cxa_guard_release(&qword_254987E68);
  }
  v4 = sub_20C1C2EA8();
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v5 = sub_20BDEEBA4(v4 + 24, (const void **)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (v4 + 32 != v5)
    return (uint64_t *)(v5 + 56);
  __p[0] = "sdf/types.cpp";
  __p[1] = "SdfDefaultUnit";
  v12 = 266;
  v13 = "const TfEnum &pxrInternal__aapl__pxrReserved__::SdfDefaultUnit(const TfEnum &)";
  v14 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v9);
  if (v10 >= 0)
    v8 = v9;
  else
    v8 = (void **)v9[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Unsupported unit '%s'.", v7, v8);
  if (v10 < 0)
    operator delete(v9[0]);
  return &qword_254987E58;
}

void sub_20C1C2E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1C2EA8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254987ED0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254987ED0))
  {
    qword_254987EC8 = (uint64_t)sub_20C1C6550();
    __cxa_guard_release(&qword_254987ED0);
  }
  return qword_254987EC8;
}

void sub_20C1C2F00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254987ED0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfUnitCategory(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  void **v8;
  void *v9[2];
  char v10;
  void *__p[2];
  uint64_t v12;
  const char *v13;
  char v14;

  v3 = atomic_load((unsigned __int8 *)&qword_254987E88);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254987E88))
  {
    qword_254987E70 = 0;
    *(_QWORD *)algn_254987E78 = 0;
    qword_254987E80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254987E70, &dword_20BDBC000);
    __cxa_guard_release(&qword_254987E88);
  }
  v4 = sub_20C1C2EA8();
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v5 = sub_20BDEEBA4(v4 + 72, (const void **)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (v4 + 80 != v5)
    return (uint64_t *)(v5 + 56);
  __p[0] = "sdf/types.cpp";
  __p[1] = "SdfUnitCategory";
  v12 = 282;
  v13 = "const string &pxrInternal__aapl__pxrReserved__::SdfUnitCategory(const TfEnum &)";
  v14 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v9);
  if (v10 >= 0)
    v8 = v9;
  else
    v8 = (void **)v9[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Unsupported unit '%s'.", v7, v8);
  if (v10 < 0)
    operator delete(v9[0]);
  return &qword_254987E70;
}

void sub_20C1C3068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfConvertUnit(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2, const pxrInternal__aapl__pxrReserved__::TfEnum *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  void **v9;
  char *v10;
  void **v11;
  void **v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  char *v16;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;

  v5 = sub_20C1C2EA8();
  v6 = *(_QWORD *)this;
  v7 = (char *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), v7))
  {
    sub_20BDDC0E4(&v22, v7);
    v13 = sub_20BDEEBA4(v5, (const void **)&v22);
    if (SHIBYTE(v24) < 0)
      operator delete(v22);
    if (v5 + 8 != v13)
    {
      v14 = *(uint64_t ***)(v13 + 56);
      v22 = (char *)this + 8;
      sub_20C1257EC(v14, (int *)this + 2, (uint64_t)&unk_20CAC184C, (_DWORD **)&v22);
      v15 = *(uint64_t ***)(v13 + 56);
      v22 = (char *)a2 + 8;
      sub_20C1257EC(v15, (int *)a2 + 2, (uint64_t)&unk_20CAC184C, (_DWORD **)&v22);
      return;
    }
    v22 = "sdf/types.cpp";
    v23 = "SdfConvertUnit";
    v24 = 311;
    v25 = "double pxrInternal__aapl__pxrReserved__::SdfConvertUnit(const TfEnum &, const TfEnum &)";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
    if (v21 >= 0)
      v17 = v20;
    else
      v17 = (void **)v20[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__ *)"Unsupported unit '%s'.", v16, v17);
  }
  else
  {
    v22 = "sdf/types.cpp";
    v23 = "SdfConvertUnit";
    v24 = 303;
    v25 = "double pxrInternal__aapl__pxrReserved__::SdfConvertUnit(const TfEnum &, const TfEnum &)";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetFullName(v6, *((_QWORD *)this + 1), (uint64_t)v20);
    v8 = v21;
    v9 = (void **)v20[0];
    pxrInternal__aapl__pxrReserved__::TfEnum::GetFullName(*(_QWORD *)a2, *((_QWORD *)a2 + 1), (uint64_t)__p);
    if (v8 >= 0)
      v11 = v20;
    else
      v11 = v9;
    if (v19 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__ *)"Can not convert from '%s' to '%s'.", v10, v11, v12);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  if (v21 < 0)
    operator delete(v20[0]);
}

void sub_20C1C3298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfGetNameForUnit(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  unsigned int v7;
  unsigned int v8;
  char *v10;
  void **v11;
  void *v12[2];
  char v13;
  void *__p[2];
  uint64_t v15;
  const char *v16;
  char v17;

  v3 = atomic_load((unsigned __int8 *)&qword_254987EA8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254987EA8))
  {
    qword_254987E90 = 0;
    *(_QWORD *)algn_254987E98 = 0;
    qword_254987EA0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254987E90, &dword_20BDBC000);
    __cxa_guard_release(&qword_254987EA8);
  }
  v4 = sub_20C1C2EA8();
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v5 = sub_20BDEEBA4(v4 + 768, (const void **)__p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (v4 + 776 == v5)
  {
    __p[0] = "sdf/types.cpp";
    __p[1] = "SdfGetNameForUnit";
    v15 = 329;
    v16 = "const string &pxrInternal__aapl__pxrReserved__::SdfGetNameForUnit(const TfEnum &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v12);
    if (v13 >= 0)
      v11 = v12;
    else
      v11 = (void **)v12[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Unsupported unit '%s'.", v10, v11);
    if (v13 < 0)
      operator delete(v12[0]);
    return &qword_254987E90;
  }
  else
  {
    v6 = (uint64_t **)(sub_20C1C2EA8() + 768);
    sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v12[0] = __p;
    v7 = *((_DWORD *)sub_20C1C70E4(v6, (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)v12) + 14);
    v8 = *((_DWORD *)this + 2);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    return (uint64_t *)(v4 + 216 * v7 + 24 * v8 + 96);
  }
}

void sub_20C1C349C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfGetUnitFromName(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  const void *v7;
  _QWORD v8[4];
  char v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254987EC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254987EC0))
  {
    qword_254987EB0 = MEMORY[0x24BEDB798];
    dword_254987EB8 = 0;
    __cxa_guard_release(&qword_254987EC0);
  }
  v3 = sub_20C1C2EA8();
  v4 = sub_20BDEEBA4(v3 + 744, (const void **)a1);
  if (v3 + 752 != v4)
    return (uint64_t *)(v4 + 56);
  v8[0] = "sdf/types.cpp";
  v8[1] = "SdfGetUnitFromName";
  v8[2] = 347;
  v8[3] = "const TfEnum &pxrInternal__aapl__pxrReserved__::SdfGetUnitFromName(const std::string &)";
  v9 = 0;
  if (*(char *)(a1 + 23) >= 0)
    v7 = (const void *)a1;
  else
    v7 = *(const void **)a1;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)"Unknown unit name '%s'.", v5, v7);
  return &qword_254987EB0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueHasValidType(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  unint64_t ***Instance;
  _BOOL4 IsEmpty;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v8 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  IsEmpty = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v8 & 7) != 0)
  {
    v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return !IsEmpty;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfGetTypeForValueTypeName(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t ***Instance;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, this);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  unint64_t ***Instance;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v7 = 0;
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7);
  if ((v7 & 7) != 0)
  {
    v5 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

unsigned int **pxrInternal__aapl__pxrReserved__::SdfGetRoleNameForValueTypeName@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, unsigned int **a2@<X8>)
{
  unint64_t ***Instance;
  unsigned int **result;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, this);
  result = (unsigned int **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  v7 = *result;
  *a2 = *result;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *a2 = v8;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfConvertToValidMetadataDictionary(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, uint64_t a2)
{
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  std::string::size_type v9;
  BOOL v10;
  _BOOL4 v11;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  void **v16;
  uint64_t v17;
  char *v18;
  char v19;
  void **v20;
  std::string v22;
  std::string *v23[3];
  uint64_t v24;
  void **v25;
  unint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  memset(v23, 0, sizeof(v23));
  v22.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
  v22.__r_.__value_.__l.__size_ = v4;
  v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  v7 = v6;
  v8 = 1;
  while (1)
  {
    v9 = v22.__r_.__value_.__r.__words[0];
    v10 = !v7 || v22.__r_.__value_.__r.__words[0] == v5;
    v11 = v10;
    if (v22.__r_.__value_.__l.__size_ == v7 && v11)
      break;
    v13 = (__int128 *)(v22.__r_.__value_.__r.__words[0] + 32);
    v14 = (__int128 *)v25;
    if ((unint64_t)v25 >= v26)
    {
      v16 = (void **)sub_20BE4EE50(&v24, v13);
    }
    else
    {
      if (*(char *)(v22.__r_.__value_.__r.__words[0] + 55) < 0)
      {
        sub_20BDDBFAC(v25, *(void **)(v22.__r_.__value_.__r.__words[0] + 32), *(_QWORD *)(v22.__r_.__value_.__r.__words[0] + 40));
      }
      else
      {
        v15 = *v13;
        v25[2] = *(void **)(v22.__r_.__value_.__r.__words[0] + 48);
        *v14 = v15;
      }
      v16 = (void **)v14 + 3;
    }
    v25 = v16;
    v19 = sub_20C1C3978(v9 + 56, (uint64_t *)v23, &v24);
    v20 = v25 - 3;
    if (*((char *)v25 - 1) < 0)
      operator delete(*v20);
    v8 &= v19;
    v25 = v20;
    sub_20BF4D354(&v22, v17, v18);
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", v23, &v22);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v22;
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  sub_20BDE5038((void ***)&v22);
  v23[0] = (std::string *)&v24;
  sub_20BDE5038((void ***)v23);
  return v8 & 1;
}

void sub_20C1C3930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a10 = &a13;
  sub_20BDE5038((void ***)&a10);
  a13 = (void **)&a16;
  sub_20BDE5038(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1C3978(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  char v11;
  char *v12;
  BOOL v13;
  _BOOL4 v14;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  void **v23;
  const pxrInternal__aapl__pxrReserved__::VtValue *v24;
  uint64_t v25;
  const void ****v26;
  const std::type_info *v27;
  char *v28;
  unsigned __int8 v29;
  _QWORD *v30;
  uint64_t *v31;
  const char *v32;
  char *v33;
  void **v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  void **v39;
  const char *v40;
  char *v41;
  void **v42;
  void **v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  void *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  uint64_t TypeName;
  const char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *__p[2];
  uint64_t v77;
  char *v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    __p[0] = 0;
    v6 = (uint64_t *)sub_20BF4D190((const void *****)a1);
    pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v6, (pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
    v78 = (char *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
    v79 = v7;
    v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
    v10 = v9;
    v11 = 1;
    while (1)
    {
      v12 = v78;
      v13 = !v10 || v78 == (char *)v8;
      v14 = v13;
      if (v79 == v10 && v14)
        break;
      v16 = (__int128 *)(v78 + 32);
      v17 = a3[1];
      if (v17 >= a3[2])
      {
        v18 = sub_20BE4EE50(a3, v16);
      }
      else
      {
        sub_20BE4EDF4(a3, v16);
        v18 = v17 + 24;
      }
      a3[1] = v18;
      v21 = sub_20C1C3978(v12 + 56, a2, a3);
      v22 = a3[1];
      v23 = (void **)(v22 - 24);
      if (*(char *)(v22 - 1) < 0)
        operator delete(*v23);
      v11 &= v21;
      a3[1] = (uint64_t)v23;
      sub_20BF4D354(&v78, v19, v20);
    }
    v31 = (uint64_t *)sub_20BF4D190((const void *****)a1);
    pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v31, (pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
    sub_20BF49F14((_QWORD ***)__p, 0);
    return v11 & 1;
  }
  if (!sub_20BFC2D70((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueHasValidType((pxrInternal__aapl__pxrReserved__ *)a1, v24))
    {
      v11 = 1;
      return v11 & 1;
    }
LABEL_69:
    v79 = 0;
    sub_20BF4B5D8((_QWORD *)a1, &v78);
    sub_20BF4C2D8((uint64_t)&v78);
    v11 = 0;
    return v11 & 1;
  }
  v25 = *(_QWORD *)(a1 + 8);
  if ((v25 & 4) != 0)
    v26 = (const void ****)(*(uint64_t (**)(uint64_t))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v26 = *(const void *****)a1;
  if (*v26 == v26[1])
  {
    sub_20C1C717C((uint64_t)a3, v74);
    if (v75 >= 0)
      v34 = v74;
    else
      v34 = (void **)v74[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"cannot infer type from empty vector/list%s -- use an empty typed array like VtIntArray/VtStringArray instead", v32, v33, v34);
    v35 = a2[2];
    v36 = a2[1];
    if (v36 < v35)
    {
      v37 = *(_OWORD *)__p;
      *(_QWORD *)(v36 + 16) = v77;
      *(_OWORD *)v36 = v37;
      __p[1] = 0;
      v77 = 0;
      __p[0] = 0;
      a2[1] = v36 + 24;
      goto LABEL_67;
    }
    v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *a2) >> 3);
    v48 = v47 + 1;
    if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *a2) >> 3);
    if (2 * v49 > v48)
      v48 = 2 * v49;
    if (v49 >= 0x555555555555555)
      v50 = 0xAAAAAAAAAAAAAAALL;
    else
      v50 = v48;
    v82 = a2 + 2;
    if (v50)
      v51 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v50);
    else
      v51 = 0;
    v57 = &v51[24 * v47];
    v78 = v51;
    v79 = v57;
    v81 = &v51[24 * v50];
    v58 = *(_OWORD *)__p;
    *((_QWORD *)v57 + 2) = v77;
    *(_OWORD *)v57 = v58;
    __p[1] = 0;
    v77 = 0;
    __p[0] = 0;
    v80 = (uint64_t)(v57 + 24);
    sub_20BDF34C0(a2, &v78);
    v59 = a2[1];
    sub_20BDF3648((uint64_t)&v78);
    v60 = SHIBYTE(v77);
    a2[1] = v59;
    if ((v60 & 0x80000000) == 0)
      goto LABEL_67;
    v61 = __p[0];
LABEL_66:
    operator delete(v61);
LABEL_67:
    if (v75 < 0)
      operator delete(v74[0]);
    goto LABEL_69;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfValueHasValidType((pxrInternal__aapl__pxrReserved__ *)*v26, v24))
  {
    sub_20C1CFB84((pxrInternal__aapl__pxrReserved__::VtValue *)*v26);
    v38 = v75;
    v39 = (void **)v74[0];
    sub_20C1C717C((uint64_t)a3, v72);
    v42 = v74;
    if (v38 < 0)
      v42 = v39;
    if (v73 >= 0)
      v43 = v72;
    else
      v43 = (void **)v72[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s%s is not a valid scene description datatype", v40, v41, "first vector/list element ", v42, v43);
    v44 = a2[2];
    v45 = a2[1];
    if (v45 >= v44)
    {
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - *a2) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - *a2) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      v82 = a2 + 2;
      if (v55)
        v56 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v55);
      else
        v56 = 0;
      v62 = &v56[24 * v52];
      v78 = v56;
      v79 = v62;
      v81 = &v56[24 * v55];
      v63 = *(_OWORD *)__p;
      *((_QWORD *)v62 + 2) = v77;
      *(_OWORD *)v62 = v63;
      __p[1] = 0;
      v77 = 0;
      __p[0] = 0;
      v80 = (uint64_t)(v62 + 24);
      sub_20BDF34C0(a2, &v78);
      v64 = a2[1];
      sub_20BDF3648((uint64_t)&v78);
      v65 = SHIBYTE(v77);
      a2[1] = v64;
      if (v65 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v46 = *(_OWORD *)__p;
      *(_QWORD *)(v45 + 16) = v77;
      *(_OWORD *)v45 = v46;
      __p[1] = 0;
      v77 = 0;
      __p[0] = 0;
      a2[1] = v45 + 24;
    }
    if ((v73 & 0x80000000) == 0)
      goto LABEL_67;
    v61 = v72[0];
    goto LABEL_66;
  }
  __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)*v26, v27, v28);
  v29 = atomic_load((unsigned __int8 *)&qword_254987EE0);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254987EE0))
  {
    qword_254987ED8 = (uint64_t)sub_20C1C721C();
    __cxa_guard_release(&qword_254987EE0);
  }
  v30 = sub_20BEB4074((_QWORD *)qword_254987ED8, __p);
  if (!v30)
  {
    v78 = "sdf/types.cpp";
    v79 = "_GetTypedValueVectorToVtArrayFn";
    v80 = 494;
    v81 = "_ValueVectorToVtArrayFn pxrInternal__aapl__pxrReserved__::_GetTypedValueVectorToVtArrayFn(const TfType &)";
    LOBYTE(v82) = 0;
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)__p);
    if (*(char *)(TypeName + 23) >= 0)
      v70 = TypeName;
    else
      v70 = *(_QWORD *)TypeName;
    v71 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Value type '%s' returns true from SdfValueHasValidType but does not appear in SDF_VALUE_TYPES.", v68, v69, v70);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "iter != valueVectorToVtArrayFnMap->end()", v71);
  }
  v11 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *))v30[3])(a1, a2, a3);
  return v11 & 1;
}

void sub_20C1C3EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  __cxa_guard_abort(&qword_254987EE0);
  _Unwind_Resume(a1);
}

void sub_20C1C407C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, uint64_t *a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::locale::id *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v16;
  uint64_t v17;
  std::locale v18;

  v5 = *a2;
  v4 = (uint64_t)(a2 + 1);
  v16 = v5;
  v17 = v4;
  if (v5 != v4)
  {
    v6 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v7 = sub_20BFEB714(&v16, v4, a3);
      v8 = pxrInternal__aapl__pxrReserved__::operator<<(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v7 + 28));
      v9 = sub_20BDDC1C8(v8, (uint64_t)": ", 2);
      v12 = sub_20BFEB714(&v16, v10, v11);
      v13 = pxrInternal__aapl__pxrReserved__::operator<<(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v12 + 36));
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
      v14 = std::locale::use_facet(&v18, v6);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v18);
      std::ostream::put();
      std::ostream::flush();
      sub_20BFEB78C(&v16);
    }
    while (v16 != v17);
  }
  return a1;
}

void sub_20C1C41A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::locale::id *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v15;
  uint64_t v16;
  std::locale v17;

  v5 = *a2;
  v4 = (uint64_t)(a2 + 1);
  v15 = v5;
  v16 = v4;
  if (v5 != v4)
  {
    v6 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      sub_20C0E6000(&v15, v4, a3);
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = sub_20BDDC1C8(v7, (uint64_t)": ", 2);
      v11 = sub_20C0E6000(&v15, v9, v10);
      v12 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v8, *v11 + 40);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
      v13 = std::locale::use_facet(&v17, v6);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      sub_20C0E6078(&v15);
    }
    while (v15 != v16);
  }
  return a1;
}

void sub_20C1C42BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtStreamOut(_QWORD *a1, _QWORD *a2)
{
  return sub_20C1032E8(a2, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a1, a2);
  return a1;
}

{
  *(_QWORD *)(a1 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a1, a2);
  return a1;
}

{
  *(_QWORD *)(a1 + 8) = &off_24C52AC70;
  sub_20C1D5D98((unsigned int **)a1, a2);
  return a1;
}

{
  *(_QWORD *)(a1 + 8) = &off_24C52AC70;
  sub_20C1D5D98((unsigned int **)a1, a2);
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *this, const void ****a2)
{
  *((_QWORD *)this + 1) = &off_24C51D8C8;
  sub_20BF4D058((unsigned int **)this, a2);
  return this;
}

{
  *((_QWORD *)this + 1) = &off_24C51D8C8;
  sub_20BF4D058((unsigned int **)this, a2);
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator!=(pxrInternal__aapl__pxrReserved__::VtValue *a1, std::type_info *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(a1, a2, a3) ^ 1;
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::Sdf_ValueTypeNamesType(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *this)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v2;

  v2 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(this);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)((char *)v2 + 8));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 24));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 32));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 40));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 48));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 56));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 64));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 72));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 80));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 88));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 96));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 112));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 120));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 128));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 136));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 144));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 152));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 160));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 168));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 176));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 184));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 192));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 200));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 208));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 216));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 224));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 232));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 240));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 248));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 256));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 264));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 272));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 280));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 296));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 304));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 312));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 320));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 328));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 336));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 344));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 352));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 360));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 368));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 376));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 384));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 392));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 400));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 408));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 416));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 424));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 432));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 440));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 448));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 456));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 464));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 472));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 480));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 488));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 496));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 504));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 512));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 520));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 528));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 536));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 544));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 552));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 560));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 568));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 576));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 584));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 592));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 600));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 608));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 616));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 624));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 632));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 640));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 648));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 656));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 664));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 672));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 680));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 688));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 696));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 704));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 712));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 720));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 728));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 736));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 744));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 752));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 760));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 768));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 776));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 784));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 792));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 800));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 808));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 816));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 824));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 832));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 840));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 848));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 856));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 864));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 872));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 880));
  return this;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(uint64_t **a1@<X1>, unsigned int **a2@<X8>)
{
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[3];
  void **v12;

  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAliasesAsTokens(a1, v11);
  v5 = *(_QWORD *)v11[0];
  if ((*(_QWORD *)v11[0] & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = (void **)v11;
  sub_20BEEB2B8(&v12);
  if (v5)
  {
    *a2 = (unsigned int *)v5;
    if ((v5 & 7) != 0)
    {
      v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        *a2 = v8;
      do
        v10 = __ldxr(v8);
      while (__stlxr(v10 - 2, v8));
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, a2);
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(const pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, unsigned int **a2@<X8>)
{
  unint64_t ***Instance;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v8 = 0;
  Type = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(&Type, a2);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(const pxrInternal__aapl__pxrReserved__::TfToken *a1@<X1>, unsigned int **a2@<X8>)
{
  unint64_t ***Instance;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  Type = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, a1);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type))
  {
    v6 = *(_QWORD *)a1;
    *a2 = *(unsigned int **)a1;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *a2 = v7;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(&Type, a2);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::hash_value(uint64_t a1)
{
  int v1;
  pxrInternal__aapl__pxrReserved__ *v2;
  char *v3;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  v1 = *(char *)(a1 + 23);
  if (v1 >= 0)
    v2 = (pxrInternal__aapl__pxrReserved__ *)a1;
  else
    v2 = *(pxrInternal__aapl__pxrReserved__ **)a1;
  if (v1 >= 0)
    v3 = (char *)*(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(char **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

{
  char v2;

  return sub_20C5298F0((uint64_t)&v2, a1);
}

{
  return bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a1 + 20)+ ((*(unsigned int *)(a1 + 20)+ (unint64_t)*(unsigned int *)(a1 + 16)+ (*(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16))* (*(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16))) >> 1)));
}

uint64_t *sub_20C1C4A98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5298C8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C5298C8, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C4B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C4B98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527CB0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527CB0, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C4C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C4C98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5269D8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C5269D8, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C4D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C4D98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D70, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D70, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C4E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C4E98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D90, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D90, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C4F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C4F98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C526848, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C526848, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C5054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C5098()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C528000, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C528000, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C5154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C5198()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D50, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524D50, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C5254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1C5298()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527B78, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527B78, (char *)1, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C5354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C1C5398@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_DWORD *)sub_20C188E00(a1);
  a2[1] = &off_24C527B88;
  result = operator new(0x18uLL);
  *(_QWORD *)result = &stru_24C5298C8;
  result[2] = v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20C1C53FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5298D8 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t sub_20C1C5448@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_20C1C5494@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_DWORD *)sub_20C0DE204(a1);
  a2[1] = &off_24C527B88;
  result = operator new(0x18uLL);
  *(_QWORD *)result = &stru_24C527CB0;
  result[2] = v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20C1C54F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = (char *)&off_24C527CC0 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t sub_20C1C5544@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_20C1C5590@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_DWORD *)sub_20C02569C(a1);
  a2[1] = &off_24C527B88;
  result = operator new(0x18uLL);
  *(_QWORD *)result = &stru_24C5269D8;
  result[2] = v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20C1C55F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5269E8 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t sub_20C1C5640@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C1C568C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52A7F0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C52A7F0, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C5748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C1C578C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_DWORD *)sub_20C1C57F0(a1);
  a2[1] = &off_24C527B88;
  result = operator new(0x18uLL);
  *(_QWORD *)result = &stru_24C52A7F0;
  result[2] = v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20C1C57F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20C1C5858(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C1C58D0, (uint64_t)&stru_24C52A7F0);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20C1C5858(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CABE6A1 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C52A7F0);
}

_DWORD *sub_20C1C58D0@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20C1C5910;
  a1[2] = &stru_24C52A7F0;
  return result;
}

void sub_20C1C5910(void *__p)
{
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C1C591C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = (char *)&off_24C52AA48 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_20C1C5968(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20C1C5978(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C1C5984()
{
  return 1;
}

unint64_t sub_20C1C598C(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20C1C59AC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20C1C59C0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20C1C59D8()
{
  return 0;
}

void *sub_20C1C59E8()
{
  return &unk_24C52A7F0;
}

uint64_t sub_20C1C59F4()
{
  return 0;
}

uint64_t sub_20C1C59FC()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C1C5A08()
{
  return 0;
}

uint64_t sub_20C1C5A10()
{
  return 0;
}

BOOL sub_20C1C5A18(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CABE6A1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C1C5A50(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52A7F0, a2, a3);
}

void *sub_20C1C5A70()
{
  return &unk_24C52A7F0;
}

_DWORD *sub_20C1C5A80@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24C52AA48 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *sub_20C1C5A9C(unsigned int *a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C52A7F0, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C1C5B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1C5B2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C1C5B78()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52AA38, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C52AA38, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C5C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C1C5C78@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_DWORD *)sub_20C1C5CDC(a1);
  a2[1] = &off_24C527B88;
  result = operator new(0x18uLL);
  *(_QWORD *)result = &stru_24C52AA38;
  result[2] = v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20C1C5CDC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20C1C5D44(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C1C5DBC, (uint64_t)&stru_24C52AA38);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20C1C5D44(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CABEA78 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C52AA38);
}

_DWORD *sub_20C1C5DBC@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20C1C5DFC;
  a1[2] = &stru_24C52AA38;
  return result;
}

void sub_20C1C5DFC(void *__p)
{
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C1C5E08@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = (char *)&off_24C52AB00 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_20C1C5E54(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20C1C5E64(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C1C5E70()
{
  return 1;
}

unint64_t sub_20C1C5E78(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20C1C5E98(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20C1C5EAC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20C1C5EC4()
{
  return 0;
}

void *sub_20C1C5ED4()
{
  return &unk_24C52AA38;
}

uint64_t sub_20C1C5EE0()
{
  return 0;
}

uint64_t sub_20C1C5EE8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C1C5EF4()
{
  return 0;
}

uint64_t sub_20C1C5EFC()
{
  return 0;
}

BOOL sub_20C1C5F04(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CABEA78 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C1C5F3C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52AA38, a2, a3);
}

void *sub_20C1C5F5C()
{
  return &unk_24C52AA38;
}

_DWORD *sub_20C1C5F6C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24C52AB00 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *sub_20C1C5F88(unsigned int *a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C52AA38, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C1C5FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1C6018@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t *sub_20C1C6064()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C526E38, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C526E38, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1C6120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C1C6164@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_DWORD *)sub_20C1C61C8(a1);
  a2[1] = &off_24C527B88;
  result = operator new(0x18uLL);
  *(_QWORD *)result = &stru_24C526E38;
  result[2] = v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20C1C61C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20C1C6230(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C1C62A8, (uint64_t)&stru_24C526E38);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20C1C6230(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB13DFLL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C526E38);
}

_DWORD *sub_20C1C62A8@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20C1C62E8;
  a1[2] = &stru_24C526E38;
  return result;
}

void sub_20C1C62E8(void *__p)
{
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C1C62F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = (char *)&off_24C52ABB8 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_20C1C6340(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20C1C6350(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C1C635C()
{
  return 1;
}

unint64_t sub_20C1C6364(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20C1C6384(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20C1C6398(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20C1C63B0()
{
  return 0;
}

void *sub_20C1C63C0()
{
  return &unk_24C526E38;
}

uint64_t sub_20C1C63CC()
{
  return 0;
}

uint64_t sub_20C1C63D4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C1C63E0()
{
  return 0;
}

uint64_t sub_20C1C63E8()
{
  return 0;
}

BOOL sub_20C1C63F0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB13DFLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C1C6428(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C526E38, a2, a3);
}

void *sub_20C1C6448()
{
  return &unk_24C526E38;
}

_DWORD *sub_20C1C6458@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24C52ABB8 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *sub_20C1C6474(unsigned int *a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C526E38, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C1C64E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1C6504@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

_QWORD *sub_20C1C6550()
{
  _QWORD *v0;
  std::string __p;
  std::string v3;
  void *v4;
  int v5;

  v0 = operator new(0x318uLL);
  v0[1] = 0;
  *v0 = v0 + 1;
  v0[4] = 0;
  v0[2] = 0;
  v0[3] = v0 + 4;
  v0[7] = 0;
  v0[5] = 0;
  v0[6] = v0 + 7;
  v0[10] = 0;
  v0[8] = 0;
  v0[9] = v0 + 10;
  v0[11] = 0;
  bzero(v0 + 12, 0x288uLL);
  v0[95] = 0;
  v0[94] = 0;
  v0[93] = v0 + 94;
  v0[98] = 0;
  v0[97] = 0;
  v0[96] = v0 + 97;
  v4 = &unk_24C52A7F0;
  v5 = 0;
  sub_20BDDC0E4(&v3, "mm");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 0.001);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52A7F0;
  v5 = 1;
  sub_20BDDC0E4(&v3, "cm");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 0.01);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52A7F0;
  v5 = 2;
  sub_20BDDC0E4(&v3, "dm");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 0.1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52A7F0;
  v5 = 3;
  sub_20BDDC0E4(&v3, "m");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 1.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52A7F0;
  v5 = 4;
  sub_20BDDC0E4(&v3, "km");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 1000.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52A7F0;
  v5 = 5;
  sub_20BDDC0E4(&v3, "in");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 0.0254);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52A7F0;
  v5 = 6;
  sub_20BDDC0E4(&v3, "ft");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 0.3048);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52A7F0;
  v5 = 7;
  sub_20BDDC0E4(&v3, "yd");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 0.9144);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52A7F0;
  v5 = 8;
  sub_20BDDC0E4(&v3, "mi");
  sub_20BDDC0E4(&__p, "Length");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 1609.344);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52AA38;
  v5 = 0;
  sub_20BDDC0E4(&v3, "deg");
  sub_20BDDC0E4(&__p, "Angular");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 1.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C52AA38;
  v5 = 1;
  sub_20BDDC0E4(&v3, "rad");
  sub_20BDDC0E4(&__p, "Angular");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 57.2957795);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C526E38;
  v5 = 0;
  sub_20BDDC0E4(&v3, "%");
  sub_20BDDC0E4(&__p, "Dimensionless");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 0.01);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  v4 = &unk_24C526E38;
  v5 = 1;
  sub_20BDDC0E4(&v3, "default");
  sub_20BDDC0E4(&__p, "Dimensionless");
  sub_20C1C6BC4((uint64_t)v0, (int *)&v4, &v3, &__p, 1.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  return v0;
}

void sub_20C1C6B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C1C6BC4(uint64_t a1, int *a2, std::string *a3, std::string *a4, double a5)
{
  char *v10;
  uint64_t **v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *result;
  uint64_t v19;
  void *__p[2];
  char v21;
  void **v22;

  v10 = (char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  sub_20BDDC0E4(__p, v10);
  v22 = __p;
  v11 = (uint64_t **)*((_QWORD *)sub_20BEDE91C((uint64_t **)a1, (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v22)+ 7);
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if (v11)
      goto LABEL_7;
  }
  else if (v11)
  {
    goto LABEL_7;
  }
  v11 = (uint64_t **)operator new(0x18uLL);
  v11[2] = 0;
  v11[1] = 0;
  *v11 = (uint64_t *)(v11 + 1);
  sub_20BDDC0E4(__p, v10);
  v22 = __p;
  *((_QWORD *)sub_20BEDE91C((uint64_t **)a1, (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v22) + 7) = v11;
  if (v21 < 0)
    operator delete(__p[0]);
LABEL_7:
  __p[0] = a2 + 2;
  *((double *)sub_20C1257EC(v11, a2 + 2, (uint64_t)&unk_20CAC184C, (_DWORD **)__p) + 5) = a5;
  if (a5 == 1.0)
  {
    sub_20BDDC0E4(__p, v10);
    v22 = __p;
    v12 = sub_20C1C6EFC((uint64_t **)(a1 + 24), (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v22);
    v13 = *(_QWORD *)a2;
    *((_DWORD *)v12 + 16) = a2[2];
    *((_QWORD *)v12 + 7) = v13;
    if (v21 < 0)
      operator delete(__p[0]);
    __p[0] = a4;
    v14 = sub_20C1C6FA0((uint64_t **)(a1 + 48), (const void **)&a4->__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)__p);
    v15 = *(_QWORD *)a2;
    *((_DWORD *)v14 + 16) = a2[2];
    v14[7] = v15;
    sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v22 = __p;
    v16 = sub_20BDDE428((uint64_t **)(a1 + 72), (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v22);
    std::string::operator=((std::string *)((char *)v16 + 56), a4);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v17 = sub_20BDEEBA4(a1 + 768, (const void **)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  if (a1 + 776 == v17)
  {
    v17 = *(_QWORD *)(a1 + 784);
    sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v22 = __p;
    *((_DWORD *)sub_20C1C70E4((uint64_t **)(a1 + 768), (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v22) + 14) = v17;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v17) = *(_DWORD *)(v17 + 56);
  }
  std::string::operator=((std::string *)(a1 + 216 * v17 + 24 * a2[2] + 96), a3);
  __p[0] = a3;
  result = sub_20C1C6FA0((uint64_t **)(a1 + 744), (const void **)&a3->__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)__p);
  v19 = *(_QWORD *)a2;
  *((_DWORD *)result + 16) = a2[2];
  result[7] = v19;
  return result;
}

void sub_20C1C6ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20C1C6EFC(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_20BDDE084((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = MEMORY[0x24BEDB798];
    *((_DWORD *)v7 + 16) = 0;
    sub_20BDDE1B4(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_20C1C6FA0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C1C7034((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_20C1C7034@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_QWORD *)v6 + 7) = MEMORY[0x24BEDB798];
  *((_DWORD *)v6 + 16) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C1C70C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

_OWORD *sub_20C1C70E4(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_20BDDE084((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_20BDDE1B4(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_20C1C717C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  char *v3;
  std::string *p_p;
  std::string __p;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringJoin(":", (std::string **)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" under key '%s'", v2, v3, p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20C1C7200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20C1C721C()
{
  _OWORD *v0;
  const std::type_info *v1;
  char *v2;
  _QWORD *v3;
  const std::type_info *v4;
  char *v5;
  _QWORD *v6;
  const std::type_info *v7;
  char *v8;
  _QWORD *v9;
  const std::type_info *v10;
  char *v11;
  _QWORD *v12;
  const std::type_info *v13;
  char *v14;
  _QWORD *v15;
  const std::type_info *v16;
  char *v17;
  _QWORD *v18;
  const std::type_info *v19;
  char *v20;
  _QWORD *v21;
  const std::type_info *v22;
  char *v23;
  _QWORD *v24;
  const std::type_info *v25;
  char *v26;
  _QWORD *v27;
  const std::type_info *v28;
  char *v29;
  _QWORD *v30;
  const std::type_info *v31;
  char *v32;
  _QWORD *v33;
  const std::type_info *v34;
  char *v35;
  _QWORD *v36;
  const std::type_info *v37;
  char *v38;
  _QWORD *v39;
  const std::type_info *v40;
  char *v41;
  _QWORD *v42;
  const std::type_info *v43;
  char *v44;
  _QWORD *v45;
  const std::type_info *v46;
  char *v47;
  _QWORD *v48;
  const std::type_info *v49;
  char *v50;
  _QWORD *v51;
  const std::type_info *v52;
  char *v53;
  _QWORD *v54;
  const std::type_info *v55;
  char *v56;
  _QWORD *v57;
  const std::type_info *v58;
  char *v59;
  _QWORD *v60;
  const std::type_info *v61;
  char *v62;
  _QWORD *v63;
  const std::type_info *v64;
  char *v65;
  _QWORD *v66;
  const std::type_info *v67;
  char *v68;
  _QWORD *v69;
  const std::type_info *v70;
  char *v71;
  _QWORD *v72;
  const std::type_info *v73;
  char *v74;
  _QWORD *v75;
  const std::type_info *v76;
  char *v77;
  _QWORD *v78;
  const std::type_info *v79;
  char *v80;
  _QWORD *v81;
  const std::type_info *v82;
  char *v83;
  _QWORD *v84;
  const std::type_info *v85;
  char *v86;
  _QWORD *v87;
  const std::type_info *v88;
  char *v89;
  _QWORD *v90;
  const std::type_info *v91;
  char *v92;
  _QWORD *v93;
  const std::type_info *v94;
  char *v95;
  _QWORD *v96;
  const std::type_info *v97;
  char *v98;
  _QWORD *v99;

  v0 = operator new(0x28uLL);
  *v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + 8) = 1065353216;
  sub_20BDEC6E0((uint64_t)v0, 0x21uLL);
  v3 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], v1, v2);
  sub_20C1CF904((uint64_t)v0, v3, v3, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<BOOL>);
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB790], v4, v5);
  sub_20C1CF904((uint64_t)v0, v6, v6, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned char>);
  v9 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], v7, v8);
  sub_20C1CF904((uint64_t)v0, v9, v9, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<int>);
  v12 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], v10, v11);
  sub_20C1CF904((uint64_t)v0, v12, v12, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned int>);
  v15 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D0], v13, v14);
  sub_20C1CF904((uint64_t)v0, v15, v15, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<long long>);
  v18 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D8], v16, v17);
  sub_20C1CF904((uint64_t)v0, v18, v18, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned long long>);
  v21 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF30, v19, v20);
  sub_20C1CF904((uint64_t)v0, v21, v21, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>);
  v24 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], v22, v23);
  sub_20C1CF904((uint64_t)v0, v24, v24, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<float>);
  v27 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], v25, v26);
  sub_20C1CF904((uint64_t)v0, v27, v27, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<double>);
  v30 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C525368, v28, v29);
  sub_20C1CF904((uint64_t)v0, v30, v30, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>);
  v33 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C516910, v31, v32);
  sub_20C1CF904((uint64_t)v0, v33, v33, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<std::string>);
  v36 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BCE0, v34, v35);
  sub_20C1CF904((uint64_t)v0, v36, v36, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::TfToken>);
  v39 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DB0, v37, v38);
  sub_20C1CF904((uint64_t)v0, v39, v39, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>);
  v42 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D80, v40, v41);
  sub_20C1CF904((uint64_t)v0, v42, v42, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>);
  v45 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DD8, v43, v44);
  sub_20C1CF904((uint64_t)v0, v45, v45, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>);
  v48 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF90, v46, v47);
  sub_20C1CF904((uint64_t)v0, v48, v48, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>);
  v51 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFC0, v49, v50);
  sub_20C1CF904((uint64_t)v0, v51, v51, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>);
  v54 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, v52, v53);
  sub_20C1CF904((uint64_t)v0, v54, v54, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>);
  v57 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C030, v55, v56);
  sub_20C1CF904((uint64_t)v0, v57, v57, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuath>);
  v60 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C020, v58, v59);
  sub_20C1CF904((uint64_t)v0, v60, v60, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>);
  v63 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C010, v61, v62);
  sub_20C1CF904((uint64_t)v0, v63, v63, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>);
  v66 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C140, v64, v65);
  sub_20C1CF904((uint64_t)v0, v66, v66, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>);
  v69 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C130, v67, v68);
  sub_20C1CF904((uint64_t)v0, v69, v69, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>);
  v72 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C120, v70, v71);
  sub_20C1CF904((uint64_t)v0, v72, v72, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>);
  v75 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C110, v73, v74);
  sub_20C1CF904((uint64_t)v0, v75, v75, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>);
  v78 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C180, v76, v77);
  sub_20C1CF904((uint64_t)v0, v78, v78, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>);
  v81 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C170, v79, v80);
  sub_20C1CF904((uint64_t)v0, v81, v81, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>);
  v84 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C160, v82, v83);
  sub_20C1CF904((uint64_t)v0, v84, v84, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>);
  v87 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C150, v85, v86);
  sub_20C1CF904((uint64_t)v0, v87, v87, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>);
  v90 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51C1C0, v88, v89);
  sub_20C1CF904((uint64_t)v0, v90, v90, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>);
  v93 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1B0, v91, v92);
  sub_20C1CF904((uint64_t)v0, v93, v93, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>);
  v96 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1A0, v94, v95);
  sub_20C1CF904((uint64_t)v0, v96, v96, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>);
  v99 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C190, v97, v98);
  sub_20C1CF904((uint64_t)v0, v99, v99, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>);
  return v0;
}

void sub_20C1C7700(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BEB3FA4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<BOOL>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t *v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  _BYTE *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  __n128 v50[2];
  _BYTE *v51;
  char v52[8];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v4 = a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C00134C((uint64_t)v50, (v7 - *v6) >> 4);
  sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v39 = v4;
  v11 = v51;
  v12 = a2 + 2;
  v13 = 1;
  v14 = v8;
  do
  {
    sub_20C1CFB40(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_20C1CFCB4((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      v41 = v11;
      v15 = *v6;
      sub_20C1CFB84(v14);
      v16 = v7;
      v17 = (uint64_t)v12;
      if (v47 >= 0)
        v18 = &v46;
      else
        v18 = v46;
      sub_20C1C717C(a3, v44);
      v19 = v45;
      v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      v23 = v44;
      if (v19 < 0)
        v23 = v20;
      v24 = v42;
      if (v43 < 0)
        v24 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      v25 = a2[1];
      v26 = a2[2];
      v12 = (uint64_t *)v17;
      v7 = v16;
      if (v25 >= v26)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        v29 = v28 + 1;
        v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v58 = v17;
        if (v31)
          v32 = (char *)sub_20BDE4FF4(v17, v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v54 = v32;
        v55 = v33;
        v57 = &v32[24 * v31];
        v34 = *(_OWORD *)__p;
        *((_QWORD *)v33 + 2) = v49;
        *(_OWORD *)v33 = v34;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v56 = v33 + 24;
        sub_20BDF34C0(a2, &v54);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v54);
        v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 16) = v49;
        *(_OWORD *)v25 = v27;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        v11 = v41;
      }
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (v47 < 0)
        operator delete(v46);
      v13 = 0;
    }
    sub_20BF4C2D8((uint64_t)v52);
    v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  v4 = v39;
  if ((v13 & 1) != 0)
  {
LABEL_36:
    sub_20C1CFD2C(v4, v50);
    v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_20BF4B5D8(v39, &v54);
    sub_20BF4C2D8((uint64_t)&v54);
    v37 = 0;
  }
  sub_20BF5618C((uint64_t)v50);
  return v37;
}

void sub_20C1C7A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned char>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t *v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  _BYTE *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  __n128 v50[2];
  _BYTE *v51;
  char v52[8];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v4 = a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF65670((uint64_t)v50, (v7 - *v6) >> 4);
  sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v39 = v4;
  v11 = v51;
  v12 = a2 + 2;
  v13 = 1;
  v14 = v8;
  do
  {
    sub_20C1CFE6C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_20C1CFEB0((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      v41 = v11;
      v15 = *v6;
      sub_20C1CFB84(v14);
      v16 = v7;
      v17 = (uint64_t)v12;
      if (v47 >= 0)
        v18 = &v46;
      else
        v18 = v46;
      sub_20C1C717C(a3, v44);
      v19 = v45;
      v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB790] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      v23 = v44;
      if (v19 < 0)
        v23 = v20;
      v24 = v42;
      if (v43 < 0)
        v24 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      v25 = a2[1];
      v26 = a2[2];
      v12 = (uint64_t *)v17;
      v7 = v16;
      if (v25 >= v26)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        v29 = v28 + 1;
        v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v58 = v17;
        if (v31)
          v32 = (char *)sub_20BDE4FF4(v17, v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v54 = v32;
        v55 = v33;
        v57 = &v32[24 * v31];
        v34 = *(_OWORD *)__p;
        *((_QWORD *)v33 + 2) = v49;
        *(_OWORD *)v33 = v34;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v56 = v33 + 24;
        sub_20BDF34C0(a2, &v54);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v54);
        v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 16) = v49;
        *(_OWORD *)v25 = v27;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        v11 = v41;
      }
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (v47 < 0)
        operator delete(v46);
      v13 = 0;
    }
    sub_20BF4C2D8((uint64_t)v52);
    v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  v4 = v39;
  if ((v13 & 1) != 0)
  {
LABEL_36:
    sub_20BF659C8(v4, v50);
    v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_20BF4B5D8(v39, &v54);
    sub_20BF4C2D8((uint64_t)&v54);
    v37 = 0;
  }
  sub_20BF5618C((uint64_t)v50);
  return v37;
}

void sub_20C1C7E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<int>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  uint64_t *v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  _DWORD *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  __n128 v50[2];
  _DWORD *v51;
  char v52[8];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v4 = a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF64CC4((uint64_t)v50, (v7 - *v6) >> 4);
  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v39 = v4;
  v11 = v51;
  v12 = a2 + 2;
  v13 = 1;
  v14 = v8;
  do
  {
    sub_20C1D003C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_20C1D0080((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      v41 = v11;
      v15 = *v6;
      sub_20C1CFB84(v14);
      v16 = v7;
      v17 = (uint64_t)v12;
      if (v47 >= 0)
        v18 = &v46;
      else
        v18 = v46;
      sub_20C1C717C(a3, v44);
      v19 = v45;
      v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      v23 = v44;
      if (v19 < 0)
        v23 = v20;
      v24 = v42;
      if (v43 < 0)
        v24 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      v25 = a2[1];
      v26 = a2[2];
      v12 = (uint64_t *)v17;
      v7 = v16;
      if (v25 >= v26)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        v29 = v28 + 1;
        v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v58 = v17;
        if (v31)
          v32 = (char *)sub_20BDE4FF4(v17, v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v54 = v32;
        v55 = v33;
        v57 = &v32[24 * v31];
        v34 = *(_OWORD *)__p;
        *((_QWORD *)v33 + 2) = v49;
        *(_OWORD *)v33 = v34;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v56 = v33 + 24;
        sub_20BDF34C0(a2, &v54);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v54);
        v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 16) = v49;
        *(_OWORD *)v25 = v27;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        v11 = v41;
      }
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (v47 < 0)
        operator delete(v46);
      v13 = 0;
    }
    sub_20BF4C2D8((uint64_t)v52);
    v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  v4 = v39;
  if ((v13 & 1) != 0)
  {
LABEL_36:
    sub_20BF65058(v4, v50);
    v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_20BF4B5D8(v39, &v54);
    sub_20BF4C2D8((uint64_t)&v54);
    v37 = 0;
  }
  sub_20BF5618C((uint64_t)v50);
  return v37;
}

void sub_20C1C8248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned int>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  uint64_t *v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  _DWORD *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  __n128 v50[2];
  _DWORD *v51;
  char v52[8];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v4 = a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF640F0((uint64_t)v50, (v7 - *v6) >> 4);
  sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v39 = v4;
  v11 = v51;
  v12 = a2 + 2;
  v13 = 1;
  v14 = v8;
  do
  {
    sub_20C1D0184(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_20C1D01C8((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      v41 = v11;
      v15 = *v6;
      sub_20C1CFB84(v14);
      v16 = v7;
      v17 = (uint64_t)v12;
      if (v47 >= 0)
        v18 = &v46;
      else
        v18 = v46;
      sub_20C1C717C(a3, v44);
      v19 = v45;
      v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB7A0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      v23 = v44;
      if (v19 < 0)
        v23 = v20;
      v24 = v42;
      if (v43 < 0)
        v24 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      v25 = a2[1];
      v26 = a2[2];
      v12 = (uint64_t *)v17;
      v7 = v16;
      if (v25 >= v26)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        v29 = v28 + 1;
        v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v58 = v17;
        if (v31)
          v32 = (char *)sub_20BDE4FF4(v17, v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v54 = v32;
        v55 = v33;
        v57 = &v32[24 * v31];
        v34 = *(_OWORD *)__p;
        *((_QWORD *)v33 + 2) = v49;
        *(_OWORD *)v33 = v34;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v56 = v33 + 24;
        sub_20BDF34C0(a2, &v54);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v54);
        v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 16) = v49;
        *(_OWORD *)v25 = v27;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        v11 = v41;
      }
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (v47 < 0)
        operator delete(v46);
      v13 = 0;
    }
    sub_20BF4C2D8((uint64_t)v52);
    v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  v4 = v39;
  if ((v13 & 1) != 0)
  {
LABEL_36:
    sub_20BF64504(v4, v50);
    v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_20BF4B5D8(v39, &v54);
    sub_20BF4C2D8((uint64_t)&v54);
    v37 = 0;
  }
  sub_20BF5618C((uint64_t)v50);
  return v37;
}

void sub_20C1C8644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  uint64_t *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  __n128 v50[2];
  uint64_t *v51;
  char v52[8];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v4 = a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C003FC4((uint64_t)v50, (v7 - *v6) >> 4);
  sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v39 = v4;
  v11 = v51;
  v12 = a2 + 2;
  v13 = 1;
  v14 = v8;
  do
  {
    sub_20C1D038C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_20C1D03D0((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      v41 = v11;
      v15 = *v6;
      sub_20C1CFB84(v14);
      v16 = v7;
      v17 = (uint64_t)v12;
      if (v47 >= 0)
        v18 = &v46;
      else
        v18 = v46;
      sub_20C1C717C(a3, v44);
      v19 = v45;
      v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB7D0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      v23 = v44;
      if (v19 < 0)
        v23 = v20;
      v24 = v42;
      if (v43 < 0)
        v24 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      v25 = a2[1];
      v26 = a2[2];
      v12 = (uint64_t *)v17;
      v7 = v16;
      if (v25 >= v26)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        v29 = v28 + 1;
        v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v58 = v17;
        if (v31)
          v32 = (char *)sub_20BDE4FF4(v17, v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v54 = v32;
        v55 = v33;
        v57 = &v32[24 * v31];
        v34 = *(_OWORD *)__p;
        *((_QWORD *)v33 + 2) = v49;
        *(_OWORD *)v33 = v34;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v56 = v33 + 24;
        sub_20BDF34C0(a2, &v54);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v54);
        v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 16) = v49;
        *(_OWORD *)v25 = v27;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        v11 = v41;
      }
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (v47 < 0)
        operator delete(v46);
      v13 = 0;
    }
    sub_20BF4C2D8((uint64_t)v52);
    v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  v4 = v39;
  if ((v13 & 1) != 0)
  {
LABEL_36:
    sub_20C1D0444(v4, v50);
    v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_20BF4B5D8(v39, &v54);
    sub_20BF4C2D8((uint64_t)&v54);
    v37 = 0;
  }
  sub_20BF5618C((uint64_t)v50);
  return v37;
}

void sub_20C1C8A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  uint64_t *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  __n128 v50[2];
  uint64_t *v51;
  char v52[8];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v4 = a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C004FA0((uint64_t)v50, (v7 - *v6) >> 4);
  sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v39 = v4;
  v11 = v51;
  v12 = a2 + 2;
  v13 = 1;
  v14 = v8;
  do
  {
    sub_20C1D060C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_20C1D0650((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      v41 = v11;
      v15 = *v6;
      sub_20C1CFB84(v14);
      v16 = v7;
      v17 = (uint64_t)v12;
      if (v47 >= 0)
        v18 = &v46;
      else
        v18 = v46;
      sub_20C1C717C(a3, v44);
      v19 = v45;
      v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB7D8] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      v23 = v44;
      if (v19 < 0)
        v23 = v20;
      v24 = v42;
      if (v43 < 0)
        v24 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      v25 = a2[1];
      v26 = a2[2];
      v12 = (uint64_t *)v17;
      v7 = v16;
      if (v25 >= v26)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        v29 = v28 + 1;
        v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v58 = v17;
        if (v31)
          v32 = (char *)sub_20BDE4FF4(v17, v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v54 = v32;
        v55 = v33;
        v57 = &v32[24 * v31];
        v34 = *(_OWORD *)__p;
        *((_QWORD *)v33 + 2) = v49;
        *(_OWORD *)v33 = v34;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v56 = v33 + 24;
        sub_20BDF34C0(a2, &v54);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v54);
        v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 16) = v49;
        *(_OWORD *)v25 = v27;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        v11 = v41;
      }
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (v47 < 0)
        operator delete(v46);
      v13 = 0;
    }
    sub_20BF4C2D8((uint64_t)v52);
    v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  v4 = v39;
  if ((v13 & 1) != 0)
  {
LABEL_36:
    sub_20C1D06C4(v4, v50);
    v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_20BF4B5D8(v39, &v54);
    sub_20BF4C2D8((uint64_t)&v54);
    v37 = 0;
  }
  sub_20BF5618C((uint64_t)v50);
  return v37;
}

void sub_20C1C8E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _WORD *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  _WORD *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF56CB0((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D0A20(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D0A64((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF570C4(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1C9228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<float>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  float *v11;
  uint64_t *v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  float *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  __n128 v50[2];
  float *v51;
  char v52[8];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v4 = a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF56024((uint64_t)v50, (v7 - *v6) >> 4);
  sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v39 = v4;
  v11 = v51;
  v12 = a2 + 2;
  v13 = 1;
  v14 = v8;
  do
  {
    sub_20C1D0C28(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_20C1D0C6C((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      v41 = v11;
      v15 = *v6;
      sub_20C1CFB84(v14);
      v16 = v7;
      v17 = (uint64_t)v12;
      if (v47 >= 0)
        v18 = &v46;
      else
        v18 = v46;
      sub_20C1C717C(a3, v44);
      v19 = v45;
      v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      v23 = v44;
      if (v19 < 0)
        v23 = v20;
      v24 = v42;
      if (v43 < 0)
        v24 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      v25 = a2[1];
      v26 = a2[2];
      v12 = (uint64_t *)v17;
      v7 = v16;
      if (v25 >= v26)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        v29 = v28 + 1;
        v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v58 = v17;
        if (v31)
          v32 = (char *)sub_20BDE4FF4(v17, v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v54 = v32;
        v55 = v33;
        v57 = &v32[24 * v31];
        v34 = *(_OWORD *)__p;
        *((_QWORD *)v33 + 2) = v49;
        *(_OWORD *)v33 = v34;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v56 = v33 + 24;
        sub_20BDF34C0(a2, &v54);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v54);
        v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 16) = v49;
        *(_OWORD *)v25 = v27;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        v11 = v41;
      }
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (v47 < 0)
        operator delete(v46);
      v13 = 0;
    }
    sub_20BF4C2D8((uint64_t)v52);
    v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  v4 = v39;
  if ((v13 & 1) != 0)
  {
LABEL_36:
    sub_20BF5653C(v4, v50);
    v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_20BF4B5D8(v39, &v54);
    sub_20BF4C2D8((uint64_t)&v54);
    v37 = 0;
  }
  sub_20BF5618C((uint64_t)v50);
  return v37;
}

void sub_20C1C9624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<double>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  double *v11;
  uint64_t *v12;
  char v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  double *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *__p[2];
  uint64_t v49;
  __n128 v50[2];
  double *v51;
  char v52[8];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v4 = a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF577E4((uint64_t)v50, (v7 - *v6) >> 4);
  sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v39 = v4;
  v11 = v51;
  v12 = a2 + 2;
  v13 = 1;
  v14 = v8;
  do
  {
    sub_20C1D0CE4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_20C1D0D28((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      v41 = v11;
      v15 = *v6;
      sub_20C1CFB84(v14);
      v16 = v7;
      v17 = (uint64_t)v12;
      if (v47 >= 0)
        v18 = &v46;
      else
        v18 = v46;
      sub_20C1C717C(a3, v44);
      v19 = v45;
      v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      v23 = v44;
      if (v19 < 0)
        v23 = v20;
      v24 = v42;
      if (v43 < 0)
        v24 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      v25 = a2[1];
      v26 = a2[2];
      v12 = (uint64_t *)v17;
      v7 = v16;
      if (v25 >= v26)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        v29 = v28 + 1;
        v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v58 = v17;
        if (v31)
          v32 = (char *)sub_20BDE4FF4(v17, v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v54 = v32;
        v55 = v33;
        v57 = &v32[24 * v31];
        v34 = *(_OWORD *)__p;
        *((_QWORD *)v33 + 2) = v49;
        *(_OWORD *)v33 = v34;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v56 = v33 + 24;
        sub_20BDF34C0(a2, &v54);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v54);
        v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 16) = v49;
        *(_OWORD *)v25 = v27;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        v11 = v41;
      }
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (v47 < 0)
        operator delete(v46);
      v13 = 0;
    }
    sub_20BF4C2D8((uint64_t)v52);
    v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  v4 = v39;
  if ((v13 & 1) != 0)
  {
LABEL_36:
    sub_20BF57B78(v4, v50);
    v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_20BF4B5D8(v39, &v54);
    sub_20BF4C2D8((uint64_t)&v54);
    v37 = 0;
  }
  sub_20BF5618C((uint64_t)v50);
  return v37;
}

void sub_20C1C9A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  double *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  double *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C0071B0((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D0D9C(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D0DE0((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA312 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D0E38(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1C9E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<std::string>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  __n128 *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  __n128 *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C007D50((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D12E8(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D132C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 = (__n128 *)((char *)v11 + 24);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D13C4(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20C008280(v46);
  return v34;
}

void sub_20C1CA1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  sub_20C008280(&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t *v47;
  uint64_t v48[2];
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;

  v4 = a1;
  v54 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C008C78((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D15D4(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_20C1D1618(v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v53 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v49 = v29;
        v50 = v30;
        v52 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v51 = v30 + 24;
        sub_20BDF34C0(a2, &v49);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v49);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D16B4(v4, v46);
    v34 = 1;
  }
  else
  {
    v50 = 0;
    sub_20BF4B5D8(v36, &v49);
    sub_20BF4C2D8((uint64_t)&v49);
    v34 = 0;
  }
  sub_20C00918C(v46);
  return v34;
}

void sub_20C1CA5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  sub_20C00918C(&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C00A144((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D198C(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D19D0((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 48;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC983ALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D1A90(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20C00A724(v46);
  return v34;
}

void sub_20C1CA9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  sub_20C00A724(&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C00B0B4((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C00B604((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D1E84(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D1EC8((pxrInternal__aapl__pxrReserved__::VtValue *)v48);
      ++v11;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAE6BD6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D1F24(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CADBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C00E34C((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D22C0(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D2304((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 96;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC1850 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D23BC(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20C00E910(v46);
  return v34;
}

void sub_20C1CB1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  sub_20C00E910(&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _OWORD *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  _OWORD *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C0160C8((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D27C8(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D280C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 2;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D2894(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CB594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C016D64((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D2BCC(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D2C10((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 72;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D2CF0(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CB980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  __int128 *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF5F80C((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D3038(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D307C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 8;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF5FD14(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CBD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuath>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF61C74((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D3288(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D32CC((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF62084(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CC158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  __n128 *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  __n128 *v47;
  unsigned int *v48[2];
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;

  v4 = a1;
  v54 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF6110C((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D3508(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_20C1D354C(v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v53 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v49 = v29;
        v50 = v30;
        v52 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v51 = v30 + 24;
        sub_20BDF34C0(a2, &v49);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v49);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF61550(v4, v46);
    v34 = 1;
  }
  else
  {
    v50 = 0;
    sub_20BF4B5D8(v36, &v49);
    sub_20BF4C2D8((uint64_t)&v49);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CC544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _OWORD *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  _OWORD *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF62858((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D371C(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D3760((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 2;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF62BF8(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CC930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C00F4D0((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D3930(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D3974((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0A2 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D39E8(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CCD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  _DWORD *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF590CC((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D3D7C(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D3DC0((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA074 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF594E0(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CD108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF585AC((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D3F84(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D3FC8((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF589F8(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CD4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  __n128 *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  __n128 *v47;
  unsigned int *v48[2];
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;

  v4 = a1;
  v54 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF59CB4((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D403C(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_20C1D4080(v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v53 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v49 = v29;
        v50 = v30;
        v52 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v51 = v30 + 24;
        sub_20BDF34C0(a2, &v49);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v49);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF5A044(v4, v46);
    v34 = 1;
  }
  else
  {
    v50 = 0;
    sub_20BF4B5D8(v36, &v49);
    sub_20BF4C2D8((uint64_t)&v49);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CD8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C0112EC((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D41F4(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D4238((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 12;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA15ALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D42D0(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CDCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF5B6EC((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D4760(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D47A4((uint64_t)v48, v11);
      v11 += 6;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA12CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF5BB80(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CE0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF5AB98((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D4984(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D49C8((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 12;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF5B064(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CE4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  __n128 *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  __n128 *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF5C3C4((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D4B58(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D4B9C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 = (__n128 *)((char *)v11 + 24);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF5C7D8(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CE890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  __n128 *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  __n128 *v47;
  unsigned int *v48[2];
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;

  v4 = a1;
  v54 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20C013364((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D4D2C(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_20C1D4D70(v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA212 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v53 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v49 = v29;
        v50 = v30;
        v52 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v51 = v30 + 24;
        sub_20BDF34C0(a2, &v49);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v49);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20C1D4DF4(v4, v46);
    v34 = 1;
  }
  else
  {
    v50 = 0;
    sub_20BF4B5D8(v36, &v49);
    sub_20BF4C2D8((uint64_t)&v49);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CEC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  uint64_t *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF5DD9C((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D527C(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D52C0((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1E4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF5E1B0(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CF068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  __n128 *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  __n128 *v47;
  unsigned int *v48[2];
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;

  v4 = a1;
  v54 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF5D23C((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D5480(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_20C1D54C4(v48, v11++);
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v53 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v49 = v29;
        v50 = v30;
        v52 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v51 = v30 + 24;
        sub_20BDF34C0(a2, &v49);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v49);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF5D684(v4, v46);
    v34 = 1;
  }
  else
  {
    v50 = 0;
    sub_20BF4B5D8(v36, &v49);
    sub_20BF4C2D8((uint64_t)&v49);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CF454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue **v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  char *v10;
  _OWORD *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  void *v15;
  int v16;
  void **v17;
  const char *v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  __n128 v46[2];
  _OWORD *v47;
  char v48[8];
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v4 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  v8 = *v6;
  v7 = v6[1];
  sub_20BF5E990((uint64_t)v46, (v7 - *v6) >> 4);
  sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7)
    goto LABEL_36;
  v11 = v47;
  v36 = v4;
  v12 = 1;
  v13 = v8;
  do
  {
    sub_20C1D5638(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_20C1D567C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 2;
    }
    else
    {
      v14 = *v6;
      sub_20C1CFB84(v13);
      if (v43 >= 0)
        v15 = &v42;
      else
        v15 = v42;
      sub_20C1C717C(a3, v40);
      v16 = v41;
      v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      v20 = v40;
      if (v16 < 0)
        v20 = v17;
      v21 = v38;
      if (v39 < 0)
        v21 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      v22 = a2[1];
      v23 = a2[2];
      if (v22 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v54 = a2 + 2;
        if (v28)
          v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[24 * v25];
        v50 = v29;
        v51 = v30;
        v53 = &v29[24 * v28];
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v30 + 2) = v45;
        *(_OWORD *)v30 = v31;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v52 = v30 + 24;
        sub_20BDF34C0(a2, &v50);
        v32 = a2[1];
        sub_20BDF3648((uint64_t)&v50);
        v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v22 + 16) = v45;
        *(_OWORD *)v22 = v24;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42);
      v12 = 0;
    }
    sub_20BF4C2D8((uint64_t)v48);
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  v4 = v36;
  if ((v12 & 1) != 0)
  {
LABEL_36:
    sub_20BF5ED34(v4, v46);
    v34 = 1;
  }
  else
  {
    v51 = 0;
    sub_20BF4B5D8(v36, &v50);
    sub_20BF4C2D8((uint64_t)&v50);
    v34 = 0;
  }
  sub_20BF5618C((uint64_t)v46);
  return v34;
}

void sub_20C1CF840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20BF5618C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1CF904(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C1CFB2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1CFB40@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFB1A38(a2);
}

void sub_20C1CFB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20C1CFB84(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  const std::type_info *v2;
  char *v3;
  std::string::size_type size;
  const char *v5;
  char *v6;
  void **v7;
  std::string *v8;
  void *__p[2];
  char v10;
  std::string v11;

  sub_20BF834B0((uint64_t)a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v11.__r_.__value_.__l.__size_;
    if (v11.__r_.__value_.__l.__size_ <= 0x20)
      goto LABEL_6;
  }
  else
  {
    size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if (HIBYTE(v11.__r_.__value_.__r.__words[2]) < 0x21u)
      goto LABEL_6;
  }
  std::string::erase(&v11, 0x20uLL, size - 32);
  std::string::append(&v11, "...");
LABEL_6:
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a1, v2, v3, (uint64_t)__p);
  if (v10 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = &v11;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"<%s> '%s'", v5, v6, v7, v8);
  if (v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20C1CFC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C1CFCB4(pxrInternal__aapl__pxrReserved__::VtValue *a1, _BYTE *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  char v7;

  if ((sub_20BFB1AC0(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = &unk_24C51FCF3;
    *(_BYTE *)a1 = 0;
  }
  result = sub_20C1CFDE0(a1);
  v7 = *(_BYTE *)result;
  *(_BYTE *)result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_20C1CFD2C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C07FEB8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C07FDF0(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C07FF98(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1CFDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1CFDE0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1CFE6C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1CFF28(a2);
}

void sub_20C1CFE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1CFEB0(pxrInternal__aapl__pxrReserved__::VtValue *a1, _BYTE *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  char v7;

  if ((sub_20BFECAA0(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = &unk_24C51FE63;
    *(_BYTE *)a1 = 0;
  }
  result = sub_20C1CFFB0(a1);
  v7 = *(_BYTE *)result;
  *(_BYTE *)result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_20C1CFF28(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFECAA0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB790], v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

_QWORD *sub_20C1CFFB0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D003C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFB2C64(a2);
}

void sub_20C1D006C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D0080(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  int v7;

  if ((sub_20BFB2CEC(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = &unk_24C52008B;
    *(_DWORD *)a1 = 0;
  }
  result = sub_20C1D00F8(a1);
  v7 = *(_DWORD *)result;
  *(_DWORD *)result = *a2;
  *a2 = v7;
  return result;
}

_QWORD *sub_20C1D00F8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D0184@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D0240(a2);
}

void sub_20C1D01B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D01C8(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  int v7;

  if ((sub_20C1D02C8(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = &unk_24C520143;
    *(_DWORD *)a1 = 0;
  }
  result = sub_20C1D0300(a1);
  v7 = *(_DWORD *)result;
  *(_DWORD *)result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_20C1D0240(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D02C8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB7A0], v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D02C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 6)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB7A0]);
  else
    return 0;
}

_QWORD *sub_20C1D0300(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D038C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D04F8(a2);
}

void sub_20C1D03BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D03D0(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *result;
  uint64_t v7;

  if ((sub_20C0495EC(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = &unk_24C52036B;
  }
  result = sub_20C1D0580(a1);
  v7 = *result;
  *result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_20C1D0444(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C032314(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C080298(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C080408(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D04E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D04F8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C0495EC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB7D0], v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

_QWORD *sub_20C1D0580(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D060C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D0778(a2);
}

void sub_20C1D063C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D0650(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *result;
  uint64_t v7;

  if ((sub_20C1D0800(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = &unk_24C520423;
  }
  result = sub_20C1D0838(a1);
  v7 = *result;
  *result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_20C1D06C4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C033AF4(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D08C4(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C1D0990(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D0760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D0778(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D0800(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB7D8], v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D0800(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 8)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB7D8]);
  else
    return 0;
}

_QWORD *sub_20C1D0838(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

_QWORD *sub_20C1D08C4(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C525198;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D0954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D0990(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C00531C((_OWORD **)a1);
}

std::type_info *sub_20C1D0A20@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D0ADC(a2);
}

void sub_20C1D0A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D0A64(pxrInternal__aapl__pxrReserved__::VtValue *a1, _WORD *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  __int16 v7;

  if ((sub_20C1D0B64(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = (char *)&off_24C5204D8 + 3;
    *(_WORD *)a1 = 0;
  }
  result = sub_20C1D0B9C(a1);
  v7 = *(_WORD *)result;
  *(_WORD *)result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_20C1D0ADC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D0B64(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51BF30, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D0B64(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 11)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BF30);
  else
    return 0;
}

_QWORD *sub_20C1D0B9C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D0C28@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BF7D8A0(a2);
}

void sub_20C1D0C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

float sub_20C1D0C6C(pxrInternal__aapl__pxrReserved__::VtValue *a1, float *a2)
{
  uint64_t v4;
  BOOL v5;
  float *v6;
  float result;

  if ((sub_20BF7B9F8(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = &unk_24C520593;
    *(_DWORD *)a1 = 0;
  }
  v6 = (float *)sub_20BF7BAD8(a1);
  result = *v6;
  *v6 = *a2;
  *a2 = result;
  return result;
}

std::type_info *sub_20C1D0CE4@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BF7EF78(a2);
}

void sub_20C1D0D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20C1D0D28(pxrInternal__aapl__pxrReserved__::VtValue *a1, double *a2)
{
  uint64_t v4;
  BOOL v5;
  double *v6;
  double result;

  if ((sub_20BF78EEC(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = &unk_24C52064B;
  }
  v6 = (double *)sub_20BF7B220(a1);
  result = *v6;
  *v6 = *a2;
  *a2 = result;
  return result;
}

std::type_info *sub_20C1D0D9C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D0EEC(a2);
}

void sub_20C1D0DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20C1D0DE0(pxrInternal__aapl__pxrReserved__::VtValue *a1, double *a2)
{
  double *v4;
  double result;
  uint64_t v6;

  if ((sub_20C1D0F74(a1) & 1) == 0)
  {
    v6 = 0;
    sub_20C1D0FEC(a1, &v6);
  }
  v4 = (double *)sub_20C1D1088(a1);
  result = *v4;
  *v4 = *a2;
  *a2 = result;
  return result;
}

__n128 sub_20C1D0E38(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C1D1114(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D118C(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C1D1258(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D0ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D0EEC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D0F74(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C525368, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D0F74(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CACA312 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C525368);
}

_QWORD *sub_20C1D0FEC(_QWORD *a1, _QWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = (char *)&off_24C5252B0 + 1;
  *a1 = *a2;
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D107C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D1088(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_20C1D1114(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CACA2D2 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C525430);
}

_QWORD *sub_20C1D118C(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C525378;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D121C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D1258(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C00752C((_OWORD **)a1);
}

std::type_info *sub_20C1D12E8@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFB4580(a2);
}

void sub_20C1D1318(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D132C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  __n128 result;
  unint64_t v7;
  void *__p[2];
  uint64_t v9;

  if ((sub_20BFB4608(a1) & 1) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v9 = 0;
    sub_20C1D1478((uint64_t)a1, (uint64_t)__p);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  v4 = (__n128 *)sub_20C1D1544((uint64_t *)a1);
  v5 = v4[1].n128_u64[0];
  result = *v4;
  v7 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v7;
  *a2 = result;
  a2[1].n128_u64[0] = v5;
  return result;
}

void sub_20C1D13A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C1D13C4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BFED418(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C080704(a1, (uint64_t)v10);
    sub_20C008280(v10);
  }
  v4 = (__n128 *)sub_20C080874(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D1460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C008280(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1D1478(uint64_t a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, a1);
  *(_QWORD *)(a1 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D1508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D1544(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF77390(a1);
}

std::type_info *sub_20C1D15D4@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFB5DC8(a2);
}

void sub_20C1D1604(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D1618(uint64_t *a1, uint64_t *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;

  if ((sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v8 = 0;
    sub_20C1D1768(a1, &v8);
    if ((v8 & 7) != 0)
    {
      v4 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  result = sub_20C102484(a1);
  v7 = *result;
  *result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_20C1D16B4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BFED450(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D1830(a1, (uint64_t)v10);
    sub_20C00918C(v10);
  }
  v4 = (__n128 *)sub_20C1D18FC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D1750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00918C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D1768(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
  a1[1] = (uint64_t)&off_24C5207B8 + 1;
  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (v9)
    (*(void (**)(_BYTE *))(v9 + 32))(v8);
  return a1;
}

void sub_20C1D1824(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D1830(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C525500;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D18C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D18FC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C0090CC((_OWORD **)a1);
}

std::type_info *sub_20C1D198C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D1B44(a2);
}

void sub_20C1D19BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D19D0(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  void *v11[2];
  char v12;
  void *__p;
  char v14;

  if ((sub_20BFED488(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v11);
    sub_20C1D1BCC((uint64_t)a1, (__int128 *)v11);
    if (v14 < 0)
      operator delete(__p);
    if (v12 < 0)
      operator delete(v11[0]);
  }
  v4 = sub_20C1D1C98((__int128 **)a1);
  v5 = *((_QWORD *)v4 + 2);
  v6 = *v4;
  v7 = *(_QWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  *((_QWORD *)v4 + 2) = v7;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v8 = *((_QWORD *)v4 + 5);
  result = *(__n128 *)((char *)v4 + 24);
  v10 = *(_QWORD *)(a2 + 40);
  *(__int128 *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v4 + 5) = v10;
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = v8;
  return result;
}

void sub_20C1D1A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D1A90(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BFED500(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D1D28(a1, (uint64_t)v10);
    sub_20C00A724(v10);
  }
  v4 = (__n128 *)sub_20C1D1DF4(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D1B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00A724(&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D1B44(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFED488(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C524DB0, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D1BCC(uint64_t a1, __int128 *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, a1);
  *(_QWORD *)(a1 + 8) = &off_24C5255B8;
  sub_20C00A0DC((char **)a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D1C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20C1D1C98(__int128 **a1)
{
  __int128 *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, __int128 **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C009FB4(a1);
}

_QWORD *sub_20C1D1D28(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C525670;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D1DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D1DF4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C00A664((_OWORD **)a1);
}

std::type_info *sub_20C1D1E84@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D1FD8(a2);
}

void sub_20C1D1EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D1EC8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  BOOL v3;

  if ((sub_20BFEA778(a1) & 1) == 0)
  {
    v2 = *((_QWORD *)a1 + 1);
    if (v2)
      v3 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v3 = 1;
    if (!v3)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = (char *)&off_24C52A800 + 3;
  }
  return sub_20C1D2060(a1);
}

__n128 sub_20C1D1F24(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C1D20EC(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D2164(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C1D2230(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D1FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D1FD8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFEA778(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C524D80, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

_QWORD *sub_20C1D2060(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_20C1D20EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAE8B54 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C5257E0);
}

_QWORD *sub_20C1D2164(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C525728;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D21F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D2230(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C00B408((_OWORD **)a1);
}

std::type_info *sub_20C1D22C0@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D2470(a2);
}

void sub_20C1D22F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20C1D2304(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  void *v5[2];
  _OWORD v6[2];
  __int128 v7;
  void *__p[2];
  __int128 v9;
  void **v10;

  if ((sub_20BFEFCF0(a1) & 1) == 0)
  {
    *(_OWORD *)__p = 0u;
    v9 = 0u;
    v7 = 0u;
    *(_OWORD *)v5 = 0u;
    memset(v6, 0, sizeof(v6));
    sub_20C1D24F8((uint64_t)a1, (uint64_t)v5);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[1]);
    v10 = (void **)&v7;
    sub_20C00E25C(&v10);
    v10 = (void **)v6 + 1;
    sub_20C00D5A8(&v10);
    if (v5[0])
    {
      v5[1] = v5[0];
      operator delete(v5[0]);
    }
  }
  return sub_20C1D25C4((uint64_t *)a1, a2);
}

void sub_20C1D23A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00BBB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D23BC(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BFEFDCC(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D26FC(a1, (uint64_t)v10);
    sub_20C00E910(v10);
  }
  v4 = (__n128 *)sub_20C1939F0(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E910(&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D2470(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFEFCF0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C524DD8, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D24F8(uint64_t a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, a1);
  *(_QWORD *)(a1 + 8) = &off_24C5257F8;
  sub_20C00E2E0((unsigned int **)a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D2588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20C1D25C4(uint64_t *a1, uint64_t a2)
{
  double result;
  _QWORD v4[4];
  uint64_t *v5[4];

  v5[0] = (uint64_t *)sub_20C1938C4(a1);
  v5[1] = v5[0] + 3;
  v5[2] = v5[0] + 6;
  v5[3] = v5[0] + 9;
  v4[0] = a2;
  v4[1] = a2 + 24;
  v4[2] = a2 + 48;
  v4[3] = a2 + 72;
  *(_QWORD *)&result = sub_20C1D2620(v5, (uint64_t)v4).n128_u64[0];
  return result;
}

__n128 sub_20C1D2620(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  unint64_t v19;
  __n128 result;
  unint64_t v21;

  v2 = *a1;
  v3 = *(uint64_t **)a2;
  v4 = **a1;
  *v2 = **(_QWORD **)a2;
  *v3 = v4;
  v5 = v2[1];
  v2[1] = v3[1];
  v3[1] = v5;
  v6 = v2[2];
  v2[2] = v3[2];
  v3[2] = v6;
  v7 = a1[1];
  v8 = *(uint64_t **)(a2 + 8);
  v9 = *v7;
  *v7 = *v8;
  *v8 = v9;
  v10 = v7[1];
  v7[1] = v8[1];
  v8[1] = v10;
  v11 = v7[2];
  v7[2] = v8[2];
  v8[2] = v11;
  v12 = a1[2];
  v13 = *(uint64_t **)(a2 + 16);
  v14 = *v12;
  *v12 = *v13;
  *v13 = v14;
  v15 = v12[1];
  v12[1] = v13[1];
  v13[1] = v15;
  v16 = v12[2];
  v12[2] = v13[2];
  v13[2] = v16;
  v17 = (__n128 *)a1[3];
  v18 = *(__n128 **)(a2 + 24);
  v19 = v17[1].n128_u64[0];
  result = *v17;
  v21 = v18[1].n128_u64[0];
  *v17 = *v18;
  v17[1].n128_u64[0] = v21;
  *v18 = result;
  v18[1].n128_u64[0] = v19;
  return result;
}

_QWORD *sub_20C1D26FC(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C5258B0;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D278C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

std::type_info *sub_20C1D27C8@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFA8ABC(a2);
}

void sub_20C1D27F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D280C(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  unsigned int *v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA8B44(a1) & 1) == 0)
  {
    memset(v8, 0, 32);
    sub_20C1D2948(a1, v8);
  }
  v4 = sub_20BFA8C3C((unsigned int **)a1);
  v6 = *(_OWORD *)v4;
  result = *((__n128 *)v4 + 1);
  v7 = a2[1];
  *(_OWORD *)v4 = *a2;
  *((_OWORD *)v4 + 1) = v7;
  *a2 = v6;
  a2[1] = result;
  return result;
}

__n128 sub_20C1D2894(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C1D2A38(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D2A70(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C1D2B3C(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D2930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D2948(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v9, (uint64_t)a1);
  a1[1] = (char *)&off_24C5221E8 + 2;
  v4 = (char *)operator new(0x28uLL);
  v5 = a2[1];
  *(_OWORD *)v4 = *a2;
  *((_OWORD *)v4 + 1) = v5;
  v6 = (unsigned int *)(v4 + 32);
  atomic_store(0, (unsigned int *)v4 + 8);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  if (v10)
    (*(void (**)(_BYTE *))(v10 + 32))(v9);
  return a1;
}

void sub_20C1D29FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D2A38(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 31)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DB28);
  else
    return 0;
}

_QWORD *sub_20C1D2A70(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C525DB8;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D2B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D2B3C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C0164BC((_OWORD **)a1);
}

std::type_info *sub_20C1D2BCC@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFAB4B4(a2);
}

void sub_20C1D2BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20C1D2C10(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFAB53C(a1) & 1) == 0)
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    sub_20C1D2DA4(a1, (uint64_t)&v11);
  }
  v4 = sub_20BFAB6B0(a1);
  v12 = *(_OWORD *)(v4 + 16);
  v13 = *(_OWORD *)(v4 + 32);
  v14 = *(_OWORD *)(v4 + 48);
  v15 = *(_QWORD *)(v4 + 64);
  v11 = *(_OWORD *)v4;
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v6 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)(v4 + 16) = v7;
  *(_QWORD *)(a2 + 64) = v15;
  v8 = v14;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v8;
  result = *(double *)&v11;
  v10 = v12;
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v10;
  return result;
}

__n128 sub_20C1D2CF0(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C1D2EA4(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D2EDC(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C1D2FA8(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D2D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D2DA4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v10, (uint64_t)a1);
  a1[1] = (char *)&off_24C522470 + 2;
  v4 = (char *)operator new(0x50uLL);
  v5 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = v5;
  *((_QWORD *)v4 + 8) = *(_QWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v6;
  v7 = (unsigned int *)(v4 + 72);
  atomic_store(0, (unsigned int *)v4 + 18);
  *a1 = v4;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (v11)
    (*(void (**)(_BYTE *))(v11 + 32))(v10);
  return a1;
}

void sub_20C1D2E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D2EA4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 30)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DB10);
  else
    return 0;
}

_QWORD *sub_20C1D2EDC(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C525E70;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D2F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D2FA8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C017274((_OWORD **)a1);
}

std::type_info *sub_20C1D3038@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFADDD8(a2);
}

void sub_20C1D3068(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D307C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __int128 *a2)
{
  unsigned int *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFADE60(a1) & 1) == 0)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    sub_20C1D3180(a1, &v15);
  }
  v4 = sub_20BFADFEC((unsigned int **)a1);
  v19 = *((_OWORD *)v4 + 4);
  v20 = *((__n128 *)v4 + 5);
  v21 = *((_OWORD *)v4 + 6);
  v22 = *((_OWORD *)v4 + 7);
  v15 = *(_OWORD *)v4;
  v16 = *((_OWORD *)v4 + 1);
  v17 = *((_OWORD *)v4 + 2);
  v18 = *((_OWORD *)v4 + 3);
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *((_OWORD *)v4 + 6) = a2[6];
  *((_OWORD *)v4 + 7) = v7;
  *((_OWORD *)v4 + 4) = v5;
  *((_OWORD *)v4 + 5) = v6;
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[3];
  *((_OWORD *)v4 + 2) = a2[2];
  *((_OWORD *)v4 + 3) = v10;
  *(_OWORD *)v4 = v8;
  *((_OWORD *)v4 + 1) = v9;
  v11 = v18;
  a2[2] = v17;
  a2[3] = v11;
  v12 = v16;
  *a2 = v15;
  a2[1] = v12;
  v13 = v22;
  a2[6] = v21;
  a2[7] = v13;
  result = v20;
  a2[4] = v19;
  a2[5] = (__int128)result;
  return result;
}

_QWORD *sub_20C1D3180(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v12, (uint64_t)a1);
  a1[1] = (char *)&off_24C51E470 + 2;
  v4 = (char *)operator new(0x88uLL);
  v5 = a2[5];
  *((_OWORD *)v4 + 4) = a2[4];
  *((_OWORD *)v4 + 5) = v5;
  v6 = a2[7];
  *((_OWORD *)v4 + 6) = a2[6];
  *((_OWORD *)v4 + 7) = v6;
  v7 = a2[1];
  *(_OWORD *)v4 = *a2;
  *((_OWORD *)v4 + 1) = v7;
  v8 = a2[3];
  *((_OWORD *)v4 + 2) = a2[2];
  *((_OWORD *)v4 + 3) = v8;
  v9 = (unsigned int *)(v4 + 128);
  atomic_store(0, (unsigned int *)v4 + 32);
  *a1 = v4;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  if (v13)
    (*(void (**)(_BYTE *))(v13 + 32))(v12);
  return a1;
}

void sub_20C1D324C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

std::type_info *sub_20C1D3288@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D3320(a2);
}

void sub_20C1D32B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D32CC(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  if ((sub_20C1D33A8(a1) & 1) == 0)
    sub_20C1D33E0(a1, &v6);
  result = sub_20C1D347C(a1);
  v5 = *result;
  *result = *a2;
  *a2 = v5;
  return result;
}

std::type_info *sub_20C1D3320(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D33A8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C030, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D33A8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 87)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C030);
  else
    return 0;
}

_QWORD *sub_20C1D33E0(_QWORD *a1, _QWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = (char *)&off_24C51E698 + 1;
  *a1 = *a2;
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D3470(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D347C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D3508@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFB0824(a2);
}

void sub_20C1D3538(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D354C(unsigned int **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;
  __int128 v6;

  if ((sub_20BFB08AC((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
    sub_20C1D35A0(a1, &v6);
  v4 = (__n128 *)sub_20C1D368C(a1);
  result = *v4;
  *v4 = *a2;
  *a2 = result;
  return result;
}

unsigned int **sub_20C1D35A0(unsigned int **a1, _OWORD *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  char v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
  a1[1] = (unsigned int *)&off_24C51E5E0;
  v4 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)v4 = *a2;
  v5 = v4 + 4;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v9)
    (*(void (**)(char *))(v9 + 32))(v8);
  return a1;
}

void sub_20C1D3650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20C1D368C(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF536D0(a1);
}

std::type_info *sub_20C1D371C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFAF404(a2);
}

void sub_20C1D374C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D3760(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  unsigned int *v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[4];

  if ((sub_20BFAF48C(a1) & 1) == 0)
    sub_20C1D37B4(a1, v8);
  v4 = sub_20C1D38A0((unsigned int **)a1);
  v6 = *(_OWORD *)v4;
  result = *((__n128 *)v4 + 1);
  v7 = a2[1];
  *(_OWORD *)v4 = *a2;
  *((_OWORD *)v4 + 1) = v7;
  *a2 = v6;
  a2[1] = result;
  return result;
}

_QWORD *sub_20C1D37B4(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v9, (uint64_t)a1);
  a1[1] = &off_24C51E750;
  v4 = (char *)operator new(0x28uLL);
  v5 = a2[1];
  *(_OWORD *)v4 = *a2;
  *((_OWORD *)v4 + 1) = v5;
  v6 = (unsigned int *)(v4 + 32);
  atomic_store(0, (unsigned int *)v4 + 8);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  if (v10)
    (*(void (**)(_BYTE *))(v10 + 32))(v9);
  return a1;
}

void sub_20C1D3864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20C1D38A0(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF53AC0(a1);
}

std::type_info *sub_20C1D3930@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D3A9C(a2);
}

void sub_20C1D3960(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D3974(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *result;
  uint64_t v7;

  if ((sub_20C1D3B24(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = (char *)&off_24C525968 + 3;
  }
  result = sub_20C1D3B5C(a1);
  v7 = *result;
  *result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_20C1D39E8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C1D3BE8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D3C20(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C1D3CEC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D3A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D3A9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D3B24(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C140, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D3B24(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 63)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C140);
  else
    return 0;
}

_QWORD *sub_20C1D3B5C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_20C1D3BE8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 16)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51D9C0);
  else
    return 0;
}

_QWORD *sub_20C1D3C20(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C525A20;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D3CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D3CEC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C00F90C((_OWORD **)a1);
}

std::type_info *sub_20C1D3D7C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D3E38(a2);
}

void sub_20C1D3DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D3DC0(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  int v7;

  if ((sub_20C1D3EC0(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = (char *)&off_24C51DDF8 + 3;
    *(_DWORD *)a1 = 0;
  }
  result = sub_20C1D3EF8(a1);
  v7 = *(_DWORD *)result;
  *(_DWORD *)result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_20C1D3E38(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D3EC0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C130, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D3EC0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 66)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C130);
  else
    return 0;
}

_QWORD *sub_20C1D3EF8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D3F84@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BF9F100(a2);
}

void sub_20C1D3FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D3FC8(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *result;
  uint64_t v7;

  if ((sub_20BF9F188(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = (char *)&off_24C51DEB0 + 3;
  }
  result = sub_20BF9F268(a1);
  v7 = *result;
  *result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_20C1D403C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BF9D790(a2);
}

void sub_20C1D406C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D4080(unsigned int **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BF9D818((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v6 = 0uLL;
    sub_20C1D4104(a1, &v6);
  }
  v4 = (__n128 *)sub_20BF9D8F8(a1);
  result = *v4;
  *v4 = *a2;
  *a2 = result;
  return result;
}

unsigned int **sub_20C1D4104(unsigned int **a1, _OWORD *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  char v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
  a1[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  v4 = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)v4 = *a2;
  v5 = v4 + 4;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v9)
    (*(void (**)(char *))(v9 + 32))(v8);
  return a1;
}

void sub_20C1D41B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

std::type_info *sub_20C1D41F4@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D4384(a2);
}

void sub_20C1D4224(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C1D4238(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D440C(a1) & 1) == 0)
  {
    v9 = 0;
    v8 = 0;
    sub_20C1D4444(a1, (uint64_t)&v8);
  }
  result = sub_20C1D453C((unsigned int **)a1);
  v5 = result[2];
  v6 = *(_QWORD *)result;
  v7 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  result[2] = v7;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

__n128 sub_20C1D42D0(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C1D45CC(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D4604(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C1D46D0(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D4384(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D440C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C180, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D440C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 62)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C180);
  else
    return 0;
}

_QWORD *sub_20C1D4444(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
  a1[1] = (char *)&off_24C525AD8 + 2;
  v4 = operator new(0x10uLL);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  v4[2] = *(_DWORD *)(a2 + 8);
  v5 = v4 + 3;
  atomic_store(0, v4 + 3);
  *a1 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v9)
    (*(void (**)(_BYTE *))(v9 + 32))(v8);
  return a1;
}

void sub_20C1D4500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20C1D453C(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF52668(a1);
}

uint64_t sub_20C1D45CC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 15)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51D9A8);
  else
    return 0;
}

_QWORD *sub_20C1D4604(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C525B90;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D4694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D46D0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C0117F0((_OWORD **)a1);
}

std::type_info *sub_20C1D4760@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D4838(a2);
}

void sub_20C1D4790(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D47A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  __int16 v7;
  int v8;
  __int16 v9;

  if ((sub_20C1D48C0((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      v5 = (*(_QWORD *)(a1 + 8) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *(_QWORD *)(a1 + 8) = (char *)&off_24C51E020 + 3;
    *(_WORD *)(a1 + 4) = 0;
    *(_DWORD *)a1 = 0;
  }
  result = sub_20C1D48F8((_QWORD *)a1);
  v7 = *((_WORD *)result + 2);
  v8 = *(_DWORD *)result;
  v9 = *(_WORD *)(a2 + 4);
  *(_DWORD *)result = *(_DWORD *)a2;
  *((_WORD *)result + 2) = v9;
  *(_DWORD *)a2 = v8;
  *(_WORD *)(a2 + 4) = v7;
  return result;
}

std::type_info *sub_20C1D4838(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D48C0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C170, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D48C0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 65)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C170);
  else
    return 0;
}

_QWORD *sub_20C1D48F8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D4984@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFA2D84(a2);
}

void sub_20C1D49B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C1D49C8(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA2E0C(a1) & 1) == 0)
  {
    v9 = 0;
    v8 = 0;
    sub_20C1D4A60(a1, (uint64_t)&v8);
  }
  result = sub_20BFA2F00((unsigned int **)a1);
  v5 = result[2];
  v6 = *(_QWORD *)result;
  v7 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  result[2] = v7;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

_QWORD *sub_20C1D4A60(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
  a1[1] = (char *)&off_24C51E0D8 + 2;
  v4 = operator new(0x10uLL);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  v4[2] = *(_DWORD *)(a2 + 8);
  v5 = v4 + 3;
  atomic_store(0, v4 + 3);
  *a1 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v9)
    (*(void (**)(_BYTE *))(v9 + 32))(v8);
  return a1;
}

void sub_20C1D4B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

std::type_info *sub_20C1D4B58@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFA0F2C(a2);
}

void sub_20C1D4B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D4B9C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  __n128 result;
  unint64_t v7;
  _QWORD v8[7];

  v8[6] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA0FB4(a1) & 1) == 0)
  {
    memset(v8, 0, 24);
    sub_20C1D4C34(a1, (uint64_t)v8);
  }
  v4 = (__n128 *)sub_20BFA10A8((unsigned int **)a1);
  v5 = v4[1].n128_u64[0];
  result = *v4;
  v7 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v7;
  *a2 = result;
  a2[1].n128_u64[0] = v5;
  return result;
}

_QWORD *sub_20C1D4C34(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
  a1[1] = (char *)&off_24C51E190 + 2;
  v4 = (char *)operator new(0x20uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  v5 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v9)
    (*(void (**)(_BYTE *))(v9 + 32))(v8);
  return a1;
}

void sub_20C1D4CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

std::type_info *sub_20C1D4D2C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D4EA8(a2);
}

void sub_20C1D4D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D4D70(unsigned int **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D4F30((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v6 = 0uLL;
    sub_20C1D4F68(a1, &v6);
  }
  v4 = (__n128 *)sub_20C1D5058(a1);
  result = *v4;
  *v4 = *a2;
  *a2 = result;
  return result;
}

__n128 sub_20C1D4DF4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20C1D50E8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20C1D5120(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20C1D51EC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20C1D4E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_20C1D4EA8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D4F30(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&unk_24C51C1C0, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D4F30(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 61)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, (const std::type_info *)&unk_24C51C1C0);
  else
    return 0;
}

unsigned int **sub_20C1D4F68(unsigned int **a1, _OWORD *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  char v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
  a1[1] = (unsigned int *)((char *)&off_24C525C48 + 2);
  v4 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)v4 = *a2;
  v5 = v4 + 4;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v9)
    (*(void (**)(char *))(v9 + 32))(v8);
  return a1;
}

void sub_20C1D501C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20C1D5058(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF536D0(a1);
}

uint64_t sub_20C1D50E8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 14)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51D990);
  else
    return 0;
}

_QWORD *sub_20C1D5120(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C525D00;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C1D51B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D51EC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C013874((_OWORD **)a1);
}

std::type_info *sub_20C1D527C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20C1D5334(a2);
}

void sub_20C1D52AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D52C0(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *result;
  uint64_t v7;

  if ((sub_20C1D53BC(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = (char *)&off_24C51E248 + 3;
  }
  result = sub_20C1D53F4(a1);
  v7 = *result;
  *result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_20C1D5334(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20C1D53BC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C1B0, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20C1D53BC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 64)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C1B0);
  else
    return 0;
}

_QWORD *sub_20C1D53F4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_20C1D5480@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFA68F0(a2);
}

void sub_20C1D54B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D54C4(unsigned int **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA6978((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v6 = 0uLL;
    sub_20C1D5548(a1, &v6);
  }
  v4 = (__n128 *)sub_20BFA6A70(a1);
  result = *v4;
  *v4 = *a2;
  *a2 = result;
  return result;
}

unsigned int **sub_20C1D5548(unsigned int **a1, _OWORD *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  char v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
  a1[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  v4 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)v4 = *a2;
  v5 = v4 + 4;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v9)
    (*(void (**)(char *))(v9 + 32))(v8);
  return a1;
}

void sub_20C1D55FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

std::type_info *sub_20C1D5638@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  sub_20BF4C6D0(a2, a1);
  return sub_20BFA4B44(a2);
}

void sub_20C1D5668(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C1D567C(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  unsigned int *v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA4BCC(a1) & 1) == 0)
  {
    memset(v8, 0, 32);
    sub_20C1D5704(a1, v8);
  }
  v4 = sub_20BFA4CC4((unsigned int **)a1);
  v6 = *(_OWORD *)v4;
  result = *((__n128 *)v4 + 1);
  v7 = a2[1];
  *(_OWORD *)v4 = *a2;
  *((_OWORD *)v4 + 1) = v7;
  *a2 = v6;
  a2[1] = result;
  return result;
}

_QWORD *sub_20C1D5704(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v9, (uint64_t)a1);
  a1[1] = (char *)&off_24C51E3B8 + 2;
  v4 = (char *)operator new(0x28uLL);
  v5 = a2[1];
  *(_OWORD *)v4 = *a2;
  *((_OWORD *)v4 + 1) = v5;
  v6 = (unsigned int *)(v4 + 32);
  atomic_store(0, (unsigned int *)v4 + 8);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  if (v10)
    (*(void (**)(_BYTE *))(v10 + 32))(v9);
  return a1;
}

void sub_20C1D57B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C1D57F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***sub_20C1D581C(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C1D5924(a1);
}

uint64_t sub_20C1D582C()
{
  return 1;
}

unint64_t sub_20C1D5834(unsigned __int8 **a1)
{
  return sub_20C1D59D8(*a1);
}

uint64_t sub_20C1D583C(_QWORD **a1, _QWORD **a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==(*a1, *a2);
}

uint64_t sub_20C1D5848(_QWORD **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==(*a1, a2);
}

uint64_t sub_20C1D5854()
{
  return 0;
}

pxrInternal__aapl__pxrReserved__::TfType *sub_20C1D5860(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(a2, *a1);
}

void *sub_20C1D5870()
{
  return &unk_24C524D60;
}

uint64_t sub_20C1D587C()
{
  return 0;
}

uint64_t sub_20C1D5884()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C1D5890()
{
  return 0;
}

uint64_t sub_20C1D5898()
{
  return 0;
}

BOOL sub_20C1D58A0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CABEA02 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C1D58D8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D60, a2, a3);
}

void *sub_20C1D58F8()
{
  return &unk_24C524D60;
}

uint64_t sub_20C1D5904(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C1D590C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &off_24C52AC70;
  return sub_20C1D5D98((unsigned int **)a2, v2);
}

void ***sub_20C1D5924(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 19);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 16;
      sub_20BF8CA20(&v7);
      v7 = v2 + 13;
      sub_20BF8CA20(&v7);
      v7 = v2 + 10;
      sub_20BF8CA20(&v7);
      v7 = v2 + 7;
      sub_20BF8CA20(&v7);
      v7 = v2 + 4;
      sub_20BF8CA20(&v7);
      v7 = v2 + 1;
      sub_20BF8CA20(&v7);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C1D59D8(unsigned __int8 *a1)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20C1D5A40((uint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_20C1D5A40(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v8 += (unint64_t)(*(_QWORD *)a1 + v8 + (*(_QWORD *)a1 + v8) * (*(_QWORD *)a1 + v8)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return sub_20C1D5A88(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20C1D5A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  uint64_t v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::VtValue *v17;

  v14 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  v15 = *(_QWORD *)(a2 + 8) - (_QWORD)v14;
  if (v15)
  {
    v16 = v15 >> 4;
    do
    {
      --v16;
      v17 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
      sub_20BF4CF7C(a1, v14);
      v14 = v17;
    }
    while (v16);
  }
  return sub_20C1D5B18(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_20C1D5B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;

  v12 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  v13 = *(_QWORD *)(a2 + 8) - (_QWORD)v12;
  if (v13)
  {
    v14 = v13 >> 4;
    do
    {
      --v14;
      v15 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v12 + 16);
      sub_20BF4CF7C(a1, v12);
      v12 = v15;
    }
    while (v14);
  }
  return sub_20C1D5BA0(a1, a3, a4, a5, a6);
}

uint64_t sub_20C1D5BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v10;
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;

  v10 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  v11 = *(_QWORD *)(a2 + 8) - (_QWORD)v10;
  if (v11)
  {
    v12 = v11 >> 4;
    do
    {
      --v12;
      v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16);
      sub_20BF4CF7C(a1, v10);
      v10 = v13;
    }
    while (v12);
  }
  return sub_20C1D5C18(a1, a3, a4, a5);
}

uint64_t sub_20C1D5C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *v11;

  v8 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  v9 = *(_QWORD *)(a2 + 8) - (_QWORD)v8;
  if (v9)
  {
    v10 = v9 >> 4;
    do
    {
      --v10;
      v11 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
      sub_20BF4CF7C(a1, v8);
      v8 = v11;
    }
    while (v10);
  }
  return sub_20C1D5C88(a1, a3, a4);
}

uint64_t sub_20C1D5C88(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::VtValue *v9;
  pxrInternal__aapl__pxrReserved__::VtValue *v10;
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;

  v5 = result;
  v6 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  v7 = *(_QWORD *)(a2 + 8) - (_QWORD)v6;
  if (v7)
  {
    v8 = v7 >> 4;
    do
    {
      --v8;
      v9 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
      result = sub_20BF4CF7C(v5, v6);
      v6 = v9;
    }
    while (v8);
  }
  v10 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 4;
    do
    {
      --v12;
      v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16);
      result = sub_20BF4CF7C(v5, v10);
      v10 = v13;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_20C1D5D08(uint64_t *a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  void **v7;

  v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0xA0uLL);
    sub_20C036FFC((uint64_t)v3, *a1);
    v4 = v3 + 38;
    atomic_store(0, v3 + 38);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = (void **)*a1;
    *a1 = (uint64_t)v3;
    sub_20C1D5924(&v7);
  }
  return *a1;
}

void sub_20C1D5D84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1D5D98(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (unsigned int *)operator new(0xA0uLL);
  result = sub_20C036FFC((uint64_t)v4, a2);
  v6 = v4 + 38;
  atomic_store(0, v4 + 38);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C1D5DF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTupleDimensions::operator==(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = a1[2];
  return v2 == a2[2] && (!v2 || *a1 == *a2 && (v2 < 2 || a1[1] == a2[1]));
}

pxrInternal__aapl__pxrReserved__::SdfValueTypeName *pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  *(_QWORD *)this = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this);
  return this;
}

{
  *(_QWORD *)this = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this);
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken@<X0>(uint64_t this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(unsigned int **)(*(_QWORD *)this + 8);
  *a2 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(_QWORD **)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(_QWORD **)this + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(_QWORD **)this + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultValue(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(_QWORD **)this + 64;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultUnit(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(_QWORD **)this + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  void *v2;

  v2 = *(void **)this;
  return v2 != pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this)
      && *(_QWORD *)this == *(_QWORD *)(*(_QWORD *)this + 16);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  void *v2;

  v2 = *(void **)this;
  return v2 != pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this)
      && *(_QWORD *)this == *(_QWORD *)(*(_QWORD *)this + 24);
}

__n128 pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions@<Q0>(uint64_t **this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = **this;
  result = *(__n128 *)(v2 + 40);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(v2 + 56);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)**a1;
  v3 = (_QWORD *)**a2;
  return *v2 == *v3 && (v2[4] & 0xFFFFFFFFFFFFFFF8) == (v3[4] & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::TfToken *v3;
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *__p[2];
  uint64_t v10;

  v2 = **a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
  }
  v3 = *(pxrInternal__aapl__pxrReserved__::TfToken **)(v2 + 96);
  v4 = *(pxrInternal__aapl__pxrReserved__::TfToken **)(v2 + 104);
  if (v3 == v4)
  {
    v6 = 0;
  }
  else
  {
    do
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfToken::operator==(v3, (unsigned __int8 *)__p);
      v6 = v5;
      v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 + 8);
      if (v3 == v4)
        v7 = 1;
      else
        v7 = v5;
    }
    while (v7 != 1);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_20C1D60D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL8 result;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;

  v2 = **a1;
  v3 = *a2;
  if ((*a2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = *(_QWORD *)(v2 + 96);
  v6 = *(_QWORD *)(v2 + 104);
  if (v7 == v6)
  {
    result = 0;
  }
  else
  {
    v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    v9 = v7 + 8;
    do
    {
      v10 = *(_QWORD *)(v9 - 8) & 0xFFFFFFFFFFFFFFF8;
      result = v10 == v8;
      v12 = v10 == v8 || v9 == v6;
      v9 += 8;
    }
    while (!v12);
  }
  if ((v3 & 7) != 0)
  {
    v13 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetHash(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  _QWORD *v1;

  v1 = **(_QWORD ***)this;
  return bswap64(0x9E3779B97F4A7C55* ((v1[4] & 0xFFFFFFFFFFFFFFF8)+ (((v1[4] & 0xFFFFFFFFFFFFFFF8)+ *v1+ ((v1[4] & 0xFFFFFFFFFFFFFFF8) + *v1) * ((v1[4] & 0xFFFFFFFFFFFFFFF8) + *v1)) >> 1)));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  void *v1;

  v1 = *(void **)this;
  return v1 == pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAliasesAsTokens@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = **this;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_20BFE538C(a2, *(uint64_t **)(v2 + 96), *(uint64_t **)(v2 + 104), (uint64_t)(*(_QWORD *)(v2 + 104) - *(_QWORD *)(v2 + 96)) >> 3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t *EmptyString;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)(v6 + 4);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  v8 = *((char *)EmptyString + 23);
  if (v8 >= 0)
    v9 = (uint64_t)EmptyString;
  else
    v9 = *EmptyString;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)EmptyString + 23);
  else
    v10 = EmptyString[1];
  result = sub_20BDDC1C8(a1, v9, v10);
  if ((v3 & 7) != 0)
  {
    do
      v12 = __ldxr(v6);
    while (__stlxr(v12 - 2, v6));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfVariableExpression *pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this)
{
  unint64_t v2;
  unint64_t v3;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  void *__p[2];
  uint64_t v16;
  _QWORD v17[5];

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  sub_20BDDC0E4(__p, "No expression specified");
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 1);
  if (v3 >= v2)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)this) >> 3);
    v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *(_QWORD *)this) >> 3);
    if (2 * v7 > v6)
      v6 = 2 * v7;
    if (v7 >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v6;
    v17[4] = (char *)this + 16;
    if (v8)
      v9 = (char *)sub_20BDE4FF4((uint64_t)this + 16, v8);
    else
      v9 = 0;
    v10 = &v9[24 * v5];
    v17[0] = v9;
    v17[1] = v10;
    v17[3] = &v9[24 * v8];
    v11 = *(_OWORD *)__p;
    *((_QWORD *)v10 + 2) = v16;
    *(_OWORD *)v10 = v11;
    __p[1] = 0;
    v16 = 0;
    __p[0] = 0;
    v17[2] = v10 + 24;
    sub_20BDF34C0((uint64_t *)this, v17);
    v12 = *((_QWORD *)this + 1);
    sub_20BDF3648((uint64_t)v17);
    v13 = SHIBYTE(v16);
    *((_QWORD *)this + 1) = v12;
    if (v13 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 16) = v16;
    *(_OWORD *)v3 = v4;
    *((_QWORD *)this + 1) = v3 + 24;
  }
  return this;
}

void sub_20C1D6404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 63) < 0)
    operator delete(*(void **)(v15 + 40));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v15 + 24));
  __p = (void *)v15;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 v5;
  std::locale::__imp *locale;
  std::locale::__imp *v7;
  std::locale v9;
  __int128 v10;
  uint64_t v11;
  void **v12;

  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 40), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ParseVariableExpression((uint64_t *)a2, &v9);
  locale = v9.__locale_;
  v9.__locale_ = 0;
  sub_20C1D65A4(v4, (uint64_t)locale);
  sub_20BE7598C((uint64_t *)a1);
  *(_OWORD *)a1 = v10;
  *(_QWORD *)(a1 + 16) = v11;
  v11 = 0;
  v10 = 0uLL;
  v12 = (void **)&v10;
  sub_20BDE5038(&v12);
  v7 = v9.__locale_;
  v9.__locale_ = 0;
  if (v7)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_20C1D6538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  sub_20BDE5038((void ***)&a10);
  _Unwind_Resume(a1);
}

void sub_20C1D65A4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C1D6AA8(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfVariableExpression::~SdfVariableExpression(void **this)
{
  void **v2;

  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(this + 3));
  v2 = this;
  sub_20BDE5038(&v2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsValidVariableType(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  const pxrInternal__aapl__pxrReserved__::VtValue *v3;
  pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *v4;
  _BOOL8 v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::CoerceIfUnsupportedValueType(this, v7);
  if (v7[1])
    v4 = (pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)v7;
  else
    v4 = this;
  v5 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueType(v4, v3) != 0;
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C1D66EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfVariableExpression::operator BOOL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariableExpression::GetString(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this)
{
  return (uint64_t)this + 40;
}

double pxrInternal__aapl__pxrReserved__::SdfVariableExpression::Evaluate@<D0>(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double result;
  _BYTE v7[8];
  uint64_t v8[5];
  _QWORD v9[6];
  void **v10;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 3))
  {
    v5 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::EvalContext::EvalContext((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::EvalContext *)v7, a2);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _BYTE *, double))(**((_QWORD **)this + 3) + 16))(v11, *((_QWORD *)this + 3), v7, v5);
    sub_20BF4C200((_QWORD *)a3, v11);
    *(_OWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 32) = v13;
    v13 = 0;
    v12 = 0uLL;
    sub_20BF20A20(a3 + 40, v8);
    v10 = (void **)&v12;
    sub_20BDE5038(&v10);
    sub_20BF4C2D8((uint64_t)v11);
    sub_20C1D6964(v9);
    sub_20BEB3F28((uint64_t)v8);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    sub_20BE78B98((char *)(a3 + 16), *(__int128 **)this, *((__int128 **)this + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
    result = 0.0;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_DWORD *)(a3 + 72) = 1065353216;
  }
  return result;
}

void sub_20C1D6850(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfVariableExpression::_FormatUnexpectedTypeError(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this, std::type_info *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v4;
  void **v5;
  const std::type_info *v6;
  char *v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(this, a2, (char *)a3, (uint64_t)v14);
  v4 = v15;
  v5 = (void **)v14[0];
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)a2, v6, v7, (uint64_t)__p);
  if (v4 >= 0)
    v10 = v14;
  else
    v10 = v5;
  if (v13 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Expression evaluated to '%s' but expected '%s'", v8, v9, v10, v11);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
}

void sub_20C1D6930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1D6964(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_20BE97BCC((uint64_t)a1);
}

_QWORD *sub_20C1D6AA8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52AD38;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C1D6AF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C1D6B14(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C1D6B28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C1D6B40(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52AD88))
    return a1 + 24;
  else
    return 0;
}

void sub_20C1D6B84()
{
}

void pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  const char *Text;
  const char *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  void *__p;
  const char *v27;
  uint64_t v28;
  const char *v29;
  char v30;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    __p = "sdf/variantSetSpec.cpp";
    v27 = "New";
    v28 = 48;
    v29 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfPrimSpecHandl"
          "e &, const std::string &)";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL owner prim");
LABEL_14:
    *a3 = 0;
    return;
  }
  if ((MEMORY[0x212B907F8](a2) & 1) == 0)
  {
    __p = "sdf/variantSetSpec.cpp";
    v27 = "New";
    v28 = 54;
    v29 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfPrimSpecHandl"
          "e &, const std::string &)";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create variant set spec with invalid identifier: '%s'");
    goto LABEL_14;
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  v6 = (uint64_t **)sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, &v23);
  v7 = sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v20);
  sub_20BDDC0E4(&__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v20, a2, (uint64_t)&__p, &v21);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
  sub_20BFD265C(&v20);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21) & 1) != 0)
  {
    if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, 11, 1) & 1) != 0)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v23);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v20);
      v9 = v20;
      __p = v20;
      if (v20)
      {
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = (unsigned int *)__p;
        *a3 = __p;
        if (v11)
        {
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v20);
      goto LABEL_22;
    }
  }
  else
  {
    __p = "sdf/variantSetSpec.cpp";
    v27 = "New";
    v28 = 65;
    v29 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfPrimSpecHandl"
          "e &, const std::string &)";
    v30 = 0;
    v13 = sub_20C0B0CA4(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &v20);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
    if (*(char *)(a2 + 23) >= 0)
      v15 = (const char *)a2;
    else
      v15 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create variant set spec at invalid path <%s{%s=}>", Text, v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
    sub_20BFD265C(&v20);
  }
  *a3 = 0;
LABEL_22:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  v16 = v24;
  if (v24)
  {
    v17 = (unsigned int *)(v24 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
}

{
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  const char *Text;
  const char *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  void *__p;
  const char *v27;
  uint64_t v28;
  const char *v29;
  char v30;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    __p = "sdf/variantSetSpec.cpp";
    v27 = "New";
    v28 = 83;
    v29 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfVariantSpecHa"
          "ndle &, const std::string &)";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL owner variant");
LABEL_14:
    *a3 = 0;
    return;
  }
  if ((MEMORY[0x212B907F8](a2) & 1) == 0)
  {
    __p = "sdf/variantSetSpec.cpp";
    v27 = "New";
    v28 = 89;
    v29 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfVariantSpecHa"
          "ndle &, const std::string &)";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create variant set spec with invalid identifier: '%s'");
    goto LABEL_14;
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  v6 = (uint64_t **)sub_20BFE8634(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, &v23);
  v7 = sub_20BFE8634(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v20);
  sub_20BDDC0E4(&__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v20, a2, (uint64_t)&__p, &v21);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
  sub_20BFD265C(&v20);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21) & 1) != 0)
  {
    if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, 11, 1) & 1) != 0)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v23);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v20);
      v9 = v20;
      __p = v20;
      if (v20)
      {
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = (unsigned int *)__p;
        *a3 = __p;
        if (v11)
        {
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v20);
      goto LABEL_22;
    }
  }
  else
  {
    __p = "sdf/variantSetSpec.cpp";
    v27 = "New";
    v28 = 100;
    v29 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfVariantSpecHa"
          "ndle &, const std::string &)";
    v30 = 0;
    v13 = sub_20BFE8634(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &v20);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
    if (*(char *)(a2 + 23) >= 0)
      v15 = (const char *)a2;
    else
      v15 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create variant set spec at invalid path <%s{%s=}>", Text, v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
    sub_20BFD265C(&v20);
  }
  *a3 = 0;
LABEL_22:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  v16 = v24;
  if (v24)
  {
    v17 = (unsigned int *)(v24 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
}

void sub_20C1D6E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  sub_20BFD1A18(&a13);
  v23 = a15;
  if (a15)
  {
    v24 = (unsigned int *)(a15 + 8);
    do
    {
      v25 = __ldxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a16);
  _Unwind_Resume(a1);
}

void sub_20C1D7170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  sub_20BFD1A18(&a13);
  v23 = a15;
  if (a15)
  {
    v24 = (unsigned int *)(a15 + 8);
    do
    {
      v25 = __ldxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a16);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetName@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *Name;
  __int128 v4;
  int v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v6);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    v4 = *(_OWORD *)Name;
    *(_QWORD *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C1D7280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetNameToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v8;
  int v9;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v8);
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  v4 = *(unsigned int **)NameToken;
  *a2 = *(unsigned int **)NameToken;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C1D730C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetOwner@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v13);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v13);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, &v11);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  result = v14;
  if (v14)
  {
    v6 = (unsigned int *)(v14 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C1D73E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&a9);
  v14 = a13;
  if (a13)
  {
    v15 = (unsigned int *)(a13 + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariants@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Sdf_Children(a2, &v11, &v9, (uint64_t *)v4 + 7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  result = v12;
  if (v12)
  {
    v6 = (unsigned int *)(v12 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C1D74F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariantList@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4[10];

  pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariants(this, (uint64_t)v4);
  sub_20C1D759C(v4, a2);
  return sub_20C18CB50((uint64_t)v4);
}

void sub_20C1D7588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C18CB50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D759C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Size;

  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetSize((uint64_t)a1);
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetSize((uint64_t)a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetSize((uint64_t)a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_20C1D7A6C(a2, a1, 0, (uint64_t)a1, Size, Size);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::RemoveVariant(uint64_t **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  const char *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v25;
  const char *v26;
  void *__p[2];
  char v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, &v36);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v35);
  v4 = sub_20BFE8634(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v4, &v29);
  sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, &v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
  sub_20BFD265C(&v29);
  v5 = (uint64_t **)sub_20BFE8634(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5, (uint64_t *)&v29);
  if (!sub_20BEB560C((uint64_t)&v29, (uint64_t)&v36))
  {
    v14 = v30;
    if (v30)
    {
      v15 = (unsigned int *)(v30 + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(const char *))(*(_QWORD *)v14 + 8))(v14);
    }
    goto LABEL_15;
  }
  v6 = v34;
  v7 = v35;
  v8 = v30;
  if (v30)
  {
    v9 = (unsigned int *)(v30 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(const char *))(*(_QWORD *)v8 + 8))(v8);
  }
  if (v6 != v7)
  {
LABEL_15:
    v29 = (unint64_t)"sdf/variantSetSpec.cpp";
    v30 = "RemoveVariant";
    v31 = 165;
    v32 = "void pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::RemoveVariant(const SdfVariantSpecHandle &)";
    v33 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove a variant that does not belong to this variant set.");
    goto LABEL_16;
  }
  v12 = sub_20BFE8634(a2);
  NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v12, (uint64_t)&v29);
  if ((v29 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
  v22 = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::RemoveChild(&v36, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
  if ((v29 & 7) != 0)
  {
    v23 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if ((v22 & 1) == 0)
  {
    v29 = (unint64_t)"sdf/variantSetSpec.cpp";
    v30 = "RemoveVariant";
    v31 = 172;
    v32 = "void pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::RemoveVariant(const SdfVariantSpecHandle &)";
    v33 = 0;
    v25 = sub_20BFE8634(a2);
    pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v25, (uint64_t)__p);
    v26 = v28 >= 0 ? (const char *)__p : (const char *)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to remove child: %s", v26);
    if (v28 < 0)
      operator delete(__p[0]);
  }
LABEL_16:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
  sub_20BFD265C(&v35);
  result = v37;
  if (v37)
  {
    v19 = (unsigned int *)(v37 + 8);
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C1D7858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  if (a16 < 0)
    operator delete(__p);
  sub_20BFD1A18((_DWORD *)(v18 - 64));
  sub_20BFD1A18((_DWORD *)(v18 - 56));
  v20 = *(unsigned int **)(v18 - 40);
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D7948()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C18BDF8((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527C98, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527C98, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527AF0, (void *(*)(void *, BOOL))nullsub_298);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C1D7A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D7A6C(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v10;

  if (a6)
  {
    v10 = result;
    sub_20BDDF654(result, a6);
    result = sub_20C1D7B08((uint64_t)(v10 + 2), a2, a3, a4, a5, (_QWORD *)v10[1]);
    v10[1] = result;
  }
  return result;
}

void sub_20C1D7AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BFE69E4(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1D7B08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;

  if (a3 == a5)
    return a6;
  v8 = a3;
  v10 = 0;
  v6 = a6;
  do
  {
    sub_20C18CBE8(a2, v8, &v14);
    v11 = v14;
    *v6 = v14;
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
    ++v8;
    ++v6;
    v10 += 8;
  }
  while (v8 != a5);
  return v6;
}

void sub_20C1D7BD8()
{
}

void pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t **v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  const char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  int v22;
  int v23;
  void *__p;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;
  unsigned int *v29;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    __p = "sdf/variantSpec.cpp";
    v25 = "New";
    v26 = 51;
    v27 = "static SdfVariantSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New(const SdfVariantSetSpecHandl"
          "e &, const std::string &)";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL owner variant set");
LABEL_7:
    *a3 = 0;
    return;
  }
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(a2, (uint64_t)&__p);
  if ((_BYTE)v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
    __p = "sdf/variantSpec.cpp";
    v25 = "New";
    v26 = 56;
    v27 = "static SdfVariantSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New(const SdfVariantSetSpecHandl"
          "e &, const std::string &)";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid variant name: %s");
    goto LABEL_7;
  }
  v6 = sub_20C0B3C54(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v29);
  sub_20C0B2C10((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v29, &v22);
  if ((v29 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  v9 = (uint64_t **)sub_20C0B3C54(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v9, (uint64_t *)&__p);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, 10, 1) & 1) != 0)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&__p);
    v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v11)
      v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    LODWORD(v29) = 1;
    sub_20C184620(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v11 + 312), (int *)&v29);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&__p);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, &v21);
    v13 = v21;
    v29 = v21;
    if (v21)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = v29;
      *a3 = v29;
      if (v15)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v21);
  }
  else
  {
    *a3 = 0;
  }
  v17 = v25;
  if (v25)
  {
    v18 = (unsigned int *)(v25 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(const char *))(*(_QWORD *)v17 + 8))(v17);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
}

void sub_20C1D7E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v15 = a14;
  if (a14)
  {
    v16 = (unsigned int *)(a14 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  sub_20BFD1A18(&a12);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSpec *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  void *__p;
  char v7;
  __int128 v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v4, (uint64_t)&__p);
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  v9 = 0;
  v8 = 0uLL;
  if (v7 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  return sub_20BFD265C(&v4);
}

void sub_20C1D7F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetNameToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSpec *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  void *v6;
  char v7;
  void *__p;
  char v9;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v4, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  return sub_20BFD265C(&v4);
}

void sub_20C1D7FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_20BE930F8((uint64_t)va1);
  sub_20BFD1A18((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetOwner@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSpec *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  int v18;
  unsigned int *v19;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v14);
  sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_20BFD265C(&v14);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v14);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v14);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, &v16);
  v5 = v16;
  v19 = v16;
  if (v16)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = v19;
    *a2 = v19;
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  else
  {
    *a2 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v19);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
  v9 = v15;
  if (v15)
  {
    v10 = (unsigned int *)(v15 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  return sub_20BFD265C(&v17);
}

void sub_20C1D8120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v11);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  result = v12;
  if (v12)
  {
    v6 = (unsigned int *)(v12 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C1D821C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetVariantSets@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *__p[2];
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[80];

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v13);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v11);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children((uint64_t)v15, &v13, &v11, (uint64_t *)v4 + 8);
  sub_20BDDC0E4(__p, "variant sets");
  sub_20C18F45C(a2, (uint64_t)v15, (__int128 *)__p, 4);
  if (v10 < 0)
    operator delete(__p[0]);
  sub_20BFE6D38((uint64_t)v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  result = v14;
  if (v14)
  {
    v6 = (unsigned int *)(v14 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C1D8358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  sub_20BFD1A18(&a17);
  v21 = a19;
  if (a19)
  {
    v22 = (unsigned int *)(a19 + 8);
    do
    {
      v23 = __ldxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetVariantNames@<X0>(pxrInternal__aapl__pxrReserved__::SdfSpec *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v7;
  uint64_t v8;
  uint64_t **v9;
  void ***v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t *EmptyString;
  unint64_t v19;
  uint64_t v20;
  __int128 i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  int v28;
  _DWORD v29[3];
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&i, a2, (uint64_t)__p, &v28);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
  sub_20BFD265C(&i);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v24);
  v6 = sub_20BFCF650(&v24);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v7)
    v7 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  i = 0uLL;
  v23 = 0;
  v8 = sub_20C0A683C((uint64_t *)(v6 + 112));
  (*(void (**)(uint64_t ***__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v8 + 136))(&v30, v8, &v28, (uint64_t)v7 + 56);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v30))
  {
    if ((v31 & 4) != 0)
      v9 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(&v30);
    else
      v9 = v30;
  }
  else
  {
    v9 = (uint64_t **)&i;
  }
  __p[0] = 0;
  __p[1] = 0;
  v27 = 0;
  sub_20BFE538C(__p, *v9, v9[1], v9[1] - *v9);
  v10 = (void ***)sub_20BF4C2D8((uint64_t)&v30);
  v30 = (uint64_t **)&i;
  sub_20BEEB2B8(v10);
  v11 = v25;
  if (v25)
  {
    v12 = (unsigned int *)(v25 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  sub_20BE71C2C(a3, ((char *)__p[1] - (char *)__p[0]) >> 3);
  for (i = *(_OWORD *)__p; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B90(&i, v15, v16);
    if ((**(_QWORD **)v17 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((**(_QWORD **)v17 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
    v19 = a3[1];
    if (v19 >= a3[2])
    {
      v20 = sub_20BE4EE50(a3, (__int128 *)EmptyString);
    }
    else
    {
      sub_20BE4EDF4(a3, (__int128 *)EmptyString);
      v20 = v19 + 24;
    }
    a3[1] = v20;
  }
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8((void ***)&i);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v29);
  return sub_20BFD265C(&v28);
}

