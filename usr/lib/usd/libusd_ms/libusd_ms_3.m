void sub_20BEE5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 97) < 0)
    operator delete(*(void **)(v34 - 120));
  *(_QWORD *)(v34 - 120) = a15;
  sub_20BDE5038((void ***)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char *v4;
  int v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v14;
  char *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  unsigned __int8 *v28;
  char *v29;
  int v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  char *v33;
  int v34;
  char *v36;
  char *v37;
  int v38;
  unsigned int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int v45;
  int64_t v46;
  uint64_t result;
  unint64_t v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v54;
  BOOL v56;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (char *)a2;
  else
    v4 = *(char **)a2;
  v5 = *(char *)(a3 + 23);
  if (v3 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = (char *)a3;
  else
    v7 = *(char **)a3;
  if (v5 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  if (v8 >= v6)
    v9 = v6;
  else
    v9 = v8;
  v10 = (uint64_t)&v4[v9];
  v11 = (char *)sub_20BEE5588(v4, (uint64_t)&v4[v9], v7);
  if (v6 == v8 && v10 == (_QWORD)v11)
    return 0;
  v14 = v11;
  v15 = &v4[v6];
  v16 = (unsigned __int8 *)&v7[v8];
  if ((char *)v10 == v11)
  {
LABEL_82:
    result = v10 == (_QWORD)v15;
    if ((char *)v10 == v15 && v12 == (char *)v16)
    {
      if (v8 >= v6)
        v48 = v6;
      else
        v48 = v8;
      v49 = *(unsigned __int8 *)sub_20BEE5588(v4, (uint64_t)&v4[v48], v7);
      v51 = *v50;
      return v49 != 48 && v49 < v51 || v51 == 48;
    }
    return result;
  }
  while (1)
  {
    v17 = *v14;
    v18 = *v12;
    if ((*v14 & 0x80000000) == 0 && (*v12 & 0x80000000) == 0)
    {
      v19 = v17 < 0x40 || ((v18 ^ v17) & 0xFFFFFFDF) == 0;
      if (!v19 && v18 >= 0x40)
      {
        v56 = (((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu);
        return !v56;
      }
    }
    v20 = v17 - 48;
    v21 = v18 - 48;
    if (v17 - 48 < 0xA || v21 <= 9)
      break;
    if ((v17 & 0xFFFFFFDF) - 65 > 0x19 || (v18 & 0xFFFFFFDF) - 65 >= 0x1A)
      goto LABEL_111;
    v27 = v14 + 1;
    v28 = (unsigned __int8 *)(v12 + 1);
LABEL_81:
    v14 = (char *)sub_20BEE5588(v27, v10, v28);
    if ((char *)v10 == v14)
      goto LABEL_82;
  }
  if (v20 > 9 || v21 > 9)
  {
    if (v14 != v4)
    {
      if ((*(v14 - 1) - 48) >= 0xA)
        return v20 < 0xA;
      else
        return v21 < 0xA;
    }
LABEL_111:
    v56 = v17 >= v18;
    return !v56;
  }
  v24 = v14;
  while (v24 != v4)
  {
    v25 = *--v24;
    if ((v25 - 48) >= 0xA)
    {
      v26 = v24 + 1;
      goto LABEL_44;
    }
  }
  v26 = v4;
LABEL_44:
  v29 = v12;
  while (v29 != v7)
  {
    v30 = *--v29;
    if ((v30 - 48) >= 0xA)
    {
      v31 = (unsigned __int8 *)(v29 + 1);
      goto LABEL_49;
    }
  }
  v31 = (unsigned __int8 *)v7;
LABEL_49:
  v32 = v14;
  do
  {
    v27 = v14;
    v33 = (char *)v32;
    v34 = *v14++;
    v32 = (_QWORD *)((char *)v32 + 1);
  }
  while ((v34 - 48) <= 9 && v27 != v15);
  v36 = v12;
  do
  {
    v28 = (unsigned __int8 *)v12;
    v37 = v36;
    v38 = *v12++;
    ++v36;
  }
  while ((v38 - 48) <= 9 && v28 != v16);
  if (v27 != v26)
  {
    while (*v26 == 48)
    {
      if (++v26 == v27)
      {
        v26 = v27;
        break;
      }
    }
  }
  if (v28 != v31)
  {
    while (*v31 == 48)
    {
      if (++v31 == v28)
      {
        v40 = v27 == v26;
        if (v27 == v26)
          goto LABEL_78;
        v31 = v28;
        goto LABEL_115;
      }
    }
  }
  v41 = v28 == v31;
  v40 = v27 == v26;
  if (v27 == v26 || v28 == v31)
  {
LABEL_77:
    if (v40 != v41)
    {
LABEL_115:
      if (v28 == v31)
        return 0;
      else
        return v40;
    }
LABEL_78:
    v46 = v15 - v27;
    if (v16 - v28 < v15 - v27)
      v46 = v16 - v28;
    v10 = (uint64_t)&v27[v46];
    goto LABEL_81;
  }
  v42 = v37 - (char *)v31;
  v43 = v33 - v26;
  v44 = v26 + 1;
  while (1)
  {
    v45 = *((char *)v44 - 1);
    if ((v45 - 48) > 9 || *v31 != v45)
      break;
    v41 = ++v31 == v28;
    v40 = v44 == (_QWORD *)v27;
    if (v44 != (_QWORD *)v27)
    {
      --v42;
      --v43;
      v44 = (_QWORD *)((char *)v44 + 1);
      if (v31 != v28)
        continue;
    }
    goto LABEL_77;
  }
  if (v43 < v42)
    return 1;
  v54 = (char)*v31;
  return v42 >= v43 && v45 < v54;
}

_QWORD *sub_20BEE5588(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;

  if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
  {
    v3 = a2 - (_QWORD)result;
    if ((unint64_t)(a2 - (_QWORD)result) < 8)
    {
LABEL_7:
      switch(v3 & 7)
      {
        case 1uLL:
          goto LABEL_20;
        case 2uLL:
          goto LABEL_18;
        case 3uLL:
          goto LABEL_16;
        case 4uLL:
          goto LABEL_14;
        case 5uLL:
          goto LABEL_12;
        case 6uLL:
          goto LABEL_10;
        case 7uLL:
          if (*(unsigned __int8 *)result != *(unsigned __int8 *)a3)
            return result;
          result = (_QWORD *)((char *)result + 1);
          a3 = (_QWORD *)((char *)a3 + 1);
LABEL_10:
          if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
          {
            result = (_QWORD *)((char *)result + 1);
            a3 = (_QWORD *)((char *)a3 + 1);
LABEL_12:
            if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
            {
              result = (_QWORD *)((char *)result + 1);
              a3 = (_QWORD *)((char *)a3 + 1);
LABEL_14:
              if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
              {
                result = (_QWORD *)((char *)result + 1);
                a3 = (_QWORD *)((char *)a3 + 1);
LABEL_16:
                if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
                {
                  result = (_QWORD *)((char *)result + 1);
                  a3 = (_QWORD *)((char *)a3 + 1);
LABEL_18:
                  if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
                  {
                    result = (_QWORD *)((char *)result + 1);
                    a3 = (_QWORD *)((char *)a3 + 1);
LABEL_20:
                    if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
                      result = (_QWORD *)((char *)result + 1);
                  }
                }
              }
            }
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      v4 = v3 >> 3;
      v5 = (_QWORD *)((char *)result + (v3 & 0xFFFFFFFFFFFFFFF8));
      v6 = (_QWORD *)((char *)a3 + (v3 & 0xFFFFFFFFFFFFFFF8));
      while (1)
      {
        v7 = *a3 ^ *result;
        if (v7)
          break;
        ++result;
        ++a3;
        if (!--v4)
        {
          result = v5;
          a3 = v6;
          goto LABEL_7;
        }
      }
      return (_QWORD *)((char *)result + (__clz(__rbit64(v7)) >> 3));
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfStringify@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((_DWORD)this)
    v2 = "true";
  else
    v2 = "false";
  return sub_20BDDC0E4(a2, v2);
}

char *pxrInternal__aapl__pxrReserved__::TfStringify@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[23] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a2, *(void **)result, *((_QWORD *)result + 1));
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter(pxrInternal__aapl__pxrReserved__ *this, float a2, char *a3)
{
  int v3;
  uint64_t result;
  const char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  int v13;
  unsigned int v14;

  v3 = (int)a3;
  sub_20BEE57E0();
  v12 = this;
  v13 = v3;
  v14 = 0;
  result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(&dword_254985210, (uint64_t)&v12, 1, a2);
  if ((result & 1) == 0)
  {
    LOBYTE(v11) = 0;
    v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"double_conversion failed", v7, v8, "tf/stringUtils.cpp", "Tf_ApplyDoubleToStringConverter", 957, "void pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter(float, char *, int)", v11);
    result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "conv.ToShortestSingle(val, &builder)", v9);
  }
  if ((v14 & 0x80000000) == 0)
    *((_BYTE *)v12 + v14) = 0;
  return result;
}

void sub_20BEE57C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  if ((a16 & 0x80000000) == 0)
    *(_BYTE *)(a14 + a16) = 0;
  _Unwind_Resume(a1);
}

void sub_20BEE57E0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985240);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254985240))
    {
      dword_254985210 = 0;
      qword_254985218 = (uint64_t)"inf";
      unk_254985220 = "nan";
      byte_254985228 = 101;
      unk_25498522C = xmmword_20CA5A600;
      dword_25498523C = 0;
      __cxa_guard_release(&qword_254985240);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter(pxrInternal__aapl__pxrReserved__ *this, double a2, char *a3)
{
  int v3;
  uint64_t result;
  const char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  int v13;
  unsigned int v14;

  v3 = (int)a3;
  sub_20BEE57E0();
  v12 = this;
  v13 = v3;
  v14 = 0;
  result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(&dword_254985210, (uint64_t)&v12, 0, a2);
  if ((result & 1) == 0)
  {
    LOBYTE(v11) = 0;
    v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"double_conversion failed", v7, v8, "tf/stringUtils.cpp", "Tf_ApplyDoubleToStringConverter", 967, "void pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter(double, char *, int)", v11);
    result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "conv.ToShortest(val, &builder)", v9);
  }
  if ((v14 & 0x80000000) == 0)
    *((_BYTE *)v12 + v14) = 0;
  return result;
}

void sub_20BEE5914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  if ((a16 & 0x80000000) == 0)
    *(_BYTE *)(a14 + a16) = 0;
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfStringify@<X0>(float a1@<S0>, _QWORD *a2@<X8>)
{
  char __s[128];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter((pxrInternal__aapl__pxrReserved__ *)__s, a1, (char *)0x80);
  return sub_20BDDC0E4(a2, __s);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDoubleToString(pxrInternal__aapl__pxrReserved__ *this, double a2, char *a3, int a4)
{
  uint64_t result;
  int v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  int v7;
  unsigned int v8;
  int v9;
  const char *v10;
  const char *v11;
  char v12;
  __int128 v13;
  int v14;

  if ((int)a3 < 25)
    return 0;
  if (a4)
    v5 = 6;
  else
    v5 = 0;
  v9 = v5;
  v10 = "inf";
  v11 = "nan";
  v12 = 101;
  v13 = xmmword_20CA5A600;
  v14 = 0;
  v6 = this;
  v7 = (int)a3;
  v8 = 0;
  result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(&v9, (uint64_t)&v6, 0, a2);
  if ((v8 & 0x80000000) == 0)
    *((_BYTE *)v6 + v8) = 0;
  return result;
}

void sub_20BEE5A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  if ((a12 & 0x80000000) == 0)
    *(_BYTE *)(a10 + a12) = 0;
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfStringify@<X0>(double a1@<D0>, _QWORD *a2@<X8>)
{
  char __s[128];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter((pxrInternal__aapl__pxrReserved__ *)__s, a1, (char *)0x80);
  return sub_20BDDC0E4(a2, __s);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, float a2)
{
  size_t v3;
  char __s[128];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter((pxrInternal__aapl__pxrReserved__ *)__s, a2, (char *)0x80);
  v3 = strlen(__s);
  return sub_20BDDC1C8(a1, (uint64_t)__s, v3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, double a2)
{
  size_t v3;
  char __s[128];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter((pxrInternal__aapl__pxrReserved__ *)__s, a2, (char *)0x80);
  v3 = strlen(__s);
  return sub_20BDDC1C8(a1, (uint64_t)__s, v3);
}

BOOL pxrInternal__aapl__pxrReserved__::TfUnstringify<BOOL>(char *__s1)
{
  const char *v1;

  v1 = __s1;
  if (__s1[23] < 0)
  {
    v1 = *(const char **)__s1;
    if (strcmp(*(const char **)__s1, "true") && strcmp(v1, "1") && strcmp(v1, "yes"))
      return strcmp(v1, "on") == 0;
  }
  else if (*(_DWORD *)__s1 ^ 0x65757274 | __s1[4])
  {
    if (*(_WORD *)__s1 != 49 && *(_DWORD *)__s1 != 7562617)
      return strcmp(v1, "on") == 0;
  }
  return 1;
}

char *pxrInternal__aapl__pxrReserved__::TfUnstringify<std::string>@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[23] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a2, *(void **)result, *((_QWORD *)result + 1));
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfStringGlobToRegex(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  std::string v7;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  sub_20BDDC0E4(v5, ".");
  sub_20BDDC0E4(__p, "\\.");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a2, (unsigned __int8 *)v5, (unsigned __int8 *)__p, &v7);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v7;
  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  sub_20BDDC0E4(v5, "*");
  sub_20BDDC0E4(__p, ".*");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a2, (unsigned __int8 *)v5, (unsigned __int8 *)__p, &v7);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v7;
  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  sub_20BDDC0E4(v5, "?");
  sub_20BDDC0E4(__p, ".");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a2, (unsigned __int8 *)v5, (unsigned __int8 *)__p, &v7);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v7;
  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_20BEE5E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfEscapeStringReplaceChar(uint64_t *this, const char **a2, char **a3)
{
  uint64_t v3;
  char *v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  char *v12;
  int v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v3 = *this;
  v4 = (char *)(v3 + 1);
  ++*this;
  v5 = *(char *)(v3 + 1);
  if (v5 > 96)
  {
    if (v5 > 109)
    {
      switch(*(_BYTE *)(v3 + 1))
      {
        case 'n':
          v12 = (char *)(*a2)++;
          v8 = 10;
          goto LABEL_17;
        case 'r':
          v12 = (char *)(*a2)++;
          v8 = 13;
          goto LABEL_17;
        case 't':
          v12 = (char *)(*a2)++;
          v8 = 9;
          goto LABEL_17;
        case 'v':
          v12 = (char *)(*a2)++;
          v8 = 11;
          goto LABEL_17;
        case 'x':
          *this = v3 + 2;
          v13 = *(char *)(v3 + 2);
          if ((v13 & 0x80000000) == 0
            && (v14 = MEMORY[0x24BDAC740],
                (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *(unsigned __int8 *)(v3 + 2) + 60) & 0x10000) != 0))
          {
            v17 = 0;
            v8 = 0;
            do
            {
              if ((v13 - 65) >= 6u)
                v18 = -48;
              else
                v18 = -55;
              if ((v13 - 97) >= 6u)
                v19 = v18;
              else
                v19 = -87;
              v8 = v13 + 16 * v8 + v19;
              v20 = v3 + v17;
              *this = v3 + v17 + 3;
              v13 = *(char *)(v3 + v17 + 3);
              if (v13 < 0)
                break;
              if ((*(_DWORD *)(v14 + 4 * *(unsigned __int8 *)(v3 + v17 + 3) + 60) & 0x10000) == 0)
                break;
              v11 = (_DWORD)v17++ == 1;
            }
            while (!v11);
            v4 = (char *)(v20 + 2);
          }
          else
          {
            v8 = 0;
          }
          *this = (uint64_t)v4;
          goto LABEL_16;
        default:
          goto LABEL_32;
      }
    }
    switch(v5)
    {
      case 'a':
        v12 = (char *)(*a2)++;
        v8 = 7;
        goto LABEL_17;
      case 'b':
        v12 = (char *)(*a2)++;
        v8 = 8;
        goto LABEL_17;
      case 'f':
        v12 = (char *)(*a2)++;
        v8 = 12;
LABEL_17:
        *v12 = v8;
        return this;
    }
  }
  else
  {
    if ((v5 - 48) < 8)
    {
      v6 = *v4;
      if ((v6 & 0xF8) == 0x30)
      {
        v7 = 0;
        v8 = 0;
        do
        {
          v8 = v6 + 8 * v8 - 48;
          v9 = (char *)(v3 + v7 + 2);
          *this = (uint64_t)v9;
          v6 = *v9;
          v10 = v7 + 1;
          v11 = (v6 & 0xF8) != 0x30 || (_DWORD)v7++ == 2;
        }
        while (!v11);
        v3 += v10;
      }
      else
      {
        v8 = 0;
      }
      *this = v3;
LABEL_16:
      v12 = (char *)(*a2)++;
      goto LABEL_17;
    }
    if (v5 == 92)
    {
      v12 = (char *)(*a2)++;
      v8 = 92;
      goto LABEL_17;
    }
  }
LABEL_32:
  v15 = *(_BYTE *)(v3 + 1);
  v16 = (char *)(*a2)++;
  *v16 = v15;
  return this;
}

void pxrInternal__aapl__pxrReserved__::TfEscapeString(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  char **v6;
  char *v7;
  _BYTE *v8;
  int v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  char *v13;

  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  v7 = (char *)operator new[](v4 + 1);
  v13 = v7;
  v8 = *(_BYTE **)a1;
  if (v5 >= 0)
    v8 = (_BYTE *)a1;
  while (1)
  {
    v12 = v8;
    v9 = *v8;
    if (v9 != 92)
      break;
    pxrInternal__aapl__pxrReserved__::TfEscapeStringReplaceChar((uint64_t *)&v12, (const char **)&v13, v6);
    v8 = v12;
LABEL_9:
    ++v8;
  }
  if (*v8)
  {
    v10 = v13;
    *v13 = v9;
    v13 = v10 + 1;
    goto LABEL_9;
  }
  v11 = v13;
  *v13 = 0;
  sub_20BDFC7D8(a2, v7, v11 - v7);
  operator delete[](v7);
}

void sub_20BEE6194(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStringCatPaths(const void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  void *__p[2];
  std::string::size_type v16;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = &v14;
  sub_20BDF6BDC((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&v14, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v16 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfNormPath(a3, __p, 0);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_20BEE62AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v2;
  std::string::size_type v4;
  int v5;
  char v7;
  std::string::value_type v8;
  unsigned __int8 *v9;
  char v10;
  int v11;

  v2 = a1;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((char)a1[23] < 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      goto LABEL_3;
LABEL_25:
    std::string::push_back(a2, 95);
    return;
  }
  v4 = a1[23];
  if (!a1[23])
    goto LABEL_25;
LABEL_3:
  std::string::reserve(a2, v4);
  if ((v2[23] & 0x80u) != 0)
    v2 = *(unsigned __int8 **)v2;
  v5 = *v2;
  if ((v5 - 65) < 0x1Au || v5 == 95)
    v7 = *v2;
  else
    v7 = 95;
  if ((v5 - 97) >= 0x1A)
    LOBYTE(v5) = v7;
  std::string::push_back(a2, v5);
  v8 = v2[1];
  if (v8)
  {
    v9 = v2 + 2;
    do
    {
      if ((v8 - 48) >= 0xAu)
        v10 = 95;
      else
        v10 = v8;
      if (v8 == 95)
        v10 = v8;
      if (((v8 & 0xDF) - 65) >= 0x1Au)
        v8 = v10;
      std::string::push_back(a2, v8);
      v11 = *v9++;
      v8 = v11;
    }
    while (v11);
  }
}

void sub_20BEE63D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfGetXmlEscapedString(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  std::string v15;

  v4 = a1[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = *(unsigned __int8 **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a1 + 1);
  if (v4)
  {
    v7 = &v6[v4];
    v8 = v6;
LABEL_8:
    v9 = 0;
    while (*v8 != asc_20CB3EE48[v9])
    {
      if (++v9 == 5)
      {
        if (++v8 != v7)
          goto LABEL_8;
        goto LABEL_43;
      }
    }
    if (v8 == v7 || v8 - v6 == -1)
      goto LABEL_43;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_20BDDC0E4(v13, "&");
    sub_20BDDC0E4(__p, "&amp;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a1, (unsigned __int8 *)v13, (unsigned __int8 *)__p, &v15);
    v10 = v12;
    *(std::string *)a2 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    sub_20BDDC0E4(v13, "<");
    sub_20BDDC0E4(__p, "&lt;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a2, (unsigned __int8 *)v13, (unsigned __int8 *)__p, &v15);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    sub_20BDDC0E4(v13, ">");
    sub_20BDDC0E4(__p, "&gt;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a2, (unsigned __int8 *)v13, (unsigned __int8 *)__p, &v15);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    sub_20BDDC0E4(v13, "\"");
    sub_20BDDC0E4(__p, "&quot;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a2, (unsigned __int8 *)v13, (unsigned __int8 *)__p, &v15);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    sub_20BDDC0E4(v13, "'");
    sub_20BDDC0E4(__p, "&apos;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a2, (unsigned __int8 *)v13, (unsigned __int8 *)__p, &v15);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  else
  {
LABEL_43:
    if (v5 < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)a1 + 2);
    }
  }
}

void sub_20BEE6724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *v7;
  char v8;
  int v9;
  char v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if ((a1[23] & 0x80u) == 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  std::string::resize((std::string *)a2, v4, 0);
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = *(unsigned __int8 **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (_BYTE *)a2;
    else
      v7 = *(_BYTE **)a2;
    do
    {
      v9 = *v6++;
      v8 = v9;
      v10 = v9 + 32;
      if ((v9 - 65) < 0x1A)
        v8 = v10;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
}

void sub_20BEE6834(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BEE6850(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_20BDDF694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20BDEA2F0(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_OWORD *sub_20BEE68F0(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_20BDDE084((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_20BDDE1B4(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfTemplateString::TfTemplateString(pxrInternal__aapl__pxrReserved__::TfTemplateString *this)
{
  _OWORD *v2;

  v2 = operator new(0x58uLL);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *((_BYTE *)v2 + 48) = 0;
  *((_QWORD *)v2 + 8) = 0;
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 7) = 0;
  *((_BYTE *)v2 + 80) = 0;
  return sub_20BEE7DE8(this, (uint64_t)v2);
}

{
  _OWORD *v2;

  v2 = operator new(0x58uLL);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *((_BYTE *)v2 + 48) = 0;
  *((_QWORD *)v2 + 8) = 0;
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 7) = 0;
  *((_BYTE *)v2 + 80) = 0;
  return sub_20BEE7DE8(this, (uint64_t)v2);
}

std::string **pxrInternal__aapl__pxrReserved__::TfTemplateString::TfTemplateString(std::string **a1, const std::string *a2)
{
  _OWORD *v4;

  v4 = operator new(0x58uLL);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_BYTE *)v4 + 48) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 9) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_BYTE *)v4 + 80) = 0;
  sub_20BEE7DE8(a1, (uint64_t)v4);
  std::string::operator=(*a1, a2);
  return a1;
}

void sub_20BEE6A70(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfTemplateString::Substitute(const std::string **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const char **v6;
  const char *v7;
  void **v8[4];
  char v9;
  int v10;
  __int128 i;
  __int128 v12;
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(a1);
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_EmitParseErrors((pxrInternal__aapl__pxrReserved__::TfTemplateString *)a1);
  v12 = 0uLL;
  v13 = 0;
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_Evaluate(a1, a2, (uint64_t *)&v12, a3);
  for (i = v12; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BEC9CF0(&i))
  {
    v8[0] = (void **)"tf/templateString.cpp";
    v8[1] = (void **)"Substitute";
    v8[2] = (void **)72;
    v8[3] = (void **)"string pxrInternal__aapl__pxrReserved__::TfTemplateString::Substitute(const Mapping &) const";
    v9 = 0;
    v10 = 1;
    v6 = (const char **)sub_20BEE7184(&i);
    v7 = *v6;
    if ((*v6)[23] < 0)
      v7 = *(const char **)v7;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"%s", v7);
  }
  v8[0] = (void **)&v12;
  sub_20BDE5038(v8);
}

void sub_20BEE6B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a11 = (void **)&a19;
  sub_20BDE5038(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(const std::string **this)
{
  uint64_t result;
  _BYTE *v3;
  std::string::size_type v4;
  _BYTE *v5;

  result = sub_20BEB3FEC((uint64_t)&v5, (uint64_t)&(*this)[3].__r_.__value_.__l.__size_);
  if (!(*this)[2].__r_.__value_.__s.__data_[0])
  {
    v4 = 0;
    do
      result = pxrInternal__aapl__pxrReserved__::TfTemplateString::_FindNextPlaceHolder(this, &v4, (uint64_t *)&(*this)[2].__r_.__value_.__l.__size_);
    while ((result & 1) != 0);
    (*this)[2].__r_.__value_.__s.__data_[0] = 1;
  }
  v3 = v5;
  if (v5)
  {
    __dmb(0xBu);
    *v3 = 0;
  }
  return result;
}

void sub_20BEE6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfTemplateString::_EmitParseErrors(pxrInternal__aapl__pxrReserved__::TfTemplateString *this)
{
  uint64_t result;
  const char **v3;
  const char *v4;
  _BYTE *v5;
  _QWORD v6[4];
  char v7;
  int v8;
  __int128 i;
  _BYTE *v10;

  result = sub_20BEB3FEC((uint64_t)&v10, *(_QWORD *)this + 80);
  for (i = *(_OWORD *)(*(_QWORD *)this + 56); (_QWORD)i != *((_QWORD *)&i + 1); result = (uint64_t)sub_20BEC9CF0(&i))
  {
    v6[0] = "tf/templateString.cpp";
    v6[1] = "_EmitParseErrors";
    v6[2] = 90;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::TfTemplateString::_EmitParseErrors() const";
    v7 = 0;
    v8 = 1;
    v3 = (const char **)sub_20BEE7184(&i);
    v4 = *v3;
    if ((*v3)[23] < 0)
      v4 = *(const char **)v4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"%s", v4);
  }
  v5 = v10;
  if (v10)
  {
    __dmb(0xBu);
    *v5 = 0;
  }
  return result;
}

void sub_20BEE6D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  _BYTE *v2;

  v2 = *(_BYTE **)(v1 - 64);
  if (v2)
  {
    __dmb(0xBu);
    *v2 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfTemplateString::_Evaluate(const std::string **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, std::string *a4@<X8>)
{
  std::string::size_type v8;
  int v9;
  std::string *v10;
  std::string::size_type size;
  const std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::const_iterator v18;
  const void ***v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  uint64_t v23;
  char *v24;
  std::string::size_type v25;
  const std::string *v26;
  _QWORD *v27;
  const std::string *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  const char *v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  std::string::size_type v45;
  __int128 v46;
  uint64_t v47;
  std::string *v48;
  std::string::size_type v49;
  _BYTE *v50;
  void *__p[2];
  uint64_t v52;
  __int128 i;
  _BYTE *v54;
  std::string v55;
  char *v56;
  uint64_t *v57;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  sub_20BEB3FEC((uint64_t)&v54, (uint64_t)&(*a1)[3].__r_.__value_.__l.__size_);
  v8 = 0;
  for (i = *(_OWORD *)&(*a1)[1].__r_.__value_.__l.__data_; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BEE7494(&i))
  {
    v9 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
    if (v9 >= 0)
      v10 = a4;
    else
      v10 = (std::string *)a4->__r_.__value_.__r.__words[0];
    if (v9 >= 0)
      size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    else
      size = a4->__r_.__value_.__l.__size_;
    v12 = *a1;
    if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
      v12 = (const std::string *)v12->__r_.__value_.__r.__words[0];
    v13 = sub_20BEE740C(&i);
    sub_20BEE8200(a4, (uint64_t)v10 + size, (char *)v12 + v8, (char *)v12 + *(_QWORD *)(*v13 + 24), *(_QWORD *)(*v13 + 24) - v8);
    v14 = sub_20BEE740C(&i);
    v15 = (_QWORD *)*v14;
    if (*(char *)(*v14 + 23) < 0)
      v15 = (_QWORD *)*v15;
    if (*(_BYTE *)v15 == 36)
    {
      v16 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v16 & 0x80u) == 0)
        v17 = a4;
      else
        v17 = (std::string *)a4->__r_.__value_.__r.__words[0];
      if ((v16 & 0x80u) != 0)
        v16 = a4->__r_.__value_.__l.__size_;
      v18.__i_ = (char *)v17 + v16;
      std::string::insert(a4, v18, 36);
    }
    else
    {
      v19 = (const void ***)sub_20BEE740C(&i);
      v20 = sub_20BDEEBA4(a2, *v19);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = a4;
      else
        v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v23 = (uint64_t)v22 + v21;
      if (a2 + 8 == v20)
      {
        v26 = *a1;
        if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
          v26 = (const std::string *)v26->__r_.__value_.__r.__words[0];
        v27 = sub_20BEE740C(&i);
        v28 = *a1;
        if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
          v28 = (const std::string *)v28->__r_.__value_.__r.__words[0];
        v29 = *(_QWORD *)(*v27 + 24);
        v30 = *(_QWORD *)(*sub_20BEE740C(&i) + 24);
        v31 = (char *)v28 + v30 + *(_QWORD *)(*sub_20BEE740C(&i) + 32);
        sub_20BEE8200(a4, v23, (char *)v26 + v29, v31, v31 - ((char *)v26 + v29));
        if (a3)
        {
          v32 = sub_20BEE740C(&i);
          v35 = (_QWORD *)*v32;
          if (*(char *)(*v32 + 23) < 0)
            v35 = (_QWORD *)*v35;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No mapping found for placeholder '%s'", v33, v34, v35);
          v37 = a3[1];
          v36 = a3[2];
          if (v37 >= v36)
          {
            v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *a3) >> 3);
            v41 = v40 + 1;
            if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *a3) >> 3);
            if (2 * v42 > v41)
              v41 = 2 * v42;
            if (v42 >= 0x555555555555555)
              v43 = 0xAAAAAAAAAAAAAAALL;
            else
              v43 = v41;
            v57 = a3 + 2;
            if (v43)
              v44 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v43);
            else
              v44 = 0;
            v45 = (std::string::size_type)&v44[24 * v40];
            v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
            v55.__r_.__value_.__l.__size_ = v45;
            v56 = &v44[24 * v43];
            v46 = *(_OWORD *)__p;
            *(_QWORD *)(v45 + 16) = v52;
            *(_OWORD *)v45 = v46;
            __p[1] = 0;
            v52 = 0;
            __p[0] = 0;
            v55.__r_.__value_.__r.__words[2] = v45 + 24;
            sub_20BDF34C0(a3, &v55);
            v47 = a3[1];
            sub_20BDF3648((uint64_t)&v55);
            a3[1] = v47;
          }
          else
          {
            v38 = *(_OWORD *)__p;
            *(_QWORD *)(v37 + 16) = v52;
            *(_OWORD *)v37 = v38;
            a3[1] = v37 + 24;
          }
        }
      }
      else
      {
        if (*(char *)(v20 + 79) < 0)
        {
          v24 = *(char **)(v20 + 56);
          v25 = *(_QWORD *)(v20 + 64);
        }
        else
        {
          v24 = (char *)(v20 + 56);
          v25 = *(unsigned __int8 *)(v20 + 79);
        }
        sub_20BEE8200(a4, v23, v24, &v24[v25], v25);
      }
    }
    v39 = *(_QWORD *)(*sub_20BEE740C(&i) + 24);
    v8 = *(_QWORD *)(*sub_20BEE740C(&i) + 32) + v39;
  }
  std::string::basic_string(&v55, *a1, v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v55;
  else
    v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    v49 = v55.__r_.__value_.__l.__size_;
  std::string::append(a4, (const std::string::value_type *)v48, v49);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v50 = v54;
  if (v54)
  {
    __dmb(0xBu);
    *v50 = 0;
  }
}

void sub_20BEE70F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,_BYTE *a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21)
  {
    __dmb(0xBu);
    *a21 = 0;
  }
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEE7184(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::string>>::operator->() [T = std::vec"
            "tor<std::string>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfTemplateString::SafeSubstitute(const std::string **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(a1);
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_EmitParseErrors((pxrInternal__aapl__pxrReserved__::TfTemplateString *)a1);
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_Evaluate(a1, a2, 0, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfTemplateString::GetEmptyMapping@<X0>(const std::string **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  __int128 *v6;
  __int128 v7;
  _BYTE *v8;
  void *v9[2];
  uint64_t v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  __int128 i;
  _BYTE *v15;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  result = pxrInternal__aapl__pxrReserved__::TfTemplateString::IsValid(this);
  if ((_DWORD)result)
  {
    result = sub_20BEB3FEC((uint64_t)&v15, (uint64_t)&(*this)[3].__r_.__value_.__l.__size_);
    for (i = *(_OWORD *)&(*this)[1].__r_.__value_.__l.__data_;
          (_QWORD)i != *((_QWORD *)&i + 1);
          result = (uint64_t)sub_20BEE7494(&i))
    {
      v5 = sub_20BEE740C(&i);
      v6 = (__int128 *)*v5;
      if (*(char *)(*v5 + 23) < 0)
      {
        sub_20BDDBFAC(v9, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        v10 = *((_QWORD *)v6 + 2);
        *(_OWORD *)v9 = v7;
      }
      __p = 0;
      v12 = 0;
      v13 = 0;
      sub_20BEE7F18((uint64_t **)a2, (const void **)v9, (uint64_t)v9);
      if (SHIBYTE(v13) < 0)
        operator delete(__p);
      if (SHIBYTE(v10) < 0)
        operator delete(v9[0]);
    }
    v8 = v15;
    if (v15)
    {
      __dmb(0xBu);
      *v8 = 0;
    }
  }
  return result;
}

void sub_20BEE7348(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDE9D48(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfTemplateString::IsValid(const std::string **this)
{
  const std::string *v2;
  _BOOL8 result;
  _BYTE *v4;
  _BYTE *v5;

  pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(this);
  sub_20BEB3FEC((uint64_t)&v5, (uint64_t)&(*this)[3].__r_.__value_.__l.__size_);
  v2 = *this;
  if (SHIBYTE((*this)->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v2->__r_.__value_.__l.__size_)
      goto LABEL_3;
  }
  else if (*((_BYTE *)&(*this)->__r_.__value_.__s + 23))
  {
LABEL_3:
    result = v2[2].__r_.__value_.__l.__size_ == v2[2].__r_.__value_.__r.__words[2];
    goto LABEL_6;
  }
  result = 1;
LABEL_6:
  v4 = v5;
  if (v5)
  {
    __dmb(0xBu);
    *v4 = 0;
  }
  return result;
}

_QWORD *sub_20BEE740C(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfTempl"
            "ateString::_PlaceHolder>>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfTemplateString:"
            ":_PlaceHolder>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

_QWORD *sub_20BEE7494(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfTemplateString::_PlaceHolder>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfT"
            "emplateString::_PlaceHolder>, Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 40;
  }
  return a1;
}

char *pxrInternal__aapl__pxrReserved__::TfTemplateString::GetParseErrors@<X0>(const std::string **this@<X0>, uint64_t a2@<X8>)
{
  const std::string *v4;
  char *result;
  _BYTE *v6;
  _BYTE *v7;

  pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(this);
  sub_20BEB3FEC((uint64_t)&v7, (uint64_t)&(*this)[3].__r_.__value_.__l.__size_);
  v4 = *this;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  result = sub_20BE78B98((char *)a2, (__int128 *)v4[2].__r_.__value_.__l.__size_, (__int128 *)v4[2].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v4[2].__r_.__value_.__r.__words[2] - v4[2].__r_.__value_.__l.__size_) >> 3));
  v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *v6 = 0;
  }
  return result;
}

void sub_20BEE758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfTemplateString::_FindNextPlaceHolder(const std::string **a1, std::string::size_type *a2, uint64_t *a3)
{
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  const std::string *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  const std::string *v12;
  std::string::size_type v13;
  const std::string *v15;
  std::string::size_type size;
  uint64_t v17;
  const char *v18;
  char *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  const std::string *v22;
  int v23;
  void *v24;
  std::string *p_p;
  std::string::size_type v26;
  char *v27;
  std::string::size_type v28;
  uint64_t v29;
  std::string::size_type v30;
  const std::string *v31;
  std::string::size_type v32;
  int v33;
  const std::string *v34;
  const std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  const std::string *v40;
  std::string::size_type v41;
  int v42;
  void *v43;
  std::string v44;
  std::string __p;
  std::string::size_type v46;
  uint64_t v47;

  v6 = std::string::find(*a1, 36, *a2);
  *a2 = v6;
  if (v6 == -1)
    return 0;
  v7 = v6;
  v8 = v6 + 1;
  v9 = *a1;
  v10 = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0
      ? v9->__r_.__value_.__l.__size_
      : HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
  if (v8 >= v11)
    return 0;
  v12 = *a1;
  if ((v10 & 0x80) != 0)
    v12 = (const std::string *)v9->__r_.__value_.__r.__words[0];
  if (v12->__r_.__value_.__s.__data_[v8] == 36)
  {
    sub_20BDDC0E4(&v44, "$");
    v13 = *a2;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      sub_20BDDBFAC(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    else
      __p = v44;
    v46 = v13;
    v47 = 2;
    sub_20BEE7ADC((uint64_t *)&v9[1], (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v17 = *a2 + 2;
    goto LABEL_21;
  }
  if ((v10 & 0x80) != 0)
  {
    v15 = (const std::string *)v9->__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v9->__r_.__value_.__r.__words[0] + v8) != 123)
    {
      size = v9->__r_.__value_.__l.__size_;
      goto LABEL_27;
    }
LABEL_24:
    sub_20BDDC0E4(&v44, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_");
    std::string::push_back(&v44, 123);
    __p = v44;
    memset(&v44, 0, sizeof(v44));
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = v9;
      v9 = (const std::string *)v9->__r_.__value_.__r.__words[0];
      v20 = v22->__r_.__value_.__l.__size_;
    }
    else
    {
      v20 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
    }
    v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v24 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v26 = __p.__r_.__value_.__l.__size_;
    if (v20 <= v8)
    {
      v29 = -1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_66;
    }
    else
    {
      v27 = (char *)v9 + v8;
      if (v26)
      {
        v42 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v43 = (void *)__p.__r_.__value_.__r.__words[0];
        v28 = ~v7 + v20;
        do
        {
          if (!memchr(p_p, *v27, v26))
          {
            v24 = v43;
            v23 = v42;
            goto LABEL_63;
          }
          ++v27;
          --v28;
        }
        while (v28);
        v29 = -1;
        v24 = v43;
        if ((v42 & 0x80000000) == 0)
          goto LABEL_66;
      }
      else
      {
LABEL_63:
        v29 = v27 - (char *)v9;
        if ((v23 & 0x80000000) == 0)
          goto LABEL_66;
      }
    }
    operator delete(v24);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
LABEL_66:
    if (v29 == -1)
    {
      if (a3)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot find close quote for placeholder starting at pos %zu", v18, v19, *a2);
        sub_20BEE7C24(a3, (__int128 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      *a2 = v8;
      return 1;
    }
    v34 = *a1;
    v35 = *a1;
    if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
      v35 = (const std::string *)v34->__r_.__value_.__r.__words[0];
    if (v35->__r_.__value_.__s.__data_[v29] != 125)
    {
      if (a3)
      {
        if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0)
          v34 = (const std::string *)v34->__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid character '%c' in identifier at pos %zu", (const char *)v34, v19, v34->__r_.__value_.__s.__data_[v29], v29);
        sub_20BEE7C24(a3, (__int128 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      *a2 = v29;
      return 1;
    }
    v36 = v29 - *a2;
    v37 = v36 + 1;
    std::string::basic_string(&v44, v34, v7 + 2, v36 - 2, (std::allocator<char> *)&__p);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      v39 = (char *)v44.__r_.__value_.__l.__size_;
      if (v44.__r_.__value_.__l.__size_)
      {
        v40 = *a1;
        v41 = *a2;
        sub_20BDDBFAC(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
        goto LABEL_86;
      }
    }
    else if (*((_BYTE *)&v44.__r_.__value_.__s + 23))
    {
      v40 = *a1;
      v41 = *a2;
      __p = v44;
LABEL_86:
      v46 = v41;
      v47 = v37;
      sub_20BEE7ADC((uint64_t *)&v40[1], (__int128 *)&__p);
      goto LABEL_89;
    }
    if (!a3)
      goto LABEL_91;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Empty placeholder at pos %zu", v38, v39, *a2);
    sub_20BEE7C24(a3, (__int128 *)&__p);
LABEL_89:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
    *a2 += v37;
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    goto LABEL_92;
  }
  if (v9->__r_.__value_.__s.__data_[v8] == 123)
    goto LABEL_24;
  v15 = *a1;
  size = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
LABEL_27:
  if (size <= v8)
    goto LABEL_49;
  v21 = v6 + 1;
  while (memchr("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_", v15->__r_.__value_.__s.__data_[v21], 0x3FuLL))
  {
    if (size == ++v21)
      goto LABEL_49;
  }
  if (v21 == -1)
  {
LABEL_49:
    if ((v10 & 0x80) != 0)
      v21 = v9->__r_.__value_.__l.__size_;
    else
      v21 = v10;
  }
  v30 = v21 - v7;
  std::string::basic_string(&v44, v9, v8, v21 - v7 - 1, (std::allocator<char> *)&__p);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v44.__r_.__value_.__l.__size_)
    {
      v31 = *a1;
      v32 = *a2;
      sub_20BDDBFAC(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
LABEL_57:
      v46 = v32;
      v47 = v21 - v7;
      sub_20BEE7ADC((uint64_t *)&v31[1], (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v33 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
      *a2 += v30;
      if ((v33 & 0x80000000) == 0)
        return 1;
      goto LABEL_92;
    }
    *a2 += v30;
LABEL_92:
    operator delete(v44.__r_.__value_.__l.__data_);
    return 1;
  }
  if (*((_BYTE *)&v44.__r_.__value_.__s + 23))
  {
    v31 = *a1;
    v32 = *a2;
    __p = v44;
    goto LABEL_57;
  }
  v17 = *a2 + v30;
LABEL_21:
  *a2 = v17;
  return 1;
}

void sub_20BEE7A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEE7ADC(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666)
      sub_20BDDF694();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)sub_20BED4724(result, v13);
    else
      v14 = 0;
    v15 = &v14[40 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[40 * v13];
    v16 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v15 + 24) = *(__int128 *)((char *)a2 + 24);
    v17[2] = v15 + 40;
    sub_20BEE7FE4(a1, v17);
    v9 = a1[1];
    result = sub_20BEE8178((uint64_t)v17);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v7 + 24) = *(__int128 *)((char *)a2 + 24);
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_20BEE7C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEE8178((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEE7C24(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)sub_20BDE4FF4(result, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[24 * v13];
    v16 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17[2] = v15 + 24;
    sub_20BDF34C0(a1, v17);
    v9 = a1[1];
    result = sub_20BDF3648((uint64_t)v17);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_20BEE7D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BEE7D5C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BEE7D9C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20BEE7D9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

_QWORD *sub_20BEE7DE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C51BC78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BEE7E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_20BEE7EB8((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20BEE7E5C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BEE7E70(uint64_t a1)
{
  sub_20BEE7EB8(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_20BEE7E78(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51BCC8))
    return a1 + 24;
  else
    return 0;
}

void sub_20BEE7EB8(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (a2)
  {
    v3 = (void **)(a2 + 56);
    sub_20BDE5038(&v3);
    v3 = (void **)(a2 + 24);
    sub_20BEE7D5C(&v3);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    operator delete((void *)a2);
  }
}

_OWORD *sub_20BEE7F18(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v10 = 1;
    sub_20BDDE1B4(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_20BDDE3A0((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_20BEE7FE4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BEE8058((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BEE8058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BEE8100((uint64_t)v11);
  return v9;
}

uint64_t sub_20BEE8100(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BEE8134(a1);
  return a1;
}

void sub_20BEE8134(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 40;
  }
}

uint64_t sub_20BEE8178(uint64_t a1)
{
  sub_20BEE81AC(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BEE81AC(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_20BEE8200(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v6 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = this;
      goto LABEL_6;
    }
    return (uint64_t)v6 + v7;
  }
  v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  size = this->__r_.__value_.__l.__size_;
LABEL_6:
  if (v9 > (std::string *)a3 || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= a3)
    return sub_20BEE831C(this, __n_add, v7, a3, a4);
  sub_20BEE8434(&__p, a3, a4);
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__l.__size_;
  v12 = sub_20BEE831C(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_20BEE8300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEE831C(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

void sub_20BEE8434(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  std::string::value_type *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_20BEE8488(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_20BEE84A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  char *v10;
  char *v11;
  uint64_t i;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  std::string v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  uint64_t v20;
  const char *v21;
  char v22;
  int v23;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA5A796 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v16);
  v2 = std::string::insert(&v16, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v20 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v17, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = (char *)operator new(0x4000uLL, (std::align_val_t)0x80uLL);
      for (i = 0; i != 0x4000; i += 128)
      {
        v13 = &v10[i];
        *(_OWORD *)v13 = 0uLL;
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_DWORD *)v13 + 8) = 1065353216;
        *((_DWORD *)v13 + 10) = 32;
        v13[44] = 0;
      }
      v14 = atomic_load(a1);
      if (v14)
      {
        if (v10 != (char *)v14)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v20 = 84;
          v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegist"
                "ry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v15 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v15)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v20 = 88;
          v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegist"
                "ry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v18--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_16Tf_TokenRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BEE86CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry"
            ">::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::DeleteInstance()
{
  unint64_t i;
  unint64_t v1;
  uint64_t result;
  uint64_t j;

  for (i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
        i;
        i = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
    if (v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance))
      {
        for (j = 16256; j != -128; j -= 128)
          sub_20BEC1B38(i + j);
        JUMPOUT(0x212B92F94);
      }
    }
    else
    {
      __clrex();
    }
    result = sched_yield();
  }
  return result;
}

void sub_20BEE8844()
{
  uint64_t *v0;
  uint64_t v1;
  void *__p[2];
  char v3;

  sub_20BEE8FF4();
  v0 = sub_20BEE90F4();
  v1 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_20BDDC0E4(__p, "vector<TfToken>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_20BEE88A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(pxrInternal__aapl__pxrReserved__::TfToken *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254985260);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985260))
  {
    qword_254985248 = 0;
    qword_254985250 = 0;
    qword_254985258 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254985248, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985260);
  }
  return &qword_254985248;
}

unint64_t *pxrInternal__aapl__pxrReserved__::TfToken::TfToken(unint64_t *a1, __int128 *a2)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  *a1 = sub_20BEE91F4(Instance, a2, 0);
  return a1;
}

{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  *a1 = sub_20BEE91F4(Instance, a2, 1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfToken *pxrInternal__aapl__pxrReserved__::TfToken::TfToken(pxrInternal__aapl__pxrReserved__::TfToken *this, char *a2)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  *(_QWORD *)this = sub_20BEE9A2C(Instance, a2, 0);
  return this;
}

unint64_t *pxrInternal__aapl__pxrReserved__::TfToken::TfToken(unint64_t *a1, char *a2)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  *a1 = sub_20BEE9A2C(Instance, a2, 1);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfToken::Find@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t Instance;
  unint64_t result;

  *a2 = 0;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  result = sub_20BEE9D48(Instance, a1);
  *a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::operator==(pxrInternal__aapl__pxrReserved__::TfToken *a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  uint64_t result;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v3 = (uint64_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    v3 = &qword_254985248;
  }
  v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)v3 + 23);
  else
    v5 = v3[1];
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80) != 0)
    return memcmp((const void *)*v3, v8, v3[1]) == 0;
  if (!*((_BYTE *)v3 + 23))
    return 1;
  v9 = v4 - 1;
  do
  {
    v11 = *(unsigned __int8 *)v3;
    v3 = (uint64_t *)((char *)v3 + 1);
    v10 = v11;
    v13 = *v8++;
    v12 = v13;
    v15 = v9-- != 0;
    result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfToken::operator==(pxrInternal__aapl__pxrReserved__::TfToken *a1, char *__s)
{
  uint64_t *v3;
  size_t v4;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v3 = (uint64_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    v3 = &qword_254985248;
  }
  v4 = strlen(__s);
  if (*((char *)v3 + 23) < 0)
  {
    if (v4 == v3[1])
    {
      if (v4 == -1)
        goto LABEL_13;
      v3 = (uint64_t *)*v3;
      return memcmp(v3, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)v3 + 23))
  {
    if (v4 == -1)
LABEL_13:
      sub_20BEB9180();
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfToTokenVector@<X0>(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  unint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)*a1) >> 3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_20BEEB19C(a2, v2, v3, v4);
}

std::string *pxrInternal__aapl__pxrReserved__::TfToStringVector@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const std::string *v9;

  result = (std::string *)sub_20BDE4F04(a2, (a1[1] - *a1) >> 3);
  v5 = *a1;
  if (a1[1] != *a1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v5 + 8 * v7) & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v9 = (const std::string *)(v8 + 16);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v9 = (const std::string *)&qword_254985248;
      }
      result = std::string::operator=((std::string *)(*a2 + v6), v9);
      ++v7;
      v5 = *a1;
      v6 += 24;
    }
    while (v7 != (a1[1] - *a1) >> 3);
  }
  return result;
}

void sub_20BEE8D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  const char *v4;
  size_t v5;

  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0)
      v4 = *(const char **)v4;
  }
  else
  {
    v4 = "";
  }
  v5 = strlen(v4);
  return sub_20BDDC1C8(a1, (uint64_t)v4, v5);
}

{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;

  sub_20BDDC1C8(a1, (uint64_t)"[", 1);
  v11 = (_QWORD *)*a2;
  v12 = a2 + 1;
  if (v11 != a2 + 1)
  {
    v4 = (__int128 *)sub_20BF06918(&v11);
    v5 = v4[1];
    v9 = *v4;
    v10 = v5;
    pxrInternal__aapl__pxrReserved__::operator<<(a1, (uint64_t)&v9);
    sub_20BF069A4(&v11);
    while (v11 != v12)
    {
      sub_20BDDC1C8(a1, (uint64_t)", ", 2);
      v6 = (__int128 *)sub_20BF06918(&v11);
      v7 = v6[1];
      v9 = *v6;
      v10 = v7;
      pxrInternal__aapl__pxrReserved__::operator<<(a1, (uint64_t)&v9);
      sub_20BF069A4(&v11);
    }
  }
  sub_20BDDC1C8(a1, (uint64_t)"]", 1);
  return a1;
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  float v9[3];
  char v10;

  LOBYTE(v9[0]) = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)v9, 1);
  *(_QWORD *)v9 = *a2;
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, v9);
  v5 = sub_20BDDC1C8(v4, (uint64_t)"...", 3);
  v8 = a2[1];
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (float *)&v8);
  v10 = 93;
  return sub_20BDDC1C8(v6, (uint64_t)&v10, 1);
}

{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;

  v4 = sub_20BDDC1C8(a1, (uint64_t)"(", 1);
  v5 = (unsigned int *)*a2;
  v41 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v41 = v6;
  }
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v4, &v41);
  v9 = sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v10 = (unsigned int *)a2[1];
  v40 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v40 = v11;
  }
  v13 = pxrInternal__aapl__pxrReserved__::operator<<(v9, &v40);
  v14 = sub_20BDDC1C8(v13, (uint64_t)", ", 2);
  v15 = (unsigned int *)a2[2];
  v39 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v39 = v16;
  }
  v18 = pxrInternal__aapl__pxrReserved__::operator<<(v14, &v39);
  v19 = sub_20BDDC1C8(v18, (uint64_t)", ", 2);
  v20 = (unsigned int *)a2[3];
  v38 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v38 = v21;
  }
  v23 = pxrInternal__aapl__pxrReserved__::operator<<(v19, &v38);
  v24 = sub_20BDDC1C8(v23, (uint64_t)", (", 3);
  v42 = a2[8];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v24, a2 + 4, (uint64_t)&v42, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  v25 = sub_20BDDC1C8(v24, (uint64_t)"), (", 4);
  v42 = a2[13];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v25, a2 + 9, (uint64_t)&v42, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  v26 = sub_20BDDC1C8(v25, (uint64_t)"), (", 4);
  v42 = a2[18];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v26, a2 + 14, (uint64_t)&v42, (void (*)(uint64_t, _QWORD *))sub_20BF56B2C);
  v27 = sub_20BDDC1C8(v26, (uint64_t)"), (", 4);
  v42 = a2[23];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v27, a2 + 19, (uint64_t)&v42, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  v28 = sub_20BDDC1C8(v27, (uint64_t)"), (", 4);
  v42 = a2[28];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v28, a2 + 24, (uint64_t)&v42, (void (*)(uint64_t, _QWORD *))sub_20BF56B2C);
  sub_20BDDC1C8(v28, (uint64_t)"))", 2);
  if ((v38 & 7) != 0)
  {
    v29 = (unsigned int *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  if ((v39 & 7) != 0)
  {
    v31 = (unsigned int *)((unint64_t)v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  if ((v40 & 7) != 0)
  {
    v33 = (unsigned int *)((unint64_t)v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  if ((v41 & 7) != 0)
  {
    v35 = (unsigned int *)((unint64_t)v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *i;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = sub_20BDDC1C8(a1, (uint64_t)"RenderPassAovBinding: {", 23);
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, a2);
  sub_20BDDC1C8(v5, (uint64_t)", ", 2);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2));
  v9 = sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v10 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v9, (uint64_t)(a2 + 3));
  v11 = sub_20BDDC1C8(v10, (uint64_t)", ", 2);
  sub_20BDDC1C8(v11, (uint64_t)"aovSettings: { ", 15);
  for (i = (_QWORD *)a2[7]; i; i = (_QWORD *)*i)
  {
    v13 = pxrInternal__aapl__pxrReserved__::operator<<(a1, i + 2);
    v14 = sub_20BDDC1C8(v13, (uint64_t)": ", 2);
    v15 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v14, (uint64_t)(i + 3));
    sub_20BDDC1C8(v15, (uint64_t)", ", 2);
  }
  sub_20BDDC1C8(a1, (uint64_t)"}}", 2);
  return a1;
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = pxrInternal__aapl__pxrReserved__::operator<<(a1, a2);
  v4 = sub_20BDDC1C8(v3, (uint64_t)", ", 2);
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, a2 + 1);
  v6 = sub_20BDDC1C8(v5, (uint64_t)", ", 2);
  return pxrInternal__aapl__pxrReserved__::operator<<(v6, a2 + 2);
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = sub_20BDDC1C8(a1, (uint64_t)"name: ", 6);
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, a2 + 1);
  v6 = sub_20BDDC1C8(v5, (uint64_t)", repr sel: ", 12);
  v7 = pxrInternal__aapl__pxrReserved__::operator<<(v6, a2 + 2);
  v8 = sub_20BDDC1C8(v7, (uint64_t)", mat tag: ", 11);
  pxrInternal__aapl__pxrReserved__::operator<<(v8, a2 + 6);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *__p[2];
  unsigned __int8 v17;

  v5 = a2[5];
  v4 = a2[6];
  sub_20BDDC1C8(a1, (uint64_t)"Buffer Source:\n", 15);
  v6 = sub_20BDDC1C8(a1, (uint64_t)"    Name:      ", 15);
  v7 = pxrInternal__aapl__pxrReserved__::operator<<(v6, a2 + 2);
  sub_20BDDC1C8(v7, (uint64_t)"\n", 1);
  sub_20BDDC1C8(a1, (uint64_t)"    Size:      ", 15);
  pxrInternal__aapl__pxrReserved__::HdDataSizeOfTupleType(v5, v4);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v8, (uint64_t)"\n", 1);
  v9 = sub_20BDDC1C8(a1, (uint64_t)"    Type:      ", 15);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C54BFE0, v5, (uint64_t)__p);
  if ((v17 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v11 = v17;
  else
    v11 = (uint64_t)__p[1];
  v12 = sub_20BDDC1C8(v9, (uint64_t)v10, v11);
  sub_20BDDC1C8(v12, (uint64_t)"\n", 1);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  sub_20BDDC1C8(a1, (uint64_t)"    Count:     ", 15);
  v13 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v13, (uint64_t)"\n", 1);
  sub_20BDDC1C8(a1, (uint64_t)"    Num elems: ", 15);
  v14 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v14, (uint64_t)"\n", 1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfDumpTokenStats(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  sub_20BEE8DD0(Instance);
}

void sub_20BEE8DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  __int128 i;
  void *__p[2];
  char *v26;

  v2 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  do
  {
    v3 = a1 + (v2 << 7);
    sub_20BEB3FEC((uint64_t)&i, v3 + 44);
    v4 = *(_QWORD *)(v3 + 24);
    v5 = (char *)__p[1];
    if (__p[1] >= v26)
    {
      v7 = (char *)__p[0];
      v8 = ((char *)__p[1] - (char *)__p[0]) >> 4;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60)
        sub_20BDDF694();
      v10 = v26 - (char *)__p[0];
      if ((v26 - (char *)__p[0]) >> 3 > v9)
        v9 = v10 >> 3;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v11 = 0xFFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        v12 = (char *)sub_20BDEA2F0((uint64_t)&v26, v11);
        v7 = (char *)__p[0];
        v5 = (char *)__p[1];
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[16 * v8];
      *(_QWORD *)v13 = v4;
      *((_QWORD *)v13 + 1) = v2;
      v14 = v13;
      if (v5 != v7)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v7);
        v7 = (char *)__p[0];
      }
      v6 = v13 + 16;
      __p[0] = v14;
      __p[1] = v13 + 16;
      v26 = &v12[16 * v11];
      if (v7)
        operator delete(v7);
    }
    else
    {
      *(_QWORD *)__p[1] = v4;
      *((_QWORD *)v5 + 1) = v2;
      v6 = v5 + 16;
    }
    __p[1] = v6;
    v15 = (_BYTE *)i;
    if ((_QWORD)i)
    {
      __dmb(0xBu);
      *v15 = 0;
    }
    ++v2;
  }
  while (v2 != 128);
  v16 = 126 - 2 * __clz(((char *)__p[1] - (char *)__p[0]) >> 4);
  if (__p[1] == __p[0])
    v17 = 0;
  else
    v17 = v16;
  sub_20BEEA078((uint64_t)__p[0], (unint64_t *)__p[1], (uint64_t)&i, v17, 1);
  puts("Set # -- Size");
  for (i = *(_OWORD *)__p; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BEE9FFC(&i))
  {
    v20 = *(_QWORD *)(*sub_20BEE9F84(&i, v18, v19) + 8);
    v23 = sub_20BEE9F84(&i, v21, v22);
    printf("%zu -- %zu\n", v20, *(_QWORD *)*v23);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20BEE8FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BEE8FF4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BCE0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BCE0, (char *)8, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEE90B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEE90F4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BCF0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BCF0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEE91B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t sub_20BEE91F4(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v3;
  int v4;
  _BYTE *v8;
  char v9;
  char v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  void **v16;
  uint64_t **v17;
  char *v18;
  uint64_t **v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  float v35;
  unsigned __int8 v36;
  _QWORD *v37;
  _BOOL4 v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  uint64_t i;
  void **v43;
  unint64_t v44;
  int v45;
  _BYTE *v46;
  _BYTE v47[4];
  int v48;
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  void **v52;
  _BYTE *v53;
  __int128 __dst;
  uint64_t v55;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    return 0;
  v8 = *(_BYTE **)a2;
  if (v4 >= 0)
    v8 = a2;
  v9 = *v8;
  if (*v8)
  {
    v10 = 0;
    v11 = v8 + 1;
    do
    {
      v10 = v9 - v10 + 8 * v10;
      v12 = *v11++;
      v9 = v12;
    }
    while (v12);
    v13 = v10 & 0x7F;
  }
  else
  {
    v13 = 0;
  }
  v15 = a1 + (v13 << 7);
  sub_20BEB3FEC((uint64_t)&v53, v15 + 44);
  if (*((char *)a2 + 23) >= 0)
    v16 = (void **)a2;
  else
    v16 = *(void ***)a2;
  __p[0] = 0;
  __p[1] = 0;
  v51 = 0;
  v52 = v16;
  v17 = sub_20BEE9568((_QWORD *)(a1 + (v13 << 7)), (uint64_t)v47);
  v19 = v17;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    if (v17)
      goto LABEL_17;
LABEL_22:
    v23 = a1 + (v13 << 7);
    v26 = *(_DWORD *)(v23 + 40);
    v25 = (_DWORD *)(v23 + 40);
    v24 = v26;
    if (v26)
    {
      LODWORD(v27) = v24 - 1;
    }
    else
    {
      v29 = *(_QWORD *)(v15 + 8);
      v30 = (float)v29;
      v31 = *(float *)(v15 + 32);
      if ((float)((float)(unint64_t)(*(_QWORD *)(v15 + 24) + 1) / (float)v29) <= v31)
        goto LABEL_39;
      v32 = *(_QWORD *)(v15 + 16);
      if (v32)
      {
        do
        {
          v33 = atomic_load((unsigned int *)(v32 + 16));
          v34 = *(_QWORD *)v32;
          if (v33 == 1)
            sub_20BEC32F8((_QWORD *)v15, (uint64_t *)v32);
          v32 = v34;
        }
        while (v34);
        v29 = *(_QWORD *)(v15 + 8);
        v31 = *(float *)(v15 + 32);
        v30 = (float)v29;
      }
      if (v29)
        v35 = (float)*(unint64_t *)(v15 + 24) / v30;
      else
        v35 = 0.0;
      v27 = (unint64_t)(float)((float)(v31 - v35) * v30);
      if (v27 <= 0x20)
        LODWORD(v27) = 32;
    }
    *v25 = v27;
LABEL_39:
    v36 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if ((v36 & 1) != 0)
    {
      v37 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("TfToken", 0, v18);
      v38 = v37 != 0;
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
    v39 = 0;
    v40 = *((char *)a2 + 23);
    if (v40 >= 0)
      v41 = a2;
    else
      v41 = *(_BYTE **)a2;
    for (i = 56; i != -8; i -= 8)
    {
      v39 |= (uint64_t)(char)*v41 << i;
      if (*v41)
        ++v41;
    }
    if (v40 < 0)
    {
      sub_20BDDBFAC(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      __dst = *a2;
      v55 = *((_QWORD *)a2 + 2);
    }
    v48 = v13;
    v49 = v39;
    v43 = __p;
    v51 = v55;
    *(_OWORD *)__p = __dst;
    if (v55 < 0)
      v43 = (void **)__dst;
    v52 = v43;
    v44 = (unint64_t)(sub_20BEE9678(v15, (uint64_t)v47, (uint64_t)v47) + 2);
    if (SHIBYTE(v51) < 0)
      operator delete(__p[0]);
    if (a3)
      v45 = 0;
    else
      v45 = 3;
    *(_DWORD *)v44 = v45;
    if (v38)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v37);
    result = v44 | a3 ^ 1u;
    goto LABEL_62;
  }
  operator delete(__p[0]);
  if (!v19)
    goto LABEL_22;
LABEL_17:
  v20 = (unsigned int *)(v19 + 2);
  if (((_DWORD)v19[2] & 1) != 0)
  {
    if ((a3 & 1) == 0)
    {
      v22 = 1;
      do
        v28 = __ldxr(v20);
      while (__stxr(v28 + 2, v20));
      goto LABEL_26;
    }
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 & 0xFFFFFFFE, v20));
  }
  v22 = 0;
LABEL_26:
  result = v22 | (unint64_t)v20;
LABEL_62:
  v46 = v53;
  if (v53)
  {
    __dmb(0xBu);
    *v46 = 0;
  }
  return result;
}

void sub_20BEE9504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, _BYTE *a20)
{
  _BYTE *v21;

  sub_20BEB24F4((uint64_t)&a9);
  v21 = a20;
  if (a20)
  {
    __dmb(0xBu);
    *v21 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_20BEE9568(_QWORD *a1, uint64_t a2)
{
  const char *v2;
  char v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **i;
  unint64_t v13;

  v2 = *(const char **)(a2 + 40);
  v3 = *v2;
  if (*v2)
  {
    LODWORD(v4) = 0;
    v5 = (unsigned __int8 *)(v2 + 1);
    do
    {
      v4 = (5 * v4 + v3);
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v10 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (v7.i32[0] - 1) & v4;
  }
  v11 = *(uint64_t ****)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  for (i = *v11; i; i = (uint64_t **)*i)
  {
    v13 = (unint64_t)i[1];
    if (v13 == v4)
    {
      if (!strcmp((const char *)i[7], v2))
        return i;
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
      }
      else
      {
        v13 &= *(_QWORD *)&v7 - 1;
      }
      if (v13 != v10)
        return 0;
    }
  }
  return i;
}

uint64_t **sub_20BEE9678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  const char *v6;
  char v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v6 = *(const char **)(a2 + 40);
  v7 = *v6;
  if (*v6)
  {
    LODWORD(v8) = 0;
    v9 = (unsigned __int8 *)(v6 + 1);
    do
    {
      v8 = (5 * v8 + v7);
      v10 = *v9++;
      v7 = v10;
    }
    while (v10);
  }
  else
  {
    v8 = 0;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v11)
        v3 = v8 % v11;
    }
    else
    {
      v3 = ((_DWORD)v11 - 1) & v8;
    }
    v14 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t **)*i)
      {
        v16 = (unint64_t)i[1];
        if (v16 == v8)
        {
          if (!strcmp((const char *)i[7], v6))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  sub_20BEE9900(a1, v8, a3, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v3 = v8 % v11;
      else
        v3 = v8;
    }
    else
    {
      v3 = ((_DWORD)v11 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (uint64_t **)v26[0];
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BEE98DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20BDEEB58((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEE9900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20BEE9988((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEE996C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEE9988(uint64_t a1, uint64_t a2)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;

  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = (_OWORD *)(a1 + 16);
  v6 = (_OWORD *)(a2 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *v5 = v7;
  }
  v8 = *(_OWORD **)(a2 + 16);
  if (*(char *)(a2 + 39) >= 0)
    v8 = v6;
  v9 = *(_OWORD **)(a2 + 40);
  if (v8 == v9)
  {
    if (*(char *)(a1 + 39) < 0)
      v9 = *(_OWORD **)v5;
    else
      v9 = v5;
  }
  *(_QWORD *)(a1 + 40) = v9;
  return a1;
}

unint64_t sub_20BEE9A2C(uint64_t a1, char *a2, int a3)
{
  int v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  char *v12;
  uint64_t **v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t result;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  unsigned __int8 v31;
  _QWORD *v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void **v37;
  unint64_t v38;
  int v39;
  _BYTE *v40;
  _BYTE v41[4];
  int v42;
  uint64_t v43;
  void *__p[2];
  uint64_t v45;
  void *v46;
  _BYTE *v47;
  __int128 v48;
  uint64_t v49;

  if (!a2)
    return 0;
  LOBYTE(v4) = *a2;
  if (!*a2)
    return 0;
  v7 = 0;
  v8 = 1;
  do
  {
    v7 = v4 - v7 + 8 * v7;
    v4 = a2[v8++];
  }
  while (v4);
  v9 = v7 & 0x7F;
  v10 = a1 + (v9 << 7);
  sub_20BEB3FEC((uint64_t)&v47, v10 + 44);
  __p[0] = 0;
  __p[1] = 0;
  v45 = 0;
  v46 = a2;
  v11 = sub_20BEE9568((_QWORD *)(a1 + (v9 << 7)), (uint64_t)v41);
  v13 = v11;
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_7;
LABEL_13:
    v18 = a1 + (v9 << 7);
    v21 = *(_DWORD *)(v18 + 40);
    v20 = (_DWORD *)(v18 + 40);
    v19 = v21;
    if (v21)
    {
      LODWORD(v22) = v19 - 1;
    }
    else
    {
      v24 = *(_QWORD *)(v10 + 8);
      v25 = (float)v24;
      v26 = *(float *)(v10 + 32);
      if ((float)((float)(unint64_t)(*(_QWORD *)(v10 + 24) + 1) / (float)v24) <= v26)
        goto LABEL_30;
      v27 = *(_QWORD *)(v10 + 16);
      if (v27)
      {
        do
        {
          v28 = atomic_load((unsigned int *)(v27 + 16));
          v29 = *(_QWORD *)v27;
          if (v28 == 1)
            sub_20BEC32F8((_QWORD *)v10, (uint64_t *)v27);
          v27 = v29;
        }
        while (v29);
        v24 = *(_QWORD *)(v10 + 8);
        v26 = *(float *)(v10 + 32);
        v25 = (float)v24;
      }
      if (v24)
        v30 = (float)*(unint64_t *)(v10 + 24) / v25;
      else
        v30 = 0.0;
      v22 = (unint64_t)(float)((float)(v26 - v30) * v25);
      if (v22 <= 0x20)
        LODWORD(v22) = 32;
    }
    *v20 = v22;
LABEL_30:
    v31 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if ((v31 & 1) != 0)
    {
      v32 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("TfToken", 0, v12);
      v33 = v32 != 0;
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    v34 = 0;
    v35 = 56;
    v36 = a2;
    do
    {
      v34 |= (uint64_t)*v36 << v35;
      if (*v36)
        ++v36;
      v35 -= 8;
    }
    while (v35 != -8);
    sub_20BDDC0E4(&v48, a2);
    v42 = v9;
    v43 = v34;
    v37 = __p;
    v45 = v49;
    *(_OWORD *)__p = v48;
    if (v49 < 0)
      v37 = (void **)v48;
    v46 = v37;
    v38 = (unint64_t)(sub_20BEE9678(v10, (uint64_t)v41, (uint64_t)v41) + 2);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (a3)
      v39 = 0;
    else
      v39 = 3;
    *(_DWORD *)v38 = v39;
    if (v33)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v32);
    result = v38 | a3 ^ 1u;
    goto LABEL_47;
  }
  operator delete(__p[0]);
  if (!v13)
    goto LABEL_13;
LABEL_7:
  v14 = (unsigned int *)(v13 + 2);
  if (((_DWORD)v13[2] & 1) != 0)
  {
    if ((a3 & 1) == 0)
    {
      v16 = 1;
      do
        v23 = __ldxr(v14);
      while (__stxr(v23 + 2, v14));
      goto LABEL_17;
    }
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 & 0xFFFFFFFE, v14));
  }
  v16 = 0;
LABEL_17:
  result = v16 | (unint64_t)v14;
LABEL_47:
  v40 = v47;
  if (v47)
  {
    __dmb(0xBu);
    *v40 = 0;
  }
  return result;
}

void sub_20BEE9CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,_BYTE *a21)
{
  if (a21)
  {
    __dmb(0xBu);
    *a21 = 0;
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20BEE9D48(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  _BYTE *v5;
  char v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unint64_t result;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int *v16;
  unsigned int v17;
  _BYTE *v18;
  uint64_t v19;
  void *__p;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _BYTE *v24;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  if (!v2)
    return 0;
  v5 = (_BYTE *)*a2;
  if (v3 >= 0)
    v5 = a2;
  v6 = *v5;
  if (*v5)
  {
    v7 = 0;
    v8 = v5 + 1;
    do
    {
      v7 = v6 - v7 + 8 * v7;
      v9 = *v8++;
      v6 = v9;
    }
    while (v9);
    v10 = v7 & 0x7F;
  }
  else
  {
    v10 = 0;
  }
  v12 = (_QWORD *)(a1 + (v10 << 7));
  sub_20BEB3FEC((uint64_t)&v24, (uint64_t)v12 + 44);
  if (*((char *)a2 + 23) >= 0)
    v13 = a2;
  else
    v13 = (uint64_t *)*a2;
  __p = 0;
  v21 = 0;
  v22 = 0;
  v23 = v13;
  v14 = sub_20BEE9E74(v12, (uint64_t)&v19);
  v15 = v14;
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__p);
    if (v15)
    {
LABEL_17:
      v16 = (unsigned int *)(v15 + 2);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      result = v17 & 1 | (unint64_t)v16;
      goto LABEL_22;
    }
  }
  else if (v14)
  {
    goto LABEL_17;
  }
  result = 0;
LABEL_22:
  v18 = v24;
  if (v24)
  {
    __dmb(0xBu);
    *v18 = 0;
  }
  return result;
}

void sub_20BEE9E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  _BYTE *v18;

  if (a16 < 0)
    operator delete(__p);
  v18 = *(_BYTE **)(v16 - 32);
  if (v18)
  {
    __dmb(0xBu);
    *v18 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_20BEE9E74(_QWORD *a1, uint64_t a2)
{
  const char *v2;
  char v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **i;
  unint64_t v13;

  v2 = *(const char **)(a2 + 40);
  v3 = *v2;
  if (*v2)
  {
    LODWORD(v4) = 0;
    v5 = (unsigned __int8 *)(v2 + 1);
    do
    {
      v4 = (5 * v4 + v3);
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v10 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (v7.i32[0] - 1) & v4;
  }
  v11 = *(uint64_t ****)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  for (i = *v11; i; i = (uint64_t **)*i)
  {
    v13 = (unint64_t)i[1];
    if (v4 == v13)
    {
      if (!strcmp((const char *)i[7], v2))
        return i;
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
      }
      else
      {
        v13 &= *(_QWORD *)&v7 - 1;
      }
      if (v13 != v10)
        return 0;
    }
  }
  return i;
}

_QWORD *sub_20BEE9F84(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<unsigned long, unsigned long>>>"
            "::operator->() [T = std::vector<std::pair<unsigned long, unsigned long>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BEE9FFC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<unsigned long, un"
            "signed long>>>::operator++() [T = std::vector<std::pair<unsigned long, unsigned long>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_20BEEA078(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t *v18;
  char v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return sub_20BEEA560(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return sub_20BEEAB3C(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return sub_20BEEAC3C(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_20BEEA3EC(v9, a2);
          else
            return (uint64_t)sub_20BEEA4C4(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_20BEEA560(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_20BEEA560(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_20BEEA560(v9 + 2, v15 - 2, a2 - 4);
            sub_20BEEA560(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_20BEEA560(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)sub_20BEEA6B4(v9, a2);
            v9 = (unint64_t *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = sub_20BEEA7F8(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = sub_20BEEA93C(v9, v18);
          v9 = v18 + 2;
          result = sub_20BEEA93C(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = sub_20BEEA078(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_20BEEAD90(v9, a2, a2, a3);
        return result;
    }
  }
}

unint64_t *sub_20BEEA3EC(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = v5[3];
      if (v8 >= v5[1])
        goto LABEL_19;
    }
    else
    {
      v8 = v5[3];
    }
    v5[2] = v7;
    v4[1] = v5[1];
    v9 = result;
    if (v5 == result)
      goto LABEL_18;
    v10 = v3;
    while (1)
    {
      v11 = *(unint64_t *)((char *)result + v10 - 16);
      if (v6 >= v11)
        break;
      v12 = *(unint64_t *)((char *)result + v10 - 8);
LABEL_12:
      v5 -= 2;
      v13 = (unint64_t *)((char *)result + v10);
      *v13 = v11;
      v13[1] = v12;
      v10 -= 16;
      if (!v10)
      {
        v9 = result;
        goto LABEL_18;
      }
    }
    if (v11 >= v6)
    {
      v9 = (unint64_t *)((char *)result + v10);
      v12 = *(unint64_t *)((char *)result + v10 - 8);
      if (v8 >= v12)
        goto LABEL_18;
      goto LABEL_12;
    }
    v9 = v5;
LABEL_18:
    *v9 = v6;
    v9[1] = v8;
LABEL_19:
    v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

unint64_t *sub_20BEEA4C4(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t *i;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *j;
  unint64_t v9;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      for (i = result + 1; ; i += 2)
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4)
          break;
        if (v6 >= v5)
        {
          v7 = v4[3];
          if (v7 < v4[1])
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 2;
        if (result + 2 == a2)
          return result;
      }
      v7 = v4[3];
LABEL_6:
      for (j = i; ; j -= 2)
      {
        v9 = *j;
        j[1] = v6;
        j[2] = v9;
        v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2)))
          break;
      }
      *(j - 1) = v5;
      *j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_20BEEA560(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = (uint64_t *)(a2 + 1);
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = (uint64_t *)(a1 + 1);
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (uint64_t *)(a1 + 1);
      *a3 = v4;
      v7 = (uint64_t *)(a3 + 1);
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = (uint64_t *)(a3 + 1);
      v8 = 2;
      v6 = (uint64_t *)(a2 + 1);
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

unint64_t *sub_20BEEA6B4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t *sub_20BEEA7F8(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unint64_t *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unint64_t *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        v17 = *(v14 - 2);
        v14 -= 2;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL sub_20BEEA93C(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_20BEEA560(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_20BEEAB3C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_20BEEAC3C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      sub_20BEEA560(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        v20 = *((_QWORD *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = v9;
        goto LABEL_22;
      }
      v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *((_QWORD *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = a1;
        goto LABEL_22;
      }
    }
    v16 = (unint64_t *)((char *)a1 + v17 + 32);
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_20BEEAB3C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = sub_20BEEA560(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_20BEEAC3C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  result = sub_20BEEAB3C(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_20BEEAD90(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_20BEEAF08((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          sub_20BEEAF08((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = sub_20BEEB054(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          sub_20BEEB0E8((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20BEEAF08(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_QWORD *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v13 = a4[1];
          if (v8[1] < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unint64_t *)(result + 16 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_QWORD *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_23;
          }
        }
        v14 = v8;
LABEL_23:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *sub_20BEEB054(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_20BEEB0E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_QWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v9 = *(_QWORD *)(a2 - 8);
      if (*(_QWORD *)(result + 16 * v5 + 8) >= v9)
        return result;
    }
    else
    {
      v9 = *(_QWORD *)(a2 - 8);
    }
    *(_QWORD *)(a2 - 16) = v7;
    *(_QWORD *)(a2 - 8) = *(_QWORD *)(result + 16 * v5 + 8);
    if (v4 >= 2)
    {
      while (1)
      {
        v11 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v10 = (unint64_t *)(result + 16 * v5);
        v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12)
            break;
          v13 = *(_QWORD *)(result + 16 * v5 + 8);
          if (v13 >= v9)
            break;
        }
        else
        {
          v13 = v10[1];
        }
        *v6 = v12;
        v6[1] = v13;
        v6 = (unint64_t *)(result + 16 * v5);
        if (v11 <= 1)
          goto LABEL_13;
      }
    }
    v10 = v6;
LABEL_13:
    *v10 = v8;
    v10[1] = v9;
  }
  return result;
}

_QWORD *sub_20BEEB19C(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = (_QWORD *)sub_20BEEB220((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BEEB200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEEB220(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v7;

  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((unint64_t *)(a4 + v7), v6);
      v6 = (__int128 *)((char *)v6 + 24);
      v7 += 8;
    }
    while (v6 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20BEEB288(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (v3)
  {
    do
    {
      v5 = *(_QWORD *)(v2 - 8);
      v2 -= 8;
      v4 = v5;
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
    }
    while (v2 != v1);
  }
  _Unwind_Resume(a1);
}

void sub_20BEEB2B8(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *v6;
  char *v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA5AA3BLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C(&v15, "Tf", "TfSingleton::_CreateInstance", __p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v6 = (pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *)operator new(0xD0uLL);
      pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry::Tf_TypeRegistry(v6);
      v8 = atomic_load(a1);
      if (v8)
      {
        if (v6 != (pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *)v8)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v7);
        }
      }
      else
      {
        do
          v10 = __ldaxr(a1);
        while (__stlxr((unint64_t)v6, a1));
        if (v10)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v7, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry*> &)::isInitializing);
  }
  v11 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_15Tf_TypeRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BEEB504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::SetInstanceConstructed(unint64_t result)
{
  unint64_t v1;
  char *v2;
  char *v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance));
  if (v1)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v4[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::DeleteInstance()
{
  void **i;
  unint64_t v1;
  void *v2;

  for (i = (void **)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
        i;
        i = (void **)v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if ((void **)v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance))
      {
        sub_20BEB3F28((uint64_t)(i + 18));
        sub_20BEB3FA4((uint64_t)(i + 13));
        sub_20BEF02B8((uint64_t)(i + 8));
        sub_20BEB3F28((uint64_t)(i + 3));
        v2 = *i;
        *i = 0;
        if (v2)
          operator delete[](v2);
        operator delete(i);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry::Tf_TypeRegistry(pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *this)
{
  pxrInternal__aapl__pxrReserved__::TfBigRWMutex *v2;
  uint64_t v3;
  unint64_t **v4;
  unint64_t *v5;
  char *v6;
  unint64_t v7;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  __int128 __p;
  uint64_t v12;
  const char *v13;
  char v14;
  int v15;

  v2 = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::TfBigRWMutex(this);
  *(_OWORD *)((char *)v2 + 24) = 0u;
  *(_OWORD *)((char *)v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v3 = (uint64_t)v2 + 64;
  sub_20BEF2794((uint64_t)v2 + 64);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  v4 = (unint64_t **)((char *)this + 184);
  *((_BYTE *)this + 200) = 0;
  sub_20BDDC0E4(&__p, "TfType::_Root");
  *((_QWORD *)this + 24) = sub_20BEEB8D8((uint64_t)this, &__p);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
  sub_20BDDC0E4(&__p, "TfType::_Unknown");
  v5 = (unint64_t *)sub_20BEEB8D8((uint64_t)this, &__p);
  *v4 = v5;
  if (SHIBYTE(v12) < 0)
  {
    operator delete((void *)__p);
    v5 = *v4;
  }
  *(_QWORD *)&__p = v5;
  atomic_store((unint64_t)qword_24C51BD00, v5 + 5);
  v5[6] = 0;
  *((_WORD *)v5 + 120) = 0;
  sub_20BEEFB38(v3, qword_24C51BD00, &__p);
  atomic_store((unint64_t)pthread_self(), (unint64_t *)this + 2);
  do
    v7 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  while (__stlxr((unint64_t)this, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance));
  if (v7)
  {
    *(_QWORD *)&__p = "tf/instantiateSingleton.h";
    *((_QWORD *)&__p + 1) = "SetInstanceConstructed";
    v12 = 56;
    v13 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::"
          "SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry]";
    v14 = 0;
    v15 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v6);
  }
  sub_20BEF2834();
  v8 = sub_20BEEB958();
  *((_BYTE *)this + 200) = 1;
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v8);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_24C51BE20);
  atomic_store(0, (unint64_t *)this + 2);
  return this;
}

void sub_20BEEB854(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __break(1u);
}

void sub_20BEEB89C()
{
  __cxa_end_catch();
  JUMPOUT(0x20BEEB8B0);
}

void *sub_20BEEB8D8(uint64_t a1, __int128 *a2)
{
  void *v4;
  __int128 *v6;

  v4 = operator new(0xF8uLL);
  sub_20BEEFAC4((uint64_t)v4, a2);
  v6 = a2;
  *((_QWORD *)sub_20BEC286C(a1 + 24, (unsigned __int8 *)a2, (uint64_t)&unk_20CAC184C, &v6) + 5) = v4;
  return v4;
}

void sub_20BEEB944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEEB958()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BEB9D48((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BEEBA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEEBA78(uint64_t a1)
{
  sub_20BEB3F28(a1 + 80);
  sub_20BEB3FA4(a1 + 40);
  return sub_20BEF02B8(a1);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::TfType::TfType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  *(_QWORD *)this = *(_QWORD *)(Instance + 184);
  return this;
}

{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  *(_QWORD *)this = *(_QWORD *)(Instance + 184);
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetRoot(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  return *(_QWORD *)(Instance + 192);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return *(_QWORD *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::FindByName(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  return pxrInternal__aapl__pxrReserved__::TfType::FindDerivedByName(*(uint64_t **)(Instance + 192), a1, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::FindDerivedByName(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t Instance;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  pthread_t v21;
  unsigned __int8 *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v38[2];
  uint64_t v39;
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  int v45;
  uint64_t v46;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*a1 != *(_QWORD *)(Instance + 184))
  {
    v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v7)
      v7 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    v46 = *(_QWORD *)(v7 + 184);
    v8 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v8)
      v8 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    __p[0] = v8;
    LODWORD(__p[1]) = -1;
    sub_20BECED94((uint64_t)__p, a2, a3);
    v11 = *a1;
    v12 = *(_QWORD **)(*a1 + 232);
    if (v12)
    {
      v13 = sub_20BEB4DB8(v12, (unsigned __int8 *)a2);
      if (v13)
      {
        v3 = *((_QWORD *)v13 + 5);
        v46 = v3;
        v14 = 1;
        goto LABEL_20;
      }
      v11 = *a1;
    }
    if (*(_BYTE *)(v11 + 152)
      && (v16 = sub_20BEB4DB8((_QWORD *)(v11 + 112), (unsigned __int8 *)a2)) != 0
      && *((_QWORD *)v16 + 5))
    {
      v14 = 0;
      v46 = *((_QWORD *)v16 + 5);
    }
    else
    {
      v14 = 0;
    }
LABEL_20:
    sub_20BECC0B0((uint64_t)__p, v9, v10);
    if ((v14 & 1) == 0)
    {
      v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      if (!v19)
        v19 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      if (v46 == *(_QWORD *)(v19 + 184))
      {
        v20 = atomic_load(v8 + 2);
        if (v20)
        {
          v21 = pthread_self();
          if (!v21 || v21 != (pthread_t)v20)
          {
            while (atomic_load(v8 + 2))
              sched_yield();
          }
        }
        __p[0] = v8;
        LODWORD(__p[1]) = -1;
        sub_20BECED94((uint64_t)__p, v17, v18);
        v23 = sub_20BEB4DB8(v8 + 3, (unsigned __int8 *)a2);
        if (v23)
          v26 = *((_QWORD *)v23 + 5);
        else
          v26 = 0;
        sub_20BECC0B0((uint64_t)__p, v24, v25);
        if (v26)
        {
          v46 = v26;
          if ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)&v46, *a1, v28) & 1) == 0)
          {
            v29 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
            if (!v29)
              v29 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
            v46 = *(_QWORD *)(v29 + 184);
          }
        }
        sub_20BECC0B0((uint64_t)__p, v27, v28);
      }
      v30 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      if (!v30)
        v30 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      v3 = v46;
      if (v46 == *(_QWORD *)(v30 + 184))
      {
        return *(_QWORD *)(v30 + 184);
      }
      else
      {
        v44 = v8;
        v45 = -1;
        sub_20BECED08((uint64_t)&v44, v17, v18);
        v32 = (uint64_t *)(*a1 + 232);
        v31 = *v32;
        if (!*v32)
        {
          v33 = operator new(0x28uLL);
          *v33 = 0u;
          v33[1] = 0u;
          *((_DWORD *)v33 + 8) = 1065353216;
          sub_20BDEC6E0((uint64_t)v33, 0);
          sub_20BEEC0B8(v32, (uint64_t)v33);
          v31 = *(_QWORD *)(*a1 + 232);
        }
        if (*(char *)(a2 + 23) < 0)
        {
          sub_20BDDBFAC(v38, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)a2;
          v39 = *(_QWORD *)(a2 + 16);
        }
        *(_OWORD *)__p = *(_OWORD *)v38;
        v34 = v39;
        v38[0] = 0;
        v38[1] = 0;
        v39 = 0;
        v40 = v3;
        v42 = v34;
        v43 = v3;
        sub_20BEF2938(v31, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v42) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v39) < 0)
          operator delete(v38[0]);
        sub_20BECC0B0((uint64_t)&v44, v35, v36);
      }
    }
    return v3;
  }
  v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v15)
    v15 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  return *(_QWORD *)(v15 + 184);
}

void sub_20BEEBEA0(_Unwind_Exception *a1, uint64_t a2, char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_20BECC0B0((uint64_t)&__p, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetUnknownType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  return *(_QWORD *)(Instance + 184);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::IsA(char *a1, uint64_t a2, char *a3)
{
  uint64_t Instance;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t IsAImplNoLock;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*(_QWORD *)(Instance + 184) == a2)
  {
    v13 = "tf/type.cpp";
    v14 = "IsA";
    v15 = 808;
    v16 = "BOOL pxrInternal__aapl__pxrReserved__::TfType::IsA(TfType) const";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((int)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"IsA() was given an Unknown base type.  This probably means the attempt to look up the base type failed.  (Note: to explicitly check if a type is unknown, use IsUnknown() instead.)");
    return 0;
  }
  v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6)
    v6 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*(_QWORD *)a1 == *(_QWORD *)(v6 + 184))
    return 0;
  if (*(_QWORD *)a1 == a2)
    return 1;
  v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (**(_QWORD **)(v7 + 192) == a2)
    return 1;
  v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v13 = (char *)v8;
  LODWORD(v14) = -1;
  sub_20BECED94((uint64_t)&v13, a2, a3);
  if (*(_QWORD *)(a2 + 80) == *(_QWORD *)(a2 + 88))
    IsAImplNoLock = 0;
  else
    IsAImplNoLock = pxrInternal__aapl__pxrReserved__::TfType::_IsAImplNoLock(a1, a2);
  sub_20BECC0B0((uint64_t)&v13, v9, v10);
  return IsAImplNoLock;
}

void sub_20BEEC0B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20BEB3F28(v3);
    operator delete(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2, char *a3)
{
  unint64_t *Instance;
  unint64_t v5;
  pthread_t v6;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  int v18;
  void *__p[2];
  char v20;

  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v5 = atomic_load(Instance + 2);
  if (v5)
  {
    v6 = pthread_self();
    if (!v6 || v6 != (pthread_t)v5)
    {
      while (atomic_load(Instance + 2))
        sched_yield();
    }
  }
  v17 = Instance;
  v18 = -1;
  sub_20BECED94((uint64_t)&v17, (uint64_t)a2, a3);
  __p[0] = this;
  v8 = sub_20BEB4074(Instance + 13, __p);
  if (v8)
  {
    v11 = (uint64_t *)(v8[3] + 72);
    goto LABEL_11;
  }
  sub_20BDDC0E4(__p, (char *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  v14 = sub_20BEB4DB8(Instance + 18, (unsigned __int8 *)__p);
  if (v14)
    v11 = (uint64_t *)(*((_QWORD *)v14 + 5) + 72);
  else
    v11 = 0;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v11)
    {
LABEL_18:
      sub_20BEEEFB8((uint64_t)&v17, v9, v10);
      sub_20BDDC0E4(__p, (char *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
      sub_20BEEFD9C((uint64_t)(Instance + 8), this, (unsigned __int8 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
LABEL_11:
      v12 = *v11;
      if (*v11)
        goto LABEL_12;
    }
  }
  else if (v11)
  {
    goto LABEL_18;
  }
  sub_20BECC0B0((uint64_t)&v17, v9, v10);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(this, (uint64_t)__p);
  v12 = pxrInternal__aapl__pxrReserved__::TfType::FindByName((uint64_t)__p, v15, v16);
  if (v20 < 0)
    operator delete(__p[0]);
LABEL_12:
  sub_20BECC0B0((uint64_t)&v17, v9, v10);
  return v12;
}

void sub_20BEEC25C(_Unwind_Exception *a1, uint64_t a2, char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  sub_20BECC0B0((uint64_t)&a10, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName@<X0>(pxrInternal__aapl__pxrReserved__::TfType *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  char *v6;
  unsigned __int8 v7;
  uint64_t Instance;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 *v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int128 v17;
  uint64_t result;
  _OWORD *v20;
  void *v21[2];
  uint64_t v22;
  void *__p[2];
  char v24;
  void *v25[2];
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;

  sub_20BEB59B0((uint64_t)&v29, (uint64_t)"Tf", (uint64_t)"TfType::GetCanonicalTypeName");
  v7 = atomic_load((unsigned __int8 *)&qword_254985270);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254985270))
  {
    v20 = operator new(0x28uLL);
    *v20 = 0u;
    v20[1] = 0u;
    *((_DWORD *)v20 + 8) = 1065353216;
    qword_254985268 = (uint64_t)v20;
    __cxa_guard_release(&qword_254985270);
  }
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v27 = Instance;
  v28 = -1;
  sub_20BECED94((uint64_t)&v27, v5, v6);
  v9 = (_QWORD *)qword_254985268;
  sub_20BDDC0E4(__p, (char *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  v10 = sub_20BEF32AC(v9, (unsigned __int8 *)__p);
  v13 = v10;
  if (v24 < 0)
  {
    operator delete(__p[0]);
    if (v13)
    {
LABEL_6:
      if ((char)v13[63] < 0)
      {
        sub_20BDDBFAC((_BYTE *)a2, *((void **)v13 + 5), *((_QWORD *)v13 + 6));
      }
      else
      {
        v14 = *(_OWORD *)(v13 + 40);
        *(_QWORD *)(a2 + 16) = *((_QWORD *)v13 + 7);
        *(_OWORD *)a2 = v14;
      }
      goto LABEL_19;
    }
  }
  else if (v10)
  {
    goto LABEL_6;
  }
  sub_20BEEEFB8((uint64_t)&v27, v11, v12);
  v15 = qword_254985268;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v21);
  sub_20BDDC0E4(__p, (char *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  *(_OWORD *)v25 = *(_OWORD *)v21;
  v26 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v16 = sub_20BEF385C(v15, (unsigned __int8 *)__p, (__int128 *)__p);
  if ((char)v16[63] < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, *((void **)v16 + 5), *((_QWORD *)v16 + 6));
  }
  else
  {
    v17 = *(_OWORD *)(v16 + 40);
    *(_QWORD *)(a2 + 16) = *((_QWORD *)v16 + 7);
    *(_OWORD *)a2 = v17;
  }
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  if (v24 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
LABEL_19:
  for (result = sub_20BECC0B0((uint64_t)&v27, v11, v12);
        v30--;
  return result;
}

void sub_20BEEC4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  __cxa_guard_abort(&qword_254985270);
  sub_20BEB24F4(v21 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return *(_QWORD *)this + 8;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfType::GetTypeid(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)(*(_QWORD *)this + 40));
  if (v1)
    return v1;
  else
    return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetAliases@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t Instance;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v11;
  int v12;
  uint64_t v13;

  v13 = a2;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v11 = Instance;
  v12 = -1;
  sub_20BECED94((uint64_t)&v11, a2, a3);
  if (*(_BYTE *)(*(_QWORD *)a1 + 200) && (v9 = sub_20BEB4074((_QWORD *)(*(_QWORD *)a1 + 160), &v13)) != 0)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_20BE78B98((char *)a4, (__int128 *)v9[3], (__int128 *)v9[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[4] - v9[3]) >> 3));
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return sub_20BECC0B0((uint64_t)&v11, v7, v8);
}

void sub_20BEEC61C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BECC0B0((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes@<X0>(pxrInternal__aapl__pxrReserved__::TfType *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v11;
  int v12;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v11 = Instance;
  v12 = -1;
  sub_20BECED94((uint64_t)&v11, a2, a3);
  v7 = *(_QWORD *)this;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_20BEF2C88(a4, *(const void **)(v7 + 56), *(_QWORD *)(v7 + 64), (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 3);
  return sub_20BECC0B0((uint64_t)&v11, v8, v9);
}

void sub_20BEEC6B8(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfType::GetNBaseTypes(pxrInternal__aapl__pxrReserved__::TfType *this, pxrInternal__aapl__pxrReserved__::TfType *a2, char *a3)
{
  unint64_t Instance;
  char *v7;
  const void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  int v14;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v13 = Instance;
  v14 = -1;
  sub_20BECED94((uint64_t)&v13, (uint64_t)a2, a3);
  v8 = *(const void **)(*(_QWORD *)this + 56);
  v9 = *(_QWORD *)(*(_QWORD *)this + 64);
  v10 = (v9 - (uint64_t)v8) >> 3;
  if (v10 >= (unint64_t)a3)
    v11 = (uint64_t)a3;
  else
    v11 = (v9 - (uint64_t)v8) >> 3;
  if (v11)
    memmove(a2, v8, 8 * v11);
  sub_20BECC0B0((uint64_t)&v13, (uint64_t)v8, v7);
  return v10;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetDirectlyDerivedTypes@<X0>(pxrInternal__aapl__pxrReserved__::TfType *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v11;
  int v12;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v11 = Instance;
  v12 = -1;
  sub_20BECED94((uint64_t)&v11, a2, a3);
  v7 = *(_QWORD *)this;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_20BEF2C88(a4, *(const void **)(v7 + 80), *(_QWORD *)(v7 + 88), (uint64_t)(*(_QWORD *)(v7 + 88) - *(_QWORD *)(v7 + 80)) >> 3);
  return sub_20BECC0B0((uint64_t)&v11, v8, v9);
}

void sub_20BEEC7F0(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetAllDerivedTypes(uint64_t *a1, uint64_t **a2, char *a3)
{
  unint64_t Instance;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v14 = Instance;
  v15 = -1;
  sub_20BECED94((uint64_t)&v14, (uint64_t)a2, a3);
  v6 = *a1;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  sub_20BEF2C88(&v11, *(const void **)(v6 + 80), *(_QWORD *)(v6 + 88), (uint64_t)(*(_QWORD *)(v6 + 88) - *(_QWORD *)(v6 + 80)) >> 3);
  while (1)
  {
    v8 = (uint64_t)v12;
    if (v11 == v12)
      break;
    v10 = *((_QWORD *)v12 - 1);
    v12 -= 8;
    sub_20BEF2D00((uint64_t)&v11, (uint64_t)v12, *(char **)(v10 + 80), *(char **)(v10 + 88), (uint64_t)(*(_QWORD *)(v10 + 88) - *(_QWORD *)(v10 + 80)) >> 3);
    sub_20BEB968C(a2, (unint64_t *)&v10, &v10);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  return sub_20BECC0B0((uint64_t)&v14, v8, v7);
}

void sub_20BEEC8D8(_Unwind_Exception *a1, uint64_t a2, char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_20BECC0B0((uint64_t)&a13, a2, a3);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(pxrInternal__aapl__pxrReserved__::TfType *a1, void **a2, char *a3)
{
  unint64_t Instance;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void ***v70;
  char *v71;
  char *v72;
  int64_t v73;
  const char *v74;
  __int128 v75;
  unint64_t v76;
  pxrInternal__aapl__pxrReserved__::TfType *v77[2];
  __int128 __p;
  uint64_t v79;
  const char *v80;
  char v81;
  _OWORD v82[2];

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*(_QWORD *)a1 == *(_QWORD *)(Instance + 184))
  {
    *(_QWORD *)&__p = "tf/type.cpp";
    *((_QWORD *)&__p + 1) = "GetAllAncestorTypes";
    v79 = 710;
    v80 = "void pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(vector<TfType> *) const";
    v81 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot ask for ancestor types of Unknown type");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes(a1, (uint64_t)a2, a3, v77);
    v6 = v77[1] - v77[0];
    if ((pxrInternal__aapl__pxrReserved__::TfType *)(v77[1] - v77[0]) > (pxrInternal__aapl__pxrReserved__::TfType *)0xF)
    {
      v75 = 0uLL;
      v76 = 0;
      sub_20BEECFE8((uint64_t *)&v75, (v6 >> 3) + 2);
      __p = 0uLL;
      v79 = 0;
      sub_20BEED098((uint64_t *)&v75, (uint64_t)&__p);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v10 = *((_QWORD *)&v75 + 1);
      v11 = *(_QWORD **)(*((_QWORD *)&v75 + 1) - 16);
      v12 = *(_QWORD *)(*((_QWORD *)&v75 + 1) - 8);
      if ((unint64_t)v11 >= v12)
      {
        v19 = (void **)(*((_QWORD *)&v75 + 1) - 24);
        v20 = *(_QWORD *)(*((_QWORD *)&v75 + 1) - 24);
        v21 = ((uint64_t)v11 - v20) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_20BDDF694();
        v22 = v12 - v20;
        v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)sub_20BDDF6A8(*((_QWORD *)&v75 + 1) - 8, v24);
        else
          v25 = 0;
        v31 = &v25[8 * v21];
        v32 = &v25[8 * v24];
        *(_QWORD *)v31 = *(_QWORD *)a1;
        v13 = v31 + 8;
        v34 = *(char **)(v10 - 24);
        v33 = *(char **)(v10 - 16);
        if (v33 != v34)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v31 - 1) = v35;
            v31 -= 8;
          }
          while (v33 != v34);
          v33 = (char *)*v19;
        }
        *(_QWORD *)(v10 - 24) = v31;
        *(_QWORD *)(v10 - 16) = v13;
        *(_QWORD *)(v10 - 8) = v32;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v11 = *(_QWORD *)a1;
        v13 = v11 + 1;
      }
      *(_QWORD *)(v10 - 16) = v13;
      v36 = (_QWORD *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1) >= v76)
      {
        v37 = sub_20BEF3118((uint64_t *)&v75, (uint64_t)v77);
      }
      else
      {
        **((_QWORD **)&v75 + 1) = 0;
        v36[1] = 0;
        v36[2] = 0;
        sub_20BEF2C88(v36, v77[0], (uint64_t)v77[1], (v77[1] - v77[0]) >> 3);
        v37 = (uint64_t)(v36 + 3);
      }
      *((_QWORD *)&v75 + 1) = v37;
      v82[0] = *(_OWORD *)v77;
      while (*(_QWORD *)&v82[0] != *((_QWORD *)&v82[0] + 1))
      {
        __p = 0uLL;
        v79 = 0;
        sub_20BEED098((uint64_t *)&v75, (uint64_t)&__p);
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        v38 = *((_QWORD *)&v75 + 1);
        v39 = sub_20BEED1D4(v82);
        pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(*v39, v38 - 24);
        sub_20BEED25C(v82);
      }
      while (1)
      {
        v40 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
        if (!v40)
          v40 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
        v41 = *(_QWORD *)(v40 + 184);
        __p = v75;
        if ((_QWORD)v75 == *((_QWORD *)&v75 + 1))
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          do
          {
            v43 = sub_20BEF032C(&__p);
            if (*(_QWORD *)*v43 != *(_QWORD *)(*v43 + 8))
            {
              v41 = **(_QWORD **)*sub_20BEF032C(&__p);
              v45 = *((_QWORD *)&v75 + 1);
              v44 = v75;
              v82[0] = v75;
              while (v44 != v45)
              {
                v46 = sub_20BEF032C(v82);
                if (*(_QWORD *)(*v46 + 8) - *(_QWORD *)*v46 >= 0x10uLL)
                {
                  v47 = *(_QWORD *)*sub_20BEF032C(v82);
                  v48 = sub_20BEF032C(v82);
                  v49 = (_QWORD *)(v47 + 8);
                  v50 = *(_QWORD **)(*v48 + 8);
                  if (v49 != v50)
                  {
                    while (*v49 != v41)
                    {
                      if (++v49 == v50)
                      {
                        v49 = *(_QWORD **)(*v48 + 8);
                        break;
                      }
                    }
                  }
                  if (v49 != *(_QWORD **)(*sub_20BEF032C(v82) + 8))
                  {
                    v51 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
                    if (!v51)
                      v51 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
                    v41 = *(_QWORD *)(v51 + 184);
                    break;
                  }
                }
                sub_20BEF03B4(v82);
                v45 = *((_QWORD *)&v82[0] + 1);
                v44 = *(_QWORD *)&v82[0];
              }
              v52 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
              if (!v52)
                v52 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
              v42 = 1;
              if (v41 != *(_QWORD *)(v52 + 184))
                break;
            }
            sub_20BEF03B4(&__p);
          }
          while ((_QWORD)__p != *((_QWORD *)&__p + 1));
        }
        v53 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
        if (!v53)
          v53 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
        if (v41 == *(_QWORD *)(v53 + 184))
          break;
        v55 = a2[1];
        v54 = (unint64_t)a2[2];
        if ((unint64_t)v55 >= v54)
        {
          v57 = ((char *)v55 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v57 + 1) >> 61)
            sub_20BDDF694();
          v58 = v54 - (_QWORD)*a2;
          v59 = v58 >> 2;
          if (v58 >> 2 <= (unint64_t)(v57 + 1))
            v59 = v57 + 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
            v60 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v60 = v59;
          if (v60)
            v61 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v60);
          else
            v61 = 0;
          v62 = &v61[8 * v57];
          *(_QWORD *)v62 = v41;
          v56 = v62 + 8;
          v64 = (char *)*a2;
          v63 = (char *)a2[1];
          if (v63 != *a2)
          {
            do
            {
              v65 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *((_QWORD *)v62 - 1) = v65;
              v62 -= 8;
            }
            while (v63 != v64);
            v63 = (char *)*a2;
          }
          *a2 = v62;
          a2[1] = v56;
          a2[2] = &v61[8 * v60];
          if (v63)
            operator delete(v63);
        }
        else
        {
          *v55 = v41;
          v56 = v55 + 1;
        }
        a2[1] = v56;
        v67 = *((_QWORD *)&v75 + 1);
        v66 = v75;
        __p = v75;
        while (v66 != v67)
        {
          v68 = sub_20BEF032C(&__p);
          if (*(_QWORD *)*v68 != *(_QWORD *)(*v68 + 8) && **(_QWORD **)*sub_20BEF032C(&__p) == v41)
          {
            v69 = *sub_20BEF032C(&__p);
            v70 = (void ***)sub_20BEF032C(&__p);
            v71 = (char *)**v70;
            v72 = *(char **)(v69 + 8);
            v73 = v72 - (v71 + 8);
            if (v72 != v71 + 8)
              memmove(**v70, v71 + 8, v72 - (v71 + 8));
            *(_QWORD *)(v69 + 8) = &v71[v73];
          }
          sub_20BEF03B4(&__p);
          v67 = *((_QWORD *)&__p + 1);
          v66 = __p;
        }
      }
      if ((v42 & 1) != 0)
      {
        *(_QWORD *)&__p = "tf/type.cpp";
        *((_QWORD *)&__p + 1) = "GetAllAncestorTypes";
        v79 = 757;
        v80 = "void pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(vector<TfType> *) const";
        v81 = 0;
        v74 = (const char *)(*(_QWORD *)a1 + 8);
        if (*(char *)(*(_QWORD *)a1 + 31) < 0)
          v74 = *(const char **)v74;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot resolve ancestor classes for '%s' because the inheritance hierarchy is inconsistent.  Please check that multiply-inherited types are inherited in the same order throughout the inherited hierarchy.", v74);
      }
      *(_QWORD *)&__p = &v75;
      sub_20BED6154((void ***)&__p);
    }
    else
    {
      v7 = (unint64_t)a2[2];
      v8 = a2[1];
      if ((unint64_t)v8 >= v7)
      {
        v14 = ((char *)v8 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_20BDDF694();
        v15 = v7 - (_QWORD)*a2;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v17);
        else
          v18 = 0;
        v26 = &v18[8 * v14];
        v27 = &v18[8 * v17];
        *(_QWORD *)v26 = *(_QWORD *)a1;
        v9 = v26 + 8;
        v29 = (char *)*a2;
        v28 = (char *)a2[1];
        if (v28 != *a2)
        {
          do
          {
            v30 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *((_QWORD *)v26 - 1) = v30;
            v26 -= 8;
          }
          while (v28 != v29);
          v28 = (char *)*a2;
        }
        *a2 = v26;
        a2[1] = v9;
        a2[2] = v27;
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v8 = *(_QWORD *)a1;
        v9 = v8 + 1;
      }
      a2[1] = v9;
      if (v6 == 8)
        pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(v77[0], a2);
    }
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
  }
}

void sub_20BEECF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 88) = &a10;
  sub_20BED6154((void ***)(v17 - 88));
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BEECFE8(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDE4FF4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_20BEF2FD0(a1, v7);
    return sub_20BED65DC((uint64_t)v7);
  }
  return result;
}

void sub_20BEED084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED65DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEED098(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_20BDE4FF4(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_20BEF2FD0(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_20BED65DC((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20BEED1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED65DC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEED1D4(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fType>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

_QWORD *sub_20BEED25C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfType>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_IsAImplNoLock(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  do
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 == a2)
      return 1;
    a1 = *(char **)(v4 + 56);
    v5 = *(char **)(v4 + 64);
  }
  while (v5 - a1 == 8);
  if (v5 == a1)
    return 0;
  v6 = ((v5 - a1) >> 3) - 1;
  do
  {
    v7 = v6;
    result = pxrInternal__aapl__pxrReserved__::TfType::_IsAImplNoLock(a1, a2);
    if ((result & 1) != 0)
      break;
    v6 = v7 - 1;
    a1 += 8;
  }
  while (v7);
  return result;
}

unint64_t *pxrInternal__aapl__pxrReserved__::TfType::Declare(__int128 *a1)
{
  char *v2;
  uint64_t Instance;
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _QWORD v18[4];
  char v19;
  int v20;

  sub_20BEB59B0((uint64_t)&v16, (uint64_t)"Tf", (uint64_t)"TfType::Declare");
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v6 = *(unint64_t **)pxrInternal__aapl__pxrReserved__::TfType::FindDerivedByName(*(uint64_t **)(Instance + 192), (uint64_t)a1, v2);
  v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*(unint64_t **)(v7 + 184) == v6)
  {
    v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v8)
      v8 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    v14 = v8;
    v15 = -1;
    sub_20BECED08((uint64_t)&v14, v4, v5);
    v6 = (unint64_t *)sub_20BEEB8D8(v8, a1);
    if (atomic_load(v6 + 5))
    {
      v18[0] = "tf/type.cpp";
      v18[1] = "Declare";
      v18[2] = 839;
      v18[3] = "static const TfType &pxrInternal__aapl__pxrReserved__::TfType::Declare(const string &)";
      v19 = 0;
      v20 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v18, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "!t._info->IsDefined()");
    }
    sub_20BECC0B0((uint64_t)&v14, v9, v10);
  }
  while (v17--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
  return v6;
}

void sub_20BEED4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfType::Declare(__int128 *a1, char **a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  const char *v11;
  uint64_t Instance;
  const char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t i;
  _QWORD *v39;
  unint64_t v40;
  void *v42[2];
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *__p;
  const char *v50;
  uint64_t v51;
  const char *v52;
  unint64_t *v53;
  int v54;
  _BYTE v55[96];
  uint64_t v56;
  int v57;

  sub_20BEB59B0((uint64_t)&v56, (uint64_t)"Tf", (uint64_t)"TfType::Declare");
  __p = "tf/type.cpp";
  v50 = "Declare";
  v51 = 850;
  v52 = "static const TfType &pxrInternal__aapl__pxrReserved__::TfType::Declare(const string &, const vector<TfType> &, D"
        "efinitionCallback)";
  LOBYTE(v53) = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v55, a1, &__p);
  v5 = pxrInternal__aapl__pxrReserved__::TfType::Declare(a1);
  v8 = (uint64_t *)v5;
  v10 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    while (*(_QWORD *)v10 != *v5)
    {
      v10 += 8;
      if (v10 == v9)
      {
        v10 = a2[1];
        break;
      }
    }
  }
  if (v10 != v9)
  {
    __p = "tf/type.cpp";
    v50 = "Declare";
    v51 = 862;
    v52 = "static const TfType &pxrInternal__aapl__pxrReserved__::TfType::Declare(const string &, const vector<TfType> &,"
          " DefinitionCallback)";
    LOBYTE(v53) = 0;
    v54 = 4;
    if (*((char *)a1 + 23) >= 0)
      v11 = (const char *)a1;
    else
      v11 = *(const char **)a1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"TfType '%s' declares itself as a base.", v11);
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v44 = Instance;
  v45 = -1;
  sub_20BECED08((uint64_t)&v44, v6, v7);
  v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v15)
    v15 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v16 = *(_QWORD *)(v15 + 184);
  if (*v8 == v16)
    goto LABEL_26;
  v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v17)
    v17 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v16 = *v8;
  if (*v8 == **(_QWORD **)(v17 + 192))
  {
LABEL_26:
    v22 = (_QWORD *)(v16 + 8);
    if (*(char *)(v16 + 31) < 0)
      v22 = (_QWORD *)*v22;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot declare the type '%s'", v13, v14, v22);
    v23 = v47;
    if (v47 < v48)
      goto LABEL_29;
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v46) >> 3);
    v25 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    if (0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3) > v25)
      v25 = 0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v46) >> 3) >= 0x555555555555555)
      v26 = 0xAAAAAAAAAAAAAAALL;
    else
      v26 = v25;
    v53 = &v48;
    if (!v26)
    {
      v30 = 0;
LABEL_58:
      v31 = &v30[24 * v24];
      __p = v30;
      v50 = v31;
      v52 = &v30[24 * v26];
      *((_QWORD *)v31 + 2) = v43;
      *(_OWORD *)v31 = *(_OWORD *)v42;
      v51 = (uint64_t)(v31 + 24);
      sub_20BDF34C0(&v46, &__p);
      v32 = v47;
      sub_20BDF3648((uint64_t)&__p);
      v47 = v32;
      goto LABEL_59;
    }
    goto LABEL_83;
  }
  v18 = *a2;
  v19 = a2[1];
  if (*a2 == v19)
    goto LABEL_38;
  v20 = *(_QWORD **)(v16 + 56);
  if (*(_QWORD *)(v16 + 64) - (_QWORD)v20 == 8)
  {
    v21 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v21)
      v21 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (*v20 != **(_QWORD **)(v21 + 192))
    {
      v18 = *a2;
      v19 = a2[1];
      goto LABEL_24;
    }
    v39 = (_QWORD *)(*v8 + 8);
    if (*(char *)(*v8 + 31) < 0)
      v39 = (_QWORD *)*v39;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type '%s' has been declared to have 0 bases, and therefore inherits directly from the root type.  Cannot add bases.", v13, v14, v39);
    v23 = v47;
    if (v47 < v48)
      goto LABEL_29;
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v46) >> 3);
    v40 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    if (0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3) > v40)
      v40 = 0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v46) >> 3) >= 0x555555555555555)
      v26 = 0xAAAAAAAAAAAAAAALL;
    else
      v26 = v40;
    v53 = &v48;
    if (!v26)
    {
      v30 = 0;
      goto LABEL_58;
    }
LABEL_83:
    v30 = (char *)sub_20BDE4FF4((uint64_t)&v48, v26);
    goto LABEL_58;
  }
LABEL_24:
  if (v18 != v19)
  {
    pxrInternal__aapl__pxrReserved__::TfType::_AddBasesNoLock(v8, a2, (uint64_t)&v46);
    goto LABEL_43;
  }
LABEL_38:
  if (*(_QWORD *)(v16 + 56) == *(_QWORD *)(v16 + 64))
  {
    v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v27)
      v27 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    sub_20BEF322C(&__p, 1uLL, *(_QWORD **)(v27 + 192));
    pxrInternal__aapl__pxrReserved__::TfType::_AddBasesNoLock(v8, (char **)&__p, (uint64_t)&v46);
    if (__p)
    {
      v50 = (const char *)__p;
      operator delete(__p);
    }
  }
LABEL_43:
  if (a3)
  {
    if (*(_QWORD *)(*v8 + 32))
    {
      if (*((char *)a1 + 23) >= 0)
        v28 = (uint64_t *)a1;
      else
        v28 = *(uint64_t **)a1;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"TfType '%s' has already had its definitionCallback set; ignoring 2nd declaration",
        v13,
        v14,
        v28);
      v23 = v47;
      if (v47 >= v48)
      {
        v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v46) >> 3);
        v29 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        if (0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3) > v29)
          v29 = 0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v46) >> 3) >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v29;
        v53 = &v48;
        if (!v26)
        {
          v30 = 0;
          goto LABEL_58;
        }
        goto LABEL_83;
      }
LABEL_29:
      *(_QWORD *)(v23 + 16) = v43;
      *(_OWORD *)v23 = *(_OWORD *)v42;
      v47 = v23 + 24;
LABEL_59:
      v33 = 1;
      v34 = 1;
      goto LABEL_60;
    }
    *(_QWORD *)(*v8 + 32) = a3;
  }
  if (*(_BYTE *)(Instance + 200))
  {
    v33 = 1;
    v34 = 0;
    if (!*(_BYTE *)(*v8 + 242))
    {
      *(_BYTE *)(*v8 + 242) = 1;
      v33 = 0;
    }
  }
  else
  {
    v34 = 0;
    v33 = 1;
  }
LABEL_60:
  sub_20BECC0B0((uint64_t)&v44, (uint64_t)v13, v14);
  if (((v33 | v34) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice::TfTypeWasDeclaredNotice(&__p, *v8);
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p);
    pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice::~TfTypeWasDeclaredNotice((pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice *)&__p);
  }
  v35 = v46;
  for (i = v47; v35 != i; v35 += 24)
  {
    __p = "tf/type.cpp";
    v50 = "Declare";
    v51 = 929;
    v52 = "static const TfType &pxrInternal__aapl__pxrReserved__::TfType::Declare(const string &, const vector<TfType> &,"
          " DefinitionCallback)";
    LOBYTE(v53) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1);
  }
  __p = &v46;
  sub_20BDE5038((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v55);
  while (v57--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v56);
  return v8;
}

void sub_20BEEDB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v31;
  char *v32;

  sub_20BDF3648((uint64_t)&a23);
  if (a17 < 0)
    operator delete(__p);
  sub_20BECC0B0((uint64_t)&a18, v31, v32);
  __p = &a20;
  sub_20BDE5038((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a29);
  sub_20BEB24F4(v29 - 104);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfType::_AddBasesNoLock(uint64_t *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t *i;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  _QWORD *v23;
  std::string *v24;
  std::string *v25;
  unint64_t v26;
  unint64_t v27;
  std::string::size_type size;
  const std::string::value_type *v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t Instance;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *__p[2];
  uint64_t v92;
  std::string v93;
  std::string v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;

  v89 = *a1;
  v5 = *(_QWORD *)(*a1 + 56);
  v6 = *a2;
  v90 = *(_QWORD *)(*a1 + 64);
  if (v5 != v90)
  {
    i = a1;
    v88 = a3 + 16;
    while (1)
    {
      v9 = *a2;
      v8 = a2[1];
      if (*a2 == v8)
        break;
      v10 = *a2;
      while (*(_QWORD *)v10 != *(_QWORD *)v5)
      {
        v10 += 8;
        if (v10 == v8)
        {
          v10 = a2[1];
          break;
        }
      }
      if (v10 == v8)
      {
        memset(&v94, 0, sizeof(v94));
        do
        {
          size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v94.__r_.__value_.__l.__size_;
          if (size)
            v29 = ", ";
          else
            v29 = "";
          std::string::append(&v94, v29);
          v30 = *(char *)(*(_QWORD *)v9 + 31);
          if (v30 >= 0)
            v31 = (const std::string::value_type *)(*(_QWORD *)v9 + 8);
          else
            v31 = *(const std::string::value_type **)(*(_QWORD *)v9 + 8);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(*(_QWORD *)v9 + 31);
          else
            v32 = *(_QWORD *)(*(_QWORD *)v9 + 16);
          std::string::append(&v94, v31, v32);
          v9 += 8;
        }
        while (v9 != v8);
        goto LABEL_59;
      }
      if (v10 < v6)
      {
        memset(&v94, 0, sizeof(v94));
        memset(&v93, 0, sizeof(v93));
        v11 = *(_QWORD *)(v89 + 56);
        v12 = *(_QWORD *)(v89 + 64);
        if (v11 != v12)
        {
          do
          {
            v13 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
            if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v13 = v94.__r_.__value_.__l.__size_;
            if (v13)
              v14 = ", ";
            else
              v14 = "";
            std::string::append(&v94, v14);
            v15 = *(char *)(*(_QWORD *)v11 + 31);
            if (v15 >= 0)
              v16 = (const std::string::value_type *)(*(_QWORD *)v11 + 8);
            else
              v16 = *(const std::string::value_type **)(*(_QWORD *)v11 + 8);
            if (v15 >= 0)
              v17 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
            else
              v17 = *(_QWORD *)(*(_QWORD *)v11 + 16);
            std::string::append(&v94, v16, v17);
            v11 += 8;
          }
          while (v11 != v12);
          v9 = *a2;
          v8 = a2[1];
        }
        for (i = a1; v9 != v8; v9 += 8)
        {
          v18 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v18 = v93.__r_.__value_.__l.__size_;
          if (v18)
            v19 = ", ";
          else
            v19 = "";
          std::string::append(&v93, v19);
          v20 = *(char *)(*(_QWORD *)v9 + 31);
          if (v20 >= 0)
            v21 = (const std::string::value_type *)(*(_QWORD *)v9 + 8);
          else
            v21 = *(const std::string::value_type **)(*(_QWORD *)v9 + 8);
          if (v20 >= 0)
            v22 = *(unsigned __int8 *)(*(_QWORD *)v9 + 31);
          else
            v22 = *(_QWORD *)(*(_QWORD *)v9 + 16);
          std::string::append(&v93, v21, v22);
        }
        v23 = (_QWORD *)(*a1 + 8);
        if (*(char *)(*a1 + 31) < 0)
          v23 = (_QWORD *)*v23;
        v24 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v94;
        v25 = &v93;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v25 = (std::string *)v93.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Specified base type order differs for %s: had (%s), now (%s).  If this is a type declared in a plugin, check that the plugin metadata is correct.", (const char *)a2, (char *)a3, v23, v24, v25);
        v27 = *(_QWORD *)(a3 + 8);
        v26 = *(_QWORD *)(a3 + 16);
        if (v27 >= v26)
        {
          v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(_QWORD *)a3) >> 3);
          v49 = v48 + 1;
          if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a3) >> 3);
          if (2 * v50 > v49)
            v49 = 2 * v50;
          if (v50 >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v49;
          v99 = v88;
          if (v51)
            v52 = (char *)sub_20BDE4FF4(v88, v51);
          else
            v52 = 0;
          v53 = &v52[24 * v48];
          v95 = v52;
          v96 = v53;
          v98 = &v52[24 * v51];
          *((_QWORD *)v53 + 2) = v92;
          *(_OWORD *)v53 = *(_OWORD *)__p;
          v92 = 0;
          *(_OWORD *)__p = 0uLL;
          v97 = v53 + 24;
          sub_20BDF34C0((uint64_t *)a3, &v95);
          v54 = *(_QWORD *)(a3 + 8);
          sub_20BDF3648((uint64_t)&v95);
          *(_QWORD *)(a3 + 8) = v54;
        }
        else
        {
          *(_QWORD *)(v27 + 16) = v92;
          *(_OWORD *)v27 = *(_OWORD *)__p;
          *(_QWORD *)(a3 + 8) = v27 + 24;
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
      }
      v6 = v10;
LABEL_95:
      v5 += 8;
      if (v5 == v90)
      {
        v6 = *a2;
        v5 = *(_QWORD *)(v89 + 56);
        v55 = *(_QWORD *)(v89 + 64);
        goto LABEL_98;
      }
    }
    memset(&v94, 0, sizeof(v94));
LABEL_59:
    v33 = (_QWORD *)(*i + 8);
    if (*(char *)(*i + 31) < 0)
      v33 = (_QWORD *)*v33;
    v34 = (_QWORD *)(*(_QWORD *)v5 + 8);
    if (*(char *)(*(_QWORD *)v5 + 31) < 0)
      v34 = (_QWORD *)*v34;
    v35 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v94.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"TfType '%s' was previously declared to have '%s' as a base, but a subsequent declaration does not include this as a base.  The newly given bases were: (%s).  If this is a type declared in a plugin, check that the plugin metadata is correct.", (const char *)a2, (char *)a3, v33, v34, v35);
    v37 = *(_QWORD *)(a3 + 8);
    v36 = *(_QWORD *)(a3 + 16);
    if (v37 >= v36)
    {
      v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *(_QWORD *)a3) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *(_QWORD *)a3) >> 3);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x555555555555555)
        v42 = 0xAAAAAAAAAAAAAAALL;
      else
        v42 = v40;
      v99 = v88;
      if (v42)
        v43 = (char *)sub_20BDE4FF4(v88, v42);
      else
        v43 = 0;
      v44 = &v43[24 * v39];
      v95 = v43;
      v96 = v44;
      v98 = &v43[24 * v42];
      v45 = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
      *((_QWORD *)v44 + 2) = *((_QWORD *)&v93.__r_.__value_.__l + 2);
      *(_OWORD *)v44 = v45;
      memset(&v93, 0, sizeof(v93));
      v97 = v44 + 24;
      sub_20BDF34C0((uint64_t *)a3, &v95);
      v46 = *(_QWORD *)(a3 + 8);
      sub_20BDF3648((uint64_t)&v95);
      v47 = SHIBYTE(v93.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a3 + 8) = v46;
      if (v47 < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
    }
    else
    {
      v38 = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
      *(_QWORD *)(v37 + 16) = *((_QWORD *)&v93.__r_.__value_.__l + 2);
      *(_OWORD *)v37 = v38;
      *(_QWORD *)(a3 + 8) = v37 + 24;
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    goto LABEL_95;
  }
  v55 = *(_QWORD *)(*a1 + 56);
LABEL_98:
  v56 = a2[1];
  if (v56 - v6 > (unint64_t)(v55 - v5))
  {
    for (; v6 != v56; v6 += 8)
    {
      Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      if (!Instance)
        Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      v58 = *(_QWORD **)v6;
      if (*(_QWORD *)v6 == *(_QWORD *)(Instance + 184))
      {
        sub_20BDDC0E4(&v94, "Specified base type is unknown, skipping.");
        v65 = *(_QWORD *)(a3 + 8);
        v64 = *(_QWORD *)(a3 + 16);
        if (v65 >= v64)
        {
          v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *(_QWORD *)a3) >> 3);
          v68 = v67 + 1;
          if (v67 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *(_QWORD *)a3) >> 3);
          if (2 * v69 > v68)
            v68 = 2 * v69;
          if (v69 >= 0x555555555555555)
            v70 = 0xAAAAAAAAAAAAAAALL;
          else
            v70 = v68;
          v99 = a3 + 16;
          if (v70)
            v71 = (char *)sub_20BDE4FF4(a3 + 16, v70);
          else
            v71 = 0;
          v78 = &v71[24 * v67];
          v95 = v71;
          v96 = v78;
          v98 = &v71[24 * v70];
          v79 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
          *((_QWORD *)v78 + 2) = *((_QWORD *)&v94.__r_.__value_.__l + 2);
          *(_OWORD *)v78 = v79;
          memset(&v94, 0, sizeof(v94));
          v97 = v78 + 24;
          sub_20BDF34C0((uint64_t *)a3, &v95);
          v80 = *(_QWORD *)(a3 + 8);
          sub_20BDF3648((uint64_t)&v95);
          v81 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a3 + 8) = v80;
          if (v81 < 0)
            operator delete(v94.__r_.__value_.__l.__data_);
        }
        else
        {
          v66 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
          *(_QWORD *)(v65 + 16) = *((_QWORD *)&v94.__r_.__value_.__l + 2);
          *(_OWORD *)v65 = v66;
          *(_QWORD *)(a3 + 8) = v65 + 24;
        }
      }
      else
      {
        v60 = *(_QWORD **)(v89 + 56);
        v59 = *(_QWORD **)(v89 + 64);
        if (v60 != v59)
        {
          while ((_QWORD *)*v60 != v58)
          {
            if (++v60 == v59)
            {
              v60 = *(_QWORD **)(v89 + 64);
              break;
            }
          }
        }
        if (v60 == v59)
        {
          v61 = v58[12];
          v62 = (_QWORD *)v58[11];
          if ((unint64_t)v62 >= v61)
          {
            v72 = v58[10];
            v73 = ((uint64_t)v62 - v72) >> 3;
            if ((unint64_t)(v73 + 1) >> 61)
              sub_20BDDF694();
            v74 = v61 - v72;
            v75 = v74 >> 2;
            if (v74 >> 2 <= (unint64_t)(v73 + 1))
              v75 = v73 + 1;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v75;
            if (v76)
              v77 = (char *)sub_20BDDF6A8((uint64_t)(v58 + 12), v76);
            else
              v77 = 0;
            v82 = &v77[8 * v73];
            *(_QWORD *)v82 = *a1;
            v63 = v82 + 8;
            v84 = (char *)v58[10];
            v83 = (char *)v58[11];
            if (v83 != v84)
            {
              do
              {
                v85 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *((_QWORD *)v82 - 1) = v85;
                v82 -= 8;
              }
              while (v83 != v84);
              v83 = (char *)v58[10];
            }
            v58[10] = v82;
            v58[11] = v63;
            v58[12] = &v77[8 * v76];
            if (v83)
              operator delete(v83);
          }
          else
          {
            *v62 = *a1;
            v63 = v62 + 1;
          }
          v58[11] = v63;
        }
      }
    }
    v86 = (char *)(*a1 + 56);
    if (v86 != (char *)a2)
      sub_20BDDF7E4(v86, *a2, (uint64_t)a2[1], (a2[1] - *a2) >> 3);
  }
}

void sub_20BEEE3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType(pxrInternal__aapl__pxrReserved__::TfType *this, std::type_info *a2, char *a3, char a4, char a5)
{
  uint64_t Instance;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[4];
  char v19;
  uint64_t v20;
  int v21;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v20 = Instance;
  v21 = -1;
  sub_20BECED08((uint64_t)&v20, (uint64_t)a2, a3);
  if (atomic_load((unint64_t *)(*(_QWORD *)this + 40)))
  {
    sub_20BECC0B0((uint64_t)&v20, v11, v12);
    v18[0] = "tf/type.cpp";
    v18[1] = "_DefineCppType";
    v18[2] = 963;
    v18[3] = "void pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType(const std::type_info &, size_t, BOOL, BOOL) const";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((int)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"TfType '%s' already has a defined C++ type; cannot redefine");
  }
  else
  {
    v16 = *(_QWORD *)this;
    v18[0] = v16;
    atomic_store((unint64_t)a2, (unint64_t *)(v16 + 40));
    *(_QWORD *)(v16 + 48) = a3;
    *(_BYTE *)(v16 + 240) = a4;
    *(_BYTE *)(v16 + 241) = a5;
    sub_20BEEFB38(Instance + 64, a2, v18);
  }
  return sub_20BECC0B0((uint64_t)&v20, v14, v15);
}

void sub_20BEEE564(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20BECC0B0((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2, void *(*a3)(void *, BOOL))
{
  uint64_t Instance;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  int v10;
  void *(*v11)(void *, BOOL);

  v11 = a3;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v9 = Instance;
  v10 = -1;
  sub_20BECED08((uint64_t)&v9, (uint64_t)a2, (char *)a3);
  sub_20BEEE614(*(_QWORD **)this, (uint64_t)a2, (uint64_t *)&v11);
  return sub_20BECC0B0((uint64_t)&v9, v6, v7);
}

void sub_20BEEE5FC(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BECC0B0((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

void sub_20BEEE614(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;

  v6 = a1[27];
  v7 = (void **)(a1 + 26);
  if (v6 == a1[26])
  {
    v10 = (uint64_t *)a1[27];
LABEL_7:
    v11 = *a3;
    v12 = a1[28];
    if ((unint64_t)v10 >= v12)
    {
      v14 = ((uint64_t)v10 - v6) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        sub_20BDDF694();
      v16 = v12 - v6;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
        v18 = (char *)sub_20BDEA2F0((uint64_t)(a1 + 28), v17);
      else
        v18 = 0;
      v19 = (uint64_t *)&v18[16 * v14];
      v20 = &v18[16 * v17];
      *v19 = a2;
      v19[1] = v11;
      v13 = v19 + 2;
      v22 = (char *)a1[26];
      v21 = (char *)a1[27];
      if (v21 != v22)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v21 - 1);
          v19 -= 2;
          v21 -= 16;
        }
        while (v21 != v22);
        v21 = (char *)*v7;
      }
      a1[26] = v19;
      a1[27] = v13;
      a1[28] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v10 = a2;
      v10[1] = v11;
      v13 = v10 + 2;
    }
    a1[27] = v13;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v6 = a1[26];
    while (!sub_20BDE150C(a2, *(_QWORD *)(v6 + v8)))
    {
      ++v9;
      v6 = a1[26];
      v10 = (uint64_t *)a1[27];
      v8 += 16;
      if (v9 >= ((uint64_t)v10 - v6) >> 4)
        goto LABEL_7;
    }
    *(_QWORD *)((char *)*v7 + v8 + 8) = *a3;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::CastToAncestor(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t Instance;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (**v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (**v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v26;
  int v27;

  v3 = (uint64_t)a3;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*a1 == *(_QWORD *)(Instance + 184))
    return 0;
  v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*(_QWORD *)(v7 + 184) == a2)
    return 0;
  v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v26 = v8;
  v27 = -1;
  sub_20BECED94((uint64_t)&v26, a2, a3);
  v11 = *a1;
  if (v11 == a2)
  {
    v18 = v3;
  }
  else
  {
    v12 = MEMORY[0x24BEDB7C8];
    while (1)
    {
      v13 = *(_QWORD *)(v11 + 56);
      v14 = *(_QWORD *)(v11 + 64);
      if (v14 - v13 != 8)
        break;
      v15 = atomic_load((unint64_t *)(*(_QWORD *)v13 + 40));
      if (v15)
        v16 = v15;
      else
        v16 = v12;
      v17 = (uint64_t (**)(uint64_t, uint64_t))sub_20BEEE948(v11, v16);
      if (!v17)
        goto LABEL_28;
      v3 = (*v17)(v3, 1);
      v11 = **(_QWORD **)(v11 + 56);
      v18 = v3;
      if (v11 == a2)
        goto LABEL_29;
    }
    if (v14 == v13)
    {
LABEL_28:
      v18 = 0;
      goto LABEL_29;
    }
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = atomic_load((unint64_t *)(*(_QWORD *)(v13 + 8 * v20) + 40));
      v22 = v21 ? v21 : v12;
      v23 = (uint64_t (**)(uint64_t, uint64_t))sub_20BEEE948(v11, v22);
      if (v23)
      {
        v24 = (*v23)(v3, 1);
        v18 = pxrInternal__aapl__pxrReserved__::TfType::CastToAncestor(*(_QWORD *)(v11 + 56) + v19, a2, v24);
        if (v18)
          break;
      }
      ++v20;
      v13 = *(_QWORD *)(v11 + 56);
      v19 += 8;
      if (v20 >= (*(_QWORD *)(v11 + 64) - v13) >> 3)
        goto LABEL_28;
    }
  }
LABEL_29:
  sub_20BECC0B0((uint64_t)&v26, v9, v10);
  return v18;
}

void sub_20BEEE924(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEEE948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 208);
  v3 = *(_QWORD *)(a1 + 216) - v2;
  if (!v3)
    return 0;
  v4 = v3 >> 4;
  v5 = (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v4 <= 1)
    v6 = 1;
  else
    v6 = v4;
  for (i = v2 + 8; strcmp(v5, (const char *)(*(_QWORD *)(*(_QWORD *)(i - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL)); i += 16)
  {
    if (!--v6)
      return 0;
  }
  return i;
}

unint64_t *pxrInternal__aapl__pxrReserved__::TfType::CastFromAncestor(uint64_t *a1, uint64_t a2, char *a3)
{
  char *v3;
  unint64_t *v6;
  unint64_t Instance;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (**v18)(unint64_t *, _QWORD);
  __int128 v20;
  unint64_t v21;
  int v22;

  v3 = a3;
  v6 = &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*a1 == *(_QWORD *)(Instance + 184))
    return 0;
  v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (*(_QWORD *)(v8 + 184) == a2)
    return 0;
  if (*a1 != a2)
  {
    v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v9)
      v9 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    v21 = v9;
    v22 = -1;
    sub_20BECED94((uint64_t)&v21, a2, a3);
    v20 = *(_OWORD *)(*a1 + 56);
    v12 = MEMORY[0x24BEDB7C8];
    while (1)
    {
      v13 = v20;
      if ((_QWORD)v20 == *((_QWORD *)&v20 + 1))
        break;
      v14 = sub_20BEEEB50(&v20);
      v6 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfType::CastFromAncestor(*v14, a2, v3);
      if (v6)
      {
        v15 = *a1;
        v16 = atomic_load((unint64_t *)(*(_QWORD *)*sub_20BEEEB50(&v20) + 40));
        v17 = v16 ? v16 : v12;
        v18 = (uint64_t (**)(unint64_t *, _QWORD))sub_20BEEE948(v15, v17);
        if (v18)
        {
          v6 = (unint64_t *)(*v18)(v6, 0);
          break;
        }
      }
      sub_20BEEEBD8(&v20);
    }
    sub_20BECC0B0((uint64_t)&v21, v10, v11);
    if ((_QWORD)v13 == *((_QWORD *)&v13 + 1))
      return 0;
    else
      return v6;
  }
  return (unint64_t *)v3;
}

void sub_20BEEEB28(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BECC0B0((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEEEB50(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfType>"
            ">::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

_QWORD *sub_20BEEEBD8(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfType>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfType::SetFactory(uint64_t *a1, uint64_t *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v6 = *(_QWORD *)(Instance + 184);
  if (*a1 == v6)
    goto LABEL_13;
  v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v6 = *a1;
  if (*a1 == **(_QWORD **)(v7 + 192))
  {
LABEL_13:
    v18 = "tf/type.cpp";
    v19 = "SetFactory";
    v20 = 1131;
    v21 = "void pxrInternal__aapl__pxrReserved__::TfType::SetFactory(std::unique_ptr<FactoryBase>) const";
    v22 = 0;
    v13 = (const char *)(v6 + 8);
    if (*(char *)(v6 + 31) < 0)
      v13 = *(const char **)v13;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set factory of %s\n", v13);
  }
  else
  {
    v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v8)
      v8 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    v16 = v8;
    v17 = -1;
    sub_20BECED08((uint64_t)&v16, (uint64_t)a2, a3);
    v11 = *a1;
    if (*(_QWORD *)(*a1 + 104))
    {
      sub_20BECC0B0((uint64_t)&v16, v9, v10);
      v18 = "tf/type.cpp";
      v19 = "SetFactory";
      v20 = 1139;
      v21 = "void pxrInternal__aapl__pxrReserved__::TfType::SetFactory(std::unique_ptr<FactoryBase>) const";
      v22 = 0;
      v12 = (const char *)(*a1 + 8);
      if (*(char *)(*a1 + 31) < 0)
        v12 = *(const char **)v12;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot change the factory of %s\n", v12);
    }
    else
    {
      v14 = *a2;
      *a2 = 0;
      v15 = *(_QWORD *)(v11 + 104);
      *(_QWORD *)(v11 + 104) = v14;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    sub_20BECC0B0((uint64_t)&v16, v9, v10);
  }
}

void sub_20BEEEDEC(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BECC0B0((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t Instance;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v5 = *(_QWORD *)(Instance + 184);
  if (*(_QWORD *)this == v5)
    goto LABEL_10;
  v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6)
    v6 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this == **(_QWORD **)(v6 + 192))
  {
LABEL_10:
    v15 = "tf/type.cpp";
    v16 = "_GetFactory";
    v17 = 1150;
    v18 = "TfType::FactoryBase *pxrInternal__aapl__pxrReserved__::TfType::_GetFactory() const";
    v19 = 0;
    v13 = (const char *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0)
      v13 = *(const char **)v13;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot manufacture type %s", v13);
    return 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::_ExecuteDefinitionCallback(this, a2, a3);
    v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v9)
      v9 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    v15 = (char *)v9;
    LODWORD(v16) = -1;
    sub_20BECED94((uint64_t)&v15, v7, v8);
    v10 = *(_QWORD *)(*(_QWORD *)this + 104);
    sub_20BECC0B0((uint64_t)&v15, v11, v12);
  }
  return v10;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_ExecuteDefinitionCallback(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t Instance;
  uint64_t v5;
  char *v6;
  void (*v7)(_QWORD);
  unint64_t v9;
  int v10;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v9 = Instance;
  v10 = -1;
  sub_20BECED94((uint64_t)&v9, a2, a3);
  v7 = *(void (**)(_QWORD))(*(_QWORD *)this + 32);
  if (v7)
  {
    sub_20BECC0B0((uint64_t)&v9, v5, v6);
    v7(*(_QWORD *)this);
  }
  return sub_20BECC0B0((uint64_t)&v9, v5, v6);
}

void sub_20BEEEFA0(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEEEFB8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  char *v5;
  _QWORD v7[4];
  char v8;
  int v9;

  if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
  {
    v7[0] = "tf/bigRWMutex.h";
    v7[1] = "UpgradeToWriter";
    v7[2] = 171;
    v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::UpgradeToWriter()";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState >= 0");
  }
  sub_20BECC0B0(a1, a2, a3);
  sub_20BECED08(a1, v4, v5);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::TfType::AddAlias(uint64_t *a1, uint64_t a2, char *a3)
{
  unint64_t Instance;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;

  __p = 0;
  v17 = 0;
  v18 = 0;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v11 = (char *)Instance;
  LODWORD(v12) = -1;
  sub_20BECED08((uint64_t)&v11, a2, a3);
  sub_20BEEF16C(Instance, a2, *a1, (unsigned __int8 *)a3, (uint64_t)&__p);
  sub_20BECC0B0((uint64_t)&v11, v7, v8);
  v9 = HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = v17;
  if (v9)
  {
    v11 = "tf/type.cpp";
    v12 = "AddAlias";
    v13 = 1215;
    v14 = "void pxrInternal__aapl__pxrReserved__::TfType::AddAlias(TfType, const string &) const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1);
    v10 = HIBYTE(v18);
  }
  if (v10 < 0)
    operator delete(__p);
}

void sub_20BEEF130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BEEF16C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v10;
  unsigned __int8 *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  const char *v20;
  char *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a3;
  v10 = a2 + 112;
  if (*(_BYTE *)(a2 + 152))
  {
    v11 = sub_20BEC301C((_QWORD *)(a2 + 112), a4);
    if (v11)
    {
      v14 = *((_QWORD *)v11 + 5);
      if (v14 == a3)
        return;
      if ((a4[23] & 0x80u) == 0)
        v15 = (uint64_t *)a4;
      else
        v15 = *(uint64_t **)a4;
      v16 = (_QWORD *)(a2 + 8);
      if (*(char *)(a2 + 31) < 0)
        v16 = (_QWORD *)*v16;
      v17 = (_QWORD *)(v14 + 8);
      if (*(char *)(v14 + 31) < 0)
        v17 = (_QWORD *)*v17;
      v18 = (_QWORD *)(a3 + 8);
      if (*(char *)(a3 + 31) < 0)
        v18 = (_QWORD *)*v18;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set alias '%s' under '%s', because it is already set to '%s', not '%s'.", v12, v13, v15, v16, v17, v18);
      goto LABEL_22;
    }
  }
  v19 = sub_20BEC301C((_QWORD *)(a1 + 24), a4);
  if (v19 && pxrInternal__aapl__pxrReserved__::TfType::_IsAImplNoLock(*((char **)v19 + 5), *(_QWORD *)a2))
  {
    if ((a4[23] & 0x80u) == 0)
      v22 = (uint64_t *)a4;
    else
      v22 = *(uint64_t **)a4;
    v23 = (_QWORD *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0)
      v23 = (_QWORD *)*v23;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"There already is a type named '%s' derived from base type '%s'; cannot create "
                                          "an alias of the same name.",
      v20,
      v21,
      v22,
      v23);
LABEL_22:
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(_OWORD *)a5 = v28;
    *(_QWORD *)(a5 + 16) = v29;
    return;
  }
  if (!*(_BYTE *)(a2 + 152))
  {
    LODWORD(v28) = 0;
    sub_20BEF0434(v10, (int *)&v28);
  }
  *(_QWORD *)&v28 = a4;
  *((_QWORD *)sub_20BEC286C(v10, a4, (uint64_t)&unk_20CAC184C, (__int128 **)&v28) + 5) = a3;
  if (!*(_BYTE *)(a2 + 200))
  {
    LODWORD(v28) = 0;
    sub_20BEF0480(a2 + 160, (int *)&v28);
  }
  *(_QWORD *)&v28 = &v30;
  v24 = sub_20BEF05E8(a2 + 160, &v30, (uint64_t)&unk_20CAC184C, (_QWORD **)&v28);
  v25 = v24 + 3;
  v26 = v24[4];
  if (v26 >= v24[5])
  {
    v27 = sub_20BE4EE50(v25, (__int128 *)a4);
  }
  else
  {
    sub_20BE4EDF4(v25, (__int128 *)a4);
    v27 = v26 + 24;
  }
  v24[4] = v27;
}

BOOL pxrInternal__aapl__pxrReserved__::TfType::IsEnumType(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t Instance;
  int v5;
  uint64_t v6;
  char *v7;
  unint64_t v9;
  int v10;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v9 = Instance;
  v10 = -1;
  sub_20BECED94((uint64_t)&v9, a2, a3);
  v5 = *(unsigned __int8 *)(*(_QWORD *)this + 241);
  sub_20BECC0B0((uint64_t)&v9, v6, v7);
  return v5 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TfType::IsPlainOldDataType(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t Instance;
  int v5;
  uint64_t v6;
  char *v7;
  unint64_t v9;
  int v10;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v9 = Instance;
  v10 = -1;
  sub_20BECED94((uint64_t)&v9, a2, a3);
  v5 = *(unsigned __int8 *)(*(_QWORD *)this + 240);
  sub_20BECC0B0((uint64_t)&v9, v6, v7);
  return v5 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetSizeof(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t Instance;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v9;
  int v10;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v9 = Instance;
  v10 = -1;
  sub_20BECED94((uint64_t)&v9, a2, a3);
  v5 = *(_QWORD *)(*(_QWORD *)this + 48);
  sub_20BECC0B0((uint64_t)&v9, v6, v7);
  return v5;
}

uint64_t *sub_20BEEF49C()
{
  uint64_t *v0;
  unint64_t Instance;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  void *__p[2];
  char v49;

  sub_20BEF0894();
  sub_20BEF0994();
  sub_20BEF0A94();
  sub_20BEF0B94();
  sub_20BEF0C94();
  sub_20BEF0D94();
  sub_20BEF0E94();
  sub_20BEF0F94();
  sub_20BEF1094();
  sub_20BEF1194();
  v0 = sub_20BEF1294();
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v2 = **(_QWORD **)(Instance + 192);
  sub_20BDDC0E4(__p, "size_t");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v2, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  sub_20BEF1394();
  sub_20BEF1494();
  sub_20BEF1594();
  sub_20BEF1694();
  sub_20BEF1794();
  v3 = sub_20BEF1894();
  v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4)
    v4 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v5 = **(_QWORD **)(v4 + 192);
  sub_20BDDC0E4(__p, "vector<BOOL>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v3, v5, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v6 = sub_20BEF1994();
  v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v8 = **(_QWORD **)(v7 + 192);
  sub_20BDDC0E4(__p, "vector<char>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v6, v8, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v9 = sub_20BEF1A94();
  v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v11 = **(_QWORD **)(v10 + 192);
  sub_20BDDC0E4(__p, "vector<unsigned char>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v9, v11, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v12 = sub_20BEF1B94();
  v13 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v14 = **(_QWORD **)(v13 + 192);
  sub_20BDDC0E4(__p, "vector<short>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v12, v14, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v15 = sub_20BEF1C94();
  v16 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v16)
    v16 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v17 = **(_QWORD **)(v16 + 192);
  sub_20BDDC0E4(__p, "vector<unsigned short>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v15, v17, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v18 = sub_20BEF1D94();
  v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v19)
    v19 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v20 = **(_QWORD **)(v19 + 192);
  sub_20BDDC0E4(__p, "vector<int>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v18, v20, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v21 = sub_20BEF1E94();
  v22 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v22)
    v22 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v23 = **(_QWORD **)(v22 + 192);
  sub_20BDDC0E4(__p, "vector<unsigned int>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v21, v23, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v24 = sub_20BEF1F94();
  v25 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v25)
    v25 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v26 = **(_QWORD **)(v25 + 192);
  sub_20BDDC0E4(__p, "vector<long>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v24, v26, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v47 = *sub_20BEF2094();
  v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v27)
    v27 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v28 = **(_QWORD **)(v27 + 192);
  sub_20BDDC0E4(__p, "vector<unsigned long>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(&v47, v28, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v29 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v29)
    v29 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v30 = **(_QWORD **)(v29 + 192);
  sub_20BDDC0E4(__p, "vector<size_t>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(&v47, v30, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v31 = sub_20BEF2194();
  v32 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v32)
    v32 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v33 = **(_QWORD **)(v32 + 192);
  sub_20BDDC0E4(__p, "vector<long long>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v31, v33, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v34 = sub_20BEF2294();
  v35 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v35)
    v35 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v36 = **(_QWORD **)(v35 + 192);
  sub_20BDDC0E4(__p, "vector<unsigned long long>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v34, v36, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v37 = sub_20BEF2394();
  v38 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v38)
    v38 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v39 = **(_QWORD **)(v38 + 192);
  sub_20BDDC0E4(__p, "vector<float>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v37, v39, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v40 = sub_20BEF2494();
  v41 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v41)
    v41 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v42 = **(_QWORD **)(v41 + 192);
  sub_20BDDC0E4(__p, "vector<double>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v40, v42, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v43 = sub_20BEF2594();
  v44 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v44)
    v44 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  v45 = **(_QWORD **)(v44 + 192);
  sub_20BDDC0E4(__p, "vector<string>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v43, v45, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  return sub_20BEF2694();
}

void sub_20BEEFA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((v2 & 0x80u) == 0)
    v4 = *(_QWORD *)a2 + 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((v2 & 0x80u) == 0)
    v5 = v2;
  else
    v5 = v3;
  return sub_20BDDC1C8(a1, v4, v5);
}

{
  _QWORD *v3;
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD v17[8];
  __int128 v18[3];
  char v19;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"[(", 2);
  v4 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v4;
  v18[2] = *(_OWORD *)(a2 + 32);
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, v18);
  v6 = sub_20BDDC1C8(v5, (uint64_t)") (", 3);
  v7 = *(_OWORD *)(a2 + 128);
  v17[4] = *(_OWORD *)(a2 + 112);
  v17[5] = v7;
  v8 = *(_OWORD *)(a2 + 160);
  v17[6] = *(_OWORD *)(a2 + 144);
  v17[7] = v8;
  v9 = *(_OWORD *)(a2 + 64);
  v17[0] = *(_OWORD *)(a2 + 48);
  v17[1] = v9;
  v10 = *(_OWORD *)(a2 + 96);
  v17[2] = *(_OWORD *)(a2 + 80);
  v17[3] = v10;
  v11 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (double *)v17);
  v12 = sub_20BDDC1C8(v11, (uint64_t)") ", 2);
  if (*(_BYTE *)(a2 + 305))
    v13 = "true";
  else
    v13 = "false";
  if (*(_BYTE *)(a2 + 305))
    v14 = 4;
  else
    v14 = 5;
  v15 = sub_20BDDC1C8(v12, (uint64_t)v13, v14);
  v19 = 93;
  return sub_20BDDC1C8(v15, (uint64_t)&v19, 1);
}

{
  const char *v4;
  _QWORD *v5;
  const char *v6;

  if (*(_BYTE *)(a2 + 8))
    v4 = "[";
  else
    v4 = "(";
  sub_20BDDC1C8(a1, (uint64_t)v4, 1);
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(a1, *(double *)a2);
  sub_20BDDC1C8(v5, (uint64_t)", ", 2);
  pxrInternal__aapl__pxrReserved__::operator<<(a1, *(double *)(a2 + 16));
  if (*(_BYTE *)(a2 + 24))
    v6 = "]";
  else
    v6 = ")";
  sub_20BDDC1C8(a1, (uint64_t)v6, 1);
  return a1;
}

{
  _QWORD *v3;
  _QWORD *v4;
  double v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;
  uint64_t v13;
  float64x2_t v14;
  double v15;
  char v16;

  LOBYTE(v14.f64[0]) = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v14, 1);
  v4 = sub_20BDDC1C8(v3, (uint64_t)"point:", 6);
  v5 = *(double *)(a2 + 40) * 0.0 + *(double *)(a2 + 16);
  v14 = vaddq_f64(vmulq_f64(*(float64x2_t *)(a2 + 24), (float64x2_t)0), *(float64x2_t *)a2);
  v15 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v4, v14.f64);
  LOBYTE(v12) = 32;
  v7 = sub_20BDDC1C8(v6, (uint64_t)&v12, 1);
  v8 = sub_20BDDC1C8(v7, (uint64_t)"direction:", 10);
  v9 = *(_QWORD *)(a2 + 40);
  v12 = *(_OWORD *)(a2 + 24);
  v13 = v9;
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v8, (double *)&v12);
  v16 = 41;
  return sub_20BDDC1C8(v10, (uint64_t)&v16, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  double v5;
  double v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  _QWORD *v13;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  char v19;

  LOBYTE(v17.f64[0]) = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v17, 1);
  v4 = sub_20BDDC1C8(v3, (uint64_t)"point 1:", 8);
  v5 = *(double *)(a2 + 48) * 0.0;
  v6 = v5 * *(double *)(a2 + 40) + *(double *)(a2 + 16);
  v17 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 24), v5), *(float64x2_t *)a2);
  v18 = v6;
  v7 = pxrInternal__aapl__pxrReserved__::operator<<(v4, v17.f64);
  LOBYTE(v15) = 32;
  v8 = sub_20BDDC1C8(v7, (uint64_t)&v15, 1);
  v9 = sub_20BDDC1C8(v8, (uint64_t)"point 2:", 8);
  v10 = *(float64x2_t *)(a2 + 32);
  v11 = *(float64x2_t *)(a2 + 40);
  v10.f64[1] = *(float64_t *)(a2 + 48);
  v12 = vaddq_f64(vmulq_f64(v10, (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)), *(float64x2_t *)(a2 + 8));
  v15 = vmuld_lane_f64(*(double *)(a2 + 24), v11, 1) + *(double *)a2;
  v16 = v12;
  v13 = pxrInternal__aapl__pxrReserved__::operator<<(v9, &v15);
  v19 = 41;
  return sub_20BDDC1C8(v13, (uint64_t)&v19, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  char v11;

  LOBYTE(v9) = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v9, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *(double *)a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)" + ", 3);
  v6 = *(_QWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 8);
  v10 = v6;
  v7 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (double *)&v9);
  v11 = 41;
  return sub_20BDDC1C8(v7, (uint64_t)&v11, 1);
}

{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  void *p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *__p;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
  sub_20BDDC1C8(a1, (uint64_t)"Ts.KeyFrame(", 12);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = sub_20BDDC1C8(v5, (uint64_t)", ", 2);
  if (v4)
  {
    sub_20BF831C0(a2, (uint64_t)&__p);
    if ((v25 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v25 & 0x80u) == 0)
      v8 = v25;
    else
      v8 = v24;
    v9 = sub_20BDDC1C8(v6, (uint64_t)p_p, v8);
    sub_20BDDC1C8(v9, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = sub_20BDDC1C8(v10, (uint64_t)", ", 2);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 200))(v27, a2);
    v12 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v11, (uint64_t)v27);
    v13 = sub_20BDDC1C8(v12, (uint64_t)", ", 2);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 208))(v26, a2);
    v14 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v13, (uint64_t)v26);
    sub_20BDDC1C8(v14, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 216))(a2);
    v15 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v15, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = sub_20BDDC1C8(v16, (uint64_t)")", 1);
    sub_20BF4C2D8((uint64_t)v26);
    sub_20BF4C2D8((uint64_t)v27);
  }
  else
  {
    sub_20BF831C0(a2, (uint64_t)&__p);
    if ((v25 & 0x80u) == 0)
      v18 = &__p;
    else
      v18 = __p;
    if ((v25 & 0x80u) == 0)
      v19 = v25;
    else
      v19 = v24;
    v20 = sub_20BDDC1C8(v6, (uint64_t)v18, v19);
    sub_20BDDC1C8(v20, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v21 = (_QWORD *)std::ostream::operator<<();
    v17 = sub_20BDDC1C8(v21, (uint64_t)")", 1);
  }
  if ((char)v25 < 0)
    operator delete(__p);
  return v17;
}

{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v9;
  char v10;

  v9 = 64;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v9, 1);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = sub_20BDDC1C8(v3, v5, v6);
  v10 = 64;
  return sub_20BDDC1C8(v7, (uint64_t)&v10, 1);
}

{
  _DWORD *v3;
  _DWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  std::string *v9[3];
  std::string __p;
  std::string **v11;

  memset(v9, 0, sizeof(v9));
  v3 = *(_DWORD **)a2;
  v4 = *(_DWORD **)(a2 + 8);
  v11 = v9;
  while (v3 != v4)
  {
    sub_20C134F0C(v3);
    sub_20C137CAC((uint64_t **)&v11, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v3 += 5;
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", v9, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = sub_20BDDC1C8(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  sub_20BDE5038((void ***)&__p);
  return v7;
}

{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"SdfPayload(", 11);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = sub_20BDDC1C8(v3, v5, v6);
  v8 = sub_20BDDC1C8(v7, (uint64_t)", ", 2);
  v9 = pxrInternal__aapl__pxrReserved__::operator<<(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  v10 = sub_20BDDC1C8(v9, (uint64_t)", ", 2);
  v11 = pxrInternal__aapl__pxrReserved__::operator<<(v10);
  return sub_20BDDC1C8(v11, (uint64_t)")", 1);
}

{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"SdfReference(", 13);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = sub_20BDDC1C8(v3, v5, v6);
  v8 = sub_20BDDC1C8(v7, (uint64_t)", ", 2);
  v9 = pxrInternal__aapl__pxrReserved__::operator<<(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  v10 = sub_20BDDC1C8(v9, (uint64_t)", ", 2);
  v11 = pxrInternal__aapl__pxrReserved__::operator<<(v10);
  v12 = sub_20BDDC1C8(v11, (uint64_t)", ", 2);
  v13 = pxrInternal__aapl__pxrReserved__::operator<<(v12, (_QWORD **)(a2 + 48));
  return sub_20BDDC1C8(v13, (uint64_t)")", 1);
}

{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"<< ", 3);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = sub_20BDDC1C8(v3, v5, v6);
  return sub_20BDDC1C8(v7, (uint64_t)" >>", 3);
}

{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  unsigned __int8 v18;
  char v19;

  v4 = sub_20BDDC1C8(a1, (uint64_t)"_pcpInstanceKey:\n", 17);
  pxrInternal__aapl__pxrReserved__::PcpInstanceKey::GetString((pxrInternal__aapl__pxrReserved__::PcpInstanceKey *)a2, (uint64_t)__p);
  if ((v18 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v6 = v18;
  else
    v6 = (uint64_t)__p[1];
  v7 = sub_20BDDC1C8(v4, (uint64_t)v5, v6);
  v19 = 10;
  v8 = sub_20BDDC1C8(v7, (uint64_t)&v19, 1);
  v9 = sub_20BDDC1C8(v8, (uint64_t)"_mask: ", 7);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, (_DWORD **)(a2 + 80));
  v19 = 10;
  v11 = sub_20BDDC1C8(v10, (uint64_t)&v19, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"_loadRules: ", 12);
  v13 = pxrInternal__aapl__pxrReserved__::operator<<(v12, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 104));
  v19 = 10;
  v14 = sub_20BDDC1C8(v13, (uint64_t)&v19, 1);
  sub_20BDDC1C8(v14, (uint64_t)"_hash: ", 7);
  v15 = (_QWORD *)std::ostream::operator<<();
  v19 = 10;
  sub_20BDDC1C8(v15, (uint64_t)&v19, 1);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return a1;
}

{
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  sub_20BDDC1C8(a1, (uint64_t)"{ ", 2);
  if (*(_DWORD *)(a2 + 452) >= 9u)
    v4 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)a2;
  else
    v4 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)a2;
  v5 = *(unsigned int *)(a2 + 448);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 56 * v5;
    do
    {
      if ((v6 & 1) != 0)
        sub_20BDDC1C8(a1, (uint64_t)", ", 2);
      pxrInternal__aapl__pxrReserved__::operator<<(a1, v4);
      v4 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v4 + 56);
      v6 = 1;
      v7 -= 56;
    }
    while (v7);
  }
  sub_20BDDC1C8(a1, (uint64_t)" }", 2);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v4 = sub_20BDDC1C8(a1, (uint64_t)"RenderProduct: \n", 16);
  v5 = sub_20BDDC1C8(v4, (uint64_t)"    productPath : ", 18);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  v7 = sub_20BDDC1C8(v6, (uint64_t)"    resolution : ", 17);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7);
  v9 = sub_20BDDC1C8(v8, (uint64_t)"    namespacedSettings: ", 24);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, (_QWORD **)(a2 + 112));
  sub_20BDDC1C8(v10, (uint64_t)"    renderVars: \n", 17);
  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 32))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      sub_20BDDC1C8(a1, (uint64_t)"        [", 9);
      v13 = (_QWORD *)std::ostream::operator<<();
      v14 = sub_20BDDC1C8(v13, (uint64_t)"] ", 2);
      pxrInternal__aapl__pxrReserved__::operator<<(v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)(a2 + 32) + v11));
      ++v12;
      v11 += 56;
    }
    while (v12 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  }
  return a1;
}

uint64_t sub_20BEEFAC4(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = a1;
  v3 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 239) = 0;
  return a1;
}

void sub_20BEEFB38(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  std::string __p;

  v6 = (_QWORD *)sub_20BEEFC00(a1, a2);
  if (v6)
  {
    *v6 = *a3;
  }
  else
  {
    sub_20BDDC0E4(&__p, (char *)(a2[1] & 0x7FFFFFFFFFFFFFFFLL));
    sub_20BEEFCA8(a1, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20BDDC0E4(&__p, (char *)(a2[1] & 0x7FFFFFFFFFFFFFFFLL));
    sub_20BEEFD9C(a1, a2, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20BEEFBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEEFC00(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  void *__p[2];
  char v9;

  __p[0] = a2;
  v4 = sub_20BEDA270((_QWORD *)(a1 + 40), __p);
  if (v4)
    return v4[3] + 72;
  sub_20BDDC0E4(__p, (char *)(a2[1] & 0x7FFFFFFFFFFFFFFFLL));
  v6 = sub_20BEB4DB8((_QWORD *)(a1 + 80), (unsigned __int8 *)__p);
  if (v6)
    v5 = *((_QWORD *)v6 + 5) + 72;
  else
    v5 = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20BEEFC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEEFCA8(uint64_t a1, std::string *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *result;
  unsigned __int8 *v8;
  uint64_t v9;
  std::string *v10;

  v6 = a1 + 80;
  result = sub_20BEC301C((_QWORD *)(a1 + 80), (unsigned __int8 *)a2);
  if (result)
  {
    *(_QWORD *)(result[5] + 72) = *a3;
  }
  else
  {
    v10 = a2;
    v8 = sub_20BEEFDE4(a1, (unsigned __int8 *)a2, (uint64_t)&unk_20CAC184C, (__int128 **)&v10);
    std::string::operator=((std::string *)(v8 + 88), a2);
    *((_QWORD *)v8 + 14) = *a3;
    v10 = a2;
    *((_QWORD *)sub_20BEC286C(v6, (unsigned __int8 *)a2, (uint64_t)&unk_20CAC184C, (__int128 **)&v10) + 5) = v8 + 40;
    result = sub_20BEDE334((uint64_t)(v8 + 64), 0, 0, (uint64_t)a2);
    result[1] = v8 + 64;
    v9 = *((_QWORD *)v8 + 8);
    *result = v9;
    *(_QWORD *)(v9 + 8) = result;
    *((_QWORD *)v8 + 8) = result;
    ++*((_QWORD *)v8 + 10);
  }
  return result;
}

unsigned __int8 *sub_20BEEFD9C(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;

  result = sub_20BEC301C((_QWORD *)(a1 + 80), a3);
  if (result)
    return (unsigned __int8 *)sub_20BEF021C(a1, a2, *((uint64_t **)result + 5));
  return result;
}

unsigned __int8 *sub_20BEEFDE4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20BEF00A8(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  v26 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BEF0180((uint64_t)&v26, 0);
  return i;
}

void sub_20BEF0090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEF0180((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_20BEF00A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x78uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_20BEF0114((char *)v8 + 16, *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEF00FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEF0180(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20BEF0114(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *((_QWORD *)__dst + 12) = 0;
  *((_QWORD *)__dst + 3) = __dst + 24;
  *((_QWORD *)__dst + 4) = __dst + 24;
  *((_QWORD *)__dst + 5) = 0;
  *((_QWORD *)__dst + 6) = __dst + 48;
  *((_QWORD *)__dst + 7) = __dst + 48;
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 5) = 0u;
  return __dst;
}

void sub_20BEF0180(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BEF01C4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20BEF01C4(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 24);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  sub_20BEDD928((_QWORD *)(a1 + 48));
  sub_20BEB422C(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *sub_20BEF021C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v5 = a1 + 40;
  v9 = a2;
  result = sub_20BEB4074((_QWORD *)(a1 + 40), &v9);
  if (!result)
  {
    v8 = a2;
    v9 = &v8;
    sub_20BEB428C(v5, &v8, (uint64_t)&unk_20CAC184C, &v9)[3] = a3;
    result = operator new(0x18uLL);
    result[1] = a3;
    result[2] = a2;
    v7 = *a3;
    *result = *a3;
    *(_QWORD *)(v7 + 8) = result;
    *a3 = (uint64_t)result;
    ++a3[2];
  }
  return result;
}

uint64_t sub_20BEF02B8(uint64_t a1)
{
  void *v2;

  sub_20BEF02F0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEF02F0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BEF01C4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_20BEF032C(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::vector<pxrInternal__aapl__pxrReserve"
            "d__::TfType>>>::operator->() [T = std::vector<std::vector<pxrInternal__aapl__pxrReserved__::TfType>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

_QWORD *sub_20BEF03B4(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::vector<pxrInternal__aa"
            "pl__pxrReserved__::TfType>>>::operator++() [T = std::vector<std::vector<pxrInternal__aapl__pxrReserved__::Tf"
            "Type>>, Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

uint64_t sub_20BEF0434(uint64_t a1, int *a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    sub_20BEB3F28(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  sub_20BEF04CC(a1, a2);
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

uint64_t sub_20BEF0480(uint64_t a1, int *a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    sub_20BEF0518(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  sub_20BEF059C(a1, a2);
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

uint64_t sub_20BEF04CC(uint64_t a1, int *a2)
{
  size_t v3;

  v3 = *a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_20BDEC6E0(a1, v3);
  return a1;
}

void sub_20BEF0504(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB3F28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEF0518(uint64_t a1)
{
  void *v2;

  sub_20BEF0550(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEF0550(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      sub_20BDE5038(&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20BEF059C(uint64_t a1, int *a2)
{
  size_t v3;

  v3 = *a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_20BDEC6E0(a1, v3);
  return a1;
}

void sub_20BEF05D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEF0518(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEF05E8(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BEF0830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_20BEF084C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20BEF084C(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    sub_20BDE5038(&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t *sub_20BEF0894()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB7C8], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB7C8], 0, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF0950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF0994()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB770], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB770], (char *)1, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF0A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF0A94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB778], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB778], (char *)1, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF0B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF0B94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB768], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB768], (char *)1, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF0C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF0C94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB790], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB790], (char *)1, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF0D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF0D94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB7B8], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB7B8], (char *)2, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF0E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF0E94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB7C0], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB7C0], (char *)2, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF0F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF0F94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB798], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB798], (char *)4, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1094()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB7A0], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB7A0], (char *)4, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1194()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB7A8], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB7A8], (char *)8, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1294()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB7B0], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB7B0], (char *)8, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1394()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB7D0], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB7D0], (char *)8, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1494()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB7D8], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB7D8], (char *)8, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1594()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB788], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB788], (char *)4, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1694()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEDB780], (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x24BEDB780], (char *)8, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1794()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C516910, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C516910, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1894()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BD40, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BD40, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1994()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BD50, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BD50, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1A94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BD60, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BD60, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1B94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BD70, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BD70, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1C94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BD80, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BD80, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1D94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BD90, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BD90, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1E94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BDA0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BDA0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF1F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF1F94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BDB0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BDB0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF2050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF2094()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BDC0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BDC0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF2150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF2194()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BDD0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BDD0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF2250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF2294()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BDE0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BDE0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF2350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF2394()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BDF0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BDF0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF2450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF2494()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BE00, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BE00, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF2550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF2594()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BE10, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BE10, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF2650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF2694()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BE20, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BE20, (char *)8, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF2750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEF2794(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_20BDEC6E0(a1, 0);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  sub_20BDEC6E0(a1 + 80, 0);
  return a1;
}

void sub_20BEF2804(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  sub_20BEB3F28(v4);
  sub_20BEB3FA4(v2);
  sub_20BEF02B8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEF2834()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF28F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BEF2938(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 *v5;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 **v22;
  unint64_t v23;
  unsigned __int8 *v25;
  char v26;

  v5 = a2;
  v25 = 0;
  v26 = 0;
  v7 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v8 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, (pxrInternal__aapl__pxrReserved__ *)a2, v8);
  v9 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v5) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_20BEF2BE0(a1, v9, a3, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BEF2BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20BEF2BE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  v8[5] = *(_QWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEF2C6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BEB52E4(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEF2C88(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BEF2CE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20BEF2D00(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      sub_20BDDF694();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_20BDDF6A8(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = sub_20BEF2F0C((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_20BEF2ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20BEF2F0C(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t sub_20BEF2FD0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BEF3044((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BEF3044(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BEF30E4((uint64_t)v11);
  return v9;
}

uint64_t sub_20BEF30E4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED6598(a1);
  return a1;
}

uint64_t sub_20BEF3118(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20BEF2C88(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  sub_20BEF2FD0(a1, v14);
  v12 = a1[1];
  sub_20BED65DC((uint64_t)v14);
  return v12;
}

void sub_20BEF3218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED65DC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEF322C(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20BEF3290(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20BEF32AC(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  char v15;

  v4 = sub_20BEF33B4((uint64_t)&v15, (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_20BEB4EF8(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_20BEF33B4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_20BEF33F0((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_20BEF33F0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_20BEF379C(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_20BEF36F0(a2, a3);
  }
  else
  {
    return sub_20BEF35F8(a2, a3);
  }
}

unint64_t sub_20BEF35F8(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_20BEF36F0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_20BEF379C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

unsigned __int8 *sub_20BEF385C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = sub_20BEF33B4((uint64_t)v24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  sub_20BEF3AD0(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BEF3BD8((uint64_t)v24, 0);
  return i;
}

void sub_20BEF3AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEF3BD8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_20BEF3AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_20BEF3B44((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEF3B2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEF3BD8(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20BEF3B44(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20BEF3BBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BEF3BD8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BDDE3E4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice::TfTypeWasDeclaredNotice(_QWORD *result, uint64_t a2)
{
  *result = off_24C51BE40;
  result[1] = a2;
  return result;
}

{
  *result = off_24C51BE40;
  result[1] = a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice::~TfTypeWasDeclaredNotice(pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, unsigned int a2)
{
  _QWORD *v2;
  unsigned int v3;
  _QWORD *v4;
  char *v5;
  char v7;
  unsigned int i;
  char *v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = a2;
  v4 = a1;
  if (a2 < 0x80)
  {
    v10 = a2;
    v5 = &v10;
    goto LABEL_5;
  }
  if (a2 < 0x800)
  {
    v11 = (a2 >> 6) | 0xC0;
    sub_20BDDC1C8(a1, (uint64_t)&v11, 1);
    v12 = v3 & 0x3F | 0x80;
    v5 = &v12;
LABEL_5:
    sub_20BDDC1C8(v4, (uint64_t)v5, 1);
    return v4;
  }
  v7 = 0;
  for (i = a2; i >= 0x10000; i = 65533)
  {
    if (HIWORD(i) <= 0x10u)
    {
      v16 = (v3 >> 18) | 0xF0;
      sub_20BDDC1C8(a1, (uint64_t)&v16, 1);
      v17 = (v3 >> 12) & 0x3F | 0x80;
      sub_20BDDC1C8(v4, (uint64_t)&v17, 1);
      v18 = (v3 >> 6) & 0x3F | 0x80;
      sub_20BDDC1C8(v4, (uint64_t)&v18, 1);
      v19 = v3 & 0x3F | 0x80;
      v9 = &v19;
      goto LABEL_15;
    }
    if ((v7 & 1) == 0)
      v2 = a1;
    v3 = 65533;
    v7 = 1;
  }
  v13 = (v3 >> 12) | 0xE0;
  sub_20BDDC1C8(a1, (uint64_t)&v13, 1);
  v14 = (v3 >> 6) & 0x3F | 0x80;
  sub_20BDDC1C8(v4, (uint64_t)&v14, 1);
  v15 = v3 & 0x3F | 0x80;
  v9 = &v15;
LABEL_15:
  sub_20BDDC1C8(v4, (uint64_t)v9, 1);
  if ((v7 & 1) != 0)
    return v2;
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint(pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *this)
{
  unsigned __int8 *v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  unsigned int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;

  v1 = *(unsigned __int8 **)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v2)
  {
    v5 = 0;
  }
  else
  {
    v3 = *v1;
    if (((char)*v1 & 0x80000000) == 0)
    {
      if ((uint64_t)(v2 - (_QWORD)v1) >= 1)
        return *v1;
      else
        return 65533;
    }
    if ((v3 & 0xE0) == 0xC0)
    {
      v5 = 2;
    }
    else if ((v3 & 0xF0) == 0xE0)
    {
      v5 = 3;
    }
    else
    {
      v5 = 4 * ((v3 & 0xF8) == 240);
    }
  }
  if ((uint64_t)(v2 - (_QWORD)v1) < v5)
    return 65533;
  if (v5 == 4)
  {
    v11 = *v1;
    v12 = (char)v1[1];
    v9 = v1[2];
    v10 = v1[3];
    if (v11 == 240)
    {
      result = 65533;
      if ((v12 + 64) < 0xD0u)
        return result;
    }
    else if ((v11 + 15) > 2u)
    {
      if (v11 != 244)
        return 65533;
      result = 65533;
      if (v12 > -113)
        return result;
    }
    else
    {
      result = 65533;
      if (v12 > -65)
        return result;
    }
    if ((char)v9 < 0 && v9 <= 0xBF && (char)v10 < 0 && v10 <= 0xBF)
    {
      v13 = ((v11 & 7) << 18) | ((v12 & 0x3F) << 12);
      return v13 & 0xFFFFF000 | ((v9 & 0x3F) << 6) | v10 & 0x3F;
    }
  }
  else
  {
    if (v5 != 3)
    {
      if (v5 == 2)
      {
        v6 = *v1;
        if ((*v1 + 32) >= 0xE2u)
        {
          v7 = (char)v1[1];
          if (v7 <= -65)
            return v7 & 0x3F | ((v6 & 0x1F) << 6);
        }
      }
      return 65533;
    }
    v8 = *v1;
    v9 = (char)v1[1];
    v10 = v1[2];
    if (v8 == 224)
    {
      result = 65533;
      if ((v9 + 64) < 0xE0u)
        return result;
    }
    else if ((v8 + 31) < 0xCu || (v8 & 0xFE) == 0xEE)
    {
      result = 65533;
      if (v9 > -65)
        return result;
    }
    else
    {
      if (v8 != 237)
        return 65533;
      result = 65533;
      if (v9 > -97)
        return result;
    }
    if ((char)v10 < 0 && v10 <= 0xBF)
    {
      v13 = (v8 & 0xF) << 12;
      return v13 & 0xFFFFF000 | ((v9 & 0x3F) << 6) | v10 & 0x3F;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned int v1;
  char *XidStartFlagData;

  v1 = this;
  XidStartFlagData = pxrInternal__aapl__pxrReserved__::TfUnicodeGetXidStartFlagData(this);
  if (HIWORD(v1) > 0x10u)
    return 0;
  else
    return (*(_QWORD *)&XidStartFlagData[((unint64_t)v1 >> 3) & 0x1FFFFFF8] >> v1) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned int v1;
  char *XidContinueFlagData;

  v1 = this;
  XidContinueFlagData = pxrInternal__aapl__pxrReserved__::TfUnicodeGetXidContinueFlagData(this);
  if (HIWORD(v1) > 0x10u)
    return 0;
  else
    return (*(_QWORD *)&XidContinueFlagData[((unint64_t)v1 >> 3) & 0x1FFFFFF8] >> v1) & 1;
}

void pxrInternal__aapl__pxrReserved__::Tf_Remnant::~Tf_Remnant(pxrInternal__aapl__pxrReserved__::Tf_Remnant *this, const void *a2)
{
  *(_QWORD *)this = off_24C51BE78;
  if (*((_BYTE *)this + 12))
    pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke((uint64_t)this, a2);
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase(this);
}

{
  void *v2;

  pxrInternal__aapl__pxrReserved__::Tf_Remnant::~Tf_Remnant(this, a2);
  operator delete(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakBase::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfWeakBase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  sub_20BEB5AD8((unint64_t *)this, &v8);
  v1 = sub_20BEB47BC(&v8);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  v3 = v8;
  if (v8)
  {
    v4 = (unsigned int *)(v8 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return v2;
}

void sub_20BEF4134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakBase::EnableNotification2(pxrInternal__aapl__pxrReserved__::TfWeakBase *this)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  sub_20BEB5AD8((unint64_t *)this, &v5);
  *(_BYTE *)(sub_20BEB47BC(&v5) + 13) = 1;
  result = v5;
  if (v5)
  {
    v2 = (unsigned int *)(v5 + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20BEF41B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_Remnant::EnableNotification(uint64_t this)
{
  *(_BYTE *)(this + 12) = 1;
  return this;
}

uint64_t sub_20BEF41D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

double *pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices(pxrInternal__aapl__pxrReserved__::GfBBox3d *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double *result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  __int128 v14;
  _OWORD v15[8];
  double v16;

  v16 = 0.0;
  *((_BYTE *)this + 304) = 0;
  v3 = *((_OWORD *)a2 + 3);
  v5 = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 6) = v3;
  *((_OWORD *)this + 3) = v5;
  *((_OWORD *)this + 4) = v4;
  v6 = *((_OWORD *)a2 + 7);
  v8 = *((_OWORD *)a2 + 4);
  v7 = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 10) = v6;
  *((_OWORD *)this + 7) = v8;
  *((_OWORD *)this + 8) = v7;
  result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)a2, &v16, 1.0e-13, (uint64_t)v15);
  v10 = v15[5];
  *((_OWORD *)this + 15) = v15[4];
  *((_OWORD *)this + 16) = v10;
  v11 = v15[7];
  *((_OWORD *)this + 17) = v15[6];
  *((_OWORD *)this + 18) = v11;
  v12 = v15[1];
  *((_OWORD *)this + 11) = v15[0];
  *((_OWORD *)this + 12) = v12;
  v13 = fabs(v16);
  v14 = v15[3];
  *((_OWORD *)this + 13) = v15[2];
  *((_OWORD *)this + 14) = v14;
  if (v13 <= 1.0e-13)
  {
    *((_BYTE *)this + 304) = 1;
    return (double *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)this + 176, 1.0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfBBox3d::GetVolume(pxrInternal__aapl__pxrReserved__::GfBBox3d *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v1 = *((double *)this + 3);
  if (*(double *)this <= v1)
  {
    v2 = *((double *)this + 1);
    v3 = *((double *)this + 4);
    if (v2 <= v3)
    {
      v4 = *((double *)this + 2);
      v5 = *((double *)this + 5);
      if (v4 <= v5)
        fabs((v5 - v4)* ((v3 - v2)* ((v1 - *(double *)this)* pxrInternal__aapl__pxrReserved__::GfMatrix4d::_GetDeterminant3((pxrInternal__aapl__pxrReserved__::GfBBox3d *)((char *)this + 48), 0, 1, 2, 0, 1, 2))));
    }
  }
}

double pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange@<D0>(pxrInternal__aapl__pxrReserved__::GfBBox3d *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  if (*(double *)this <= *((double *)this + 3)
    && *((double *)this + 1) <= *((double *)this + 4)
    && *((double *)this + 2) <= *((double *)this + 5))
  {
    v4 = 0;
    v5 = (char *)this + 48;
    v6 = *((_QWORD *)this + 19);
    v7 = *((_QWORD *)this + 20);
    *(_QWORD *)&v19 = *((_QWORD *)this + 18);
    *((_QWORD *)&v19 + 1) = v6;
    v20 = v7;
    *(_QWORD *)&v17 = v19;
    *((_QWORD *)&v17 + 1) = v6;
    v18 = v7;
    do
    {
      v8 = 0;
      v9 = *((double *)&v17 + v4);
      v10 = *((double *)&v19 + v4);
      v11 = (double *)this;
      do
      {
        v12 = *(double *)&v5[v8];
        v13 = *v11 * v12;
        v14 = v12 * v11[3];
        if (v13 >= v14)
          v15 = v14;
        else
          v15 = v13;
        if (v13 >= v14)
          v14 = v13;
        v10 = v15 + v10;
        v9 = v14 + v9;
        ++v11;
        v8 += 32;
      }
      while (v8 != 96);
      *((double *)&v19 + v4) = v10;
      *((double *)&v17 + v4++) = v9;
      v5 += 8;
    }
    while (v4 != 3);
    *(_OWORD *)a2 = v19;
    *(_QWORD *)(a2 + 16) = v20;
    *(_QWORD *)&v3 = v17;
    *(_OWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 40) = v18;
  }
  else
  {
    v2 = *((_OWORD *)this + 1);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_OWORD *)(a2 + 16) = v2;
    v3 = *((_OWORD *)this + 2);
    *(_OWORD *)(a2 + 32) = v3;
  }
  return *(double *)&v3;
}

void *pxrInternal__aapl__pxrReserved__::GfBBox3d::Combine@<X0>(pxrInternal__aapl__pxrReserved__::GfBBox3d *this@<X0>, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2@<X1>, uint64_t a3@<X8>)
{
  void *v7;
  pxrInternal__aapl__pxrReserved__::GfBBox3d *v8;
  void *result;
  float64x2_t v10;
  float64x2_t v11;
  pxrInternal__aapl__pxrReserved__::GfBBox3d *v12;
  const pxrInternal__aapl__pxrReserved__::GfBBox3d *v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v22;
  int8x16_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  _OWORD v28[3];
  uint64_t v29;
  _WORD v30[72];

  sub_20BEF4AA0(a3);
  if (*(double *)this <= *((double *)this + 3)
    && *((double *)this + 1) <= *((double *)this + 4)
    && *((double *)this + 2) <= *((double *)this + 5))
  {
    if (*(double *)a2 > *((double *)a2 + 3)
      || *((double *)a2 + 1) > *((double *)a2 + 4)
      || *((double *)a2 + 2) > *((double *)a2 + 5))
    {
      v7 = (void *)a3;
      v8 = this;
      goto LABEL_5;
    }
    if (*((_BYTE *)this + 304))
    {
      if (*((_BYTE *)a2 + 304))
      {
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange(this, (uint64_t)&v22);
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange(a2, (uint64_t)&v25);
        *(_QWORD *)&v10.f64[0] = v26.i64[0];
        *(_QWORD *)&v10.f64[1] = v23.i64[1];
        *(_QWORD *)&v11.f64[0] = v23.i64[0];
        *(_QWORD *)&v11.f64[1] = v26.i64[1];
        v28[0] = vbslq_s8((int8x16_t)vcgtq_f64(v22, v25), (int8x16_t)v25, (int8x16_t)v22);
        v28[1] = vbslq_s8((int8x16_t)vcgtq_f64(v11, v10), v26, v23);
        v28[2] = vbslq_s8((int8x16_t)vcgtq_f64(v27, v24), (int8x16_t)v27, (int8x16_t)v24);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v29, 1.0);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v30, 1.0);
        v30[64] = 0;
LABEL_17:
        v8 = (pxrInternal__aapl__pxrReserved__::GfBBox3d *)v28;
LABEL_18:
        v7 = (void *)a3;
        goto LABEL_5;
      }
      v12 = a2;
      v13 = this;
    }
    else
    {
      if (!*((_BYTE *)a2 + 304))
      {
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_CombineInOrder(this, a2, v28);
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_CombineInOrder(a2, this, &v22);
        pxrInternal__aapl__pxrReserved__::GfBBox3d::GetVolume((pxrInternal__aapl__pxrReserved__::GfBBox3d *)v28);
        v15 = v14;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::GetVolume((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v22);
        v17 = v15 < v16;
        if (v15 >= v16)
          v18 = v15;
        else
          v18 = v16;
        v19 = fmax(fabs(v18) * 0.000001, 1.0e-10);
        v20 = vabdd_f64(v15, v16);
        if (!v17 && v20 > v19)
          v8 = (pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v22;
        else
          v8 = (pxrInternal__aapl__pxrReserved__::GfBBox3d *)v28;
        goto LABEL_18;
      }
      v12 = this;
      v13 = a2;
    }
    pxrInternal__aapl__pxrReserved__::GfBBox3d::_CombineInOrder(v12, v13, v28);
    goto LABEL_17;
  }
  v7 = (void *)a3;
  v8 = a2;
LABEL_5:
  result = memcpy(v7, v8, 0x132uLL);
  *(_BYTE *)(a3 + 305) = (*((unsigned __int8 *)this + 305) | *((unsigned __int8 *)a2 + 305)) != 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfBBox3d::_CombineInOrder@<X0>(pxrInternal__aapl__pxrReserved__::GfBBox3d *this@<X0>, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2@<X1>, void *a3@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[20];

  sub_20BEF4AA0((uint64_t)v28);
  v7 = *((_OWORD *)a2 + 1);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v7;
  v8 = *((_OWORD *)a2 + 3);
  v28[2] = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 8);
  v10 = *((_OWORD *)a2 + 9);
  v11 = *((_OWORD *)a2 + 6);
  v24 = *((_OWORD *)a2 + 7);
  v25 = v9;
  v12 = *((_OWORD *)a2 + 10);
  v26 = v10;
  v27 = v12;
  v13 = *((_OWORD *)a2 + 4);
  v14 = *((_OWORD *)a2 + 5);
  v20 = v8;
  v21 = v13;
  v22 = v14;
  v23 = v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v20, (double *)this + 22);
  v28[7] = v24;
  v28[8] = v25;
  v28[9] = v26;
  v28[10] = v27;
  v28[3] = v20;
  v28[4] = v21;
  v28[5] = v22;
  v28[6] = v23;
  v15 = *((_OWORD *)this + 8);
  v24 = *((_OWORD *)this + 7);
  v25 = v15;
  v16 = *((_OWORD *)this + 10);
  v26 = *((_OWORD *)this + 9);
  v27 = v16;
  v17 = *((_OWORD *)this + 4);
  v20 = *((_OWORD *)this + 3);
  v21 = v17;
  v18 = *((_OWORD *)this + 6);
  v22 = *((_OWORD *)this + 5);
  v23 = v18;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v20, (double *)a2 + 22);
  v28[15] = v24;
  v28[16] = v25;
  v28[17] = v26;
  v28[18] = v27;
  v28[11] = v20;
  v28[12] = v21;
  v28[13] = v22;
  v28[14] = v23;
  pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)v28, (uint64_t)&v20);
  memcpy(a3, this, 0x138uLL);
  return sub_20BEF4754((uint64_t)a3, (uint64_t)&v20);
}

uint64_t sub_20BEF4754(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  if (*(double *)a2 < *(double *)result)
    *(_QWORD *)result = *(_QWORD *)a2;
  v2 = *(double *)(a2 + 8);
  if (v2 < *(double *)(result + 8))
    *(double *)(result + 8) = v2;
  v3 = *(double *)(a2 + 16);
  if (v3 < *(double *)(result + 16))
    *(double *)(result + 16) = v3;
  v4 = *(double *)(a2 + 24);
  if (v4 > *(double *)(result + 24))
    *(double *)(result + 24) = v4;
  v5 = *(double *)(a2 + 32);
  if (v5 > *(double *)(result + 32))
    *(double *)(result + 32) = v5;
  v6 = *(double *)(a2 + 40);
  if (v6 > *(double *)(result + 40))
    *(double *)(result + 40) = v6;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeCentroid(pxrInternal__aapl__pxrReserved__::GfBBox3d *this)
{
  double v1;
  float64x2_t v8;
  double v9;

  v1 = (*((double *)this + 5) + *((double *)this + 2)) * 0.5;
  __asm { FMOV            V2.2D, #0.5 }
  v8 = vmulq_f64(vaddq_f64(*(float64x2_t *)((char *)this + 24), *(float64x2_t *)this), _Q2);
  v9 = v1;
  return sub_20BEF4828((double *)this + 6, v8.f64);
}

double sub_20BEF4828(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v2 = a2[1];
  v3 = a2[2];
  v4 = a1[12] + *a2 * *a1 + v2 * a1[4] + v3 * a1[8];
  v5 = a1[15] + *a2 * a1[3] + v2 * a1[7] + v3 * a1[11];
  v6 = 1.0 / v5;
  if (v5 == 0.0)
    v6 = 1.0;
  return v4 * v6;
}

uint64_t *sub_20BEF49A0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BEB0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BEB0, (char *)0x138, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF4A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEF4AA0(uint64_t a1)
{
  *(int64x2_t *)a1 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  *(_OWORD *)(a1 + 16) = xmmword_20CA5AAF0;
  *(int64x2_t *)(a1 + 32) = vdupq_n_s64(0xC7EFFFFFE0000000);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a1 + 48, 1.0);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a1 + 176, 1.0);
  *(_WORD *)(a1 + 304) = 0;
  return a1;
}

void sub_20BEF4B04()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "GfCamera::Perspective");
  sub_20BDDC0E4(__p, "perspective");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51BEC0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GfCamera::Orthographic");
  sub_20BDDC0E4(__p, "orthographic");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51BEC0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GfCamera::FOVHorizontal");
  sub_20BDDC0E4(__p, "FOVHorizontal");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51BED0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GfCamera::FOVVertical");
  sub_20BDDC0E4(__p, "FOVVertical");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51BED0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20BEF4C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GfCamera(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v15 = *a2;
  v16 = a2[1];
  v17 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  v18 = a2[4];
  v19 = a2[5];
  v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 128) = a3;
  *(float *)(a1 + 132) = a6;
  *(float *)(a1 + 136) = a7;
  *(float *)(a1 + 140) = a8;
  *(float *)(a1 + 144) = a9;
  *(float *)(a1 + 148) = a10;
  *(_QWORD *)(a1 + 152) = *a4;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_20BEF54B8((_QWORD *)(a1 + 160), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
  *(float *)(a1 + 184) = a11;
  *(float *)(a1 + 188) = a12;
  return a1;
}

{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v15 = *a2;
  v16 = a2[1];
  v17 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  v18 = a2[4];
  v19 = a2[5];
  v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 128) = a3;
  *(float *)(a1 + 132) = a6;
  *(float *)(a1 + 136) = a7;
  *(float *)(a1 + 140) = a8;
  *(float *)(a1 + 144) = a9;
  *(float *)(a1 + 148) = a10;
  *(_QWORD *)(a1 + 152) = *a4;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_20BEF54B8((_QWORD *)(a1 + 160), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
  *(float *)(a1 + 184) = a11;
  *(float *)(a1 + 188) = a12;
  return a1;
}

__n128 pxrInternal__aapl__pxrReserved__::GfCamera::SetTransform(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetProjection(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 128) = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalAperture(uint64_t this, float a2)
{
  *(float *)(this + 132) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalAperture(uint64_t this, float a2)
{
  *(float *)(this + 136) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalApertureOffset(uint64_t this, float a2)
{
  *(float *)(this + 140) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalApertureOffset(uint64_t this, float a2)
{
  *(float *)(this + 144) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetFocalLength(uint64_t this, float a2)
{
  *(float *)(this + 148) = a2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::GfCamera::SetPerspectiveFromAspectRatioAndFieldOfView(uint64_t a1, int a2, float a3, float a4, float a5)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  float v12;
  float v13;
  float v14;
  float v15;

  *(_DWORD *)(a1 + 128) = 0;
  v8 = a5;
  v9 = a3;
  v10 = a3 == 0.0;
  v11 = 1.0;
  if (!v10)
    v11 = v9;
  v12 = v8 / v11;
  *(float *)(a1 + 132) = a5;
  *(float *)(a1 + 136) = v12;
  v13 = tan(a4 * 0.0174532925 * 0.5);
  if (v13 == 0.0)
  {
    v14 = 50.0;
  }
  else
  {
    if (a2)
      v15 = v12;
    else
      v15 = a5;
    v14 = v15 * 0.1 / (float)(v13 + v13) / 0.1;
  }
  *(float *)(a1 + 148) = v14;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetOrthographicFromAspectRatioAndSize(uint64_t result, int a2, float a3, float a4)
{
  float v4;

  *(_DWORD *)(result + 128) = 1;
  *(_DWORD *)(result + 148) = 1112014848;
  v4 = a4 / 0.1;
  if (a2)
  {
    *(float *)(result + 132) = v4 * a3;
    *(float *)(result + 136) = v4;
  }
  else
  {
    *(float *)(result + 132) = v4;
    if (a3 <= 0.0)
      *(float *)(result + 136) = v4;
    else
      *(float *)(result + 136) = v4 / a3;
  }
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfCamera::SetFromViewAndProjectionMatrix(pxrInternal__aapl__pxrReserved__::GfCamera *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, float64x2_t *a3, float a4)
{
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  float64x2_t v13;
  float32x2_t v14;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  float64_t v26;
  float result;
  float v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)a2, 0, 0.0, (uint64_t)&v29);
  v8 = v34;
  *((_OWORD *)this + 4) = v33;
  *((_OWORD *)this + 5) = v8;
  v9 = v36;
  *((_OWORD *)this + 6) = v35;
  *((_OWORD *)this + 7) = v9;
  v10 = v30;
  *(_OWORD *)this = v29;
  *((_OWORD *)this + 1) = v10;
  v11 = v32;
  *((_OWORD *)this + 2) = v31;
  *((_OWORD *)this + 3) = v11;
  *((float *)this + 37) = a4;
  v12 = a3[5].f64[1];
  if (v12 >= -0.5)
  {
    if (fabs(v12) >= 0.000001)
    {
      *(_QWORD *)&v29 = "gf/camera.cpp";
      *((_QWORD *)&v29 + 1) = "SetFromViewAndProjectionMatrix";
      *(_QWORD *)&v30 = 218;
      *((_QWORD *)&v30 + 1) = "void pxrInternal__aapl__pxrReserved__::GfCamera::SetFromViewAndProjectionMatrix(const GfMa"
                              "trix4d &, const GfMatrix4d &, const float)";
      LOBYTE(v31) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"GfCamera: Given projection matrix does not appear to be valid orthographic matrix.", v7);
    }
    *((_DWORD *)this + 32) = 1;
    v23 = *a3;
    v23.f64[1] = a3[2].f64[1];
    __asm { FMOV            V1.2D, #20.0 }
    *(float32x2_t *)&v23.f64[0] = vcvt_f32_f64(vdivq_f64(_Q1, v23));
    *(float64_t *)((char *)this + 132) = v23.f64[0];
    __asm { FMOV            V1.2D, #-0.5 }
    *(float32x2_t *)((char *)this + 140) = vcvt_f32_f64(vmulq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)&v23.f64[0]), _Q1), a3[6]));
    _Q1.f64[0] = 1.0 / a3[5].f64[0];
    v26 = _Q1.f64[0] * a3[7].f64[0];
    v21 = _Q1.f64[0] + v26;
    v22 = v26 - _Q1.f64[0];
  }
  else
  {
    if (fabs(v12 + 1.0) >= 0.000001)
    {
      *(_QWORD *)&v29 = "gf/camera.cpp";
      *((_QWORD *)&v29 + 1) = "SetFromViewAndProjectionMatrix";
      *(_QWORD *)&v30 = 196;
      *((_QWORD *)&v30 + 1) = "void pxrInternal__aapl__pxrReserved__::GfCamera::SetFromViewAndProjectionMatrix(const GfMa"
                              "trix4d &, const GfMatrix4d &, const float)";
      LOBYTE(v31) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"GfCamera: Given projection matrix does not appear to be valid perspective matrix.", v7);
    }
    *((_DWORD *)this + 32) = 0;
    v13 = *a3;
    v13.f64[1] = a3[2].f64[1];
    v14 = vcvt_f32_f64(vdivq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64((float)(a4 + a4)), 0), v13));
    *(float32x2_t *)((char *)this + 132) = v14;
    __asm { FMOV            V1.2D, #0.5 }
    *(float32x2_t *)((char *)this + 140) = vcvt_f32_f64(vmulq_f64(vmulq_f64(vcvtq_f64_f32(v14), _Q1), a3[4]));
    _Q1.f64[0] = a3[7].f64[0];
    v20 = a3[5].f64[0];
    v21 = _Q1.f64[0] / (v20 + -1.0);
    v22 = _Q1.f64[0] / (v20 + 1.0);
  }
  result = v21;
  v28 = v22;
  *((float *)this + 38) = result;
  *((float *)this + 39) = v28;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetClippingRange(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 152) = *a2;
  return result;
}

char *pxrInternal__aapl__pxrReserved__::GfCamera::SetClippingPlanes(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 160);
  if (result != (char *)a2)
    return sub_20BEF5530(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetFStop(uint64_t this, float a2)
{
  *(float *)(this + 184) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetFocusDistance(uint64_t this, float a2)
{
  *(float *)(this + 188) = a2;
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::GfCamera::GetTransform@<Q0>(pxrInternal__aapl__pxrReserved__::GfCamera *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *((_OWORD *)this + 5);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *((_OWORD *)this + 1);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_OWORD *)(a2 + 16) = v4;
  result = *((__n128 *)this + 2);
  v6 = *((_OWORD *)this + 3);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetProjection(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((unsigned int *)this + 32);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 33);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 34);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalApertureOffset(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 35);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalApertureOffset(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 36);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetAspectRatio(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  float v1;
  float result;

  v1 = *((float *)this + 34);
  result = 0.0;
  if (v1 != 0.0)
    return *((float *)this + 33) / v1;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetFocalLength(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 37);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetFieldOfView(uint64_t a1, int a2)
{
  uint64_t v2;
  long double v3;

  v2 = 136;
  if (!a2)
    v2 = 132;
  v3 = atan(*(float *)(a1 + v2) * 0.1 / ((float)(*(float *)(a1 + 148) + *(float *)(a1 + 148)) * 0.1));
  *(float *)&v3 = v3 + v3;
  return *(float *)&v3 * 57.2957795;
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetClippingRange(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 38);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetClippingPlanes(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return (uint64_t)this + 160;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetFrustum@<X0>(pxrInternal__aapl__pxrReserved__::GfCamera *this@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int v9;
  float v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;

  v4 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)((char *)this + 132), (float32x2_t)0x3F0000003F000000));
  v5 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 140));
  v6 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
  v7 = vmulq_f64(vsubq_f64(v5, v4), v6);
  v8 = vmulq_f64(vaddq_f64(v4, v5), v6);
  v16 = v7;
  v17 = v8;
  v9 = *((_DWORD *)this + 32);
  if (v9 != 1)
  {
    v10 = *((float *)this + 37);
    if (v10 != 0.0)
    {
      v11 = 1.0 / (v10 * 0.1);
      if (v11 <= 0.0)
      {
        v16 = vmulq_n_f64(v8, v11);
        v13 = v11 * v7.f64[0];
        v12 = vmuld_lane_f64(v11, v7, 1);
        v17.f64[0] = v13;
      }
      else
      {
        v16 = vmulq_n_f64(v7, v11);
        v17.f64[0] = v11 * v8.f64[0];
        v12 = vmuld_lane_f64(v11, v8, 1);
      }
      v17.f64[1] = v12;
    }
  }
  v15 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 152));
  return pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(a2, this, (__int128 *)&v16, &v15, v9 != 1, 5.0);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetFStop(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 46);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetFocusDistance(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 47);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==((double *)a1, (double *)a2);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)
      || *(float *)(a1 + 132) != *(float *)(a2 + 132)
      || *(float *)(a1 + 136) != *(float *)(a2 + 136)
      || *(float *)(a1 + 140) != *(float *)(a2 + 140)
      || *(float *)(a1 + 144) != *(float *)(a2 + 144)
      || *(float *)(a1 + 148) != *(float *)(a2 + 148)
      || *(float *)(a1 + 152) != *(float *)(a2 + 152)
      || *(float *)(a1 + 156) != *(float *)(a2 + 156))
    {
      return 0;
    }
    result = sub_20BEF5424((float **)(a1 + 160), a2 + 160);
    if (!(_DWORD)result)
      return result;
    return *(float *)(a1 + 184) == *(float *)(a2 + 184) && *(float *)(a1 + 188) == *(float *)(a2 + 188);
  }
  return result;
}

uint64_t sub_20BEF5424(float **a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(float **)a2;
  if ((char *)v2 - (char *)*a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4 || v3[1] != v4[1] || v3[2] != v4[2] || v3[3] != v4[3])
      return 0;
    v3 += 4;
    v4 += 4;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::operator!=(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::GfCamera::operator==(a1, a2) ^ 1;
}

_QWORD *sub_20BEF54B8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BEF5514(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20BEF5530(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20BE90F0C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfDualQuatd::GfDualQuatd(float64x2_t *this, float32x2_t *a2)
{
  float64x2_t *v4;

  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v4 + 2, a2 + 2);
  return this;
}

{
  float64x2_t *v4;

  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v4 + 2, a2 + 2);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfDualQuatd *pxrInternal__aapl__pxrReserved__::GfDualQuatd::GfDualQuatd(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this, const pxrInternal__aapl__pxrReserved__::GfDualQuath *a2)
{
  uint64_t v4;

  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)this, (unsigned __int16 *)a2);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)(v4 + 32), (unsigned __int16 *)a2 + 4);
  return this;
}

{
  uint64_t v4;

  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)this, (unsigned __int16 *)a2);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)(v4 + 32), (unsigned __int16 *)a2 + 4);
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetLength(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this)
{
  double v1;
  double result;

  v1 = sqrt(*(double *)this * *(double *)this+ *((double *)this + 1) * *((double *)this + 1)+ *((double *)this + 2) * *((double *)this + 2)+ *((double *)this + 3) * *((double *)this + 3));
  result = 0.0;
  if (v1 != 0.0)
    return v1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetNormalized(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;

  v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v3;
  v4 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v4;
  pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize((float64x2_t *)a3, a2);
}

void pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(float64x2_t *this, double a2)
{
  double Length;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;

  Length = pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetLength((pxrInternal__aapl__pxrReserved__::GfDualQuatd *)this);
  if (Length >= a2)
  {
    v6 = vmulq_n_f64(*this, 1.0 / Length);
    v7 = this[3];
    v8 = vmulq_n_f64(this[2], 1.0 / Length);
    v9 = vmulq_f64(v6, v8);
    v10 = vmulq_n_f64(this[1], 1.0 / Length);
    *this = v6;
    this[1] = v10;
    v11 = vmulq_n_f64(v7, 1.0 / Length);
    v12 = vmulq_f64(v10, v11);
    *(_QWORD *)&v12.f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1), vaddq_f64(vaddq_f64(v9, (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1)), v12));
    v5 = vsubq_f64(v11, vmulq_n_f64(v10, v12.f64[0]));
    this[2] = vsubq_f64(v8, vmulq_n_f64(v6, v12.f64[0]));
  }
  else
  {
    this->f64[0] = 0.0;
    this->f64[1] = 0.0;
    this[1].f64[0] = 0.0;
    this[1].f64[1] = 1.0;
    v5 = 0uLL;
    this[2] = 0u;
  }
  this[3] = v5;
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetConjugate@<Q0>(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  float64x2_t result;

  v2 = *((_QWORD *)this + 3);
  v3 = -*((double *)this + 2);
  v4 = *((_QWORD *)this + 7);
  v5 = -*((double *)this + 6);
  *(float64x2_t *)a2 = vnegq_f64(*(float64x2_t *)this);
  *(double *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v2;
  result = vnegq_f64(*((float64x2_t *)this + 2));
  *(float64x2_t *)(a2 + 32) = result;
  *(double *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v4;
  return result;
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetInverse@<X0>(float64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;

  v2 = *this;
  v3 = this[1].f64[0];
  v4 = this[1].f64[1];
  v5 = vaddvq_f64(vmulq_f64(v2, v2)) + v3 * v3 + v4 * v4;
  if (v5 <= 0.0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    v9 = 1.0;
  }
  else
  {
    v6 = 1.0 / v5;
    v8 = this[3].f64[0];
    v7 = this[3].f64[1];
    v9 = v4 * (1.0 / v5);
    v10 = -(v3 * v6);
    v11 = v6 * v7;
    v12 = v4 * v7;
    *(double *)(a2 + 16) = v10;
    v13 = this[2];
    v14 = vmulq_n_f64(vnegq_f64(v2), v6);
    v15 = (v6 + v6) * (vaddvq_f64(vmulq_f64(v2, v13)) + v3 * v8 + v12);
    *(float64x2_t *)a2 = v14;
    *(float64x2_t *)(a2 + 32) = vsubq_f64(vmulq_n_f64(vnegq_f64(v13), v6), vmulq_n_f64(v14, v15));
    *(double *)(a2 + 48) = -(v8 * v6) - v10 * v15;
    *(double *)(a2 + 56) = v11 - v9 * v15;
  }
  *(double *)(a2 + 24) = v9;
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::GfDualQuatd::SetTranslation(uint64_t a1, float64x2_t *a2)
{
  double v3;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  float64x2_t v12;
  double v13;
  uint64_t v14;

  v3 = a2[1].f64[0];
  __asm { FMOV            V3.2D, #0.5 }
  v12 = vmulq_f64(*a2, _Q3);
  v13 = v3 * 0.5;
  v14 = 0;
  pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=(v12.f64, (double *)a1);
  result = *(__n128 *)v9;
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 48) = v11;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetTranslation(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this)
{
  return (*((double *)this + 7) * *(double *)this
        - *((double *)this + 3) * *((double *)this + 4)
        + *((double *)this + 5) * *((double *)this + 2)
        - *((double *)this + 6) * *((double *)this + 1))
       * -2.0;
}

__int128 *pxrInternal__aapl__pxrReserved__::GfDualQuatd::operator*=(__int128 *a1, double *a2)
{
  __int128 v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  float64x2_t *v9;
  __int128 v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a1[1];
  v18 = *a1;
  v19 = v4;
  pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=((double *)&v18, a2);
  v6 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  v8 = a1[1];
  v17 = *v5;
  v18 = *a1;
  v19 = v8;
  pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=((double *)&v18, a2 + 4);
  v15 = v9[1];
  v16 = *v9;
  v10 = a1[3];
  v18 = a1[2];
  v19 = v10;
  pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=((double *)&v18, a2);
  v12 = vaddq_f64(v16, *v11);
  v13 = vaddq_f64(v15, v11[1]);
  *a1 = v17;
  *((_QWORD *)a1 + 2) = v6;
  *((_QWORD *)a1 + 3) = v7;
  a1[2] = (__int128)v12;
  a1[3] = (__int128)v13;
  return a1;
}

double pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(double *a1, double *a2)
{
  double v3;

  v3 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(a1, a2);
  return v3
       + pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetTranslation((pxrInternal__aapl__pxrReserved__::GfDualQuatd *)a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  __int128 v10[2];
  __int128 v11[2];
  char v12;

  LOBYTE(v11[0]) = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)v11, 1);
  v4 = a2[1];
  v11[0] = *a2;
  v11[1] = v4;
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, v11);
  v6 = sub_20BDDC1C8(v5, (uint64_t)", ", 2);
  v7 = a2[3];
  v10[0] = a2[2];
  v10[1] = v7;
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, v10);
  v12 = 41;
  return sub_20BDDC1C8(v8, (uint64_t)&v12, 1);
}

{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p[2];
  unsigned __int8 v23;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26[2];
  __int128 v27;
  uint64_t v28;
  char v29;

  LOBYTE(v26[0]) = 91;
  v4 = sub_20BDDC1C8(a1, (uint64_t)v26, 1);
  v5 = *((_QWORD *)a2 + 2);
  v27 = *a2;
  v28 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v4, (double *)&v27);
  v7 = sub_20BDDC1C8(v6, (uint64_t)" ", 1);
  v8 = *(__int128 *)((char *)a2 + 40);
  v26[0] = *(__int128 *)((char *)a2 + 24);
  v26[1] = v8;
  v9 = pxrInternal__aapl__pxrReserved__::operator<<(v7, v26);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" ", 1);
  v11 = *(__int128 *)((char *)a2 + 72);
  v25[0] = *(__int128 *)((char *)a2 + 56);
  v25[1] = v11;
  v12 = pxrInternal__aapl__pxrReserved__::operator<<(v10, v25);
  v13 = sub_20BDDC1C8(v12, (uint64_t)" ", 1);
  v24 = *(__int128 *)((char *)a2 + 88);
  v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, (double *)&v24);
  v15 = sub_20BDDC1C8(v14, (uint64_t)" ", 1);
  v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, *((double *)a2 + 13));
  v17 = sub_20BDDC1C8(v16, (uint64_t)" ", 1);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51BF20, *((unsigned int *)a2 + 28), (uint64_t)__p);
  if ((v23 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v19 = v23;
  else
    v19 = (uint64_t)__p[1];
  v20 = sub_20BDDC1C8(v17, (uint64_t)v18, v19);
  v29 = 93;
  sub_20BDDC1C8(v20, (uint64_t)&v29, 1);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  return a1;
}

{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  char v11;

  LOBYTE(v9) = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v9, 1);
  v4 = *((_QWORD *)a2 + 2);
  v9 = *a2;
  v10 = v4;
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (double *)&v9);
  v6 = sub_20BDDC1C8(v5, (uint64_t)" ", 1);
  v7 = pxrInternal__aapl__pxrReserved__::operator<<(v6, *((double *)a2 + 3));
  v11 = 93;
  return sub_20BDDC1C8(v7, (uint64_t)&v11, 1);
}

{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *a2;
  v6 = v2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a1, (double *)&v4);
}

{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  LOBYTE(v12) = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v12, 1);
  v4 = *((_QWORD *)a2 + 2);
  v12 = *a2;
  v13 = v4;
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (double *)&v12);
  v6 = sub_20BDDC1C8(v5, (uint64_t)"...", 3);
  v7 = *((_QWORD *)a2 + 5);
  v10 = *(__int128 *)((char *)a2 + 24);
  v11 = v7;
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (double *)&v10);
  v14 = 93;
  return sub_20BDDC1C8(v8, (uint64_t)&v14, 1);
}

{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  LOBYTE(v12) = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v12, 1);
  v4 = *((_QWORD *)a2 + 2);
  v12 = *a2;
  v13 = v4;
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (double *)&v12);
  v6 = sub_20BDDC1C8(v5, (uint64_t)" >> ", 4);
  v7 = *((_QWORD *)a2 + 5);
  v10 = *(__int128 *)((char *)a2 + 24);
  v11 = v7;
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (double *)&v10);
  v14 = 93;
  return sub_20BDDC1C8(v8, (uint64_t)&v14, 1);
}

{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  char v11;

  LOBYTE(v9) = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v9, 1);
  v4 = *((_QWORD *)a2 + 2);
  v9 = *a2;
  v10 = v4;
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (double *)&v9);
  v6 = sub_20BDDC1C8(v5, (uint64_t)" ", 1);
  v7 = pxrInternal__aapl__pxrReserved__::operator<<(v6, *((double *)a2 + 3));
  v11 = 93;
  return sub_20BDDC1C8(v7, (uint64_t)&v11, 1);
}

uint64_t *sub_20BEF5B70()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BEE0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BEE0, (char *)0x40, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF5C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float32x4_t *pxrInternal__aapl__pxrReserved__::GfDualQuatf::GfDualQuatf(float32x4_t *this, __n128 *a2)
{
  float32x4_t *v4;

  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(v4 + 1, a2 + 2);
  return this;
}

{
  float32x4_t *v4;

  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(v4 + 1, a2 + 2);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfDualQuatf *pxrInternal__aapl__pxrReserved__::GfDualQuatf::GfDualQuatf(pxrInternal__aapl__pxrReserved__::GfDualQuatf *this, const pxrInternal__aapl__pxrReserved__::GfDualQuath *a2)
{
  uint64_t v4;

  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)this, (unsigned __int16 *)a2);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)(v4 + 16), (unsigned __int16 *)a2 + 4);
  return this;
}

{
  uint64_t v4;

  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)this, (unsigned __int16 *)a2);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)(v4 + 16), (unsigned __int16 *)a2 + 4);
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetLength(pxrInternal__aapl__pxrReserved__::GfDualQuatf *this)
{
  float v1;
  float result;

  v1 = sqrtf((float)((float)((float)(*(float *)this * *(float *)this) + (float)(*((float *)this + 1) * *((float *)this + 1)))+ (float)(*((float *)this + 2) * *((float *)this + 2)))+ (float)(*((float *)this + 3) * *((float *)this + 3)));
  result = 0.0;
  if (v1 != 0.0)
    return v1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetNormalized(pxrInternal__aapl__pxrReserved__::GfDualQuatf *this@<X0>, float a2@<S0>, uint64_t a3@<X8>)
{
  __int128 v3;

  v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v3;
  pxrInternal__aapl__pxrReserved__::GfDualQuatf::Normalize((float32x4_t *)a3, a2);
}

void pxrInternal__aapl__pxrReserved__::GfDualQuatf::Normalize(float32x4_t *this, float a2)
{
  float Length;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;

  Length = pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetLength((pxrInternal__aapl__pxrReserved__::GfDualQuatf *)this);
  if (Length >= a2)
  {
    v6 = this[1];
    v5 = vmulq_n_f32(*this, 1.0 / Length);
    this->i32[1] = v5.i32[1];
    this->i64[1] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
    v7 = vmulq_n_f32(v6, 1.0 / Length);
    v8 = (int32x4_t)vmulq_f32(v5, v7);
    this[1] = vsubq_f32(v7, vmulq_n_f32(v5, vadd_f32((float32x2_t)vdup_laneq_s32(v8, 3), vadd_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL))).f32[0]));
  }
  else
  {
    this->i32[1] = 0;
    this->i32[2] = 0;
    this->i32[3] = 1065353216;
    v5.i32[0] = 0;
    this[1].i64[0] = 0;
    this[1].i64[1] = 0;
  }
  this->i32[0] = v5.i32[0];
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetConjugate@<D0>(float32x2_t *this@<X0>, float32x2_t *a2@<X8>)
{
  __int32 v2;
  float32_t v3;
  __int32 v4;
  float32_t v5;
  float32x2_t result;

  v2 = this[1].i32[1];
  v3 = -this[1].f32[0];
  v4 = this[3].i32[1];
  v5 = -this[3].f32[0];
  *a2 = vneg_f32(*this);
  a2[1].f32[0] = v3;
  a2[1].i32[1] = v2;
  result = vneg_f32(this[2]);
  a2[2] = result;
  a2[3].f32[0] = v5;
  a2[3].i32[1] = v4;
  return result;
}

float32x2_t *pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetInverse@<X0>(float32x2_t *this@<X0>, uint64_t a2@<X8>)
{
  float32x2_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float v17;
  __int32 v18;

  v2 = *this;
  v3 = this[1].f32[0];
  v4 = this[1].f32[1];
  v5 = (float)(vaddv_f32(vmul_f32(v2, v2)) + (float)(v3 * v3)) + (float)(v4 * v4);
  if (v5 <= 0.0)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v9 = 1.0;
    v16.i32[0] = 0;
    v18 = 0;
    v10 = 0.0;
  }
  else
  {
    v6 = 1.0 / v5;
    v8 = this[3].f32[0];
    v7 = this[3].f32[1];
    v9 = v4 * (float)(1.0 / v5);
    v10 = -(float)(v3 * v6);
    v11 = v6 * v7;
    v12 = -(float)(v8 * v6);
    v13 = v3 * v8;
    v14 = v4 * v7;
    v15 = this[2];
    v16 = vmul_n_f32(vneg_f32(v2), v6);
    v17 = (v6 + v6) * (float)((float)(vaddv_f32(vmul_f32(v2, v15)) + v13) + v14);
    *(float32x2_t *)(a2 + 16) = vsub_f32(vmul_n_f32(vneg_f32(v15), v6), vmul_n_f32(v16, v17));
    *(float *)(a2 + 24) = v12 - (float)(v10 * v17);
    *(float *)(a2 + 28) = v11 - (float)(v9 * v17);
    v18 = v16.i32[1];
  }
  *(_DWORD *)a2 = v16.i32[0];
  *(_DWORD *)(a2 + 4) = v18;
  *(float *)(a2 + 8) = v10;
  *(float *)(a2 + 12) = v9;
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::GfDualQuatf::SetTranslation(__n128 *a1, float32x2_t *a2)
{
  float v3;
  __n128 *v4;
  __n128 result;
  float32x2_t v6;
  float v7;
  int v8;

  v3 = a2[1].f32[0];
  v6 = vmul_f32(*a2, (float32x2_t)0x3F0000003F000000);
  v7 = v3 * 0.5;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v6, (float *)a1);
  result = *v4;
  a1[1] = *v4;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetTranslation(pxrInternal__aapl__pxrReserved__::GfDualQuatf *this)
{
  return (float)((float)((float)(*((float *)this + 7) * *(float *)this)
                       - (float)(*((float *)this + 3) * *((float *)this + 4)))
               + (float)((float)(*((float *)this + 5) * *((float *)this + 2))
                       - (float)(*((float *)this + 6) * *((float *)this + 1))))
       * -2.0;
}

__int128 *pxrInternal__aapl__pxrReserved__::GfDualQuatf::operator*=(__int128 *a1, float *a2)
{
  __int128 *v4;
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;

  v11 = *a1;
  pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v11, a2);
  v10 = *v4;
  v11 = *a1;
  pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v11, a2 + 4);
  v9 = *v5;
  v11 = a1[1];
  pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v11, a2);
  v7 = vaddq_f32(v9, *v6);
  *a1 = v10;
  a1[1] = (__int128)v7;
  return a1;
}

float pxrInternal__aapl__pxrReserved__::GfDualQuatf::Transform(float *a1, float *a2)
{
  float v3;

  v3 = pxrInternal__aapl__pxrReserved__::GfQuatf::Transform(a1, a2);
  return v3
       + pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetTranslation((pxrInternal__aapl__pxrReserved__::GfDualQuatf *)a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, int8x16_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int8x16_t v8;
  int8x16_t v9;
  char v10;

  v9.i8[0] = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v9, 1);
  v9 = *a2;
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, &v9);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v8 = a2[1];
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, &v8);
  v10 = 41;
  return sub_20BDDC1C8(v6, (uint64_t)&v10, 1);
}

{
  int8x16_t v3;

  v3 = vextq_s8(*a2, *a2, 0xCuLL);
  return pxrInternal__aapl__pxrReserved__::operator<<(a1, (float *)v3.i32);
}

uint64_t *sub_20BEF6180()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BEF0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BEF0, (char *)0x20, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::GfDualQuath *pxrInternal__aapl__pxrReserved__::GfDualQuath::GfDualQuath(pxrInternal__aapl__pxrReserved__::GfDualQuath *this, const pxrInternal__aapl__pxrReserved__::GfDualQuatd *a2)
{
  uint64_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)(v4 + 8), (const pxrInternal__aapl__pxrReserved__::GfDualQuatd *)((char *)a2 + 32));
  return this;
}

{
  uint64_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)(v4 + 8), (const pxrInternal__aapl__pxrReserved__::GfDualQuatd *)((char *)a2 + 32));
  return this;
}

pxrInternal__aapl__pxrReserved__::GfDualQuath *pxrInternal__aapl__pxrReserved__::GfDualQuath::GfDualQuath(pxrInternal__aapl__pxrReserved__::GfDualQuath *this, const pxrInternal__aapl__pxrReserved__::GfDualQuatf *a2)
{
  uint64_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)(v4 + 8), (const pxrInternal__aapl__pxrReserved__::GfDualQuatf *)((char *)a2 + 16));
  return this;
}

{
  uint64_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)(v4 + 8), (const pxrInternal__aapl__pxrReserved__::GfDualQuatf *)((char *)a2 + 16));
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetLength(pxrInternal__aapl__pxrReserved__::GfDualQuath *this)
{
  float v2;
  unsigned int v3;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned int v7;

  v6 = sub_20BEF6450((unsigned __int16 *)this);
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v6] == 0.0)
  {
    v5 = 0;
    sub_20BEF7034(&v7, (int *)&v5 + 1, (int *)&v5);
  }
  else
  {
    v2 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)this, (unsigned __int16 *)this + 4)]+ (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]* pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 7)]);
    if (v2 == 0.0)
    {
      v3 = HIWORD(LODWORD(v2));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23])
    {
      v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23]
         + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v3) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
    }
    *((float *)&v5 + 1) = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v3]
                        / pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v6];
    sub_20BEF7190(&v7, &v6, (float *)&v5 + 1);
  }
  return v7;
}

uint64_t sub_20BEF6450(unsigned __int16 *a1)
{
  float v1;

  v1 = sqrtf(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF6FAC(a1)]);
  if (v1 == 0.0)
    return HIWORD(LODWORD(v1));
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]
         + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
}

uint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetNormalized(__int128 *a1, unsigned __int16 a2)
{
  __int128 v3;

  v3 = *a1;
  pxrInternal__aapl__pxrReserved__::GfDualQuath::Normalize((unsigned __int16 *)&v3, a2);
  return v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::Normalize(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t Length;
  float v5;
  float v6;
  unsigned int v7;
  unsigned __int16 v8;
  float v9;
  unsigned int v10;
  uint64_t v12;

  Length = pxrInternal__aapl__pxrReserved__::GfDualQuath::GetLength((pxrInternal__aapl__pxrReserved__::GfDualQuath *)a1);
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)Length];
  if (v5 >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2])
  {
    v6 = 1.0 / v5;
    if (v6 == 0.0)
    {
      v7 = HIWORD(LODWORD(v6));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
    {
      v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
         + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
    }
    v8 = v7;
    sub_20BEF6678(a1, v7);
    sub_20BEF6678(a1 + 4, v8);
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0(a1, a1 + 4)]
       + (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
               * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[7]]);
    if (v9 == 0.0)
    {
      v10 = HIWORD(LODWORD(v9));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23])
    {
      v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23]
          + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
    }
    v12 = *(_QWORD *)a1;
    v12 = *(_QWORD *)sub_20BEF6678((unsigned __int16 *)&v12, v10);
    sub_20BEF6714(a1 + 4, (unsigned __int16 *)&v12);
  }
  else
  {
    *(_QWORD *)a1 = 0x3C00000000000000;
    *((_QWORD *)a1 + 1) = 0;
  }
  return Length;
}

unsigned __int16 *sub_20BEF6678(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v3;
  float v4;
  unsigned int v5;

  v3 = a2;
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2];
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  a1[3] = v5;
  sub_20BEF7204(a1, pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3]);
  return a1;
}

unsigned __int16 *sub_20BEF6714(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4;
  unsigned int v5;

  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  a1[3] = v5;
  sub_20BEF7334(a1, a2);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetConjugate(pxrInternal__aapl__pxrReserved__::GfDualQuath *this)
{
  return ((*((unsigned __int16 *)this + 1) ^ 0x8000) << 16) | ((unint64_t)(*((unsigned __int16 *)this + 2) ^ 0x8000u) << 32) | *(unsigned __int16 *)this ^ 0x8000 | ((unint64_t)*((unsigned __int16 *)this + 3) << 48);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetInverse(pxrInternal__aapl__pxrReserved__::GfDualQuath *this)
{
  float v2;
  unsigned int v3;
  float v4;
  float v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float v13;
  unsigned int v14;
  float v15;
  unsigned int v16;
  uint64_t v18;
  __int128 v19;

  v2 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)this, (unsigned __int16 *)this)]+ (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]* pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]);
  if (v2 == 0.0)
  {
    v3 = HIWORD(LODWORD(v2));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23])
  {
    v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23]
       + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v3) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
  }
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v3];
  if (v4 <= 0.0)
    return 0x3C00000000000000;
  v5 = 1.0 / v4;
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23])
  {
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23]
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *(_QWORD *)&v19 = pxrInternal__aapl__pxrReserved__::GfDualQuath::GetConjugate(this);
  *((_QWORD *)&v19 + 1) = v8;
  v9 = (unsigned __int16)v6;
  v7 = sub_20BEF6A58(&v19, v6);
  v11 = v10;
  v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v9]
      + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v9];
  v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)this, (unsigned __int16 *)this + 4)]+ (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]* pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 7)]);
  if (v13 == 0.0)
  {
    v14 = HIWORD(LODWORD(v13));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23])
  {
    v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23]
        + (((LODWORD(v13) & 0x7FFFFF) + ((LODWORD(v13) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v14) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v13));
  }
  v15 = v12 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v14];
  if (v15 == 0.0)
  {
    v16 = HIWORD(LODWORD(v15));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23])
  {
    v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23]
        + (((LODWORD(v15) & 0x7FFFFF) + ((LODWORD(v15) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v16) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v15));
  }
  *(_QWORD *)&v19 = v7;
  v18 = *(_QWORD *)sub_20BEF6678((unsigned __int16 *)&v19, v16);
  *(_QWORD *)&v19 = v11;
  sub_20BEF6714((unsigned __int16 *)&v19, (unsigned __int16 *)&v18);
  return v7;
}

uint64_t sub_20BEF6A58(__int128 *a1, unsigned __int16 a2)
{
  __int128 v4;

  v4 = *a1;
  sub_20BEF6678((unsigned __int16 *)&v4, a2);
  sub_20BEF6678((unsigned __int16 *)&v4 + 4, a2);
  return v4;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfDualQuath::SetTranslation(uint64_t a1, int *a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *result;
  int v5;
  __int16 v6;
  unint64_t v7;

  v5 = *a2;
  v6 = *((_WORD *)a2 + 2);
  v3 = sub_20BEF7204((unsigned __int16 *)&v5, 0.5);
  v7 = *(unsigned int *)v3 | ((unint64_t)v3[2] << 32);
  result = pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)&v7, (unsigned __int16 *)a1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)result;
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetTranslation(pxrInternal__aapl__pxrReserved__::GfDualQuath *this)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  float v16;
  uint64_t v17;

  v2 = *((unsigned __int16 *)this + 7);
  v3 = *((unsigned __int16 *)this + 3);
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v2];
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)this];
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3];
  v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 4)];
  v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 5)];
  v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 2)];
  v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 6)];
  v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 1)];
  v12 = (float)((float)((float)(v4 * v5) - (float)(v6 * v7)) + (float)((float)(v8 * v9) - (float)(v10 * v11))) * -2.0;
  if (v12 == 0.0)
  {
    v13 = HIWORD(LODWORD(v12));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
  {
    v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
        + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
    v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v2];
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 1)];
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3];
    v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 5)];
    v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 6)];
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)this];
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 4)];
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 2)];
  }
  v14 = (float)((float)((float)(v4 * v11) - (float)(v6 * v8)) + (float)((float)(v10 * v5) - (float)(v7 * v9))) * -2.0;
  if (v14 == 0.0)
  {
    v15 = HIWORD(LODWORD(v14));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
  {
    v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
        + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
    v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v2];
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 2)];
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3];
    v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 6)];
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 4)];
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 1)];
    v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 5)];
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)this];
  }
  v16 = (float)((float)((float)(v4 * v9) - (float)(v6 * v10)) + (float)((float)(v7 * v11) - (float)(v8 * v5))) * -2.0;
  if (v16 == 0.0)
  {
    v17 = HIWORD(LODWORD(v16));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v16) >> 23])
  {
    v17 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v16) >> 23]
        + (((LODWORD(v16) & 0x7FFFFF) + ((LODWORD(v16) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    v17 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v16));
  }
  return ((unint64_t)(unsigned __int16)v15 << 16) | (v17 << 32) | (unsigned __int16)v13;
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfDualQuath::operator*=(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v9 = *a1;
  v4 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)&v9, a2);
  v9 = *a1;
  v5 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)&v9, a2 + 4);
  v9 = a1[1];
  v8 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)&v9, a2);
  v9 = v5;
  v6 = *(_QWORD *)sub_20BEF747C((unsigned __int16 *)&v9, (unsigned __int16 *)&v8);
  *a1 = v4;
  a1[1] = v6;
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::Transform(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v3;
  unint64_t Translation;
  unsigned __int16 *v5;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;

  v3 = pxrInternal__aapl__pxrReserved__::GfQuath::Transform(a1, a2);
  Translation = pxrInternal__aapl__pxrReserved__::GfDualQuath::GetTranslation((pxrInternal__aapl__pxrReserved__::GfDualQuath *)a1);
  v7 = Translation;
  v8 = WORD2(Translation);
  v10 = WORD2(v3);
  v9 = v3;
  v5 = sub_20BEF7510((unsigned __int16 *)&v9, (unsigned __int16 *)&v7);
  return *(unsigned int *)v5 | ((unint64_t)v5[2] << 32);
}

uint64_t *sub_20BEF6EAC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF00, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF00, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEF6F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEF6FAC(unsigned __int16 *a1)
{
  float v1;

  v1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0(a1, a1)]
     + (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
             * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]);
  if (v1 == 0.0)
    return HIWORD(LODWORD(v1));
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]
         + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
}

_WORD *sub_20BEF7034(_WORD *a1, int *a2, int *a3)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v7;
  unsigned int v8;

  v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*a2);
  if (*a2)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
      v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
         + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
  }
  else
  {
    v6 = v5 >> 16;
  }
  *a1 = v6;
  v7 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*a3);
  if (*a3)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23])
      v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]
         + (((v7 & 0x7FFFFF) + ((v7 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v7);
  }
  else
  {
    v8 = v7 >> 16;
  }
  a1[1] = v8;
  return a1;
}

uint64_t sub_20BEF70F0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v2;

  v2 = (float)((float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
                     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2])
             + (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
                     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]))
     + (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
             * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]]);
  if (v2 == 0.0)
    return HIWORD(LODWORD(v2));
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23]
         + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
}

_WORD *sub_20BEF7190(_WORD *a1, _WORD *a2, float *a3)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v4;
  unsigned int v5;

  *a1 = *a2;
  v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)a3;
  if (*a3 == 0.0)
  {
    v5 = v4 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
       + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
  }
  a1[1] = v5;
  return a1;
}

unsigned __int16 *sub_20BEF7204(unsigned __int16 *a1, double a2)
{
  float v3;
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;

  v3 = a2;
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] * v3;
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v3;
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] * v3;
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  return a1;
}

unsigned __int16 *sub_20BEF7334(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;

  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
     - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
     - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
     - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  return a1;
}

unsigned __int16 *sub_20BEF747C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4;
  unsigned int v5;

  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  a1[3] = v5;
  sub_20BEF7510(a1, a2);
  return a1;
}

unsigned __int16 *sub_20BEF7510(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;

  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  return a1;
}

void sub_20BEF765C()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "GfFrustum::Orthographic");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51BF20, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "GfFrustum::Perspective");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51BF20, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20BEF771C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 56) = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 72) = _Q0;
  result = 1.0;
  *(_OWORD *)((char *)this + 88) = xmmword_20CA5AC40;
  *((_QWORD *)this + 13) = 0x4014000000000000;
  *((_DWORD *)this + 28) = 1;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 56) = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 72) = _Q0;
  result = 1.0;
  *(_OWORD *)((char *)this + 88) = xmmword_20CA5AC40;
  *((_QWORD *)this + 13) = 0x4014000000000000;
  *((_DWORD *)this + 28) = 1;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(uint64_t result, __int128 *a2, __int128 *a3, __int128 *a4, _OWORD *a5, int a6, double a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v7 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v7;
  v8 = *a3;
  *(_OWORD *)(result + 40) = a3[1];
  *(_OWORD *)(result + 24) = v8;
  v9 = *a4;
  *(_OWORD *)(result + 72) = a4[1];
  *(_OWORD *)(result + 56) = v9;
  *(_OWORD *)(result + 88) = *a5;
  *(double *)(result + 104) = a7;
  *(_DWORD *)(result + 112) = a6;
  *(_QWORD *)(result + 120) = 0;
  return result;
}

{
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v7 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v7;
  v8 = *a3;
  *(_OWORD *)(result + 40) = a3[1];
  *(_OWORD *)(result + 24) = v8;
  v9 = *a4;
  *(_OWORD *)(result + 72) = a4[1];
  *(_OWORD *)(result + 56) = v9;
  *(_OWORD *)(result + 88) = *a5;
  *(double *)(result + 104) = a7;
  *(_DWORD *)(result + 112) = a6;
  *(_QWORD *)(result + 120) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(uint64_t a1, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, __int128 *a3, _OWORD *a4, int a5, double a6)
{
  __int128 v7;

  v7 = *a3;
  *(_OWORD *)(a1 + 72) = a3[1];
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 88) = *a4;
  *(double *)(a1 + 104) = a6;
  *(_DWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 120) = 0;
  pxrInternal__aapl__pxrReserved__::GfFrustum::SetPositionAndRotationFromMatrix((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1, a2);
  return a1;
}

{
  __int128 v7;

  v7 = *a3;
  *(_OWORD *)(a1 + 72) = a3[1];
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 88) = *a4;
  *(double *)(a1 + 104) = a6;
  *(_DWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 120) = 0;
  pxrInternal__aapl__pxrReserved__::GfFrustum::SetPositionAndRotationFromMatrix((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1, a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::SetPositionAndRotationFromMatrix(pxrInternal__aapl__pxrReserved__::GfFrustum *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v3 = *((_OWORD *)a2 + 5);
  v32 = *((_OWORD *)a2 + 4);
  v33 = v3;
  v4 = *((_OWORD *)a2 + 7);
  v34 = *((_OWORD *)a2 + 6);
  v35 = v4;
  v5 = *((_OWORD *)a2 + 1);
  v28 = *(_OWORD *)a2;
  v29 = v5;
  v6 = *((_OWORD *)a2 + 3);
  v30 = *((_OWORD *)a2 + 2);
  v31 = v6;
  if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetHandedness((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v28) != 1.0)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_2549852F8);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2549852F8))
    {
      __asm { FMOV            V1.2D, #1.0 }
      v20 = xmmword_20CA53AD0;
      v21 = _Q1;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&xmmword_254985278, (uint64_t)&v20);
      __cxa_guard_release(&qword_2549852F8);
    }
    v24 = xmmword_2549852B8;
    v25 = unk_2549852C8;
    v26 = xmmword_2549852D8;
    v27 = unk_2549852E8;
    v20 = xmmword_254985278;
    v21 = unk_254985288;
    v22 = xmmword_254985298;
    v23 = unk_2549852A8;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v20, (double *)&v28);
    v32 = v24;
    v33 = v25;
    v34 = v26;
    v35 = v27;
    v28 = v20;
    v29 = v21;
    v30 = v22;
    v31 = v23;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v28, 1);
  *((double *)this + 3) = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v28);
  *((_QWORD *)this + 4) = v8;
  *((_QWORD *)this + 5) = v9;
  *((_QWORD *)this + 6) = v10;
  v11 = (unint64_t *)((char *)this + 120);
  do
    v12 = (void *)__ldxr(v11);
  while (__stxr(0, v11));
  if (v12)
    operator delete(v12);
  v13 = v35;
  *(_OWORD *)this = v34;
  *((_QWORD *)this + 2) = v13;
  do
    v14 = (void *)__ldxr(v11);
  while (__stxr(0, v11));
  if (v14)
    operator delete(v14);
}

void sub_20BEF79FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549852F8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::~GfFrustum(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 15);
  if (v1)
    operator delete(v1);
}

{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 15);
  if (v1)
    operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::SetPerspective(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double a2, double a3, double a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::GfFrustum::SetPerspective(this, a2, 1, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::SetPerspective(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double a2, int a3, double a4, double a5, double a6)
{
  double v10;
  double v11;
  double v12;
  unint64_t *v13;
  void *v14;

  *((_DWORD *)this + 28) = 1;
  if (a4 == 0.0)
    v10 = 1.0;
  else
    v10 = a4;
  v11 = tan(a2 * 0.5 * 0.0174532925);
  v12 = v11 / v10;
  if (a3)
  {
    v12 = v11;
    v11 = v10 * v11;
  }
  *((double *)this + 7) = -v11;
  *((double *)this + 8) = -v12;
  *((double *)this + 9) = v11;
  *((double *)this + 10) = v12;
  *((double *)this + 11) = a5;
  *((double *)this + 12) = a6;
  v13 = (unint64_t *)((char *)this + 120);
  do
    v14 = (void *)__ldxr(v13);
  while (__stxr(0, v13));
  if (v14)
    operator delete(v14);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::_DirtyFrustumPlanes(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  unint64_t *v1;
  void *v2;

  v1 = (unint64_t *)((char *)this + 120);
  do
    v2 = (void *)__ldxr(v1);
  while (__stxr(0, v1));
  if (v2)
    operator delete(v2);
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::GetPerspective(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double *a2, double *a3, double *a4, double *a5)
{
  return pxrInternal__aapl__pxrReserved__::GfFrustum::GetPerspective(this, 1, a2, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::GetPerspective(pxrInternal__aapl__pxrReserved__::GfFrustum *this, int a2, double *a3, double *a4, double *a5, double *a6)
{
  int v6;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;

  v6 = *((_DWORD *)this + 28);
  if (v6 == 1)
  {
    v12 = *((double *)this + 9);
    v13 = *((double *)this + 10);
    v14 = *((double *)this + 7);
    v15 = *((double *)this + 8);
    v16 = v12 - v14;
    v17 = v13 - v15;
    if (a2)
      v18 = v13 - v15;
    else
      v18 = v12 - v14;
    v19 = atan(v18 * 0.5);
    *a3 = v19 * 57.2957795 + v19 * 57.2957795;
    *a4 = v16 / v17;
    *a5 = *((double *)this + 11);
    *a6 = *((double *)this + 12);
  }
  return v6 == 1;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::GetFOV(pxrInternal__aapl__pxrReserved__::GfFrustum *this, int a2)
{
  double result;
  double v3;
  double v4;
  double v5;
  double v6;

  v6 = 0.0;
  result = 0.0;
  if (*((_DWORD *)this + 28) == 1)
  {
    pxrInternal__aapl__pxrReserved__::GfFrustum::GetPerspective(this, a2, &v6, &v5, &v4, &v3);
    return v6;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::SetOrthographic(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  unint64_t *v7;
  void *v8;

  *((_DWORD *)this + 28) = 0;
  *((double *)this + 7) = a2;
  *((double *)this + 8) = a4;
  *((double *)this + 9) = a3;
  *((double *)this + 10) = a5;
  *((double *)this + 11) = a6;
  *((double *)this + 12) = a7;
  v7 = (unint64_t *)((char *)this + 120);
  do
    v8 = (void *)__ldxr(v7);
  while (__stxr(0, v7));
  if (v8)
    operator delete(v8);
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::GetOrthographic(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  int v7;

  v7 = *((_DWORD *)this + 28);
  if (!v7)
  {
    *a2 = *((double *)this + 7);
    *a3 = *((double *)this + 9);
    *a4 = *((double *)this + 8);
    *a5 = *((double *)this + 10);
    *a6 = *((double *)this + 11);
    *a7 = *((double *)this + 12);
  }
  return v7 == 0;
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfFrustum::FitToSphere(uint64_t a1, float64x2_t *a2, double a3, double a4)
{
  double v6;
  _BOOL8 v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  float64x2_t v14;
  double v15;
  float64_t v16;
  float64_t v17;
  float64x2_t result;
  double v19;
  int64x2_t v20;
  unint64_t v21;

  if (*(_DWORD *)(a1 + 112))
  {
    v6 = *(double *)(a1 + 80) - *(double *)(a1 + 64);
    v7 = v6 != 0.0 && fabs((*(double *)(a1 + 72) - *(double *)(a1 + 56)) / v6) > 1.0;
    v10 = a1 + 8 * v7;
    v11 = *(double *)(v10 + 56);
    v12 = *(double *)(v10 + 72);
    if (v11 <= 0.0 && (v12 < -v11 || v12 < 0.0))
      v12 = *(double *)(v10 + 56);
    if (v12 >= 0.0)
    {
      if (v12 == 0.0)
        v12 = 1.0;
    }
    else
    {
      v12 = -v12;
    }
    v9 = 1.0 / v12 * a3 * sqrt(v12 * v12 + *(double *)(a1 + 88) * *(double *)(a1 + 88));
    *(double *)(a1 + 104) = v9;
    v8 = a3 + a4;
  }
  else
  {
    v8 = a3 + a4;
    *(double *)(a1 + 104) = v8;
    *(double *)(a1 + 56) = -a3;
    *(double *)(a1 + 64) = -a3;
    *(double *)(a1 + 72) = a3;
    *(double *)(a1 + 80) = a3;
    v9 = v8;
  }
  *(double *)(a1 + 88) = v9 - v8;
  *(double *)(a1 + 96) = v8 + v8 + v9 - v8;
  v19 = v9;
  v20 = vdupq_n_s64(0x8000000000000000);
  v21 = 0xBFF0000000000000;
  v14.f64[0] = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)(a1 + 24), (double *)v20.i64);
  v14.f64[1] = v16;
  v17 = a2[1].f64[0] - v19 * v15;
  result = vsubq_f64(*a2, vmulq_n_f64(v14, v19));
  *(float64x2_t *)a1 = result;
  *(float64_t *)(a1 + 16) = v17;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeAspectRatio(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  double v1;

  v1 = *((double *)this + 10) - *((double *)this + 8);
  if (v1 == 0.0)
    return 0.0;
  else
    return fabs((*((double *)this + 9) - *((double *)this + 7)) / v1);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeViewDirection(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  int64x2_t v2;
  unint64_t v3;

  v2 = vdupq_n_s64(0x8000000000000000);
  v3 = 0xBFF0000000000000;
  return pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)v2.i64);
}

pxrInternal__aapl__pxrReserved__::GfFrustum *pxrInternal__aapl__pxrReserved__::GfFrustum::Transform(pxrInternal__aapl__pxrReserved__::GfFrustum *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int32x2_t v44;
  int64x2_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float64_t v61;
  unint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  float64_t v66;
  unint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v77;
  double v78;
  double v79;
  float64x2_t v80;
  unint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  int64x2_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  double v104;
  double Rotation;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  float64x2_t v111;
  double v112;
  int v113;
  void *v114;

  v103 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v109 = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  v110 = _Q0;
  v111 = (float64x2_t)xmmword_20CA5AC40;
  v104 = 0.0;
  Rotation = 1.0;
  v114 = 0;
  v112 = 5.0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v113 = *((_DWORD *)this + 28);
  v10 = sub_20BEF4828((double *)a2, (double *)this);
  *(double *)&v103 = v10;
  *((double *)&v103 + 1) = v11;
  v78 = v11;
  v79 = v12;
  v104 = v12;
  v100 = 0.0;
  v101 = 0;
  v102 = 0;
  v89 = vdupq_n_s64(0x8000000000000000);
  v90 = -1.0;
  v100 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)v89.i64);
  v101 = v13;
  v102 = v14;
  v97 = 0.0;
  v98 = 0;
  v99 = 0;
  v89 = (int64x2_t)xmmword_20CA52210;
  v90 = 0.0;
  v97 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)v89.i64);
  v98 = v15;
  v99 = v16;
  v17 = sub_20BEF834C((double *)a2, &v100);
  v19 = v18;
  v21 = v20;
  v22 = sub_20BEF834C((double *)a2, &v97);
  v24 = v23;
  v26 = v25;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v89, 1.0);
  v27 = sqrt(v21 * v21 + v17 * v17 + v19 * v19);
  v28 = sqrt(v26 * v26 + v22 * v22 + v24 * v24);
  v29 = 1.0 / v28;
  v30 = v28 <= 1.0e-10;
  v31 = 1.0e10;
  if (v30)
    v29 = 1.0e10;
  v32 = v24 * v29;
  v33 = 1.0 / v27;
  v77 = v27;
  if (v27 <= 1.0e-10)
    v34 = 1.0e10;
  else
    v34 = 1.0 / v27;
  v35 = v22 * v29;
  v36 = v17 * v34 * v32 - v19 * v34 * (v22 * v29);
  v37 = v26 * v29;
  v38 = v19 * v34 * v37 - v21 * v34 * v32;
  v39 = v21 * v34 * v35 - v17 * v34 * v37;
  v40 = sqrt(v36 * v36 + v38 * v38 + v39 * v39);
  if (v40 > 1.0e-10)
    v31 = 1.0 / v40;
  *(double *)v89.i64 = v38 * v31;
  *(double *)&v89.i64[1] = v39 * v31;
  v90 = v36 * v31;
  v91 = v35;
  v92 = v32;
  v93 = v37;
  v94 = -(v17 * v34);
  v95 = -(v19 * v34);
  v96 = -(v21 * v34);
  Rotation = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v89);
  v106 = v41;
  v107 = v42;
  v108 = v43;
  v44 = vdup_n_s32(v77 > 0.0);
  v45.i64[0] = v44.u32[0];
  v45.i64[1] = v44.u32[1];
  v111 = vmulq_n_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v45, 0x3FuLL)), *(int8x16_t *)((char *)this + 88), vextq_s8(*(int8x16_t *)((char *)this + 88), *(int8x16_t *)((char *)this + 88), 8uLL)), v77);
  v112 = v77 * *((double *)this + 13);
  v80 = *(float64x2_t *)((char *)this + 56);
  v81 = 0xBFF0000000000000;
  v46 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), v80.f64);
  v48 = v47 + *((double *)this + 1);
  v50 = v49 + *((double *)this + 2);
  v86 = v46 + *(double *)this;
  v87 = v48;
  v88 = v50;
  v80 = *(float64x2_t *)((char *)this + 72);
  v81 = 0xBFF0000000000000;
  v51 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), v80.f64);
  v53 = v52 + *((double *)this + 1);
  v55 = v54 + *((double *)this + 2);
  v83 = v51 + *(double *)this;
  v84 = v53;
  v85 = v55;
  v86 = sub_20BEF4828((double *)a2, &v86);
  v87 = v56;
  v88 = v57;
  v58 = sub_20BEF4828((double *)a2, &v83);
  v86 = v86 - v10;
  v87 = v87 - v78;
  v88 = v88 - v79;
  v83 = v58 - v10;
  v84 = v59 - v78;
  v85 = v60 - v79;
  v80.f64[0] = sub_20BEF83AC(&Rotation);
  v80.f64[1] = v61;
  v81 = v62;
  v82 = v63;
  v86 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(&v80, &v86);
  v87 = v64;
  v88 = v65;
  v80.f64[0] = sub_20BEF83AC(&Rotation);
  v80.f64[1] = v66;
  v81 = v67;
  v82 = v68;
  v69 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(&v80, &v83);
  v83 = v69;
  v84 = v70;
  v85 = v71;
  v73 = v86;
  v72 = v87;
  if (*((_DWORD *)this + 28) == 1)
  {
    v73 = v33 * v86;
    v72 = v33 * v87;
    v86 = v33 * v86;
    v87 = v33 * v87;
    v88 = v33 * v88;
    v69 = v33 * v69;
    v70 = v33 * v70;
    v83 = v69;
    v84 = v70;
    v85 = v33 * v71;
  }
  if (v73 <= v69)
    v74 = v73;
  else
    v74 = v69;
  if (v73 > v69)
    v69 = v73;
  if (v72 <= v70)
    v75 = v72;
  else
    v75 = v70;
  *(double *)&v109 = v74;
  *((double *)&v109 + 1) = v75;
  if (v72 > v70)
    v70 = v72;
  *(double *)&v110 = v69;
  *((double *)&v110 + 1) = v70;
  sub_20BEF8414((uint64_t)this, &v103);
  if (v114)
    operator delete(v114);
  return this;
}

void sub_20BEF82D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
    operator delete(v3);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeUpVector(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  __int128 v2;
  uint64_t v3;

  v2 = xmmword_20CA52210;
  v3 = 0;
  return pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)&v2);
}

double sub_20BEF834C(double *a1, double *a2)
{
  return *a2 * *a1 + a2[1] * a1[4] + a2[2] * a1[8];
}

double sub_20BEF83AC(double *a1)
{
  double result;
  double v2;
  double v3;
  double v4;
  BOOL v5;
  double v6;

  result = *a1;
  v2 = result * result + a1[1] * a1[1] + a1[2] * a1[2];
  if (fabs(v2 + -1.0) >= 1.0e-10)
  {
    v3 = sqrt(v2);
    v4 = 1.0 / v3;
    v5 = v3 <= 1.0e-10;
    v6 = 1.0e10;
    if (!v5)
      v6 = v4;
    return result * v6;
  }
  return result;
}

uint64_t sub_20BEF8414(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  __int128 *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if ((__int128 *)a1 != a2)
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    v6 = *(__int128 *)((char *)a2 + 56);
    *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    v7 = *(void **)(a1 + 120);
    if (v7)
      operator delete(v7);
    v8 = (__int128 *)*((_QWORD *)a2 + 15);
    if (v8)
    {
      v9 = operator new(0xC0uLL);
      v10 = *v8;
      v11 = v8[1];
      v12 = v8[3];
      v9[2] = v8[2];
      v9[3] = v12;
      *v9 = v10;
      v9[1] = v11;
      v13 = v8[4];
      v14 = v8[5];
      v15 = v8[7];
      v9[6] = v8[6];
      v9[7] = v15;
      v9[4] = v13;
      v9[5] = v14;
      v16 = v8[8];
      v17 = v8[9];
      v18 = v8[11];
      v9[10] = v8[10];
      v9[11] = v18;
      v9[8] = v16;
      v9[9] = v17;
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)(a1 + 120) = v9;
  }
  return a1;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeViewFrame(uint64_t a1, double *a2, double *a3, double *a4)
{
  float64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  int64x2_t v18;
  unint64_t v19;

  v7 = (float64x2_t *)(a1 + 24);
  v18 = (int64x2_t)xmmword_20CA52210;
  v19 = 0;
  *a3 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)(a1 + 24), (double *)v18.i64);
  *((_QWORD *)a3 + 1) = v8;
  *((_QWORD *)a3 + 2) = v9;
  v18 = vdupq_n_s64(0x8000000000000000);
  v19 = 0xBFF0000000000000;
  v10 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(v7, (double *)v18.i64);
  *a4 = v10;
  a4[1] = v11;
  a4[2] = v12;
  v14 = a3[1];
  v13 = a3[2];
  v15 = v11 * v13 - v12 * v14;
  v16 = v12 * *a3 - v10 * v13;
  result = v10 * v14 - v11 * *a3;
  *a2 = v15;
  a2[1] = v16;
  a2[2] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeLookAtPoint(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  double v1;
  int64x2_t v3;
  unint64_t v4;

  v1 = *((double *)this + 13);
  v3 = vdupq_n_s64(0x8000000000000000);
  v4 = 0xBFF0000000000000;
  return *(double *)this
       + v1
       * pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)v3.i64);
}

_OWORD *pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeViewMatrix@<X0>(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, _OWORD *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(a2, (double *)this, (double *)this + 3);
}

double *pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeViewInverse@<X0>(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD v4[8];

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(v4, (double *)this, (double *)this + 3);
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)v4, 0, 0.0, a2);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeProjectionMatrix@<D0>(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double result;

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a2, 1.0);
  v5 = *((double *)this + 7);
  v4 = *((double *)this + 8);
  v7 = *((double *)this + 9);
  v6 = *((double *)this + 10);
  v8 = *((double *)this + 11);
  v9 = *((double *)this + 12);
  v10 = v7 - v5;
  v11 = v6 - v4;
  v12 = *((_DWORD *)this + 28);
  *(double *)a2 = 2.0 / (v7 - v5);
  if (v12)
  {
    v13 = -(v8 + v9);
    *(double *)(a2 + 64) = (v5 + v7) / v10;
    *(double *)(a2 + 72) = (v4 + v6) / v11;
    v14 = v8 * -2.0 * v9;
    *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 120) = 0;
  }
  else
  {
    *(double *)(a2 + 96) = -(v5 + v7) / v10;
    *(double *)(a2 + 104) = -(v4 + v6) / v11;
    v14 = -(v8 + v9);
    v13 = -2.0;
  }
  v15 = v9 - v8;
  *(double *)(a2 + 40) = 2.0 / v11;
  *(double *)(a2 + 80) = v13 / v15;
  result = v14 / v15;
  *(double *)(a2 + 112) = v14 / v15;
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeCorners(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, void **a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  char *v28;
  double *v29;
  double *v30;
  __int128 v31;
  double v32;
  double v33;
  unint64_t v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  double *v55;
  char *v56;
  double *v57;
  double *v58;
  __int128 v59;
  double v60;
  double v61;
  unint64_t v62;
  double *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  double *v83;
  char *v84;
  double *v85;
  double *v86;
  __int128 v87;
  double v88;
  double v89;
  unint64_t v90;
  double *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  double *v111;
  char *v112;
  double *v113;
  double *v114;
  __int128 v115;
  double v116;
  double v117;
  double v118;
  unint64_t v119;
  double *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  char *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  double *v141;
  char *v142;
  double *v143;
  double *v144;
  __int128 v145;
  double v146;
  double v147;
  unint64_t v148;
  double *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  double *v169;
  char *v170;
  double *v171;
  double *v172;
  __int128 v173;
  double v174;
  double v175;
  unint64_t v176;
  double *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  double *v197;
  char *v198;
  double *v199;
  double *v200;
  __int128 v201;
  double v202;
  double v203;
  unint64_t v204;
  double *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  __int128 v228;
  char *v229;
  __int128 v230;
  uint64_t i;
  double v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  _OWORD v236[8];
  double v237[16];

  v5 = *((double *)this + 11);
  v4 = *((double *)this + 12);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_20BEF9734(a2, 8uLL);
  v6 = *((double *)this + 7);
  v7 = -v5;
  if (*((_DWORD *)this + 28) != 1)
  {
    v13 = *((_QWORD *)this + 8);
    v14 = (char *)a2[2];
    v15 = (char *)a2[1];
    if (v15 >= v14)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (_BYTE *)*a2) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)*a2) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      if (v25)
        v26 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v25);
      else
        v26 = 0;
      v41 = &v26[24 * v22];
      v42 = &v26[24 * v25];
      *(double *)v41 = v6;
      *((_QWORD *)v41 + 1) = v13;
      *((double *)v41 + 2) = v7;
      v16 = v41 + 24;
      v44 = (char *)*a2;
      v43 = (char *)a2[1];
      if (v43 != *a2)
      {
        do
        {
          v45 = *(_OWORD *)(v43 - 24);
          *((_QWORD *)v41 - 1) = *((_QWORD *)v43 - 1);
          *(_OWORD *)(v41 - 24) = v45;
          v41 -= 24;
          v43 -= 24;
        }
        while (v43 != v44);
        v43 = (char *)*a2;
      }
      *a2 = v41;
      a2[1] = v16;
      a2[2] = v42;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *(double *)v15 = v6;
      *((_QWORD *)v15 + 1) = v13;
      v16 = v15 + 24;
      *((double *)v15 + 2) = v7;
    }
    a2[1] = v16;
    v46 = *((_QWORD *)this + 8);
    v47 = *((_QWORD *)this + 9);
    v48 = (char *)a2[2];
    if (v16 >= v48)
    {
      v50 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (_BYTE *)*a2) >> 3);
      if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v51 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (_BYTE *)*a2) >> 3);
      v52 = 2 * v51;
      if (2 * v51 <= v50 + 1)
        v52 = v50 + 1;
      if (v51 >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      if (v53)
        v54 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v53);
      else
        v54 = 0;
      v69 = &v54[24 * v50];
      v70 = &v54[24 * v53];
      *(_QWORD *)v69 = v47;
      *((_QWORD *)v69 + 1) = v46;
      *((double *)v69 + 2) = v7;
      v49 = v69 + 24;
      v72 = (char *)*a2;
      v71 = (char *)a2[1];
      if (v71 != *a2)
      {
        do
        {
          v73 = *(_OWORD *)(v71 - 24);
          *((_QWORD *)v69 - 1) = *((_QWORD *)v71 - 1);
          *(_OWORD *)(v69 - 24) = v73;
          v69 -= 24;
          v71 -= 24;
        }
        while (v71 != v72);
        v71 = (char *)*a2;
      }
      *a2 = v69;
      a2[1] = v49;
      a2[2] = v70;
      if (v71)
        operator delete(v71);
    }
    else
    {
      *(_QWORD *)v16 = v47;
      *((_QWORD *)v16 + 1) = v46;
      v49 = v16 + 24;
      *((double *)v16 + 2) = v7;
    }
    a2[1] = v49;
    v74 = *((_QWORD *)this + 7);
    v75 = *((_QWORD *)this + 10);
    v76 = (char *)a2[2];
    if (v49 >= v76)
    {
      v78 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (_BYTE *)*a2) >> 3);
      if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v79 = 0xAAAAAAAAAAAAAAABLL * ((v76 - (_BYTE *)*a2) >> 3);
      v80 = 2 * v79;
      if (2 * v79 <= v78 + 1)
        v80 = v78 + 1;
      if (v79 >= 0x555555555555555)
        v81 = 0xAAAAAAAAAAAAAAALL;
      else
        v81 = v80;
      if (v81)
        v82 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v81);
      else
        v82 = 0;
      v97 = &v82[24 * v78];
      v98 = &v82[24 * v81];
      *(_QWORD *)v97 = v74;
      *((_QWORD *)v97 + 1) = v75;
      *((double *)v97 + 2) = v7;
      v77 = v97 + 24;
      v100 = (char *)*a2;
      v99 = (char *)a2[1];
      if (v99 != *a2)
      {
        do
        {
          v101 = *(_OWORD *)(v99 - 24);
          *((_QWORD *)v97 - 1) = *((_QWORD *)v99 - 1);
          *(_OWORD *)(v97 - 24) = v101;
          v97 -= 24;
          v99 -= 24;
        }
        while (v99 != v100);
        v99 = (char *)*a2;
      }
      *a2 = v97;
      a2[1] = v77;
      a2[2] = v98;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *(_QWORD *)v49 = v74;
      *((_QWORD *)v49 + 1) = v75;
      v77 = v49 + 24;
      *((double *)v49 + 2) = v7;
    }
    a2[1] = v77;
    v103 = *((_QWORD *)this + 9);
    v102 = *((_QWORD *)this + 10);
    v104 = (char *)a2[2];
    if (v77 >= v104)
    {
      v106 = 0xAAAAAAAAAAAAAAABLL * ((v77 - (_BYTE *)*a2) >> 3);
      if (v106 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v107 = 0xAAAAAAAAAAAAAAABLL * ((v104 - (_BYTE *)*a2) >> 3);
      v108 = 2 * v107;
      if (2 * v107 <= v106 + 1)
        v108 = v106 + 1;
      if (v107 >= 0x555555555555555)
        v109 = 0xAAAAAAAAAAAAAAALL;
      else
        v109 = v108;
      if (v109)
        v110 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v109);
      else
        v110 = 0;
      v126 = &v110[24 * v106];
      v127 = &v110[24 * v109];
      *(_QWORD *)v126 = v103;
      *((_QWORD *)v126 + 1) = v102;
      *((double *)v126 + 2) = v7;
      v105 = v126 + 24;
      v129 = (char *)*a2;
      v128 = (char *)a2[1];
      if (v128 != *a2)
      {
        do
        {
          v130 = *(_OWORD *)(v128 - 24);
          *((_QWORD *)v126 - 1) = *((_QWORD *)v128 - 1);
          *(_OWORD *)(v126 - 24) = v130;
          v126 -= 24;
          v128 -= 24;
        }
        while (v128 != v129);
        v128 = (char *)*a2;
      }
      *a2 = v126;
      a2[1] = v105;
      a2[2] = v127;
      if (v128)
        operator delete(v128);
    }
    else
    {
      *(_QWORD *)v77 = v103;
      *((_QWORD *)v77 + 1) = v102;
      v105 = v77 + 24;
      *((double *)v77 + 2) = v7;
    }
    a2[1] = v105;
    v132 = *((_QWORD *)this + 7);
    v131 = *((_QWORD *)this + 8);
    v133 = -v4;
    v134 = (char *)a2[2];
    if (v105 >= v134)
    {
      v136 = 0xAAAAAAAAAAAAAAABLL * ((v105 - (_BYTE *)*a2) >> 3);
      if (v136 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v137 = 0xAAAAAAAAAAAAAAABLL * ((v134 - (_BYTE *)*a2) >> 3);
      v138 = 2 * v137;
      if (2 * v137 <= v136 + 1)
        v138 = v136 + 1;
      if (v137 >= 0x555555555555555)
        v139 = 0xAAAAAAAAAAAAAAALL;
      else
        v139 = v138;
      if (v139)
        v140 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v139);
      else
        v140 = 0;
      v155 = &v140[24 * v136];
      v156 = &v140[24 * v139];
      *(_QWORD *)v155 = v132;
      *((_QWORD *)v155 + 1) = v131;
      *((double *)v155 + 2) = v133;
      v135 = v155 + 24;
      v158 = (char *)*a2;
      v157 = (char *)a2[1];
      if (v157 != *a2)
      {
        do
        {
          v159 = *(_OWORD *)(v157 - 24);
          *((_QWORD *)v155 - 1) = *((_QWORD *)v157 - 1);
          *(_OWORD *)(v155 - 24) = v159;
          v155 -= 24;
          v157 -= 24;
        }
        while (v157 != v158);
        v157 = (char *)*a2;
      }
      *a2 = v155;
      a2[1] = v135;
      a2[2] = v156;
      if (v157)
        operator delete(v157);
    }
    else
    {
      *(_QWORD *)v105 = v132;
      *((_QWORD *)v105 + 1) = v131;
      v135 = v105 + 24;
      *((double *)v105 + 2) = v133;
    }
    a2[1] = v135;
    v160 = *((_QWORD *)this + 8);
    v161 = *((_QWORD *)this + 9);
    v162 = (char *)a2[2];
    if (v135 >= v162)
    {
      v164 = 0xAAAAAAAAAAAAAAABLL * ((v135 - (_BYTE *)*a2) >> 3);
      if (v164 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v165 = 0xAAAAAAAAAAAAAAABLL * ((v162 - (_BYTE *)*a2) >> 3);
      v166 = 2 * v165;
      if (2 * v165 <= v164 + 1)
        v166 = v164 + 1;
      if (v165 >= 0x555555555555555)
        v167 = 0xAAAAAAAAAAAAAAALL;
      else
        v167 = v166;
      if (v167)
        v168 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v167);
      else
        v168 = 0;
      v183 = &v168[24 * v164];
      v184 = &v168[24 * v167];
      *(_QWORD *)v183 = v161;
      *((_QWORD *)v183 + 1) = v160;
      *((double *)v183 + 2) = v133;
      v163 = v183 + 24;
      v186 = (char *)*a2;
      v185 = (char *)a2[1];
      if (v185 != *a2)
      {
        do
        {
          v187 = *(_OWORD *)(v185 - 24);
          *((_QWORD *)v183 - 1) = *((_QWORD *)v185 - 1);
          *(_OWORD *)(v183 - 24) = v187;
          v183 -= 24;
          v185 -= 24;
        }
        while (v185 != v186);
        v185 = (char *)*a2;
      }
      *a2 = v183;
      a2[1] = v163;
      a2[2] = v184;
      if (v185)
        operator delete(v185);
    }
    else
    {
      *(_QWORD *)v135 = v161;
      *((_QWORD *)v135 + 1) = v160;
      v163 = v135 + 24;
      *((double *)v135 + 2) = v133;
    }
    a2[1] = v163;
    v188 = *((_QWORD *)this + 7);
    v189 = *((_QWORD *)this + 10);
    v190 = (char *)a2[2];
    if (v163 >= v190)
    {
      v192 = 0xAAAAAAAAAAAAAAABLL * ((v163 - (_BYTE *)*a2) >> 3);
      if (v192 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v193 = 0xAAAAAAAAAAAAAAABLL * ((v190 - (_BYTE *)*a2) >> 3);
      v194 = 2 * v193;
      if (2 * v193 <= v192 + 1)
        v194 = v192 + 1;
      if (v193 >= 0x555555555555555)
        v195 = 0xAAAAAAAAAAAAAAALL;
      else
        v195 = v194;
      if (v195)
        v196 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v195);
      else
        v196 = 0;
      v211 = &v196[24 * v192];
      v212 = &v196[24 * v195];
      *(_QWORD *)v211 = v188;
      *((_QWORD *)v211 + 1) = v189;
      *((double *)v211 + 2) = v133;
      v191 = v211 + 24;
      v214 = (char *)*a2;
      v213 = (char *)a2[1];
      if (v213 != *a2)
      {
        do
        {
          v215 = *(_OWORD *)(v213 - 24);
          *((_QWORD *)v211 - 1) = *((_QWORD *)v213 - 1);
          *(_OWORD *)(v211 - 24) = v215;
          v211 -= 24;
          v213 -= 24;
        }
        while (v213 != v214);
        v213 = (char *)*a2;
      }
      *a2 = v211;
      a2[1] = v191;
      a2[2] = v212;
      if (v213)
        operator delete(v213);
    }
    else
    {
      *(_QWORD *)v163 = v188;
      *((_QWORD *)v163 + 1) = v189;
      v191 = v163 + 24;
      *((double *)v163 + 2) = v133;
    }
    a2[1] = v191;
    v217 = *((_QWORD *)this + 9);
    v216 = *((_QWORD *)this + 10);
    v218 = (char *)a2[2];
    if (v191 < v218)
    {
      *(_QWORD *)v191 = v217;
      *((_QWORD *)v191 + 1) = v216;
      v205 = (double *)(v191 + 24);
      *((double *)v191 + 2) = v133;
      goto LABEL_256;
    }
    v219 = 0xAAAAAAAAAAAAAAABLL * ((v191 - (_BYTE *)*a2) >> 3);
    if (v219 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v220 = 0xAAAAAAAAAAAAAAABLL * ((v218 - (_BYTE *)*a2) >> 3);
    v221 = 2 * v220;
    if (2 * v220 <= v219 + 1)
      v221 = v219 + 1;
    if (v220 >= 0x555555555555555)
      v222 = 0xAAAAAAAAAAAAAAALL;
    else
      v222 = v221;
    if (v222)
      v223 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v222);
    else
      v223 = 0;
    v224 = &v223[24 * v219];
    v225 = &v223[24 * v222];
    *(_QWORD *)v224 = v217;
    *((_QWORD *)v224 + 1) = v216;
    *((double *)v224 + 2) = v133;
    v205 = (double *)(v224 + 24);
    v229 = (char *)*a2;
    v226 = (char *)a2[1];
    if (v226 == *a2)
      goto LABEL_254;
    do
    {
      v230 = *(_OWORD *)(v226 - 24);
      *((_QWORD *)v224 - 1) = *((_QWORD *)v226 - 1);
      *(_OWORD *)(v224 - 24) = v230;
      v224 -= 24;
      v226 -= 24;
    }
    while (v226 != v229);
    goto LABEL_253;
  }
  v8 = v5 * v6;
  v9 = v5 * *((double *)this + 8);
  v10 = (unint64_t)a2[2];
  v11 = (double *)a2[1];
  if ((unint64_t)v11 >= v10)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (_BYTE *)*a2) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a2) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    if (v20)
      v21 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v20);
    else
      v21 = 0;
    v27 = (double *)&v21[24 * v17];
    v28 = &v21[24 * v20];
    *v27 = v8;
    v27[1] = v9;
    v27[2] = v7;
    v12 = v27 + 3;
    v30 = (double *)*a2;
    v29 = (double *)a2[1];
    if (v29 != *a2)
    {
      do
      {
        v31 = *(_OWORD *)(v29 - 3);
        *(v27 - 1) = *(v29 - 1);
        *(_OWORD *)(v27 - 3) = v31;
        v27 -= 3;
        v29 -= 3;
      }
      while (v29 != v30);
      v29 = (double *)*a2;
    }
    *a2 = v27;
    a2[1] = v12;
    a2[2] = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v11 = v8;
    v11[1] = v9;
    v12 = v11 + 3;
    v11[2] = v7;
  }
  a2[1] = v12;
  v32 = v5 * *((double *)this + 9);
  v33 = v5 * *((double *)this + 8);
  v34 = (unint64_t)a2[2];
  if ((unint64_t)v12 >= v34)
  {
    v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (_BYTE *)*a2) >> 3);
    if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)*a2) >> 3);
    v38 = 2 * v37;
    if (2 * v37 <= v36 + 1)
      v38 = v36 + 1;
    if (v37 >= 0x555555555555555)
      v39 = 0xAAAAAAAAAAAAAAALL;
    else
      v39 = v38;
    if (v39)
      v40 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v39);
    else
      v40 = 0;
    v55 = (double *)&v40[24 * v36];
    v56 = &v40[24 * v39];
    *v55 = v32;
    v55[1] = v33;
    v55[2] = v7;
    v35 = v55 + 3;
    v58 = (double *)*a2;
    v57 = (double *)a2[1];
    if (v57 != *a2)
    {
      do
      {
        v59 = *(_OWORD *)(v57 - 3);
        *(v55 - 1) = *(v57 - 1);
        *(_OWORD *)(v55 - 3) = v59;
        v55 -= 3;
        v57 -= 3;
      }
      while (v57 != v58);
      v57 = (double *)*a2;
    }
    *a2 = v55;
    a2[1] = v35;
    a2[2] = v56;
    if (v57)
      operator delete(v57);
  }
  else
  {
    *v12 = v32;
    v12[1] = v33;
    v35 = v12 + 3;
    v12[2] = v7;
  }
  a2[1] = v35;
  v60 = v5 * *((double *)this + 7);
  v61 = v5 * *((double *)this + 10);
  v62 = (unint64_t)a2[2];
  if ((unint64_t)v35 >= v62)
  {
    v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (_BYTE *)*a2) >> 3);
    if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (_QWORD)*a2) >> 3);
    v66 = 2 * v65;
    if (2 * v65 <= v64 + 1)
      v66 = v64 + 1;
    if (v65 >= 0x555555555555555)
      v67 = 0xAAAAAAAAAAAAAAALL;
    else
      v67 = v66;
    if (v67)
      v68 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v67);
    else
      v68 = 0;
    v83 = (double *)&v68[24 * v64];
    v84 = &v68[24 * v67];
    *v83 = v60;
    v83[1] = v61;
    v83[2] = v7;
    v63 = v83 + 3;
    v86 = (double *)*a2;
    v85 = (double *)a2[1];
    if (v85 != *a2)
    {
      do
      {
        v87 = *(_OWORD *)(v85 - 3);
        *(v83 - 1) = *(v85 - 1);
        *(_OWORD *)(v83 - 3) = v87;
        v83 -= 3;
        v85 -= 3;
      }
      while (v85 != v86);
      v85 = (double *)*a2;
    }
    *a2 = v83;
    a2[1] = v63;
    a2[2] = v84;
    if (v85)
      operator delete(v85);
  }
  else
  {
    *v35 = v60;
    v35[1] = v61;
    v63 = v35 + 3;
    v35[2] = v7;
  }
  a2[1] = v63;
  v88 = v5 * *((double *)this + 9);
  v89 = v5 * *((double *)this + 10);
  v90 = (unint64_t)a2[2];
  if ((unint64_t)v63 >= v90)
  {
    v92 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (_BYTE *)*a2) >> 3);
    if (v92 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)*a2) >> 3);
    v94 = 2 * v93;
    if (2 * v93 <= v92 + 1)
      v94 = v92 + 1;
    if (v93 >= 0x555555555555555)
      v95 = 0xAAAAAAAAAAAAAAALL;
    else
      v95 = v94;
    if (v95)
      v96 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v95);
    else
      v96 = 0;
    v111 = (double *)&v96[24 * v92];
    v112 = &v96[24 * v95];
    *v111 = v88;
    v111[1] = v89;
    v111[2] = v7;
    v91 = v111 + 3;
    v114 = (double *)*a2;
    v113 = (double *)a2[1];
    if (v113 != *a2)
    {
      do
      {
        v115 = *(_OWORD *)(v113 - 3);
        *(v111 - 1) = *(v113 - 1);
        *(_OWORD *)(v111 - 3) = v115;
        v111 -= 3;
        v113 -= 3;
      }
      while (v113 != v114);
      v113 = (double *)*a2;
    }
    *a2 = v111;
    a2[1] = v91;
    a2[2] = v112;
    if (v113)
      operator delete(v113);
  }
  else
  {
    *v63 = v88;
    v63[1] = v89;
    v91 = v63 + 3;
    v63[2] = v7;
  }
  a2[1] = v91;
  v116 = v4 * *((double *)this + 7);
  v117 = v4 * *((double *)this + 8);
  v118 = -v4;
  v119 = (unint64_t)a2[2];
  if ((unint64_t)v91 >= v119)
  {
    v121 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (_BYTE *)*a2) >> 3);
    if (v121 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - (_QWORD)*a2) >> 3);
    v123 = 2 * v122;
    if (2 * v122 <= v121 + 1)
      v123 = v121 + 1;
    if (v122 >= 0x555555555555555)
      v124 = 0xAAAAAAAAAAAAAAALL;
    else
      v124 = v123;
    if (v124)
      v125 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v124);
    else
      v125 = 0;
    v141 = (double *)&v125[24 * v121];
    v142 = &v125[24 * v124];
    *v141 = v116;
    v141[1] = v117;
    v141[2] = v118;
    v120 = v141 + 3;
    v144 = (double *)*a2;
    v143 = (double *)a2[1];
    if (v143 != *a2)
    {
      do
      {
        v145 = *(_OWORD *)(v143 - 3);
        *(v141 - 1) = *(v143 - 1);
        *(_OWORD *)(v141 - 3) = v145;
        v141 -= 3;
        v143 -= 3;
      }
      while (v143 != v144);
      v143 = (double *)*a2;
    }
    *a2 = v141;
    a2[1] = v120;
    a2[2] = v142;
    if (v143)
      operator delete(v143);
  }
  else
  {
    *v91 = v116;
    v91[1] = v117;
    v120 = v91 + 3;
    v91[2] = v118;
  }
  a2[1] = v120;
  v146 = v4 * *((double *)this + 9);
  v147 = v4 * *((double *)this + 8);
  v148 = (unint64_t)a2[2];
  if ((unint64_t)v120 >= v148)
  {
    v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (_BYTE *)*a2) >> 3);
    if (v150 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - (_QWORD)*a2) >> 3);
    v152 = 2 * v151;
    if (2 * v151 <= v150 + 1)
      v152 = v150 + 1;
    if (v151 >= 0x555555555555555)
      v153 = 0xAAAAAAAAAAAAAAALL;
    else
      v153 = v152;
    if (v153)
      v154 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v153);
    else
      v154 = 0;
    v169 = (double *)&v154[24 * v150];
    v170 = &v154[24 * v153];
    *v169 = v146;
    v169[1] = v147;
    v169[2] = v118;
    v149 = v169 + 3;
    v172 = (double *)*a2;
    v171 = (double *)a2[1];
    if (v171 != *a2)
    {
      do
      {
        v173 = *(_OWORD *)(v171 - 3);
        *(v169 - 1) = *(v171 - 1);
        *(_OWORD *)(v169 - 3) = v173;
        v169 -= 3;
        v171 -= 3;
      }
      while (v171 != v172);
      v171 = (double *)*a2;
    }
    *a2 = v169;
    a2[1] = v149;
    a2[2] = v170;
    if (v171)
      operator delete(v171);
  }
  else
  {
    *v120 = v146;
    v120[1] = v147;
    v149 = v120 + 3;
    v120[2] = v118;
  }
  a2[1] = v149;
  v174 = v4 * *((double *)this + 7);
  v175 = v4 * *((double *)this + 10);
  v176 = (unint64_t)a2[2];
  if ((unint64_t)v149 >= v176)
  {
    v178 = 0xAAAAAAAAAAAAAAABLL * (((char *)v149 - (_BYTE *)*a2) >> 3);
    if (v178 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v176 - (_QWORD)*a2) >> 3);
    v180 = 2 * v179;
    if (2 * v179 <= v178 + 1)
      v180 = v178 + 1;
    if (v179 >= 0x555555555555555)
      v181 = 0xAAAAAAAAAAAAAAALL;
    else
      v181 = v180;
    if (v181)
      v182 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v181);
    else
      v182 = 0;
    v197 = (double *)&v182[24 * v178];
    v198 = &v182[24 * v181];
    *v197 = v174;
    v197[1] = v175;
    v197[2] = v118;
    v177 = v197 + 3;
    v200 = (double *)*a2;
    v199 = (double *)a2[1];
    if (v199 != *a2)
    {
      do
      {
        v201 = *(_OWORD *)(v199 - 3);
        *(v197 - 1) = *(v199 - 1);
        *(_OWORD *)(v197 - 3) = v201;
        v197 -= 3;
        v199 -= 3;
      }
      while (v199 != v200);
      v199 = (double *)*a2;
    }
    *a2 = v197;
    a2[1] = v177;
    a2[2] = v198;
    if (v199)
      operator delete(v199);
  }
  else
  {
    *v149 = v174;
    v149[1] = v175;
    v177 = v149 + 3;
    v149[2] = v118;
  }
  a2[1] = v177;
  v202 = v4 * *((double *)this + 9);
  v203 = v4 * *((double *)this + 10);
  v204 = (unint64_t)a2[2];
  if ((unint64_t)v177 < v204)
  {
    *v177 = v202;
    v177[1] = v203;
    v205 = v177 + 3;
    v177[2] = v118;
    goto LABEL_256;
  }
  v206 = 0xAAAAAAAAAAAAAAABLL * (((char *)v177 - (_BYTE *)*a2) >> 3);
  if (v206 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v207 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v204 - (_QWORD)*a2) >> 3);
  v208 = 2 * v207;
  if (2 * v207 <= v206 + 1)
    v208 = v206 + 1;
  if (v207 >= 0x555555555555555)
    v209 = 0xAAAAAAAAAAAAAAALL;
  else
    v209 = v208;
  if (v209)
    v210 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v209);
  else
    v210 = 0;
  v224 = &v210[24 * v206];
  v225 = &v210[24 * v209];
  *(double *)v224 = v202;
  *((double *)v224 + 1) = v203;
  *((double *)v224 + 2) = v118;
  v205 = (double *)(v224 + 24);
  v227 = (char *)*a2;
  v226 = (char *)a2[1];
  if (v226 != *a2)
  {
    do
    {
      v228 = *(_OWORD *)(v226 - 24);
      *((_QWORD *)v224 - 1) = *((_QWORD *)v226 - 1);
      *(_OWORD *)(v224 - 24) = v228;
      v224 -= 24;
      v226 -= 24;
    }
    while (v226 != v227);
LABEL_253:
    v226 = (char *)*a2;
  }
LABEL_254:
  *a2 = v224;
  a2[1] = v205;
  a2[2] = v225;
  if (v226)
    operator delete(v226);
LABEL_256:
  a2[1] = v205;
  memset(v236, 0, sizeof(v236));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(v237, (double *)this, (double *)this + 3);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v237, 0, 0.0, (uint64_t)v236);
  for (i = 0; i != 192; i += 24)
  {
    v232 = sub_20BEF4828((double *)v236, (double *)((char *)*a2 + i));
    v233 = (char *)*a2 + i;
    *(double *)v233 = v232;
    *((_QWORD *)v233 + 1) = v234;
    *((_QWORD *)v233 + 2) = v235;
  }
}

void sub_20BEF96D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BEF9734(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20BDDF694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)sub_20BDE4FF4(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeCornersAtDistance(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, double a2@<D0>, void **a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  char *v28;
  double *v29;
  double *v30;
  __int128 v31;
  double v32;
  double v33;
  unint64_t v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  double *v55;
  char *v56;
  double *v57;
  double *v58;
  __int128 v59;
  double v60;
  double v61;
  unint64_t v62;
  double *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  double *v82;
  char *v83;
  double *v84;
  double *v85;
  __int128 v86;
  double v87;
  double v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  unint64_t v100;
  double *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  double *v107;
  char *v108;
  double *v109;
  double *v110;
  __int128 v111;
  double *v112;
  __int128 v113;
  uint64_t i;
  double v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD v119[8];
  double v120[16];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20BEF9734(a3, 4uLL);
  v6 = *((double *)this + 7);
  v7 = -a2;
  if (*((_DWORD *)this + 28) != 1)
  {
    v13 = *((_QWORD *)this + 8);
    v14 = (char *)a3[2];
    v15 = (char *)a3[1];
    if (v15 >= v14)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (_BYTE *)*a3) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)*a3) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      if (v25)
        v26 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v25);
      else
        v26 = 0;
      v41 = &v26[24 * v22];
      v42 = &v26[24 * v25];
      *(double *)v41 = v6;
      *((_QWORD *)v41 + 1) = v13;
      *((double *)v41 + 2) = v7;
      v16 = v41 + 24;
      v44 = (char *)*a3;
      v43 = (char *)a3[1];
      if (v43 != *a3)
      {
        do
        {
          v45 = *(_OWORD *)(v43 - 24);
          *((_QWORD *)v41 - 1) = *((_QWORD *)v43 - 1);
          *(_OWORD *)(v41 - 24) = v45;
          v41 -= 24;
          v43 -= 24;
        }
        while (v43 != v44);
        v43 = (char *)*a3;
      }
      *a3 = v41;
      a3[1] = v16;
      a3[2] = v42;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *(double *)v15 = v6;
      *((_QWORD *)v15 + 1) = v13;
      v16 = v15 + 24;
      *((double *)v15 + 2) = v7;
    }
    a3[1] = v16;
    v46 = *((_QWORD *)this + 8);
    v47 = *((_QWORD *)this + 9);
    v48 = (char *)a3[2];
    if (v16 >= v48)
    {
      v50 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (_BYTE *)*a3) >> 3);
      if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v51 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (_BYTE *)*a3) >> 3);
      v52 = 2 * v51;
      if (2 * v51 <= v50 + 1)
        v52 = v50 + 1;
      if (v51 >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      if (v53)
        v54 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v53);
      else
        v54 = 0;
      v69 = &v54[24 * v50];
      v70 = &v54[24 * v53];
      *(_QWORD *)v69 = v47;
      *((_QWORD *)v69 + 1) = v46;
      *((double *)v69 + 2) = v7;
      v49 = v69 + 24;
      v72 = (char *)*a3;
      v71 = (char *)a3[1];
      if (v71 != *a3)
      {
        do
        {
          v73 = *(_OWORD *)(v71 - 24);
          *((_QWORD *)v69 - 1) = *((_QWORD *)v71 - 1);
          *(_OWORD *)(v69 - 24) = v73;
          v69 -= 24;
          v71 -= 24;
        }
        while (v71 != v72);
        v71 = (char *)*a3;
      }
      *a3 = v69;
      a3[1] = v49;
      a3[2] = v70;
      if (v71)
        operator delete(v71);
    }
    else
    {
      *(_QWORD *)v16 = v47;
      *((_QWORD *)v16 + 1) = v46;
      v49 = v16 + 24;
      *((double *)v16 + 2) = v7;
    }
    a3[1] = v49;
    v74 = *((_QWORD *)this + 7);
    v75 = *((_QWORD *)this + 10);
    v76 = (char *)a3[2];
    if (v49 >= v76)
    {
      v77 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (_BYTE *)*a3) >> 3);
      if (v77 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v78 = 0xAAAAAAAAAAAAAAABLL * ((v76 - (_BYTE *)*a3) >> 3);
      v79 = 2 * v78;
      if (2 * v78 <= v77 + 1)
        v79 = v77 + 1;
      if (v78 >= 0x555555555555555)
        v80 = 0xAAAAAAAAAAAAAAALL;
      else
        v80 = v79;
      if (v80)
        v81 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v80);
      else
        v81 = 0;
      v95 = &v81[24 * v77];
      v96 = &v81[24 * v80];
      *(_QWORD *)v95 = v74;
      *((_QWORD *)v95 + 1) = v75;
      *((double *)v95 + 2) = v7;
      v63 = (double *)(v95 + 24);
      v98 = (char *)*a3;
      v97 = (char *)a3[1];
      if (v97 != *a3)
      {
        do
        {
          v99 = *(_OWORD *)(v97 - 24);
          *((_QWORD *)v95 - 1) = *((_QWORD *)v97 - 1);
          *(_OWORD *)(v95 - 24) = v99;
          v95 -= 24;
          v97 -= 24;
        }
        while (v97 != v98);
        v97 = (char *)*a3;
      }
      *a3 = v95;
      a3[1] = v63;
      a3[2] = v96;
      if (v97)
        operator delete(v97);
    }
    else
    {
      *(_QWORD *)v49 = v74;
      *((_QWORD *)v49 + 1) = v75;
      v63 = (double *)(v49 + 24);
      *((double *)v49 + 2) = v7;
    }
    a3[1] = v63;
    v87 = *((double *)this + 9);
    v88 = *((double *)this + 10);
    v100 = (unint64_t)a3[2];
    if ((unint64_t)v63 >= v100)
    {
      v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (_BYTE *)*a3) >> 3);
      if (v102 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - (_QWORD)*a3) >> 3);
      v104 = 2 * v103;
      if (2 * v103 <= v102 + 1)
        v104 = v102 + 1;
      if (v103 >= 0x555555555555555)
        v105 = 0xAAAAAAAAAAAAAAALL;
      else
        v105 = v104;
      if (v105)
        v106 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v105);
      else
        v106 = 0;
      v107 = (double *)&v106[24 * v102];
      v108 = &v106[24 * v105];
      *v107 = v87;
      v107[1] = v88;
      v107[2] = v7;
      v101 = v107 + 3;
      v112 = (double *)*a3;
      v109 = (double *)a3[1];
      if (v109 == *a3)
        goto LABEL_125;
      do
      {
        v113 = *(_OWORD *)(v109 - 3);
        *(v107 - 1) = *(v109 - 1);
        *(_OWORD *)(v107 - 3) = v113;
        v107 -= 3;
        v109 -= 3;
      }
      while (v109 != v112);
      goto LABEL_124;
    }
LABEL_108:
    *v63 = v87;
    v63[1] = v88;
    v101 = v63 + 3;
    v63[2] = v7;
    goto LABEL_127;
  }
  v8 = v6 * a2;
  v9 = *((double *)this + 8) * a2;
  v10 = (unint64_t)a3[2];
  v11 = (double *)a3[1];
  if ((unint64_t)v11 >= v10)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (_BYTE *)*a3) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a3) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    if (v20)
      v21 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v20);
    else
      v21 = 0;
    v27 = (double *)&v21[24 * v17];
    v28 = &v21[24 * v20];
    *v27 = v8;
    v27[1] = v9;
    v27[2] = v7;
    v12 = v27 + 3;
    v30 = (double *)*a3;
    v29 = (double *)a3[1];
    if (v29 != *a3)
    {
      do
      {
        v31 = *(_OWORD *)(v29 - 3);
        *(v27 - 1) = *(v29 - 1);
        *(_OWORD *)(v27 - 3) = v31;
        v27 -= 3;
        v29 -= 3;
      }
      while (v29 != v30);
      v29 = (double *)*a3;
    }
    *a3 = v27;
    a3[1] = v12;
    a3[2] = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v11 = v8;
    v11[1] = v9;
    v12 = v11 + 3;
    v11[2] = v7;
  }
  a3[1] = v12;
  v32 = *((double *)this + 9) * a2;
  v33 = *((double *)this + 8) * a2;
  v34 = (unint64_t)a3[2];
  if ((unint64_t)v12 >= v34)
  {
    v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (_BYTE *)*a3) >> 3);
    if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)*a3) >> 3);
    v38 = 2 * v37;
    if (2 * v37 <= v36 + 1)
      v38 = v36 + 1;
    if (v37 >= 0x555555555555555)
      v39 = 0xAAAAAAAAAAAAAAALL;
    else
      v39 = v38;
    if (v39)
      v40 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v39);
    else
      v40 = 0;
    v55 = (double *)&v40[24 * v36];
    v56 = &v40[24 * v39];
    *v55 = v32;
    v55[1] = v33;
    v55[2] = v7;
    v35 = v55 + 3;
    v58 = (double *)*a3;
    v57 = (double *)a3[1];
    if (v57 != *a3)
    {
      do
      {
        v59 = *(_OWORD *)(v57 - 3);
        *(v55 - 1) = *(v57 - 1);
        *(_OWORD *)(v55 - 3) = v59;
        v55 -= 3;
        v57 -= 3;
      }
      while (v57 != v58);
      v57 = (double *)*a3;
    }
    *a3 = v55;
    a3[1] = v35;
    a3[2] = v56;
    if (v57)
      operator delete(v57);
  }
  else
  {
    *v12 = v32;
    v12[1] = v33;
    v35 = v12 + 3;
    v12[2] = v7;
  }
  a3[1] = v35;
  v60 = *((double *)this + 7) * a2;
  v61 = *((double *)this + 10) * a2;
  v62 = (unint64_t)a3[2];
  if ((unint64_t)v35 >= v62)
  {
    v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (_BYTE *)*a3) >> 3);
    if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (_QWORD)*a3) >> 3);
    v66 = 2 * v65;
    if (2 * v65 <= v64 + 1)
      v66 = v64 + 1;
    if (v65 >= 0x555555555555555)
      v67 = 0xAAAAAAAAAAAAAAALL;
    else
      v67 = v66;
    if (v67)
      v68 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v67);
    else
      v68 = 0;
    v82 = (double *)&v68[24 * v64];
    v83 = &v68[24 * v67];
    *v82 = v60;
    v82[1] = v61;
    v82[2] = v7;
    v63 = v82 + 3;
    v85 = (double *)*a3;
    v84 = (double *)a3[1];
    if (v84 != *a3)
    {
      do
      {
        v86 = *(_OWORD *)(v84 - 3);
        *(v82 - 1) = *(v84 - 1);
        *(_OWORD *)(v82 - 3) = v86;
        v82 -= 3;
        v84 -= 3;
      }
      while (v84 != v85);
      v84 = (double *)*a3;
    }
    *a3 = v82;
    a3[1] = v63;
    a3[2] = v83;
    if (v84)
      operator delete(v84);
  }
  else
  {
    *v35 = v60;
    v35[1] = v61;
    v63 = v35 + 3;
    v35[2] = v7;
  }
  a3[1] = v63;
  v87 = *((double *)this + 9) * a2;
  v88 = *((double *)this + 10) * a2;
  v89 = (unint64_t)a3[2];
  if ((unint64_t)v63 < v89)
    goto LABEL_108;
  v90 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (_BYTE *)*a3) >> 3);
  if (v90 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (_QWORD)*a3) >> 3);
  v92 = 2 * v91;
  if (2 * v91 <= v90 + 1)
    v92 = v90 + 1;
  if (v91 >= 0x555555555555555)
    v93 = 0xAAAAAAAAAAAAAAALL;
  else
    v93 = v92;
  if (v93)
    v94 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v93);
  else
    v94 = 0;
  v107 = (double *)&v94[24 * v90];
  v108 = &v94[24 * v93];
  *v107 = v87;
  v107[1] = v88;
  v107[2] = v7;
  v101 = v107 + 3;
  v110 = (double *)*a3;
  v109 = (double *)a3[1];
  if (v109 == *a3)
    goto LABEL_125;
  do
  {
    v111 = *(_OWORD *)(v109 - 3);
    *(v107 - 1) = *(v109 - 1);
    *(_OWORD *)(v107 - 3) = v111;
    v107 -= 3;
    v109 -= 3;
  }
  while (v109 != v110);
LABEL_124:
  v109 = (double *)*a3;
LABEL_125:
  *a3 = v107;
  a3[1] = v101;
  a3[2] = v108;
  if (v109)
    operator delete(v109);
LABEL_127:
  a3[1] = v101;
  memset(v119, 0, sizeof(v119));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(v120, (double *)this, (double *)this + 3);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v120, 0, 0.0, (uint64_t)v119);
  for (i = 0; i != 96; i += 24)
  {
    v115 = sub_20BEF4828((double *)v119, (double *)((char *)*a3 + i));
    v116 = (char *)*a3 + i;
    *(double *)v116 = v115;
    *((_QWORD *)v116 + 1) = v117;
    *((_QWORD *)v116 + 2) = v118;
  }
}

void sub_20BEFA038(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeNarrowedFrustum(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  float64x2_t v9;
  float64x2_t v11;

  __asm { FMOV            V1.2D, #1.0 }
  v9 = vaddq_f64(*a2, _Q1);
  __asm { FMOV            V1.2D, #0.5 }
  v11 = vaddq_f64(*(float64x2_t *)(a1 + 56), vmulq_f64(vmulq_f64(v9, _Q1), vsubq_f64(*(float64x2_t *)(a1 + 72), *(float64x2_t *)(a1 + 56))));
  pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputeNarrowedFrustumSub((__int128 *)a1, a3, a4, v11.f64[0], v11.f64[1]);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputeNarrowedFrustumSub(__int128 *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, float64_t a4@<D0>, float64_t a5@<D1>)
{
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  unint64_t *v19;
  void *v20;

  v7 = sub_20BEFBAD8(a3, a1);
  v8 = *(float64x2_t *)((char *)a1 + 72);
  v9 = *(float64x2_t *)((char *)a1 + 56);
  __asm { FMOV            V3.2D, #0.5 }
  v15 = vmulq_f64(vmulq_f64(vsubq_f64(v8, v9), *a2), _Q3);
  v16.f64[0] = a4;
  v16.f64[1] = a5;
  v17 = vsubq_f64(v16, v15);
  *(int8x16_t *)(v7 + 56) = vbslq_s8((int8x16_t)vcgtq_f64(v9, v17), (int8x16_t)v9, (int8x16_t)v17);
  v18 = vaddq_f64(v16, v15);
  *(int8x16_t *)(v7 + 72) = vbslq_s8((int8x16_t)vcgtq_f64(v18, v8), (int8x16_t)v8, (int8x16_t)v18);
  v19 = (unint64_t *)(v7 + 120);
  do
    v20 = (void *)__ldxr(v19);
  while (__stxr(0, v19));
  if (v20)
    operator delete(v20);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeNarrowedFrustum(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __int128 v13;
  uint64_t v14;
  const char *v15;
  char v16;

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v13, (double *)a1, (double *)(a1 + 24));
  v9 = sub_20BEF4828((double *)&v13, a2);
  if (v11 >= 0.0)
  {
    *(_QWORD *)&v13 = "gf/frustum.cpp";
    *((_QWORD *)&v13 + 1) = "ComputeNarrowedFrustum";
    v14 = 719;
    v15 = "GfFrustum pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeNarrowedFrustum(const GfVec3d &, const GfVec2d &) const";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Given worldPoint is behind or at the eye", v8, v9);
    sub_20BEFBAD8(a4, (__int128 *)a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 112) == 1)
    {
      v12 = -1.0 / v11;
      v9 = v9 * v12;
      v10 = v10 * v12;
    }
    pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputeNarrowedFrustumSub((__int128 *)a1, a3, a4, v9, v10);
  }
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeRay@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  double v15;
  double v16[3];
  double v17;
  double v18;
  double v19;
  __int128 v20;
  uint64_t v21;

  sub_20BEFA304(*(_DWORD *)(a1 + 112), (float64x2_t *)(a1 + 56), a2, (uint64_t)v16, *(double *)(a1 + 88));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v20, (double *)a1, (double *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)&v20, 0, 0.0, (uint64_t)&v10);
  *(_QWORD *)&v20 = sub_20BEF4828(v10.f64, v16);
  *((_QWORD *)&v20 + 1) = v5;
  v21 = v6;
  v8 = vaddq_f64(vaddq_f64(vmulq_n_f64(v10, v17), vmulq_n_f64(v12, v18)), vmulq_n_f64(v14, v19));
  v9 = v17 * v11 + v18 * v13 + v19 * v15;
  *(_QWORD *)&result = pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(a3, &v20, (__n128 *)&v8).n128_u64[0];
  return result;
}

double sub_20BEFA304@<D0>(int a1@<W0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  float64x2_t v10;
  float64x2_t v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double result;
  __n128 v18;
  double v19;
  float64x2_t v20;
  double v21;

  __asm { FMOV            V2.2D, #1.0 }
  v10 = vaddq_f64(*a3, _Q2);
  __asm { FMOV            V2.2D, #0.5 }
  v12 = vaddq_f64(*a2, vmulq_f64(vmulq_f64(v10, _Q2), vsubq_f64(a2[1], *a2)));
  if (a1 == 1)
  {
    v13 = sqrt(vaddvq_f64(vmulq_f64(v12, v12)) + 1.0);
    v14 = 1.0 / v13;
    if (v13 <= 1.0e-10)
      v14 = 1.0e10;
    v15 = vmulq_n_f64(v12, v14);
    v16 = -v14;
    v20 = 0uLL;
    v21 = 0.0;
  }
  else
  {
    v20 = v12;
    v21 = -a5;
    v15 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
    v16 = -1.0;
  }
  v18 = (__n128)v15;
  v19 = v16;
  *(_QWORD *)&result = pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(a4, (__int128 *)&v20, &v18).n128_u64[0];
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputePickRay@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t v6;
  float64x2_t v7;

  sub_20BEFA304(*(_DWORD *)(a1 + 112), (float64x2_t *)(a1 + 56), a2, (uint64_t)&v6, *(double *)(a1 + 88));
  return pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputePickRayOffsetToNearPlane((double *)a1, &v6, &v7, a3);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputePickRayOffsetToNearPlane@<D0>(double *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  double v6;
  double v7;
  float64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  double v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;

  v6 = a1[11];
  v7 = v6 * a3[1].f64[0] + a2[1].f64[0];
  v20 = vaddq_f64(vmulq_n_f64(*a3, v6), *a2);
  v21 = v7;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v22, a1, a1 + 3);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v22.f64, 0, 0.0, (uint64_t)&v14);
  v20.f64[0] = sub_20BEF4828(v14.f64, v20.f64);
  v20.f64[1] = v8;
  v21 = v9;
  v10 = a3->f64[1];
  v11 = a3[1].f64[0];
  v12 = a3->f64[0] * v15 + v10 * v17 + v11 * v19;
  v22 = vaddq_f64(vaddq_f64(vmulq_n_f64(v14, a3->f64[0]), vmulq_n_f64(v16, v10)), vmulq_n_f64(v18, v11));
  v23 = v12;
  *(_QWORD *)&result = pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(a4, (__int128 *)&v20, (__n128 *)&v22).n128_u64[0];
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeRay@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v6 = (double *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v31, (double *)a1, (double *)(a1 + 24));
  v7 = sub_20BEF4828((double *)&v31, a2);
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    v10 = sqrt(v9 * v9 + v7 * v7 + v8 * v8);
    v11 = 1.0 / v10;
    v12 = v10 <= 1.0e-10;
    v13 = 1.0e10;
    if (!v12)
      v13 = v11;
    v18 = v7 * v13;
    v17 = v8 * v13;
    v19 = v9 * v13;
    v28 = 0.0;
    v29 = 0.0;
    v30 = 0;
  }
  else
  {
    v28 = v7;
    v29 = v8;
    v30 = 0;
    v19 = -1.0;
    v18 = -0.0;
    v17 = -0.0;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v31, (double *)a1, v6);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)&v31, 0, 0.0, (uint64_t)&v22);
  *(_QWORD *)&v31 = sub_20BEF4828(v22.f64, &v28);
  *((_QWORD *)&v31 + 1) = v14;
  v32 = v15;
  v20 = vaddq_f64(vaddq_f64(vmulq_n_f64(v22, v18), vmulq_n_f64(v24, v17)), vmulq_n_f64(v26, v19));
  v21 = v18 * v23 + v17 * v25 + v19 * v27;
  *(_QWORD *)&result = pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(a3, &v31, (__n128 *)&v20).n128_u64[0];
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputePickRay@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  uint64_t v18;

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v17, (double *)a1, (double *)(a1 + 24));
  v6 = sub_20BEF4828(v17.f64, a2);
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    v9 = sqrt(v8 * v8 + v6 * v6 + v7 * v7);
    v10 = 1.0 / v9;
    if (v9 <= 1.0e-10)
      v10 = 1.0e10;
    v11 = v6 * v10;
    v12 = v7 * v10;
    v13 = v8 * v10;
    v17 = 0uLL;
    v18 = 0;
  }
  else
  {
    v17.f64[0] = v6;
    v17.f64[1] = v7;
    v18 = 0;
    v13 = -1.0;
    v11 = -0.0;
    v12 = -0.0;
  }
  v15.f64[0] = v11;
  v15.f64[1] = v12;
  v16 = v13;
  return pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputePickRayOffsetToNearPlane((double *)a1, &v17, &v15, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::Intersects(pxrInternal__aapl__pxrReserved__::GfFrustum *this, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2)
{
  _BOOL8 result;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  BOOL v8;
  _OWORD v9[2];

  if (*(double *)a2 > *((double *)a2 + 3)
    || *((double *)a2 + 1) > *((double *)a2 + 4)
    || *((double *)a2 + 2) > *((double *)a2 + 5))
  {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes(this);
  v5 = 0;
  v6 = atomic_load((unint64_t *)this + 15);
  do
  {
    v7 = *(_OWORD *)(v6 + v5 + 16);
    v9[0] = *(_OWORD *)(v6 + v5);
    v9[1] = v7;
    pxrInternal__aapl__pxrReserved__::GfPlane::Transform((pxrInternal__aapl__pxrReserved__::GfPlane *)v9, (const pxrInternal__aapl__pxrReserved__::GfBBox3d *)((char *)a2 + 176));
    result = pxrInternal__aapl__pxrReserved__::GfPlane::IntersectsPositiveHalfSpace((uint64_t)v9, (double *)a2);
    if (!result)
      break;
    v8 = v5 == 160;
    v5 += 32;
  }
  while (!v8);
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  unint64_t *v1;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float64_t v9;
  double v10;
  float64_t v11;
  double v12;
  float64_t v13;
  double v14;
  float64_t v15;
  double v16;
  float64_t v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float64_t v23;
  float64_t v24;
  float64_t v25;
  double v26;
  float64_t v27;
  double v28;
  float64_t v29;
  double v30;
  float64_t v31;
  double v32;
  float64x2_t v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double v40;
  double v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  double v45;
  BOOL v46;
  double v47;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  double v57;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  __int128 v61;
  float64x2_t v62;
  __int128 v63;
  float64x2_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v1 = (unint64_t *)((char *)this + 120);
  if (!atomic_load((unint64_t *)this + 15))
  {
    v4 = operator new(0xC0uLL);
    v5 = *((double *)this + 11);
    v6 = *((double *)this + 12);
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v68, (double *)this, (double *)this + 3);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)&v68, 0, 0.0, (uint64_t)&v60);
    if (*((_DWORD *)this + 28) == 1)
    {
      v58 = 0uLL;
      v59 = 0.0;
      v7 = v5 * *((double *)this + 8);
      v56.f64[0] = v5 * *((double *)this + 7);
      v56.f64[1] = v7;
      v8 = *((double *)this + 10);
      v54.f64[0] = v5 * *((double *)this + 9);
      v54.f64[1] = v7;
      v57 = -v5;
      v55 = -v5;
      v52.f64[0] = v56.f64[0];
      v52.f64[1] = v5 * v8;
      v53 = -v5;
      v50.f64[0] = v54.f64[0];
      v50.f64[1] = v5 * v8;
      v51 = -v5;
      v58.f64[0] = sub_20BEF4828(v60.f64, v58.f64);
      v58.f64[1] = v9;
      v59 = v10;
      v56.f64[0] = sub_20BEF4828(v60.f64, v56.f64);
      v56.f64[1] = v11;
      v57 = v12;
      v54.f64[0] = sub_20BEF4828(v60.f64, v54.f64);
      v54.f64[1] = v13;
      v55 = v14;
      v52.f64[0] = sub_20BEF4828(v60.f64, v52.f64);
      v52.f64[1] = v15;
      v53 = v16;
      v50.f64[0] = sub_20BEF4828(v60.f64, v50.f64);
      v50.f64[1] = v17;
      v51 = v18;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v58.f64, v56.f64, v52.f64);
      v19 = v69;
      *(_OWORD *)v4 = v68;
      *((_OWORD *)v4 + 1) = v19;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v58.f64, v50.f64, v54.f64);
      v20 = v69;
      *((_OWORD *)v4 + 2) = v68;
      *((_OWORD *)v4 + 3) = v20;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v58.f64, v54.f64, v56.f64);
      v21 = v69;
      *((_OWORD *)v4 + 4) = v68;
      *((_OWORD *)v4 + 5) = v21;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v58.f64, v52.f64, v50.f64);
      v22 = v69;
      *((_OWORD *)v4 + 6) = v68;
      *((_OWORD *)v4 + 7) = v22;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v54.f64, v56.f64, v52.f64);
    }
    else
    {
      v23 = *((double *)this + 8);
      v58.f64[0] = *((float64_t *)this + 7);
      v58.f64[1] = v23;
      v24 = *((double *)this + 10);
      v56.f64[0] = *((float64_t *)this + 9);
      v56.f64[1] = v23;
      v59 = -v5;
      v57 = -v5;
      v54.f64[0] = v58.f64[0];
      v54.f64[1] = v24;
      v55 = -v5;
      v52.f64[0] = v56.f64[0];
      v52.f64[1] = v24;
      v53 = -v5;
      v58.f64[0] = sub_20BEF4828(v60.f64, v58.f64);
      v58.f64[1] = v25;
      v59 = v26;
      v56.f64[0] = sub_20BEF4828(v60.f64, v56.f64);
      v56.f64[1] = v27;
      v57 = v28;
      v54.f64[0] = sub_20BEF4828(v60.f64, v54.f64);
      v54.f64[1] = v29;
      v55 = v30;
      v52.f64[0] = sub_20BEF4828(v60.f64, v52.f64);
      v52.f64[1] = v31;
      v53 = v32;
      v33 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
      v34 = *(double *)&v61 * -0.0 + *(double *)&v63 * -0.0 - *(double *)&v65;
      v49 = vsubq_f64(vaddq_f64(vmulq_f64(v60, v33), vmulq_f64(v62, v33)), v64);
      v50 = vaddq_f64(v49, v54);
      v51 = v34 + v55;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v50.f64, v54.f64, v58.f64);
      v35 = v69;
      *(_OWORD *)v4 = v68;
      *((_OWORD *)v4 + 1) = v35;
      v50 = vaddq_f64(v49, v56);
      v51 = v34 + v57;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v50.f64, v56.f64, v52.f64);
      v36 = v69;
      *((_OWORD *)v4 + 2) = v68;
      *((_OWORD *)v4 + 3) = v36;
      v50 = vaddq_f64(v49, v58);
      v51 = v34 + v59;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v50.f64, v58.f64, v56.f64);
      v37 = v69;
      *((_OWORD *)v4 + 4) = v68;
      *((_OWORD *)v4 + 5) = v37;
      v50 = vaddq_f64(v49, v52);
      v51 = v34 + v53;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v50.f64, v52.f64, v54.f64);
      v38 = v69;
      *((_OWORD *)v4 + 6) = v68;
      *((_OWORD *)v4 + 7) = v38;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v68, v56.f64, v58.f64, v54.f64);
    }
    v39 = v69;
    *((_OWORD *)v4 + 8) = v68;
    *((_OWORD *)v4 + 9) = v39;
    v40 = *((double *)v4 + 18);
    v41 = -(v6 - v5 + *((double *)v4 + 19));
    v42 = *((float64x2_t *)v4 + 8);
    v43 = vnegq_f64(v42);
    v44 = sqrt(vaddvq_f64(vmulq_f64(v42, v42)) + v40 * v40);
    v45 = 1.0 / v44;
    v46 = v44 <= 1.0e-10;
    v47 = 1.0e10;
    if (!v46)
      v47 = v45;
    *((float64x2_t *)v4 + 10) = vmulq_n_f64(v43, v47);
    *((double *)v4 + 22) = -(v40 * v47);
    *((double *)v4 + 23) = v41;
    while (!__ldaxr(v1))
    {
      if (!__stlxr((unint64_t)v4, v1))
        return;
    }
    __clrex();
    operator delete(v4);
  }
}

void sub_20BEFAC28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::Intersects(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  float64x2_t v6;
  double v7;
  BOOL v8;

  pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1);
  v4 = 0;
  v5 = atomic_load(a1 + 15);
  do
  {
    v6 = vmulq_f64(*(float64x2_t *)(v5 + v4 + 8), *(float64x2_t *)(a2 + 8));
    v7 = *(double *)(v5 + v4) * *(double *)a2 + v6.f64[0] + v6.f64[1] - *(double *)(v5 + v4 + 24);
    if (v7 < 0.0)
      break;
    v8 = v4 == 160;
    v4 += 32;
  }
  while (!v8);
  return v7 >= 0.0;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects(uint64_t a1, double *a2, int a3, double *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  int v16;
  double v17;

  if ((a5 | a3) != 0x3F)
    return 0;
  v5 = 1;
  if (a3 != 63 && a5 != 63)
  {
    v6 = 0;
    v7 = *a4 - *a2;
    v11 = atomic_load((unint64_t *)(a1 + 120));
    v13 = (double *)(v11 + 16);
    v14 = 1.0;
    v15 = 0.0;
    while (1)
    {
      v16 = (1 << v6) & a3;
      if (v16 != ((1 << v6) & a5))
      {
        v8 = a4[1] - a2[1];
        v10 = a4[2] - a2[2];
        v12 = *a2;
        v9 = a2[1];
        v17 = -(*a2 * *(v13 - 2) + v9 * *(v13 - 1) + a2[2] * *v13 - v13[1])
            / (v7 * *(v13 - 2) + v8 * *(v13 - 1) + v10 * *v13);
        if (v16)
        {
          if (v17 < v14)
            v14 = -(v12 * *(v13 - 2) + v9 * *(v13 - 1) + a2[2] * *v13 - v13[1])
                / (v7 * *(v13 - 2) + v8 * *(v13 - 1) + v10 * *v13);
        }
        else if (v17 > v15)
        {
          v15 = -(v12 * *(v13 - 2) + v9 * *(v13 - 1) + a2[2] * *v13 - v13[1])
              / (v7 * *(v13 - 2) + v8 * *(v13 - 1) + v10 * *v13);
        }
        if (v15 > v14)
          break;
      }
      ++v6;
      v13 += 4;
      if (v6 == 6)
        return 1;
    }
    return 0;
  }
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::Intersects(unint64_t *a1, double *a2, double *a3)
{
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  double v36;
  double v37;

  pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1);
  v6 = (double *)atomic_load(a1 + 15);
  v7 = a2[1];
  v8 = v6[1];
  v9 = a2[2];
  v10 = v6[2];
  v11 = v6[3];
  v12 = v6[4];
  v13 = v6[5];
  v14 = v6[6];
  v15 = v6[7];
  v16 = v6[8];
  v17 = v6[9];
  v18 = v6[10];
  v19 = v6[11];
  v20 = v6[12];
  v21 = v6[13];
  v22 = v6[14];
  v23 = v6[15];
  v24 = v6[16];
  v25 = v6[17];
  v26 = v6[18];
  v27 = v6[19];
  v28 = (*a2 * *v6 + v7 * v8 + v9 * v10 - v11 >= 0.0) | (2 * (*a2 * v12 + v7 * v13 + v9 * v14 - v15 >= 0.0)) | (4 * (*a2 * v16 + v7 * v17 + v9 * v18 - v19 >= 0.0)) | (8 * (*a2 * v20 + v7 * v21 + v9 * v22 - v23 >= 0.0)) | (16 * (*a2 * v24 + v7 * v25 + v9 * v26 - v27 >= 0.0));
  v30 = v6[20];
  v29 = v6[21];
  v31 = *a2 * v30 + v7 * v29;
  v33 = v6[22];
  v32 = v6[23];
  v34 = v28 | (32 * (v31 + v9 * v33 - v32 >= 0.0));
  v35 = a3[1];
  v36 = *v6 * *a3 + v8 * v35;
  v37 = a3[2];
  return pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects((uint64_t)a1, a2, v34, a3, (v36 + v10 * v37 - v11 >= 0.0) | (2 * (v12 * *a3 + v13 * v35 + v14 * v37 - v15 >= 0.0)) | (4 * (v16 * *a3 + v17 * v35 + v18 * v37 - v19 >= 0.0)) | (8 * (v20 * *a3 + v21 * v35 + v22 * v37 - v23 >= 0.0)) | (16 * (v24 * *a3 + v25 * v35 + v26 * v37 - v27 >= 0.0)) | (32 * (v30 * *a3 + v29 * v35 + v33 * v37 - v32 >= 0.0)));
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::Intersects(unint64_t *a1, double *a2, double *a3, double *a4)
{
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  unsigned int v37;
  double v38;
  double v39;
  double v40;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  unsigned int v46;
  uint64_t result;
  unint64_t v48;
  BOOL v49;
  char v50;
  float64_t v51;
  BOOL v52;
  char v53;
  uint64_t v54;
  _BYTE v55[48];
  float64x2_t v56;

  pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1);
  v8 = (double *)atomic_load(a1 + 15);
  v9 = a2[1];
  v10 = v8[1];
  v11 = a2[2];
  v12 = v8[2];
  v13 = v8[3];
  v14 = v8[4];
  v15 = v8[5];
  v16 = v8[6];
  v17 = v8[7];
  v18 = v8[8];
  v19 = v8[9];
  v20 = v8[10];
  v21 = v8[11];
  v22 = v8[12];
  v23 = v8[13];
  v24 = v8[14];
  v25 = v8[15];
  v26 = (*a2 * *v8 + v9 * v10 + v11 * v12 - v13 >= 0.0) | (2 * (*a2 * v14 + v9 * v15 + v11 * v16 - v17 >= 0.0)) | (4 * (*a2 * v18 + v9 * v19 + v11 * v20 - v21 >= 0.0)) | (8 * (*a2 * v22 + v9 * v23 + v11 * v24 - v25 >= 0.0));
  v27 = v8[16];
  v28 = v8[17];
  v29 = v8[18];
  v30 = v8[19];
  v31 = *a2 * v27 + v9 * v28 + v11 * v29 - v30;
  v32 = v8[20];
  v33 = v8[21];
  v34 = *a2 * v32 + v9 * v33;
  v35 = v8[22];
  v36 = v8[23];
  v37 = v26 | (16 * (v31 >= 0.0)) | (32 * (v34 + v11 * v35 - v36 >= 0.0));
  v38 = a3[1];
  v39 = a3[2];
  v40 = v27 * *a3 + v28 * v38 + v29 * v39 - v30;
  v41 = (*v8 * *a3 + v10 * v38 + v12 * v39 - v13 >= 0.0) | (2 * (v14 * *a3 + v15 * v38 + v16 * v39 - v17 >= 0.0)) | (4 * (v18 * *a3 + v19 * v38 + v20 * v39 - v21 >= 0.0)) | (8 * (v22 * *a3 + v23 * v38 + v24 * v39 - v25 >= 0.0)) | (32 * (v32 * *a3 + v33 * v38 + v35 * v39 - v36 >= 0.0)) | (16 * (v40 >= 0.0));
  v42 = a4[1];
  v43 = *v8 * *a4 + v10 * v42;
  v44 = a4[2];
  v45 = v27 * *a4 + v28 * v42 + v29 * v44 - v30;
  v46 = (v43 + v12 * v44 - v13 >= 0.0) | (2 * (v14 * *a4 + v15 * v42 + v16 * v44 - v17 >= 0.0)) | (4
                                                                                                 * (v18 * *a4 + v19 * v42 + v20 * v44 - v21 >= 0.0)) | (8 * (v22 * *a4 + v23 * v42 + v24 * v44 - v25 >= 0.0)) | (32 * (v32 * *a4 + v33 * v42 + v35 * v44 - v36 >= 0.0)) | (16 * (v45 >= 0.0));
  if ((v41 | v37 | v46) != 0x3F)
    return 0;
  result = 1;
  if (v37 != 63 && v41 != 63 && v46 != 63)
  {
    if ((pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects((uint64_t)a1, a2, v37, a3, v41) & 1) != 0
      || (pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects((uint64_t)a1, a3, v41, a4, v46) & 1) != 0
      || (pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects((uint64_t)a1, a4, v46, a2, v37) & 1) != 0)
    {
      return 1;
    }
    v48 = 0;
    v49 = v31 < 0.0;
    if (v40 < 0.0)
      v49 = 1;
    if (v45 < 0.0)
      v49 = 1;
    if (v37 < 0x20)
      v49 = 1;
    if (v41 < 0x20)
      v49 = 1;
    if (v46 < 0x20)
      v49 = 1;
    v50 = !v49;
    while (1)
    {
      v56 = 0uLL;
      if (v48 == 2)
      {
        v56.f64[0] = 1.0;
      }
      else
      {
        if (v48 != 1)
        {
          if (v48)
            v56.f64[0] = 1.0;
          else
            v56.f64[0] = -1.0;
          v51 = -1.0;
          goto LABEL_31;
        }
        v56.f64[0] = -1.0;
      }
      v51 = 1.0;
LABEL_31:
      v56.f64[1] = v51;
      pxrInternal__aapl__pxrReserved__::GfFrustum::ComputePickRay((uint64_t)a1, &v56, (uint64_t)v55);
      v54 = 0;
      result = pxrInternal__aapl__pxrReserved__::GfRay::Intersect((pxrInternal__aapl__pxrReserved__::GfRay *)v55, a2, a3, a4, (double *)&v54, 0, 0, INFINITY);
      if (!(_DWORD)result)
      {
        v52 = v48++ > 2;
        v53 = v52 ? 1 : v50;
        if ((v53 & 1) == 0)
          continue;
      }
      return result;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::IntersectsViewVolume(pxrInternal__aapl__pxrReserved__::GfFrustum *this, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int8x16_t v11;
  const double *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  int8x8_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33[3];
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float64x2x4_t v66;
  float64x2x4_t v67;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1);
  v34[0] = *(_QWORD *)this;
  v34[1] = v3;
  v4 = *((_QWORD *)this + 3);
  v35 = *((_QWORD *)this + 2);
  v36 = 0x3FF0000000000000;
  v37 = v34[0];
  v38 = v3;
  v5 = *((_QWORD *)this + 4);
  v39 = *((_QWORD *)this + 5);
  v40 = 0x3FF0000000000000;
  v41 = v34[0];
  v42 = v5;
  v43 = v35;
  v44 = 0x3FF0000000000000;
  v45 = v34[0];
  v46 = v5;
  v47 = v39;
  v48 = 0x3FF0000000000000;
  v49 = v4;
  v50 = v3;
  v51 = v35;
  v52 = 0x3FF0000000000000;
  v53 = v4;
  v54 = v3;
  v55 = v39;
  v56 = 0x3FF0000000000000;
  v57 = v4;
  v58 = v5;
  v59 = v35;
  v60 = 0x3FF0000000000000;
  v61 = v4;
  v62 = v5;
  v63 = v39;
  v64 = 0x3FF0000000000000;
  v6 = *((_OWORD *)this + 8);
  v30 = *((_OWORD *)this + 7);
  v31 = v6;
  v7 = *((_OWORD *)this + 10);
  v32 = *((_OWORD *)this + 9);
  *(_OWORD *)v33 = v7;
  v8 = *((_OWORD *)this + 4);
  v26 = *((_OWORD *)this + 3);
  v27 = v8;
  v9 = *((_OWORD *)this + 6);
  v28 = *((_OWORD *)this + 5);
  v29 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v26, (double *)a2);
  v10 = 0;
  v11 = 0uLL;
  do
  {
    v12 = (const double *)&v34[v10];
    v10 += 16;
    v67 = vld4q_f64(v12);
    v12 += 8;
    v66 = vld4q_f64(v12);
    v13 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v67.val[0], *(double *)&v26), vmulq_n_f64(v67.val[1], *(double *)&v28)), vmulq_n_f64(v67.val[2], *(double *)&v30)), vmulq_n_f64(v67.val[3], *(double *)&v32));
    v14 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v66.val[0], *(double *)&v26), vmulq_n_f64(v66.val[1], *(double *)&v28)), vmulq_n_f64(v66.val[2], *(double *)&v30)), vmulq_n_f64(v66.val[3], *(double *)&v32));
    v15 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v67.val[0], *((double *)&v26 + 1)), vmulq_n_f64(v67.val[1], *((double *)&v28 + 1))), vmulq_n_f64(v67.val[2], *((double *)&v30 + 1))), vmulq_n_f64(v67.val[3], *((double *)&v32 + 1)));
    v16 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v66.val[0], *((double *)&v26 + 1)), vmulq_n_f64(v66.val[1], *((double *)&v28 + 1))), vmulq_n_f64(v66.val[2], *((double *)&v30 + 1))), vmulq_n_f64(v66.val[3], *((double *)&v32 + 1)));
    v17 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v67.val[0], *(double *)&v27), vmulq_n_f64(v67.val[1], *(double *)&v29)), vmulq_n_f64(v67.val[2], *(double *)&v31)), vmulq_n_f64(v67.val[3], v33[0]));
    v18 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v66.val[0], *(double *)&v27), vmulq_n_f64(v66.val[1], *(double *)&v29)), vmulq_n_f64(v66.val[2], *(double *)&v31)), vmulq_n_f64(v66.val[3], v33[0]));
    v19 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v66.val[0], *((double *)&v27 + 1)), vmulq_n_f64(v66.val[1], *((double *)&v29 + 1))), vmulq_n_f64(v66.val[2], *((double *)&v31 + 1))), vmulq_n_f64(v66.val[3], v33[1]));
    v20 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v67.val[0], *((double *)&v27 + 1)), vmulq_n_f64(v67.val[1], *((double *)&v29 + 1))), vmulq_n_f64(v67.val[2], *((double *)&v31 + 1))), vmulq_n_f64(v67.val[3], v33[1]));
    v21 = vnegq_f64(v19);
    v22 = vnegq_f64(v20);
    v23.i64[0] = 0x200000002;
    v23.i64[1] = 0x200000002;
    v11 = vorrq_s8((int8x16_t)vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(vsubq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v20, v13), (int32x4_t)vcgtq_f64(v19, v14)), v23), vuzp1q_s32((int32x4_t)vcgtq_f64(v13, v22), (int32x4_t)vcgtq_f64(v14, v21))), 2uLL), vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v20, v15), (int32x4_t)vcgtq_f64(v19, v16)), v23)),
                                                     vuzp1q_s32((int32x4_t)vcgtq_f64(v15, v22), (int32x4_t)vcgtq_f64(v16, v21))), 2uLL), vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v20, v17), (int32x4_t)vcgtq_f64(v19, v18)), v23)), vuzp1q_s32((int32x4_t)vcgtq_f64(v17, v22), (int32x4_t)vcgtq_f64(v18, v21))), v11);
  }
  while (v10 != 32);
  v24 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  return (v24.i32[0] | v24.i32[1]) == 63;
}

void sub_20BEFB9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BEFB9D8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF10, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF10, (char *)0x80, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFBA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEFBAD8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  v4 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(_QWORD *)(a1 + 120) = 0;
  v6 = (__int128 *)atomic_load((unint64_t *)a2 + 15);
  if (v6)
  {
    v7 = operator new(0xC0uLL);
    v8 = v6[3];
    v10 = *v6;
    v9 = v6[1];
    v7[2] = v6[2];
    v7[3] = v8;
    *v7 = v10;
    v7[1] = v9;
    v11 = v6[7];
    v13 = v6[4];
    v12 = v6[5];
    v7[6] = v6[6];
    v7[7] = v11;
    v7[4] = v13;
    v7[5] = v12;
    v14 = v6[11];
    v16 = v6[8];
    v15 = v6[9];
    v7[10] = v6[10];
    v7[11] = v14;
    v7[8] = v16;
    v7[9] = v15;
    atomic_store((unint64_t)v7, (unint64_t *)(a1 + 120));
  }
  return a1;
}

double pxrInternal__aapl__pxrReserved__::GfGetDisplayGamma(pxrInternal__aapl__pxrReserved__ *this)
{
  return 2.2;
}

float pxrInternal__aapl__pxrReserved__::GfApplyGamma(float *a1, long double a2)
{
  float v4;

  v4 = pow(*a1, a2);
  pow(a1[1], a2);
  pow(a1[2], a2);
  return v4;
}

{
  float v4;

  v4 = pow(*a1, a2);
  pow(a1[1], a2);
  pow(a1[2], a2);
  return v4;
}

double pxrInternal__aapl__pxrReserved__::GfApplyGamma(long double *a1, long double a2)
{
  double v4;

  v4 = pow(*a1, a2);
  pow(a1[1], a2);
  pow(a1[2], a2);
  return v4;
}

{
  double v4;

  v4 = pow(*a1, a2);
  pow(a1[1], a2);
  pow(a1[2], a2);
  return v4;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfApplyGamma(unsigned __int16 *a1, long double a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  uint64_t v9;

  v4 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1], a2);
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  v6 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]], a2);
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  v8 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]], a2);
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  return ((unint64_t)(unsigned __int16)v7 << 16) | (v9 << 32) | (unsigned __int16)v5;
}

{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;

  v4 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1], a2);
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  v6 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]], a2);
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  v8 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]], a2);
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  return ((unint64_t)(unsigned __int16)v9 << 32) | ((unint64_t)a1[3] << 48) | ((unint64_t)(unsigned __int16)v7 << 16) | (unsigned __int16)v5;
}

float pxrInternal__aapl__pxrReserved__::GfApplyGamma(pxrInternal__aapl__pxrReserved__ *this, const float *a2, long double a3)
{
  return pow(*(float *)this, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfApplyGamma(pxrInternal__aapl__pxrReserved__ *this, const unsigned __int8 *a2, long double a3)
{
  long double v3;

  v3 = a3;
  LOBYTE(a3) = *(_BYTE *)this;
  return (int)(pow((double)*(unint64_t *)&a3 / 255.0, v3) * 255.0);
}

float pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(float *a1)
{
  float v2;

  v2 = pow(*a1, 0.454545455);
  pow(a1[1], 0.454545455);
  pow(a1[2], 0.454545455);
  return v2;
}

{
  float v2;

  v2 = pow(*a1, 0.454545455);
  pow(a1[1], 0.454545455);
  pow(a1[2], 0.454545455);
  return v2;
}

double pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(long double *a1)
{
  double v2;

  v2 = pow(*a1, 0.454545455);
  pow(a1[1], 0.454545455);
  pow(a1[2], 0.454545455);
  return v2;
}

{
  double v2;

  v2 = pow(*a1, 0.454545455);
  pow(a1[1], 0.454545455);
  pow(a1[2], 0.454545455);
  return v2;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(unsigned __int16 *a1)
{
  return pxrInternal__aapl__pxrReserved__::GfApplyGamma(a1, 0.454545455);
}

{
  return pxrInternal__aapl__pxrReserved__::GfApplyGamma(a1, 0.454545455);
}

float pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(pxrInternal__aapl__pxrReserved__ *this, const float *a2)
{
  return pow(*(float *)this, 0.454545455);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(pxrInternal__aapl__pxrReserved__ *this, const unsigned __int8 *a2, double a3)
{
  LOBYTE(a3) = *(_BYTE *)this;
  return (int)(pow((double)*(unint64_t *)&a3 / 255.0, 0.454545455) * 255.0);
}

float pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(float *a1)
{
  float v2;

  v2 = pow(*a1, 2.2);
  pow(a1[1], 2.2);
  pow(a1[2], 2.2);
  return v2;
}

{
  float v2;

  v2 = pow(*a1, 2.2);
  pow(a1[1], 2.2);
  pow(a1[2], 2.2);
  return v2;
}

double pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(long double *a1)
{
  double v2;

  v2 = pow(*a1, 2.2);
  pow(a1[1], 2.2);
  pow(a1[2], 2.2);
  return v2;
}

{
  double v2;

  v2 = pow(*a1, 2.2);
  pow(a1[1], 2.2);
  pow(a1[2], 2.2);
  return v2;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(unsigned __int16 *a1)
{
  return pxrInternal__aapl__pxrReserved__::GfApplyGamma(a1, 2.2);
}

{
  return pxrInternal__aapl__pxrReserved__::GfApplyGamma(a1, 2.2);
}

float pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(pxrInternal__aapl__pxrReserved__ *this, const float *a2)
{
  return pow(*(float *)this, 2.2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(pxrInternal__aapl__pxrReserved__ *this, const unsigned __int8 *a2, double a3)
{
  LOBYTE(a3) = *(_BYTE *)this;
  return (int)(pow((double)*(unint64_t *)&a3 / 255.0, 2.2) * 255.0);
}

uint64_t *sub_20BEFC530()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF30, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF30, (char *)2, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFC5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfGetHomogenized(float32x2_t *a1)
{
  float v1;

  v1 = a1[1].f32[1];
  if (v1 == 0.0)
    v1 = 1.0;
  return vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*a1), 1.0 / v1));
}

float pxrInternal__aapl__pxrReserved__::GfHomogeneousCross(float32x2_t *a1, float32x2_t *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  pxrInternal__aapl__pxrReserved__::GfGetHomogenized(a1);
  v4 = v3;
  v6 = v5;
  pxrInternal__aapl__pxrReserved__::GfGetHomogenized(a2);
  return (float)(v4 * v7) - (float)(v6 * v8);
}

double pxrInternal__aapl__pxrReserved__::GfGetHomogenized(double *a1)
{
  double v1;

  v1 = a1[3];
  if (v1 == 0.0)
    v1 = 1.0;
  return *a1 * (1.0 / v1);
}

double pxrInternal__aapl__pxrReserved__::GfHomogeneousCross(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = a1[3];
  v3 = 1.0;
  if (v2 == 0.0)
    v4 = 1.0;
  else
    v4 = 1.0 / v2;
  v5 = a2[3];
  if (v5 != 0.0)
    v3 = 1.0 / v5;
  return a1[1] * v4 * (a2[2] * v3) - a1[2] * v4 * (a2[1] * v3);
}

float pxrInternal__aapl__pxrReserved__::pxr_half::half::overflow(pxrInternal__aapl__pxrReserved__::pxr_half::half *this)
{
  int v1;
  float v3;

  v3 = 1.0e10;
  v1 = 10;
  do
  {
    v3 = v3 * v3;
    --v1;
  }
  while (v1);
  return v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(pxrInternal__aapl__pxrReserved__::pxr_half::half *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  float v12;

  v1 = (this >> 16) & 0x8000;
  v2 = (this >> 23);
  v3 = this & 0x7FFFFF;
  v4 = v2 - 112;
  if (v2 > 0x70)
  {
    if (v2 == 255)
    {
      v6 = (v3 < 0x2000) | (v3 >> 13) | v1 | 0x7C00;
      LOWORD(v1) = v1 | 0x7C00;
      if (v3)
        LOWORD(v1) = v6;
    }
    else
    {
      v7 = v3 + ((this >> 13) & 1) + 4095;
      v8 = v2 - 111;
      if ((v7 & 0x800000) == 0)
        v8 = v4;
      if (v8 < 0x1F)
      {
        if ((v7 & 0x800000) != 0)
          LOWORD(v10) = 0;
        else
          v10 = v7 >> 13;
        LOWORD(v1) = v10 | ((_WORD)v8 << 10) | v1;
      }
      else
      {
        v12 = 1.0e10;
        v9 = 10;
        do
        {
          v12 = v12 * v12;
          --v9;
        }
        while (v9);
        LOWORD(v1) = v1 | 0x7C00;
      }
    }
  }
  else
  {
    v5 = (((v3 | 0x800000) + ~(-1 << (125 - v2)) + (((v3 | 0x800000) >> (126 - v2)) & 1)) >> (126 - v2)) | v1;
    if (v2 >= 0x66)
      LOWORD(v1) = v5;
  }
  return (__int16)v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::operator<<(uint64_t a1)
{
  std::ostream::operator<<();
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::operator>>(uint64_t a1, _WORD *a2)
{
  unsigned int v4;
  float v6;

  v6 = 0.0;
  MEMORY[0x212B92B14](a1, &v6);
  if (v6 == 0.0)
  {
    v4 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v4) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  *a2 = v4;
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::pxr_half::printBits(_QWORD *a1, unsigned __int16 a2)
{
  unsigned int v3;
  int i;
  char v5;
  _QWORD *result;
  char v7;
  char v8;

  v3 = a2;
  for (i = 15; i != -1; --i)
  {
    if (((v3 >> i) & 1) != 0)
      v5 = 49;
    else
      v5 = 48;
    v7 = v5;
    result = sub_20BDDC1C8(a1, (uint64_t)&v7, 1);
    if (i == 15 || i == 10)
    {
      v8 = 32;
      result = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::pxr_half::printBits(_QWORD *a1, float a2)
{
  int i;
  char v5;
  _QWORD *result;
  char v7;
  char v8;

  for (i = 31; i != -1; --i)
  {
    if (((LODWORD(a2) >> i) & 1) != 0)
      v5 = 49;
    else
      v5 = 48;
    v7 = v5;
    result = sub_20BDDC1C8(a1, (uint64_t)&v7, 1);
    if ((i & 0xFFFFFFF7) == 0x17)
    {
      v8 = 32;
      result = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::printBits(uint64_t result, unsigned __int16 a2)
{
  uint64_t v2;
  int i;
  char v4;

  LODWORD(v2) = 0;
  for (i = 15; i != -1; --i)
  {
    if (((a2 >> i) & 1) != 0)
      v4 = 49;
    else
      v4 = 48;
    *(_BYTE *)(result + (int)v2) = v4;
    if (i == 15 || i == 10)
    {
      v2 = (int)v2 + 1;
      *(_BYTE *)(result + v2) = 32;
    }
    LODWORD(v2) = v2 + 1;
  }
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::printBits(uint64_t this, char *a2, float a3)
{
  uint64_t v3;
  int i;
  char v5;

  LODWORD(v3) = 0;
  for (i = 31; i != -1; --i)
  {
    if (((LODWORD(a3) >> i) & 1) != 0)
      v5 = 49;
    else
      v5 = 48;
    *(_BYTE *)(this + (int)v3) = v5;
    if ((i & 0xFFFFFFF7) == 0x17)
    {
      v3 = (int)v3 + 1;
      *(_BYTE *)(this + v3) = 32;
    }
    LODWORD(v3) = v3 + 1;
  }
  *(_BYTE *)(this + 34) = 0;
  return this;
}

uint64_t *sub_20BEFCBEC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF40, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF40, (char *)0x20, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFCCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfLine::FindClosestPoint(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;

  v3 = *a1;
  v4 = a1[3];
  v5 = (*a2 - *a1) * v4 + (a2[1] - a1[1]) * a1[4] + (a2[2] - a1[2]) * a1[5];
  if (a3)
  {
    *a3 = v5;
    v3 = *a1;
    v4 = a1[3];
  }
  return v5 * v4 + v3;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(double *a1, uint64_t a2, double *a3, float64x2_t *a4, double *a5, double *a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v6 = a1[3];
  v7 = a1[4];
  v8 = *(double *)(a2 + 24);
  v9 = *(double *)(a2 + 32);
  v10 = a1[5];
  v11 = *(double *)(a2 + 40);
  v12 = v6 * v8 + v7 * v9 + v10 * v11;
  v13 = v6 * v6 + v7 * v7 + v10 * v10;
  v14 = v8 * v8 + v9 * v9 + v11 * v11;
  v15 = vabdd_f64(v12 * v12, v13 * v14);
  if (v15 >= 0.000001)
  {
    v16 = v12 * v12 - v13 * v14;
    v17 = *(double *)(a2 + 8);
    v18 = *(double *)(a2 + 16);
    v19 = v8 * *(double *)a2 + v9 * v17 + v11 * v18;
    v20 = a1[1];
    v21 = v8 * *a1 + v9 * v20;
    v22 = a1[2];
    v23 = v21 + v11 * v22 - v19;
    v24 = v6 * *a1 + v7 * v20 + v10 * v22 - (v6 * *(double *)a2 + v7 * v17 + v10 * v18);
    v25 = (v14 * v24 - v12 * v23) / v16;
    v26 = v12 * v24 - v13 * v23;
    if (a3)
    {
      *a3 = *a1 + v6 * v25;
      a3[1] = v25 * v7 + v20;
      a3[2] = v25 * v10 + v22;
    }
    v27 = v26 / v16;
    if (a4)
    {
      v28 = v27 * *(double *)(a2 + 40) + *(double *)(a2 + 16);
      *a4 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 24), v27), *(float64x2_t *)a2);
      a4[1].f64[0] = v28;
    }
    if (a5)
      *a5 = v25;
    if (a6)
      *a6 = v27;
  }
  return v15 >= 0.000001;
}

uint64_t *sub_20BEFCF84()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF50, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF50, (char *)0x30, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFD040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfLine2d::FindClosestPoint(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;

  v3 = *a1;
  v4 = a1[2];
  v5 = (*a2 - *a1) * v4 + (a2[1] - a1[1]) * a1[3];
  if (a3)
  {
    *a3 = v5;
    v4 = a1[2];
    v3 = *a1;
  }
  return v5 * v4 + v3;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(double *a1, float64x2_t *a2, double *a3, float64x2_t *a4, double *a5, double *a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1].f64[0];
  v9 = a2[1].f64[1];
  v10 = v6 * v8 + v7 * v9;
  v11 = v6 * v6 + v7 * v7;
  v12 = v8 * v8 + v9 * v9;
  v13 = vabdd_f64(v10 * v10, v11 * v12);
  if (v13 >= 0.000001)
  {
    v14 = v10 * v10 - v11 * v12;
    v15 = a2->f64[1];
    v16 = a1[1];
    v17 = v8 * *a1 + v9 * v16 - (v8 * a2->f64[0] + v9 * v15);
    v18 = v6 * *a1 + v7 * v16 - (v6 * a2->f64[0] + v7 * v15);
    v19 = (v12 * v18 - v10 * v17) / v14;
    v20 = v10 * v18 - v11 * v17;
    if (a3)
    {
      *a3 = *a1 + v6 * v19;
      a3[1] = v19 * v7 + v16;
    }
    v21 = v20 / v14;
    if (a4)
      *a4 = vaddq_f64(vmulq_n_f64(a2[1], v21), *a2);
    if (a5)
      *a5 = v19;
    if (a6)
      *a6 = v21;
  }
  return v13 >= 0.000001;
}

uint64_t *sub_20BEFD1C0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF60, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF60, (char *)0x20, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFD27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfLineSeg::FindClosestPoint(double *a1, double *a2, double *a3)
{
  double v5;
  double v6;
  double v8;
  double v9;

  v5 = a1[6];
  v6 = 0.0;
  if (v5 == 0.0)
  {
    if (a3)
    {
LABEL_3:
      *a3 = v6;
      v5 = a1[6];
    }
  }
  else
  {
    v9 = 0.0;
    pxrInternal__aapl__pxrReserved__::GfLine::FindClosestPoint(a1, a2, &v9);
    v5 = a1[6];
    v8 = 1.0;
    if (v9 / v5 <= 1.0)
      v8 = v9 / v5;
    v6 = 0.0;
    if (v9 / v5 >= 0.0)
      v6 = v8;
    if (a3)
      goto LABEL_3;
  }
  return a1[3] * (v6 * v5) + *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(double *a1, uint64_t a2, uint64_t a3, float64x2_t *a4, _QWORD *a5, double *a6)
{
  _BOOL8 ClosestPoints;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v20;
  uint64_t v21;
  double v23;
  uint64_t v24;
  float64x2_t v25;
  double v26;
  __int128 v27;
  uint64_t v28;

  v23 = 0.0;
  v24 = 0;
  ClosestPoints = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(a1, a2, (double *)&v27, &v25, (double *)&v24, &v23);
  if (ClosestPoints)
  {
    v14 = *(double *)(a2 + 40);
    v13 = *(double *)(a2 + 48);
    if (v23 / v13 <= 1.0)
      v15 = v23 / v13;
    else
      v15 = 1.0;
    v16 = 0.0;
    if (v23 / v13 >= 0.0)
      v16 = v15;
    v23 = v16;
    v17 = v13 * v16;
    v18 = v14 * v17 + *(double *)(a2 + 16);
    v25 = vaddq_f64(*(float64x2_t *)a2, vmulq_n_f64(*(float64x2_t *)(a2 + 24), v17));
    v26 = v18;
    if (v16 <= 0.0 || v16 >= 1.0)
    {
      *(_QWORD *)&v27 = pxrInternal__aapl__pxrReserved__::GfLine::FindClosestPoint(a1, v25.f64, (double *)&v24);
      *((_QWORD *)&v27 + 1) = v20;
      v28 = v21;
    }
    if (a3)
    {
      *(_OWORD *)a3 = v27;
      *(_QWORD *)(a3 + 16) = v28;
    }
    if (a4)
    {
      *a4 = v25;
      a4[1].f64[0] = v26;
    }
    if (a5)
      *a5 = v24;
    if (a6)
      *a6 = v23;
  }
  return ClosestPoints;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, double *a5, double *a6)
{
  _BOOL8 result;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  double v25[3];

  v22 = 0.0;
  v23 = 0.0;
  result = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints((double *)a1, a2, v25, &v24, &v23, &v22);
  if (result)
  {
    v13 = *(double *)(a1 + 48);
    v14 = 1.0;
    if (v23 / v13 <= 1.0)
      v15 = v23 / v13;
    else
      v15 = 1.0;
    if (v23 / v13 >= 0.0)
      v16 = v15;
    else
      v16 = 0.0;
    v17 = v22 / *(double *)(a2 + 48);
    if (v17 <= 1.0)
      v14 = v22 / *(double *)(a2 + 48);
    if (v17 < 0.0)
      v14 = 0.0;
    if (a3)
    {
      v18 = v13 * v16;
      v19 = v18 * *(double *)(a1 + 40) + *(double *)(a1 + 16);
      *a3 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 24), v18), *(float64x2_t *)a1);
      a3[1].f64[0] = v19;
    }
    if (a4)
    {
      v20 = v14 * *(double *)(a2 + 48);
      v21 = v20 * *(double *)(a2 + 40) + *(double *)(a2 + 16);
      *a4 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 24), v20), *(float64x2_t *)a2);
      a4[1].f64[0] = v21;
    }
    if (a5)
      *a5 = v16;
    if (a6)
      *a6 = v14;
  }
  return result;
}

uint64_t *sub_20BEFD69C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF70, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF70, (char *)0x38, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFD758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfLineSeg2d::FindClosestPoint(float64x2_t *a1, double *a2, double *a3)
{
  double v5;
  double v6;
  double result;
  double v8;
  double v9;

  v5 = a1[2].f64[0];
  v6 = 0.0;
  if (v5 == 0.0)
  {
    if (a3)
    {
LABEL_3:
      *a3 = v6;
      v5 = a1[2].f64[0];
    }
  }
  else
  {
    v9 = 0.0;
    pxrInternal__aapl__pxrReserved__::GfLine2d::FindClosestPoint(a1->f64, a2, &v9);
    v5 = a1[2].f64[0];
    v8 = 1.0;
    if (v9 / v5 <= 1.0)
      v8 = v9 / v5;
    v6 = 0.0;
    if (v9 / v5 >= 0.0)
      v6 = v8;
    if (a3)
      goto LABEL_3;
  }
  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(vmulq_n_f64(a1[1], v6 * v5), *a1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(double *a1, float64x2_t *a2, _OWORD *a3, float64x2_t *a4, _QWORD *a5, double *a6)
{
  _BOOL8 ClosestPoints;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v19;
  double v21;
  uint64_t v22;
  float64x2_t v23;
  __int128 v24;

  v21 = 0.0;
  v22 = 0;
  ClosestPoints = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(a1, a2, (double *)&v24, &v23, (double *)&v22, &v21);
  if (ClosestPoints)
  {
    v13 = a2[2].f64[0];
    if (v21 / v13 <= 1.0)
      v14 = v21 / v13;
    else
      v14 = 1.0;
    v15 = 0.0;
    if (v21 / v13 >= 0.0)
      v15 = v14;
    v16 = *a2;
    v17 = vmulq_n_f64(a2[1], v13 * v15);
    v21 = v15;
    v23 = vaddq_f64(v16, v17);
    if (v15 <= 0.0 || v15 >= 1.0)
    {
      *(_QWORD *)&v24 = pxrInternal__aapl__pxrReserved__::GfLine2d::FindClosestPoint(a1, v23.f64, (double *)&v22);
      *((_QWORD *)&v24 + 1) = v19;
    }
    if (a3)
      *a3 = v24;
    if (a4)
      *a4 = v23;
    if (a5)
      *a5 = v22;
    if (a6)
      *a6 = v21;
  }
  return ClosestPoints;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, double *a5, double *a6)
{
  _BOOL8 result;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  double v21[2];

  v18 = 0.0;
  v19 = 0.0;
  result = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(a1->f64, a2, v21, &v20, &v19, &v18);
  if (result)
  {
    v13 = a1[2].f64[0];
    v14 = 1.0;
    if (v19 / v13 <= 1.0)
      v15 = v19 / v13;
    else
      v15 = 1.0;
    if (v19 / v13 >= 0.0)
      v16 = v15;
    else
      v16 = 0.0;
    v17 = v18 / a2[2].f64[0];
    if (v17 <= 1.0)
      v14 = v18 / a2[2].f64[0];
    if (v17 < 0.0)
      v14 = 0.0;
    if (a3)
      *a3 = vaddq_f64(vmulq_n_f64(a1[1], v13 * v16), *a1);
    if (a4)
      *a4 = vaddq_f64(vmulq_n_f64(a2[1], v14 * a2[2].f64[0]), *a2);
    if (a5)
      *a5 = v16;
    if (a6)
      *a6 = v14;
  }
  return result;
}

uint64_t *sub_20BEFDA1C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF80, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF80, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFDAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::GfMod(pxrInternal__aapl__pxrReserved__ *this, long double a2, long double a3)
{
  fmod(a2, a3);
}

void pxrInternal__aapl__pxrReserved__::GfMod(pxrInternal__aapl__pxrReserved__ *this, float a2, float a3)
{
  fmodf(a2, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, double *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"( (", 3);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)"), (", 4);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v9 = sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  return sub_20BDDC1C8(v10, (uint64_t)"))", 3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"( (", 3);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v9 = sub_20BDDC1C8(v8, (uint64_t)"), (", 4);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  v11 = sub_20BDDC1C8(v10, (uint64_t)", ", 2);
  v12 = pxrInternal__aapl__pxrReserved__::operator<<(v11, a2[4]);
  v13 = sub_20BDDC1C8(v12, (uint64_t)", ", 2);
  v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, a2[5]);
  v15 = sub_20BDDC1C8(v14, (uint64_t)"), (", 4);
  v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, a2[6]);
  v17 = sub_20BDDC1C8(v16, (uint64_t)", ", 2);
  v18 = pxrInternal__aapl__pxrReserved__::operator<<(v17, a2[7]);
  v19 = sub_20BDDC1C8(v18, (uint64_t)", ", 2);
  v20 = pxrInternal__aapl__pxrReserved__::operator<<(v19, a2[8]);
  return sub_20BDDC1C8(v20, (uint64_t)"))", 3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"( (", 3);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v9 = sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  v11 = sub_20BDDC1C8(v10, (uint64_t)"), (", 4);
  v12 = pxrInternal__aapl__pxrReserved__::operator<<(v11, a2[4]);
  v13 = sub_20BDDC1C8(v12, (uint64_t)", ", 2);
  v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, a2[5]);
  v15 = sub_20BDDC1C8(v14, (uint64_t)", ", 2);
  v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, a2[6]);
  v17 = sub_20BDDC1C8(v16, (uint64_t)", ", 2);
  v18 = pxrInternal__aapl__pxrReserved__::operator<<(v17, a2[7]);
  v19 = sub_20BDDC1C8(v18, (uint64_t)"), (", 4);
  v20 = pxrInternal__aapl__pxrReserved__::operator<<(v19, a2[8]);
  v21 = sub_20BDDC1C8(v20, (uint64_t)", ", 2);
  v22 = pxrInternal__aapl__pxrReserved__::operator<<(v21, a2[9]);
  v23 = sub_20BDDC1C8(v22, (uint64_t)", ", 2);
  v24 = pxrInternal__aapl__pxrReserved__::operator<<(v23, a2[10]);
  v25 = sub_20BDDC1C8(v24, (uint64_t)", ", 2);
  v26 = pxrInternal__aapl__pxrReserved__::operator<<(v25, a2[11]);
  v27 = sub_20BDDC1C8(v26, (uint64_t)"), (", 4);
  v28 = pxrInternal__aapl__pxrReserved__::operator<<(v27, a2[12]);
  v29 = sub_20BDDC1C8(v28, (uint64_t)", ", 2);
  v30 = pxrInternal__aapl__pxrReserved__::operator<<(v29, a2[13]);
  v31 = sub_20BDDC1C8(v30, (uint64_t)", ", 2);
  v32 = pxrInternal__aapl__pxrReserved__::operator<<(v31, a2[14]);
  v33 = sub_20BDDC1C8(v32, (uint64_t)", ", 2);
  v34 = pxrInternal__aapl__pxrReserved__::operator<<(v33, a2[15]);
  return sub_20BDDC1C8(v34, (uint64_t)"))", 3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;
  char v9;

  v8 = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)"...", 3);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v9 = 93;
  return sub_20BDDC1C8(v6, (uint64_t)&v9, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;
  char v9;

  v8 = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v9 = 41;
  return sub_20BDDC1C8(v6, (uint64_t)&v9, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;
  char v11;

  v10 = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v10, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v11 = 41;
  return sub_20BDDC1C8(v8, (uint64_t)&v11, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v12;
  char v13;

  v12 = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v12, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v9 = sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  v13 = 41;
  return sub_20BDDC1C8(v10, (uint64_t)&v13, 1);
}

{
  unsigned int **v3;

  if (*a2 == -1.79769313e308)
  {
    v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTimeCodeTokens);
    if (!v3)
      v3 = sub_20C52B228(&pxrInternal__aapl__pxrReserved__::UsdTimeCodeTokens);
    pxrInternal__aapl__pxrReserved__::operator<<(a1, v3 + 1);
  }
  else
  {
    std::ostream::operator<<();
  }
  return a1;
}

{
  BOOL v4;
  double v5;
  double v6;
  unsigned int **v7;
  _QWORD *v8;
  unsigned int **v10;
  unsigned int **v11;
  double v13;
  double v14[4];

  sub_20C6B7FDC(v14, (pxrInternal__aapl__pxrReserved__::UsdTimeCode *)a2);
  if (*(_QWORD *)&v14[0])
    v4 = 0;
  else
    v4 = *(_QWORD *)&v14[1] == 0;
  if (v4)
  {
    v11 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
    if (!v11)
      v11 = sub_20C6B8090(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
    pxrInternal__aapl__pxrReserved__::operator<<(a1, v11);
  }
  else
  {
    v5 = *a2;
    v13 = a2[1];
    v14[0] = v5;
    v6 = a2[2];
    pxrInternal__aapl__pxrReserved__::operator<<(a1, v14);
    if (v13 != v14[0])
    {
      v7 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
      if (!v7)
        v7 = sub_20C6B8090(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
      v8 = pxrInternal__aapl__pxrReserved__::operator<<(a1, v7 + 1);
      pxrInternal__aapl__pxrReserved__::operator<<(v8, &v13);
    }
    if (v6 != 1.0 && v6 != -1.0)
    {
      v10 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
      if (!v10)
        v10 = sub_20C6B8090(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
      pxrInternal__aapl__pxrReserved__::operator<<(a1, v10 + 2);
      std::ostream::operator<<();
    }
  }
  return a1;
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::GfMatrix2d(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t result;
  float64x2_t v3;

  result = vcvtq_f64_f32(*a2);
  v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

{
  float64x2_t result;
  float64x2_t v3;

  result = vcvtq_f64_f32(*a2);
  v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::GfMatrix2d(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v2 = 0;
  v16 = *MEMORY[0x24BDAC8D0];
  v14 = xmmword_20CA9B168;
  v15 = unk_20CA9B178;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = 1;
  do
  {
    if (v2 == v4)
      break;
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)(v3 + 24 * v2);
    v9 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v8) >> 3;
    v10 = 1;
    do
    {
      if (v7 == v9)
        break;
      v11 = v10;
      v10 = 0;
      *((_QWORD *)&v14 + 2 * v2 + v7) = *(_QWORD *)(v8 + 8 * v7);
      v7 = 1;
    }
    while ((v11 & 1) != 0);
    v5 = 0;
    v2 = 1;
  }
  while ((v6 & 1) != 0);
  result = *(double *)&v14;
  v13 = v15;
  *a1 = v14;
  a1[1] = v13;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v2 = 0;
  v16 = *MEMORY[0x24BDAC8D0];
  v14 = xmmword_20CA9B168;
  v15 = unk_20CA9B178;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = 1;
  do
  {
    if (v2 == v4)
      break;
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)(v3 + 24 * v2);
    v9 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v8) >> 2;
    v10 = 1;
    do
    {
      if (v7 == v9)
        break;
      v11 = v10;
      v10 = 0;
      *((double *)&v14 + 2 * v2 + v7) = *(float *)(v8 + 4 * v7);
      v7 = 1;
    }
    while ((v11 & 1) != 0);
    v5 = 0;
    v2 = 1;
  }
  while ((v6 & 1) != 0);
  result = *(double *)&v14;
  v13 = v15;
  *a1 = v14;
  a1[1] = v13;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(double *)(this + 24) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::Get(pxrInternal__aapl__pxrReserved__::GfMatrix2d *this, double (*a2)[2])
{
  (*a2)[0] = *(double *)this;
  (*a2)[1] = *((double *)this + 1);
  (*a2)[2] = *((double *)this + 2);
  (*a2)[3] = *((double *)this + 3);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(double *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetTranspose(pxrInternal__aapl__pxrReserved__::GfMatrix2d *this)
{
  return *(double *)this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetInverse(pxrInternal__aapl__pxrReserved__::GfMatrix2d *this, double *a2, double a3)
{
  double v3;

  v3 = *(double *)this * *((double *)this + 3) - *((double *)this + 1) * *((double *)this + 2);
  if (a2)
    *a2 = v3;
  if (fabs(v3) <= a3)
    return 3.40282347e38;
  else
    return 1.0 / v3 * *((double *)this + 3);
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix2d *this)
{
  return *(double *)this * *((double *)this + 3) - *((double *)this + 1) * *((double *)this + 2);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(float64x2_t *a1, double a2)
{
  float64x2_t v2;
  float64x2_t result;

  v2 = vmulq_n_f64(*a1, a2);
  result = vmulq_n_f64(a1[1], a2);
  *a1 = v2;
  a1[1] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(double *a1, double *a2)
{
  double v2;
  double v3;
  double result;

  v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  result = a2[3] + v3;
  a1[3] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator-=(double *a1, double *a2)
{
  double v2;
  double v3;
  double result;

  v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  result = v3 - a2[3];
  a1[3] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::operator-(double *a1)
{
  return -*a1;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a1 = *a1 * *a2 + v3 * a2[2];
  a1[1] = v2 * a2[1] + v3 * a2[3];
  a1[2] = v4 * *a2 + v5 * a2[2];
  result = v4 * a2[1] + v5 * a2[3];
  a1[3] = result;
  return result;
}

float32x2_t pxrInternal__aapl__pxrReserved__::operator*(float *a1, float64x2_t *a2)
{
  return vcvt_f32_f64(vaddq_f64(vmulq_n_f64(*a2, *a1), vmulq_n_f64(a2[1], a1[1])));
}

{
  return vcvt_f32_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*a2, *a1), vmulq_n_f64(a2[2], a1[1])), vmulq_n_f64(a2[4], a1[2])), vmulq_n_f64(a2[6], a1[3])));
}

float32x2_t pxrInternal__aapl__pxrReserved__::operator*(uint64_t a1, float32x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;

  v2 = *(float64x2_t *)a1;
  v3 = vcvtq_f64_f32(*a2);
  v2.f64[1] = *(float64_t *)(a1 + 24);
  return vcvt_f32_f64(vaddq_f64(vmulq_f64(*(float64x2_t *)(a1 + 8), (float64x2_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL)), vmulq_f64(v2, v3)));
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix2d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix2d *a3, double a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  double v11;
  char v12;

  v4 = 0;
  v5 = 1;
LABEL_2:
  v6 = 0;
  v7 = v5;
  v8 = 1;
  v9 = (char *)this + 8 * v4;
  v10 = (char *)a2 + 8 * v4;
  while (1)
  {
    v11 = vabdd_f64(*(double *)&v9[8 * v6], *(double *)&v10[8 * v6]);
    if (v11 >= a4)
      return v11 < a4;
    v12 = v8;
    v8 = 0;
    v6 = 1;
    if ((v12 & 1) == 0)
    {
      v5 = 0;
      v4 = 2;
      if ((v7 & 1) != 0)
        goto LABEL_2;
      return v11 < a4;
    }
  }
}

uint64_t *sub_20BEFE14C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF90, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BF90, (char *)0x20, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFE208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, float *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"( (", 3);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)"), (", 4);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v9 = sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  return sub_20BDDC1C8(v10, (uint64_t)"))", 3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"( (", 3);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v9 = sub_20BDDC1C8(v8, (uint64_t)"), (", 4);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  v11 = sub_20BDDC1C8(v10, (uint64_t)", ", 2);
  v12 = pxrInternal__aapl__pxrReserved__::operator<<(v11, a2[4]);
  v13 = sub_20BDDC1C8(v12, (uint64_t)", ", 2);
  v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, a2[5]);
  v15 = sub_20BDDC1C8(v14, (uint64_t)"), (", 4);
  v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, a2[6]);
  v17 = sub_20BDDC1C8(v16, (uint64_t)", ", 2);
  v18 = pxrInternal__aapl__pxrReserved__::operator<<(v17, a2[7]);
  v19 = sub_20BDDC1C8(v18, (uint64_t)", ", 2);
  v20 = pxrInternal__aapl__pxrReserved__::operator<<(v19, a2[8]);
  return sub_20BDDC1C8(v20, (uint64_t)"))", 3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  v3 = sub_20BDDC1C8(a1, (uint64_t)"( (", 3);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v9 = sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  v11 = sub_20BDDC1C8(v10, (uint64_t)"), (", 4);
  v12 = pxrInternal__aapl__pxrReserved__::operator<<(v11, a2[4]);
  v13 = sub_20BDDC1C8(v12, (uint64_t)", ", 2);
  v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, a2[5]);
  v15 = sub_20BDDC1C8(v14, (uint64_t)", ", 2);
  v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, a2[6]);
  v17 = sub_20BDDC1C8(v16, (uint64_t)", ", 2);
  v18 = pxrInternal__aapl__pxrReserved__::operator<<(v17, a2[7]);
  v19 = sub_20BDDC1C8(v18, (uint64_t)"), (", 4);
  v20 = pxrInternal__aapl__pxrReserved__::operator<<(v19, a2[8]);
  v21 = sub_20BDDC1C8(v20, (uint64_t)", ", 2);
  v22 = pxrInternal__aapl__pxrReserved__::operator<<(v21, a2[9]);
  v23 = sub_20BDDC1C8(v22, (uint64_t)", ", 2);
  v24 = pxrInternal__aapl__pxrReserved__::operator<<(v23, a2[10]);
  v25 = sub_20BDDC1C8(v24, (uint64_t)", ", 2);
  v26 = pxrInternal__aapl__pxrReserved__::operator<<(v25, a2[11]);
  v27 = sub_20BDDC1C8(v26, (uint64_t)"), (", 4);
  v28 = pxrInternal__aapl__pxrReserved__::operator<<(v27, a2[12]);
  v29 = sub_20BDDC1C8(v28, (uint64_t)", ", 2);
  v30 = pxrInternal__aapl__pxrReserved__::operator<<(v29, a2[13]);
  v31 = sub_20BDDC1C8(v30, (uint64_t)", ", 2);
  v32 = pxrInternal__aapl__pxrReserved__::operator<<(v31, a2[14]);
  v33 = sub_20BDDC1C8(v32, (uint64_t)", ", 2);
  v34 = pxrInternal__aapl__pxrReserved__::operator<<(v33, a2[15]);
  return sub_20BDDC1C8(v34, (uint64_t)"))", 3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;
  char v9;

  v8 = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)"...", 3);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v9 = 93;
  return sub_20BDDC1C8(v6, (uint64_t)&v9, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;
  char v9;

  v8 = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v9 = 41;
  return sub_20BDDC1C8(v6, (uint64_t)&v9, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;
  char v11;

  v10 = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v10, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v11 = 41;
  return sub_20BDDC1C8(v8, (uint64_t)&v11, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v12;
  char v13;

  v12 = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v12, 1);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  v9 = sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  v13 = 41;
  return sub_20BDDC1C8(v10, (uint64_t)&v13, 1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f(float32x4_t *this, __n128 *a2)
{
  float64x2_t result;

  result = (float64x2_t)a2[1];
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), result);
  return result;
}

{
  float64x2_t result;

  result = (float64x2_t)a2[1];
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), result);
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  float v12;
  double result;
  __int128 v14;
  uint64_t v15;

  v2 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  v14 = xmmword_20CA9B1C0;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = 1;
  do
  {
    if (v2 == v4)
      break;
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)(v3 + 24 * v2);
    v9 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v8) >> 3;
    v10 = 1;
    do
    {
      if (v7 == v9)
        break;
      v11 = v10;
      v10 = 0;
      v12 = *(double *)(v8 + 8 * v7);
      *((float *)&v14 + 2 * v2 + v7) = v12;
      v7 = 1;
    }
    while ((v11 & 1) != 0);
    v5 = 0;
    v2 = 1;
  }
  while ((v6 & 1) != 0);
  result = *(double *)&v14;
  *a1 = v14;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  double result;
  __int128 v13;
  uint64_t v14;

  v2 = 0;
  v14 = *MEMORY[0x24BDAC8D0];
  v13 = xmmword_20CA9B1C0;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = 1;
  do
  {
    if (v2 == v4)
      break;
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)(v3 + 24 * v2);
    v9 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v8) >> 2;
    v10 = 1;
    do
    {
      if (v7 == v9)
        break;
      v11 = v10;
      v10 = 0;
      *((_DWORD *)&v13 + 2 * v2 + v7) = *(_DWORD *)(v8 + 4 * v7);
      v7 = 1;
    }
    while ((v11 & 1) != 0);
    v5 = 0;
    v2 = 1;
  }
  while ((v6 & 1) != 0);
  result = *(double *)&v13;
  *a1 = v13;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::SetDiagonal(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(float *)(this + 12) = a2;
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::SetDiagonal(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result = *(float *)(a2 + 4);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::Get(pxrInternal__aapl__pxrReserved__::GfMatrix2f *this, float (*a2)[2])
{
  (*a2)[0] = *(float *)this;
  (*a2)[1] = *((float *)this + 1);
  (*a2)[2] = *((float *)this + 2);
  (*a2)[3] = *((float *)this + 3);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator==(float *a1, double *a2)
{
  return *a2 == *a1 && a2[1] == a1[1] && a2[2] == a1[2] && a2[3] == a1[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator==(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::GetTranspose(pxrInternal__aapl__pxrReserved__::GfMatrix2f *this)
{
  return *(float *)this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::GetInverse(pxrInternal__aapl__pxrReserved__::GfMatrix2f *this, double *a2, double a3)
{
  float v3;
  double v4;

  v3 = *((float *)this + 3);
  v4 = (float)((float)(*(float *)this * v3) - (float)(*((float *)this + 1) * *((float *)this + 2)));
  if (a2)
    *a2 = v4;
  if (fabs(v4) <= a3)
    return 3.4028e38;
  else
    return 1.0 / v4 * v3;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2f::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix2f *this)
{
  return (float)((float)(*(float *)this * *((float *)this + 3)) - (float)(*((float *)this + 1) * *((float *)this + 2)));
}

float32x4_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=(float32x2_t *a1, double a2)
{
  float32x4_t result;

  result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*a1), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1->f32), a2));
  *(float32x4_t *)a1->f32 = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator+=(float *a1, float *a2)
{
  float v2;
  float v3;
  float result;

  v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  result = a2[3] + v3;
  a1[3] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator-=(float *a1, float *a2)
{
  float v2;
  float v3;
  float result;

  v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  result = v3 - a2[3];
  a1[3] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::operator-(float *a1)
{
  return -*a1;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a1 = (float)(*a1 * *a2) + (float)(v3 * a2[2]);
  a1[1] = (float)(v2 * a2[1]) + (float)(v3 * a2[3]);
  a1[2] = (float)(v4 * *a2) + (float)(v5 * a2[2]);
  result = (float)(v4 * a2[1]) + (float)(v5 * a2[3]);
  a1[3] = result;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix2f *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix2f *a3, double a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  double v11;
  char v12;

  v4 = 0;
  v5 = 1;
LABEL_2:
  v6 = 0;
  v7 = v5;
  v8 = 1;
  v9 = (char *)this + 4 * v4;
  v10 = (char *)a2 + 4 * v4;
  while (1)
  {
    v11 = vabdd_f64(*(float *)&v9[4 * v6], *(float *)&v10[4 * v6]);
    if (v11 >= a4)
      return v11 < a4;
    v12 = v8;
    v8 = 0;
    v6 = 1;
    if ((v12 & 1) == 0)
    {
      v5 = 0;
      v4 = 2;
      if ((v7 & 1) != 0)
        goto LABEL_2;
      return v11 < a4;
    }
  }
}

uint64_t *sub_20BEFE7E0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFA0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BFA0, (char *)0x10, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFE89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float32_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f(float32x4_t *a1, float64x2_t *a2)
{
  float32x4_t v2;
  float32_t result;

  v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[2]), a2[3]);
  result = a2[4].f64[0];
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  a1[1] = v2;
  a1[2].f32[0] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __int128 v10;
  float result;
  __int128 v12;
  _BYTE v13[20];
  uint64_t v14;

  v2 = 0;
  v14 = *MEMORY[0x24BDAC8D0];
  v12 = 0x3F800000uLL;
  *(_QWORD *)&v13[4] = 0;
  *(_QWORD *)&v13[12] = 0x3F80000000000000;
  *(_DWORD *)v13 = 1065353216;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = &v12;
  do
  {
    if (v2 == v4)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 24 * v2);
    v8 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v7) >> 3;
    do
    {
      if (v8 == v6)
        break;
      v9 = *(double *)(v7 + 8 * v6);
      *((float *)v5 + v6++) = v9;
    }
    while (v6 != 3);
    ++v2;
    v5 = (__int128 *)((char *)v5 + 12);
  }
  while (v2 != 3);
  v10 = *(_OWORD *)v13;
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v10;
  result = *(float *)&v13[16];
  *(_DWORD *)(a1 + 32) = *(_DWORD *)&v13[16];
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  float result;
  __int128 v11;
  _BYTE v12[20];
  uint64_t v13;

  v2 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  v11 = 0x3F800000uLL;
  *(_QWORD *)&v12[4] = 0;
  *(_QWORD *)&v12[12] = 0x3F80000000000000;
  *(_DWORD *)v12 = 1065353216;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = &v11;
  do
  {
    if (v2 == v4)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 24 * v2);
    v8 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v7) >> 2;
    do
    {
      if (v8 == v6)
        break;
      *((_DWORD *)v5 + v6) = *(_DWORD *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 != 3);
    ++v2;
    v5 = (__int128 *)((char *)v5 + 12);
  }
  while (v2 != 3);
  v9 = *(_OWORD *)v12;
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v9;
  result = *(float *)&v12[16];
  *(_DWORD *)(a1 + 32) = *(_DWORD *)&v12[16];
  return result;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3f *pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, float64x2_t *a2)
{
  float64_t Quat;
  double v4;
  double v5;
  double v6;
  float v8[3];

  Quat = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  *(float *)&v4 = v4;
  *(float *)&Quat = Quat;
  *(float *)&v5 = v5;
  v8[0] = *(float *)&Quat;
  v8[1] = *(float *)&v5;
  *(float *)&Quat = v6;
  v8[2] = *(float *)&Quat;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::_SetRotateFromQuat((uint64_t)this, v8, *(float *)&v4);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3f *pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::_SetRotateFromQuat((uint64_t)this, (float *)a2, *((float *)a2 + 3));
  return this;
}

{
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::_SetRotateFromQuat((uint64_t)this, (float *)a2, *((float *)a2 + 3));
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3f *pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::_SetRotateFromQuat((uint64_t)this, (float *)a2, *((float *)a2 + 3));
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(_QWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(float *)(this + 16) = a2;
  *(_QWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(float *)(this + 32) = a2;
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 32) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::Get(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, float (*a2)[3])
{
  (*a2)[0] = *(float *)this;
  (*a2)[1] = *((float *)this + 1);
  (*a2)[2] = *((float *)this + 2);
  (*a2)[3] = *((float *)this + 3);
  (*a2)[4] = *((float *)this + 4);
  (*a2)[5] = *((float *)this + 5);
  (*a2)[6] = *((float *)this + 6);
  (*a2)[7] = *((float *)this + 7);
  (*a2)[8] = *((float *)this + 8);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator==(float *a1, double *a2)
{
  return *a2 == *a1
      && a2[1] == a1[1]
      && a2[2] == a1[2]
      && a2[3] == a1[3]
      && a2[4] == a1[4]
      && a2[5] == a1[5]
      && a2[6] == a1[6]
      && a2[7] == a1[7]
      && a2[8] == a1[8];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator==(float *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8];
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose@<S0>(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float result;

  v2 = *((_DWORD *)this + 1);
  v3 = *((_DWORD *)this + 2);
  v4 = *((_DWORD *)this + 3);
  *(_DWORD *)a2 = *(_DWORD *)this;
  *(_DWORD *)(a2 + 4) = v4;
  v5 = *((_DWORD *)this + 4);
  v6 = *((_DWORD *)this + 5);
  *(_DWORD *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 28) = v6;
  v7 = *((_DWORD *)this + 7);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 6);
  *(_DWORD *)(a2 + 12) = v2;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v7;
  result = *((float *)this + 8);
  *(float *)(a2 + 32) = result;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetInverse@<X0>(float *this@<X0>, double *a2@<X1>, double a3@<D0>, float *a4@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;

  v4 = *this;
  v5 = this[1];
  v6 = this[2];
  v7 = this[3];
  v8 = this[4];
  v9 = this[5];
  v10 = this[6];
  v11 = this[7];
  v12 = this[8];
  v13 = v6 * v7;
  v14 = v4 * v9;
  v15 = v5 * v7;
  v16 = v4 * v8;
  v17 = v4 * v8 * v12 + v5 * v9 * v10 - v6 * v8 * v10 + v6 * v7 * v11 - v4 * v9 * v11 - v5 * v7 * v12;
  if (a2)
    *a2 = v17;
  if (fabs(v17) <= a3)
  {
    v20 = 0.0;
    v19 = 3.4028e38;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 3.4028e38;
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
    v27 = 3.4028e38;
  }
  else
  {
    v18 = 1.0 / v17;
    v19 = (v8 * v12 - v9 * v11) * (1.0 / v17);
    v20 = (v6 * v11 - v5 * v12) * (1.0 / v17);
    v21 = (v5 * v9 - v6 * v8) * v18;
    v22 = (v9 * v10 - v7 * v12) * v18;
    v23 = (v4 * v12 - v6 * v10) * v18;
    v24 = (v13 - v14) * v18;
    v25 = (v7 * v11 - v8 * v10) * v18;
    v26 = (v5 * v10 - v4 * v11) * v18;
    v27 = (v16 - v15) * v18;
  }
  *a4 = v19;
  a4[1] = v20;
  a4[2] = v21;
  a4[3] = v22;
  a4[4] = v23;
  a4[5] = v24;
  a4[6] = v25;
  a4[7] = v26;
  a4[8] = v27;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(_QWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(float *)(this + 16) = a2;
  *(_QWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(float *)(this + 32) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this)
{
  return (float)((float)((float)((float)((float)((float)((float)(*(float *)this * *((float *)this + 4))
                                                       * *((float *)this + 8))
                                               + (float)((float)(*((float *)this + 1) * *((float *)this + 5))
                                                       * *((float *)this + 6)))
                                       + (float)((float)(*((float *)this + 2) * *((float *)this + 3))
                                               * *((float *)this + 7)))
                               - (float)((float)(*(float *)this * *((float *)this + 5)) * *((float *)this + 7)))
                       - (float)(*((float *)this + 8) * (float)(*((float *)this + 1) * *((float *)this + 3))))
               - (float)(*((float *)this + 6) * (float)(*((float *)this + 4) * *((float *)this + 2))));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetHandedness(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this)
{
  double Determinant;
  BOOL v2;
  BOOL v3;
  double result;

  Determinant = pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetDeterminant(this);
  v2 = Determinant < 0.0;
  v3 = Determinant <= 0.0;
  result = 0.0;
  if (!v3)
    result = 1.0;
  if (v2)
    return -1.0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::Orthonormalize(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, int a2)
{
  float64_t v4;
  double v5;
  double v6;
  char *v7;
  uint64_t v8;
  float64x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  _QWORD v13[4];
  char v14;
  float64x2_t v15;
  double v16;
  _BYTE v17[24];
  float64x2_t v18;
  float64_t v19;

  v4 = *((float *)this + 2);
  v18 = vcvtq_f64_f32(*(float32x2_t *)this);
  v19 = v4;
  v5 = *((float *)this + 5);
  *(float64x2_t *)v17 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 12));
  *(double *)&v17[16] = v5;
  v6 = *((float *)this + 8);
  v15 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 24));
  v16 = v6;
  v8 = pxrInternal__aapl__pxrReserved__::GfVec3d::OrthogonalizeBasis(&v18, v17, &v15, 1, 0.000001);
  v9.f64[0] = v19;
  v9.f64[1] = *(float64_t *)v17;
  v10 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v18), v9);
  v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v17[8]), v15);
  *(float32x4_t *)this = v10;
  *((float32x4_t *)this + 1) = v11;
  v11.f32[0] = v16;
  *((_DWORD *)this + 8) = v11.i32[0];
  if ((v8 & 1) == 0 && a2)
  {
    v13[0] = "gf/matrix3f.cpp";
    v13[1] = "Orthonormalize";
    v13[2] = 282;
    v13[3] = "BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3f::Orthonormalize(BOOL)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v13, (pxrInternal__aapl__pxrReserved__ *)"OrthogonalizeBasis did not converge, matrix may not be orthonormal.", v7);
  }
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetOrthonormalized@<X0>(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;

  v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v3;
  *(_DWORD *)(a3 + 32) = *((_DWORD *)this + 8);
  return pxrInternal__aapl__pxrReserved__::GfMatrix3f::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)a3, a2);
}

float32_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=(float32x2_t *a1, double a2)
{
  float32x4_t v2;
  float32_t result;

  v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1[2].f32), a2));
  *(float32x4_t *)a1->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*a1), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1->f32), a2));
  *(float32x4_t *)a1[2].f32 = v2;
  result = a1[4].f32[0] * a2;
  a1[4].f32[0] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float result;

  v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  a1[3] = a2[3] + v3;
  v4 = a1[5];
  a1[4] = a2[4] + a1[4];
  a1[5] = a2[5] + v4;
  v5 = a1[7];
  a1[6] = a2[6] + a1[6];
  a1[7] = a2[7] + v5;
  result = a2[8] + a1[8];
  a1[8] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator-=(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float result;

  v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  a1[3] = v3 - a2[3];
  v4 = a1[5];
  a1[4] = a1[4] - a2[4];
  a1[5] = v4 - a2[5];
  v5 = a1[7];
  a1[6] = a1[6] - a2[6];
  a1[7] = v5 - a2[7];
  result = a1[8] - a2[8];
  a1[8] = result;
  return result;
}

float32_t pxrInternal__aapl__pxrReserved__::operator-@<S0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32_t result;
  float32x4_t v3;

  result = -a1[2].f32[0];
  v3 = vnegq_f32(a1[1]);
  *a2 = vnegq_f32(*a1);
  a2[1] = v3;
  a2[2].f32[0] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v9 = a1[6];
  v8 = a1[7];
  v10 = a1[8];
  *a1 = (float)((float)(*a1 * *a2) + (float)(v3 * a2[3])) + (float)(v4 * a2[6]);
  a1[1] = (float)((float)(v2 * a2[1]) + (float)(v3 * a2[4])) + (float)(v4 * a2[7]);
  a1[2] = (float)((float)(v2 * a2[2]) + (float)(v3 * a2[5])) + (float)(v4 * a2[8]);
  a1[3] = (float)((float)(v5 * *a2) + (float)(v6 * a2[3])) + (float)(v7 * a2[6]);
  a1[4] = (float)((float)(v5 * a2[1]) + (float)(v6 * a2[4])) + (float)(v7 * a2[7]);
  a1[5] = (float)((float)(v5 * a2[2]) + (float)(v6 * a2[5])) + (float)(v7 * a2[8]);
  a1[6] = (float)((float)(v9 * *a2) + (float)(v8 * a2[3])) + (float)(v10 * a2[6]);
  a1[7] = (float)((float)(v9 * a2[1]) + (float)(v8 * a2[4])) + (float)(v10 * a2[7]);
  result = (float)((float)(v9 * a2[2]) + (float)(v8 * a2[5])) + (float)(v10 * a2[8]);
  a1[8] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::_SetRotateFromQuat(uint64_t a1, float *a2, float a3)
{
  double v3;
  float v4;
  float v5;
  float v6;
  float v7;
  double v8;
  float v9;
  double v10;
  float result;

  v3 = (float)((float)(a2[1] * a2[1]) + (float)(a2[2] * a2[2]));
  v4 = 1.0 - (v3 + v3);
  *(float *)a1 = v4;
  v5 = (float)(*a2 * a2[1]) + (float)(a2[2] * a3);
  *(float *)(a1 + 4) = v5 + v5;
  v6 = (float)(a2[2] * *a2) - (float)(a2[1] * a3);
  *(float *)(a1 + 8) = v6 + v6;
  v7 = (float)(*a2 * a2[1]) - (float)(a2[2] * a3);
  *(float *)(a1 + 12) = v7 + v7;
  v8 = (float)((float)(a2[2] * a2[2]) + (float)(*a2 * *a2));
  *(float *)&v8 = 1.0 - (v8 + v8);
  *(_DWORD *)(a1 + 16) = LODWORD(v8);
  *(float *)&v8 = (float)(a2[1] * a2[2]) + (float)(*a2 * a3);
  *(float *)(a1 + 20) = *(float *)&v8 + *(float *)&v8;
  *(float *)&v8 = (float)(a2[2] * *a2) + (float)(a2[1] * a3);
  *(float *)(a1 + 24) = *(float *)&v8 + *(float *)&v8;
  v9 = (float)(a2[1] * a2[2]) - (float)(*a2 * a3);
  *(float *)(a1 + 28) = v9 + v9;
  v10 = (float)((float)(a2[1] * a2[1]) + (float)(*a2 * *a2));
  result = 1.0 - (v10 + v10);
  *(float *)(a1 + 32) = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 32) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3f::ExtractRotationQuaternion(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this)
{
  float v1;
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  char *v6;
  float v7;
  double v8;
  int v9;
  char *v10;
  unsigned int v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v17;

  v1 = *((float *)this + 4);
  v2 = *((float *)this + 8);
  if (*(float *)this > v1)
    v3 = *(float *)this;
  else
    v3 = *((float *)this + 4);
  if (v3 <= v2)
    v4 = 2;
  else
    v4 = *(float *)this <= v1;
  v5 = (float)(*(float *)this + v1) + v2;
  v6 = (char *)this + 12 * (int)v4;
  v7 = *(float *)&v6[4 * v4];
  if (v5 <= v7)
  {
    if ((_DWORD)v4 == 2)
      v9 = 0;
    else
      v9 = v4 + 1;
    v10 = (char *)this + 12 * v9;
    v11 = ((int)v4 + 2) % 3u;
    v12 = (char *)this + 12 * v11;
    v13 = sqrtf((float)((float)(v7 - *(float *)&v10[4 * v9]) - *(float *)&v12[4 * v11]) + 1.0) * 0.5;
    *((double *)&v17 + v4) = v13;
    v14 = v13 * 4.0;
    *((double *)&v17 + v9) = (float)(*(float *)&v6[4 * v9] + *(float *)&v10[4 * v4]) / v14;
    *((double *)&v17 + v11) = (float)(*(float *)&v12[4 * v4] + *(float *)&v6[4 * v11]) / v14;
    v8 = (float)(*(float *)&v10[4 * v11] - *(float *)&v12[4 * v9]) / v14;
  }
  else
  {
    v8 = sqrtf(v5 + 1.0) * 0.5;
  }
  v15 = 1.0;
  if (v8 <= 1.0)
    v15 = v8;
  if (v8 >= -1.0)
    return v15;
  else
    return -1.0;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3f::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this)
{
  double RotationQuaternion;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v6;
  _QWORD v7[4];

  RotationQuaternion = pxrInternal__aapl__pxrReserved__::GfMatrix3f::ExtractRotationQuaternion(this);
  v7[0] = v2;
  v7[1] = v3;
  v7[2] = v4;
  *(double *)&v7[3] = RotationQuaternion;
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v6, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v7);
  return v6;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::DecomposeRotation(pxrInternal__aapl__pxrReserved__::GfMatrix3f *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;

  v17.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix3f::ExtractRotation(a1);
  v17.f64[1] = v7;
  v18 = v8;
  v19 = v9;
  v15 = vcvtq_f64_f32(*a2);
  v16 = a2[1].f32[0];
  v13 = vcvtq_f64_f32(*a3);
  v14 = a3[1].f32[0];
  v11 = vcvtq_f64_f32(*a4);
  v12 = a4[1].f32[0];
  return pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v17, v15.f64, v13.f64, v11.f64);
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a3, double a4)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
LABEL_2:
  v6 = 0;
  while (vabdd_f64(*(float *)((char *)this + v6), *(float *)((char *)a2 + v6)) < a4)
  {
    v6 += 4;
    if (v6 == 12)
    {
      v4 = v5 > 1;
      a2 = (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)((char *)a2 + 12);
      this = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 12);
      if (++v5 != 3)
        goto LABEL_2;
      return 1;
    }
  }
  return v4;
}

uint64_t *sub_20BEFF90C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFB0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BFB0, (char *)0x24, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEFF9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(float64x2_t *this, float32x2_t *a2)
{
  float64_t result;
  float64x2_t v3;
  float64x2_t v4;

  result = a2[4].f32[0];
  v3 = vcvtq_f64_f32(a2[1]);
  *this = vcvtq_f64_f32(*a2);
  this[1] = v3;
  v4 = vcvtq_f64_f32(a2[3]);
  this[2] = vcvtq_f64_f32(a2[2]);
  this[3] = v4;
  this[4].f64[0] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  double result;
  _BYTE v12[32];
  _BYTE v13[32];
  double v14;
  uint64_t v15;

  v2 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  memset(&v13[8], 0, 24);
  memset(&v12[8], 0, 24);
  *(_QWORD *)v12 = 0x3FF0000000000000;
  *(_QWORD *)v13 = 0x3FF0000000000000;
  v14 = 1.0;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = v12;
  do
  {
    if (v2 == v4)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 24 * v2);
    v8 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v7) >> 3;
    do
    {
      if (v8 == v6)
        break;
      *(_QWORD *)&v5[8 * v6] = *(_QWORD *)(v7 + 8 * v6);
      ++v6;
    }
    while (v6 != 3);
    ++v2;
    v5 += 24;
  }
  while (v2 != 3);
  v9 = *(_OWORD *)&v12[16];
  *(_OWORD *)a1 = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_OWORD *)&v13[16];
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 48) = v10;
  result = v14;
  *(double *)(a1 + 64) = v14;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  double result;
  _BYTE v12[32];
  _BYTE v13[32];
  double v14;
  uint64_t v15;

  v2 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  memset(&v13[8], 0, 24);
  memset(&v12[8], 0, 24);
  *(_QWORD *)v12 = 0x3FF0000000000000;
  *(_QWORD *)v13 = 0x3FF0000000000000;
  v14 = 1.0;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = v12;
  do
  {
    if (v2 == v4)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 24 * v2);
    v8 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v7) >> 2;
    do
    {
      if (v8 == v6)
        break;
      *(double *)&v5[8 * v6] = *(float *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 != 3);
    ++v2;
    v5 += 24;
  }
  while (v2 != 3);
  v9 = *(_OWORD *)&v12[16];
  *(_OWORD *)a1 = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_OWORD *)&v13[16];
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 48) = v10;
  result = v14;
  *(double *)(a1 + 64) = v14;
  return result;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3d *pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, float64x2_t *a2)
{
  double v3;
  double v4;
  double v5;
  double v7[3];

  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, v7, v5);
  return this;
}

{
  double v3;
  double v4;
  double v5;
  double v7[3];

  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, v7, v5);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3d *pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, float64x2_t *a2)
{
  double v3;
  double v4;
  double v5;
  double v7[3];

  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, v7, v5);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3d *pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, const pxrInternal__aapl__pxrReserved__::GfQuatd *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, (double *)a2, *((double *)a2 + 3));
  return this;
}

{
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, (double *)a2, *((double *)a2 + 3));
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3d *pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, const pxrInternal__aapl__pxrReserved__::GfQuatd *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, (double *)a2, *((double *)a2 + 3));
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(double *)(this + 32) = a2;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(double *)(this + 64) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 64) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::Get(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, double (*a2)[3])
{
  (*a2)[0] = *(double *)this;
  (*a2)[1] = *((double *)this + 1);
  (*a2)[2] = *((double *)this + 2);
  (*a2)[3] = *((double *)this + 3);
  (*a2)[4] = *((double *)this + 4);
  (*a2)[5] = *((double *)this + 5);
  (*a2)[6] = *((double *)this + 6);
  (*a2)[7] = *((double *)this + 7);
  (*a2)[8] = *((double *)this + 8);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(double *a1, double *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(double *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8];
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose@<D0>(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  *(_QWORD *)a2 = *(_QWORD *)this;
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 5);
  *(_QWORD *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 56) = v6;
  v7 = *((_QWORD *)this + 7);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 6);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v7;
  result = *((double *)this + 8);
  *(double *)(a2 + 64) = result;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse@<X0>(double *this@<X0>, double *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v4 = *this;
  v5 = this[1];
  v7 = this[2];
  v6 = this[3];
  v8 = this[4];
  v9 = this[5];
  v10 = this[6];
  v11 = this[7];
  v12 = this[8];
  v13 = v7 * v6;
  v14 = *this * v9;
  v15 = *this * v8;
  v16 = v15 * v12 + v5 * v9 * v10 - v7 * v8 * v10 + v7 * v6 * v11 - v14 * v11 - v5 * v6 * v12;
  if (a2)
    *a2 = v16;
  if (fabs(v16) <= a3)
  {
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 56) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    v18 = 3.40282347e38;
    v19 = 3.40282347e38;
    v20 = 3.40282347e38;
  }
  else
  {
    v17 = 1.0 / v16;
    v18 = (v8 * v12 - v9 * v11) * v17;
    *(double *)(a4 + 8) = (v7 * v11 - v5 * v12) * v17;
    *(double *)(a4 + 16) = (v5 * v9 - v7 * v8) * v17;
    *(double *)(a4 + 24) = (v9 * v10 - v6 * v12) * v17;
    v19 = (v4 * v12 - v7 * v10) * v17;
    *(double *)(a4 + 40) = (v13 - v14) * v17;
    *(double *)(a4 + 48) = (v6 * v11 - v8 * v10) * v17;
    *(double *)(a4 + 56) = (v5 * v10 - v4 * v11) * v17;
    v20 = (v15 - v5 * v6) * v17;
  }
  *(double *)a4 = v18;
  *(double *)(a4 + 32) = v19;
  *(double *)(a4 + 64) = v20;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetScale(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(double *)(this + 32) = a2;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(double *)(this + 64) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this)
{
  return *(double *)this * *((double *)this + 4) * *((double *)this + 8)
       + *((double *)this + 1) * *((double *)this + 5) * *((double *)this + 6)
       + *((double *)this + 2) * *((double *)this + 3) * *((double *)this + 7)
       - *(double *)this * *((double *)this + 5) * *((double *)this + 7)
       - *((double *)this + 8) * (*((double *)this + 1) * *((double *)this + 3))
       - *((double *)this + 6) * (*((double *)this + 4) * *((double *)this + 2));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetHandedness(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this)
{
  double Determinant;
  BOOL v2;
  BOOL v3;
  double result;

  Determinant = pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetDeterminant(this);
  v2 = Determinant < 0.0;
  v3 = Determinant <= 0.0;
  result = 0.0;
  if (!v3)
    result = 1.0;
  if (v2)
    return -1.0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::Orthonormalize(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[4];
  char v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = *((_QWORD *)this + 2);
  v16 = *(_OWORD *)this;
  v17 = v4;
  v5 = *((_QWORD *)this + 5);
  v14 = *(_OWORD *)((char *)this + 24);
  v15 = v5;
  v6 = *((_QWORD *)this + 8);
  v12 = *((_OWORD *)this + 3);
  v13 = v6;
  v8 = pxrInternal__aapl__pxrReserved__::GfVec3d::OrthogonalizeBasis(&v16, &v14, &v12, 1, 0.000001);
  *(_OWORD *)this = v16;
  *((_QWORD *)this + 2) = v17;
  *(_OWORD *)((char *)this + 24) = v14;
  *((_QWORD *)this + 5) = v15;
  *((_OWORD *)this + 3) = v12;
  *((_QWORD *)this + 8) = v13;
  if ((v8 & 1) == 0 && a2)
  {
    v10[0] = "gf/matrix3d.cpp";
    v10[1] = "Orthonormalize";
    v10[2] = 282;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3d::Orthonormalize(BOOL)";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v10, (pxrInternal__aapl__pxrReserved__ *)"OrthogonalizeBasis did not converge, matrix may not be orthonormal.", v7);
  }
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetOrthonormalized@<X0>(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;

  v3 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v3;
  *(_QWORD *)(a3 + 64) = *((_QWORD *)this + 8);
  v4 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v4;
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)a3, a2);
}

float64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(float64x2_t *a1, double a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64_t result;

  v2 = vmulq_n_f64(a1[1], a2);
  *a1 = vmulq_n_f64(*a1, a2);
  a1[1] = v2;
  v3 = vmulq_n_f64(a1[3], a2);
  a1[2] = vmulq_n_f64(a1[2], a2);
  a1[3] = v3;
  result = a1[4].f64[0] * a2;
  a1[4].f64[0] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double result;

  v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  a1[3] = a2[3] + v3;
  v4 = a1[5];
  a1[4] = a2[4] + a1[4];
  a1[5] = a2[5] + v4;
  v5 = a1[7];
  a1[6] = a2[6] + a1[6];
  a1[7] = a2[7] + v5;
  result = a2[8] + a1[8];
  a1[8] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator-=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double result;

  v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  a1[3] = v3 - a2[3];
  v4 = a1[5];
  a1[4] = a1[4] - a2[4];
  a1[5] = v4 - a2[5];
  v5 = a1[7];
  a1[6] = a1[6] - a2[6];
  a1[7] = v5 - a2[7];
  result = a1[8] - a2[8];
  a1[8] = result;
  return result;
}

float64_t pxrInternal__aapl__pxrReserved__::operator-@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64_t result;
  float64x2_t v3;
  float64x2_t v4;

  result = -a1[4].f64[0];
  v3 = vnegq_f64(a1[1]);
  *a2 = vnegq_f64(*a1);
  a2[1] = v3;
  v4 = vnegq_f64(a1[3]);
  a2[2] = vnegq_f64(a1[2]);
  a2[3] = v4;
  a2[4].f64[0] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v9 = a1[6];
  v8 = a1[7];
  v10 = a1[8];
  *a1 = *a1 * *a2 + v3 * a2[3] + v4 * a2[6];
  a1[1] = v2 * a2[1] + v3 * a2[4] + v4 * a2[7];
  a1[2] = v2 * a2[2] + v3 * a2[5] + v4 * a2[8];
  a1[3] = v5 * *a2 + v6 * a2[3] + v7 * a2[6];
  a1[4] = v5 * a2[1] + v6 * a2[4] + v7 * a2[7];
  a1[5] = v5 * a2[2] + v6 * a2[5] + v7 * a2[8];
  a1[6] = v9 * *a2 + v8 * a2[3] + v10 * a2[6];
  a1[7] = v9 * a2[1] + v8 * a2[4] + v10 * a2[7];
  result = v9 * a2[2] + v8 * a2[5] + v10 * a2[8];
  a1[8] = result;
  return result;
}

float32x2_t pxrInternal__aapl__pxrReserved__::operator*(float *a1, uint64_t a2)
{
  return vcvt_f32_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)a2, *a1), vmulq_n_f64(*(float64x2_t *)(a2 + 24), a1[1])), vmulq_n_f64(*(float64x2_t *)(a2 + 48), a1[2])));
}

float pxrInternal__aapl__pxrReserved__::operator*(double *a1, float *a2)
{
  return *a1 * *a2 + a1[1] * a2[1] + a1[2] * a2[2];
}

{
  return *a1 * *a2 + a1[1] * a2[1] + a1[2] * a2[2] + a1[3] * a2[3];
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat(double *a1, double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double result;

  v3 = a2[1] * a2[1] + a2[2] * a2[2];
  *a1 = 1.0 - (v3 + v3);
  v4 = *a2 * a2[1] + a2[2] * a3;
  a1[1] = v4 + v4;
  v5 = a2[2] * *a2 - a2[1] * a3;
  a1[2] = v5 + v5;
  v6 = *a2 * a2[1] - a2[2] * a3;
  a1[3] = v6 + v6;
  v7 = a2[2] * a2[2] + *a2 * *a2;
  a1[4] = 1.0 - (v7 + v7);
  v8 = a2[1] * a2[2] + *a2 * a3;
  a1[5] = v8 + v8;
  v9 = a2[2] * *a2 + a2[1] * a3;
  a1[6] = v9 + v9;
  v10 = a2[1] * a2[2] - *a2 * a3;
  a1[7] = v10 + v10;
  v11 = a2[1] * a2[1] + *a2 * *a2;
  result = 1.0 - (v11 + v11);
  a1[8] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetScale(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 64) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  char *v6;
  double v7;
  double v8;
  int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v17;

  v1 = *((double *)this + 4);
  v2 = *((double *)this + 8);
  if (*(double *)this > v1)
    v3 = *(double *)this;
  else
    v3 = *((double *)this + 4);
  if (v3 <= v2)
    v4 = 2;
  else
    v4 = *(double *)this <= v1;
  v5 = *(double *)this + v1 + v2;
  v6 = (char *)this + 24 * (int)v4;
  v7 = *(double *)&v6[8 * v4];
  if (v5 <= v7)
  {
    if ((_DWORD)v4 == 2)
      v9 = 0;
    else
      v9 = v4 + 1;
    v10 = ((int)v4 + 2) % 3u;
    v11 = (char *)this + 24 * v9;
    v12 = (char *)this + 24 * v10;
    v13 = sqrt(v7 - *(double *)&v11[8 * v9] - *(double *)&v12[8 * v10] + 1.0) * 0.5;
    *((double *)&v17 + v4) = v13;
    v14 = v13 * 4.0;
    *((double *)&v17 + v9) = (*(double *)&v6[8 * v9] + *(double *)&v11[8 * v4]) / v14;
    *((double *)&v17 + v10) = (*(double *)&v12[8 * v4] + *(double *)&v6[8 * v10]) / v14;
    v8 = (*(double *)&v11[8 * v10] - *(double *)&v12[8 * v9]) / v14;
  }
  else
  {
    v8 = sqrt(v5 + 1.0) * 0.5;
  }
  v15 = 1.0;
  if (v8 <= 1.0)
    v15 = v8;
  if (v8 >= -1.0)
    return v15;
  else
    return -1.0;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this)
{
  double RotationQuaternion;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v6;
  _QWORD v7[4];

  RotationQuaternion = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion(this);
  v7[0] = v2;
  v7[1] = v3;
  v7[2] = v4;
  *(double *)&v7[3] = RotationQuaternion;
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v6, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v7);
  return v6;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::DecomposeRotation(pxrInternal__aapl__pxrReserved__::GfMatrix3d *a1, double *a2, double *a3, double *a4)
{
  float64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v11;
  uint64_t v12;
  uint64_t v13;

  v11.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotation(a1);
  v11.f64[1] = v7;
  v12 = v8;
  v13 = v9;
  return pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v11, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a3, double a4)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
LABEL_2:
  v6 = 0;
  while (vabdd_f64(*(double *)((char *)this + v6), *(double *)((char *)a2 + v6)) < a4)
  {
    v6 += 8;
    if (v6 == 24)
    {
      v4 = v5 > 1;
      a2 = (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)((char *)a2 + 24);
      this = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 24);
      if (++v5 != 3)
        goto LABEL_2;
      return 1;
    }
  }
  return v4;
}

uint64_t *sub_20BF00A84()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFC0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BFC0, (char *)0x48, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF00B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(float32x4_t *a1, float64x2_t *a2)
{
  float32x4_t v2;
  float64x2_t result;
  float32x4_t v4;

  v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[2]), a2[3]);
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  a1[1] = v2;
  result = a2[7];
  v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[6]), result);
  a1[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[4]), a2[5]);
  a1[3] = v4;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(_OWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __int128 v10;
  double result;
  __int128 v12;
  _BYTE v13[64];
  uint64_t v14;

  v2 = 0;
  v14 = *MEMORY[0x24BDAC8D0];
  memset(&v13[20], 0, 40);
  *(_OWORD *)&v13[4] = 0u;
  *(_DWORD *)v13 = 1065353216;
  *(_DWORD *)&v13[20] = 1065353216;
  *(_DWORD *)&v13[40] = 1065353216;
  *(_DWORD *)&v13[60] = 1065353216;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = v13;
  do
  {
    if (v2 == v4)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 24 * v2);
    v8 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v7) >> 3;
    do
    {
      if (v8 == v6)
        break;
      v9 = *(double *)(v7 + 8 * v6);
      *(float *)&v5[4 * v6++] = v9;
    }
    while (v6 != 4);
    ++v2;
    v5 += 16;
  }
  while (v2 != 4);
  v10 = *(_OWORD *)&v13[16];
  *a1 = *(_OWORD *)v13;
  a1[1] = v10;
  result = *(double *)&v13[32];
  v12 = *(_OWORD *)&v13[48];
  a1[2] = *(_OWORD *)&v13[32];
  a1[3] = v12;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  double result;
  __int128 v11;
  _BYTE v12[64];
  uint64_t v13;

  v2 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  memset(&v12[20], 0, 40);
  *(_OWORD *)&v12[4] = 0u;
  *(_DWORD *)v12 = 1065353216;
  *(_DWORD *)&v12[20] = 1065353216;
  *(_DWORD *)&v12[40] = 1065353216;
  *(_DWORD *)&v12[60] = 1065353216;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = v12;
  do
  {
    if (v2 == v4)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 24 * v2);
    v8 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v7) >> 2;
    do
    {
      if (v8 == v6)
        break;
      *(_DWORD *)&v5[4 * v6] = *(_DWORD *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 != 4);
    ++v2;
    v5 += 16;
  }
  while (v2 != 4);
  v9 = *(_OWORD *)&v12[16];
  *a1 = *(_OWORD *)v12;
  a1[1] = v9;
  result = *(double *)&v12[32];
  v11 = *(_OWORD *)&v12[48];
  a1[2] = *(_OWORD *)&v12[32];
  a1[3] = v11;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(_OWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  __int128 v21;
  double result;
  __int128 v23;
  _BYTE v24[64];
  uint64_t v25;

  v5 = 0;
  v25 = *MEMORY[0x24BDAC8D0];
  memset(&v24[20], 0, 40);
  *(_OWORD *)&v24[4] = 0u;
  *(_DWORD *)v24 = 1065353216;
  *(_DWORD *)&v24[20] = 1065353216;
  *(_DWORD *)&v24[40] = 1065353216;
  *(_DWORD *)&v24[60] = 1065353216;
  v6 = *a2;
  v7 = (a2[1] - *a2) >> 3;
  do
  {
    if (v7 == v5)
      break;
    v8 = *(double *)(v6 + 8 * v5);
    *(float *)&v24[4 * v5++] = v8;
  }
  while (v5 != 4);
  v9 = 0;
  v10 = *a3;
  v11 = (a3[1] - *a3) >> 3;
  do
  {
    if (v11 == v9)
      break;
    v12 = *(double *)(v10 + 8 * v9);
    *(float *)&v24[4 * v9++ + 16] = v12;
  }
  while (v9 != 4);
  v13 = 0;
  v14 = *a4;
  v15 = (a4[1] - *a4) >> 3;
  do
  {
    if (v15 == v13)
      break;
    v16 = *(double *)(v14 + 8 * v13);
    *(float *)&v24[4 * v13++ + 32] = v16;
  }
  while (v13 != 4);
  v17 = 0;
  v18 = *a5;
  v19 = (a5[1] - *a5) >> 3;
  do
  {
    if (v19 == v17)
      break;
    v20 = *(double *)(v18 + 8 * v17);
    *(float *)&v24[4 * v17++ + 48] = v20;
  }
  while (v17 != 4);
  v21 = *(_OWORD *)&v24[16];
  *a1 = *(_OWORD *)v24;
  a1[1] = v21;
  result = *(double *)&v24[32];
  v23 = *(_OWORD *)&v24[48];
  a1[2] = *(_OWORD *)&v24[32];
  a1[3] = v23;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  double result;
  __int128 v19;
  _BYTE v20[64];
  uint64_t v21;

  v5 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  memset(&v20[20], 0, 40);
  *(_OWORD *)&v20[4] = 0u;
  *(_DWORD *)v20 = 1065353216;
  *(_DWORD *)&v20[20] = 1065353216;
  *(_DWORD *)&v20[40] = 1065353216;
  *(_DWORD *)&v20[60] = 1065353216;
  v6 = *a2;
  v7 = (a2[1] - *a2) >> 2;
  do
  {
    if (v7 == v5)
      break;
    *(_DWORD *)&v20[4 * v5] = *(_DWORD *)(v6 + 4 * v5);
    ++v5;
  }
  while (v5 != 4);
  v8 = 0;
  v9 = *a3;
  v10 = (a3[1] - *a3) >> 2;
  do
  {
    if (v10 == v8)
      break;
    *(_DWORD *)&v20[4 * v8 + 16] = *(_DWORD *)(v9 + 4 * v8);
    ++v8;
  }
  while (v8 != 4);
  v11 = 0;
  v12 = *a4;
  v13 = (a4[1] - *a4) >> 2;
  do
  {
    if (v13 == v11)
      break;
    *(_DWORD *)&v20[4 * v11 + 32] = *(_DWORD *)(v12 + 4 * v11);
    ++v11;
  }
  while (v11 != 4);
  v14 = 0;
  v15 = *a5;
  v16 = (a5[1] - *a5) >> 2;
  do
  {
    if (v16 == v14)
      break;
    *(_DWORD *)&v20[4 * v14 + 48] = *(_DWORD *)(v15 + 4 * v14);
    ++v14;
  }
  while (v14 != 4);
  v17 = *(_OWORD *)&v20[16];
  *a1 = *(_OWORD *)v20;
  a1[1] = v17;
  result = *(double *)&v20[32];
  v19 = *(_OWORD *)&v20[48];
  a1[2] = *(_OWORD *)&v20[32];
  a1[3] = v19;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(pxrInternal__aapl__pxrReserved__::GfMatrix4f *a1, float64x2_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4f *v4;
  float result;

  v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(a1, a2);
  *((_DWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 7) = 0;
  *(_QWORD *)((char *)v4 + 52) = 0;
  *(_QWORD *)((char *)v4 + 44) = 0;
  *((_DWORD *)v4 + 15) = 1065353216;
  *((_DWORD *)v4 + 12) = *(_DWORD *)a3;
  *((_DWORD *)v4 + 13) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *((float *)v4 + 14) = result;
  *((_DWORD *)v4 + 15) = 1065353216;
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::GfMatrix4f *v4;
  float result;

  v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(a1, a2);
  *((_DWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 7) = 0;
  *(_QWORD *)((char *)v4 + 52) = 0;
  *(_QWORD *)((char *)v4 + 44) = 0;
  *((_DWORD *)v4 + 15) = 1065353216;
  *((_DWORD *)v4 + 12) = *(_DWORD *)a3;
  *((_DWORD *)v4 + 13) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *((float *)v4 + 14) = result;
  *((_DWORD *)v4 + 15) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTransform(pxrInternal__aapl__pxrReserved__::GfMatrix4f *a1, float64x2_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4f *v4;
  float result;

  v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(a1, a2);
  *((_DWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 7) = 0;
  *(_QWORD *)((char *)v4 + 52) = 0;
  *(_QWORD *)((char *)v4 + 44) = 0;
  *((_DWORD *)v4 + 15) = 1065353216;
  *((_DWORD *)v4 + 12) = *(_DWORD *)a3;
  *((_DWORD *)v4 + 13) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *((float *)v4 + 14) = result;
  *((_DWORD *)v4 + 15) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTransform(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  float result;

  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_DWORD *)(a1 + 8) = a2[2];
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = a2[3];
  *(_DWORD *)(a1 + 20) = a2[4];
  *(_DWORD *)(a1 + 24) = a2[5];
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = a2[6];
  *(_DWORD *)(a1 + 36) = a2[7];
  *(_DWORD *)(a1 + 40) = a2[8];
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(_QWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 4) = 0;
  *(float *)(this + 20) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(float *)(this + 40) = a2;
  *(_QWORD *)(this + 52) = 0;
  *(_QWORD *)(this + 44) = 0;
  *(float *)(this + 60) = a2;
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 60) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::Get(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, float (*a2)[4])
{
  (*a2)[0] = *(float *)this;
  (*a2)[1] = *((float *)this + 1);
  (*a2)[2] = *((float *)this + 2);
  (*a2)[3] = *((float *)this + 3);
  (*a2)[4] = *((float *)this + 4);
  (*a2)[5] = *((float *)this + 5);
  (*a2)[6] = *((float *)this + 6);
  (*a2)[7] = *((float *)this + 7);
  (*a2)[8] = *((float *)this + 8);
  (*a2)[9] = *((float *)this + 9);
  (*a2)[10] = *((float *)this + 10);
  (*a2)[11] = *((float *)this + 11);
  (*a2)[12] = *((float *)this + 12);
  (*a2)[13] = *((float *)this + 13);
  (*a2)[14] = *((float *)this + 14);
  (*a2)[15] = *((float *)this + 15);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(float *a1, double *a2)
{
  return *a2 == *a1
      && a2[1] == a1[1]
      && a2[2] == a1[2]
      && a2[3] == a1[3]
      && a2[4] == a1[4]
      && a2[5] == a1[5]
      && a2[6] == a1[6]
      && a2[7] == a1[7]
      && a2[8] == a1[8]
      && a2[9] == a1[9]
      && a2[10] == a1[10]
      && a2[11] == a1[11]
      && a2[12] == a1[12]
      && a2[13] == a1[13]
      && a2[14] == a1[14]
      && a2[15] == a1[15];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(float *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15];
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetTranspose@<S0>(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float result;
  int v13;
  int v14;
  int v15;

  v2 = *((_DWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  v4 = *((_DWORD *)this + 5);
  *(_DWORD *)a2 = *(_DWORD *)this;
  *(_DWORD *)(a2 + 4) = v3;
  v5 = *((_DWORD *)this + 2);
  v6 = *((_DWORD *)this + 3);
  *(_DWORD *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 20) = v4;
  v7 = *((_DWORD *)this + 6);
  v8 = *((_DWORD *)this + 7);
  *(_DWORD *)(a2 + 32) = v5;
  *(_DWORD *)(a2 + 36) = v7;
  *(_DWORD *)(a2 + 48) = v6;
  *(_DWORD *)(a2 + 52) = v8;
  v9 = *((_DWORD *)this + 9);
  v10 = *((_DWORD *)this + 12);
  v11 = *((_DWORD *)this + 13);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 8);
  *(_DWORD *)(a2 + 12) = v10;
  result = *((float *)this + 10);
  v13 = *((_DWORD *)this + 11);
  *(_DWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 28) = v11;
  v14 = *((_DWORD *)this + 14);
  v15 = *((_DWORD *)this + 15);
  *(float *)(a2 + 40) = result;
  *(_DWORD *)(a2 + 44) = v14;
  *(_DWORD *)(a2 + 56) = v13;
  *(_DWORD *)(a2 + 60) = v15;
  return result;
}

pxrInternal__aapl__pxrReserved__::GfMatrix4f *pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, float64x2_t *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4f *result;

  result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(this, a2);
  *((_DWORD *)result + 3) = 0;
  *((_DWORD *)result + 7) = 0;
  *(_QWORD *)((char *)result + 52) = 0;
  *(_QWORD *)((char *)result + 44) = 0;
  *((_DWORD *)result + 15) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslateOnly(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 48) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 4);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a2)
{
  float result;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 7);
  result = *((float *)a2 + 8);
  *((float *)this + 10) = result;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_DWORD *)this + 15) = 1065353216;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetInverse@<X0>(float *this@<X0>, double *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;

  v5 = *this;
  v4 = this[1];
  v7 = this[4];
  v6 = this[5];
  v9 = this[8];
  v8 = this[9];
  v11 = this[12];
  v10 = this[13];
  v13 = this[2];
  v12 = this[3];
  v15 = this[6];
  v14 = this[7];
  v17 = this[10];
  v16 = this[11];
  v19 = this[14];
  v18 = this[15];
  v20 = (float)((float)(v13 * v14) - (float)(v12 * v15));
  v21 = (float)((float)(v13 * v16) - (float)(v12 * v17));
  v22 = (float)((float)(v13 * v18) - (float)(v12 * v19));
  v23 = (float)((float)(v15 * v16) - (float)(v14 * v17));
  v24 = (float)((float)(v15 * v18) - (float)(v14 * v19));
  v25 = (float)((float)(v17 * v18) - (float)(v16 * v19));
  v26 = v6 * v21 - v8 * v20 - v4 * v23;
  v27 = v10 * v20 + v4 * v24 - v6 * v22;
  v28 = v8 * v22 - v10 * v21 - v4 * v25;
  v29 = v10 * v23 + v6 * v25 - v8 * v24;
  v30 = (float)((float)(*this * v29) + (float)((float)(v7 * v28) + (float)((float)(v11 * v26) + (float)(v9 * v27))));
  if (a2)
    *a2 = v30;
  if (fabs(v30) <= a3)
  {
    *(_DWORD *)a4 = 2139095039;
    *(_QWORD *)(a4 + 12) = 0;
    *(_QWORD *)(a4 + 4) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 52) = 0;
    v87 = 1.0;
    v85 = 3.4028e38;
    v86 = 3.4028e38;
    *(_QWORD *)(a4 + 44) = 0;
  }
  else
  {
    v31 = (float)(v5 * v6) - (float)(v4 * v7);
    v32 = v7 * v8;
    v33 = (float)(v5 * v8) - (float)(v4 * v9);
    v34 = v6 * v9;
    v35 = (float)(v5 * v10) - (float)(v4 * v11);
    v36 = (float)(v7 * v10) - (float)(v6 * v11);
    v37 = (float)(v9 * v10) - (float)(v8 * v11);
    v38 = v5;
    v39 = v7;
    v40 = v9;
    v41 = v11;
    v42 = v31;
    v43 = v33;
    v44 = v35;
    v45 = (float)(v32 - v34);
    v46 = v36;
    v47 = v37;
    v48 = v13;
    v49 = v15;
    v50 = v17;
    v51 = v19;
    v52 = v14;
    v53 = v16;
    v54 = v38 * v23 - v39 * v21;
    v55 = v39 * v22 - v41 * v20;
    v56 = v40 * v22;
    v57 = v40 * v20;
    v58 = v40 * v24;
    v59 = v38 * v24;
    v60 = v38 * v25 - v56;
    v61 = v41 * v21;
    v62 = v58 - v41 * v23;
    v63 = v39 * v25;
    v64 = v45 * v48 - v43 * v49;
    v65 = v44 * v49 - v42 * v51;
    v66 = v48 * v47 - v44 * v50;
    v67 = v46 * v50 - v45 * v51;
    v88 = v26;
    v68 = v43 * v52 - v42 * v53;
    v69 = v12;
    v70 = v48 * v46;
    v71 = v69 * v46;
    v72 = v46 * v53;
    v73 = v18;
    v74 = v44 * v53 - v43 * v73;
    v75 = v42 * v50;
    v76 = v42 * v73;
    v77 = v68 - v45 * v69;
    v78 = 1.0 / v30;
    v79 = v78 * v29;
    v80 = v78 * v28;
    *(float *)a4 = v79;
    *(float *)(a4 + 4) = v80;
    v81 = v62 - v63;
    v82 = v78 * v81;
    *(float *)(a4 + 16) = v82;
    v83 = v78 * v27;
    v84 = v78 * v88;
    *(float *)(a4 + 8) = v83;
    *(float *)(a4 + 12) = v84;
    *(float *)&v73 = (v47 * v52 - v72 + v45 * v73) * v78;
    *(float *)&v69 = (v74 - v69 * v47) * v78;
    *(_DWORD *)(a4 + 32) = LODWORD(v73);
    *(_DWORD *)(a4 + 36) = LODWORD(v69);
    *(float *)&v69 = v57 + v54;
    *(float *)&v73 = v55 - v59;
    *(float *)&v73 = v78 * *(float *)&v73;
    *(float *)&v69 = v78 * *(float *)&v69;
    *(_DWORD *)(a4 + 24) = LODWORD(v73);
    *(_DWORD *)(a4 + 28) = LODWORD(v69);
    *(float *)&v69 = (v67 - v47 * v49) * v78;
    *(float *)&v77 = v77 * v78;
    *(_DWORD *)(a4 + 44) = LODWORD(v77);
    *(_DWORD *)(a4 + 48) = LODWORD(v69);
    *(float *)&v77 = (v66 + v43 * v51) * v78;
    *(float *)&v69 = (v65 - v70) * v78;
    *(_DWORD *)(a4 + 52) = LODWORD(v77);
    *(_DWORD *)(a4 + 56) = LODWORD(v69);
    *(float *)&v77 = v61 + v60;
    v85 = v78 * *(float *)&v77;
    v86 = (v71 - v44 * v52 + v76) * v78;
    v87 = (v64 + v75) * v78;
  }
  *(float *)(a4 + 20) = v85;
  *(float *)(a4 + 40) = v86;
  *(float *)(a4 + 60) = v87;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(_QWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 4) = 0;
  *(float *)(this + 20) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(float *)(this + 40) = a2;
  *(_QWORD *)(this + 52) = 0;
  *(_QWORD *)(this + 44) = 0;
  *(_DWORD *)(this + 60) = 1065353216;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v1 = *((float *)this + 2);
  v3 = *((float *)this + 4);
  v2 = *((float *)this + 5);
  v4 = *((float *)this + 8);
  v5 = *((float *)this + 9);
  v6 = *((float *)this + 14);
  v7 = *((float *)this + 10);
  v8 = *((float *)this + 12);
  v9 = *((float *)this + 13);
  v10 = *((float *)this + 6);
  v11 = *((float *)this + 1);
  return *((float *)this + 15)
       * (float)((float)((float)((float)((float)((float)(v7 * (float)(v2 * *(float *)this))
                                               + (float)(v4 * (float)(v10 * v11)))
                                       + (float)(v5 * (float)(v3 * v1)))
                               - (float)(v5 * (float)(v10 * *(float *)this)))
                       - (float)(v7 * (float)(v3 * v11)))
               - (float)(v4 * (float)(v2 * v1)))
       + *((float *)this + 7)
       * (float)((float)((float)((float)((float)((float)(v6 * (float)(v5 * *(float *)this))
                                               + (float)(v8 * (float)(v7 * v11)))
                                       + (float)(v9 * (float)(v4 * v1)))
                               - (float)(v9 * (float)(v7 * *(float *)this)))
                       - (float)(v6 * (float)(v4 * v11)))
               - (float)(v8 * (float)(v5 * v1)))
       - *((float *)this + 3)
       * (float)((float)((float)((float)((float)((float)((float)(v3 * v5) * v6) + (float)((float)(v2 * v7) * v8))
                                       + (float)((float)(v10 * v4) * v9))
                               - (float)((float)(v3 * v7) * v9))
                       - (float)(v6 * (float)(v2 * v4)))
               - (float)(v8 * (float)(v5 * v10)))
       - *((float *)this + 11)
       * (float)((float)((float)((float)((float)((float)(v6 * (float)(v2 * *(float *)this))
                                               + (float)(v8 * (float)(v10 * v11)))
                                       + (float)(v9 * (float)(v3 * v1)))
                               - (float)(v9 * (float)(v10 * *(float *)this)))
                       - (float)(v6 * (float)(v3 * v11)))
               - (float)(v8 * (float)(v2 * v1)));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::_GetDeterminant3(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  float v9;
  char *v10;
  float v11;

  v7 = (char *)this + 16 * a2;
  v8 = (char *)this + 16 * a3;
  v9 = *(float *)&v8[4 * a6];
  v10 = (char *)this + 16 * a4;
  v11 = *(float *)&v10[4 * a5];
  return (float)((float)((float)((float)((float)((float)((float)(*(float *)&v7[4 * a5] * v9) * *(float *)&v10[4 * a7])
                                               + (float)((float)(*(float *)&v7[4 * a6] * *(float *)&v8[4 * a7]) * v11))
                                       + (float)((float)(*(float *)&v7[4 * a7] * *(float *)&v8[4 * a5])
                                               * *(float *)&v10[4 * a6]))
                               - (float)((float)(*(float *)&v7[4 * a5] * *(float *)&v8[4 * a7]) * *(float *)&v10[4 * a6]))
                       - (float)(*(float *)&v10[4 * a7] * (float)(*(float *)&v7[4 * a6] * *(float *)&v8[4 * a5])))
               - (float)(v11 * (float)(v9 * *(float *)&v7[4 * a7])));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetHandedness(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this)
{
  double v1;
  BOOL v2;
  BOOL v3;
  double result;

  v1 = sub_20BF01DA8((float *)this);
  v2 = v1 < 0.0;
  v3 = v1 <= 0.0;
  result = 0.0;
  if (!v3)
    result = 1.0;
  if (v2)
    return -1.0;
  return result;
}

double sub_20BF01DA8(float *a1)
{
  return (float)((float)((float)((float)((float)((float)((float)(*a1 * a1[5]) * a1[10])
                                               + (float)((float)(a1[1] * a1[6]) * a1[8]))
                                       + (float)((float)(a1[2] * a1[4]) * a1[9]))
                               - (float)((float)(*a1 * a1[6]) * a1[9]))
                       - (float)(a1[10] * (float)(a1[1] * a1[4])))
               - (float)(a1[8] * (float)(a1[5] * a1[2])));
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize(float32x2_t *this, int a2)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  float32_t v10;
  float32_t v11;
  int32x2_t v12;
  _QWORD v14[4];
  char v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  double v19;
  float64x2_t v20;
  double v21;

  v4 = this[1].f32[0];
  v20 = vcvtq_f64_f32(*this);
  v21 = v4;
  v5 = this[3].f32[0];
  v18 = vcvtq_f64_f32(this[2]);
  v19 = v5;
  v6 = this[5].f32[0];
  v16 = vcvtq_f64_f32(this[4]);
  v17 = v6;
  v7 = pxrInternal__aapl__pxrReserved__::GfVec3d::OrthogonalizeBasis(&v20, &v18, &v16, 1, 0.000001);
  v9 = v7;
  *this = vcvt_f32_f64(v20);
  v10 = v21;
  this[1].f32[0] = v10;
  this[2] = vcvt_f32_f64(v18);
  v11 = v19;
  this[3].f32[0] = v11;
  this[4] = vcvt_f32_f64(v16);
  v12.i32[1] = HIDWORD(v17);
  *(float *)v12.i32 = v17;
  this[5].i32[0] = v12.i32[0];
  v12.i32[0] = this[7].i32[1];
  if (*(float *)v12.i32 != 1.0 && fabsf(*(float *)v12.i32) >= 1.0e-10)
  {
    this[6] = vdiv_f32(this[6], (float32x2_t)vdup_lane_s32(v12, 0));
    this[7].f32[0] = this[7].f32[0] / *(float *)v12.i32;
    this[7].i32[1] = 1065353216;
  }
  if (((v7 | a2 ^ 1) & 1) == 0)
  {
    v14[0] = "gf/matrix4f.cpp";
    v14[1] = "Orthonormalize";
    v14[2] = 495;
    v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize(BOOL)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"OrthogonalizeBasis did not converge, matrix may not be orthonormal.", v8);
  }
  return v9;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetOrthonormalized@<X0>(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;

  v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v3;
  v4 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v4;
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize((float32x2_t *)a3, a2);
}

float32x4_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=(float32x2_t *a1, double a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t result;

  v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1[2].f32), a2));
  *(float32x4_t *)a1->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*a1), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1->f32), a2));
  *(float32x4_t *)a1[2].f32 = v2;
  v3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[4]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1[4].f32), a2));
  result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[6]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1[6].f32), a2));
  *(float32x4_t *)a1[4].f32 = v3;
  *(float32x4_t *)a1[6].f32 = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator+=(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;

  v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  a1[3] = a2[3] + v3;
  v4 = a1[5];
  a1[4] = a2[4] + a1[4];
  a1[5] = a2[5] + v4;
  v5 = a1[7];
  a1[6] = a2[6] + a1[6];
  a1[7] = a2[7] + v5;
  v6 = a1[9];
  a1[8] = a2[8] + a1[8];
  a1[9] = a2[9] + v6;
  v7 = a1[11];
  a1[10] = a2[10] + a1[10];
  a1[11] = a2[11] + v7;
  v8 = a1[13];
  a1[12] = a2[12] + a1[12];
  a1[13] = a2[13] + v8;
  v9 = a1[15];
  a1[14] = a2[14] + a1[14];
  result = a2[15] + v9;
  a1[15] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator-=(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;

  v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  a1[3] = v3 - a2[3];
  v4 = a1[5];
  a1[4] = a1[4] - a2[4];
  a1[5] = v4 - a2[5];
  v5 = a1[7];
  a1[6] = a1[6] - a2[6];
  a1[7] = v5 - a2[7];
  v6 = a1[9];
  a1[8] = a1[8] - a2[8];
  a1[9] = v6 - a2[9];
  v7 = a1[11];
  a1[10] = a1[10] - a2[10];
  a1[11] = v7 - a2[11];
  v8 = a1[13];
  a1[12] = a1[12] - a2[12];
  a1[13] = v8 - a2[13];
  v9 = a1[15];
  a1[14] = a1[14] - a2[14];
  result = v9 - a2[15];
  a1[15] = result;
  return result;
}

float32x4_t pxrInternal__aapl__pxrReserved__::operator-@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2;
  float32x4_t result;
  float32x4_t v4;

  v2 = vnegq_f32(a1[1]);
  *a2 = vnegq_f32(*a1);
  a2[1] = v2;
  result = vnegq_f32(a1[2]);
  v4 = vnegq_f32(a1[3]);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v6 = a1[5];
  v9 = a1[6];
  v8 = a1[7];
  v11 = a1[8];
  v10 = a1[9];
  v13 = a1[10];
  v12 = a1[11];
  v15 = a1[12];
  v14 = a1[13];
  v17 = a1[14];
  v16 = a1[15];
  *a1 = (float)((float)((float)(*a1 * *a2) + (float)(v3 * a2[4])) + (float)(v4 * a2[8])) + (float)(v5 * a2[12]);
  a1[1] = (float)((float)((float)(v2 * a2[1]) + (float)(v3 * a2[5])) + (float)(v4 * a2[9])) + (float)(v5 * a2[13]);
  a1[2] = (float)((float)((float)(v2 * a2[2]) + (float)(v3 * a2[6])) + (float)(v4 * a2[10])) + (float)(v5 * a2[14]);
  a1[3] = (float)((float)((float)(v2 * a2[3]) + (float)(v3 * a2[7])) + (float)(v4 * a2[11])) + (float)(v5 * a2[15]);
  a1[4] = (float)((float)((float)(v7 * *a2) + (float)(v6 * a2[4])) + (float)(v9 * a2[8])) + (float)(v8 * a2[12]);
  a1[5] = (float)((float)((float)(v7 * a2[1]) + (float)(v6 * a2[5])) + (float)(v9 * a2[9])) + (float)(v8 * a2[13]);
  a1[6] = (float)((float)((float)(v7 * a2[2]) + (float)(v6 * a2[6])) + (float)(v9 * a2[10])) + (float)(v8 * a2[14]);
  a1[7] = (float)((float)((float)(v7 * a2[3]) + (float)(v6 * a2[7])) + (float)(v9 * a2[11])) + (float)(v8 * a2[15]);
  a1[8] = (float)((float)((float)(v11 * *a2) + (float)(v10 * a2[4])) + (float)(v13 * a2[8])) + (float)(v12 * a2[12]);
  a1[9] = (float)((float)((float)(v11 * a2[1]) + (float)(v10 * a2[5])) + (float)(v13 * a2[9])) + (float)(v12 * a2[13]);
  a1[10] = (float)((float)((float)(v11 * a2[2]) + (float)(v10 * a2[6])) + (float)(v13 * a2[10])) + (float)(v12 * a2[14]);
  a1[11] = (float)((float)((float)(v11 * a2[3]) + (float)(v10 * a2[7])) + (float)(v13 * a2[11])) + (float)(v12 * a2[15]);
  a1[12] = (float)((float)((float)(v15 * *a2) + (float)(v14 * a2[4])) + (float)(v17 * a2[8])) + (float)(v16 * a2[12]);
  a1[13] = (float)((float)((float)(v15 * a2[1]) + (float)(v14 * a2[5])) + (float)(v17 * a2[9])) + (float)(v16 * a2[13]);
  a1[14] = (float)((float)((float)(v15 * a2[2]) + (float)(v14 * a2[6])) + (float)(v17 * a2[10])) + (float)(v16 * a2[14]);
  result = (float)((float)((float)(v15 * a2[3]) + (float)(v14 * a2[7])) + (float)(v17 * a2[11])) + (float)(v16 * a2[15]);
  a1[15] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::_SetRotateFromQuat(uint64_t a1, float *a2, float a3)
{
  double v3;
  float v4;
  float v5;
  float v6;
  float v7;
  double v8;
  float v9;
  double v10;
  float result;

  v3 = (float)((float)(a2[1] * a2[1]) + (float)(a2[2] * a2[2]));
  v4 = 1.0 - (v3 + v3);
  *(float *)a1 = v4;
  v5 = (float)(*a2 * a2[1]) + (float)(a2[2] * a3);
  *(float *)(a1 + 4) = v5 + v5;
  v6 = (float)(a2[2] * *a2) - (float)(a2[1] * a3);
  *(float *)(a1 + 8) = v6 + v6;
  v7 = (float)(*a2 * a2[1]) - (float)(a2[2] * a3);
  *(float *)(a1 + 16) = v7 + v7;
  v8 = (float)((float)(a2[2] * a2[2]) + (float)(*a2 * *a2));
  *(float *)&v8 = 1.0 - (v8 + v8);
  *(_DWORD *)(a1 + 20) = LODWORD(v8);
  *(float *)&v8 = (float)(a2[1] * a2[2]) + (float)(*a2 * a3);
  *(float *)(a1 + 24) = *(float *)&v8 + *(float *)&v8;
  *(float *)&v8 = (float)(a2[2] * *a2) + (float)(a2[1] * a3);
  *(float *)(a1 + 32) = *(float *)&v8 + *(float *)&v8;
  v9 = (float)(a2[1] * a2[2]) - (float)(*a2 * a3);
  *(float *)(a1 + 36) = v9 + v9;
  v10 = (float)((float)(a2[1] * a2[1]) + (float)(*a2 * *a2));
  result = 1.0 - (v10 + v10);
  *(float *)(a1 + 40) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate(uint64_t a1, float *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::_SetRotateFromQuat(a1, a2, a2[3]);
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(uint64_t a1, float *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::_SetRotateFromQuat(a1, a2, a2[3]);
  return a1;
}

pxrInternal__aapl__pxrReserved__::GfMatrix4f *pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, float64x2_t *a2)
{
  float64_t Quat;
  double v4;
  double v5;
  double v6;
  float v8[3];

  Quat = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  *(float *)&v4 = v4;
  *(float *)&Quat = Quat;
  *(float *)&v5 = v5;
  v8[0] = *(float *)&Quat;
  v8[1] = *(float *)&v5;
  *(float *)&Quat = v6;
  v8[2] = *(float *)&Quat;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::_SetRotateFromQuat((uint64_t)this, v8, *(float *)&v4);
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a2)
{
  float result;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 7);
  result = *((float *)a2 + 8);
  *((float *)this + 10) = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = 1065353216;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 4);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetLookAt(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float result;

  v4 = *a3 - *a2;
  v5 = a3[1] - a2[1];
  v6 = a3[2] - a2[2];
  v7 = 1.0 / fmaxf(sqrtf((float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6)), 1.0e-10);
  v8 = v7 * v4;
  v9 = v7 * v5;
  v10 = v7 * v6;
  v11 = *(float *)(a4 + 4);
  LODWORD(v7) = *(_DWORD *)(a4 + 8);
  v12 = (float)(*(float *)&v7 * v9) - (float)(v11 * v10);
  *(float *)&v7 = (float)(*(float *)a4 * v10) - (float)(*(float *)&v7 * v8);
  v13 = (float)(v11 * v8) - (float)(*(float *)a4 * v9);
  v14 = 1.0
      / fmaxf(sqrtf((float)(v13 * v13) + (float)((float)(v12 * v12) + (float)(*(float *)&v7 * *(float *)&v7))), 1.0e-10);
  v15 = v14 * v12;
  *(float *)&v7 = v14 * *(float *)&v7;
  *(float *)&v14 = v14 * v13;
  v16 = (float)(v10 * *(float *)&v7) - (float)(v9 * *(float *)&v14);
  v17 = (float)(v8 * *(float *)&v14) - (float)(v10 * v15);
  v18 = (float)(v9 * v15) - (float)(v8 * *(float *)&v7);
  *(float *)a1 = v15;
  *(_DWORD *)(a1 + 16) = LODWORD(v7);
  *(_DWORD *)(a1 + 32) = LODWORD(v14);
  *(float *)(a1 + 48) = -(float)((float)(a2[2] * *(float *)&v14)
                               + (float)((float)(*a2 * v15) + (float)(a2[1] * *(float *)&v7)));
  *(float *)(a1 + 4) = v16;
  *(float *)(a1 + 20) = v17;
  *(float *)(a1 + 36) = v18;
  *(float *)(a1 + 52) = -(float)((float)(a2[2] * v18) + (float)((float)(*a2 * v16) + (float)(a2[1] * v17)));
  *(float *)(a1 + 8) = -v8;
  *(float *)(a1 + 24) = -v9;
  *(float *)(a1 + 40) = -v10;
  result = (float)((float)(*a2 * v8) + (float)(a2[1] * v9)) + (float)(a2[2] * v10);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

_OWORD *pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetLookAt(_OWORD *a1, float32x2_t *a2, double *a3)
{
  unsigned int v4;
  float32x2_t v5;
  float64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  float v18[11];
  uint64_t v19;
  uint64_t v20;
  int v21;

  *(float *)&v4 = -a2[1].f32[0];
  v5 = vneg_f32(*a2);
  v12.f64[0] = sub_20BEF83AC(a3);
  v12.f64[1] = v6;
  v13 = v7;
  v14 = v8;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v18, &v12);
  v18[3] = 0.0;
  v18[7] = 0.0;
  v20 = 0;
  v19 = 0;
  v21 = 1065353216;
  *(_DWORD *)v15 = 1065353216;
  *(_OWORD *)&v15[4] = 0uLL;
  *(_DWORD *)&v15[20] = 1065353216;
  *(_QWORD *)&v15[24] = 0;
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = 1065353216;
  *(float32x2_t *)&v17 = v5;
  *((_QWORD *)&v17 + 1) = v4 | 0x3F80000000000000;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)v15, v18);
  v9 = *(_OWORD *)&v15[16];
  *a1 = *(_OWORD *)v15;
  a1[1] = v9;
  v10 = v17;
  a1[2] = v16;
  a1[3] = v10;
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4f::Factor(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t i;
  double Determinant3;
  double v16;
  double v17;
  double *v18;
  uint64_t j;
  double v20;
  double v21;
  double v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  double v29[16];
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54[16];
  double v55[3];
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  _BYTE v61[48];
  _OWORD v62[8];
  __int128 v63;
  _OWORD v64[5];
  __int128 v65;
  __int128 v66;
  float64x2_t v67;
  unint64_t v68;
  float64x2_t v69;
  unint64_t v70;
  float64x2_t v71;
  uint64_t v72;
  uint64_t v73;

  v11 = 0;
  v73 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a6 = 1065353216;
  *(_QWORD *)(a6 + 12) = 0;
  *(_QWORD *)(a6 + 4) = 0;
  *(_DWORD *)(a6 + 20) = 1065353216;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  *(_DWORD *)(a6 + 40) = 1065353216;
  *(_QWORD *)(a6 + 52) = 0;
  *(_DWORD *)(a6 + 60) = 1065353216;
  v12 = (double *)&v63;
  *(_QWORD *)(a6 + 44) = 0;
  v13 = a1 + 48;
  do
  {
    for (i = 0; i != 3; ++i)
      v12[i] = *(float *)(a1 + 4 * i);
    *((_QWORD *)&v64[2 * v11] + 1) = 0;
    *((_QWORD *)&v65 + v11) = 0;
    *(_DWORD *)(a5 + 4 * v11) = *(_DWORD *)(v13 + 4 * v11);
    ++v11;
    v12 += 4;
    a1 += 16;
  }
  while (v11 != 3);
  *((_QWORD *)&v66 + 1) = 0x3FF0000000000000;
  Determinant3 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::_GetDeterminant3((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v63, 0, 1, 2, 0, 1, 2);
  if (Determinant3 >= 0.0)
    v16 = 1.0;
  else
    v16 = -1.0;
  v17 = a7;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v63, (uint64_t)&v56);
  v62[4] = v64[3];
  v62[5] = v64[4];
  v62[6] = v65;
  v62[7] = v66;
  v62[0] = v63;
  v62[1] = v64[0];
  v62[2] = v64[1];
  v62[3] = v64[2];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v62, v56.f64);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_Jacobi3((uint64_t)v62, v55, &v67);
  v56 = v67;
  v57 = (float64x2_t)v68;
  v58 = v69;
  v59 = (float64x2_t)v70;
  v60 = v71;
  *(_QWORD *)v61 = v72;
  memset(&v61[8], 0, 32);
  *(_QWORD *)&v61[40] = 0x3FF0000000000000;
  v18 = v54;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v54, 1.0);
  for (j = 0; j != 3; ++j)
  {
    v20 = v55[j];
    v21 = sqrt(v20);
    if (v20 >= v17)
      v22 = v21;
    else
      v22 = v17;
    v23 = v16 * v22;
    *(float *)(a3 + 4 * j) = v23;
    *v18 = 1.0 / v23;
    v18 += 5;
  }
  v34 = v60;
  v35 = *(float64x2_t *)v61;
  v36 = *(float64x2_t *)&v61[16];
  v37 = *(float64x2_t *)&v61[32];
  v30 = v56;
  v31 = v57;
  v32 = v58;
  v33 = v59;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v30.f64, v54);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v56, (uint64_t)v29);
  v42 = v34;
  v43 = v35;
  v44 = v36;
  v45 = v37;
  v38 = v30;
  v39 = v31;
  v40 = v32;
  v41 = v33;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v38.f64, v29);
  v50 = v42;
  v51 = v43;
  v52 = v44;
  v53 = v45;
  v46 = v38;
  v47 = v39;
  v48 = v40;
  v49 = v41;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v46.f64, (double *)&v63);
  v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v48), v49);
  *a4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v46), v47);
  a4[1] = v24;
  v25 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v52), v53);
  a4[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v50), v51);
  a4[3] = v25;
  v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
  *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v56), v57);
  a2[1] = v26;
  v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v61[16]), *(float64x2_t *)&v61[32]);
  a2[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), *(float64x2_t *)v61);
  a2[3] = v27;
  return Determinant3 * v16 >= v17;
}

float *pxrInternal__aapl__pxrReserved__::GfMatrix4f::_Jacobi3(float *a1, double *a2, _QWORD *a3)
{
  unsigned int v3;
  double v4;
  double v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float *result;
  char v12;
  char *v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  float *v24;
  unint64_t v25;
  float *v26;
  float v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float v51;
  uint64_t v52;
  float *v53;
  float *v54;
  double v55;
  double v56;
  float v57;
  _OWORD *v58;
  uint64_t v59;
  double v60;
  double v61;
  float v62;
  uint64_t i;
  double v64;
  double v65;
  uint64_t j;
  double v67;
  _QWORD v68[3];
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  _OWORD v72[3];

  v3 = 0;
  v4 = a1[5];
  v5 = a1[10];
  *a2 = *a1;
  a2[1] = v4;
  a2[2] = v5;
  *a3 = 0x3FF0000000000000;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  a3[4] = 0x3FF0000000000000;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0x3FF0000000000000;
  v6 = *((_OWORD *)a1 + 1);
  v71 = *(_OWORD *)a1;
  v72[0] = v6;
  v7 = *((_OWORD *)a1 + 3);
  v72[1] = *((_OWORD *)a1 + 2);
  v72[2] = v7;
  v69 = *(_OWORD *)a2;
  v70 = *((_QWORD *)a2 + 2);
  memset(v68, 0, sizeof(v68));
  do
  {
    v8 = 0;
    v9 = 0;
    v10 = 0.0;
    LOBYTE(result) = 1;
    do
    {
      v12 = (char)result;
      v13 = (char *)&v71 + 4 * v9 + 4;
      v14 = v8;
      do
      {
        v10 = v10 + fabsf(*(float *)&v13[v14]);
        v14 += 4;
      }
      while (v14 != 8);
      result = 0;
      v8 += 4;
      v9 = 4;
    }
    while ((v12 & 1) != 0);
    if (v10 == 0.0)
      break;
    v15 = 0.0;
    if (v3 <= 2)
      v15 = v10 * 0.2 / 9.0;
    v16 = 0;
    v17 = a3;
    v18 = a3 + 1;
    result = (float *)v72 + 1;
    v19 = (float *)&v71 + 1;
    v20 = 1;
    do
    {
      v21 = v16 + 1;
      if (v16 <= 1)
      {
        v22 = 0;
        v23 = v18;
        v24 = result;
        v25 = v20;
        v26 = (float *)&v72[v16 - 1];
        do
        {
          v27 = v26[v25];
          v28 = fabsf(v27);
          v29 = v28 * 100.0;
          if (v3 >= 4 && (v30 = fabs(a2[v16]), v29 + v30 == v30) && (v31 = fabs(a2[v25]), v29 + v31 == v31))
          {
            v26[v25] = 0.0;
          }
          else if (v15 < v28)
          {
            v32 = a2[v25];
            v33 = a2[v16];
            v34 = v32 - v33;
            v35 = vabdd_f64(v32, v33);
            v36 = v29 + v35;
            v37 = v27;
            v38 = v34 * 0.5 / v37;
            v39 = 1.0 / (fabs(v38) + sqrt(v38 * v38 + 1.0));
            if (v38 >= 0.0)
              v40 = v39;
            else
              v40 = -v39;
            v41 = v37 / v34;
            v42 = v36 == v35;
            v43 = v37;
            if (v42)
              v44 = v41;
            else
              v44 = v40;
            v45 = 1.0 / sqrt(v44 * v44 + 1.0);
            v46 = v44 * v45;
            v47 = v44 * v43;
            *(double *)&v68[v16] = *(double *)&v68[v16] - v47;
            *(double *)&v68[v25] = v47 + *(double *)&v68[v25];
            v48 = v46 / (v45 + 1.0);
            a2[v16] = v33 - v47;
            a2[v25] = v47 + a2[v25];
            v26[v25] = 0.0;
            if (v16 == 1)
            {
              v49 = *((float *)&v71 + 1);
              v50 = *((float *)&v72[-1] + v25);
              v51 = *((float *)&v71 + 1) - v46 * (v48 * *((float *)&v71 + 1) + v50);
              *((float *)&v71 + 1) = v51;
              *(float *)&v50 = v46 * (v49 - v48 * v50) + v50;
              *((_DWORD *)&v72[-1] + v25) = LODWORD(v50);
            }
            v52 = v22;
            v53 = v24;
            v54 = v19;
            if (v21 < v25)
            {
              do
              {
                v55 = *v54;
                v56 = *v53;
                v57 = v55 - v46 * (v48 * v55 + v56);
                *v54++ = v57;
                *(float *)&v55 = v46 * (v55 - v48 * v56) + v56;
                *v53 = *(float *)&v55;
                v53 += 4;
                --v52;
              }
              while (v52);
            }
            if (v25 < 2)
            {
              v58 = &v72[v25 - 1];
              v59 = 4 * v25 + 4;
              v60 = *(float *)((char *)v26 + v59);
              v61 = *(float *)((char *)v58 + v59);
              v62 = v60 - v46 * (v48 * v60 + v61);
              *(float *)((char *)v26 + v59) = v62;
              *(float *)&v60 = v46 * (v60 - v48 * v61) + v61;
              *(_DWORD *)((char *)v58 + v59) = LODWORD(v60);
            }
            for (i = 0; i != 9; i += 3)
            {
              v64 = *(double *)&v17[i];
              v65 = *(double *)&v23[i];
              *(double *)&v17[i] = v64 - v46 * (v65 + v48 * v64);
              *(double *)&v23[i] = v65 + v46 * (v64 - v48 * v65);
            }
          }
          ++v25;
          ++v24;
          ++v22;
          ++v23;
        }
        while (v25 != 3);
      }
      ++v20;
      v19 += 5;
      result += 5;
      ++v18;
      ++v17;
      ++v16;
    }
    while (v21 != 3);
    for (j = 0; j != 3; ++j)
    {
      v67 = *(double *)&v68[j] + *(double *)((char *)&v69 + j * 8);
      *(double *)((char *)&v69 + j * 8) = v67;
      a2[j] = v67;
      v68[j] = 0;
    }
    ++v3;
  }
  while (v3 != 50);
  return result;
}

float32x4_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::RemoveScaleShear@<Q0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t result;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21[12];
  char v22[64];
  float32x4_t v23[4];
  float32x4_t v24[4];

  if (pxrInternal__aapl__pxrReserved__::GfMatrix4f::Factor((uint64_t)this, v24, (uint64_t)v21, v23, (uint64_t)&v19, (uint64_t)v22, 0.00001))
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize((float32x2_t *)v23, 1);
    v9 = 1065353216;
    v11 = 0;
    v10 = 0;
    v12 = 1065353216;
    v13 = 0;
    v14 = 0;
    v15 = 1065353216;
    v16 = v19;
    v17 = v20;
    v18 = 1065353216;
    v4 = v23[1];
    *a2 = v23[0];
    a2[1] = v4;
    v5 = v23[3];
    a2[2] = v23[2];
    a2[3] = v5;
    result.f32[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=(a2->f32, (float *)&v9);
  }
  else
  {
    v7 = this[1];
    *a2 = *this;
    a2[1] = v7;
    result = this[2];
    v8 = this[3];
    a2[2] = result;
    a2[3] = v8;
  }
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this)
{
  float v1;
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  char *v6;
  float v7;
  int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  float v13;
  float v14;
  float v15;

  v1 = *((float *)this + 5);
  v2 = *((float *)this + 10);
  if (*(float *)this > v1)
    v3 = *(float *)this;
  else
    v3 = *((float *)this + 5);
  if (v3 <= v2)
    v4 = 2;
  else
    v4 = *(float *)this <= v1;
  v5 = (float)(*(float *)this + v1) + v2;
  v6 = (char *)this + 4 * (4 * v4);
  v7 = *(float *)&v6[4 * v4];
  if (v5 > v7)
    return (float)(*((float *)this + 6) - *((float *)this + 9))
         / ((float)(sqrtf(v5 + *((float *)this + 15)) * 0.5)
          * 4.0);
  if ((_DWORD)v4 == 2)
    v9 = 0;
  else
    v9 = v4 + 1;
  v10 = ((int)v4 + 2) % 3u;
  v11 = (char *)this + 16 * v9;
  v12 = (char *)this + 16 * v10;
  v13 = sqrtf((float)((float)(v7 - *(float *)&v11[4 * v9]) - *(float *)&v12[4 * v10]) + *((float *)this + 15)) * 0.5;
  *(&v15 + v4) = v13;
  v14 = v13 * 4.0;
  *(&v15 + v9) = (float)(*(float *)&v6[4 * v9] + *(float *)&v11[4 * v4]) / v14;
  *(&v15 + v10) = (float)(*(float *)&v12[4 * v4] + *(float *)&v6[4 * v10]) / v14;
  return v15;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this)
{
  __int32 v1;
  int v2;
  int v3;
  float32x2_t v5;
  int v6;
  int v7;
  float64x2_t v8[2];
  double v9;

  v5.i32[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat(this);
  v5.i32[1] = v1;
  v6 = v2;
  v7 = v3;
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v8, &v5);
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v9, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v8);
  return v9;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::DecomposeRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4f *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;

  v17.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotation(a1);
  v17.f64[1] = v7;
  v18 = v8;
  v19 = v9;
  v15 = vcvtq_f64_f32(*a2);
  v16 = a2[1].f32[0];
  v13 = vcvtq_f64_f32(*a3);
  v14 = a3[1].f32[0];
  v11 = vcvtq_f64_f32(*a4);
  v12 = a4[1].f32[0];
  return pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v17, v15.f64, v13.f64, v11.f64);
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationMatrix@<D0>(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  int v3;
  int v4;
  double result;

  *(_QWORD *)&v2 = *(_QWORD *)((char *)this + 4);
  v3 = *((_DWORD *)this + 6);
  v4 = *((_DWORD *)this + 10);
  *((_QWORD *)&v2 + 1) = *((_QWORD *)this + 2);
  *(_DWORD *)a2 = *(_DWORD *)this;
  *(_OWORD *)(a2 + 4) = v2;
  *(_DWORD *)(a2 + 20) = v3;
  result = *((double *)this + 4);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4f *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4f *a3, double a4)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
LABEL_2:
  v6 = 0;
  while (vabdd_f64(*(float *)((char *)this + v6), *(float *)((char *)a2 + v6)) < a4)
  {
    v6 += 4;
    if (v6 == 16)
    {
      v4 = v5 > 2;
      a2 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)((char *)a2 + 16);
      this = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 16);
      if (++v5 != 4)
        goto LABEL_2;
      return 1;
    }
  }
  return v4;
}

uint64_t *sub_20BF03524()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFD0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BFD0, (char *)0x40, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF035E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(float64x2_t *this, float32x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v2 = vcvtq_f64_f32(a2[1]);
  *this = vcvtq_f64_f32(*a2);
  this[1] = v2;
  v3 = vcvtq_f64_f32(a2[3]);
  this[2] = vcvtq_f64_f32(a2[2]);
  this[3] = v3;
  v4 = vcvtq_f64_f32(a2[5]);
  this[4] = vcvtq_f64_f32(a2[4]);
  this[5] = v4;
  result = vcvtq_f64_f32(a2[6]);
  v6 = vcvtq_f64_f32(a2[7]);
  this[6] = result;
  this[7] = v6;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(_OWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  __int128 v13;
  _BYTE v14[80];
  _BYTE v15[48];
  uint64_t v16;

  v2 = 0;
  v16 = *MEMORY[0x24BDAC8D0];
  memset(&v15[8], 0, 32);
  memset(&v14[56], 0, 24);
  memset(&v14[8], 0, 32);
  *(_QWORD *)v14 = 0x3FF0000000000000;
  *(_OWORD *)&v14[40] = 0x3FF0000000000000uLL;
  *(_QWORD *)v15 = 0x3FF0000000000000;
  *(_QWORD *)&v15[40] = 0x3FF0000000000000;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = v14;
  do
  {
    if (v2 == v4)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 24 * v2);
    v8 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v7) >> 3;
    do
    {
      if (v8 == v6)
        break;
      *(_QWORD *)&v5[8 * v6] = *(_QWORD *)(v7 + 8 * v6);
      ++v6;
    }
    while (v6 != 4);
    ++v2;
    v5 += 32;
  }
  while (v2 != 4);
  v9 = *(_OWORD *)&v14[16];
  *a1 = *(_OWORD *)v14;
  a1[1] = v9;
  v10 = *(_OWORD *)&v14[48];
  a1[2] = *(_OWORD *)&v14[32];
  a1[3] = v10;
  v11 = *(_OWORD *)v15;
  a1[4] = *(_OWORD *)&v14[64];
  a1[5] = v11;
  result = *(double *)&v15[16];
  v13 = *(_OWORD *)&v15[32];
  a1[6] = *(_OWORD *)&v15[16];
  a1[7] = v13;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  __int128 v13;
  _BYTE v14[80];
  _BYTE v15[48];
  uint64_t v16;

  v2 = 0;
  v16 = *MEMORY[0x24BDAC8D0];
  memset(&v15[8], 0, 32);
  memset(&v14[56], 0, 24);
  memset(&v14[8], 0, 32);
  *(_QWORD *)v14 = 0x3FF0000000000000;
  *(_OWORD *)&v14[40] = 0x3FF0000000000000uLL;
  *(_QWORD *)v15 = 0x3FF0000000000000;
  *(_QWORD *)&v15[40] = 0x3FF0000000000000;
  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = v14;
  do
  {
    if (v2 == v4)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 24 * v2);
    v8 = (*(_QWORD *)(v3 + 24 * v2 + 8) - v7) >> 2;
    do
    {
      if (v8 == v6)
        break;
      *(double *)&v5[8 * v6] = *(float *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 != 4);
    ++v2;
    v5 += 32;
  }
  while (v2 != 4);
  v9 = *(_OWORD *)&v14[16];
  *a1 = *(_OWORD *)v14;
  a1[1] = v9;
  v10 = *(_OWORD *)&v14[48];
  a1[2] = *(_OWORD *)&v14[32];
  a1[3] = v10;
  v11 = *(_OWORD *)v15;
  a1[4] = *(_OWORD *)&v14[64];
  a1[5] = v11;
  result = *(double *)&v15[16];
  v13 = *(_OWORD *)&v15[32];
  a1[6] = *(_OWORD *)&v15[16];
  a1[7] = v13;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(_OWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double result;
  __int128 v21;
  _OWORD v22[5];
  _BYTE v23[48];
  uint64_t v24;

  v5 = 0;
  v24 = *MEMORY[0x24BDAC8D0];
  memset(&v23[8], 0, 32);
  memset((char *)&v22[3] + 8, 0, 24);
  memset((char *)v22 + 8, 0, 32);
  *(_QWORD *)&v22[0] = 0x3FF0000000000000;
  *(_OWORD *)((char *)&v22[2] + 8) = 0x3FF0000000000000uLL;
  *(_QWORD *)v23 = 0x3FF0000000000000;
  *(_QWORD *)&v23[40] = 0x3FF0000000000000;
  v6 = *a2;
  v7 = (a2[1] - *a2) >> 3;
  do
  {
    if (v7 == v5)
      break;
    *((_QWORD *)v22 + v5) = *(_QWORD *)(v6 + 8 * v5);
    ++v5;
  }
  while (v5 != 4);
  v8 = 0;
  v9 = *a3;
  v10 = (a3[1] - *a3) >> 3;
  do
  {
    if (v10 == v8)
      break;
    *((_QWORD *)&v22[2] + v8) = *(_QWORD *)(v9 + 8 * v8);
    ++v8;
  }
  while (v8 != 4);
  v11 = 0;
  v12 = *a4;
  v13 = (a4[1] - *a4) >> 3;
  do
  {
    if (v13 == v11)
      break;
    *((_QWORD *)&v22[4] + v11) = *(_QWORD *)(v12 + 8 * v11);
    ++v11;
  }
  while (v11 != 4);
  v14 = 0;
  v15 = *a5;
  v16 = (a5[1] - *a5) >> 3;
  do
  {
    if (v16 == v14)
      break;
    *(_QWORD *)&v23[8 * v14 + 16] = *(_QWORD *)(v15 + 8 * v14);
    ++v14;
  }
  while (v14 != 4);
  v17 = v22[1];
  *a1 = v22[0];
  a1[1] = v17;
  v18 = v22[3];
  a1[2] = v22[2];
  a1[3] = v18;
  v19 = *(_OWORD *)v23;
  a1[4] = v22[4];
  a1[5] = v19;
  result = *(double *)&v23[16];
  v21 = *(_OWORD *)&v23[32];
  a1[6] = *(_OWORD *)&v23[16];
  a1[7] = v21;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double result;
  __int128 v21;
  _OWORD v22[5];
  _BYTE v23[48];
  uint64_t v24;

  v5 = 0;
  v24 = *MEMORY[0x24BDAC8D0];
  memset(&v23[8], 0, 32);
  memset((char *)&v22[3] + 8, 0, 24);
  memset((char *)v22 + 8, 0, 32);
  *(_QWORD *)&v22[0] = 0x3FF0000000000000;
  *(_OWORD *)((char *)&v22[2] + 8) = 0x3FF0000000000000uLL;
  *(_QWORD *)v23 = 0x3FF0000000000000;
  *(_QWORD *)&v23[40] = 0x3FF0000000000000;
  v6 = *a2;
  v7 = (a2[1] - *a2) >> 2;
  do
  {
    if (v7 == v5)
      break;
    *((double *)v22 + v5) = *(float *)(v6 + 4 * v5);
    ++v5;
  }
  while (v5 != 4);
  v8 = 0;
  v9 = *a3;
  v10 = (a3[1] - *a3) >> 2;
  do
  {
    if (v10 == v8)
      break;
    *((double *)&v22[2] + v8) = *(float *)(v9 + 4 * v8);
    ++v8;
  }
  while (v8 != 4);
  v11 = 0;
  v12 = *a4;
  v13 = (a4[1] - *a4) >> 2;
  do
  {
    if (v13 == v11)
      break;
    *((double *)&v22[4] + v11) = *(float *)(v12 + 4 * v11);
    ++v11;
  }
  while (v11 != 4);
  v14 = 0;
  v15 = *a5;
  v16 = (a5[1] - *a5) >> 2;
  do
  {
    if (v16 == v14)
      break;
    *(double *)&v23[8 * v14 + 16] = *(float *)(v15 + 4 * v14);
    ++v14;
  }
  while (v14 != 4);
  v17 = v22[1];
  *a1 = v22[0];
  a1[1] = v17;
  v18 = v22[3];
  a1[2] = v22[2];
  a1[3] = v18;
  v19 = *(_OWORD *)v23;
  a1[4] = v22[4];
  a1[5] = v19;
  result = *(double *)&v23[16];
  v21 = *(_OWORD *)&v23[32];
  a1[6] = *(_OWORD *)&v23[16];
  a1[7] = v21;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(pxrInternal__aapl__pxrReserved__::GfMatrix4d *a1, float64x2_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v4;
  double result;

  v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(a1, a2);
  *((_QWORD *)v4 + 12) = *(_QWORD *)a3;
  *((_QWORD *)v4 + 13) = *(_QWORD *)(a3 + 8);
  result = *(double *)(a3 + 16);
  *((double *)v4 + 14) = result;
  *((_QWORD *)v4 + 15) = 0x3FF0000000000000;
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v4;
  double result;

  v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(a1, a2);
  *((_QWORD *)v4 + 12) = *(_QWORD *)a3;
  *((_QWORD *)v4 + 13) = *(_QWORD *)(a3 + 8);
  result = *(double *)(a3 + 16);
  *((double *)v4 + 14) = result;
  *((_QWORD *)v4 + 15) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTransform(pxrInternal__aapl__pxrReserved__::GfMatrix4d *a1, float64x2_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v4;
  double result;

  v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(a1, a2);
  *((_QWORD *)v4 + 12) = *(_QWORD *)a3;
  *((_QWORD *)v4 + 13) = *(_QWORD *)(a3 + 8);
  result = *(double *)(a3 + 16);
  *((double *)v4 + 14) = result;
  *((_QWORD *)v4 + 15) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTransform(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2[3];
  *(_QWORD *)(a1 + 40) = a2[4];
  *(_QWORD *)(a1 + 48) = a2[5];
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a2[6];
  *(_QWORD *)(a1 + 72) = a2[7];
  *(_QWORD *)(a1 + 80) = a2[8];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 8);
  result = *(double *)(a3 + 16);
  *(double *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(double *)(this + 40) = a2;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(double *)(this + 80) = a2;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(double *)(this + 120) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 120) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::Get(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, double (*a2)[4])
{
  (*a2)[0] = *(double *)this;
  (*a2)[1] = *((double *)this + 1);
  (*a2)[2] = *((double *)this + 2);
  (*a2)[3] = *((double *)this + 3);
  (*a2)[4] = *((double *)this + 4);
  (*a2)[5] = *((double *)this + 5);
  (*a2)[6] = *((double *)this + 6);
  (*a2)[7] = *((double *)this + 7);
  (*a2)[8] = *((double *)this + 8);
  (*a2)[9] = *((double *)this + 9);
  (*a2)[10] = *((double *)this + 10);
  (*a2)[11] = *((double *)this + 11);
  (*a2)[12] = *((double *)this + 12);
  (*a2)[13] = *((double *)this + 13);
  (*a2)[14] = *((double *)this + 14);
  (*a2)[15] = *((double *)this + 15);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(double *a1, double *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(double *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15];
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose@<D0>(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5);
  *(_QWORD *)a2 = *(_QWORD *)this;
  *(_QWORD *)(a2 + 8) = v3;
  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v4;
  v7 = *((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 7);
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 96) = v6;
  *(_QWORD *)(a2 + 104) = v8;
  v9 = *((_QWORD *)this + 9);
  v10 = *((_QWORD *)this + 12);
  v11 = *((_QWORD *)this + 13);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 8);
  *(_QWORD *)(a2 + 24) = v10;
  result = *((double *)this + 10);
  v13 = *((_QWORD *)this + 11);
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = v11;
  v14 = *((_QWORD *)this + 14);
  v15 = *((_QWORD *)this + 15);
  *(double *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 112) = v13;
  *(_QWORD *)(a2 + 120) = v15;
  return result;
}

pxrInternal__aapl__pxrReserved__::GfMatrix4d *pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, float64x2_t *a2)
{
  double v3;
  double v4;
  double v5;
  double v7[3];

  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_SetRotateFromQuat((double *)this, v7, v5);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslateOnly(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 96) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2)
{
  double result;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 8);
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse@<X0>(double *this@<X0>, double *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v4 = *this;
  v5 = this[1];
  v6 = this[4];
  v7 = this[5];
  v8 = this[8];
  v9 = this[9];
  v10 = this[12];
  v11 = this[13];
  v13 = this[2];
  v12 = this[3];
  v14 = this[6];
  v15 = this[7];
  v16 = this[10];
  v17 = this[11];
  v19 = this[14];
  v18 = this[15];
  v20 = v13 * v15 - v12 * v14;
  v21 = v13 * v17 - v12 * v16;
  v22 = v13 * v18 - v12 * v19;
  v23 = v14 * v17 - v15 * v16;
  v24 = v14 * v18 - v15 * v19;
  v25 = v16 * v18 - v17 * v19;
  v26 = v7 * v21 - v9 * v20 - v5 * v23;
  v27 = v11 * v20 + v5 * v24 - v7 * v22;
  v28 = v9 * v22 - v11 * v21 - v5 * v25;
  v29 = v11 * v23 + v7 * v25 - v9 * v24;
  v30 = *this * v29 + v6 * v28 + v10 * v26 + v8 * v27;
  if (a2)
    *a2 = v30;
  if (fabs(v30) <= a3)
  {
    *(_QWORD *)a4 = 0x47EFFFFFE0000000;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    v39 = 1.0;
    v37 = 3.40282347e38;
    v38 = 3.40282347e38;
  }
  else
  {
    v31 = v4 * v7 - v5 * v6;
    v32 = v4 * v9 - v5 * v8;
    v33 = v4 * v11 - v5 * v10;
    v34 = v6 * v9 - v7 * v8;
    v35 = v6 * v11 - v7 * v10;
    v36 = v8 * v11 - v9 * v10;
    *(double *)a4 = v29 * (1.0 / v30);
    *(double *)(a4 + 8) = v28 * (1.0 / v30);
    *(double *)(a4 + 32) = (v8 * v24 - v10 * v23 - v6 * v25) * (1.0 / v30);
    *(double *)(a4 + 16) = v27 * (1.0 / v30);
    *(double *)(a4 + 24) = v26 * (1.0 / v30);
    *(double *)(a4 + 64) = (v36 * v15 - v35 * v17 + v34 * v18) * (1.0 / v30);
    *(double *)(a4 + 72) = (v33 * v17 - v32 * v18 - v12 * v36) * (1.0 / v30);
    *(double *)(a4 + 48) = (v6 * v22 - v10 * v20 - v4 * v24) * (1.0 / v30);
    *(double *)(a4 + 56) = (v8 * v20 + v4 * v23 - v6 * v21) * (1.0 / v30);
    *(double *)(a4 + 88) = (v32 * v15 - v31 * v17 - v34 * v12) * (1.0 / v30);
    *(double *)(a4 + 96) = (v35 * v16 - v34 * v19 - v36 * v14) * (1.0 / v30);
    *(double *)(a4 + 104) = (v13 * v36 - v33 * v16 + v32 * v19) * (1.0 / v30);
    *(double *)(a4 + 112) = (v33 * v14 - v31 * v19 - v13 * v35) * (1.0 / v30);
    v37 = (v10 * v21 + v4 * v25 - v8 * v22) * (1.0 / v30);
    v38 = (v12 * v35 - v33 * v15 + v31 * v18) * (1.0 / v30);
    v39 = (v34 * v13 - v32 * v14 + v31 * v16) * (1.0 / v30);
  }
  *(double *)(a4 + 40) = v37;
  *(double *)(a4 + 80) = v38;
  *(double *)(a4 + 120) = v39;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(double *)(this + 40) = a2;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(double *)(this + 80) = a2;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_QWORD *)(this + 120) = 0x3FF0000000000000;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = *((double *)this + 4);
  v2 = *((double *)this + 5);
  v4 = *((double *)this + 8);
  v3 = *((double *)this + 9);
  v5 = *((double *)this + 14);
  v6 = *((double *)this + 10);
  v7 = *((double *)this + 12);
  v8 = *((double *)this + 13);
  v9 = *((double *)this + 6);
  v10 = *((double *)this + 1);
  v11 = *((double *)this + 2);
  return *((double *)this + 15)
       * (v6 * (v2 * *(double *)this)
        + v4 * (v9 * v10)
        + v3 * (v1 * v11)
        - v3 * (v9 * *(double *)this)
        - v6 * (v1 * v10)
        - v4 * (v2 * v11))
       + *((double *)this + 7)
       * (v5 * (v3 * *(double *)this)
        + v7 * (v6 * v10)
        + v8 * (v4 * v11)
        - v8 * (v6 * *(double *)this)
        - v5 * (v4 * v10)
        - v7 * (v3 * v11))
       - *((double *)this + 3)
       * (v1 * v3 * v5 + v2 * v6 * v7 + v9 * v4 * v8 - v1 * v6 * v8 - v5 * (v2 * v4) - v7 * (v3 * v9))
       - *((double *)this + 11)
       * (v5 * (v2 * *(double *)this)
        + v7 * (v9 * v10)
        + v8 * (v1 * v11)
        - v8 * (v9 * *(double *)this)
        - v5 * (v1 * v10)
        - v7 * (v2 * v11));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::_GetDeterminant3(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  char *v9;
  double v10;
  double v11;

  v7 = (char *)this + 32 * a2;
  v8 = (char *)this + 32 * a3;
  v9 = (char *)this + 32 * a4;
  v10 = *(double *)&v7[8 * a6];
  v11 = *(double *)&v8[8 * a5];
  return *(double *)&v7[8 * a5] * *(double *)&v8[8 * a6] * *(double *)&v9[8 * a7]
       + v10 * *(double *)&v8[8 * a7] * *(double *)&v9[8 * a5]
       + *(double *)&v7[8 * a7] * v11 * *(double *)&v9[8 * a6]
       - *(double *)&v7[8 * a5] * *(double *)&v8[8 * a7] * *(double *)&v9[8 * a6]
       - *(double *)&v9[8 * a7] * (v10 * v11)
       - *(double *)&v9[8 * a5] * (*(double *)&v8[8 * a6] * *(double *)&v7[8 * a7]);
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetHandedness(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  double v1;
  BOOL v2;
  BOOL v3;
  double result;

  v1 = sub_20BF047CC((double *)this);
  v2 = v1 < 0.0;
  v3 = v1 <= 0.0;
  result = 0.0;
  if (!v3)
    result = 1.0;
  if (v2)
    return -1.0;
  return result;
}

double sub_20BF047CC(double *a1)
{
  return *a1 * a1[5] * a1[10]
       + a1[1] * a1[6] * a1[8]
       + a1[2] * a1[4] * a1[9]
       - *a1 * a1[6] * a1[9]
       - a1[10] * (a1[1] * a1[4])
       - a1[8] * (a1[5] * a1[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = *((_QWORD *)this + 2);
  v18 = *(_OWORD *)this;
  v19 = v4;
  v5 = *((_QWORD *)this + 6);
  v16 = *((_OWORD *)this + 2);
  v17 = v5;
  v6 = *((_QWORD *)this + 10);
  v14 = *((_OWORD *)this + 4);
  v15 = v6;
  v7 = pxrInternal__aapl__pxrReserved__::GfVec3d::OrthogonalizeBasis(&v18, &v16, &v14, 1, 0.000001);
  v9 = v7;
  *(_OWORD *)this = v18;
  *((_QWORD *)this + 2) = v19;
  *((_OWORD *)this + 2) = v16;
  *((_QWORD *)this + 6) = v17;
  *((_OWORD *)this + 4) = v14;
  v10 = *((uint64_t *)this + 15);
  *((_QWORD *)this + 10) = v15;
  if (*(double *)&v10 != 1.0 && fabs(*(double *)&v10) >= 1.0e-10)
  {
    *((float64x2_t *)this + 6) = vdivq_f64(*((float64x2_t *)this + 6), (float64x2_t)vdupq_lane_s64(v10, 0));
    *((double *)this + 14) = *((double *)this + 14) / *(double *)&v10;
    *((_QWORD *)this + 15) = 0x3FF0000000000000;
  }
  if (((v7 | a2 ^ 1) & 1) == 0)
  {
    v12[0] = "gf/matrix4d.cpp";
    v12[1] = "Orthonormalize";
    v12[2] = 495;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize(BOOL)";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v12, (pxrInternal__aapl__pxrReserved__ *)"OrthogonalizeBasis did not converge, matrix may not be orthonormal.", v8);
  }
  return v9;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetOrthonormalized@<X0>(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_OWORD *)this + 5);
  *((_OWORD *)a3 + 4) = *((_OWORD *)this + 4);
  *((_OWORD *)a3 + 5) = v3;
  v4 = *((_OWORD *)this + 7);
  *((_OWORD *)a3 + 6) = *((_OWORD *)this + 6);
  *((_OWORD *)a3 + 7) = v4;
  v5 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *((_OWORD *)a3 + 1) = v5;
  v6 = *((_OWORD *)this + 3);
  *((_OWORD *)a3 + 2) = *((_OWORD *)this + 2);
  *((_OWORD *)a3 + 3) = v6;
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize(a3, a2);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(float64x2_t *a1, double a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t result;

  v2 = vmulq_n_f64(a1[1], a2);
  *a1 = vmulq_n_f64(*a1, a2);
  a1[1] = v2;
  v3 = vmulq_n_f64(a1[3], a2);
  a1[2] = vmulq_n_f64(a1[2], a2);
  a1[3] = v3;
  v4 = vmulq_n_f64(a1[5], a2);
  a1[4] = vmulq_n_f64(a1[4], a2);
  a1[5] = v4;
  v5 = vmulq_n_f64(a1[6], a2);
  result = vmulq_n_f64(a1[7], a2);
  a1[6] = v5;
  a1[7] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;

  v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  a1[3] = a2[3] + v3;
  v4 = a1[5];
  a1[4] = a2[4] + a1[4];
  a1[5] = a2[5] + v4;
  v5 = a1[7];
  a1[6] = a2[6] + a1[6];
  a1[7] = a2[7] + v5;
  v6 = a1[9];
  a1[8] = a2[8] + a1[8];
  a1[9] = a2[9] + v6;
  v7 = a1[11];
  a1[10] = a2[10] + a1[10];
  a1[11] = a2[11] + v7;
  v8 = a1[13];
  a1[12] = a2[12] + a1[12];
  a1[13] = a2[13] + v8;
  v9 = a1[15];
  a1[14] = a2[14] + a1[14];
  result = a2[15] + v9;
  a1[15] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator-=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;

  v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  a1[3] = v3 - a2[3];
  v4 = a1[5];
  a1[4] = a1[4] - a2[4];
  a1[5] = v4 - a2[5];
  v5 = a1[7];
  a1[6] = a1[6] - a2[6];
  a1[7] = v5 - a2[7];
  v6 = a1[9];
  a1[8] = a1[8] - a2[8];
  a1[9] = v6 - a2[9];
  v7 = a1[11];
  a1[10] = a1[10] - a2[10];
  a1[11] = v7 - a2[11];
  v8 = a1[13];
  a1[12] = a1[12] - a2[12];
  a1[13] = v8 - a2[13];
  v9 = a1[15];
  a1[14] = a1[14] - a2[14];
  result = v9 - a2[15];
  a1[15] = result;
  return result;
}

float64x2_t pxrInternal__aapl__pxrReserved__::operator-@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v2 = vnegq_f64(a1[1]);
  *a2 = vnegq_f64(*a1);
  a2[1] = v2;
  v3 = vnegq_f64(a1[3]);
  a2[2] = vnegq_f64(a1[2]);
  a2[3] = v3;
  v4 = vnegq_f64(a1[5]);
  a2[4] = vnegq_f64(a1[4]);
  a2[5] = v4;
  result = vnegq_f64(a1[6]);
  v6 = vnegq_f64(a1[7]);
  a2[6] = result;
  a2[7] = v6;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v6 = a1[5];
  v9 = a1[6];
  v8 = a1[7];
  v11 = a1[8];
  v10 = a1[9];
  v13 = a1[10];
  v12 = a1[11];
  v15 = a1[12];
  v14 = a1[13];
  v17 = a1[14];
  v16 = a1[15];
  *a1 = *a1 * *a2 + v3 * a2[4] + v4 * a2[8] + v5 * a2[12];
  a1[1] = v2 * a2[1] + v3 * a2[5] + v4 * a2[9] + v5 * a2[13];
  a1[2] = v2 * a2[2] + v3 * a2[6] + v4 * a2[10] + v5 * a2[14];
  a1[3] = v2 * a2[3] + v3 * a2[7] + v4 * a2[11] + v5 * a2[15];
  a1[4] = v7 * *a2 + v6 * a2[4] + v9 * a2[8] + v8 * a2[12];
  a1[5] = v7 * a2[1] + v6 * a2[5] + v9 * a2[9] + v8 * a2[13];
  a1[6] = v7 * a2[2] + v6 * a2[6] + v9 * a2[10] + v8 * a2[14];
  a1[7] = v7 * a2[3] + v6 * a2[7] + v9 * a2[11] + v8 * a2[15];
  a1[8] = v11 * *a2 + v10 * a2[4] + v13 * a2[8] + v12 * a2[12];
  a1[9] = v11 * a2[1] + v10 * a2[5] + v13 * a2[9] + v12 * a2[13];
  a1[10] = v11 * a2[2] + v10 * a2[6] + v13 * a2[10] + v12 * a2[14];
  a1[11] = v11 * a2[3] + v10 * a2[7] + v13 * a2[11] + v12 * a2[15];
  a1[12] = v15 * *a2 + v14 * a2[4] + v17 * a2[8] + v16 * a2[12];
  a1[13] = v15 * a2[1] + v14 * a2[5] + v17 * a2[9] + v16 * a2[13];
  a1[14] = v15 * a2[2] + v14 * a2[6] + v17 * a2[10] + v16 * a2[14];
  result = v15 * a2[3] + v14 * a2[7] + v17 * a2[11] + v16 * a2[15];
  a1[15] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::_SetRotateFromQuat(double *a1, double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double result;

  v3 = a2[1] * a2[1] + a2[2] * a2[2];
  *a1 = 1.0 - (v3 + v3);
  v4 = *a2 * a2[1] + a2[2] * a3;
  a1[1] = v4 + v4;
  v5 = a2[2] * *a2 - a2[1] * a3;
  a1[2] = v5 + v5;
  v6 = *a2 * a2[1] - a2[2] * a3;
  a1[4] = v6 + v6;
  v7 = a2[2] * a2[2] + *a2 * *a2;
  a1[5] = 1.0 - (v7 + v7);
  v8 = a2[1] * a2[2] + *a2 * a3;
  a1[6] = v8 + v8;
  v9 = a2[2] * *a2 + a2[1] * a3;
  a1[8] = v9 + v9;
  v10 = a2[1] * a2[2] - *a2 * a3;
  a1[9] = v10 + v10;
  v11 = a2[1] * a2[1] + *a2 * *a2;
  result = 1.0 - (v11 + v11);
  a1[10] = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(uint64_t a1, double *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_SetRotateFromQuat((double *)a1, a2, a2[3]);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return a1;
}

double *pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotateOnly(double *a1, double *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_SetRotateFromQuat(a1, a2, a2[3]);
  return a1;
}

pxrInternal__aapl__pxrReserved__::GfMatrix4d *pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, float64x2_t *a2)
{
  double v3;
  double v4;
  double v5;
  double v7[3];

  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_SetRotateFromQuat((double *)this, v7, v5);
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2)
{
  double result;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 7);
  result = *((double *)a2 + 8);
  *((double *)this + 10) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale(uint64_t a1, _QWORD *a2)
{
  double result;

  *(_QWORD *)a1 = *a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = a2[1];
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = a2[2];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = xmmword_20CA527E0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double result;

  v4 = *a3 - *a2;
  v5 = a3[1] - a2[1];
  v6 = a3[2] - a2[2];
  v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 <= 1.0e-10)
    v8 = 1.0e10;
  else
    v8 = 1.0 / v7;
  v9 = v4 * v8;
  v10 = v5 * v8;
  v11 = v6 * v8;
  v13 = a4[1];
  v12 = a4[2];
  v14 = v12 * (v5 * v8) - v13 * (v6 * v8);
  v15 = *a4 * (v6 * v8) - v12 * (v4 * v8);
  v16 = v13 * (v4 * v8) - *a4 * (v5 * v8);
  v17 = sqrt(v16 * v16 + v14 * v14 + v15 * v15);
  v18 = 1.0 / v17;
  if (v17 <= 1.0e-10)
    v18 = 1.0e10;
  v19 = v14 * v18;
  v20 = v15 * v18;
  v21 = v16 * v18;
  v22 = v11 * v20 - v10 * v21;
  v23 = v9 * v21 - v11 * v19;
  v24 = v10 * v19 - v9 * v20;
  *(double *)a1 = v19;
  *(double *)(a1 + 32) = v20;
  *(double *)(a1 + 64) = v21;
  *(double *)(a1 + 96) = -(a2[2] * v21 + *a2 * v19 + a2[1] * v20);
  *(double *)(a1 + 8) = v22;
  *(double *)(a1 + 40) = v23;
  *(double *)(a1 + 72) = v24;
  *(double *)(a1 + 104) = -(a2[2] * v24 + *a2 * v22 + a2[1] * v23);
  *(double *)(a1 + 16) = -(v4 * v8);
  *(double *)(a1 + 48) = -(v5 * v8);
  *(double *)(a1 + 80) = -(v6 * v8);
  result = v9 * *a2 + v10 * a2[1] + v11 * a2[2];
  *(double *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

_OWORD *pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(_OWORD *a1, double *a2, double *a3)
{
  double v4;
  double v5;
  double v6;
  float64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[48];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24[16];

  v4 = -*a2;
  v5 = -a2[1];
  v6 = -a2[2];
  v15.f64[0] = sub_20BEF83AC(a3);
  v15.f64[1] = v7;
  v16 = v8;
  v17 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v24, &v15);
  *(_QWORD *)v18 = 0x3FF0000000000000;
  memset(&v18[8], 0, 32);
  *(_QWORD *)&v18[40] = 0x3FF0000000000000;
  v19 = 0u;
  v20 = 0u;
  v21 = xmmword_20CA527E0;
  *(double *)&v22 = v4;
  *((double *)&v22 + 1) = v5;
  *(double *)&v23 = v6;
  *((_QWORD *)&v23 + 1) = 0x3FF0000000000000;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v18, v24);
  v10 = v21;
  a1[4] = v20;
  a1[5] = v10;
  v11 = v23;
  a1[6] = v22;
  a1[7] = v11;
  v12 = *(_OWORD *)&v18[16];
  *a1 = *(_OWORD *)v18;
  a1[1] = v12;
  v13 = v19;
  a1[2] = *(_OWORD *)&v18[32];
  a1[3] = v13;
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor(uint64_t a1, __int128 *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v48[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD v73[3];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _OWORD v84[8];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;

  v11 = 0;
  v99 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a6 = 0x3FF0000000000000;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_QWORD *)(a6 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_QWORD *)(a6 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_QWORD *)(a6 + 120) = 0x3FF0000000000000;
  v12 = 96;
  *(_OWORD *)(a6 + 104) = 0u;
  do
  {
    v13 = (char *)&v85 + v11;
    *(_OWORD *)v13 = *(_OWORD *)(a1 + v11);
    *((_QWORD *)v13 + 2) = *(_QWORD *)(a1 + v11 + 16);
    *((_QWORD *)v13 + 3) = 0;
    *(_QWORD *)((char *)&v85 + v12) = 0;
    *(_QWORD *)(a5 + v12 - 96) = *(_QWORD *)(a1 + v12);
    v12 += 8;
    v11 += 32;
  }
  while (v12 != 120);
  *((_QWORD *)&v92 + 1) = 0x3FF0000000000000;
  v14 = *(double *)&v85 * *((double *)&v87 + 1) * *(double *)&v90
      + *((double *)&v85 + 1) * *(double *)&v88 * *(double *)&v89
      + *(double *)&v86 * *(double *)&v87 * *((double *)&v89 + 1)
      - *(double *)&v85 * *(double *)&v88 * *((double *)&v89 + 1)
      - *(double *)&v90 * (*((double *)&v85 + 1) * *(double *)&v87)
      - *(double *)&v89 * (*((double *)&v87 + 1) * *(double *)&v86);
  v74 = v85;
  *(_QWORD *)&v75 = v87;
  if (v14 >= 0.0)
    v15 = 1.0;
  else
    v15 = -1.0;
  *((_QWORD *)&v76 + 1) = *((_QWORD *)&v85 + 1);
  v77 = *((_QWORD *)&v87 + 1);
  *(_QWORD *)&v79 = v86;
  *((_QWORD *)&v79 + 1) = v88;
  *((_QWORD *)&v81 + 1) = *((_QWORD *)&v86 + 1);
  *(_QWORD *)&v82 = *((_QWORD *)&v88 + 1);
  *((_QWORD *)&v82 + 1) = *((_QWORD *)&v90 + 1);
  *((_QWORD *)&v75 + 1) = v89;
  *(_QWORD *)&v76 = v91;
  *(_QWORD *)&v78 = *((_QWORD *)&v89 + 1);
  *((_QWORD *)&v78 + 1) = *((_QWORD *)&v91 + 1);
  v80 = v90;
  *(_QWORD *)&v81 = v92;
  v83 = 0x3FF0000000000000;
  v84[2] = v87;
  v84[3] = v88;
  v84[0] = v85;
  v84[1] = v86;
  v84[6] = v91;
  v84[7] = v92;
  v84[4] = v89;
  v84[5] = v90;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v84, (double *)&v74);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_Jacobi3((uint64_t)v84, v73, &v93);
  v16 = 0;
  v75 = 0u;
  v76 = 0u;
  v81 = 0u;
  v82 = 0u;
  v17 = v94;
  v18 = v96;
  *a2 = v93;
  v19 = v98;
  *((_QWORD *)a2 + 2) = v17;
  *((_QWORD *)a2 + 3) = 0;
  a2[2] = v95;
  *((_QWORD *)a2 + 6) = v18;
  *((_QWORD *)a2 + 7) = 0;
  a2[4] = v97;
  *((_QWORD *)a2 + 10) = v19;
  *(__int128 *)((char *)a2 + 88) = 0u;
  *(__int128 *)((char *)a2 + 104) = 0u;
  *((_QWORD *)a2 + 15) = 0x3FF0000000000000;
  v74 = 0x3FF0000000000000;
  v77 = 0x3FF0000000000000;
  v80 = 0x3FF0000000000000;
  v83 = 0x3FF0000000000000;
  v20 = (double *)&v74;
  v78 = 0u;
  v79 = 0u;
  do
  {
    v21 = *(double *)&v73[v16];
    v22 = sqrt(v21);
    if (v21 >= a7)
      v23 = v22;
    else
      v23 = a7;
    v24 = v15 * v23;
    *(double *)(a3 + v16 * 8) = v24;
    *v20 = 1.0 / v24;
    v20 += 5;
    ++v16;
  }
  while (v16 != 3);
  v25 = a2[5];
  v53 = a2[4];
  v54 = v25;
  v26 = a2[7];
  v55 = a2[6];
  v56 = v26;
  v27 = a2[1];
  v49 = *a2;
  v50 = v27;
  v28 = a2[3];
  v51 = a2[2];
  v52 = v28;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v49, (double *)&v74);
  v29 = *((double *)a2 + 1);
  v30 = *((double *)a2 + 4);
  v31 = *((double *)a2 + 5);
  v48[0] = *(double *)a2;
  v48[1] = v30;
  v32 = *((double *)a2 + 2);
  v33 = *((double *)a2 + 3);
  v48[4] = v29;
  v48[5] = v31;
  v34 = *((double *)a2 + 6);
  v35 = *((double *)a2 + 7);
  v48[8] = v32;
  v48[9] = v34;
  v48[12] = v33;
  v48[13] = v35;
  v36 = *((double *)a2 + 9);
  v37 = *((double *)a2 + 12);
  v38 = *((double *)a2 + 13);
  v48[2] = *((double *)a2 + 8);
  v48[3] = v37;
  v39 = *((double *)a2 + 10);
  v40 = *((double *)a2 + 11);
  v48[6] = v36;
  v48[7] = v38;
  v41 = *((double *)a2 + 14);
  v42 = *((double *)a2 + 15);
  v48[10] = v39;
  v48[11] = v41;
  v48[14] = v40;
  v48[15] = v42;
  v61 = v53;
  v62 = v54;
  v63 = v55;
  v64 = v56;
  v57 = v49;
  v58 = v50;
  v59 = v51;
  v60 = v52;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v57, v48);
  v69 = v61;
  v70 = v62;
  v71 = v63;
  v72 = v64;
  v65 = v57;
  v66 = v58;
  v67 = v59;
  v68 = v60;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v65, (double *)&v85);
  v43 = v70;
  a4[4] = v69;
  a4[5] = v43;
  v44 = v72;
  a4[6] = v71;
  a4[7] = v44;
  v45 = v66;
  *a4 = v65;
  a4[1] = v45;
  v46 = v68;
  a4[2] = v67;
  a4[3] = v46;
  return v14 * v15 >= a7;
}

double *pxrInternal__aapl__pxrReserved__::GfMatrix4d::_Jacobi3(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double *result;
  char v15;
  char *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  double *v27;
  unint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  double *v52;
  double *v53;
  double v54;
  double v55;
  _OWORD *v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t i;
  double v61;
  double v62;
  uint64_t j;
  double v64;
  _QWORD v65[3];
  __int128 v66;
  uint64_t v67;
  _OWORD v68[2];
  _OWORD v69[6];

  v3 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 80);
  *a2 = *(_QWORD *)a1;
  a2[1] = v4;
  a2[2] = v5;
  *a3 = 0x3FF0000000000000;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  a3[4] = 0x3FF0000000000000;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0x3FF0000000000000;
  v6 = *(_OWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 96);
  v8 = *(_OWORD *)(a1 + 112);
  v69[3] = *(_OWORD *)(a1 + 80);
  v69[4] = v7;
  v69[5] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v68[0] = *(_OWORD *)a1;
  v68[1] = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v69[0] = *(_OWORD *)(a1 + 32);
  v69[1] = v10;
  v69[2] = v6;
  v66 = *(_OWORD *)a2;
  v67 = a2[2];
  memset(v65, 0, sizeof(v65));
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = 0.0;
    LOBYTE(result) = 1;
    do
    {
      v15 = (char)result;
      v16 = (char *)&v68[v12] + 8;
      v17 = v11;
      do
      {
        v13 = v13 + fabs(*(double *)&v16[v17]);
        v17 += 8;
      }
      while (v17 != 16);
      result = 0;
      v11 += 8;
      v12 = 2;
    }
    while ((v15 & 1) != 0);
    if (v13 == 0.0)
      break;
    v18 = 0.0;
    if (v3 <= 2)
      v18 = v13 * 0.2 / 9.0;
    v19 = 0;
    v20 = a3;
    v21 = a3 + 1;
    result = (double *)v69 + 1;
    v22 = (double *)v68 + 1;
    v23 = 1;
    do
    {
      v24 = v19 + 1;
      if (v19 <= 1)
      {
        v25 = 0;
        v26 = v21;
        v27 = result;
        v28 = v23;
        v29 = (double *)&v68[2 * v19];
        do
        {
          v30 = v29[v28];
          v31 = fabs(v30);
          v32 = v31 * 100.0;
          if (v3 >= 4
            && (v33 = fabs(*(double *)&a2[v19]), v32 + v33 == v33)
            && (v34 = fabs(*(double *)&a2[v28]), v32 + v34 == v34))
          {
            v29[v28] = 0.0;
          }
          else if (v31 > v18)
          {
            v35 = *(double *)&a2[v28];
            v36 = *(double *)&a2[v19];
            v37 = v35 - v36;
            v38 = vabdd_f64(v35, v36);
            v39 = v32 + v38;
            v40 = v37 * 0.5 / v30;
            v41 = 1.0 / (fabs(v40) + sqrt(v40 * v40 + 1.0));
            if (v40 >= 0.0)
              v42 = v41;
            else
              v42 = -v41;
            v43 = v30 / v37;
            if (v39 == v38)
              v44 = v43;
            else
              v44 = v42;
            v45 = 1.0 / sqrt(v44 * v44 + 1.0);
            v46 = v44 * v45;
            v47 = v30 * v44;
            *(double *)&v65[v19] = *(double *)&v65[v19] - v47;
            *(double *)&v65[v28] = v47 + *(double *)&v65[v28];
            v48 = v46 / (v45 + 1.0);
            *(double *)&a2[v19] = v36 - v47;
            *(double *)&a2[v28] = v47 + *(double *)&a2[v28];
            v29[v28] = 0.0;
            if (v19 == 1)
            {
              v49 = *((double *)v68 + v28);
              v50 = *((double *)v68 + 1);
              *((double *)v68 + 1) = *((double *)v68 + 1) - v46 * (v49 + v48 * *((double *)v68 + 1));
              *((double *)v68 + v28) = v49 + v46 * (v50 - v48 * v49);
            }
            v51 = v25;
            v52 = v27;
            v53 = v22;
            if (v24 < v28)
            {
              do
              {
                v54 = *v53;
                v55 = *v52;
                *v53 = *v53 - v46 * (*v52 + v48 * *v53);
                ++v53;
                *v52 = v55 + v46 * (v54 - v48 * v55);
                v52 += 4;
                --v51;
              }
              while (v51);
            }
            if (v28 < 2)
            {
              v56 = &v68[2 * v28];
              v57 = 8 * v28 + 8;
              v58 = *(double *)((char *)v29 + v57);
              v59 = *(double *)((char *)v56 + v57);
              *(double *)((char *)v29 + v57) = v58 - v46 * (v59 + v48 * v58);
              *(double *)((char *)v56 + v57) = v59 + v46 * (v58 - v48 * v59);
            }
            for (i = 0; i != 9; i += 3)
            {
              v61 = *(double *)&v20[i];
              v62 = *(double *)&v26[i];
              *(double *)&v20[i] = v61 - v46 * (v62 + v48 * v61);
              *(double *)&v26[i] = v62 + v46 * (v61 - v48 * v62);
            }
          }
          ++v28;
          ++v27;
          ++v25;
          ++v26;
        }
        while (v28 != 3);
      }
      ++v23;
      v22 += 5;
      result += 5;
      ++v21;
      ++v20;
      ++v19;
    }
    while (v24 != 3);
    for (j = 0; j != 3; ++j)
    {
      v64 = *(double *)&v65[j] + *(double *)((char *)&v66 + j * 8);
      *(double *)((char *)&v66 + j * 8) = v64;
      *(double *)&a2[j] = v64;
      v65[j] = 0;
    }
    ++v3;
  }
  while (v3 != 50);
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::GfMatrix4d::RemoveScaleShear@<Q0>(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE v26[128];
  _OWORD v27[8];
  __int128 v28[8];

  if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)this, v28, (uint64_t)v25, v27, (uint64_t)&v23, (uint64_t)v26, 1.0e-10))
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v27, 1);
    v13 = 0x3FF0000000000000;
    v14 = 0u;
    v15 = 0u;
    v16 = 0x3FF0000000000000;
    v17 = 0u;
    v18 = 0u;
    v19 = xmmword_20CA527E0;
    v20 = v23;
    v21 = v24;
    v22 = 0x3FF0000000000000;
    v4 = v27[5];
    *(_OWORD *)(a2 + 64) = v27[4];
    *(_OWORD *)(a2 + 80) = v4;
    v5 = v27[7];
    *(_OWORD *)(a2 + 96) = v27[6];
    *(_OWORD *)(a2 + 112) = v5;
    v6 = v27[1];
    *(_OWORD *)a2 = v27[0];
    *(_OWORD *)(a2 + 16) = v6;
    v7 = v27[3];
    *(_OWORD *)(a2 + 32) = v27[2];
    *(_OWORD *)(a2 + 48) = v7;
    result.n128_f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a2, (double *)&v13);
  }
  else
  {
    v9 = *((_OWORD *)this + 5);
    *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 4);
    *(_OWORD *)(a2 + 80) = v9;
    v10 = *((_OWORD *)this + 7);
    *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 6);
    *(_OWORD *)(a2 + 112) = v10;
    v11 = *((_OWORD *)this + 1);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_OWORD *)(a2 + 16) = v11;
    result = *((__n128 *)this + 2);
    v12 = *((_OWORD *)this + 3);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v12;
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  char *v6;
  double v7;
  int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  double v13;
  double v14;
  double v15;

  v1 = *((double *)this + 5);
  v2 = *((double *)this + 10);
  if (*(double *)this > v1)
    v3 = *(double *)this;
  else
    v3 = *((double *)this + 5);
  if (v3 <= v2)
    v4 = 2;
  else
    v4 = *(double *)this <= v1;
  v5 = *(double *)this + v1 + v2;
  v6 = (char *)this + 8 * (4 * v4);
  v7 = *(double *)&v6[8 * v4];
  if (v5 > v7)
    return (*((double *)this + 6) - *((double *)this + 9)) / (sqrt(v5 + *((double *)this + 15)) * 0.5 * 4.0);
  if ((_DWORD)v4 == 2)
    v9 = 0;
  else
    v9 = v4 + 1;
  v10 = ((int)v4 + 2) % 3u;
  v11 = (char *)this + 32 * v9;
  v12 = (char *)this + 32 * v10;
  v13 = sqrt(v7 - *(double *)&v11[8 * v9] - *(double *)&v12[8 * v10] + *((double *)this + 15)) * 0.5;
  *(&v15 + v4) = v13;
  v14 = v13 * 4.0;
  *(&v15 + v9) = (*(double *)&v6[8 * v9] + *(double *)&v11[8 * v4]) / v14;
  *(&v15 + v10) = (*(double *)&v12[8 * v4] + *(double *)&v6[8 * v10]) / v14;
  return v15;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  double v6;

  v5[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat(this);
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v6, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v5);
  return v6;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::DecomposeRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4d *a1, double *a2, double *a3, double *a4)
{
  float64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v11;
  uint64_t v12;
  uint64_t v13;

  v11.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation(a1);
  v11.f64[1] = v7;
  v12 = v8;
  v13 = v9;
  return pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v11, a2, a3, a4);
}

__n128 pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix@<Q0>(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v2 = this[1].n128_u64[0];
  v3 = this[3].n128_u64[0];
  v4 = this[5].n128_u64[0];
  *(__n128 *)a2 = *this;
  *(_QWORD *)(a2 + 16) = v2;
  *(__n128 *)(a2 + 24) = this[2];
  *(_QWORD *)(a2 + 40) = v3;
  result = this[4];
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, double a4)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
LABEL_2:
  v6 = 0;
  while (vabdd_f64(*(double *)((char *)this + v6), *(double *)((char *)a2 + v6)) < a4)
  {
    v6 += 8;
    if (v6 == 32)
    {
      v4 = v5 > 2;
      a2 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)a2 + 32);
      this = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 32);
      if (++v5 != 4)
        goto LABEL_2;
      return 1;
    }
  }
  return v4;
}

uint64_t *sub_20BF05FDC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BFE0, (char *)0x80, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF06098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(a1, a2);
  return a1;
}

void sub_20BF06114(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(uint64_t *result, uint64_t a2)
{
  double v2;
  uint64_t **v3;
  BOOL v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v2 = *(double *)(a2 + 16);
  if (*(double *)a2 <= v2)
  {
    v3 = (uint64_t **)result;
    if (*(double *)a2 != v2 || (*(_BYTE *)(a2 + 8) ? (v4 = *(_BYTE *)(a2 + 24) == 0) : (v4 = 1), !v4))
    {
      v5 = *(_OWORD *)(a2 + 16);
      v18 = *(_OWORD *)a2;
      v19 = v5;
      v7 = result + 1;
      v6 = (_QWORD *)result[1];
      if (v6)
      {
        v8 = result + 1;
        do
        {
          v9 = sub_20BF07720((uint64_t)(v6 + 4), (uint64_t)&v18);
          v10 = v6 + 1;
          if (!v9)
          {
            v10 = v6;
            v8 = v6;
          }
          v6 = (_QWORD *)*v10;
        }
        while (*v10);
        if (v8 != v7)
        {
          while (sub_20BF06DF4(&v18, (uint64_t)(v8 + 4)))
          {
            sub_20BF06E54((uint64_t)&v18, (uint64_t)(v8 + 4));
            v11 = (uint64_t *)v8[1];
            v12 = v8;
            if (v11)
            {
              do
              {
                v13 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v13 = (uint64_t *)v12[2];
                v4 = *v13 == (_QWORD)v12;
                v12 = v13;
              }
              while (!v4);
            }
            sub_20BE10B80(v3, v8);
            operator delete(v8);
            v8 = v13;
            if (v13 == v7)
              goto LABEL_32;
          }
          if (*(double *)&v19 == *((double *)v8 + 4) && (BYTE8(v19) || *((_BYTE *)v8 + 40)))
          {
            sub_20BF06E54((uint64_t)&v18, (uint64_t)(v8 + 4));
            v14 = (uint64_t *)v8[1];
            if (v14)
            {
              do
              {
                v7 = v14;
                v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              v15 = v8;
              do
              {
                v7 = (uint64_t *)v15[2];
                v4 = *v7 == (_QWORD)v15;
                v15 = v7;
              }
              while (!v4);
            }
            sub_20BE10B80(v3, v8);
            operator delete(v8);
          }
          else
          {
            v7 = v8;
          }
        }
      }
LABEL_32:
      if (v7 != *v3)
      {
        v16 = *v7;
        if (*v7)
        {
          do
          {
            v17 = v16;
            v16 = *(_QWORD *)(v16 + 8);
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = v7[2];
            v4 = *(_QWORD *)v17 == (_QWORD)v7;
            v7 = (uint64_t *)v17;
          }
          while (v4);
        }
        if (sub_20BF06DF4(&v18, v17 + 32)
          || *(double *)&v18 == *(double *)(v17 + 48) && (BYTE8(v18) || *(_BYTE *)(v17 + 56)))
        {
          sub_20BF06E54((uint64_t)&v18, v17 + 32);
          sub_20BE10B80(v3, (uint64_t *)v17);
          operator delete((void *)v17);
        }
      }
      return sub_20BF07E84(v3, (uint64_t)&v18, &v18);
    }
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  __int128 i;

  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  for (i = *a2; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BF06464(&i))
  {
    v3 = sub_20BF063D4((uint64_t *)&i);
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(a1, v3);
  }
  return a1;
}

void sub_20BF063BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20BF063D4(uint64_t *a1)
{
  uint64_t result;
  char *v3;
  char *v4;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v3 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v5[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v3, 0x2Fu);
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::G"
            "fInterval>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::GfInterval>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v4);
  }
  return result;
}

_QWORD *sub_20BF06464(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::GfInterval>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::GfInterval>"
            ", Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfMultiInterval::Hash(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20BF07CBC((uint64_t)&v2, *(_QWORD **)this, (_QWORD *)this + 1);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetBounds@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  int v8;
  int v9;
  BOOL v10;
  char v11;
  BOOL v13;

  if (this[2])
  {
    v2 = *this;
    v4 = this[1];
    ++this;
    v3 = v4;
    if (v4)
    {
      do
      {
        v5 = v3;
        v3 = *(_QWORD *)(v3 + 8);
      }
      while (v3);
    }
    else
    {
      do
      {
        v5 = this[2];
        v10 = *(_QWORD *)v5 == (_QWORD)this;
        this = (uint64_t *)v5;
      }
      while (v10);
    }
    v6 = *(double *)(v2 + 32);
    v7 = *(double *)(v5 + 48);
    v8 = *(unsigned __int8 *)(v2 + 40);
    v9 = *(unsigned __int8 *)(v5 + 56);
    *(double *)a2 = v6;
    v10 = fabs(v6) == INFINITY || v8 == 0;
    v11 = !v10;
    *(_BYTE *)(a2 + 8) = v11;
    *(double *)(a2 + 16) = v7;
    v13 = fabs(v7) != INFINITY && v9 != 0;
    *(_BYTE *)(a2 + 24) = v13;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  char *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  double v10;
  double v11;

  v4 = pxrInternal__aapl__pxrReserved__::GfMultiInterval::lower_bound(this, a2);
  if ((char *)this + 8 != v4)
  {
    v5 = *((double *)v4 + 4);
    if (v5 < a2 || v5 == a2 && v4[40])
    {
      v6 = *((double *)v4 + 6);
      if (v6 > a2 || v6 == a2 && v4[56])
        return 1;
    }
  }
  if (*(char **)this == v4)
    return 0;
  v7 = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
  {
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
    do
    {
      v8 = *((_QWORD *)v4 + 2);
      v9 = *(_QWORD *)v8 == (_QWORD)v4;
      v4 = (char *)v8;
    }
    while (v9);
  }
  if (((v10 = *(double *)(v8 + 32), v10 < a2) || v10 == a2 && *(_BYTE *)(v8 + 40))
    && ((v11 = *(double *)(v8 + 48), v11 > a2) || v11 == a2 && *(_BYTE *)(v8 + 56)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

char *pxrInternal__aapl__pxrReserved__::GfMultiInterval::lower_bound(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  char *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  double v7;
  BOOL v8;
  double v9;
  BOOL v10;

  v7 = a2;
  v8 = fabs(a2) != INFINITY;
  v9 = a2;
  v10 = v8;
  v2 = (char *)this + 8;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    do
    {
      v4 = sub_20BF07720((uint64_t)(v3 + 4), (uint64_t)&v7);
      v5 = v3 + 1;
      if (!v4)
      {
        v5 = v3;
        v2 = (char *)v3;
      }
      v3 = (_QWORD *)*v5;
    }
    while (*v5);
  }
  return v2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(_QWORD *a1, uint64_t a2)
{
  double v2;
  BOOL v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(double *)(a2 + 16);
  if (*(double *)a2 > v2)
    return 0;
  if (*(double *)a2 == v2)
  {
    v5 = !*(_BYTE *)(a2 + 8) || *(_BYTE *)(a2 + 24) == 0;
    if (v5)
      return 0;
  }
  v6 = a1 + 1;
  v7 = (_QWORD *)a1[1];
  if (v7)
  {
    v8 = a1 + 1;
    do
    {
      v9 = sub_20BF07720((uint64_t)(v7 + 4), a2);
      v10 = v7 + 1;
      if (!v9)
      {
        v10 = v7;
        v8 = v7;
      }
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v8 != v6)
    {
      v6 = v8;
      if (sub_20BF0681C((__int128 *)v8 + 2, a2))
        return 1;
    }
  }
  if (v6 == (uint64_t *)*a1)
    return 0;
  v11 = *v6;
  if (*v6)
  {
    do
    {
      v12 = v11;
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = v6[2];
      v5 = *(_QWORD *)v12 == (_QWORD)v6;
      v6 = (uint64_t *)v12;
    }
    while (v5);
  }
  return sub_20BF0681C((__int128 *)(v12 + 32), a2);
}

BOOL sub_20BF0681C(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v5;
  __int128 v6;

  v3 = a1[1];
  v5 = *a1;
  v6 = v3;
  sub_20BF07BAC((uint64_t)&v5, a2);
  return *(double *)&v5 == *(double *)a2
      && BYTE8(v5) == *(unsigned __int8 *)(a2 + 8)
      && *(double *)&v6 == *(double *)(a2 + 16)
      && BYTE8(v6) == *(unsigned __int8 *)(a2 + 24);
}

BOOL pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v6;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v7;

  if (!*((_QWORD *)a2 + 2))
    return 0;
  v6 = *(const pxrInternal__aapl__pxrReserved__::GfMultiInterval **)a2;
  v7 = (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)((char *)a2 + 8);
  if (v6 == (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)((char *)a2 + 8))
    return 1;
  do
  {
    v3 = sub_20BF06918(&v6);
    v4 = pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(this, v3);
    if (!v4)
      break;
    sub_20BF069A4(&v6);
  }
  while (v6 != v7);
  return v4;
}

uint64_t sub_20BF06918(_QWORD *a1)
{
  char *v2;
  char *v3;
  _QWORD v4[4];
  char v5;
  int v6;

  if (*a1 == a1[1])
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v4[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::GfMultiInterv"
            "al>::operator*() [T = const pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v3);
  }
  return *a1 + 32;
}

_QWORD *sub_20BF069A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;
  int v9;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":GfMultiInterval>::operator++() [T = const pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    v8 = 0;
    v9 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

char *pxrInternal__aapl__pxrReserved__::GfMultiInterval::upper_bound(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  char *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  double v7;
  BOOL v8;
  double v9;
  BOOL v10;

  v7 = a2;
  v8 = fabs(a2) != INFINITY;
  v9 = a2;
  v10 = v8;
  v2 = (char *)this + 8;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    do
    {
      v4 = sub_20BF07720((uint64_t)&v7, (uint64_t)(v3 + 4));
      v5 = v3 + 1;
      if (v4)
      {
        v5 = v3;
        v2 = (char *)v3;
      }
      v3 = (_QWORD *)*v5;
    }
    while (*v5);
  }
  return v2;
}

char *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetNextNonContainingInterval(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  char *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  double v7;
  char v8;
  double v9;
  BOOL v10;

  v7 = a2;
  v8 = 0;
  v9 = a2;
  v10 = fabs(a2) != INFINITY;
  v2 = (char *)this + 8;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    do
    {
      v4 = sub_20BF07720((uint64_t)&v7, (uint64_t)(v3 + 4));
      v5 = v3 + 1;
      if (v4)
      {
        v5 = v3;
        v2 = (char *)v3;
      }
      v3 = (_QWORD *)*v5;
    }
    while (*v5);
  }
  return v2;
}

double *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetPriorNonContainingInterval(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2, uint64_t a3, char *a4)
{
  double *v6;
  _QWORD *v7;
  double *v8;
  int v9;
  _QWORD *v10;
  double *v11;
  double *v12;
  BOOL v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  _BYTE v20[7];
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  _DWORD v26[3];

  v21 = *(char **)&a2;
  LOBYTE(v22) = fabs(a2) != INFINITY;
  v23 = *(_QWORD *)&a2;
  LOBYTE(v24) = (_BYTE)v22;
  v6 = (double *)((char *)this + 8);
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (double *)((char *)this + 8);
  if (v7)
  {
    v8 = (double *)((char *)this + 8);
    do
    {
      v9 = sub_20BF07720((uint64_t)(v7 + 4), (uint64_t)&v21);
      v10 = v7 + 1;
      if (!v9)
      {
        v10 = v7;
        v8 = (double *)v7;
      }
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  if (v8 != *(double **)this)
  {
    v11 = *(double **)v8;
    if (*(_QWORD *)v8)
    {
      do
      {
        v12 = v11;
        v11 = (double *)*((_QWORD *)v11 + 1);
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (double *)*((_QWORD *)v8 + 2);
        v13 = *(_QWORD *)v12 == (_QWORD)v8;
        v8 = v12;
      }
      while (v13);
    }
    v14 = v12[4];
    if ((v14 < a2 || v14 == a2 && *((_BYTE *)v12 + 40))
      && ((v15 = v12[6], v15 > a2) || v15 == a2 && *((_BYTE *)v12 + 56)))
    {
      if (v12 != *(double **)this)
      {
        v16 = *(double **)v12;
        if (*(_QWORD *)v12)
        {
          do
          {
            v6 = v16;
            v16 = (double *)*((_QWORD *)v16 + 1);
          }
          while (v16);
        }
        else
        {
          do
          {
            v6 = (double *)*((_QWORD *)v12 + 2);
            v13 = *(_QWORD *)v6 == (_QWORD)v12;
            v12 = v6;
          }
          while (v13);
        }
        v17 = v6[4];
        if (v17 < a2 || v17 == a2 && *((_BYTE *)v6 + 40))
        {
          v18 = v6[6];
          if (v18 > a2 || v18 == a2 && *((_BYTE *)v6 + 56))
          {
            v21 = "gf/multiInterval.cpp";
            v22 = "GetPriorNonContainingInterval";
            v23 = 166;
            v24 = "GfMultiInterval::const_iterator pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetPriorNonContaini"
                  "ngInterval(double) const";
            v25 = 0;
            v26[0] = *(_DWORD *)v20;
            *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)&v20[3];
            *(_DWORD *)((char *)&v26[1] + 3) = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v21, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a4, "!i->Contains(x)");
          }
        }
      }
    }
    else
    {
      return v12;
    }
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetContainingInterval(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  char *NextNonContainingInterval;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;
  double v9;
  double v10;

  NextNonContainingInterval = pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetNextNonContainingInterval(this, a2);
  if (*(char **)this == NextNonContainingInterval)
    return (uint64_t)this + 8;
  v5 = (uint64_t)NextNonContainingInterval;
  v6 = *(_QWORD *)NextNonContainingInterval;
  if (*(_QWORD *)NextNonContainingInterval)
  {
    do
    {
      result = v6;
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
  }
  else
  {
    do
    {
      result = *(_QWORD *)(v5 + 16);
      v8 = *(_QWORD *)result == v5;
      v5 = result;
    }
    while (v8);
  }
  v9 = *(double *)(result + 32);
  if (v9 >= a2 && (v9 != a2 || !*(_BYTE *)(result + 40)))
    return (uint64_t)this + 8;
  v10 = *(double *)(result + 48);
  if (v10 <= a2 && (v10 != a2 || !*(_BYTE *)(result + 56)))
    return (uint64_t)this + 8;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(uint64_t *this, const pxrInternal__aapl__pxrReserved__::GfMultiInterval **a2)
{
  uint64_t *v2;
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v4;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v5;

  v4 = *a2;
  v5 = (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)(a2 + 1);
  if (v4 != (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)(a2 + 1))
  {
    v2 = this;
    do
    {
      v3 = sub_20BF06918(&v4);
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(v2, v3);
      this = sub_20BF069A4(&v4);
    }
    while (v4 != v5);
  }
  return this;
}

BOOL sub_20BF06DF4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v4;
  __int128 v5;

  v2 = a1[1];
  v4 = *a1;
  v5 = v2;
  sub_20BF07BAC((uint64_t)&v4, a2);
  if (*(double *)&v4 > *(double *)&v5)
    return 0;
  if (*(double *)&v4 != *(double *)&v5)
    return 1;
  if (!BYTE8(v4))
    return 0;
  return BYTE8(v5) != 0;
}

uint64_t sub_20BF06E54(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  double v5;
  double v6;
  char v7;
  double v8;

  v2 = *(double *)result;
  v3 = *(double *)(result + 16);
  if (*(double *)result > v3 || *(double *)result == v3 && (!*(_BYTE *)(result + 8) || !*(_BYTE *)(result + 24)))
  {
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    goto LABEL_3;
  }
  v5 = *(double *)a2;
  v6 = *(double *)(a2 + 16);
  if (*(double *)a2 <= v6 && (*(double *)a2 != v6 || *(_BYTE *)(a2 + 8) && *(_BYTE *)(a2 + 24)))
  {
    if (v2 <= v5)
    {
      if (v2 != v5)
      {
LABEL_18:
        v8 = *(double *)(a2 + 16);
        if (v3 >= v8)
        {
          if (v3 != v8)
            return result;
          v4 = *(_BYTE *)(result + 24) | *(_BYTE *)(a2 + 24);
          goto LABEL_4;
        }
        *(double *)(result + 16) = v8;
LABEL_3:
        v4 = *(_BYTE *)(a2 + 24);
LABEL_4:
        *(_BYTE *)(result + 24) = v4;
        return result;
      }
      v7 = *(_BYTE *)(result + 8) | *(_BYTE *)(a2 + 8);
    }
    else
    {
      *(double *)result = v5;
      v7 = *(_BYTE *)(a2 + 8);
    }
    *(_BYTE *)(result + 8) = v7;
    goto LABEL_18;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::GfMultiInterval::Remove(_QWORD *this, const pxrInternal__aapl__pxrReserved__::GfMultiInterval **a2)
{
  uint64_t v2;
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v4;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v5;

  v4 = *a2;
  v5 = (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)(a2 + 1);
  if (v4 != (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)(a2 + 1))
  {
    v2 = (uint64_t)this;
    do
    {
      v3 = sub_20BF06918(&v4);
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::Remove(v2, v3);
      this = sub_20BF069A4(&v4);
    }
    while (v4 != v5);
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::GfMultiInterval::Remove(uint64_t a1, uint64_t a2)
{
  double v2;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v2 = *(double *)(a2 + 16);
  if (*(double *)a2 <= v2)
  {
    if (*(double *)a2 != v2 || (*(_BYTE *)(a2 + 8) ? (v5 = *(_BYTE *)(a2 + 24) == 0) : (v5 = 1), !v5))
    {
      v6 = (_QWORD *)(a1 + 8);
      v7 = *(_QWORD **)(a1 + 8);
      if (v7)
      {
        v8 = a1 + 8;
        do
        {
          v9 = sub_20BF07720((uint64_t)(v7 + 4), a2);
          v10 = v7 + 1;
          if (!v9)
          {
            v10 = v7;
            v8 = (uint64_t)v7;
          }
          v7 = (_QWORD *)*v10;
        }
        while (*v10);
        if ((_QWORD *)v8 != v6)
        {
          do
          {
            if (!sub_20BF06DF4((__int128 *)a2, v8 + 32))
              break;
            v11 = *(_QWORD **)(v8 + 8);
            v12 = (_QWORD *)v8;
            if (v11)
            {
              do
              {
                v13 = v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v13 = (_QWORD *)v12[2];
                v5 = *v13 == (_QWORD)v12;
                v12 = v13;
              }
              while (!v5);
            }
            sub_20BF070DC(v8, a2, (uint64_t **)a1);
            v8 = (uint64_t)v13;
          }
          while (v13 != v6);
        }
        v14 = (_QWORD *)*v6;
        if (*v6)
        {
          do
          {
            v15 = sub_20BF07720(a2, (uint64_t)(v14 + 4));
            v16 = v14 + 1;
            if (v15)
            {
              v16 = v14;
              v6 = v14;
            }
            v14 = (_QWORD *)*v16;
          }
          while (*v16);
        }
      }
      if (v6 != *(_QWORD **)a1)
      {
        v17 = (_QWORD *)*v6;
        if (*v6)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)v17[1];
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v6[2];
            v5 = *v18 == (_QWORD)v6;
            v6 = v18;
          }
          while (v5);
        }
        sub_20BF070DC((uint64_t)v18, a2, (uint64_t **)a1);
      }
    }
  }
}

void sub_20BF070DC(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  double v6;
  double v7;
  int v8;
  int v9;
  _BOOL4 v11;
  _BOOL4 v13;
  double v14;
  double v15;
  int v16;
  int v17;
  _BOOL4 v19;
  _BOOL4 v21;
  int v22;
  __int128 v25;
  double v26;
  BOOL v27;
  __int128 v28;
  double v29;
  BOOL v30;

  if (sub_20BF06DF4((__int128 *)(a1 + 32), a2))
  {
    v6 = *(double *)(a1 + 32);
    v7 = *(double *)a2;
    v8 = *(unsigned __int8 *)(a1 + 40);
    v9 = *(unsigned __int8 *)(a2 + 8);
    *(double *)&v28 = v6;
    v11 = fabs(v6) != INFINITY && v8 != 0;
    BYTE8(v28) = v11;
    v29 = v7;
    v13 = fabs(v7) != INFINITY && v9 == 0;
    v30 = v13;
    v14 = *(double *)(a2 + 16);
    v15 = *(double *)(a1 + 48);
    v16 = *(unsigned __int8 *)(a2 + 24);
    v17 = *(unsigned __int8 *)(a1 + 56);
    *(double *)&v25 = v14;
    v19 = fabs(v14) != INFINITY && v16 == 0;
    BYTE8(v25) = v19;
    v26 = v15;
    v21 = fabs(v15) != INFINITY && v17 != 0;
    v27 = v21;
    if (v6 <= v7)
    {
      v22 = v11 && v13;
      if (v6 != v7 || v22 != 0)
        sub_20BF07F94(a3, (_QWORD *)a1, (uint64_t)&v28, &v28);
    }
    if (v14 <= v15 && (v14 != v15 || v19 && v21))
      sub_20BF07F94(a3, (_QWORD *)a1, (uint64_t)&v25, &v25);
    sub_20BE10B80(a3, (uint64_t *)a1);
    operator delete((void *)a1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetComplement@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t *result;
  uint64_t *v5;
  double v6;
  int v7;
  _BOOL4 v9;
  double v10;
  int v11;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  double v17;
  BOOL v18;

  *(_QWORD *)(a2 + 8) = 0;
  v3 = (_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  BYTE8(v16) = 0;
  v17 = INFINITY;
  v18 = 0;
  v5 = *this;
  result = (uint64_t *)(this + 1);
  v14 = v5;
  v15 = result;
  *(_QWORD *)&v16 = 0xFFF0000000000000;
  while (v14 != v15)
  {
    v6 = *(double *)(*sub_20BF073A0(&v14) + 32);
    v7 = *(unsigned __int8 *)(*sub_20BF073A0(&v14) + 40);
    v9 = fabs(v6) != INFINITY && v7 == 0;
    v17 = v6;
    v18 = v9;
    if (*(double *)&v16 <= v6)
    {
      if (*(double *)&v16 != v6)
        goto LABEL_14;
      if (!BYTE8(v16))
        v9 = 0;
      if (v9)
LABEL_14:
        sub_20BF07F94((uint64_t **)a2, v3, (uint64_t)&v16, &v16);
    }
    *(_QWORD *)&v16 = 0xFFF0000000000000;
    BYTE8(v16) = 0;
    v17 = INFINITY;
    v18 = 0;
    v10 = *(double *)(*sub_20BF073A0(&v14) + 48);
    v11 = *(unsigned __int8 *)(*sub_20BF073A0(&v14) + 56);
    v13 = fabs(v10) != INFINITY && v11 == 0;
    *(double *)&v16 = v10;
    BYTE8(v16) = v13;
    result = sub_20BF07428(&v14);
  }
  if (*(double *)&v16 <= v17 && (*(double *)&v16 != v17 || BYTE8(v16) && v18))
    return sub_20BF07F94((uint64_t **)a2, v3, (uint64_t)&v16, &v16);
  return result;
}

void sub_20BF07384(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF073A0(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrReserved__::GfIn"
            "terval>>::operator->() [T = const std::set<pxrInternal__aapl__pxrReserved__::GfInterval>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

_QWORD *sub_20BF07428(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;
  int v9;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrRe"
            "served__::GfInterval>>::operator++() [T = const std::set<pxrInternal__aapl__pxrReserved__::GfInterval>, Reverse = false]";
    v8 = 0;
    v9 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, uint64_t **a2)
{
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v3[3];

  pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetComplement(a2, (uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::Remove(this, v3);
  sub_20BE6100C((uint64_t)v3, (_QWORD *)v3[1]);
}

void sub_20BF07518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BE6100C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect(pxrInternal__aapl__pxrReserved__::GfMultiInterval *a1, uint64_t a2)
{
  uint64_t *v3[3];

  pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval((uint64_t *)v3, a2);
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect(a1, v3);
  sub_20BE6100C((uint64_t)v3, v3[1]);
}

void sub_20BF07574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BE6100C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMultiInterval::_AssertInvariants(uint64_t this, uint64_t a2, char *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  __int128 *v5;
  __int128 *v6;
  double v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  const char *v12;
  _BYTE v13[7];
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  _BYTE v19[7];
  int v20;

  v3 = (_QWORD *)(this + 8);
  v4 = *(_QWORD **)this;
  if (*(_QWORD *)this != this + 8)
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)(v4 + 4);
      v7 = *((double *)v4 + 4);
      v8 = *((double *)v4 + 6);
      if (v7 > v8 || v7 == v8 && (!*((_BYTE *)v4 + 40) || !*((_BYTE *)v4 + 56)))
      {
        v14 = "gf/multiInterval.cpp";
        v15 = "_AssertInvariants";
        v16 = 341;
        v17 = "void pxrInternal__aapl__pxrReserved__::GfMultiInterval::_AssertInvariants() const";
        v18 = 0;
        *(_DWORD *)v19 = *(_DWORD *)v13;
        *(_DWORD *)&v19[3] = *(_DWORD *)&v13[3];
        v20 = 4;
        v12 = "!i->IsEmpty()";
        goto LABEL_20;
      }
      if (v5)
      {
        if ((sub_20BF07720((uint64_t)v5, (uint64_t)(v4 + 4)) & 1) == 0)
        {
          v14 = "gf/multiInterval.cpp";
          v15 = "_AssertInvariants";
          v16 = 345;
          v17 = "void pxrInternal__aapl__pxrReserved__::GfMultiInterval::_AssertInvariants() const";
          v18 = 0;
          v20 = 4;
          v12 = "*last < *i";
          goto LABEL_20;
        }
        this = sub_20BF06DF4(v5, (uint64_t)(v4 + 4));
        if ((_DWORD)this)
        {
          v14 = "gf/multiInterval.cpp";
          v15 = "_AssertInvariants";
          v16 = 346;
          v17 = "void pxrInternal__aapl__pxrReserved__::GfMultiInterval::_AssertInvariants() const";
          v18 = 0;
          v20 = 4;
          v12 = "!last->Intersects(*i)";
LABEL_20:
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v14, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, v12);
        }
      }
      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v11 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v5 = v6;
      v4 = v10;
    }
    while (v10 != v3);
  }
  return this;
}

uint64_t sub_20BF07720(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  BOOL v4;
  int v5;
  int v6;
  BOOL v8;
  unsigned int v9;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(double *)a1 < *(double *)a2;
  if (*(double *)a1 != *(double *)a2)
    return v4;
  v5 = *(unsigned __int8 *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == v6)
  {
    v2 = *(double *)(a1 + 16);
    v3 = *(double *)(a2 + 16);
    v4 = v2 < v3;
    if (v2 == v3)
    {
      v5 = *(unsigned __int8 *)(a1 + 24);
      v6 = *(unsigned __int8 *)(a2 + 24);
      if (v5 == v6)
        return 0;
      goto LABEL_9;
    }
    return v4;
  }
LABEL_9:
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 0;
  v9 = v8;
  if (v2 >= v3)
    return v9;
  else
    return 1;
}

void pxrInternal__aapl__pxrReserved__::GfMultiInterval::ArithmeticAdd(uint64_t *a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  double v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD **v13;
  _QWORD *v14[2];

  v14[0] = 0;
  v14[1] = 0;
  v13 = v14;
  v11 = *a1;
  v12 = a1 + 1;
  while ((uint64_t *)v11 != v12)
  {
    v4 = (__int128 *)sub_20BF078A0(&v11);
    v5 = v4[1];
    v9 = *v4;
    v10 = v5;
    v6 = *(double *)(a2 + 16);
    if (*(double *)a2 > v6)
      goto LABEL_10;
    v7 = *(_BYTE *)(a2 + 8);
    if (*(double *)a2 != v6)
    {
      v8 = *(_BYTE *)(a2 + 24);
LABEL_9:
      *(double *)&v9 = *(double *)a2 + *(double *)&v9;
      *(double *)&v10 = v6 + *(double *)&v10;
      BYTE8(v9) &= v7;
      BYTE8(v10) &= v8;
      goto LABEL_10;
    }
    if (*(_BYTE *)(a2 + 8) && *(_BYTE *)(a2 + 24))
    {
      v8 = 1;
      v7 = 1;
      goto LABEL_9;
    }
LABEL_10:
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add((uint64_t *)&v13, (uint64_t)&v9);
    sub_20BF0792C(&v11);
  }
  sub_20BF07C64(a1, (uint64_t)&v13);
  sub_20BE6100C((uint64_t)&v13, v14[0]);
}

void sub_20BF07884(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1 - 40, *(_QWORD **)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20BF078A0(_QWORD *a1)
{
  char *v2;
  char *v3;
  _QWORD v4[4];
  char v5;
  int v6;

  if (*a1 == a1[1])
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v4[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::GfMultiInterval>::o"
            "perator*() [T = pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v3);
  }
  return *a1 + 32;
}

_QWORD *sub_20BF0792C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;
  int v9;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::GfMul"
            "tiInterval>::operator++() [T = pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    v8 = 0;
    v9 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t *sub_20BF07AAC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFF0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51BFF0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF07B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF07BAC(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  char v6;
  double v7;
  char v8;

  v2 = *(double *)result;
  v3 = *(double *)(result + 16);
  if (*(double *)result > v3 || *(double *)result == v3 && (!*(_BYTE *)(result + 8) || !*(_BYTE *)(result + 24)))
    return result;
  v4 = *(double *)a2;
  v5 = *(double *)(a2 + 16);
  if (*(double *)a2 > v5 || *(double *)a2 == v5 && (!*(_BYTE *)(a2 + 8) || !*(_BYTE *)(a2 + 24)))
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    return result;
  }
  if (v2 < v4)
  {
    *(double *)result = v4;
    v6 = *(_BYTE *)(a2 + 8);
LABEL_15:
    *(_BYTE *)(result + 8) = v6;
    goto LABEL_16;
  }
  if (v2 == v4)
  {
    v6 = *(_BYTE *)(result + 8) & *(_BYTE *)(a2 + 8);
    goto LABEL_15;
  }
LABEL_16:
  v7 = *(double *)(a2 + 16);
  if (v3 <= v7)
  {
    if (v3 != v7)
      return result;
    v8 = *(_BYTE *)(result + 24) & *(_BYTE *)(a2 + 24);
  }
  else
  {
    *(double *)(result + 16) = v7;
    v8 = *(_BYTE *)(a2 + 24);
  }
  *(_BYTE *)(result + 24) = v8;
  return result;
}

uint64_t *sub_20BF07C64(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

uint64_t sub_20BF07CBC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a2 != a3)
  {
    v4 = result;
    do
    {
      v5 = (_QWORD *)a2[1];
      v6 = a2;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      result = sub_20BF07D34(v4, (uint64_t)(a2 + 4));
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

uint64_t sub_20BF07D34(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF07DB0((uint64_t)&v5, a2, a2 + 16);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_20BF07DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  unint64_t v4;

  v3 = *(double *)a2;
  if (*(double *)a2 == 0.0)
    v3 = 0.0;
  v4 = bswap64(0x9E3779B97F4A7C55* (*(unsigned __int8 *)(a2 + 8)+ ((*(_QWORD *)&v3+ *(unsigned __int8 *)(a2 + 8)+ (*(_QWORD *)&v3 + *(unsigned __int8 *)(a2 + 8))* (*(_QWORD *)&v3 + (unint64_t)*(unsigned __int8 *)(a2 + 8))) >> 1)));
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20BF07E1C(a1, a3);
}

uint64_t sub_20BF07E1C(uint64_t result, uint64_t a2)
{
  double v2;
  unint64_t v3;

  v2 = *(double *)a2;
  if (*(double *)a2 == 0.0)
    v2 = 0.0;
  v3 = bswap64(0x9E3779B97F4A7C55* (*(unsigned __int8 *)(a2 + 8)+ ((*(_QWORD *)&v2+ *(unsigned __int8 *)(a2 + 8)+ (*(_QWORD *)&v2 + *(unsigned __int8 *)(a2 + 8))* (*(_QWORD *)&v2 + (unint64_t)*(unsigned __int8 *)(a2 + 8))) >> 1)));
  if (*(_BYTE *)(result + 8))
    v3 += (*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  return result;
}

uint64_t *sub_20BF07E84(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v10;

  v5 = (void **)sub_20BF07F04((uint64_t)a1, &v10, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    sub_20BDDE1B4(a1, v10, v7, v6);
  }
  return v6;
}

_QWORD *sub_20BF07F04(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_20BF07720(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_20BF07720(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *sub_20BF07F94(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_20BF08018(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_20BDDE1B4(a1, v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_20BF08018(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_20BF07720(a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_20BF07720((uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_20BF07F04((uint64_t)a1, a3, a5);
  }
  if (sub_20BF07720((uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_20BF07720(a5, (uint64_t)(v15 + 4)))
        return sub_20BF07F04((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

double pxrInternal__aapl__pxrReserved__::GfPlane::Set(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = sqrt(v3 * v3 + v4 * v4 + v5 * v5);
  v7 = 1.0 / v6;
  v8 = v6 <= 1.0e-10;
  v9 = 1.0e10;
  if (!v8)
    v9 = v7;
  v10 = v3 * v9;
  v11 = v4 * v9;
  v12 = v5 * v9;
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v12;
  result = *a3 * v10 + v11 * a3[1] + v12 * a3[2];
  a1[3] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfPlane::Set(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double result;

  v4 = a2[1];
  v5 = *a3 - *a2;
  v6 = a3[1] - v4;
  v7 = a2[2];
  v8 = a3[2] - v7;
  v9 = *a4 - *a2;
  v10 = a4[1] - v4;
  v11 = a4[2] - v7;
  v12 = v6 * v11 - v8 * v10;
  v13 = v8 * v9 - v5 * v11;
  v14 = v5 * v10 - v6 * v9;
  v15 = sqrt(v14 * v14 + v12 * v12 + v13 * v13);
  v16 = 1.0 / v15;
  v17 = v15 <= 1.0e-10;
  v18 = 1.0e10;
  if (!v17)
    v18 = v16;
  v19 = v13 * v18;
  v20 = v14 * v18;
  *a1 = v12 * v18;
  a1[1] = v19;
  a1[2] = v20;
  result = v20 * a2[2] + v19 * a2[1] + *a2 * (v12 * v18);
  a1[3] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfPlane::Set(double *a1, uint64_t a2)
{
  uint64_t i;
  double result;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  for (i = 0; i != 3; ++i)
    a1[i] = *(double *)(a2 + i * 8);
  result = -*(double *)(a2 + 24);
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  v8 = 1.0 / v7;
  if (v7 <= 1.0e-10)
    v8 = 1.0e10;
  *a1 = v4 * v8;
  a1[1] = v5 * v8;
  a1[2] = v6 * v8;
  a1[3] = result;
  if (v7 != 0.0)
  {
    result = result / v7;
    a1[3] = result;
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfPlane::GetEquation(pxrInternal__aapl__pxrReserved__::GfPlane *this)
{
  return *(double *)this;
}

pxrInternal__aapl__pxrReserved__::GfPlane *pxrInternal__aapl__pxrReserved__::GfPlane::Transform(pxrInternal__aapl__pxrReserved__::GfPlane *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  const double *v3;
  float64x2_t v4;
  double v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  _OWORD v10[8];
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)a2, 0, 0.0, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v10, (uint64_t)&v11);
  v3 = (const double *)this;
  v4 = vld1q_dup_f64(v3++);
  v5 = *((double *)this + 2);
  v6 = *((double *)this + 3);
  v7 = vsubq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v4, v11), vmulq_n_f64(v13, *v3)), vmulq_n_f64(v15, v5)), vmulq_n_f64(v17, v6));
  v8 = vsubq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v4, v12), vmulq_n_f64(v14, *v3)), vmulq_n_f64(v16, v5)), vmulq_n_f64(v18, v6));
  v10[0] = v7;
  v10[1] = v8;
  pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)this, (uint64_t)v10);
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::GfPlane::IntersectsPositiveHalfSpace(uint64_t a1, double *a2)
{
  uint64_t v3;
  double v4;
  double v5;
  double *v6;

  if (*a2 > a2[3] || a2[1] > a2[4] || a2[2] > a2[5])
    return 0;
  v3 = 0;
  v4 = 0.0;
  do
  {
    v5 = *(double *)(a1 + v3 * 8);
    v6 = &a2[v3];
    if (v5 >= 0.0)
      v6 = &a2[v3 + 3];
    v4 = v4 + v5 * *v6;
    ++v3;
  }
  while (v3 != 3);
  return v4 >= *(double *)(a1 + 24);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFitPlaneToPoints(double **a1, double *a2)
{
  double *v2;
  double *v3;
  unint64_t v4;
  uint64_t result;
  double v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double Determinant;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double Inverse;
  double v41;
  double v42;
  double v43;
  double v44;
  _QWORD v45[4];
  _QWORD v46[4];
  _QWORD v47[4];
  char *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  char v52;

  v3 = *a1;
  v2 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (v2 - *a1);
  if (v4 < 3)
  {
    v48 = "gf/plane.cpp";
    v49 = "GfFitPlaneToPoints";
    v50 = 123;
    v51 = "BOOL pxrInternal__aapl__pxrReserved__::GfFitPlaneToPoints(const std::vector<GfVec3d> &, GfPlane *)";
    v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Need three points to correctly fit a plane");
    return 0;
  }
  if (v3 == v2)
  {
    v20 = 0.0;
    v14 = 1.0 / (double)v4 * 0.0;
    v13 = v14;
    v12 = v14;
LABEL_12:
    v19 = 0.0;
    v18 = 0.0;
    v17 = 0.0;
    v16 = 0.0;
    v15 = 0.0;
    goto LABEL_13;
  }
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = *a1;
  do
  {
    v7 = v7 + *v10;
    v8 = v8 + v10[1];
    v9 = v9 + v10[2];
    v10 += 3;
  }
  while (v10 != v2);
  v11 = 1.0 / (double)v4;
  v12 = v11 * v7;
  v13 = v11 * v8;
  v14 = v11 * v9;
  if (v3 == v2)
  {
    v20 = 0.0;
    goto LABEL_12;
  }
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  do
  {
    v21 = *v3 - v12;
    v22 = v3[1] - v13;
    v23 = v3[2] - v14;
    v15 = v15 + v21 * v21;
    v16 = v16 + v21 * v22;
    v20 = v20 + v21 * v23;
    v19 = v19 + v22 * v22;
    v18 = v18 + v22 * v23;
    v17 = v17 + v23 * v23;
    v3 += 3;
  }
  while (v3 != v2);
LABEL_13:
  v48 = *(char **)&v19;
  v49 = *(const char **)&v18;
  v50 = *(_QWORD *)&v18;
  v51 = *(const char **)&v17;
  *(double *)v47 = v15;
  *(double *)&v47[1] = v20;
  *(double *)&v47[2] = v20;
  *(double *)&v47[3] = v17;
  *(double *)v46 = v15;
  *(double *)&v46[1] = v16;
  *(double *)&v46[2] = v16;
  *(double *)&v46[3] = v19;
  Determinant = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetDeterminant((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)&v48);
  v44 = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetDeterminant((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)v47);
  v25 = fabs(v44);
  v26 = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetDeterminant((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)v46);
  v27 = fabs(v26);
  if (Determinant == 0.0 || (v28 = fabs(Determinant), v28 <= v25) || v28 <= v27)
  {
    if (v44 == 0.0 || v25 <= v27)
    {
      result = 0;
      if (v26 == 0.0)
        return result;
      Inverse = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetInverse((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)v46, 0, 0.0);
      v35 = -(v18 * v41) - v20 * Inverse;
      v31 = -(v18 * v42) - v20 * v43;
      v34 = 1.0;
    }
    else
    {
      v36 = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetInverse((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)v47, 0, 0.0);
      v35 = -(v18 * v37) - v16 * v36;
      v34 = -(v18 * v38) - v16 * v39;
      v31 = 1.0;
    }
  }
  else
  {
    v29 = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetInverse((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)&v48, 0, 0.0);
    v31 = -(v20 * v30) - v16 * v29;
    v34 = -(v20 * v32) - v16 * v33;
    v35 = 1.0;
  }
  *(double *)v45 = v35;
  *(double *)&v45[1] = v31;
  *(double *)&v45[2] = v34;
  *(double *)&v45[3] = -(v12 * v35 + v13 * v31 + v14 * v34);
  pxrInternal__aapl__pxrReserved__::GfPlane::Set(a2, (uint64_t)v45);
  return 1;
}

uint64_t *sub_20BF08818()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C000, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C000, (char *)0x20, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF088D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t result;
  float64x2_t v3;

  result = vcvtq_f64_f32(*a2);
  v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

{
  float64x2_t result;
  float64x2_t v3;

  result = vcvtq_f64_f32(*a2);
  v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(double *a1, unsigned __int16 *a2)
{
  double result;

  *a1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  a1[1] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  a1[2] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  a1[3] = result;
  return result;
}

{
  double result;

  *a1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  a1[1] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  a1[2] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  a1[3] = result;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(double *this, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = *this;
  v4 = this[1];
  v5 = this[2];
  v6 = this[3];
  v7 = sqrt(v3 * v3 + v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 >= a2)
  {
    *this = v3 * (1.0 / v7);
    this[1] = v4 * (1.0 / v7);
    this[2] = v5 * (1.0 / v7);
    this[3] = v6 / v7;
  }
  else
  {
    *this = 0.0;
    this[1] = 0.0;
    this[2] = 0.0;
    this[3] = 1.0;
  }
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = *a1 * *a1 + v2 * v2 + v3 * v3;
  v6 = a2[1];
  v7 = a2[2];
  v8 = *a1 * *a2 + v2 * v6 + v3 * v7;
  return 1.0 / (v4 * v4 + v5) * ((v4 + v4) * (v2 * v7 - v3 * v6) + *a2 * (v4 * v4 - v5) + *a1 * (v8 + v8));
}

double pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;

  v3 = a1[2];
  v2 = a1[3];
  v5 = a2[2];
  v4 = a2[3];
  v6 = a1[1];
  v7 = a2[1];
  v8 = v2 * v4 - (*a1 * *a2 + v6 * v7 + v3 * v5);
  v9 = v4 * *a1 + v2 * *a2 + v6 * v5 - v7 * v3;
  v10 = v4 * v6 + v2 * v7 + *a2 * v3 - *a1 * v5;
  v11 = v4 * v3 + v2 * v5;
  v12 = *a1 * v7 - *a2 * v6;
  *a1 = v9;
  a1[1] = v10;
  result = v12 + v11;
  a1[2] = result;
  a1[3] = v8;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfSlerp(pxrInternal__aapl__pxrReserved__ *this, double a2, const pxrInternal__aapl__pxrReserved__::GfQuatd *a3, const pxrInternal__aapl__pxrReserved__::GfQuatd *a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  double v16;
  long double v17;
  long double v18;
  double v19;
  long double v20;
  double v21;
  double v23;
  double v24;

  v5 = *(double *)this;
  v6 = *((double *)this + 1);
  v7 = *(double *)a3;
  v8 = *((double *)a3 + 1);
  v10 = *((double *)this + 2);
  v9 = *((double *)this + 3);
  v11 = *((double *)a3 + 2);
  v12 = *((double *)a3 + 3);
  v13 = *(double *)this * *(double *)a3 + v6 * v8 + v10 * v11 + v9 * v12;
  v14 = -v13;
  if (v13 >= 0.0)
    v14 = *(double *)this * *(double *)a3 + v6 * v8 + v10 * v11 + v9 * v12;
  if (1.0 - v14 <= 0.00001)
  {
    v19 = 1.0 - a2;
  }
  else
  {
    v24 = *(double *)a3;
    v23 = *(double *)this;
    v15 = acos(v14);
    v16 = sin(v15);
    v17 = sin((1.0 - a2) * v15);
    v18 = v15 * a2;
    v19 = v17 / v16;
    v20 = sin(v18);
    v5 = v23;
    v7 = v24;
    a2 = v20 / v16;
  }
  v21 = -a2;
  if (v13 >= 0.0)
    v21 = a2;
  return v5 * v19 + v7 * v21;
}

uint64_t *sub_20BF08CE0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C010, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C010, (char *)0x20, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF08D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(float32x4_t *this, __n128 *a2)
{
  float64x2_t result;

  result = (float64x2_t)a2[1];
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), result);
  return result;
}

{
  float64x2_t result;

  result = (float64x2_t)a2[1];
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), result);
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(float *a1, unsigned __int16 *a2)
{
  float result;

  *a1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  a1[1] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  a1[2] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  a1[3] = result;
  return result;
}

{
  float result;

  *a1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  a1[1] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  a1[2] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  a1[3] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfQuatf::Normalize(float32x2_t *this, float a2)
{
  float32x2_t v3;
  float v4;
  float v5;
  float result;
  float32_t v7;
  double v8;
  float32_t v9;

  v3 = *this;
  v4 = this[1].f32[0];
  v5 = this[1].f32[1];
  result = sqrtf((float)(vaddv_f32(vmul_f32(v3, v3)) + (float)(v4 * v4)) + (float)(v5 * v5));
  if (result >= a2)
  {
    v7 = v5 / result;
    v8 = 1.0 / result;
    *this = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v3), v8));
    v9 = v8 * v4;
    this[1].f32[0] = v9;
    this[1].f32[1] = v7;
  }
  else
  {
    *(_OWORD *)this->f32 = xmmword_20CA9B220;
  }
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfQuatf::Transform(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = (float)((float)(*a1 * *a1) + (float)(v2 * v2)) + (float)(v3 * v3);
  v6 = a2[1];
  v7 = a2[2];
  v8 = (float)((float)(*a1 * *a2) + (float)(v2 * v6)) + (float)(v3 * v7);
  return 1.0
       / (float)((float)(v4 * v4) + v5)
       * (float)((float)((float)(v4 + v4) * (float)((float)(v2 * v7) - (float)(v3 * v6)))
               + (float)((float)(*a2 * (float)((float)(v4 * v4) - v5)) + (float)(*a1 * (float)(v8 + v8))));
}

float pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  v3 = a1[2];
  v2 = a1[3];
  v5 = a2[2];
  v4 = a2[3];
  v6 = a1[1];
  v7 = a2[1];
  v8 = (float)(v2 * v4) - (float)((float)((float)(*a1 * *a2) + (float)(v6 * v7)) + (float)(v3 * v5));
  v9 = (float)((float)(v4 * *a1) + (float)(v2 * *a2)) + (float)((float)(v6 * v5) - (float)(v7 * v3));
  v10 = (float)((float)(v4 * v6) + (float)(v2 * v7)) + (float)((float)(*a2 * v3) - (float)(*a1 * v5));
  v11 = (float)(v4 * v3) + (float)(v2 * v5);
  v12 = (float)(*a1 * v7) - (float)(*a2 * v6);
  *a1 = v9;
  a1[1] = v10;
  result = v12 + v11;
  a1[2] = result;
  a1[3] = v8;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfSlerp(pxrInternal__aapl__pxrReserved__ *this, double a2, const pxrInternal__aapl__pxrReserved__::GfQuatf *a3, const pxrInternal__aapl__pxrReserved__::GfQuatf *a4)
{
  float v5;
  float v6;
  float v7;
  double v8;
  float v9;
  double v10;
  long double v11;
  long double v12;
  double v13;
  long double v14;
  double v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v21;

  v5 = *(float *)this;
  v6 = *(float *)a3;
  v7 = (float)((float)((float)(*(float *)this * *(float *)a3) + (float)(*((float *)this + 1) * *((float *)a3 + 1)))
             + (float)(*((float *)this + 2) * *((float *)a3 + 2)))
     + (float)(*((float *)this + 3) * *((float *)a3 + 3));
  v8 = v7;
  if (v7 < 0.0)
    v8 = -v7;
  if (1.0 - v8 <= 0.00001)
  {
    v13 = 1.0 - a2;
  }
  else
  {
    v21 = *(float *)a3;
    v20 = *(float *)this;
    v9 = acos(v8);
    v19 = sinf(v9);
    v10 = v9;
    v11 = sin((1.0 - a2) * v10);
    v12 = v10 * a2;
    v13 = v11 / v19;
    v14 = sin(v12);
    v5 = v20;
    v6 = v21;
    a2 = v14 / v19;
  }
  v15 = -a2;
  if (v7 >= 0.0)
    v15 = a2;
  v16 = v13;
  v17 = v15;
  return (float)(v5 * v16) + (float)(v6 * v17);
}

uint64_t *sub_20BF091C0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C020, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C020, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0927C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::GfQuath *pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(pxrInternal__aapl__pxrReserved__::GfQuath *this, const pxrInternal__aapl__pxrReserved__::GfQuatd *a2)
{
  float v4;
  unsigned int v5;

  sub_20BF09F68(this, (double *)a2);
  v4 = *((double *)a2 + 3);
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *((_WORD *)this + 3) = v5;
  return this;
}

pxrInternal__aapl__pxrReserved__::GfQuath *pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(pxrInternal__aapl__pxrReserved__::GfQuath *this, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;

  v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)a2;
  if (*(float *)a2 == 0.0)
  {
    v5 = v4 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
       + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
  }
  *(_WORD *)this = v5;
  v6 = *((float *)a2 + 1);
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  *((_WORD *)this + 1) = v7;
  v8 = *((float *)a2 + 2);
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  *((_WORD *)this + 2) = v9;
  v10 = *((float *)a2 + 3);
  if (v10 == 0.0)
  {
    v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  *((_WORD *)this + 3) = v11;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a1);
}

{
  _QWORD *v1;
  _QWORD *v2;

  sub_20BDDC1C8(a1, (uint64_t)"( ", 2);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v1, (uint64_t)" ", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  return sub_20BDDC1C8(v2, (uint64_t)")", 2);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_20BDDC1C8(a1, (uint64_t)"( ", 2);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v1, (uint64_t)" ", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v2, (uint64_t)" ", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  return sub_20BDDC1C8(v3, (uint64_t)")", 2);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v1 = sub_20BDDC1C8(a1, (uint64_t)"( ", 2);
  sub_20BDDC1C8(v1, (uint64_t)"(", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v2, (uint64_t)", ", 2);
  v3 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v3, (uint64_t)", ", 2);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = sub_20BDDC1C8(v4, (uint64_t)", 0), ", 6);
  sub_20BDDC1C8(v5, (uint64_t)"(", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v7, (uint64_t)", ", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v8, (uint64_t)", ", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = sub_20BDDC1C8(v9, (uint64_t)"), ", 3);
  sub_20BDDC1C8(v10, (uint64_t)"(", 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v11, (uint64_t)", ", 2);
  v12 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v12, (uint64_t)", ", 2);
  v13 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v13, (uint64_t)", ", 2);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = sub_20BDDC1C8(v14, (uint64_t)"), ", 3);
  sub_20BDDC1C8(v15, (uint64_t)"(", 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v16, (uint64_t)", ", 2);
  v17 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v17, (uint64_t)", ", 2);
  v18 = (_QWORD *)std::ostream::operator<<();
  v19 = sub_20BDDC1C8(v18, (uint64_t)", 0), ", 6);
  sub_20BDDC1C8(v19, (uint64_t)"(", 1);
  v20 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v20, (uint64_t)", ", 2);
  v21 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v21, (uint64_t)", ", 2);
  v22 = (_QWORD *)std::ostream::operator<<();
  v23 = sub_20BDDC1C8(v22, (uint64_t)", 0) ", 5);
  return sub_20BDDC1C8(v23, (uint64_t)")", 1);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  char v6;
  char v7;

  v6 = 40;
  v1 = sub_20BDDC1C8(a1, (uint64_t)&v6, 1);
  v2 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v1);
  v3 = sub_20BDDC1C8(v2, (uint64_t)", ", 2);
  v4 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v3);
  v7 = 41;
  return sub_20BDDC1C8(v4, (uint64_t)&v7, 1);
}

{
  _QWORD *v1;
  _QWORD *v2;
  char v4;
  char v5;

  v4 = 40;
  sub_20BDDC1C8(a1, (uint64_t)&v4, 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v1, (uint64_t)", ", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  v5 = 41;
  return sub_20BDDC1C8(v2, (uint64_t)&v5, 1);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;
  char v9;

  v8 = 40;
  v1 = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
  v2 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v1);
  v3 = sub_20BDDC1C8(v2, (uint64_t)", ", 2);
  v4 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v3);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v5);
  v9 = 41;
  return sub_20BDDC1C8(v6, (uint64_t)&v9, 1);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  char v5;
  char v6;

  v5 = 40;
  sub_20BDDC1C8(a1, (uint64_t)&v5, 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v1, (uint64_t)", ", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v2, (uint64_t)", ", 2);
  v3 = (_QWORD *)std::ostream::operator<<();
  v6 = 41;
  return sub_20BDDC1C8(v3, (uint64_t)&v6, 1);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;
  char v11;

  v10 = 40;
  v1 = sub_20BDDC1C8(a1, (uint64_t)&v10, 1);
  v2 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v1);
  v3 = sub_20BDDC1C8(v2, (uint64_t)", ", 2);
  v4 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v3);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v5);
  v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v8 = (_QWORD *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v7);
  v11 = 41;
  return sub_20BDDC1C8(v8, (uint64_t)&v11, 1);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  char v6;
  char v7;

  v6 = 40;
  sub_20BDDC1C8(a1, (uint64_t)&v6, 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v1, (uint64_t)", ", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v2, (uint64_t)", ", 2);
  v3 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v3, (uint64_t)", ", 2);
  v4 = (_QWORD *)std::ostream::operator<<();
  v7 = 41;
  return sub_20BDDC1C8(v4, (uint64_t)&v7, 1);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  sub_20BDDC1C8(a1, (uint64_t)"(", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v2, (uint64_t)", ", 2);
  v3 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v3, (uint64_t)", ", 2);
  v4 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v5, (uint64_t)", ", 2);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v6, (uint64_t)", ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v7, (uint64_t)")", 1);
  return a1;
}

{
  _QWORD *v1;
  _QWORD *v2;

  sub_20BDDC1C8(a1, (uint64_t)"SdfLayerOffset(", 15);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_20BDDC1C8(v1, (uint64_t)", ", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  return sub_20BDDC1C8(v2, (uint64_t)")", 1);
}

{
  return sub_20BDDC1C8(a1, (uint64_t)"OpaqueValue", 11);
}

{
  return sub_20BDDC1C8(a1, (uint64_t)"None", 4);
}

{
  sub_20BDDC1C8(a1, (uint64_t)"HdMaterialNetwork Params: (...) ", 32);
  return a1;
}

{
  sub_20BDDC1C8(a1, (uint64_t)"HdMaterialNetworkMap Params: (...) ", 35);
  return a1;
}

{
  sub_20BDDC1C8(a1, (uint64_t)"HdMaterialNode2 Params: (...) ", 30);
  return a1;
}

{
  sub_20BDDC1C8(a1, (uint64_t)"HdTopology()", 12);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfQuath::Normalize(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v4;

  v4 = (unsigned __int16)sub_20BEF6450(a1);
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4] >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2])
    sub_20BF09544(a1, v4);
  else
    *(_QWORD *)a1 = 0x3C00000000000000;
  return v4;
}

unsigned __int16 *sub_20BF09544(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v3;
  float v4;
  unsigned int v5;

  v3 = a2;
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     / pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2];
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  a1[3] = v5;
  sub_20BEF7204(a1, 1.0 / pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3]);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfQuath::Transform(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned __int16 v4;
  float v5;
  unsigned int v6;
  unsigned __int16 v7;
  double v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 v11;
  double v12;
  unsigned __int16 *v13;
  int v14;
  unsigned __int16 *v15;
  int v16;
  unsigned __int16 v17;
  double v18;
  unint64_t v19;
  unsigned __int16 *v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  double v24;
  unsigned __int16 *v25;
  int v27;
  unsigned __int16 v28;
  int v29;
  unsigned __int16 v30;
  int v31;
  unsigned __int16 v32;

  v4 = sub_20BEF70F0(a1, a1);
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]];
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23])
  {
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23]
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  v7 = sub_20BEF70F0(a1, a2);
  v8 = (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v7]
             + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v7]);
  v31 = *(_DWORD *)a1;
  v32 = a1[2];
  v9 = sub_20BEF7204((unsigned __int16 *)&v31, v8);
  v10 = *(_DWORD *)v9;
  v11 = v9[2];
  v12 = (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v6]
              - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4]);
  v31 = *(_DWORD *)a2;
  v32 = a2[2];
  v13 = sub_20BEF7204((unsigned __int16 *)&v31, v12);
  v14 = *(_DWORD *)v13;
  v30 = v13[2];
  v29 = v14;
  v32 = v11;
  v31 = v10;
  v15 = sub_20BEF7510((unsigned __int16 *)&v31, (unsigned __int16 *)&v29);
  v16 = *(_DWORD *)v15;
  v17 = v15[2];
  v18 = (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
              + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]);
  v19 = sub_20BF097C4(a1, a2);
  v31 = v19;
  v32 = WORD2(v19);
  v20 = sub_20BEF7204((unsigned __int16 *)&v31, v18);
  v21 = *(_DWORD *)v20;
  v28 = v20[2];
  v27 = v21;
  v32 = v17;
  v31 = v16;
  v22 = sub_20BEF7510((unsigned __int16 *)&v31, (unsigned __int16 *)&v27);
  v23 = *(_DWORD *)v22;
  v24 = 1.0
      / (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v6]
              + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4]);
  v32 = v22[2];
  v31 = v23;
  v25 = sub_20BEF7204((unsigned __int16 *)&v31, v24);
  return *(unsigned int *)v25 | ((unint64_t)v25[2] << 32);
}

unint64_t sub_20BF097C4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  float v13;
  uint64_t v14;

  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  v6 = (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v4)
     - (float)(v5 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]);
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
    v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  }
  v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  v9 = v5 * v8;
  v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  v11 = v9 - (float)(v10 * v4);
  if (v11 == 0.0)
  {
    v12 = HIWORD(LODWORD(v11));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23])
  {
    v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23]
        + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v12) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
    v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
    v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  }
  v13 = (float)(v10 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]])
      - (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v8);
  if (v13 == 0.0)
  {
    v14 = HIWORD(LODWORD(v13));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23])
  {
    v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23]
        + (((LODWORD(v13) & 0x7FFFFF) + ((LODWORD(v13) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v13));
  }
  return ((unint64_t)(unsigned __int16)v12 << 16) | (v14 << 32) | (unsigned __int16)v7;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfQuath::operator*=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  unsigned int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  unsigned int v20;
  float v21;
  unsigned int v22;

  v4 = a1[3];
  v5 = a2[3];
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4]
     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5];
  v7 = v6 - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0(a1, a2)];
  if (v7 == 0.0)
  {
    v8 = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4];
  v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5];
  v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  v17 = (float)((float)(v9 * v10) + (float)(v11 * v12)) + (float)((float)(v13 * v14) - (float)(v15 * v16));
  if (v17 == 0.0)
  {
    v18 = HIWORD(LODWORD(v17));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23])
  {
    v18 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23]
        + (((LODWORD(v17) & 0x7FFFFF) + ((LODWORD(v17) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v18) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v17));
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4];
    v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5];
    v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
    v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
    v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
    v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
    v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  }
  v19 = (float)((float)(v9 * v16) + (float)(v11 * v13)) + (float)((float)(v15 * v10) - (float)(v12 * v14));
  if (v19 == 0.0)
  {
    v20 = HIWORD(LODWORD(v19));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v19) >> 23])
  {
    v20 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v19) >> 23]
        + (((LODWORD(v19) & 0x7FFFFF) + ((LODWORD(v19) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v20) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v19));
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4];
    v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5];
    v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
    v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
    v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
    v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
    v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  }
  v21 = (float)((float)(v9 * v14) + (float)(v11 * v15)) + (float)((float)(v12 * v16) - (float)(v13 * v10));
  if (v21 == 0.0)
  {
    v22 = HIWORD(LODWORD(v21));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v21) >> 23])
  {
    v22 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v21) >> 23]
        + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v22) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
  }
  a1[3] = v8;
  *a1 = v18;
  a1[1] = v20;
  a1[2] = v22;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfSlerp(pxrInternal__aapl__pxrReserved__ *this, long double a2, const pxrInternal__aapl__pxrReserved__::GfQuath *a3, const pxrInternal__aapl__pxrReserved__::GfQuath *a4)
{
  float v7;
  double v8;
  float v9;
  unsigned int v10;
  double v11;
  uint64_t v12;
  float v13;
  float v14;
  unsigned int v15;
  double v16;
  long double v17;
  double v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  float v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;

  v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)this, (unsigned __int16 *)a3)]+ (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]* pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)a3 + 3)]);
  v8 = v7;
  if (v7 < 0.0)
    v8 = -v7;
  if (1.0 - v8 <= 0.00001)
  {
    v11 = 1.0 - a2;
  }
  else
  {
    v9 = acos(v8);
    if (v9 == 0.0)
    {
      v10 = HIWORD(LODWORD(v9));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23])
    {
      v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23]
          + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
    }
    v12 = (unsigned __int16)v10;
    v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v10];
    v14 = sinf(v13);
    if (v14 == 0.0)
    {
      v15 = HIWORD(LODWORD(v14));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
    {
      v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
          + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
      v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v12];
    }
    v16 = v13;
    v17 = sin((1.0 - a2) * v13);
    v18 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v15];
    v11 = v17 / v18;
    a2 = sin(v16 * a2) / v18;
  }
  if (v7 < 0.0)
    a2 = -a2;
  v19 = v11;
  if (v19 == 0.0)
  {
    v20 = HIWORD(LODWORD(v19));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v19) >> 23])
  {
    v20 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v19) >> 23]
        + (((LODWORD(v19) & 0x7FFFFF) + ((LODWORD(v19) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v20) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v19));
  }
  v26 = *(_QWORD *)this;
  v21 = *(_QWORD *)sub_20BEF6678((unsigned __int16 *)&v26, v20);
  v22 = a2;
  if (v22 == 0.0)
  {
    v23 = HIWORD(LODWORD(v22));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v22) >> 23])
  {
    v23 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v22) >> 23]
        + (((LODWORD(v22) & 0x7FFFFF) + ((LODWORD(v22) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v23) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v22));
  }
  v26 = *(_QWORD *)a3;
  v25 = *(_QWORD *)sub_20BEF6678((unsigned __int16 *)&v26, v23);
  v26 = v21;
  return *(_QWORD *)sub_20BEF747C((unsigned __int16 *)&v26, (unsigned __int16 *)&v25);
}

uint64_t *sub_20BF09E68()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C030, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C030, (char *)8, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF09F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_WORD *sub_20BF09F68(_WORD *a1, double *a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;

  v4 = *a2;
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = a2[1];
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = a2[2];
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  return a1;
}

double pxrInternal__aapl__pxrReserved__::GfQuaternion::GetLength(pxrInternal__aapl__pxrReserved__::GfQuaternion *this)
{
  return sqrt(*(double *)this * *(double *)this+ *((double *)this + 1) * *((double *)this + 1)+ *((double *)this + 2) * *((double *)this + 2)+ *((double *)this + 3) * *((double *)this + 3));
}

double pxrInternal__aapl__pxrReserved__::GfQuaternion::GetNormalized(pxrInternal__aapl__pxrReserved__::GfQuaternion *this, double a2)
{
  double v2;
  double v3;

  v2 = *(double *)this;
  v3 = sqrt(v2 * v2+ *((double *)this + 1) * *((double *)this + 1)+ *((double *)this + 2) * *((double *)this + 2)+ *((double *)this + 3) * *((double *)this + 3));
  if (v3 >= a2)
    return v2 * (1.0 / v3);
  else
    return 1.0;
}

double *pxrInternal__aapl__pxrReserved__::GfQuaternion::Normalize(double *this, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v3 = *this;
  v4 = this[1];
  v5 = this[2];
  v6 = this[3];
  v7 = sqrt(v3 * v3 + v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 >= a2)
  {
    *this = v3 * (1.0 / v7);
    this[1] = v4 * (1.0 / v7);
    this[2] = v5 * (1.0 / v7);
    v8 = v6 * (1.0 / v7);
  }
  else
  {
    *this = 1.0;
    this[1] = 0.0;
    this[2] = 0.0;
    v8 = 0.0;
  }
  this[3] = v8;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfQuaternion::GetInverse(pxrInternal__aapl__pxrReserved__::GfQuaternion *this)
{
  return *(double *)this
       * (1.0
        / (*(double *)this * *(double *)this
         + *((double *)this + 1) * *((double *)this + 1)
         + *((double *)this + 2) * *((double *)this + 2)
         + *((double *)this + 3) * *((double *)this + 3)));
}

double pxrInternal__aapl__pxrReserved__::GfQuaternion::operator*=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;

  v2 = a1[1];
  v3 = a2[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a2[2];
  v7 = a2[3];
  v8 = *a2 * v2 + *a1 * v3 + v4 * v7 - v6 * v5;
  v9 = *a2 * v4 + *a1 * v6 + v3 * v5 - v2 * v7;
  v10 = *a2 * v5 + *a1 * v7;
  *a1 = *a1 * *a2 - (v2 * v3 + v4 * v6 + v5 * v7);
  a1[1] = v8;
  result = v2 * v6 - v3 * v4 + v10;
  a1[2] = v9;
  a1[3] = result;
  return result;
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfQuaternion::operator*=(float64x2_t *a1, double a2)
{
  float64x2_t v2;
  float64x2_t result;

  v2 = vmulq_n_f64(*a1, a2);
  result = vmulq_n_f64(a1[1], a2);
  *a1 = v2;
  a1[1] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfSlerp(pxrInternal__aapl__pxrReserved__ *this, long double a2, const pxrInternal__aapl__pxrReserved__::GfQuaternion *a3, const pxrInternal__aapl__pxrReserved__::GfQuaternion *a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  double v16;
  long double v17;
  long double v18;
  double v19;
  double v20;

  v6 = *(double *)this;
  v5 = *((double *)this + 1);
  v8 = *(double *)a3;
  v7 = *((double *)a3 + 1);
  v10 = *((double *)this + 2);
  v9 = *((double *)this + 3);
  v11 = *((double *)a3 + 2);
  v12 = *((double *)a3 + 3);
  v13 = v5 * v7 + v10 * v11 + v9 * v12 + *(double *)this * *(double *)a3;
  v14 = -v13;
  if (v13 >= 0.0)
    v14 = v5 * v7 + v10 * v11 + v9 * v12 + *(double *)this * *(double *)a3;
  if (1.0 - v14 <= 0.00001)
  {
    v19 = 1.0 - a2;
  }
  else
  {
    v15 = acos(v14);
    v16 = sin(v15);
    v17 = sin((1.0 - a2) * v15);
    v18 = v15 * a2;
    v19 = v17 / v16;
    a2 = sin(v18) / v16;
  }
  v20 = -a2;
  if (v13 >= 0.0)
    v20 = a2;
  return v6 * v19 + v8 * v20;
}

uint64_t *sub_20BF0A3F8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C040, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C040, (char *)0x20, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0A4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfRange1d::GfRange1d(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t result;

  result = vcvtq_f64_f32(*a2);
  *a1 = result;
  return result;
}

{
  float64x2_t result;

  result = vcvtq_f64_f32(*a2);
  *a1 = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange1d::GetDistanceSquared(pxrInternal__aapl__pxrReserved__::GfRange1d *this, double a2)
{
  double v2;
  double v3;
  double v4;

  if (*(double *)this > a2)
  {
    v2 = *(double *)this - a2;
    return v2 * v2;
  }
  v3 = *((double *)this + 1);
  v4 = 0.0;
  if (v3 < a2)
  {
    v2 = a2 - v3;
    return v2 * v2;
  }
  return v4;
}

uint64_t *sub_20BF0A5BC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C050, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C050, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0A678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfRange1f::GfRange1f(float32x2_t *this, float64x2_t *a2)
{
  float32x2_t result;

  result = vcvt_f32_f64(*a2);
  *this = result;
  return result;
}

{
  float32x2_t result;

  result = vcvt_f32_f64(*a2);
  *this = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange1f::GetDistanceSquared(pxrInternal__aapl__pxrReserved__::GfRange1f *this, float a2)
{
  float v2;
  float v3;
  double v4;

  if (*(float *)this > a2)
  {
    v2 = *(float *)this - a2;
    return (float)(v2 * v2);
  }
  v3 = *((float *)this + 1);
  v4 = 0.0;
  if (v3 < a2)
  {
    v2 = a2 - v3;
    return (float)(v2 * v2);
  }
  return v4;
}

uint64_t *sub_20BF0A784()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C060, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C060, (char *)8, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, _OWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v8;
  double v9[3];
  char v10;

  LOBYTE(v9[0]) = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)v9, 1);
  *(_OWORD *)v9 = *a2;
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, v9);
  v5 = sub_20BDDC1C8(v4, (uint64_t)"...", 3);
  v8 = a2[1];
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (double *)&v8);
  v10 = 93;
  return sub_20BDDC1C8(v6, (uint64_t)&v10, 1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfRange2d::GfRange2d(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t result;
  float64x2_t v3;

  result = vcvtq_f64_f32(*a2);
  v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

{
  float64x2_t result;
  float64x2_t v3;

  result = vcvtq_f64_f32(*a2);
  v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange2d::GetDistanceSquared(double *a1, double *a2)
{
  double v2;
  double result;
  double v4;
  BOOL v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v2 = *a2;
  if (*a2 >= *a1)
  {
    v4 = a1[2];
    v5 = v2 <= v4;
    result = (v2 - v4) * (v2 - v4);
    if (v5)
      result = 0.0;
  }
  else
  {
    result = (*a1 - v2) * (*a1 - v2);
  }
  v6 = a2[1];
  v7 = a1[1];
  if (v6 >= v7)
  {
    v9 = a1[3];
    if (v6 <= v9)
      return result;
    v8 = v6 - v9;
  }
  else
  {
    v8 = v7 - v6;
  }
  return result + v8 * v8;
}

double pxrInternal__aapl__pxrReserved__::GfRange2d::GetCorner(pxrInternal__aapl__pxrReserved__::GfRange2d *this, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::GfRange2d *v2;
  pxrInternal__aapl__pxrReserved__::GfRange2d *v3;
  _QWORD v5[4];
  char v6;

  v2 = this;
  if (a2 < 4)
  {
    if ((a2 & 1) != 0)
      v3 = (pxrInternal__aapl__pxrReserved__::GfRange2d *)((char *)this + 16);
    else
      v3 = this;
    v2 = v3;
  }
  else
  {
    v5[0] = "gf/range2d.cpp";
    v5[1] = "GetCorner";
    v5[2] = 88;
    v5[3] = "GfVec2d pxrInternal__aapl__pxrReserved__::GfRange2d::GetCorner(size_t) const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid corner %zu > 3.", a2);
  }
  return *(double *)v2;
}

double pxrInternal__aapl__pxrReserved__::GfRange2d::GetQuadrant(pxrInternal__aapl__pxrReserved__::GfRange2d *this, unint64_t a2)
{
  double Corner;
  double v5;
  _QWORD v6[4];
  char v7;

  if (a2 < 4)
  {
    Corner = pxrInternal__aapl__pxrReserved__::GfRange2d::GetCorner(this, a2);
    v5 = *(double *)this + *((double *)this + 2);
    if (Corner >= v5 * 0.5)
      return v5 * 0.5;
    else
      return Corner;
  }
  else
  {
    v6[0] = "gf/range2d.cpp";
    v6[1] = "GetQuadrant";
    v6[2] = 99;
    v6[3] = "GfRange2d pxrInternal__aapl__pxrReserved__::GfRange2d::GetQuadrant(size_t) const";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid quadrant %zu > 3.", a2);
    return 3.40282347e38;
  }
}

uint64_t *sub_20BF0AAF4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C070, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C070, (char *)0x20, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0ABB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfRange2f::GfRange2f(float32x4_t *a1, float64x2_t *a2)
{
  float64x2_t result;

  result = a2[1];
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), result);
  return result;
}

{
  float64x2_t result;

  result = a2[1];
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), result);
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange2f::GetDistanceSquared(float *a1, float *a2)
{
  float v2;
  double result;
  float v4;
  BOOL v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = *a2;
  if (*a2 >= *a1)
  {
    v4 = a1[2];
    v5 = v2 <= v4;
    result = (float)((float)(v2 - v4) * (float)(v2 - v4));
    if (v5)
      result = 0.0;
  }
  else
  {
    result = (float)((float)(*a1 - v2) * (float)(*a1 - v2));
  }
  v6 = a2[1];
  v7 = a1[1];
  if (v6 >= v7)
  {
    v9 = a1[3];
    if (v6 <= v9)
      return result;
    v8 = v6 - v9;
  }
  else
  {
    v8 = v7 - v6;
  }
  return result + (float)(v8 * v8);
}

float pxrInternal__aapl__pxrReserved__::GfRange2f::GetCorner(pxrInternal__aapl__pxrReserved__::GfRange2f *this, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::GfRange2f *v2;
  pxrInternal__aapl__pxrReserved__::GfRange2f *v3;
  _QWORD v5[4];
  char v6;

  v2 = this;
  if (a2 < 4)
  {
    if ((a2 & 1) != 0)
      v3 = (pxrInternal__aapl__pxrReserved__::GfRange2f *)((char *)this + 8);
    else
      v3 = this;
    v2 = v3;
  }
  else
  {
    v5[0] = "gf/range2f.cpp";
    v5[1] = "GetCorner";
    v5[2] = 88;
    v5[3] = "GfVec2f pxrInternal__aapl__pxrReserved__::GfRange2f::GetCorner(size_t) const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid corner %zu > 3.", a2);
  }
  return *(float *)v2;
}

float pxrInternal__aapl__pxrReserved__::GfRange2f::GetQuadrant(pxrInternal__aapl__pxrReserved__::GfRange2f *this, unint64_t a2)
{
  float Corner;
  float v5;
  _QWORD v6[4];
  char v7;

  if (a2 < 4)
  {
    Corner = pxrInternal__aapl__pxrReserved__::GfRange2f::GetCorner(this, a2);
    v5 = *(float *)this + *((float *)this + 2);
    if (Corner >= (float)(v5 * 0.5))
      return v5 * 0.5;
    else
      return Corner;
  }
  else
  {
    v6[0] = "gf/range2f.cpp";
    v6[1] = "GetQuadrant";
    v6[2] = 99;
    v6[3] = "GfRange2f pxrInternal__aapl__pxrReserved__::GfRange2f::GetQuadrant(size_t) const";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid quadrant %zu > 3.", a2);
    return 3.4028e38;
  }
}

uint64_t *sub_20BF0AE70()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C080, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C080, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0AF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfRange3d::GfRange3d(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t v2;
  float64x2_t result;

  v2 = vcvtq_f64_f32(a2[1]);
  *a1 = vcvtq_f64_f32(*a2);
  a1[1] = v2;
  result = vcvtq_f64_f32(a2[2]);
  a1[2] = result;
  return result;
}

{
  float64x2_t v2;
  float64x2_t result;

  v2 = vcvtq_f64_f32(a2[1]);
  *a1 = vcvtq_f64_f32(*a2);
  a1[1] = v2;
  result = vcvtq_f64_f32(a2[2]);
  a1[2] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange3d::GetDistanceSquared(double *a1, double *a2)
{
  double v2;
  double result;
  double v4;
  BOOL v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v2 = *a2;
  if (*a2 >= *a1)
  {
    v4 = a1[3];
    v5 = v2 <= v4;
    result = (v2 - v4) * (v2 - v4);
    if (v5)
      result = 0.0;
  }
  else
  {
    result = (*a1 - v2) * (*a1 - v2);
  }
  v6 = a2[1];
  v7 = a1[1];
  if (v6 >= v7)
  {
    v8 = a1[4];
    v5 = v6 <= v8;
    v9 = result + (v6 - v8) * (v6 - v8);
    if (!v5)
      result = v9;
  }
  else
  {
    result = result + (v7 - v6) * (v7 - v6);
  }
  v10 = a2[2];
  v11 = a1[2];
  if (v10 >= v11)
  {
    v13 = a1[5];
    if (v10 <= v13)
      return result;
    v12 = v10 - v13;
  }
  else
  {
    v12 = v11 - v10;
  }
  return result + v12 * v12;
}

double pxrInternal__aapl__pxrReserved__::GfRange3d::GetCorner(pxrInternal__aapl__pxrReserved__::GfRange3d *this, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::GfRange3d *v2;
  pxrInternal__aapl__pxrReserved__::GfRange3d *v3;
  _QWORD v5[4];
  char v6;

  v2 = this;
  if (a2 < 8)
  {
    if ((a2 & 1) != 0)
      v3 = (pxrInternal__aapl__pxrReserved__::GfRange3d *)((char *)this + 24);
    else
      v3 = this;
    v2 = v3;
  }
  else
  {
    v5[0] = "gf/range3d.cpp";
    v5[1] = "GetCorner";
    v5[2] = 96;
    v5[3] = "GfVec3d pxrInternal__aapl__pxrReserved__::GfRange3d::GetCorner(size_t) const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid corner %zu > 7.", a2);
  }
  return *(double *)v2;
}

void pxrInternal__aapl__pxrReserved__::GfRange3d::GetOctant(pxrInternal__aapl__pxrReserved__::GfRange3d *this@<X0>, unint64_t a2@<X1>, double *a3@<X8>)
{
  double Corner;
  double v5;
  double v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _QWORD v15[4];
  char v16;

  if (a2 < 8)
  {
    Corner = pxrInternal__aapl__pxrReserved__::GfRange3d::GetCorner(this, a2);
    v8 = *((double *)this + 5);
    v9 = (*(double *)this + *((double *)this + 3)) * 0.5;
    v10 = (*((double *)this + 1) + *((double *)this + 4)) * 0.5;
    v11 = (*((double *)this + 2) + v8) * 0.5;
    if (Corner >= v9)
      v12 = (*(double *)this + *((double *)this + 3)) * 0.5;
    else
      v12 = Corner;
    if (Corner < v9)
      Corner = (*(double *)this + *((double *)this + 3)) * 0.5;
    if (v5 >= v10)
      v13 = (*((double *)this + 1) + *((double *)this + 4)) * 0.5;
    else
      v13 = v5;
    if (v5 < v10)
      v5 = (*((double *)this + 1) + *((double *)this + 4)) * 0.5;
    if (v6 >= v11)
      v14 = (*((double *)this + 2) + v8) * 0.5;
    else
      v14 = v6;
    if (v6 < v11)
      v6 = (*((double *)this + 2) + v8) * 0.5;
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
  }
  else
  {
    v15[0] = "gf/range3d.cpp";
    v15[1] = "GetOctant";
    v15[2] = 109;
    v15[3] = "GfRange3d pxrInternal__aapl__pxrReserved__::GfRange3d::GetOctant(size_t) const";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid octant %zu > 7.", a2);
    *(int64x2_t *)a3 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
    a3[2] = 3.40282347e38;
    Corner = -3.40282347e38;
    v5 = -3.40282347e38;
    v6 = -3.40282347e38;
  }
  a3[3] = Corner;
  a3[4] = v5;
  a3[5] = v6;
}

uint64_t *sub_20BF0B284()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C090, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C090, (char *)0x30, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0B340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfRange3f::GfRange3f(uint64_t a1, float64x2_t *a2)
{
  float32x2_t result;

  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  result = vcvt_f32_f64(a2[2]);
  *(float32x2_t *)(a1 + 16) = result;
  return result;
}

{
  float32x2_t result;

  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  result = vcvt_f32_f64(a2[2]);
  *(float32x2_t *)(a1 + 16) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange3f::GetDistanceSquared(float *a1, float *a2)
{
  float v2;
  double result;
  float v4;
  BOOL v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v2 = *a2;
  if (*a2 >= *a1)
  {
    v4 = a1[3];
    v5 = v2 <= v4;
    result = (float)((float)(v2 - v4) * (float)(v2 - v4));
    if (v5)
      result = 0.0;
  }
  else
  {
    result = (float)((float)(*a1 - v2) * (float)(*a1 - v2));
  }
  v6 = a2[1];
  v7 = a1[1];
  if (v6 >= v7)
  {
    v9 = a1[4];
    if (v6 <= v9)
      goto LABEL_10;
    v8 = v6 - v9;
  }
  else
  {
    v8 = v7 - v6;
  }
  result = result + (float)(v8 * v8);
LABEL_10:
  v10 = a2[2];
  v11 = a1[2];
  if (v10 >= v11)
  {
    v13 = a1[5];
    if (v10 <= v13)
      return result;
    v12 = v10 - v13;
  }
  else
  {
    v12 = v11 - v10;
  }
  return result + (float)(v12 * v12);
}

float pxrInternal__aapl__pxrReserved__::GfRange3f::GetCorner(pxrInternal__aapl__pxrReserved__::GfRange3f *this, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::GfRange3f *v2;
  pxrInternal__aapl__pxrReserved__::GfRange3f *v3;
  _QWORD v5[4];
  char v6;

  v2 = this;
  if (a2 < 8)
  {
    if ((a2 & 1) != 0)
      v3 = (pxrInternal__aapl__pxrReserved__::GfRange3f *)((char *)this + 12);
    else
      v3 = this;
    v2 = v3;
  }
  else
  {
    v5[0] = "gf/range3f.cpp";
    v5[1] = "GetCorner";
    v5[2] = 96;
    v5[3] = "GfVec3f pxrInternal__aapl__pxrReserved__::GfRange3f::GetCorner(size_t) const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid corner %zu > 7.", a2);
  }
  return *(float *)v2;
}

void pxrInternal__aapl__pxrReserved__::GfRange3f::GetOctant(pxrInternal__aapl__pxrReserved__::GfRange3f *this@<X0>, unint64_t a2@<X1>, float *a3@<X8>)
{
  float Corner;
  float v5;
  float v6;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _QWORD v15[4];
  char v16;

  if (a2 < 8)
  {
    Corner = pxrInternal__aapl__pxrReserved__::GfRange3f::GetCorner(this, a2);
    v8 = *((float *)this + 5);
    v9 = (float)(*(float *)this + *((float *)this + 3)) * 0.5;
    v10 = (float)(*((float *)this + 1) + *((float *)this + 4)) * 0.5;
    v11 = (float)(*((float *)this + 2) + v8) * 0.5;
    if (Corner >= v9)
      v12 = (float)(*(float *)this + *((float *)this + 3)) * 0.5;
    else
      v12 = Corner;
    if (Corner < v9)
      Corner = (float)(*(float *)this + *((float *)this + 3)) * 0.5;
    if (v5 >= v10)
      v13 = (float)(*((float *)this + 1) + *((float *)this + 4)) * 0.5;
    else
      v13 = v5;
    if (v5 < v10)
      v5 = (float)(*((float *)this + 1) + *((float *)this + 4)) * 0.5;
    if (v6 >= v11)
      v14 = (float)(*((float *)this + 2) + v8) * 0.5;
    else
      v14 = v6;
    if (v6 < v11)
      v6 = (float)(*((float *)this + 2) + v8) * 0.5;
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
  }
  else
  {
    v15[0] = "gf/range3f.cpp";
    v15[1] = "GetOctant";
    v15[2] = 109;
    v15[3] = "GfRange3f pxrInternal__aapl__pxrReserved__::GfRange3f::GetOctant(size_t) const";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid octant %zu > 7.", a2);
    *(int32x2_t *)a3 = vdup_n_s32(0x7F7FFFFFu);
    a3[2] = 3.4028e38;
    Corner = -3.4028e38;
    v5 = -3.4028e38;
    v6 = -3.4028e38;
  }
  a3[3] = Corner;
  a3[4] = v5;
  a3[5] = v6;
}

uint64_t *sub_20BF0B69C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C0A0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C0A0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0B758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(uint64_t a1, __int128 *a2, __n128 *a3)
{
  __int128 v3;
  __n128 result;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  result = *a3;
  *(_QWORD *)(a1 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  return result;
}

float64_t pxrInternal__aapl__pxrReserved__::GfRay::SetEnds(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  float64x2_t v3;
  float64_t result;

  v3 = *(float64x2_t *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(float64x2_t *)a1 = v3;
  result = a3[1].f64[0] - *(double *)(a2 + 16);
  *(float64x2_t *)(a1 + 24) = vsubq_f64(*a3, *(float64x2_t *)a2);
  *(float64_t *)(a1 + 40) = result;
  return result;
}

pxrInternal__aapl__pxrReserved__::GfRay *pxrInternal__aapl__pxrReserved__::GfRay::Transform(pxrInternal__aapl__pxrReserved__::GfRay *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)this = sub_20BEF4828((double *)a2, (double *)this);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = v5;
  *((double *)this + 3) = sub_20BEF834C((double *)a2, (double *)this + 3);
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = v7;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfRay::FindClosestPoint(__int128 *a1, double *a2, double *a3)
{
  double v4;
  double v5;
  double v6;
  double v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  double v12;

  v9 = *a1;
  v10 = *((_QWORD *)a1 + 2);
  v11 = *(__int128 *)((char *)a1 + 24);
  v12 = *((double *)a1 + 5);
  v4 = sqrt(*(double *)&v11 * *(double *)&v11 + *((double *)&v11 + 1) * *((double *)&v11 + 1) + v12 * v12);
  v5 = 1.0 / v4;
  if (v4 <= 1.0e-10)
    v5 = 1.0e10;
  *(double *)&v11 = *(double *)&v11 * v5;
  *((double *)&v11 + 1) = *((double *)&v11 + 1) * v5;
  v12 = v12 * v5;
  v8 = 0.0;
  pxrInternal__aapl__pxrReserved__::GfLine::FindClosestPoint((double *)&v9, a2, &v8);
  v6 = v8;
  if (v8 < 0.0)
    v6 = 0.0;
  if (a3)
    *a3 = v6 / v4;
  return v6 * *(double *)&v11 + *(double *)&v9;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, _QWORD *a6)
{
  double v10;
  double v11;
  _BOOL8 result;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  float64x2_t v17;
  uint64_t v18;
  double v19[3];
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;

  v20 = *(float64x2_t *)a1;
  v21 = *(double *)(a1 + 16);
  v22 = *(float64x2_t *)(a1 + 24);
  v23 = *(double *)(a1 + 40);
  v10 = sqrt(v22.f64[0] * v22.f64[0] + v22.f64[1] * v22.f64[1] + v23 * v23);
  v11 = 1.0 / v10;
  if (v10 <= 1.0e-10)
    v11 = 1.0e10;
  v22.f64[0] = v22.f64[0] * v11;
  v22.f64[1] = v22.f64[1] * v11;
  v23 = v23 * v11;
  v15 = 0;
  v16 = 0.0;
  result = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(v20.f64, a2, v19, &v17, &v16, (double *)&v15);
  if (result)
  {
    v13 = v16;
    if (v16 < 0.0)
      v13 = 0.0;
    if (a3)
    {
      v14 = v13 * v23 + v21;
      *a3 = vaddq_f64(vmulq_n_f64(v22, v13), v20);
      a3[1].f64[0] = v14;
    }
    if (a4)
    {
      *(float64x2_t *)a4 = v17;
      *(_QWORD *)(a4 + 16) = v18;
    }
    if (a5)
      *a5 = v13 / v10;
    if (a6)
      *a6 = v15;
  }
  return result;
}

{
  double v10;
  double v11;
  _BOOL8 result;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  float64x2_t v17;
  uint64_t v18;
  _BYTE v19[24];
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;

  v20 = *(float64x2_t *)a1;
  v21 = *(double *)(a1 + 16);
  v22 = *(float64x2_t *)(a1 + 24);
  v23 = *(double *)(a1 + 40);
  v10 = sqrt(v22.f64[0] * v22.f64[0] + v22.f64[1] * v22.f64[1] + v23 * v23);
  v11 = 1.0 / v10;
  if (v10 <= 1.0e-10)
    v11 = 1.0e10;
  v22.f64[0] = v22.f64[0] * v11;
  v22.f64[1] = v22.f64[1] * v11;
  v23 = v23 * v11;
  v15 = 0;
  v16 = 0.0;
  result = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(v20.f64, a2, (uint64_t)v19, &v17, &v16, (double *)&v15);
  if (result)
  {
    v13 = v16;
    if (v16 < 0.0)
      v13 = 0.0;
    if (a3)
    {
      v14 = v13 * v23 + v21;
      *a3 = vaddq_f64(vmulq_n_f64(v22, v13), v20);
      a3[1].f64[0] = v14;
    }
    if (a4)
    {
      *(float64x2_t *)a4 = v17;
      *(_QWORD *)(a4 + 16) = v18;
    }
    if (a5)
      *a5 = v13 / v10;
    if (a6)
      *a6 = v15;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(pxrInternal__aapl__pxrReserved__::GfRay *a1, double *a2, double *a3, double *a4, double *a5, double *a6, BOOL *a7, double a8)
{
  int v16;
  uint64_t result;
  double v18;
  double v19;
  double v20;
  _BOOL4 v21;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  _BOOL4 v37;
  double v38;
  double v39;
  float v41;
  double v43;
  double v44[4];

  pxrInternal__aapl__pxrReserved__::GfPlane::Set(v44, a2, a3, a4);
  v43 = 0.0;
  v16 = pxrInternal__aapl__pxrReserved__::GfRay::Intersect(a1, (const pxrInternal__aapl__pxrReserved__::GfPlane *)v44, &v43, a7);
  result = 0;
  if (v16 && v43 <= a8)
  {
    v18 = fabs(v44[0]);
    v19 = fabs(v44[1]);
    v20 = fabs(v44[2]);
    v21 = v18 > v19;
    v22 = v18 > v20;
    v23 = !v21 || !v22;
    if (v21 && v22)
      v24 = 1;
    else
      v24 = 2 * (v19 > v20);
    v25 = 2;
    if (v23)
      v25 = v19 <= v20;
    v26 = a2[v24];
    v27 = a2[v25];
    v28 = *((double *)a1 + v24) + v43 * *((double *)a1 + v24 + 3) - v26;
    v29 = *((double *)a1 + v25) + v43 * *((double *)a1 + v25 + 3) - v27;
    v30 = a3[v24] - v26;
    v31 = a3[v25] - v27;
    v32 = a4[v24] - v26;
    v33 = a4[v25] - v27;
    v34 = (v29 * v30 - v28 * v31) / (v30 * v33 - v31 * v32);
    if (v34 > -1.0e-10 && v34 < 0.0)
      v34 = 0.0;
    if (v34 < 0.0 || v34 > 1.0)
      return 0;
    v37 = v31 < -1.0e-10;
    if (v31 > 1.0e-10)
      v37 = 1;
    if (v37)
    {
      v32 = v33;
      v28 = v29;
      v38 = v31;
    }
    else
    {
      v38 = v30;
    }
    v39 = (v28 - v32 * v34) / v38;
    if (v39 > -1.0e-10 && v39 < 0.0)
      v39 = 0.0;
    if (v39 < 0.0)
      return 0;
    v41 = 1.0 - (v34 + v39);
    if (v41 > -1.0e-10 && v41 < 0.0)
      v41 = 0.0;
    if (v41 >= 0.0)
    {
      if (a5)
        *a5 = v43;
      if (a6)
      {
        *a6 = v41;
        a6[1] = v39;
        a6[2] = v34;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(pxrInternal__aapl__pxrReserved__::GfRay *this, const pxrInternal__aapl__pxrReserved__::GfPlane *a2, double *a3, BOOL *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;

  v4 = *((double *)a2 + 1);
  v5 = *((double *)a2 + 2);
  v6 = *((double *)this + 3) * *(double *)a2 + *((double *)this + 4) * v4 + *((double *)this + 5) * v5;
  if (v6 < 1.0e-10 && v6 > -1.0e-10)
    return 0;
  v7 = (*(double *)a2 * (*(double *)a2 * *((double *)a2 + 3) - *(double *)this)
      + v4 * (*((double *)a2 + 3) * v4 - *((double *)this + 1))
      + v5 * (*((double *)a2 + 3) * v5 - *((double *)this + 2)))
     / v6;
  if (v7 < 0.0)
    return 0;
  if (a3)
    *a3 = v7;
  if (a4)
    *a4 = v6 < 0.0;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(uint64_t a1, double *a2, double *a3, double *a4)
{
  uint64_t result;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (*a2 > a2[3] || a2[1] > a2[4] || a2[2] > a2[5])
    return 0;
  v5 = 0;
  v6 = -1.79769313e308;
  v7 = 1.79769313e308;
  do
  {
    v8 = *(double *)(a1 + v5 * 8 + 24);
    if (fabs(v8) >= 1.0e-10)
    {
      v10 = 1.0 / v8;
      v11 = *(double *)(a1 + v5 * 8);
      v12 = v10 * (a2[v5] - v11);
      v13 = v10 * (a2[v5 + 3] - v11);
      if (v12 <= v13)
        v14 = v12;
      else
        v14 = v13;
      if (v12 > v13)
        v13 = v12;
      if (v14 > v6)
        v6 = v14;
      if (v13 < v7)
        v7 = v13;
    }
    else
    {
      v9 = *(double *)(a1 + v5 * 8);
      if (v9 < a2[v5] || v9 > a2[v5 + 3])
        return 0;
    }
    ++v5;
  }
  while (v5 != 3);
  result = 0;
  if (v6 <= v7 && v7 >= 0.0)
  {
    if (a3)
      *a3 = v6;
    if (a4)
      *a4 = v7;
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(pxrInternal__aapl__pxrReserved__::GfRay *this, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2, double *a3, double *a4)
{
  __int128 v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v7 = *((_OWORD *)this + 1);
  v14 = *(_OWORD *)this;
  v15 = v7;
  v16 = *((_OWORD *)this + 2);
  v8 = (double *)((char *)a2 + 176);
  *(_QWORD *)&v14 = sub_20BEF4828((double *)a2 + 22, (double *)&v14);
  *((_QWORD *)&v14 + 1) = v9;
  *(_QWORD *)&v15 = v10;
  *((_QWORD *)&v15 + 1) = sub_20BEF834C(v8, (double *)&v15 + 1);
  *(_QWORD *)&v16 = v11;
  *((_QWORD *)&v16 + 1) = v12;
  return pxrInternal__aapl__pxrReserved__::GfRay::Intersect((uint64_t)&v14, (double *)a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(uint64_t a1, double *a2, double *a3, double *a4, double a5, int8x16_t a6, double a7, double a8, int8x16_t a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  a9.i64[0] = *(_QWORD *)(a1 + 8);
  v9 = *(double *)(a1 + 16);
  v10 = a2[1];
  v11 = a2[2];
  *(double *)a6.i64 = *(double *)a1 + *(double *)(a1 + 24) - *(double *)a1;
  v12 = *(double *)a9.i64 + *(double *)(a1 + 32) - *(double *)a9.i64;
  v13 = v9 + *(double *)(a1 + 40) - v9;
  v14 = *(double *)a6.i64 * *(double *)a6.i64 + v12 * v12 + v13 * v13;
  *(double *)a6.i64 = *(double *)a6.i64 * (*(double *)a1 - *a2) + v12 * (*(double *)a9.i64 - v10) + v13 * (v9 - v11);
  *(double *)a6.i64 = *(double *)a6.i64 + *(double *)a6.i64;
  v15 = v9 * v9
      + *(double *)a9.i64 * *(double *)a9.i64
      + *(double *)a1 * *(double *)a1
      + *a2 * *a2
      + v10 * v10
      + v11 * v11;
  v16 = *(double *)a1 * *a2 + *(double *)a9.i64 * v10;
  *(double *)a9.i64 = v9 * v11;
  return pxrInternal__aapl__pxrReserved__::GfRay::_SolveQuadratic((pxrInternal__aapl__pxrReserved__::GfRay *)a1, v14, a6, v15 - (v16 + v9 * v11 + v16 + v9 * v11) - a5 * a5, a3, a4, v14, a9);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::_SolveQuadratic(pxrInternal__aapl__pxrReserved__::GfRay *this, double a2, int8x16_t a3, double a4, double *a5, double *a6, double a7, int8x16_t a8)
{
  double v8;
  double v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;

  if (fabs(a2) < 0.000001)
  {
    if (fabs(*(double *)a3.i64) >= 0.000001)
    {
      v8 = -a4 / *(double *)a3.i64;
      goto LABEL_6;
    }
    return 0;
  }
  v9 = *(double *)a3.i64 * *(double *)a3.i64 + a2 * -4.0 * a4;
  if (fabs(v9) >= 0.000001)
  {
    if (v9 >= 0.0)
    {
      a8.i64[0] = 1.0;
      v10.f64[0] = NAN;
      v10.f64[1] = NAN;
      v11 = (*(double *)vbslq_s8((int8x16_t)vnegq_f64(v10), a8, a3).i64 * sqrt(v9) + *(double *)a3.i64) * -0.5;
      v8 = v11 / a2;
      v12 = a4 / v11;
      if (v8 <= v12)
        v13 = v8;
      else
        v13 = v12;
      if (v8 <= v12)
        v8 = v12;
      if (v8 >= 0.0)
      {
        if (a5)
          *a5 = v13;
        goto LABEL_19;
      }
    }
    return 0;
  }
  v8 = -*(double *)a3.i64 / (a2 + a2);
LABEL_6:
  if (v8 < 0.0)
    return 0;
  if (a5)
    *a5 = v8;
LABEL_19:
  if (a6)
    *a6 = v8;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(double *a1, double *a2, uint64_t a3, double *a4, double *a5, double a6, int8x16_t a7, double a8, double a9, int8x16_t a10)
{
  double v10;
  double v11;
  double v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  a7.i64[0] = *(_QWORD *)a3;
  v10 = *(double *)(a3 + 8);
  v11 = *(double *)(a3 + 16);
  v12 = sqrt(*(double *)a7.i64 * *(double *)a7.i64 + v10 * v10 + v11 * v11);
  v13 = 1.0 / v12;
  v14 = v12 <= 1.0e-10;
  a10.i64[0] = 0x4202A05F20000000;
  if (!v14)
    *(double *)a10.i64 = v13;
  *(double *)a7.i64 = *(double *)a7.i64 * *(double *)a10.i64;
  v15 = v10 * *(double *)a10.i64;
  v16 = v11 * *(double *)a10.i64;
  *(double *)a10.i64 = *a1 - *a2;
  v17 = a1[1] - a2[1];
  v18 = a1[3];
  v19 = a1[2] - a2[2];
  v20 = a1[4];
  v21 = a1[5];
  v22 = *(double *)a7.i64 * v18 + v15 * v20 + v16 * v21;
  v23 = v18 - *(double *)a7.i64 * v22;
  v24 = v20 - v15 * v22;
  v25 = v21 - v16 * v22;
  v26 = *(double *)a10.i64 * *(double *)a7.i64 + v17 * v15 + v16 * v19;
  *(double *)a10.i64 = *(double *)a10.i64 - *(double *)a7.i64 * v26;
  v27 = v17 - v15 * v26;
  v28 = v19 - v16 * v26;
  *(double *)a7.i64 = v28 * v25 + *(double *)a10.i64 * v23 + v27 * v24;
  *(double *)a7.i64 = *(double *)a7.i64 + *(double *)a7.i64;
  v29 = *(double *)a10.i64 * *(double *)a10.i64 + v27 * v27;
  *(double *)a10.i64 = v28 * v28;
  return pxrInternal__aapl__pxrReserved__::GfRay::_SolveQuadratic((pxrInternal__aapl__pxrReserved__::GfRay *)a1, v25 * v25 + v23 * v23 + v24 * v24, a7, v28 * v28 + v29 - a6 * a6, a4, a5, v25 * v25 + v23 * v23 + v24 * v24, a10);
}

{
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t result;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;

  v13 = *(double *)a3;
  v14 = *(double *)(a3 + 8);
  a10.i64[0] = *(_QWORD *)(a3 + 16);
  v15 = sqrt(v13 * v13 + v14 * v14 + *(double *)a10.i64 * *(double *)a10.i64);
  v16 = 1.0 / v15;
  v17 = v15 <= 1.0e-10;
  v18 = 1.0e10;
  if (!v17)
    v18 = v16;
  v19 = v13 * v18;
  v20 = v14 * v18;
  v21 = *(double *)a10.i64 * v18;
  v22 = *a2 + v13 * v18 * *(double *)a7.i64;
  v23 = a2[1] + v14 * v18 * *(double *)a7.i64;
  v24 = a2[2] + *(double *)a10.i64 * v18 * *(double *)a7.i64;
  v25 = *a1 - v22;
  v26 = a1[1] - v23;
  v27 = a1[3];
  *(double *)a10.i64 = a1[2] - v24;
  v28 = a1[4];
  v29 = a1[5];
  v30 = v19 * v27 + v20 * v28 + v21 * v29;
  v31 = v27 - v19 * v30;
  v32 = v28 - v20 * v30;
  v33 = v29 - v21 * v30;
  v34 = v21 * *(double *)a10.i64 + v19 * v25 + v20 * v26;
  v35 = v25 - v19 * v34;
  v36 = v26 - v20 * v34;
  *(double *)a10.i64 = *(double *)a10.i64 - v21 * v34;
  v37 = *(double *)a7.i64 * *(double *)a7.i64 / (a6 * a6 + *(double *)a7.i64 * *(double *)a7.i64);
  *(double *)a7.i64 = v37 * (v33 * *(double *)a10.i64 + v31 * v35 + v32 * v36);
  *(double *)a7.i64 = *(double *)a7.i64 - (1.0 - v37) * v30 * v34 + *(double *)a7.i64 - (1.0 - v37) * v30 * v34;
  result = pxrInternal__aapl__pxrReserved__::GfRay::_SolveQuadratic((pxrInternal__aapl__pxrReserved__::GfRay *)a1, v37 * (v33 * v33 + v31 * v31 + v32 * v32) - (1.0 - v37) * (v30 * v30), a7, v37 * (*(double *)a10.i64 * *(double *)a10.i64 + v35 * v35 + v36 * v36) - (1.0 - v37) * (v34 * v34), a4, a5, (1.0 - v37) * (v34 * v34), a10);
  if ((_DWORD)result)
  {
    v39 = a1[4];
    v40 = a1[5];
    v42 = a1[2];
    v41 = a1[3];
    v43 = a1[1];
    v44 = v19 * (*a4 * v41 + *a1 - v22) + v20 * (*a4 * v39 + v43 - v23) + v21 * (*a4 * v40 + v42 - v24);
    v45 = v21 * (v42 + v40 * *a5 - v24) + v19 * (*a1 + v41 * *a5 - v22) + v20 * (v43 + v39 * *a5 - v23);
    if (v44 <= 0.0 || v45 <= 0.0)
    {
      if (v44 > 0.0)
      {
        *a4 = *a5;
      }
      else if (v45 > 0.0)
      {
        *a5 = *a4;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_20BF0C5B0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C0B0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C0B0, (char *)0x30, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0C66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRect2i::GetNormalized(pxrInternal__aapl__pxrReserved__::GfRect2i *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_DWORD *)this + 2);
  v2 = *((_DWORD *)this + 3);
  v3 = *((_DWORD *)this + 1);
  if ((signed int)v1 >= *(_DWORD *)this)
    v4 = *(unsigned int *)this;
  else
    v4 = v1;
  if ((int)v2 >= (int)v3)
    v5 = v3;
  else
    v5 = v2;
  return v4 | (v5 << 32);
}

uint64_t *sub_20BF0C75C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C0C0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C0C0, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0C818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::GfRotation *pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat(pxrInternal__aapl__pxrReserved__::GfRotation *this, const pxrInternal__aapl__pxrReserved__::GfQuatd *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  double v12[3];

  v3 = *(double *)a2;
  v4 = *((double *)a2 + 1);
  v5 = *((double *)a2 + 2);
  v6 = sqrt(v3 * v3 + v4 * v4 + v5 * v5);
  if (v6 <= 1.0e-10)
  {
    *(_QWORD *)this = 0x3FF0000000000000;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    v7 = *((double *)a2 + 3);
    if (v7 <= 1.0)
      v8 = *((double *)a2 + 3);
    else
      v8 = 1.0;
    if (v7 >= -1.0)
      v9 = v8;
    else
      v9 = -1.0;
    v10 = acos(v9);
    v12[0] = v3 * (1.0 / v6);
    v12[1] = 1.0 / v6 * v4;
    v12[2] = 1.0 / v6 * v5;
    sub_20BF0C934((uint64_t)this, (uint64_t)v12, v10 * 57.2957795 + v10 * 57.2957795);
  }
  return this;
}

double sub_20BF0C934(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 24) = a3;
  result = *(double *)a1;
  v5 = *(double *)(a1 + 8);
  v6 = *(double *)(a1 + 16);
  v7 = result * result + v5 * v5 + v6 * v6;
  if (fabs(v7 + -1.0) >= 1.0e-10)
  {
    v8 = sqrt(v7);
    v9 = 1.0 / v8;
    v10 = v8 <= 1.0e-10;
    v11 = 1.0e10;
    if (!v10)
      v11 = v9;
    *(double *)a1 = result * v11;
    *(double *)(a1 + 8) = v5 * v11;
    result = v6 * v11;
    *(double *)(a1 + 16) = v6 * v11;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRotation::SetRotateInto(_QWORD *a1, double *a2, double *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v37;
  double v38;
  double v39;

  v3 = (uint64_t)a1;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 <= 1.0e-10)
    v8 = 1.0e10;
  else
    v8 = 1.0 / v7;
  v9 = v4 * v8;
  v10 = v5 * v8;
  v11 = v6 * v8;
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  v15 = sqrt(v12 * v12 + v13 * v13 + v14 * v14);
  if (v15 <= 1.0e-10)
    v16 = 1.0e10;
  else
    v16 = 1.0 / v15;
  v17 = v11 * (v14 * v16) + v9 * (v12 * v16) + v10 * (v13 * v16);
  if (v17 <= 0.9999999)
  {
    if (v17 >= -0.9999999)
    {
      v30 = v5 * v14 - v6 * v13;
      v31 = v12 * v6 - v4 * v14;
      v32 = v4 * v13 - v12 * v5;
      v33 = sqrt(v32 * v32 + v31 * v31 + v30 * v30);
      if (v33 <= 1.0e-10)
        v34 = 1.0e10;
      else
        v34 = 1.0 / v33;
      v37 = v30 * v34;
      v38 = v31 * v34;
      v39 = v32 * v34;
      v29 = acos(v17) * 57.2957795;
    }
    else
    {
      v18 = v10 * 0.0;
      v19 = v11 * 0.0;
      v20 = v10 * 0.0 - v11 * 0.0;
      v21 = v11 - v9 * 0.0;
      v22 = v9 * 0.0 - v10;
      v23 = v18 - v11;
      v24 = v19 - v9 * 0.0;
      v25 = v9 - v18;
      if (sqrt(v22 * v22 + v20 * v20 + v21 * v21) < 0.00001)
      {
        v26 = v23;
      }
      else
      {
        v25 = v22;
        v24 = v21;
        v26 = v20;
      }
      v27 = sqrt(v25 * v25 + v26 * v26 + v24 * v24);
      if (v27 <= 1.0e-10)
        v28 = 1.0e10;
      else
        v28 = 1.0 / v27;
      v37 = v26 * v28;
      v38 = v24 * v28;
      v39 = v25 * v28;
      v29 = 180.0;
    }
    sub_20BF0C934(v3, (uint64_t)&v37, v29);
    return v35;
  }
  else
  {
    *a1 = 0x3FF0000000000000;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 0;
  }
  return v3;
}

float64_t pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(float64x2_t *this)
{
  __double2 v2;
  double v3;
  float64x2_t v5;
  double v6;
  double cosval;

  v2 = __sincos_stret(this[1].f64[1] * 0.0174532925 * 0.5);
  v3 = this[1].f64[0] * v2.__sinval;
  v5 = vmulq_n_f64(*this, v2.__sinval);
  v6 = v3;
  cosval = v2.__cosval;
  pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(v5.f64, 1.0e-10);
  return v5.f64[0];
}

double pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(float64x2_t *a1, double *a2, double *a3, double *a4)
{
  char *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  long double v31;
  long double v32;
  double v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  _OWORD v42[8];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  double v72[16];

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v72, a1);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = sqrt(v8 * v8 + v9 * v9 + v10 * v10);
  v12 = 1.0 / v11;
  v13 = v11 <= 1.0e-10;
  v14 = 1.0e10;
  if (v13)
    v12 = 1.0e10;
  v15 = v8 * v12;
  v16 = v9 * v12;
  v17 = v10 * v12;
  v18 = *a3;
  v19 = a3[1];
  v20 = a3[2];
  v21 = sqrt(v18 * v18 + v19 * v19 + v20 * v20);
  if (v21 <= 1.0e-10)
    v22 = 1.0e10;
  else
    v22 = 1.0 / v21;
  v23 = v18 * v22;
  v24 = v19 * v22;
  v25 = v20 * v22;
  v26 = *a4;
  v27 = a4[1];
  v28 = a4[2];
  v29 = sqrt(v26 * v26 + v27 * v27 + v28 * v28);
  if (v29 > 1.0e-10)
    v14 = 1.0 / v29;
  v40 = v27 * v14;
  v41 = v26 * v14;
  v30 = v28 * v14;
  if (fabs(v17 * v25 + v15 * v23 + v16 * v24) >= 0.000001
    || fabs(v17 * v30 + v15 * v41 + v16 * v40) >= 0.000001
    || fabs(v25 * v30 + v23 * v41 + v24 * v40) >= 0.000001)
  {
    v58 = "gf/rotation.cpp";
    v59 = "Decompose";
    v60 = 127;
    v61 = "GfVec3d pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(const GfVec3d &, const GfVec3d &, const GfVec3d &) const";
    LOBYTE(v62) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v58, (pxrInternal__aapl__pxrReserved__ *)"Rotation axes are not orthogonal.", v7);
  }
  v38 = v16;
  v39 = v15;
  v58 = *(char **)&v15;
  v59 = *(const char **)&v23;
  v60 = *(_QWORD *)&v41;
  v61 = 0;
  v62 = v16;
  v63 = v24;
  v64 = v40;
  v65 = 0;
  v66 = v17;
  v67 = v25;
  v37 = v30;
  v68 = v30;
  v69 = 0u;
  v70 = 0u;
  v71 = 0x3FF0000000000000;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v58, (uint64_t)v42);
  v47 = v42[4];
  v48 = v42[5];
  v49 = v42[6];
  v50 = v42[7];
  v43 = v42[0];
  v44 = v42[1];
  v45 = v42[2];
  v46 = v42[3];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v43, v72);
  v54 = v47;
  v55 = v48;
  v56 = v49;
  v57 = v50;
  v51[0] = v43;
  v51[1] = v44;
  v52 = v45;
  v53 = v46;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v51, (double *)&v58);
  v31 = *(double *)v51;
  v32 = *(double *)&v52;
  v33 = sqrt(v31 * v31 + v32 * v32);
  if (v33 <= 0.000001)
  {
    v34 = atan2(-*(double *)&v53, *((long double *)&v52 + 1));
    atan2(-*(double *)&v54, v33);
  }
  else
  {
    v34 = atan2(*((long double *)&v54 + 1), *(long double *)&v55);
    atan2(-*(double *)&v54, v33);
    atan2(v32, v31);
  }
  if ((v39 * v24 - v38 * v23) * v37 + (v38 * v25 - v17 * v24) * v41 + (v17 * v23 - v39 * v25) * v40 >= 0.0)
    v35 = -v34;
  else
    v35 = v34;
  return v35 * 57.2957795;
}

double pxrInternal__aapl__pxrReserved__::GfRotation::RotateOntoProjected(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = sqrt(v3 * v3 + v4 * v4 + v5 * v5);
  if (v6 <= 1.0e-10)
    v7 = 1.0e10;
  else
    v7 = 1.0 / v6;
  v8 = v3 * v7;
  v9 = v4 * v7;
  v10 = v5 * v7;
  v11 = a1[1];
  v12 = a1[2];
  v13 = v12 * v10 + *a1 * v8 + v11 * v9;
  v14 = *a1 - v8 * v13;
  v15 = v11 - v9 * v13;
  v16 = v12 - v10 * v13;
  v17 = a2[1];
  v18 = a2[2];
  v19 = *a2 * v8 + v9 * v17 + v10 * v18;
  v20 = *a2 - v8 * v19;
  v21 = v17 - v9 * v19;
  v22 = v18 - v10 * v19;
  v23 = sqrt(v16 * v16 + v14 * v14 + v15 * v15);
  if (v23 <= 1.0e-10)
    v24 = 1.0e10;
  else
    v24 = 1.0 / v23;
  v25 = v14 * v24;
  v26 = v15 * v24;
  v27 = v16 * v24;
  v28 = sqrt(v22 * v22 + v20 * v20 + v21 * v21);
  if (v28 <= 1.0e-10)
    v29 = 1.0e10;
  else
    v29 = 1.0 / v28;
  v30 = v20 * v29;
  v31 = v21 * v29;
  v32 = v22 * v29;
  v33 = v10 * (v25 * v31 - v26 * v30) + v8 * (v26 * (v22 * v29) - v27 * v31) + v9 * (v27 * v30 - v25 * (v22 * v29));
  v34 = v27 * v32 + v25 * v30 + v26 * v31;
  if (fabs(v33) >= 0.000001 || fabs(v34) >= 0.000001)
    atan2(v33, v34);
  v35 = v10 * v10 + v8 * v8 + v9 * v9;
  if (fabs(v35 + -1.0) >= 1.0e-10)
  {
    v36 = sqrt(v35);
    if (v36 <= 1.0e-10)
      v37 = 1.0e10;
    else
      v37 = 1.0 / v36;
    return v8 * v37;
  }
  return v8;
}

void pxrInternal__aapl__pxrReserved__::GfRotation::MatchClosestEulerRotation(pxrInternal__aapl__pxrReserved__::GfRotation *this, double a2, double a3, double a4, double a5, double *a6, double *a7, double *a8, double *a9)
{
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  int v57;
  uint64_t v58;
  double *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64x2_t v64;
  double *v66;
  double v67[4];
  _QWORD v68[4];
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v9 = this == 0;
  if (this)
    v10 = 4;
  else
    v10 = 3;
  if (!a6)
    v9 = 2;
  v11 = v10 - (a6 == 0);
  if (!a7)
    v9 = 3;
  if (!a8)
    v9 = 4;
  v12 = v11 - (a7 == 0) - (a8 == 0);
  if (v12)
  {
    *(double *)v68 = a2;
    *(double *)&v68[1] = a3;
    *(double *)&v68[2] = a4;
    *(double *)&v68[3] = a5;
    if (v12 > 2)
    {
      if (v12 == 4)
        v29 = 4;
      else
        v29 = 2;
      v30 = 0.0;
      v31 = 0.0;
      if (a7)
        v31 = *a7;
      if (a6)
        v30 = *a6;
      v32 = 0.0;
      v33 = 0.0;
      if (this)
        v33 = *(double *)this;
      if (a8)
        v32 = *a8;
      v34 = 0;
      v35 = 0.0;
      if (this)
        v35 = *(double *)this;
      if (a6)
        v34 = *(_QWORD *)a6;
      v36 = 0;
      v37 = 0;
      if (a7)
        v37 = *(_QWORD *)a7;
      if (a8)
        v36 = *(_QWORD *)a8;
      v69 = v35;
      v70 = v34;
      v71 = v37;
      v72 = v36;
      v38 = v31 + dbl_20CA9B3C0[v31 > 0.0];
      v39 = v30 + dbl_20CA9B3C0[v30 > 0.0];
      v40 = v33 + dbl_20CA9B3C0[v33 > 0.0];
      v41 = v32 + dbl_20CA9B3C0[v32 > 0.0];
      switch(v9)
      {
        case 0:
          v43 = 0.0;
          v44 = 0;
          if (a8)
            v44 = *(_QWORD *)a8;
          v73 = v40;
          v74 = -v39;
          v75 = v38;
          v76 = v44;
          if (a6)
            v43 = *a6;
          v45 = -v43;
          v46 = 0.0;
          v47 = 0.0;
          if (a7)
            v47 = *a7;
          v77 = v40;
          v78 = v45;
          v79 = -v47;
          v80 = v41;
          if (this)
            v46 = *(double *)this;
          v38 = -v38;
          v48 = 3;
          v40 = v46;
          goto LABEL_69;
        case 1:
          if (this)
            v40 = *(double *)this;
          else
            v40 = 0.0;
          goto LABEL_67;
        case 2:
        case 3:
          v38 = 0.0;
          v42 = 0.0;
          if (a6)
            v42 = *a6;
          if (a7)
            v38 = *a7;
          v39 = -v42;
LABEL_67:
          v38 = -v38;
          goto LABEL_68;
        case 4:
          v39 = -v39;
          if (a8)
            v41 = *a8;
          else
            v41 = 0.0;
LABEL_68:
          v48 = 1;
LABEL_69:
          v49 = &v69 + 4 * v48;
          *v49 = v40;
          v49[1] = v39;
          v49[2] = v38;
          v49[3] = v41;
          break;
        default:
          break;
      }
      v50 = 0;
      do
      {
        v51 = (char *)&v69 + v50;
        *(double *)v51 = sub_20BF0D594((uint64_t)v68);
        *((_QWORD *)v51 + 1) = v52;
        *((_QWORD *)v51 + 2) = v53;
        *((_QWORD *)v51 + 3) = v54;
        v50 += 32;
      }
      while (32 * v29 != v50);
      v55 = 0;
      v56 = 0.0;
      v57 = -1;
      do
      {
        v58 = 0;
        v59 = &v69 + 4 * v55;
        v60 = v59[1] - a3;
        v61 = v59[2] - a4;
        v62 = v59[3] - a5;
        v67[0] = *v59 - a2;
        v67[1] = v60;
        v67[2] = v61;
        v67[3] = v62;
        v63 = 0.0;
        do
        {
          v64 = vabsq_f64(*(float64x2_t *)&v67[v58]);
          v63 = v63 + v64.f64[0] + v64.f64[1];
          v58 += 2;
        }
        while (v58 != 4);
        if (v63 < v56 || v55 == 0)
        {
          v56 = v63;
          v57 = v55;
        }
        ++v55;
      }
      while (v55 != v29);
      v66 = &v69 + 4 * v57;
      if (this)
        *(double *)this = *v66;
      if (a6)
        *a6 = v66[1];
      if (a7)
        *a7 = v66[2];
      if (a8)
        *a8 = v66[3];
    }
    else
    {
      v21 = 0;
      v22 = 0.0;
      if (this)
        v22 = *(double *)this;
      if (a6)
        v21 = *(_QWORD *)a6;
      v23 = 0;
      v24 = 0;
      if (a7)
        v24 = *(_QWORD *)a7;
      if (a8)
        v23 = *(_QWORD *)a8;
      v69 = v22;
      v70 = v21;
      v71 = v24;
      v72 = v23;
      v25 = sub_20BF0D594((uint64_t)v68);
      if (this)
        *(double *)this = v25;
      if (a6)
        *(_QWORD *)a6 = v26;
      if (a7)
        *(_QWORD *)a7 = v27;
      if (a8)
        *(_QWORD *)a8 = v28;
    }
  }
}

double sub_20BF0D594(uint64_t a1)
{
  uint64_t i;
  double v2;
  double j;
  double v4;
  __int128 v6;

  for (i = 0; i != 4; ++i)
  {
    v2 = *(double *)(a1 + 8 * i);
    for (j = *((double *)&v6 + i); j > v2 + 3.14159265; j = j + -6.28318531)
      ;
    *((double *)&v6 + i) = j;
    v4 = v2 + -3.14159265;
    if (j < v4)
    {
      do
        j = j + 6.28318531;
      while (j < v4);
      *((double *)&v6 + i) = j;
    }
  }
  return *(double *)&v6;
}

void pxrInternal__aapl__pxrReserved__::GfRotation::DecomposeRotation(double *a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, double *a8, double a9, char a10, uint64_t *a11)
{
  double *v11;
  int v12;
  double *v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::GfRotation *v32;
  double *v33;
  double *v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float64x2_t v47;
  double v48;
  double v49[16];
  float64x2_t v50;
  _BYTE v51[32];
  __int128 v52;
  float64x2_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  float64x2_t v57;
  __int128 v58;
  float64x2_t v59;
  __int128 v60;
  float64x2_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[2];

  if (a5)
    v11 = a5;
  else
    v11 = (double *)v65;
  if (a6)
    v12 = a5 == 0;
  else
    v12 = 2;
  v65[0] = 0;
  if (a6)
    v13 = a6;
  else
    v13 = (double *)v65;
  if (!((unint64_t)a5 | (unint64_t)a6))
  {
    *(_QWORD *)&v57.f64[0] = "gf/rotation.cpp";
    *(_QWORD *)&v57.f64[1] = "DecomposeRotation";
    v14 = 445;
LABEL_12:
    *(_QWORD *)&v58 = v14;
    *((_QWORD *)&v58 + 1) = "static void pxrInternal__aapl__pxrReserved__::GfRotation::DecomposeRotation(const GfMatrix4d"
                            " &, const GfVec3d &, const GfVec3d &, const GfVec3d &, double, double *, double *, double *,"
                            " double *, BOOL, const double *)";
    LOBYTE(v59.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Need three angles to correctly decompose rotation");
    return;
  }
  v15 = a8;
  v16 = a7;
  if (a7)
  {
    if (a8)
    {
      v21 = a4;
      goto LABEL_16;
    }
    if (!v12)
    {
      v21 = a4;
      v12 = 4;
      v15 = (double *)v65;
      goto LABEL_16;
    }
LABEL_30:
    *(_QWORD *)&v57.f64[0] = "gf/rotation.cpp";
    *(_QWORD *)&v57.f64[1] = "DecomposeRotation";
    v14 = 461;
    goto LABEL_12;
  }
  if (v12)
  {
    *(_QWORD *)&v57.f64[0] = "gf/rotation.cpp";
    *(_QWORD *)&v57.f64[1] = "DecomposeRotation";
    v14 = 453;
    goto LABEL_12;
  }
  if (!a8)
    goto LABEL_30;
  v21 = a4;
  v12 = 3;
  v16 = (double *)v65;
LABEL_16:
  if (a11 && v12)
  {
    *(_QWORD *)&v57.f64[0] = "gf/rotation.cpp";
    *(_QWORD *)&v57.f64[1] = "DecomposeRotation";
    *(_QWORD *)&v58 = 470;
    *((_QWORD *)&v58 + 1) = "static void pxrInternal__aapl__pxrReserved__::GfRotation::DecomposeRotation(const GfMatrix4d"
                            " &, const GfVec3d &, const GfVec3d &, const GfVec3d &, double, double *, double *, double *,"
                            " double *, BOOL, const double *)";
    LOBYTE(v59.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v57, (pxrInternal__aapl__pxrReserved__ *)"A swing shift was provided but we're not decomposing into four angles.  The swing shift will be ignored.", (char *)a3);
  }
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
  if (a10)
  {
    v22 = *v11;
    v23 = *v13;
    v24 = *v16;
    v25 = *v15;
  }
  v41 = sub_20BEF834C(a1, (double *)a3);
  v42 = v26;
  v43 = v27;
  v44 = sub_20BEF834C(a1, (double *)a2);
  v45 = v28;
  v46 = v29;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v57, 1.0);
  switch(v12)
  {
    case 0:
    case 4:
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v57, v44), vmulq_n_f64(v59, v45)), vmulq_n_f64(v61, v46));
      v48 = v44 * *(double *)&v58 + v45 * *(double *)&v60 + v46 * *(double *)&v62;
      sub_20BF0E254(v47.f64, (double *)a2, v21, v16, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v44), vmulq_n_f64(*(float64x2_t *)&v51[16], v45)), vmulq_n_f64(v53, v46));
      v48 = v44 * *(double *)v51 + v45 * *(double *)&v52 + v46 * *(double *)&v54;
      sub_20BF0E254(v47.f64, (double *)a2, (double *)a3, v13, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v41), vmulq_n_f64(*(float64x2_t *)&v51[16], v42)), vmulq_n_f64(v53, v43));
      v48 = v41 * *(double *)v51 + v42 * *(double *)&v52 + v43 * *(double *)&v54;
      sub_20BF0E254(v47.f64, (double *)a3, (double *)a2, v11, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      *v13 = -(a9 * *v13);
      *v16 = -(a9 * *v16);
      *v11 = -(a9 * *v11);
      if (a11)
        v31 = *a11;
      else
        v31 = 0;
      *(_QWORD *)v15 = v31;
      break;
    case 1:
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v57, v41), vmulq_n_f64(v59, v42)), vmulq_n_f64(v61, v43));
      v48 = v41 * *(double *)&v58 + v42 * *(double *)&v60 + v43 * *(double *)&v62;
      sub_20BF0E254(v47.f64, (double *)a3, (double *)a2, v15, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v41), vmulq_n_f64(*(float64x2_t *)&v51[16], v42)), vmulq_n_f64(v53, v43));
      v48 = v41 * *(double *)v51 + v42 * *(double *)&v52 + v43 * *(double *)&v54;
      sub_20BF0E254(v47.f64, (double *)a3, v21, v16, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v44), vmulq_n_f64(*(float64x2_t *)&v51[16], v45)), vmulq_n_f64(v53, v46));
      v48 = v44 * *(double *)v51 + v45 * *(double *)&v52 + v46 * *(double *)&v54;
      sub_20BF0E254(v47.f64, (double *)a2, (double *)a3, v13, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      *v15 = -(a9 * *v15);
      *v13 = -(a9 * *v13);
      *v16 = -(a9 * *v16);
      break;
    case 2:
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v57, v44), vmulq_n_f64(v59, v45)), vmulq_n_f64(v61, v46));
      v48 = v44 * *(double *)&v58 + v45 * *(double *)&v60 + v46 * *(double *)&v62;
      sub_20BF0E254(v47.f64, (double *)a3, (double *)a2, v15, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v44), vmulq_n_f64(*(float64x2_t *)&v51[16], v45)), vmulq_n_f64(v53, v46));
      v48 = v44 * *(double *)v51 + v45 * *(double *)&v52 + v46 * *(double *)&v54;
      sub_20BF0E254(v47.f64, (double *)a2, v21, v16, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v41), vmulq_n_f64(*(float64x2_t *)&v51[16], v42)), vmulq_n_f64(v53, v43));
      v48 = v41 * *(double *)v51 + v42 * *(double *)&v52 + v43 * *(double *)&v54;
      sub_20BF0E254(v47.f64, (double *)a3, (double *)a2, v11, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      *v15 = -(a9 * *v15);
      *v16 = -(a9 * *v16);
      goto LABEL_34;
    case 3:
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v57, v44), vmulq_n_f64(v59, v45)), vmulq_n_f64(v61, v46));
      v48 = v44 * *(double *)&v58 + v45 * *(double *)&v60 + v46 * *(double *)&v62;
      sub_20BF0E254(v47.f64, v21, (double *)a2, v15, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v44), vmulq_n_f64(*(float64x2_t *)&v51[16], v45)), vmulq_n_f64(v53, v46));
      v48 = v44 * *(double *)v51 + v45 * *(double *)&v52 + v46 * *(double *)&v54;
      sub_20BF0E254(v47.f64, (double *)a2, (double *)a3, v13, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v41), vmulq_n_f64(*(float64x2_t *)&v51[16], v42)), vmulq_n_f64(v53, v43));
      v48 = v41 * *(double *)v51 + v42 * *(double *)&v52 + v43 * *(double *)&v54;
      sub_20BF0E254(v47.f64, (double *)a3, (double *)a2, v11, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      v53 = v61;
      v54 = v62;
      v55 = v63;
      v56 = v64;
      v50 = v57;
      *(_OWORD *)v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      v61 = v53;
      v62 = v54;
      v63 = v55;
      v64 = v56;
      v57 = v50;
      v58 = *(_OWORD *)v51;
      v59 = *(float64x2_t *)&v51[16];
      v60 = v52;
      *v15 = -(a9 * *v15);
      *v13 = -(a9 * *v13);
LABEL_34:
      *v11 = -(a9 * *v11);
      break;
    default:
      break;
  }
  if (v12 == 1)
    v32 = 0;
  else
    v32 = (pxrInternal__aapl__pxrReserved__::GfRotation *)v11;
  if (v12 == 2)
    v33 = 0;
  else
    v33 = v13;
  if (v12 == 3)
    v34 = 0;
  else
    v34 = v16;
  if (v12 == 4)
    v35 = 0;
  else
    v35 = v15;
  pxrInternal__aapl__pxrReserved__::GfRotation::MatchClosestEulerRotation(v32, v22, v23, v24, v25, v33, v34, v35, v30);
  v50 = *(float64x2_t *)a2;
  *(_QWORD *)v51 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&v51[8] = *(_OWORD *)a3;
  *(_QWORD *)&v51[24] = *(_QWORD *)(a3 + 16);
  v52 = *(_OWORD *)v21;
  v53.f64[0] = v21[2];
  switch(v12)
  {
    case 0:
    case 4:
      v36 = *v13;
      v37 = v36
          + pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetHandedness((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v50)
          * 1.57079633;
      v38 = v11;
      v39 = v16;
      goto LABEL_56;
    case 1:
      v40 = *v16;
      v37 = v40
          + pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetHandedness((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v50)
          * 1.57079633;
      v38 = v13;
      goto LABEL_55;
    case 2:
      v37 = *v16;
      goto LABEL_54;
    case 3:
      v37 = *v13;
LABEL_54:
      v38 = v11;
LABEL_55:
      v39 = v15;
LABEL_56:
      sub_20BF0E2AC(v38, v39, v37);
      break;
    default:
      return;
  }
}

double sub_20BF0E254@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a5@<X8>)
{
  float64_t v7;
  uint64_t v8;
  double v9;
  double result;
  float64x2_t v11;
  uint64_t v12;
  double v13;

  v11.f64[0] = pxrInternal__aapl__pxrReserved__::GfRotation::RotateOntoProjected(a1, a2, a3);
  v11.f64[1] = v7;
  v12 = v8;
  v13 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(a5, &v11);
  if (a4)
  {
    result = v13 / 57.2957795;
    *a4 = v13 / 57.2957795;
  }
  return result;
}

double sub_20BF0E2AC(double *a1, double *a2, double a3)
{
  double result;
  double v4;

  result = fabs(a3);
  if (fabs(result + -3.14159265) < 0.000001)
  {
    v4 = *a2 - *a1;
    *a2 = v4 * 0.5;
    *a1 = v4 * -0.5;
  }
  if (result < 0.000001)
  {
    result = (*a2 + *a1) * 0.5;
    *a2 = result;
    *a1 = result;
  }
  return result;
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(float64x2_t *a1, float *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v3;
  _OWORD v5[8];

  memset(v5, 0, sizeof(v5));
  v3 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v5, a1);
  return sub_20BF0E368((float64x2_t *)v3, a2);
}

float32x2_t sub_20BF0E368(float64x2_t *a1, float *a2)
{
  return vcvt_f32_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, *a2), vmulq_n_f64(a1[2], a2[1])), vmulq_n_f64(a1[4], a2[2])));
}

double pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(float64x2_t *a1, double *a2)
{
  double *v3;
  _OWORD v5[8];

  memset(v5, 0, sizeof(v5));
  v3 = (double *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v5, a1);
  return sub_20BEF834C(v3, a2);
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfRotation::operator*=(float64x2_t *a1, float64x2_t *this)
{
  float64_t Quat;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64_t v10;
  double v11;
  double v12;
  double v13;
  __int128 *v14;
  __int128 v15;
  long double Normalized;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  long double v23;
  double v25[4];
  __int128 v26;
  __int128 v27;

  Quat = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(this);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a1);
  v25[0] = v11;
  v25[1] = v10;
  v25[2] = v12;
  v25[3] = v13;
  *(_QWORD *)&v26 = v9;
  *((float64_t *)&v26 + 1) = Quat;
  *(_QWORD *)&v27 = v5;
  *((_QWORD *)&v27 + 1) = v7;
  pxrInternal__aapl__pxrReserved__::GfQuaternion::operator*=((double *)&v26, v25);
  v15 = v14[1];
  v26 = *v14;
  v27 = v15;
  Normalized = pxrInternal__aapl__pxrReserved__::GfQuaternion::GetNormalized((pxrInternal__aapl__pxrReserved__::GfQuaternion *)&v26, 1.0e-10);
  v20 = sqrt(v19 * v19 + v17 * v17 + v18 * v18);
  v21 = 0.0;
  if (v20 > 1.0e-10)
  {
    v22 = 1.0 / v20;
    a1->f64[0] = v17 * v22;
    a1->f64[1] = v18 * v22;
    a1[1].f64[0] = v19 * v22;
    v23 = acos(Normalized);
    v21 = v23 * 57.2957795 + v23 * 57.2957795;
  }
  a1[1].f64[1] = v21;
  return a1;
}

uint64_t *sub_20BF0E57C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C0D0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C0D0, (char *)0x20, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0E638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF0E6D8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C0E0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C0E0, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0E794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF0E84C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C0F0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C0F0, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0E908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::GfTransform::Set(uint64_t a1, __int128 *a2, _OWORD *a3, __int128 *a4, __int128 *a5, __n128 *a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v6 = *a2;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 56) = v6;
  v7 = a3[1];
  *(_OWORD *)(a1 + 80) = *a3;
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *a4;
  *(_OWORD *)(a1 + 40) = a4[1];
  *(_OWORD *)(a1 + 24) = v8;
  v9 = *a5;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(a1 + 112) = v9;
  result = *a6;
  *(_QWORD *)(a1 + 16) = a6[1].n128_u64[0];
  *(__n128 *)a1 = result;
  return result;
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfTransform::SetMatrix(float64x2_t *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  float64_t v4;
  float64_t v5;
  float64_t v6;
  float64_t v7;
  float64_t v8;
  float64_t v9;
  float64_t v10;
  _BYTE v12[128];
  _BYTE v13[128];
  _OWORD v14[8];
  float64x2_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float64x2_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31[16];
  _OWORD v32[8];

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v32, (uint64_t)&this[7]);
  v4 = -this[8].f64[0];
  v23 = vnegq_f64(this[7]);
  *(float64_t *)&v24 = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v31, (uint64_t)&v23);
  v19 = v32[4];
  v20 = v32[5];
  v21 = v32[6];
  v22 = v32[7];
  v15 = (float64x2_t)v32[0];
  v16 = v32[1];
  v17 = v32[2];
  v18 = v32[3];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v15.f64, (double *)a2);
  v27 = v19;
  v28 = v20;
  v29 = v21;
  v30 = v22;
  v23 = v15;
  v24 = v16;
  v25 = v17;
  v26 = v18;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v23.f64, v31);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)&v23, (__int128 *)&v15, (uint64_t)&this[3].f64[1], v14, (uint64_t)this, (uint64_t)v13, 1.0e-10);
  this[1].f64[1] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v14);
  this[2].f64[0] = v5;
  this[2].f64[1] = v6;
  this[3].f64[0] = v7;
  if (this[3].f64[1] == 1.0 && this[4].f64[0] == 1.0 && this[4].f64[1] == 1.0)
  {
    this[5].f64[0] = 1.0;
    this[5].f64[1] = 0.0;
    this[6].f64[0] = 0.0;
    this[6].f64[1] = 0.0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v15, (uint64_t)v12);
    this[5].f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v12);
    this[5].f64[1] = v8;
    this[6].f64[0] = v9;
    this[6].f64[1] = v10;
  }
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::GfTransform::SetIdentity(pxrInternal__aapl__pxrReserved__::GfTransform *this)
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)((char *)this + 56) = result;
  *(__n128 *)((char *)this + 72) = result;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfTransform::GetMatrix(pxrInternal__aapl__pxrReserved__::GfTransform *this@<X0>, double *a2@<X8>)
{
  char *v4;
  double v5;
  _BOOL4 v6;
  _BOOL4 v7;
  BOOL v8;
  double v9;
  double v10;
  int v11;
  double *v12;
  float64_t v13;
  uint64_t v14;
  uint64_t v15;
  float64_t v16;
  float64_t v17;
  uint64_t v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  float64x2_t v23;
  uint64_t v24;

  v4 = (char *)this + 112;
  v5 = *((double *)this + 14);
  v6 = v5 != 0.0 || *((double *)this + 15) != 0.0 || *((double *)this + 16) != 0.0;
  v7 = *((double *)this + 7) != 1.0 || *((double *)this + 8) != 1.0 || *((double *)this + 9) != 1.0;
  v8 = *(double *)this != 0.0 || *((double *)this + 1) != 0.0 || *((double *)this + 2) != 0.0;
  v9 = *((double *)this + 13);
  v10 = *((double *)this + 6);
  if (v6)
  {
    v22 = -v5;
    v23 = vnegq_f64(*(float64x2_t *)((char *)this + 120));
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)a2, (uint64_t)&v22);
  }
  v11 = v6;
  if (v7)
  {
    if (v9 == 0.0)
    {
      if (!v6)
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)a2, (_QWORD *)this + 7);
        if (v10 == 0.0)
        {
LABEL_40:
          if (!v8)
            return;
          goto LABEL_41;
        }
        goto LABEL_28;
      }
    }
    else
    {
      v12 = (double *)((char *)this + 80);
      if (v6)
      {
        v19.f64[0] = sub_20BEF83AC(v12);
        v19.f64[1] = v13;
        v20 = v14;
        v21 = v15;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v22, &v19);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
      }
      else
      {
        v22 = sub_20BEF83AC(v12);
        v23.f64[0] = v16;
        v23.f64[1] = v17;
        v24 = v18;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)a2, (float64x2_t *)&v22);
      }
    }
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)&v22, (_QWORD *)this + 7);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
    if (v9 != 0.0)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v22, (float64x2_t *)this + 5);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
    }
    v11 = 1;
  }
  if (v10 == 0.0)
    goto LABEL_31;
  if (!v11)
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)a2, (float64x2_t *)((char *)this + 24));
    goto LABEL_30;
  }
LABEL_28:
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v22, (float64x2_t *)((char *)this + 24));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
LABEL_30:
  v11 = 1;
LABEL_31:
  if (!v6)
    goto LABEL_34;
  if (!v11)
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)a2, (uint64_t)v4);
    goto LABEL_40;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)&v22, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
LABEL_34:
  if (v8)
  {
    if (!v11)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)a2, (uint64_t)this);
      return;
    }
LABEL_41:
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)&v22, (uint64_t)this);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
    return;
  }
  if ((v11 & 1) == 0)
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)a2, 1.0);
}

BOOL pxrInternal__aapl__pxrReserved__::GfTransform::operator==(double *a1, double *a2)
{
  return a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[14] == a2[14]
      && a1[15] == a2[15]
      && a1[16] == a2[16]
      && *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2];
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfTransform::operator*=(pxrInternal__aapl__pxrReserved__::GfTransform *a1, pxrInternal__aapl__pxrReserved__::GfTransform *a2)
{
  double v5[16];
  _OWORD v6[8];
  _OWORD v7[8];

  pxrInternal__aapl__pxrReserved__::GfTransform::GetMatrix(a1, (double *)v6);
  pxrInternal__aapl__pxrReserved__::GfTransform::GetMatrix(a2, v5);
  v7[4] = v6[4];
  v7[5] = v6[5];
  v7[6] = v6[6];
  v7[7] = v6[7];
  v7[0] = v6[0];
  v7[1] = v6[1];
  v7[2] = v6[2];
  v7[3] = v6[3];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v7, v5);
  return pxrInternal__aapl__pxrReserved__::GfTransform::SetMatrix((float64x2_t *)a1, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v7);
}

uint64_t *sub_20BF0F128()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C100, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C100, (char *)0x88, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0F1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2d::operator==(double *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2d::operator==(double *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2d::operator==(double *a1, int *a2)
{
  return *a1 == (double)*a2 && a1[1] == (double)a2[1];
}

uint64_t *sub_20BF0F344()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C110, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C110, (char *)0x10, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0F400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2f::operator==(float *a1, double *a2)
{
  return *a2 == *a1 && a2[1] == a1[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2f::operator==(float *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2f::operator==(float *a1, int *a2)
{
  return *a1 == (float)*a2 && a1[1] == (float)a2[1];
}

uint64_t *sub_20BF0F558()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C120, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C120, (char *)8, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0F614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2h::operator==(unsigned __int16 *a1, double *a2)
{
  return *a2 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
      && a2[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2h::operator==(unsigned __int16 *a1, float *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == *a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == a2[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2h::operator==(unsigned __int16 *a1, int *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == (float)*a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == (float)a2[1];
}

uint64_t *sub_20BF0F78C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C130, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C130, (char *)4, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0F848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2i::operator==(int *a1, double *a2)
{
  return *a2 == (double)*a1 && a2[1] == (double)a1[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2i::operator==(int *a1, float *a2)
{
  return *a2 == (float)*a1 && a2[1] == (float)a1[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2i::operator==(int *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2] == (float)*a1
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]] == (float)a1[1];
}

uint64_t *sub_20BF0F9A8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C140, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C140, (char *)8, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF0FA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3d::operator==(double *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3d::operator==(double *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && a1[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3d::operator==(double *a1, int *a2)
{
  return *a1 == (double)*a2 && a1[1] == (double)a2[1] && a1[2] == (double)a2[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfOrthogonalizeBasis(double *a1, double *a2, double *a3, int a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  _BOOL8 v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;

  v5 = *a1;
  if (a4)
  {
    v6 = a1[1];
    v7 = a1[2];
    v8 = sqrt(v5 * v5 + v6 * v6 + v7 * v7);
    v9 = 1.0 / v8;
    v10 = v8 <= 1.0e-10;
    v11 = 1.0e10;
    if (v10)
      v9 = 1.0e10;
    *a1 = v5 * v9;
    a1[1] = v6 * v9;
    a1[2] = v7 * v9;
    v12 = *a2;
    v13 = a2[1];
    v14 = a2[2];
    v15 = sqrt(v12 * v12 + v13 * v13 + v14 * v14);
    if (v15 <= 1.0e-10)
      v16 = 1.0e10;
    else
      v16 = 1.0 / v15;
    *a2 = v12 * v16;
    a2[1] = v13 * v16;
    a2[2] = v14 * v16;
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[2];
    v20 = sqrt(v17 * v17 + v18 * v18 + v19 * v19);
    if (v20 > 1.0e-10)
      v11 = 1.0 / v20;
    v21 = v17 * v11;
    v22 = v18 * v11;
    *a3 = v17 * v11;
    a3[1] = v18 * v11;
    v23 = v19 * v11;
    a3[2] = v19 * v11;
    v5 = *a1;
    v24 = a1[1];
    v25 = a1[2];
    v26 = *a2;
    v27 = a2[1];
    v28 = v21;
    v29 = v22;
    v30 = v23;
    v31 = *a2;
    v32 = v27;
    v33 = a2[2];
    v34 = v33;
    v35 = *a1;
    v36 = v24;
    v37 = v25;
  }
  else
  {
    v24 = a1[1];
    v25 = a1[2];
    v26 = *a2;
    v27 = a2[1];
    v33 = a2[2];
    v21 = *a3;
    v22 = a3[1];
    v23 = a3[2];
    v38 = sqrt(v5 * v5 + v24 * v24 + v25 * v25);
    v39 = 1.0 / v38;
    v10 = v38 <= 1.0e-10;
    v40 = 1.0e10;
    if (v10)
      v41 = 1.0e10;
    else
      v41 = v39;
    v35 = v5 * v41;
    v36 = v24 * v41;
    v37 = v25 * v41;
    v42 = sqrt(v26 * v26 + v27 * v27 + v33 * v33);
    if (v42 <= 1.0e-10)
      v43 = 1.0e10;
    else
      v43 = 1.0 / v42;
    v31 = v26 * v43;
    v32 = v27 * v43;
    v34 = v33 * v43;
    v44 = sqrt(v21 * v21 + v22 * v22 + v23 * v23);
    if (v44 > 1.0e-10)
      v40 = 1.0 / v44;
    v28 = v21 * v40;
    v29 = v22 * v40;
    v30 = v23 * v40;
  }
  v45 = a5 * a5;
  if ((v35 - v31) * (v35 - v31) + (v36 - v32) * (v36 - v32) + (v37 - v34) * (v37 - v34) <= v45
    || (v35 - v28) * (v35 - v28) + (v36 - v29) * (v36 - v29) + (v37 - v30) * (v37 - v30) <= v45
    || (v31 - v28) * (v31 - v28) + (v32 - v29) * (v32 - v29) + (v34 - v30) * (v34 - v30) <= v45)
  {
    return 0;
  }
  v46 = 20;
  do
  {
    v47 = v31 * v5 + v32 * v24 + v34 * v25;
    v48 = v5 - v31 * v47;
    v49 = v24 - v32 * v47;
    v50 = v25 - v34 * v47;
    v51 = v30 * v50 + v28 * v48 + v29 * v49;
    v52 = v48 - v28 * v51;
    v53 = v49 - v29 * v51;
    v54 = v50 - v30 * v51;
    v55 = v35 * v26 + v36 * v27 + v37 * v33;
    v56 = v26 - v35 * v55;
    v57 = v27 - v36 * v55;
    v58 = v33 - v37 * v55;
    v59 = v30 * v58 + v28 * v56 + v29 * v57;
    v60 = v56 - v28 * v59;
    v61 = v57 - v29 * v59;
    v62 = v58 - v30 * v59;
    v63 = v35 * v21 + v36 * v22 + v37 * v23;
    v64 = v21 - v35 * v63;
    v65 = v22 - v36 * v63;
    v66 = v23 - v37 * v63;
    v67 = v34 * v66 + v31 * v64 + v32 * v65;
    v68 = v32 * v67;
    v69 = v34 * v67;
    v70 = v64 - v31 * v67;
    v71 = v65 - v68;
    v72 = v66 - v69;
    v73 = (v5 + v52) * 0.5;
    v74 = (v24 + v53) * 0.5;
    v75 = (v25 + v54) * 0.5;
    v76 = (v26 + v60) * 0.5;
    v77 = (v27 + v61) * 0.5;
    v78 = (v33 + v62) * 0.5;
    v79 = (v21 + v70) * 0.5;
    v80 = (v22 + v71) * 0.5;
    v81 = (v23 + v72) * 0.5;
    if (a4)
    {
      v82 = sqrt(v75 * v75 + v73 * v73 + v74 * v74);
      v83 = 1.0 / v82;
      v10 = v82 <= 1.0e-10;
      v84 = 1.0e10;
      if (v10)
        v83 = 1.0e10;
      v73 = v73 * v83;
      v74 = v74 * v83;
      v75 = v75 * v83;
      v85 = sqrt(v78 * v78 + v76 * v76 + v77 * v77);
      if (v85 <= 1.0e-10)
        v86 = 1.0e10;
      else
        v86 = 1.0 / v85;
      v76 = v76 * v86;
      v77 = v77 * v86;
      v78 = v78 * v86;
      v87 = sqrt(v81 * v81 + v79 * v79 + v80 * v80);
      if (v87 > 1.0e-10)
        v84 = 1.0 / v87;
      v79 = v79 * v84;
      v80 = v80 * v84;
      v81 = v81 * v84;
    }
    v88 = (v21 - v79) * (v21 - v79)
        + (v22 - v80) * (v22 - v80)
        + (v23 - v81) * (v23 - v81)
        + (v26 - v76) * (v26 - v76)
        + (v27 - v77) * (v27 - v77)
        + (v33 - v78) * (v33 - v78)
        + (v5 - v73) * (v5 - v73)
        + (v24 - v74) * (v24 - v74)
        + (v25 - v75) * (v25 - v75);
    v89 = v88 < v45;
    if (v88 < v45)
      break;
    *a1 = v73;
    a1[1] = v74;
    a1[2] = v75;
    *a2 = v76;
    a2[1] = v77;
    a2[2] = v78;
    *a3 = v79;
    a3[1] = v80;
    a3[2] = v81;
    v26 = *a2;
    v27 = a2[1];
    v33 = a2[2];
    v28 = v79;
    v29 = v80;
    v30 = v81;
    v31 = *a2;
    v32 = v27;
    v34 = v33;
    v5 = *a1;
    v24 = a1[1];
    v35 = *a1;
    v36 = v24;
    v25 = a1[2];
    v37 = v25;
    if ((a4 & 1) == 0)
    {
      v90 = sqrt(v5 * v5 + v24 * v24 + v25 * v25);
      v91 = 1.0 / v90;
      v10 = v90 <= 1.0e-10;
      v92 = 1.0e10;
      if (v10)
        v91 = 1.0e10;
      v35 = v5 * v91;
      v36 = v24 * v91;
      v37 = v25 * v91;
      v93 = sqrt(v26 * v26 + v27 * v27 + v33 * v33);
      if (v93 <= 1.0e-10)
        v94 = 1.0e10;
      else
        v94 = 1.0 / v93;
      v31 = v26 * v94;
      v32 = v27 * v94;
      v34 = v33 * v94;
      v95 = sqrt(v79 * v79 + v80 * v80 + v81 * v81);
      if (v95 > 1.0e-10)
        v92 = 1.0 / v95;
      v28 = v79 * v92;
      v29 = v80 * v92;
      v30 = v81 * v92;
    }
    v23 = v81;
    v22 = v80;
    v21 = v79;
    --v46;
  }
  while (v46);
  return v89;
}

double pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(double *a1, uint64_t a2, uint64_t a3, double result)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 == 0.0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    v8 = v4 * (1.0 / v7);
    v9 = 1.0 / v7 * v5;
    v10 = 1.0 / v7 * v6;
    v11 = v9 * 0.0;
    v12 = v10 * 0.0 - v9 * 0.0;
    v13 = v8 * 0.0 - v10;
    v14 = v9 - v8 * 0.0;
    v15 = v12 * v12 + v13 * v13 + v14 * v14;
    if (v15 < 0.00000001)
    {
      v12 = v10 - v11;
      v13 = v8 * 0.0 - v10 * 0.0;
      v14 = v11 - v8;
      v15 = v12 * v12 + v13 * v13 + v14 * v14;
    }
    v16 = sqrt(v15);
    v17 = 1.0 / v16;
    if (v16 <= 1.0e-10)
      v17 = 1.0e10;
    v18 = v12 * v17;
    v19 = v13 * v17;
    *(double *)a2 = v18;
    *(double *)(a2 + 8) = v19;
    v20 = v14 * v17;
    *(double *)(a2 + 16) = v20;
    *(double *)a3 = v9 * v20 - v10 * v19;
    *(double *)(a3 + 8) = v10 * v18 - v8 * v20;
    *(double *)(a3 + 16) = v8 * v19 - v9 * v18;
    if (v7 < result)
    {
      v21 = v7 / result;
      *(float64x2_t *)a2 = vmulq_n_f64(*(float64x2_t *)a2, v21);
      *(double *)(a2 + 16) = v21 * *(double *)(a2 + 16);
      *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, v21);
      result = v21 * *(double *)(a3 + 16);
      *(double *)(a3 + 16) = result;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfSlerp(double *a1, double *a2, double a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;
  _BYTE v13[24];
  uint64_t v14;

  v5 = a1[1];
  v6 = a2[1];
  v7 = a1[2];
  v8 = a2[2];
  v9 = *a1 * *a2 + v5 * v6 + v7 * v8;
  v10 = 1.0;
  if (v9 <= 1.0)
    v10 = *a1 * *a2 + v5 * v6 + v7 * v8;
  if (v9 >= -1.0)
    v11 = v10;
  else
    v11 = -1.0;
  v12 = acos(v11);
  if (fabs(v12) >= 0.001)
  {
    if (fabs(sin(v12)) >= 0.00001)
    {
      sin((1.0 - a3) * v12);
      sin(v12 * a3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(a1, (uint64_t)&v14, (uint64_t)v13, 1.0e-10);
      __sincos_stret(a3 * 3.14159265);
    }
  }
}

uint64_t *sub_20BF1050C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C150, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C150, (char *)0x18, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF105C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3f::operator==(float *a1, double *a2)
{
  return *a2 == *a1 && a2[1] == a1[1] && a2[2] == a1[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3f::operator==(float *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && a1[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3f::operator==(float *a1, int *a2)
{
  return *a1 == (float)*a2 && a1[1] == (float)a2[1] && a1[2] == (float)a2[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfOrthogonalizeBasis(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  double v68;
  double v69;
  double v70;
  double v71;
  _BOOL8 result;
  double v73;
  double v74;
  double v75;

  if (a4)
  {
    sub_20BF10F48(a1, 1.0e-10);
    sub_20BF10F48(a2, 1.0e-10);
    sub_20BF10F48(a3, 1.0e-10);
    v10 = a1->f32[0];
    v11 = a1->f32[1];
    v12 = a1[1].f32[0];
    v13 = a2->f32[0];
    v14 = a2->f32[1];
    v16 = a3->f32[0];
    v15 = a3->f32[1];
    v17 = a3[1].f32[0];
    v18 = a3->f32[0];
    v19 = v15;
    v20 = v17;
    v21 = a2->f32[0];
    v22 = v14;
    v23 = a2[1].f32[0];
    v24 = v23;
    v25 = a1->f32[0];
    v26 = v11;
    v27 = v12;
  }
  else
  {
    v10 = a1->f32[0];
    v11 = a1->f32[1];
    v12 = a1[1].f32[0];
    v13 = a2->f32[0];
    v14 = a2->f32[1];
    v23 = a2[1].f32[0];
    v16 = a3->f32[0];
    v15 = a3->f32[1];
    v17 = a3[1].f32[0];
    v28 = 1.0 / fmaxf(sqrtf((float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v12 * v12)), 1.0e-10);
    v25 = v28 * a1->f32[0];
    v26 = v28 * v11;
    v27 = v28 * v12;
    v29 = 1.0 / fmaxf(sqrtf((float)((float)(v13 * v13) + (float)(v14 * v14)) + (float)(v23 * v23)), 1.0e-10);
    v21 = v29 * a2->f32[0];
    v22 = v29 * v14;
    v24 = v29 * v23;
    v30 = 1.0 / fmaxf(sqrtf((float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17)), 1.0e-10);
    v18 = v30 * a3->f32[0];
    v19 = v30 * v15;
    v20 = v30 * v17;
  }
  v31 = a5 * a5;
  if (a5 * a5 >= (float)((float)((float)((float)(v25 - v21) * (float)(v25 - v21))
                                + (float)((float)(v26 - v22) * (float)(v26 - v22)))
                        + (float)((float)(v27 - v24) * (float)(v27 - v24)))
    || v31 >= (float)((float)((float)((float)(v25 - v18) * (float)(v25 - v18))
                            + (float)((float)(v26 - v19) * (float)(v26 - v19)))
                    + (float)((float)(v27 - v20) * (float)(v27 - v20)))
    || v31 >= (float)((float)((float)((float)(v21 - v18) * (float)(v21 - v18))
                            + (float)((float)(v22 - v19) * (float)(v22 - v19)))
                    + (float)((float)(v24 - v20) * (float)(v24 - v20))))
  {
    return 0;
  }
  v32 = 20;
  do
  {
    v33 = (float)((float)(v21 * v10) + (float)(v22 * v11)) + (float)(v24 * v12);
    v34 = v10 - (float)(v21 * v33);
    v35 = v11 - (float)(v22 * v33);
    v36 = v12 - (float)(v24 * v33);
    v37 = (float)(v20 * v36) + (float)((float)(v18 * v34) + (float)(v19 * v35));
    v38 = v34 - (float)(v18 * v37);
    v39 = v35 - (float)(v19 * v37);
    v40 = v36 - (float)(v20 * v37);
    v41 = (float)((float)(v25 * v13) + (float)(v26 * v14)) + (float)(v27 * v23);
    v42 = v13 - (float)(v25 * v41);
    v43 = v14 - (float)(v26 * v41);
    v44 = v23 - (float)(v27 * v41);
    v45 = (float)(v20 * v44) + (float)((float)(v18 * v42) + (float)(v19 * v43));
    v46 = v42 - (float)(v18 * v45);
    v47 = v43 - (float)(v19 * v45);
    v48 = v44 - (float)(v20 * v45);
    v49 = (float)((float)(v25 * v16) + (float)(v26 * v15)) + (float)(v27 * v17);
    v50 = v16 - (float)(v25 * v49);
    v51 = v15 - (float)(v26 * v49);
    v52 = v17 - (float)(v27 * v49);
    v53 = (float)(v24 * v52) + (float)((float)(v21 * v50) + (float)(v22 * v51));
    v54 = v22 * v53;
    v55 = v24 * v53;
    v56 = v50 - (float)(v21 * v53);
    v57 = v51 - v54;
    v58 = v52 - v55;
    v59 = (float)(v10 + v38) * 0.5;
    v60 = (float)(v11 + v39) * 0.5;
    v61 = (float)(v12 + v40) * 0.5;
    v62 = (float)(v13 + v46) * 0.5;
    v63 = (float)(v14 + v47) * 0.5;
    v64 = (float)(v23 + v48) * 0.5;
    v65 = (float)(v16 + v56) * 0.5;
    v66 = (float)(v15 + v57) * 0.5;
    v67 = (float)(v17 + v58) * 0.5;
    if (a4)
    {
      v68 = 1.0 / fmaxf(sqrtf((float)(v61 * v61) + (float)((float)(v59 * v59) + (float)(v60 * v60))), 1.0e-10);
      v59 = v68 * v59;
      v60 = v68 * v60;
      v61 = v68 * v61;
      v69 = 1.0 / fmaxf(sqrtf((float)(v64 * v64) + (float)((float)(v62 * v62) + (float)(v63 * v63))), 1.0e-10);
      v62 = v69 * v62;
      v63 = v69 * v63;
      v64 = v69 * v64;
      v70 = 1.0 / fmaxf(sqrtf((float)(v67 * v67) + (float)((float)(v65 * v65) + (float)(v66 * v66))), 1.0e-10);
      v65 = v70 * v65;
      v66 = v70 * v66;
      v67 = v70 * v67;
    }
    v71 = (float)((float)((float)((float)((float)(v16 - v65) * (float)(v16 - v65))
                                + (float)((float)(v15 - v66) * (float)(v15 - v66)))
                        + (float)((float)(v17 - v67) * (float)(v17 - v67)))
                + (float)((float)((float)((float)((float)(v13 - v62) * (float)(v13 - v62))
                                        + (float)((float)(v14 - v63) * (float)(v14 - v63)))
                                + (float)((float)(v23 - v64) * (float)(v23 - v64)))
                        + (float)((float)((float)((float)(v10 - v59) * (float)(v10 - v59))
                                        + (float)((float)(v11 - v60) * (float)(v11 - v60)))
                                + (float)((float)(v12 - v61) * (float)(v12 - v61)))));
    result = v31 > v71;
    if (v31 > v71)
      break;
    a1->f32[0] = v59;
    a1->f32[1] = v60;
    a1[1].f32[0] = v61;
    a2->f32[0] = v62;
    a2->f32[1] = v63;
    a2[1].f32[0] = v64;
    a3->f32[0] = v65;
    a3->f32[1] = v66;
    a3[1].f32[0] = v67;
    v13 = a2->f32[0];
    v14 = a2->f32[1];
    v23 = a2[1].f32[0];
    v18 = v65;
    v19 = v66;
    v20 = v67;
    v21 = a2->f32[0];
    v22 = v14;
    v24 = v23;
    v10 = a1->f32[0];
    v11 = a1->f32[1];
    v25 = a1->f32[0];
    v26 = v11;
    v12 = a1[1].f32[0];
    v27 = v12;
    if ((a4 & 1) == 0)
    {
      v73 = 1.0 / fmaxf(sqrtf((float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v12 * v12)), 1.0e-10);
      v25 = v73 * v10;
      v26 = v73 * v11;
      v27 = v73 * v12;
      v74 = 1.0 / fmaxf(sqrtf((float)((float)(v13 * v13) + (float)(v14 * v14)) + (float)(v23 * v23)), 1.0e-10);
      v21 = v74 * v13;
      v22 = v74 * v14;
      v24 = v74 * v23;
      v75 = 1.0 / fmaxf(sqrtf((float)((float)(v65 * v65) + (float)(v66 * v66)) + (float)(v67 * v67)), 1.0e-10);
      v18 = v75 * v65;
      v19 = v75 * v66;
      v20 = v75 * v67;
    }
    v17 = v67;
    v15 = v66;
    v16 = v65;
    --v32;
  }
  while (v32);
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(float *a1, float32x2_t *a2, float32x2_t *a3, float a4)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float32x2_t v11;
  double v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32_t v17;
  float32_t v18;
  float v19;
  float v20;
  float32_t v21;
  float32_t v22;
  float32_t v23;

  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = sqrtf((float)((float)(v8 * v8) + (float)(v7 * v7)) + (float)(v9 * v9));
  if (v10 == 0.0)
  {
    *a3 = 0;
    a3[1].i32[0] = 0;
    v11 = *a3;
    a2[1].i32[0] = 0;
    *a2 = v11;
  }
  else
  {
    v12 = 1.0 / v10;
    v13 = v12 * v8;
    v14 = v12 * v7;
    v15 = v12 * v9;
    v16 = v14 * 0.0;
    *(float *)&v12 = (float)(v15 * 0.0) - (float)(v14 * 0.0);
    v17 = (float)(v13 * 0.0) - v15;
    v18 = v14 - (float)(v13 * 0.0);
    a2->i32[0] = LODWORD(v12);
    a2->f32[1] = v17;
    a2[1].f32[0] = v18;
    if ((float)((float)(v18 * v18) + (float)((float)(v17 * v17) + (float)(*(float *)&v12 * *(float *)&v12))) < 0.00000001)
    {
      a2->f32[0] = v15 - v16;
      a2->f32[1] = (float)(v13 * 0.0) - (float)(v15 * 0.0);
      a2[1].f32[0] = v16 - v13;
    }
    sub_20BF10F48(a2, 1.0e-10);
    v20 = a2->f32[1];
    v19 = a2[1].f32[0];
    v21 = (float)(v19 * v14) - (float)(v20 * v15);
    v22 = (float)(a2->f32[0] * v15) - (float)(v19 * v13);
    v23 = (float)(v20 * v13) - (float)(a2->f32[0] * v14);
    a3->f32[0] = v21;
    a3->f32[1] = v22;
    a3[1].f32[0] = v23;
    if (v10 < a4)
    {
      *a2 = vmul_n_f32(*a2, v10 / a4);
      a2[1].f32[0] = (float)(v10 / a4) * a2[1].f32[0];
      *a3 = vmul_n_f32(*a3, v10 / a4);
      a3[1].f32[0] = (float)(v10 / a4) * a3[1].f32[0];
    }
  }
}

float sub_20BF10F48(float32x2_t *a1, float a2)
{
  float v2;
  float32x2_t v3;
  float v4;
  double v5;

  v2 = a1[1].f32[0];
  v3 = *a1;
  v4 = sqrtf(vaddv_f32(vmul_f32(v3, v3)) + (float)(v2 * v2));
  if (v4 > a2)
    a2 = v4;
  v5 = 1.0 / a2;
  *a1 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v3), v5));
  *(float *)&v5 = v5 * v2;
  a1[1].i32[0] = LODWORD(v5);
  return v4;
}

void pxrInternal__aapl__pxrReserved__::GfSlerp(float32x2_t *a1, float32x2_t *a2, double a3)
{
  float v4;
  double v5;
  BOOL v6;
  double v7;
  long double v8;
  float32x2_t v10;
  float32x2_t v11;

  v4 = vaddv_f32(vmul_f32(*a1, *a2)) + (float)(a1[1].f32[0] * a2[1].f32[0]);
  v5 = v4;
  if (v4 > 1.0)
    v5 = 1.0;
  v6 = v4 < -1.0;
  v7 = -1.0;
  if (!v6)
    v7 = v5;
  v8 = acos(v7);
  if (fabs(v8) >= 0.001)
  {
    if (fabs(sin(v8)) >= 0.00001)
    {
      sin((1.0 - a3) * v8);
      sin(v8 * a3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame((float *)a1, &v11, &v10, 1.0e-10);
      __sincos_stret(a3 * 3.14159265);
    }
  }
}

uint64_t *sub_20BF11184()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C160, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C160, (char *)0xC, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF11240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(unsigned __int16 *a1, double *a2)
{
  return *a2 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
      && a2[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
      && a2[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(unsigned __int16 *a1, float *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == *a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == a2[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == a2[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(unsigned __int16 *a1, int *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == (float)*a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == (float)a2[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == (float)a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::GfOrthogonalizeBasis(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, int a4, double a5)
{
  unsigned __int16 *v10;
  int v11;
  double v12;
  unsigned __int16 *v13;
  int v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  double v18;
  unsigned __int16 *v19;
  int v20;
  double v21;
  unsigned __int16 *v22;
  int v23;
  double v24;
  unsigned __int16 *v25;
  int v26;
  double v27;
  unsigned __int16 *v28;
  int v29;
  double v30;
  unsigned __int16 *v31;
  int v32;
  double v33;
  unsigned __int16 *v34;
  int v35;
  unsigned __int16 *v36;
  int v37;
  unsigned __int16 *v38;
  int v39;
  unsigned __int16 *v40;
  int v41;
  unsigned __int16 *v42;
  int v43;
  unsigned __int16 *v44;
  int v45;
  unsigned __int16 *v46;
  int v47;
  unsigned __int16 *v48;
  int v49;
  unsigned __int16 *v50;
  int v51;
  unsigned __int16 *v52;
  int v53;
  float v54;
  float v55;
  int v56;
  int v58;
  unsigned __int16 v59;
  int v60;
  unsigned __int16 v61;
  int v62;
  unsigned __int16 v63;
  int v64;
  unsigned __int16 v65;
  int v66;
  unsigned __int16 v67;
  int v68;
  unsigned __int16 v69;
  int v70;
  unsigned __int16 v71;
  int v72;
  unsigned __int16 v73;
  int v74;
  unsigned __int16 v75;
  int v76;
  unsigned __int16 v77;
  int v78;
  unsigned __int16 v79;
  int v80;
  unsigned __int16 v81;
  int v82;
  unsigned __int16 v83;

  if (a4)
  {
    sub_20BF11DAC(a1, 0x1419u);
    sub_20BF11DAC(a2, 0x1419u);
    sub_20BF11DAC(a3, 0x1419u);
    v80 = *(_DWORD *)a1;
    v81 = a1[2];
    v74 = *(_DWORD *)a2;
    v75 = a2[2];
    v68 = *(_DWORD *)a3;
    v69 = a3[2];
  }
  else
  {
    v80 = *(_DWORD *)a1;
    v81 = a1[2];
    v74 = *(_DWORD *)a2;
    v75 = a2[2];
    v68 = *(_DWORD *)a3;
    v69 = a3[2];
    sub_20BF11DAC((unsigned __int16 *)&v80, 0x1419u);
    sub_20BF11DAC((unsigned __int16 *)&v74, 0x1419u);
    sub_20BF11DAC((unsigned __int16 *)&v68, 0x1419u);
  }
  v82 = v80;
  v83 = v81;
  v10 = sub_20BEF7334((unsigned __int16 *)&v82, (unsigned __int16 *)&v74);
  v11 = *(_DWORD *)v10;
  v83 = v10[2];
  v82 = v11;
  v12 = a5 * a5;
  if (v12 >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v82, (unsigned __int16 *)&v82)])return 0;
  v82 = v80;
  v83 = v81;
  v13 = sub_20BEF7334((unsigned __int16 *)&v82, (unsigned __int16 *)&v68);
  v14 = *(_DWORD *)v13;
  v83 = v13[2];
  v82 = v14;
  if (v12 >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v82, (unsigned __int16 *)&v82)])return 0;
  v82 = v74;
  v83 = v75;
  v15 = sub_20BEF7334((unsigned __int16 *)&v82, (unsigned __int16 *)&v68);
  v16 = *(_DWORD *)v15;
  v83 = v15[2];
  v82 = v16;
  if (v12 >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v82, (unsigned __int16 *)&v82)])return 0;
  v17 = 20;
  while (1)
  {
    v78 = *(_DWORD *)a1;
    v79 = a1[2];
    v72 = *(_DWORD *)a2;
    v73 = a2[2];
    v66 = *(_DWORD *)a3;
    v67 = a3[2];
    v18 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v74, (unsigned __int16 *)&v78)];
    v82 = v74;
    v83 = v75;
    v19 = sub_20BEF7204((unsigned __int16 *)&v82, v18);
    v20 = *(_DWORD *)v19;
    v83 = v19[2];
    v82 = v20;
    sub_20BEF7334((unsigned __int16 *)&v78, (unsigned __int16 *)&v82);
    v21 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v68, (unsigned __int16 *)&v78)];
    v82 = v68;
    v83 = v69;
    v22 = sub_20BEF7204((unsigned __int16 *)&v82, v21);
    v23 = *(_DWORD *)v22;
    v83 = v22[2];
    v82 = v23;
    sub_20BEF7334((unsigned __int16 *)&v78, (unsigned __int16 *)&v82);
    v24 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v80, (unsigned __int16 *)&v72)];
    v82 = v80;
    v83 = v81;
    v25 = sub_20BEF7204((unsigned __int16 *)&v82, v24);
    v26 = *(_DWORD *)v25;
    v83 = v25[2];
    v82 = v26;
    sub_20BEF7334((unsigned __int16 *)&v72, (unsigned __int16 *)&v82);
    v27 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v68, (unsigned __int16 *)&v72)];
    v82 = v68;
    v83 = v69;
    v28 = sub_20BEF7204((unsigned __int16 *)&v82, v27);
    v29 = *(_DWORD *)v28;
    v83 = v28[2];
    v82 = v29;
    sub_20BEF7334((unsigned __int16 *)&v72, (unsigned __int16 *)&v82);
    v30 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v80, (unsigned __int16 *)&v66)];
    v82 = v80;
    v83 = v81;
    v31 = sub_20BEF7204((unsigned __int16 *)&v82, v30);
    v32 = *(_DWORD *)v31;
    v83 = v31[2];
    v82 = v32;
    sub_20BEF7334((unsigned __int16 *)&v66, (unsigned __int16 *)&v82);
    v33 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v74, (unsigned __int16 *)&v66)];
    v82 = v74;
    v83 = v75;
    v34 = sub_20BEF7204((unsigned __int16 *)&v82, v33);
    v35 = *(_DWORD *)v34;
    v83 = v34[2];
    v82 = v35;
    sub_20BEF7334((unsigned __int16 *)&v66, (unsigned __int16 *)&v82);
    v82 = *(_DWORD *)a1;
    v83 = a1[2];
    v36 = sub_20BEF7510((unsigned __int16 *)&v82, (unsigned __int16 *)&v78);
    v37 = *(_DWORD *)v36;
    v83 = v36[2];
    v82 = v37;
    v38 = sub_20BEF7204((unsigned __int16 *)&v82, 0.5);
    v39 = *(_DWORD *)v38;
    v77 = v38[2];
    v76 = v39;
    v82 = *(_DWORD *)a2;
    v83 = a2[2];
    v40 = sub_20BEF7510((unsigned __int16 *)&v82, (unsigned __int16 *)&v72);
    v41 = *(_DWORD *)v40;
    v83 = v40[2];
    v82 = v41;
    v42 = sub_20BEF7204((unsigned __int16 *)&v82, 0.5);
    v43 = *(_DWORD *)v42;
    v71 = v42[2];
    v70 = v43;
    v82 = *(_DWORD *)a3;
    v83 = a3[2];
    v44 = sub_20BEF7510((unsigned __int16 *)&v82, (unsigned __int16 *)&v66);
    v45 = *(_DWORD *)v44;
    v83 = v44[2];
    v82 = v45;
    v46 = sub_20BEF7204((unsigned __int16 *)&v82, 0.5);
    v47 = *(_DWORD *)v46;
    v65 = v46[2];
    v64 = v47;
    if (a4)
    {
      sub_20BF11DAC((unsigned __int16 *)&v76, 0x1419u);
      sub_20BF11DAC((unsigned __int16 *)&v70, 0x1419u);
      sub_20BF11DAC((unsigned __int16 *)&v64, 0x1419u);
    }
    v63 = 0;
    v62 = 0;
    v82 = *(_DWORD *)a1;
    v83 = a1[2];
    v48 = sub_20BEF7334((unsigned __int16 *)&v82, (unsigned __int16 *)&v76);
    v49 = *(_DWORD *)v48;
    v63 = v48[2];
    v62 = v49;
    v61 = 0;
    v60 = 0;
    v82 = *(_DWORD *)a2;
    v83 = a2[2];
    v50 = sub_20BEF7334((unsigned __int16 *)&v82, (unsigned __int16 *)&v70);
    v51 = *(_DWORD *)v50;
    v61 = v50[2];
    v60 = v51;
    v59 = 0;
    v58 = 0;
    v82 = *(_DWORD *)a3;
    v83 = a3[2];
    v52 = sub_20BEF7334((unsigned __int16 *)&v82, (unsigned __int16 *)&v64);
    v53 = *(_DWORD *)v52;
    v59 = v52[2];
    v58 = v53;
    v54 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v62, (unsigned __int16 *)&v62)];
    v55 = v54
        + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v60, (unsigned __int16 *)&v60)];
    if (v12 > (float)(v55
                     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0((unsigned __int16 *)&v58, (unsigned __int16 *)&v58)]))
      break;
    *(_DWORD *)a1 = v76;
    a1[2] = v77;
    *(_DWORD *)a2 = v70;
    a2[2] = v71;
    v56 = v64;
    *(_DWORD *)a3 = v64;
    a3[2] = v65;
    v81 = a1[2];
    v80 = *(_DWORD *)a1;
    v75 = a2[2];
    v74 = *(_DWORD *)a2;
    v69 = v65;
    v68 = v56;
    if ((a4 & 1) == 0)
    {
      sub_20BF11DAC((unsigned __int16 *)&v80, 0x1419u);
      sub_20BF11DAC((unsigned __int16 *)&v74, 0x1419u);
      sub_20BF11DAC((unsigned __int16 *)&v68, 0x1419u);
    }
    if (!--v17)
      return 0;
  }
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfVec3h::BuildOrthonormalFrame(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 a4)
{
  return pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(a1, a2, a3, a4);
}

unint64_t pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 a4)
{
  unint64_t result;
  uint64_t v9;
  float v10;
  unsigned __int16 *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  double v17;
  int v18;
  __int16 v19;
  int v20;
  unsigned __int16 v21;

  result = sub_20BF11E1C(a1);
  v9 = (unsigned __int16)result;
  v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result];
  if (v10 == 0.0)
  {
    *(_DWORD *)a3 = 0;
    a3[2] = 0;
    a2[2] = 0;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    v20 = *(_DWORD *)a1;
    v21 = a1[2];
    v11 = sub_20BEF7204((unsigned __int16 *)&v20, 1.0 / v10);
    v12 = *(_DWORD *)v11;
    v21 = v11[2];
    v20 = v12;
    v19 = 0;
    v18 = 15360;
    v13 = sub_20BF097C4((unsigned __int16 *)&v18, (unsigned __int16 *)&v20);
    *(_DWORD *)a2 = v13;
    a2[2] = WORD2(v13);
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0(a2, a2)] < 0.00000001)
    {
      v19 = 0;
      v18 = 1006632960;
      v14 = sub_20BF097C4((unsigned __int16 *)&v18, (unsigned __int16 *)&v20);
      *(_DWORD *)a2 = v14;
      a2[2] = WORD2(v14);
    }
    sub_20BF11DAC(a2, 0x1419u);
    result = sub_20BF097C4((unsigned __int16 *)&v20, a2);
    *(_DWORD *)a3 = result;
    a3[2] = WORD2(result);
    v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v9];
    v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a4];
    if (v15 < v16)
    {
      v17 = (float)(v15 / v16);
      sub_20BEF7204(a2, v17);
      return (unint64_t)sub_20BEF7204(a3, v17);
    }
  }
  return result;
}

uint64_t sub_20BF11DAC(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;

  v4 = sub_20BF11E1C(a1);
  v5 = v4;
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v4] <= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2])
    v6 = a2;
  else
    v6 = v4;
  sub_20BEF7204(a1, 1.0 / pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v6]);
  return v5;
}

uint64_t sub_20BF11E1C(unsigned __int16 *a1)
{
  float v1;

  v1 = sqrtf(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0(a1, a1)]);
  if (v1 == 0.0)
    return HIWORD(LODWORD(v1));
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]
         + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
}

unint64_t pxrInternal__aapl__pxrReserved__::GfSlerp(unsigned __int16 *a1, unsigned __int16 *a2, double a3)
{
  float v6;
  double v7;
  BOOL v8;
  double v9;
  long double v10;
  unsigned __int16 *v11;
  int v12;
  unsigned __int16 v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  int v20;
  __double2 v21;
  unsigned __int16 *v22;
  int v23;
  unsigned __int16 v24;
  unsigned __int16 *v25;
  int v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  int v33;
  unsigned __int16 v34;
  int v35;
  unsigned __int16 v36;

  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BEF70F0(a1, a2)];
  v7 = v6;
  if (v6 > 1.0)
    v7 = 1.0;
  v8 = v6 < -1.0;
  v9 = -1.0;
  if (!v8)
    v9 = v7;
  v10 = acos(v9);
  if (fabs(v10) < 0.001)
  {
    v35 = *(_DWORD *)a1;
    v36 = a1[2];
    v11 = sub_20BEF7204((unsigned __int16 *)&v35, 1.0 - a3);
    v12 = *(_DWORD *)v11;
    v13 = v11[2];
    v35 = *(_DWORD *)a2;
    v36 = a2[2];
    v14 = a3;
LABEL_10:
    v19 = sub_20BEF7204((unsigned __int16 *)&v35, v14);
    v20 = *(_DWORD *)v19;
    v34 = v19[2];
    v33 = v20;
    v36 = v13;
    v35 = v12;
    v27 = (unsigned __int16 *)&v33;
    goto LABEL_11;
  }
  v15 = sin(v10);
  if (fabs(v15) >= 0.00001)
  {
    v16 = 1.0 / v15;
    v17 = sin((1.0 - a3) * v10);
    v35 = *(_DWORD *)a1;
    v36 = a1[2];
    v18 = sub_20BEF7204((unsigned __int16 *)&v35, v17 * v16);
    v12 = *(_DWORD *)v18;
    v13 = v18[2];
    v14 = sin(v10 * a3) * v16;
    v35 = *(_DWORD *)a2;
    v36 = a2[2];
    goto LABEL_10;
  }
  pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(a1, (unsigned __int16 *)&v33, &v32, 0x1419u);
  v21 = __sincos_stret(a3 * 3.14159265);
  v35 = *(_DWORD *)a1;
  v36 = a1[2];
  v22 = sub_20BEF7204((unsigned __int16 *)&v35, v21.__cosval);
  v23 = *(_DWORD *)v22;
  v24 = v22[2];
  v35 = v33;
  v36 = v34;
  v25 = sub_20BEF7204((unsigned __int16 *)&v35, v21.__sinval);
  v26 = *(_DWORD *)v25;
  v31 = v25[2];
  v30 = v26;
  v36 = v24;
  v35 = v23;
  v27 = (unsigned __int16 *)&v30;
LABEL_11:
  v28 = sub_20BEF7510((unsigned __int16 *)&v35, v27);
  return *(unsigned int *)v28 | ((unint64_t)v28[2] << 32);
}

uint64_t *sub_20BF120BC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C170, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C170, (char *)6, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF12178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3i::operator==(int *a1, double *a2)
{
  return *a2 == (double)*a1 && a2[1] == (double)a1[1] && a2[2] == (double)a1[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3i::operator==(int *a1, float *a2)
{
  return *a2 == (float)*a1 && a2[1] == (float)a1[1] && a2[2] == (float)a1[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3i::operator==(int *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2] == (float)*a1
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]] == (float)a1[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]] == (float)a1[2];
}

uint64_t *sub_20BF12330()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C180, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C180, (char *)0xC, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF123EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4d::operator==(double *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4d::operator==(double *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && a1[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]]
      && a1[3] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4d::operator==(double *a1, int *a2)
{
  return *a1 == (double)*a2 && a1[1] == (double)a2[1] && a1[2] == (double)a2[2] && a1[3] == (double)a2[3];
}

uint64_t *sub_20BF125F8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C190, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C190, (char *)0x20, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF126B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4f::operator==(float *a1, double *a2)
{
  return *a2 == *a1 && a2[1] == a1[1] && a2[2] == a1[2] && a2[3] == a1[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4f::operator==(float *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && a1[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]]
      && a1[3] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4f::operator==(float *a1, int *a2)
{
  return *a1 == (float)*a2 && a1[1] == (float)a2[1] && a1[2] == (float)a2[2] && a1[3] == (float)a2[3];
}

uint64_t *sub_20BF128B0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1A0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C1A0, (char *)0x10, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF1296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(unsigned __int16 *a1, double *a2)
{
  return *a2 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
      && a2[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
      && a2[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
      && a2[3] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(unsigned __int16 *a1, float *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == *a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == a2[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == a2[2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == a2[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(unsigned __int16 *a1, int *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == (float)*a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == (float)a2[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == (float)a2[2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == (float)a2[3];
}

uint64_t *sub_20BF12B98()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1B0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51C1B0, (char *)8, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF12C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4i::operator==(int *a1, double *a2)
{
  return *a2 == (double)*a1 && a2[1] == (double)a1[1] && a2[2] == (double)a1[2] && a2[3] == (double)a1[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4i::operator==(int *a1, float *a2)
{
  return *a2 == (float)*a1 && a2[1] == (float)a1[1] && a2[2] == (float)a1[2] && a2[3] == (float)a1[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4i::operator==(int *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2] == (float)*a1
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]] == (float)a1[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]] == (float)a1[2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]] == (float)a1[3];
}

uint64_t *sub_20BF12E60()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51C1C0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, (std::type_info *)&unk_24C51C1C0, (char *)0x10, 1, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF12F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::JsParseStream(_QWORD *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::JsValue *a3@<X8>)
{
  char *v4;
  char *v6;
  std::string __p;
  const char *v8;
  char v9;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v4[32] & 5) != 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"js/json.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"JsParseStream";
    __p.__r_.__value_.__r.__words[2] = 231;
    v8 = "JsValue pxrInternal__aapl__pxrReserved__::JsParseStream(std::istream &, JsParseError *)";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Stream error");
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a3);
  }
  else
  {
    sub_20BF162D4(&__p, *((_QWORD **)v4 + 5), 0);
    pxrInternal__aapl__pxrReserved__::JsParseString((char *)&__p, a2, v6, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20BF1301C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::JsParseString(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::JsValue *a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  void *v15;
  unsigned int v16;
  BOOL (*v17)(_DWORD *);
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *__p[2];
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v5 = a1[23];
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a1 + 1);
  if (!v5)
  {
    __p[0] = "js/json.cpp";
    __p[1] = "JsParseString";
    v34[0] = (void *)250;
    v34[1] = "JsValue pxrInternal__aapl__pxrReserved__::JsParseString(const std::string &, JsParseError *)";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"JSON string is empty");
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a4);
    return;
  }
  v9 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = 0;
  v36 = 256;
  v39 = 2;
  if (v6 >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  v31 = v10;
  v32 = v10;
  LODWORD(v37) = 0;
  v38 = 0;
  while (1)
  {
    v11 = v10[v9];
    v12 = v11 > 0x20;
    v13 = (1 << v11) & 0x100002600;
    if (v12 || v13 == 0)
      break;
    ++v9;
  }
  v31 = &v10[v9];
  if (v10[v9])
  {
    sub_20BF16458((uint64_t)__p, &v31, (uint64_t *)&v40, (__n128)0);
    v9 = v38;
    v15 = v34[0];
  }
  else
  {
    v15 = 0;
    LODWORD(v37) = 1;
    v38 = v9;
  }
  v16 = v37;
  v34[1] = v15;
  v17 = sub_20BF145F8;
  if ((_DWORD)v37)
    v17 = 0;
  if (v17)
  {
    v18 = (_QWORD *)*((_QWORD *)&v41 + 1);
    v19 = (_QWORD *)v42;
    if ((_QWORD)v42 - *((_QWORD *)&v41 + 1) != 16)
    {
      LOBYTE(v30) = 0;
      v28 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected value count: %zu", (const char *)a2, a3, (uint64_t)(v42 - *((_QWORD *)&v41 + 1)) >> 4, "js/json.cpp", "JsParseString", 284, "JsValue pxrInternal__aapl__pxrReserved__::JsParseString(const std::string &, JsParseError *)", v30, v31, v32, __p[0]);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v29, "handler.values.size() == 1", v28);
      v18 = (_QWORD *)*((_QWORD *)&v41 + 1);
      v19 = (_QWORD *)v42;
    }
    if (v18 != v19)
    {
      *(_QWORD *)a4 = *v18;
      v20 = v18[1];
      *((_QWORD *)a4 + 1) = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      goto LABEL_42;
    }
  }
  else if (a2)
  {
    *(_DWORD *)a2 = 1;
    if (v9)
    {
      v23 = 0;
      v24 = 0;
      v25 = 1;
      do
      {
        if (a1[23] >= 0)
          v26 = a1;
        else
          v26 = *(char **)a1;
        if (v26[v23] == 10)
        {
          *(_DWORD *)a2 = ++v25;
          v24 = v23;
        }
        ++v23;
      }
      while (v9 != v23);
    }
    else
    {
      v24 = 0;
    }
    *(_DWORD *)(a2 + 4) = v9 - v24;
    if (v16 > 0x11)
      v27 = "Unknown error.";
    else
      v27 = off_24C51C3B8[v16];
    MEMORY[0x212B929D0](a2 + 8, v27);
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a4);
LABEL_42:
  free(v34[0]);
  if (__p[1])
    operator delete(__p[1]);
  __p[0] = (char *)&v41 + 8;
  sub_20BDE9EB0((void ***)__p);
  __p[0] = &v40;
  sub_20BDE5038((void ***)__p);
}

void sub_20BF132F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_20BF14608((uint64_t)va);
  sub_20BF13328((void **)(v9 - 80));
  _Unwind_Resume(a1);
}

void **sub_20BF13328(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  sub_20BDE9EB0(&v3);
  v3 = a1;
  sub_20BDE5038(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::JsWriteToStream(unint64_t **a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  void *v6[2];
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13[6];
  _QWORD v14[3];
  const char *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    v14[0] = "js/json.cpp";
    v14[1] = "JsWriteToStream";
    v14[2] = 295;
    v15 = "void pxrInternal__aapl__pxrReserved__::JsWriteToStream(const JsValue &, std::ostream &)";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Stream error");
  }
  else
  {
    sub_20BF19A6C((uint64_t)v14, 0, 1024, 0);
    sub_20BF134DC(a1, (uint64_t)v15, (uint64_t)v13);
    v12 = a2;
    v4 = &v12;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v6 = 0u;
    v7 = 0;
    v8 = 512;
    v9 = 324;
    v10 = 0x2000;
    v11 = 0x100000004;
    sub_20BF13850(v13, &v4);
    free(v6[0]);
    if (__p[1])
      operator delete(__p[1]);
    sub_20BF19B38(v14);
  }
}

void sub_20BF134B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_20BF14608(v15);
  sub_20BF19B38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20BF134DC(unint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *JsObject;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *p_dst;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *JsArray;
  uint64_t v17;
  uint64_t v18;
  unint64_t String;
  _BOOL4 Bool;
  __int16 v21;
  _QWORD *v22;
  uint64_t UInt64;
  __int16 v24;
  double Real;
  unint64_t Int64;
  __int16 v27;
  __int128 __dst;
  uint64_t v29;
  const char *v30;
  char v31;
  __n128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  switch(pxrInternal__aapl__pxrReserved__::JsValue::GetType((pxrInternal__aapl__pxrReserved__::JsValue *)a1))
  {
    case 0u:
      JsObject = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(a1);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 22) = 3;
      v7 = JsObject + 1;
      v8 = (_QWORD *)*JsObject;
      if ((_QWORD *)*JsObject != JsObject + 1)
      {
        do
        {
          v9 = (const char *)(v8 + 4);
          if (*((char *)v8 + 55) < 0)
            v9 = *(const char **)v9;
          __dst = 0uLL;
          v29 = 0;
          v10 = strlen(v9);
          v11 = v10;
          if (v10 > 0x15)
          {
            HIWORD(v29) = 3077;
            LODWORD(__dst) = v10;
            p_dst = (__int128 *)sub_20BF19DB8(a2, v10 + 1);
            *((_QWORD *)&__dst + 1) = p_dst;
          }
          else
          {
            HIWORD(v29) = 7173;
            BYTE5(v29) = 21 - v10;
            p_dst = &__dst;
          }
          memcpy(p_dst, v9, v11);
          *((_BYTE *)p_dst + v11) = 0;
          sub_20BF134DC(&v32, v8 + 7, a2);
          sub_20BF19C44((int *)a3, &__dst, &v32, a2);
          v13 = (_QWORD *)v8[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v8[2];
              v15 = *v14 == (_QWORD)v8;
              v8 = v14;
            }
            while (!v15);
          }
          v8 = v14;
        }
        while (v14 != v7);
      }
      return;
    case 1u:
      JsArray = (uint64_t *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(a1);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 22) = 4;
      v17 = *JsArray;
      v18 = JsArray[1];
      while (v17 != v18)
      {
        sub_20BF134DC(&__dst, v17, a2);
        sub_20BF19EA4((int *)a3, &__dst, a2);
        v17 += 16;
      }
      return;
    case 2u:
      String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)a1);
      if (*(char *)(String + 23) < 0)
        String = *(_QWORD *)String;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)&__dst = String;
      DWORD2(__dst) = strlen((const char *)String);
      sub_20BF19F4C((_WORD *)a3, (uint64_t)&__dst, a2);
      return;
    case 3u:
      Bool = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)a1);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      if (Bool)
        v21 = 10;
      else
        v21 = 9;
      goto LABEL_34;
    case 4u:
      v22 = (_QWORD *)(a3 + 8);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64((pxrInternal__aapl__pxrReserved__::JsValue *)a1))
      {
        UInt64 = pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64((uint64_t **)a1);
        *v22 = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = UInt64;
        if (UInt64 < 0)
          v24 = 278;
        else
          v24 = 406;
        *(_WORD *)(a3 + 22) = v24;
        if (!HIDWORD(UInt64))
        {
          *(_WORD *)(a3 + 22) = v24 | 0x40;
          if (!((unint64_t)UInt64 >> 31))
          {
            v21 = v24 | 0x60;
LABEL_34:
            *(_WORD *)(a3 + 22) = v21;
          }
        }
      }
      else
      {
        Int64 = pxrInternal__aapl__pxrReserved__::JsValue::GetInt64((uint64_t **)a1);
        *v22 = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = Int64;
        *(_WORD *)(a3 + 22) = 150;
        if ((Int64 & 0x8000000000000000) != 0)
        {
          if (Int64 >= 0xFFFFFFFF80000000)
          {
            v21 = 182;
            goto LABEL_34;
          }
        }
        else
        {
          if (HIDWORD(Int64))
            v27 = 406;
          else
            v27 = 470;
          *(_WORD *)(a3 + 22) = v27;
          if (!(Int64 >> 31))
          {
            v21 = v27 | 0x20;
            goto LABEL_34;
          }
        }
      }
      return;
    case 5u:
      Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)a1);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(double *)a3 = Real;
      v21 = 534;
      goto LABEL_34;
    case 6u:
      goto LABEL_25;
    default:
      *(_QWORD *)&__dst = "js/json.cpp";
      *((_QWORD *)&__dst + 1) = "_JsValueToImplValue";
      v29 = 218;
      v30 = "rj::Value pxrInternal__aapl__pxrReserved__::_JsValueToImplValue(const JsValue &, Allocator &) [Allocator = p"
            "xr_aapl::rapidjson::MemoryPoolAllocator<>]";
      v31 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown JsValue type");
LABEL_25:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      return;
  }
}

uint64_t sub_20BF13850(unsigned int *a1, _QWORD *a2)
{
  __int16 v4;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      return sub_20BF15C2C((uint64_t)a2);
    case 1:
      v7 = (uint64_t)a2;
      v8 = 0;
      return sub_20BF15DBC(v7, v8);
    case 2:
      v7 = (uint64_t)a2;
      v8 = 1;
      return sub_20BF15DBC(v7, v8);
    case 3:
      if (!sub_20BF160D8(a2))
        return 0;
      if (!*a1)
        return sub_20BF16144((uint64_t)a2);
      v9 = *((_QWORD *)a1 + 1) + 24;
      while (1)
      {
        v10 = (*(_WORD *)(v9 - 2) & 0x1000) != 0 ? v9 - 24 : *(_QWORD *)(v9 - 16);
        v11 = (*(_WORD *)(v9 - 2) & 0x1000) != 0 ? 21 - *(char *)(v9 - 3) : *(_DWORD *)(v9 - 24);
        if (!sub_20BF16070((uint64_t)a2, v10, v11) || (sub_20BF13850(v9, a2) & 1) == 0)
          break;
        v9 += 48;
        if (v9 - 24 == *((_QWORD *)a1 + 1) + 48 * *a1)
          return sub_20BF16144((uint64_t)a2);
      }
      return 0;
    case 4:
      if (!sub_20BF161D0(a2))
        return 0;
      if (!*a1)
        return sub_20BF16240((uint64_t)a2);
      v12 = *((_QWORD *)a1 + 1);
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v13 = (uint64_t)a1;
      else
        v13 = *((_QWORD *)a1 + 1);
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v14 = 21 - *((char *)a1 + 21);
      else
        v14 = *a1;
      return sub_20BF16070((uint64_t)a2, v13, v14);
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
        return sub_20BF15F7C((uint64_t)a2, *(double *)a1);
      if ((v4 & 0x20) != 0)
        return sub_20BF15E1C((uint64_t)a2, *a1);
      if ((v4 & 0x40) != 0)
        return sub_20BF15E74((uint64_t)a2, *a1);
      v6 = *(double *)a1;
      if ((v4 & 0x80) != 0)
        return sub_20BF15ECC((uint64_t)a2, *(unint64_t *)&v6);
      else
        return sub_20BF15F24((uint64_t)a2, *(unint64_t *)&v6);
  }
  while ((sub_20BF13850(v12, a2) & 1) != 0)
  {
    v12 += 24;
    if (v12 == *((_QWORD *)a1 + 1) + 24 * *a1)
      return sub_20BF16240((uint64_t)a2);
  }
  return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsWriteToString@<X0>(unint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  char *v5;
  void **v7;
  void *__p[2];
  void *v9[2];
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  void *v15[2];
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  unsigned int v19[6];
  _QWORD v20[14];

  v20[13] = *MEMORY[0x24BDAC8D0];
  sub_20BF19A6C((uint64_t)v20, 0, 1024, 0);
  sub_20BF134DC(this, v20[3], (uint64_t)v19);
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v17 = 0;
  v18 = 256;
  v7 = v15;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0;
  v11 = 512;
  v12 = 324;
  v13 = 0x2000;
  v14 = 0x100000004;
  sub_20BF13C18(v19, &v7);
  v5 = (char *)sub_20BF14074(v15);
  sub_20BDDC0E4(a2, v5);
  free(v9[0]);
  if (__p[1])
    operator delete(__p[1]);
  free(v16[0]);
  if (v15[1])
    operator delete(v15[1]);
  return sub_20BF19B38(v20);
}

void sub_20BF13BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF19B38((_QWORD *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_20BF13C18(unsigned int *a1, _BYTE *a2)
{
  __int16 v4;
  uint64_t result;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  char __s[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      sub_20BF1A3D8(a2);
      result = sub_20BF1A60C((uint64_t)a2);
      break;
    case 1:
      sub_20BF1A3D8(a2);
      result = sub_20BF1A718((uint64_t)a2, 0);
      break;
    case 2:
      sub_20BF1A3D8(a2);
      result = sub_20BF1A718((uint64_t)a2, 1);
      break;
    case 3:
      result = sub_20BF19FD4((uint64_t)a2);
      if ((_DWORD)result)
      {
        if (*a1)
        {
          v7 = *((_QWORD *)a1 + 1) + 24;
          while (1)
          {
            v8 = (*(_WORD *)(v7 - 2) & 0x1000) != 0 ? v7 - 24 : *(_QWORD *)(v7 - 16);
            v9 = (*(_WORD *)(v7 - 2) & 0x1000) != 0 ? 21 - *(char *)(v7 - 3) : *(_DWORD *)(v7 - 24);
            sub_20BF1A3D8(a2);
            result = sub_20BF1A980((uint64_t)a2, v8, v9);
            if (!(_DWORD)result)
              break;
            if ((sub_20BF13C18(v7, a2) & 1) == 0)
              goto LABEL_44;
            v7 += 48;
            if (v7 - 24 == *((_QWORD *)a1 + 1) + 48 * *a1)
              goto LABEL_39;
          }
        }
        else
        {
LABEL_39:
          result = sub_20BF1A030((_QWORD **)a2);
        }
      }
      break;
    case 4:
      result = sub_20BF1A0A8((uint64_t)a2);
      if ((_DWORD)result)
      {
        if (*a1)
        {
          v10 = *((_QWORD *)a1 + 1);
          while ((sub_20BF13C18(v10, a2) & 1) != 0)
          {
            v10 += 24;
            if (v10 == *((_QWORD *)a1 + 1) + 24 * *a1)
              goto LABEL_40;
          }
LABEL_44:
          result = 0;
        }
        else
        {
LABEL_40:
          result = sub_20BF1A108((_QWORD **)a2);
        }
      }
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v11 = (uint64_t)a1;
      else
        v11 = *((_QWORD *)a1 + 1);
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v12 = 21 - *((char *)a1 + 21);
      else
        v12 = *a1;
      sub_20BF1A3D8(a2);
      result = sub_20BF1A980((uint64_t)a2, v11, v12);
      break;
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        pxrInternal__aapl__pxrReserved__::TfDoubleToString((pxrInternal__aapl__pxrReserved__ *)__s, *(double *)a1, (char *)0x20, 1);
        v13 = strlen(__s);
        sub_20BF1A3D8(a2);
        result = sub_20BF1AADC((uint64_t)a2, (uint64_t)__s, v13);
      }
      else if ((v4 & 0x20) != 0)
      {
        result = sub_20BF1A188(a2, *a1);
      }
      else if ((v4 & 0x40) != 0)
      {
        result = sub_20BF1A228(a2, *a1);
      }
      else
      {
        v6 = *(double *)a1;
        if ((v4 & 0x80) != 0)
          result = sub_20BF1A2B0(a2, *(unint64_t *)&v6);
        else
          result = sub_20BF1A350(a2, *(unint64_t *)&v6);
      }
      break;
  }
  return result;
}

uint64_t sub_20BF14074(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t result;

  v2 = (_BYTE *)a1[3];
  if ((uint64_t)(a1[4] - (_QWORD)v2) <= 0)
  {
    sub_20BF17D90(a1, 1);
    v2 = (_BYTE *)a1[3];
  }
  a1[3] = v2 + 1;
  *v2 = 0;
  result = a1[2];
  --a1[3];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriteValue(uint64_t this, unint64_t **a2, const pxrInternal__aapl__pxrReserved__::JsValue *a3)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  _QWORD *JsObject;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  const pxrInternal__aapl__pxrReserved__::JsValue *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t (*v16)(void);
  unint64_t JsArray;
  const pxrInternal__aapl__pxrReserved__::JsValue *v18;
  pxrInternal__aapl__pxrReserved__::JsWriter *v19;
  pxrInternal__aapl__pxrReserved__::JsWriter *v20;
  uint64_t (*v21)(void);
  unint64_t String;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 Bool;
  double Real;

  if (this)
  {
    v4 = (pxrInternal__aapl__pxrReserved__ *)this;
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      JsObject = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(a2);
      (*(void (**)(_QWORD))(***(_QWORD ***)v4 + 80))(**(_QWORD **)v4);
      v8 = (_QWORD *)*JsObject;
      v6 = JsObject + 1;
      v7 = v8;
      if (v8 != v6)
      {
        do
        {
          v9 = *((char *)v7 + 55);
          if (v9 >= 0)
            v10 = v7 + 4;
          else
            v10 = (_QWORD *)v7[4];
          if (v9 >= 0)
            v11 = *((unsigned __int8 *)v7 + 55);
          else
            v11 = v7[5];
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(***(_QWORD ***)v4 + 88))(**(_QWORD **)v4, v10, v11);
          pxrInternal__aapl__pxrReserved__::JsWriteValue(v4, (pxrInternal__aapl__pxrReserved__::JsWriter *)(v7 + 7), v12);
          v13 = (_QWORD *)v7[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v7[2];
              v15 = *v14 == (_QWORD)v7;
              v7 = v14;
            }
            while (!v15);
          }
          v7 = v14;
        }
        while (v14 != v6);
      }
      v16 = *(uint64_t (**)(void))(***(_QWORD ***)v4 + 96);
      return v16();
    }
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(a2);
      (*(void (**)(_QWORD))(***(_QWORD ***)v4 + 104))(**(_QWORD **)v4);
      v19 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)JsArray;
      v20 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)(JsArray + 8);
      while (v19 != v20)
      {
        pxrInternal__aapl__pxrReserved__::JsWriteValue(v4, v19, v18);
        v19 = (pxrInternal__aapl__pxrReserved__::JsWriter *)((char *)v19 + 16);
      }
      v16 = *(uint64_t (**)(void))(***(_QWORD ***)v4 + 112);
      return v16();
    }
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64((uint64_t **)a2);
      v21 = *(uint64_t (**)(void))(***(_QWORD ***)v4 + 56);
      return v21();
    }
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)a2);
      v23 = *(char *)(String + 23);
      if (v23 >= 0)
        v24 = String;
      else
        v24 = *(_QWORD *)String;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(String + 23);
      else
        v25 = *(_QWORD *)(String + 8);
      return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(***(_QWORD ***)v4 + 72))(**(_QWORD **)v4, v24, v25);
    }
    else if (pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      Bool = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)a2);
      return (*(uint64_t (**)(_QWORD, _BOOL8))(***(_QWORD ***)v4 + 24))(**(_QWORD **)v4, Bool);
    }
    else if (pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)a2);
      return (*(uint64_t (**)(_QWORD, double))(***(_QWORD ***)v4 + 64))(**(_QWORD **)v4, Real);
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
      {
        pxrInternal__aapl__pxrReserved__::JsValue::GetInt64((uint64_t **)a2);
        v21 = *(uint64_t (**)(void))(***(_QWORD ***)v4 + 48);
        return v21();
      }
      this = pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)a2);
      if ((_DWORD)this)
      {
        v16 = *(uint64_t (**)(void))(***(_QWORD ***)v4 + 16);
        return v16();
      }
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 80))(**(_QWORD **)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = **a1;
  v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v2 + 88))(v2, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 96))(**(_QWORD **)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 104))(**(_QWORD **)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::EndArray(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 112))(**(_QWORD **)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 56))(**(_QWORD **)this);
}

{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 24))(**(_QWORD **)this);
}

{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 48))(**(_QWORD **)this);
}

{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 32))(**(_QWORD **)this);
}

{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 40))(**(_QWORD **)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = **a1;
  v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v2 + 72))(v2, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(pxrInternal__aapl__pxrReserved__::JsWriter *this, double a2)
{
  return (*(uint64_t (**)(_QWORD, double))(***(_QWORD ***)this + 64))(**(_QWORD **)this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 16))(**a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsWriter::JsWriter(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;

  v6 = operator new(0x10uLL);
  sub_20BF14640(v6, a2, a3);
  *a1 = v6;
  return a1;
}

void sub_20BF144C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter(uint64_t **this)
{
  sub_20BF1AB5C(this, 0);
}

{
  sub_20BF1AB5C(this, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(uint64_t **this, const char *__s)
{
  uint64_t v3;
  size_t v4;

  v3 = **this;
  v4 = strlen(__s);
  return (*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)v3 + 72))(v3, __s, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(uint64_t **this, const char *__s)
{
  uint64_t v3;
  size_t v4;

  v3 = **this;
  v4 = strlen(__s);
  return (*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)v3 + 88))(v3, __s, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::_Key(pxrInternal__aapl__pxrReserved__::JsWriter *this, const char *a2)
{
  return (*(uint64_t (**)(_QWORD, const char *))(***(_QWORD ***)this + 88))(**(_QWORD **)this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::_String(pxrInternal__aapl__pxrReserved__::JsWriter *this, const char *a2)
{
  return (*(uint64_t (**)(_QWORD, const char *))(***(_QWORD ***)this + 72))(**(_QWORD **)this, a2);
}

BOOL sub_20BF145F8(_DWORD *a1)
{
  return *a1 != 0;
}

void sub_20BF14608(uint64_t a1)
{
  void *v2;

  free(*(void **)(a1 + 16));
  v2 = *(void **)(a1 + 8);
  if (v2)
    operator delete(v2);
}

_QWORD *sub_20BF14640(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  _OWORD *v5;
  uint64_t (**v6)();

  *a1 = 0;
  a1[1] = a2;
  v4 = a1 + 1;
  if (a3 == 1)
  {
    v5 = operator new(0x50uLL);
    v5[1] = 0u;
    v5[2] = 0u;
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 7) = 512;
    *((_DWORD *)v5 + 16) = 324;
    *((_WORD *)v5 + 34) = 0x2000;
    *((_QWORD *)v5 + 9) = 4;
    v6 = off_24C51C2D8;
    goto LABEL_5;
  }
  if (!a3)
  {
    v5 = operator new(0x48uLL);
    v5[1] = 0u;
    v5[2] = 0u;
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 7) = 512;
    *((_DWORD *)v5 + 16) = 324;
    *((_BYTE *)v5 + 68) = 0;
    v6 = off_24C51C1E0;
LABEL_5:
    *(_QWORD *)v5 = v6;
    *((_QWORD *)v5 + 1) = v4;
    *a1 = v5;
  }
  return a1;
}

void sub_20BF146EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20BF146F8(uint64_t a1)
{
  sub_20BF14608(a1 + 16);
  return a1;
}

void sub_20BF14720(void *a1)
{
  sub_20BF14608((uint64_t)a1 + 16);
  operator delete(a1);
}

uint64_t sub_20BF14748(uint64_t a1)
{
  return sub_20BF14834(a1 + 8);
}

uint64_t sub_20BF14750(uint64_t a1, int a2)
{
  return sub_20BF14950(a1 + 8, a2);
}

uint64_t sub_20BF14758(uint64_t a1, unsigned int a2)
{
  return sub_20BF14A3C(a1 + 8, a2);
}

uint64_t sub_20BF14760(uint64_t a1, unsigned int a2)
{
  return sub_20BF14E0C(a1 + 8, a2);
}

uint64_t sub_20BF14768(uint64_t a1, unint64_t a2)
{
  return sub_20BF14EFC(a1 + 8, a2);
}

uint64_t sub_20BF14770(uint64_t a1, unint64_t a2)
{
  return sub_20BF1562C(a1 + 8, a2);
}

uint64_t sub_20BF14778(uint64_t a1, double a2)
{
  uint64_t v2;
  size_t v3;
  char __s[32];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 8;
  pxrInternal__aapl__pxrReserved__::TfDoubleToString((pxrInternal__aapl__pxrReserved__ *)__s, a2, (char *)0x20, 1);
  v3 = strlen(__s);
  return sub_20BF1571C(v2, (uint64_t)__s, v3);
}

uint64_t sub_20BF147F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_20BF15794(a1 + 8, a2, a3);
}

uint64_t sub_20BF14800(uint64_t a1)
{
  return sub_20BF1590C((_QWORD *)(a1 + 8));
}

uint64_t sub_20BF14808(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_20BF15794(a1 + 8, a2, a3);
}

uint64_t sub_20BF14814(uint64_t a1)
{
  return sub_20BF15A44(a1 + 8);
}

uint64_t sub_20BF14820(uint64_t a1)
{
  return sub_20BF15A9C((_QWORD *)(a1 + 8));
}

uint64_t sub_20BF14828(uint64_t a1)
{
  return sub_20BF15B0C(a1 + 8);
}

uint64_t sub_20BF14834(uint64_t a1)
{
  uint64_t v2;

  sub_20BF14884(a1);
  v2 = sub_20BF148F0();
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v2;
}

uint64_t sub_20BF14884(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1 == *(_QWORD *)(result + 24))
  {
    *(_BYTE *)(result + 60) = 1;
  }
  else
  {
    if (*(_QWORD *)(v1 - 16))
      result = std::ostream::put();
    ++*(_QWORD *)(v1 - 16);
  }
  return result;
}

uint64_t sub_20BF148F0()
{
  std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  return 1;
}

uint64_t sub_20BF14950(uint64_t a1, int a2)
{
  uint64_t v4;

  sub_20BF14884(a1);
  v4 = sub_20BF149B0(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF149B0(uint64_t a1, int a2)
{
  if (!a2)
    std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  return 1;
}

uint64_t sub_20BF14A3C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  sub_20BF14884(a1);
  v4 = sub_20BF14A94(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF14A94(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char v8;
  _BYTE v9[18];

  v2 = a2;
  *(_QWORD *)&v9[10] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x80000000) != 0)
  {
    v3 = v9;
    v8 = 45;
    v2 = -v2;
  }
  else
  {
    v3 = &v8;
  }
  v4 = sub_20BF14B44(v2, v3);
  if (&v8 != v4)
  {
    v5 = v4;
    v6 = &v8;
    do
    {
      ++v6;
      std::ostream::put();
    }
    while (v6 != v5);
  }
  return 1;
}

_BYTE *sub_20BF14B44(unsigned int a1, _BYTE *a2)
{
  unint64_t v2;
  _BYTE *v3;
  unsigned int v4;
  _BYTE *v5;

  if (a1 >> 4 <= 0x270)
  {
    if (a1 < 0x3E8)
    {
      if (a1 < 0x64)
      {
        if (a1 < 0xA)
          goto LABEL_10;
        goto LABEL_9;
      }
    }
    else
    {
      *a2++ = a00010203040506[2 * ((unsigned __int16)a1 / 0x64u)];
    }
    *a2++ = a00010203040506[(2 * ((unsigned __int16)a1 / 0x64u)) | 1];
LABEL_9:
    *a2++ = a00010203040506[2 * ((unsigned __int16)a1 % 0x64u)];
LABEL_10:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)a1 % 0x64u)) | 1];
    return a2 + 1;
  }
  if (a1 < 0x5F5E100)
  {
    v2 = (a1 / 0x7A120uLL) & 0x3FFE;
    if (a1 < 0x989680)
    {
      if (a1 <= 0xF423F)
      {
        if (a1 >> 5 < 0xC35)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    else
    {
      *a2++ = a00010203040506[v2];
    }
    *a2++ = a00010203040506[v2 | 1];
LABEL_15:
    *a2++ = a00010203040506[2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)];
LABEL_16:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)) | 1];
    a2[1] = a00010203040506[2 * (a1 % 0x2710 / 0x64)];
    a2[2] = a00010203040506[(2 * (a1 % 0x2710 / 0x64)) | 1];
    a2[3] = a00010203040506[2 * (a1 % 0x2710 % 0x64)];
    a2[4] = a00010203040506[(unsigned __int16)(2 * (a1 % 0x2710 % 0x64)) | 1];
    return a2 + 5;
  }
  v4 = a1 % 0x5F5E100;
  if (a1 < 0x3B9ACA00)
  {
    *a2 = a1 / 0x5F5E100 + 48;
    v5 = a2 + 1;
  }
  else
  {
    *a2 = a00010203040506[2 * (a1 / 0x5F5E100)];
    v5 = a2 + 2;
    a2[1] = a00010203040506[2 * (a1 / 0x5F5E100) + 1];
  }
  *(_WORD *)v5 = *(_WORD *)&a00010203040506[(v4 / 0x7A120uLL) & 0x3FFE];
  *((_WORD *)v5 + 1) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)(v4 / 0x2710) % 0x64u)];
  *((_WORD *)v5 + 2) = *(_WORD *)&a00010203040506[2 * (v4 % 0x2710 / 0x64)];
  v5[6] = a00010203040506[2 * (v4 % 0x2710 % 0x64)];
  v3 = v5 + 8;
  v5[7] = a00010203040506[(unsigned __int16)(2 * (v4 % 0x2710 % 0x64)) + 1];
  return v3;
}

uint64_t sub_20BF14E0C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  sub_20BF14884(a1);
  v4 = sub_20BF14E64(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF14E64(uint64_t a1, unsigned int a2)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE v6[10];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20BF14B44(a2, v6);
  if (v6 != v2)
  {
    v3 = v2;
    v4 = v6;
    do
    {
      ++v4;
      std::ostream::put();
    }
    while (v4 != v3);
  }
  return 1;
}

uint64_t sub_20BF14EFC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_20BF14884(a1);
  v4 = sub_20BF14F54(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF14F54(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char v8;
  _BYTE v9[28];

  v2 = a2;
  *(_QWORD *)&v9[20] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x8000000000000000) != 0)
  {
    v3 = v9;
    v8 = 45;
    v2 = -(uint64_t)v2;
  }
  else
  {
    v3 = &v8;
  }
  v4 = sub_20BF15004(v2, v3);
  if (&v8 != v4)
  {
    v5 = v4;
    v6 = &v8;
    do
    {
      ++v6;
      std::ostream::put();
    }
    while (v6 != v5);
  }
  return 1;
}

_BYTE *sub_20BF15004(unint64_t a1, _BYTE *a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;

  if (a1 < 0x5F5E100)
  {
    if (a1 >> 4 <= 0x270)
    {
      if (a1 < 0x3E8)
      {
        if (a1 < 0x64)
        {
          if (a1 < 0xA)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      else
      {
        *a2++ = a00010203040506[2 * ((unsigned __int16)a1 / 0x64u)];
      }
      *a2++ = a00010203040506[(2 * ((unsigned __int16)a1 / 0x64u)) | 1];
LABEL_14:
      *a2++ = a00010203040506[2 * ((unsigned __int16)a1 % 0x64u)];
LABEL_15:
      *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)a1 % 0x64u)) | 1];
      return a2 + 1;
    }
    v8 = (a1 / 0x7A120uLL) & 0x3FFE;
    if (a1 < 0x989680)
    {
      if (a1 < 0xF4240)
      {
        if (a1 >> 5 < 0xC35)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else
    {
      *a2++ = a00010203040506[v8];
    }
    *a2++ = a00010203040506[v8 | 1];
LABEL_26:
    *a2++ = a00010203040506[2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)];
LABEL_27:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)) | 1];
    a2[1] = a00010203040506[2 * (a1 % 0x2710 / 0x64)];
    a2[2] = a00010203040506[(2 * (a1 % 0x2710 / 0x64)) | 1];
    a2[3] = a00010203040506[2 * (a1 % 0x2710 % 0x64)];
    a2[4] = a00010203040506[(unsigned __int16)(2 * (a1 % 0x2710 % 0x64)) | 1];
    return a2 + 5;
  }
  if (a1 < 0x2386F26FC10000)
  {
    v2 = a1 % 0x5F5E100;
    v3 = a1 / 0x5F5E100;
    v4 = (v3 / 0x7A120uLL) & 0x3FFE;
    v5 = v2 / 0x2710;
    v6 = v2 % 0x2710;
    v7 = (v2 / 0x7A120uLL) & 0x3FFE;
    if (a1 < 0x38D7EA4C68000)
    {
      if (a1 < 0x5AF3107A4000)
      {
        if (a1 < 0x9184E72A000)
        {
          if (a1 < 0xE8D4A51000)
          {
            if (a1 < 0x174876E800)
            {
              if (a1 < 0x2540BE400)
              {
                if (a1 < 0x3B9ACA00)
                  goto LABEL_23;
                goto LABEL_22;
              }
LABEL_21:
              *a2++ = a00010203040506[(2 * (v3 % 0x2710 / 0x64)) | 1];
LABEL_22:
              *a2++ = a00010203040506[2 * (v3 % 0x2710 % 0x64)];
LABEL_23:
              *a2 = a00010203040506[(unsigned __int16)(2 * (v3 % 0x2710 % 0x64)) | 1];
              a2[1] = a00010203040506[v7];
              a2[2] = a00010203040506[v7 | 1];
              a2[3] = a00010203040506[2 * ((unsigned __int16)v5 % 0x64u)];
              a2[4] = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)v5 % 0x64u)) | 1];
              a2[5] = a00010203040506[2 * ((unsigned __int16)v6 / 0x64u)];
              a2[6] = a00010203040506[(2 * ((unsigned __int16)v6 / 0x64u)) | 1];
              a2[7] = a00010203040506[2 * ((unsigned __int16)v6 % 0x64u)];
              a2[8] = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)v6 % 0x64u)) | 1];
              return a2 + 9;
            }
LABEL_20:
            *a2++ = a00010203040506[2 * (v3 % 0x2710 / 0x64)];
            goto LABEL_21;
          }
LABEL_19:
          *a2++ = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)) | 1];
          goto LABEL_20;
        }
LABEL_18:
        *a2++ = a00010203040506[2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)];
        goto LABEL_19;
      }
    }
    else
    {
      *a2++ = a00010203040506[v4];
    }
    *a2++ = a00010203040506[v4 | 1];
    goto LABEL_18;
  }
  v9 = a1 / 0x2386F26FC10000;
  v10 = a1 % 0x2386F26FC10000;
  if ((a1 / 0x2386F26FC10000) > 9)
  {
    if (v9 > 0x63)
    {
      v13 = (unsigned __int16)v9 / 0x64u;
      if (v9 > 0x3E7)
      {
        v14 = 2 * ((unsigned __int16)v9 % 0x64u);
        *(_WORD *)a2 = *(_WORD *)&a00010203040506[2 * v13];
        a2[2] = a00010203040506[v14];
        v15 = a00010203040506[(v14 & 0xFFFE) + 1];
        v11 = a2 + 4;
        a2[3] = v15;
      }
      else
      {
        *a2 = v13 + 48;
        *(_WORD *)(a2 + 1) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)v9 % 0x64u)];
        v11 = a2 + 3;
      }
    }
    else
    {
      *a2 = a00010203040506[2 * (a1 / 0x2386F26FC10000)];
      v11 = a2 + 2;
      a2[1] = a00010203040506[2 * (a1 / 0x2386F26FC10000) + 1];
    }
  }
  else
  {
    *a2 = v9 + 48;
    v11 = a2 + 1;
  }
  v16 = v10 / 0x5F5E100;
  v17 = v10 % 0x5F5E100;
  *(_WORD *)v11 = *(_WORD *)&a00010203040506[(v16 / 0x7A120uLL) & 0x3FFE];
  *((_WORD *)v11 + 1) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)(v16 / 0x2710) % 0x64u)];
  *((_WORD *)v11 + 2) = *(_WORD *)&a00010203040506[2 * (v16 % 0x2710 / 0x64)];
  v11[6] = a00010203040506[2 * (v16 % 0x2710 % 0x64)];
  v11[7] = a00010203040506[(unsigned __int16)(2 * (v16 % 0x2710 % 0x64)) + 1];
  *((_WORD *)v11 + 4) = *(_WORD *)&a00010203040506[(v17 / 0x7A120uLL) & 0x3FFE];
  *((_WORD *)v11 + 5) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)(v17 / 0x2710) % 0x64u)];
  *((_WORD *)v11 + 6) = *(_WORD *)&a00010203040506[2 * (v17 % 0x2710 / 0x64)];
  v11[14] = a00010203040506[2 * (v17 % 0x2710 % 0x64)];
  v12 = v11 + 16;
  v11[15] = a00010203040506[(unsigned __int16)(2 * (v17 % 0x2710 % 0x64)) + 1];
  return v12;
}

uint64_t sub_20BF1562C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_20BF14884(a1);
  v4 = sub_20BF15684(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF15684(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE v6[20];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20BF15004(a2, v6);
  if (v6 != v2)
  {
    v3 = v2;
    v4 = v6;
    do
    {
      ++v4;
      std::ostream::put();
    }
    while (v4 != v3);
  }
  return 1;
}

uint64_t sub_20BF1571C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;

  sub_20BF14884(a1);
  if (a3)
  {
    v5 = 0;
    do
    {
      std::ostream::put();
      ++v5;
    }
    while (v5 < a3);
  }
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return 1;
}

uint64_t sub_20BF15794(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  sub_20BF14884(a1);
  v6 = sub_20BF157FC(a1, a2, a3);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v6;
}

uint64_t sub_20BF157FC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t i;
  int v6;

  std::ostream::put();
  if (a3)
  {
    for (i = 0; i < a3; ++i)
    {
      v6 = a00010203040506[*(unsigned __int8 *)(a2 + i) + 216];
      if (a00010203040506[*(unsigned __int8 *)(a2 + i) + 216])
      {
        std::ostream::put();
        std::ostream::put();
        if (v6 != 117)
          continue;
        std::ostream::put();
        std::ostream::put();
        std::ostream::put();
      }
      std::ostream::put();
    }
  }
  std::ostream::put();
  return 1;
}

uint64_t sub_20BF1590C(_QWORD *a1)
{
  uint64_t v2;

  sub_20BF14884((uint64_t)a1);
  v2 = a1[4];
  if (a1[5] - v2 <= 15)
  {
    sub_20BF15978(a1 + 1, 1);
    v2 = a1[4];
  }
  a1[4] = v2 + 16;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  std::ostream::put();
  return 1;
}

char *sub_20BF15978(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  size_t v8;

  v4 = a1[2];
  if (v4)
  {
    v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }
  else
  {
    if (!*a1)
    {
      v6 = operator new(1uLL);
      *a1 = v6;
      a1[1] = v6;
    }
    v4 = 0;
    v5 = a1[5];
  }
  v7 = a1[3] - v4 + 16 * a2;
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  return sub_20BF159E8(a1, v8);
}

char *sub_20BF159E8(_QWORD *a1, size_t __size)
{
  void *v4;
  uint64_t v5;
  char *result;

  v4 = (void *)a1[2];
  v5 = a1[3];
  if (__size)
  {
    result = (char *)realloc(v4, __size);
  }
  else
  {
    free(v4);
    result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (_QWORD)v4];
  a1[4] = &result[__size];
  return result;
}

uint64_t sub_20BF15A44(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) -= 16;
  std::ostream::put();
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return 1;
}

uint64_t sub_20BF15A9C(_QWORD *a1)
{
  uint64_t v2;

  sub_20BF14884((uint64_t)a1);
  v2 = a1[4];
  if (a1[5] - v2 <= 15)
  {
    sub_20BF15978(a1 + 1, 1);
    v2 = a1[4];
  }
  a1[4] = v2 + 16;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  std::ostream::put();
  return 1;
}

uint64_t sub_20BF15B0C(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) -= 16;
  std::ostream::put();
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return 1;
}

uint64_t sub_20BF15B64(uint64_t a1)
{
  sub_20BF14608(a1 + 16);
  return a1;
}

void sub_20BF15B8C(void *a1)
{
  sub_20BF14608((uint64_t)a1 + 16);
  operator delete(a1);
}

uint64_t sub_20BF15BB4(uint64_t a1)
{
  return sub_20BF15C2C(a1 + 8);
}

uint64_t sub_20BF15BBC(uint64_t a1, int a2)
{
  return sub_20BF15DBC(a1 + 8, a2);
}

uint64_t sub_20BF15BC4(uint64_t a1, unsigned int a2)
{
  return sub_20BF15E1C(a1 + 8, a2);
}

uint64_t sub_20BF15BCC(uint64_t a1, unsigned int a2)
{
  return sub_20BF15E74(a1 + 8, a2);
}

uint64_t sub_20BF15BD4(uint64_t a1, unint64_t a2)
{
  return sub_20BF15ECC(a1 + 8, a2);
}

uint64_t sub_20BF15BDC(uint64_t a1, unint64_t a2)
{
  return sub_20BF15F24(a1 + 8, a2);
}

uint64_t sub_20BF15BE4(uint64_t a1, double a2)
{
  return sub_20BF15F7C(a1 + 8, a2);
}

uint64_t sub_20BF15BEC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_20BF16070(a1 + 8, a2, a3);
}

uint64_t sub_20BF15BF8(uint64_t a1)
{
  return sub_20BF160D8((_QWORD *)(a1 + 8));
}

uint64_t sub_20BF15C00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_20BF16070(a1 + 8, a2, a3);
}

uint64_t sub_20BF15C0C(uint64_t a1)
{
  return sub_20BF16144(a1 + 8);
}

uint64_t sub_20BF15C18(uint64_t a1)
{
  return sub_20BF161D0((_QWORD *)(a1 + 8));
}

uint64_t sub_20BF15C20(uint64_t a1)
{
  return sub_20BF16240(a1 + 8);
}

uint64_t sub_20BF15C2C(uint64_t a1)
{
  uint64_t v2;

  sub_20BF15C7C(a1);
  v2 = sub_20BF148F0();
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v2;
}

uint64_t sub_20BF15C7C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (v2 == *(_QWORD *)(result + 24))
  {
    *(_BYTE *)(result + 60) = 1;
    return result;
  }
  v3 = *(_QWORD *)(v2 - 16);
  if (*(_BYTE *)(v2 - 8))
  {
    if (v3)
    {
      result = std::ostream::put();
      if ((*(_BYTE *)(v1 + 68) & 1) != 0)
        result = std::ostream::put();
    }
    if ((*(_BYTE *)(v1 + 68) & 1) != 0)
      goto LABEL_13;
    std::ostream::put();
  }
  else
  {
    if (v3)
      std::ostream::put();
    result = std::ostream::put();
    if ((*(_BYTE *)(v2 - 16) & 1) != 0)
      goto LABEL_13;
  }
  result = sub_20BF15D64(v1);
LABEL_13:
  ++*(_QWORD *)(v2 - 16);
  return result;
}

uint64_t sub_20BF15D64(uint64_t result)
{
  uint64_t i;

  for (i = ((*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24)) >> 4) * *(unsigned int *)(result + 64); i; --i)
    result = std::ostream::put();
  return result;
}

uint64_t sub_20BF15DBC(uint64_t a1, int a2)
{
  uint64_t v4;

  sub_20BF15C7C(a1);
  v4 = sub_20BF149B0(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF15E1C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  sub_20BF15C7C(a1);
  v4 = sub_20BF14A94(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF15E74(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  sub_20BF15C7C(a1);
  v4 = sub_20BF14E64(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF15ECC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_20BF15C7C(a1);
  v4 = sub_20BF14F54(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF15F24(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_20BF15C7C(a1);
  v4 = sub_20BF15684(a1, a2);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v4;
}

uint64_t sub_20BF15F7C(uint64_t a1, double a2)
{
  size_t v3;
  char __s[32];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfDoubleToString((pxrInternal__aapl__pxrReserved__ *)__s, a2, (char *)0x20, 1);
  v3 = strlen(__s);
  return sub_20BF15FF8(a1, (uint64_t)__s, v3);
}

uint64_t sub_20BF15FF8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;

  sub_20BF15C7C(a1);
  if (a3)
  {
    v5 = 0;
    do
    {
      std::ostream::put();
      ++v5;
    }
    while (v5 < a3);
  }
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return 1;
}

uint64_t sub_20BF16070(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  sub_20BF15C7C(a1);
  v6 = sub_20BF157FC(a1, a2, a3);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    std::ostream::flush();
  return v6;
}

uint64_t sub_20BF160D8(_QWORD *a1)
{
  uint64_t v2;

  sub_20BF15C7C((uint64_t)a1);
  v2 = a1[4];
  if (a1[5] - v2 <= 15)
  {
    sub_20BF15978(a1 + 1, 1);
    v2 = a1[4];
  }
  a1[4] = v2 + 16;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  std::ostream::put();
  return 1;
}

uint64_t sub_20BF16144(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a1 + 32) = v2 - 16;
  if (v3)
  {
    std::ostream::put();
    sub_20BF15D64(a1);
  }
  std::ostream::put();
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == v5)
  {
    std::ostream::flush();
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
  }
  if (v4 == v5)
    std::ostream::flush();
  return 1;
}

uint64_t sub_20BF161D0(_QWORD *a1)
{
  uint64_t v2;

  sub_20BF15C7C((uint64_t)a1);
  v2 = a1[4];
  if (a1[5] - v2 <= 15)
  {
    sub_20BF15978(a1 + 1, 1);
    v2 = a1[4];
  }
  a1[4] = v2 + 16;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  std::ostream::put();
  return 1;
}

uint64_t sub_20BF16240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a1 + 32) = v2 - 16;
  if (v3 && (*(_BYTE *)(a1 + 68) & 1) == 0)
  {
    std::ostream::put();
    sub_20BF15D64(a1);
  }
  std::ostream::put();
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == v5)
  {
    std::ostream::flush();
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
  }
  if (v4 == v5)
    std::ostream::flush();
  return 1;
}

uint64_t sub_20BF162D4(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = sub_20BF163A0(&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_20BF16370(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_20BF1638C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BF163A0(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

void sub_20BF16458(uint64_t a1, char **a2, uint64_t *a3, __n128 a4)
{
  char *v7;
  int v8;
  _BYTE *v9;
  uint64_t *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  int v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  double v34;
  int v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned __int8 *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v43;
  unsigned int v44;
  _BYTE *v45;
  unsigned __int8 *v46;
  int v47;
  unint64_t v48;
  _BYTE *v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  _BYTE *v57;
  int v58;
  unsigned __int8 *v59;
  _BYTE *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  _BYTE *v68;
  unsigned int v69;
  __n128 v70;
  char *v71;
  char *i;
  unsigned int v73;
  uint64_t v74;
  char *v76;
  unsigned int v77;
  uint64_t v78;
  char *v80;
  char *j;
  unsigned int v82;
  uint64_t v83;
  int v85;
  unsigned int v86;
  uint64_t v87;
  __n128 v89;
  unsigned int v90;
  char *v91;
  char *k;
  unsigned int v93;
  uint64_t v94;
  int v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  char *v101;
  unint64_t v102;
  int v103;
  uint64_t *v104;
  char *v105;
  int v106;
  char *v107;
  double v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  unsigned __int8 *v112;
  unsigned int v113;
  int v114;
  int v115;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned __int8 **v120;
  int v121[2];
  int v122;
  __int128 v123;
  char **v124;
  double v125;

  v7 = *a2;
  v8 = **a2;
  if (v8 > 109)
  {
    switch(v8)
    {
      case '{':
        v14 = v7 + 1;
        *a2 = v14;
        while (1)
        {
          v15 = *v14;
          v16 = v15 > 0x20;
          v17 = (1 << v15) & 0x100002600;
          if (v16 || v17 == 0)
            break;
          ++v14;
        }
        *a2 = v14;
        if (!*(_DWORD *)(a1 + 48))
        {
          v19 = *v14;
          if (v19 == 125)
          {
            *a2 = v14 + 1;
            v20 = a3;
            v21 = 0;
LABEL_28:
            sub_20BF1802C(v20, v21);
          }
          else
          {
            if (v19 != 34)
            {
LABEL_171:
              v64 = v14 - a2[1];
              v65 = 4;
              goto LABEL_131;
            }
            v69 = 0;
            while (1)
            {
              v70.n128_f64[0] = sub_20BF1741C(a1, a2, a3, 1);
              if (*(_DWORD *)(a1 + 48))
                break;
              v71 = *a2;
              for (i = *a2; ; ++i)
              {
                v73 = *i;
                v16 = v73 > 0x20;
                v74 = (1 << v73) & 0x100002600;
                if (v16 || v74 == 0)
                  break;
                ++v71;
              }
              *a2 = i;
              if (*i != 58)
              {
                v64 = v71 - a2[1];
                v65 = 5;
                goto LABEL_131;
              }
              v76 = i + 1;
              *a2 = i + 1;
              while (1)
              {
                v77 = *v76;
                v16 = v77 > 0x20;
                v78 = (1 << v77) & 0x100002600;
                if (v16 || v78 == 0)
                  break;
                ++v76;
              }
              *a2 = v76;
              sub_20BF16458(a1, a2, a3, v70);
              if (*(_DWORD *)(a1 + 48))
                return;
              v80 = *a2;
              for (j = *a2; ; ++j)
              {
                v82 = *j;
                v16 = v82 > 0x20;
                v83 = (1 << v82) & 0x100002600;
                if (v16 || v83 == 0)
                  break;
                ++v80;
              }
              *a2 = j;
              ++v69;
              v85 = *j;
              if (v85 != 44)
              {
                if (v85 == 125)
                {
                  *a2 = j + 1;
                  v20 = a3;
                  v21 = v69;
                  goto LABEL_28;
                }
                v64 = v80 - a2[1];
                v65 = 6;
                goto LABEL_131;
              }
              v14 = j + 1;
              *a2 = j + 1;
              while (1)
              {
                v86 = *v14;
                v16 = v86 > 0x20;
                v87 = (1 << v86) & 0x100002600;
                if (v16 || v87 == 0)
                  break;
                ++v14;
              }
              *a2 = v14;
              if (*v14 != 34)
                goto LABEL_171;
            }
          }
        }
        break;
      case 't':
        v9 = v7 + 1;
        *a2 = v7 + 1;
        if (v7[1] == 114)
        {
          v9 = v7 + 2;
          *a2 = v7 + 2;
          if (v7[2] == 117)
          {
            v9 = v7 + 3;
            *a2 = v7 + 3;
            if (v7[3] == 101)
            {
              *a2 = v7 + 4;
              v10 = a3;
              v11 = 1;
              goto LABEL_56;
            }
          }
        }
        goto LABEL_130;
      case 'n':
        v9 = v7 + 1;
        *a2 = v7 + 1;
        if (v7[1] != 117 || (v9 = v7 + 2, *a2 = v7 + 2, v7[2] != 108) || (v9 = v7 + 3, *a2 = v7 + 3, v7[3] != 108))
        {
LABEL_130:
          v64 = v9 - a2[1];
          v65 = 3;
LABEL_131:
          *(_DWORD *)(a1 + 48) = v65;
          *(_QWORD *)(a1 + 56) = v64;
          return;
        }
        *a2 = v7 + 4;
        v12 = a3[4];
        if (v12 >= a3[5])
        {
          v13 = sub_20BF17790(a3 + 3);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)a3[4]);
          v13 = v12 + 16;
          a3[4] = v12 + 16;
        }
        a3[4] = v13;
        break;
      default:
        goto LABEL_29;
    }
  }
  else
  {
    if (v8 == 34)
    {
      sub_20BF1741C(a1, a2, a3, 0);
      return;
    }
    if (v8 != 91)
    {
      if (v8 == 102)
      {
        v9 = v7 + 1;
        *a2 = v7 + 1;
        if (v7[1] == 97)
        {
          v9 = v7 + 2;
          *a2 = v7 + 2;
          if (v7[2] == 108)
          {
            v9 = v7 + 3;
            *a2 = v7 + 3;
            if (v7[3] == 115)
            {
              v9 = v7 + 4;
              *a2 = v7 + 4;
              if (v7[4] == 101)
              {
                *a2 = v7 + 5;
                v10 = a3;
                v11 = 0;
LABEL_56:
                sub_20BF178A0(v10, v11);
                return;
              }
            }
          }
        }
        goto LABEL_130;
      }
LABEL_29:
      v123 = *(_OWORD *)a2;
      v124 = a2;
      v120 = (unsigned __int8 **)&v123;
      *(_QWORD *)v121 = a1;
      v122 = 0;
      v22 = v123;
      v23 = *(unsigned __int8 *)v123;
      if (v23 == 45)
      {
        v24 = v123 + 1;
        *(_QWORD *)&v123 = v123 + 1;
        v25 = *(unsigned __int8 *)(v22 + 1);
      }
      else
      {
        v25 = *(unsigned __int8 *)v123;
        v24 = v123;
      }
      v117 = *((_QWORD *)&v123 + 1);
      v115 = v23;
      v118 = v22;
      if (v25 == 48)
      {
        v68 = *(_BYTE **)(a1 + 24);
        if ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v68) <= 0)
        {
          sub_20BF17D90((_QWORD *)a1, 1);
          v68 = *(_BYTE **)(a1 + 24);
        }
        v47 = 0;
        v35 = 0;
        v48 = 0;
        v31 = 0;
        v119 = 0;
        *(_QWORD *)(a1 + 24) = v68 + 1;
        *v68 = 48;
        v27 = ++v122;
        v28 = v120;
        v30 = *v120 + 1;
        *v120 = v30;
        v32 = *v30;
        v34 = 0.0;
      }
      else
      {
        if ((v25 - 49) > 8)
        {
          v66 = v24 - *((_QWORD *)&v123 + 1);
          v67 = 3;
          goto LABEL_246;
        }
        v26 = *(_BYTE **)(a1 + 24);
        if ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v26) <= 0)
        {
          sub_20BF17D90((_QWORD *)a1, 1);
          v26 = *(_BYTE **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 24) = v26 + 1;
        *v26 = v25;
        v27 = ++v122;
        v28 = v120;
        v29 = *v120;
        v30 = *v120 + 1;
        *v120 = v30;
        v31 = (char)*v29 - 48;
        v32 = v29[1];
        v33 = v32 - 48;
        v34 = 0.0;
        if (v23 == 45)
        {
          if (v33 <= 9)
          {
            v35 = 0;
            v36 = 214748364;
            while (1)
            {
              if (v31 > 0xCCCCCCB)
              {
                if (v31 != 214748364)
                  goto LABEL_129;
                if (v32 > 0x38)
                  break;
              }
              v37 = *(_BYTE **)(*(_QWORD *)v121 + 24);
              if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v121 + 32) - (_QWORD)v37) <= 0)
              {
                sub_20BF17D90(*(_QWORD **)v121, 1);
                v37 = *(_BYTE **)(*(_QWORD *)v121 + 24);
              }
              *(_QWORD *)(*(_QWORD *)v121 + 24) = v37 + 1;
              *v37 = v32;
              v27 = ++v122;
              v28 = v120;
              v38 = *v120;
              v30 = *v120 + 1;
              *v120 = v30;
              v31 = (char)*v38 + 10 * v31 - 48;
              ++v35;
              v32 = v38[1];
              if (v32 - 48 >= 0xA)
                goto LABEL_71;
            }
            v32 = 57;
LABEL_76:
            v48 = v36;
            if (v115 == 45)
            {
              while (v48 <= 0xCCCCCCCCCCCCCCBLL || v32 <= 0x38 && v48 == 0xCCCCCCCCCCCCCCCLL)
              {
                v49 = *(_BYTE **)(*(_QWORD *)v121 + 24);
                if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v121 + 32) - (_QWORD)v49) <= 0)
                {
                  sub_20BF17D90(*(_QWORD **)v121, 1);
                  v49 = *(_BYTE **)(*(_QWORD *)v121 + 24);
                }
                *(_QWORD *)(*(_QWORD *)v121 + 24) = v49 + 1;
                *v49 = v32;
                v27 = ++v122;
                v28 = v120;
                v50 = *v120;
                v30 = *v120 + 1;
                *v120 = v30;
                v48 = ((char)*v50 - 48) + 10 * v48;
                ++v35;
                v32 = v50[1];
                if (v32 - 48 >= 0xA)
                  goto LABEL_93;
              }
            }
            else
            {
              while (v48 <= 0x1999999999999998 || v32 <= 0x35 && v48 == 0x1999999999999999)
              {
                v51 = *(_BYTE **)(*(_QWORD *)v121 + 24);
                if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v121 + 32) - (_QWORD)v51) <= 0)
                {
                  sub_20BF17D90(*(_QWORD **)v121, 1);
                  v51 = *(_BYTE **)(*(_QWORD *)v121 + 24);
                }
                *(_QWORD *)(*(_QWORD *)v121 + 24) = v51 + 1;
                *v51 = v32;
                v27 = ++v122;
                v28 = v120;
                v52 = *v120;
                v30 = *v120 + 1;
                *v120 = v30;
                v48 = ((char)*v52 - 48) + 10 * v48;
                ++v35;
                v32 = v52[1];
                if (v32 - 48 >= 0xA)
                {
LABEL_93:
                  v47 = 0;
                  v34 = 0.0;
                  v119 = 1;
                  v31 = v36;
                  goto LABEL_99;
                }
              }
            }
            v34 = (double)v48;
            do
            {
              v53 = *(_BYTE **)(*(_QWORD *)v121 + 24);
              if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v121 + 32) - (_QWORD)v53) <= 0)
              {
                sub_20BF17D90(*(_QWORD **)v121, 1);
                v53 = *(_BYTE **)(*(_QWORD *)v121 + 24);
              }
              *(_QWORD *)(*(_QWORD *)v121 + 24) = v53 + 1;
              *v53 = v32;
              v27 = ++v122;
              v28 = v120;
              v54 = *v120;
              v30 = *v120 + 1;
              *v120 = v30;
              v34 = v34 * 10.0 + (double)((char)*v54 - 48);
              v32 = v54[1];
            }
            while (v32 - 48 < 0xA);
            v47 = 1;
            v31 = v36;
            v119 = 1;
            goto LABEL_99;
          }
        }
        else if (v33 <= 9)
        {
          v35 = 0;
          v36 = 429496729;
          while (1)
          {
            if (v31 > 0x19999998)
            {
              if (v31 != 429496729)
              {
LABEL_129:
                v36 = v31;
                goto LABEL_76;
              }
              if (v32 > 0x35)
                goto LABEL_76;
            }
            v45 = *(_BYTE **)(*(_QWORD *)v121 + 24);
            if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v121 + 32) - (_QWORD)v45) <= 0)
            {
              sub_20BF17D90(*(_QWORD **)v121, 1);
              v45 = *(_BYTE **)(*(_QWORD *)v121 + 24);
            }
            *(_QWORD *)(*(_QWORD *)v121 + 24) = v45 + 1;
            *v45 = v32;
            v27 = ++v122;
            v28 = v120;
            v46 = *v120;
            v30 = *v120 + 1;
            *v120 = v30;
            v31 = (char)*v46 + 10 * v31 - 48;
            ++v35;
            v32 = v46[1];
            if (v32 - 48 >= 0xA)
            {
LABEL_71:
              v47 = 0;
              goto LABEL_72;
            }
          }
        }
        v47 = 0;
        v35 = 0;
LABEL_72:
        v48 = 0;
        v119 = 0;
      }
LABEL_99:
      if (v32 != 46)
      {
        v55 = 0;
        v58 = v27;
LABEL_196:
        if (v32 != 101 && v32 != 69)
        {
          v106 = 0;
LABEL_249:
          v104 = a3;
          goto LABEL_209;
        }
        v101 = (char *)(v30 + 1);
        *v28 = v30 + 1;
        v102 = v31;
        if (v119)
          v102 = v48;
        if (!v47)
          v34 = (double)v102;
        v103 = v30[1];
        if (v103 == 43)
        {
          v101 = (char *)(v30 + 2);
          *v28 = v30 + 2;
          v103 = v30[2];
        }
        else if (v103 == 45)
        {
          v101 = (char *)(v30 + 2);
          *v28 = v30 + 2;
          if (v30[2] - 48 <= 9)
          {
            *v28 = v30 + 3;
            v111 = (char)v30[2] - 48;
            if (v30[3] - 48 <= 9)
            {
              v112 = v30 + 5;
              while (1)
              {
                *v28 = v112 - 1;
                v111 = (char)*(v112 - 2) + 10 * v111 - 48;
                v113 = *(v112 - 1) - 48;
                if (v111 > (v55 + 2147483639) / 10)
                  break;
                ++v112;
                if (v113 >= 0xA)
                  goto LABEL_248;
              }
              if (v113 <= 9)
              {
                do
                {
                  *v28 = v112;
                  v114 = *v112++;
                }
                while ((v114 - 48) < 0xA);
              }
            }
LABEL_248:
            v106 = -v111;
            v47 = 1;
            goto LABEL_249;
          }
          goto LABEL_245;
        }
        v104 = a3;
        if ((v103 - 48) < 0xA)
        {
          v105 = v101 + 1;
          *v28 = (unsigned __int8 *)(v101 + 1);
          v106 = *v101 - 48;
          while (*v105 - 48 <= 9)
          {
            *v28 = (unsigned __int8 *)(v105 + 1);
            v106 = *v105++ + 10 * v106 - 48;
            if (v106 > 308 - v55)
              goto LABEL_211;
          }
          v47 = 1;
LABEL_209:
          v107 = (char *)sub_20BF18878((uint64_t)&v120);
          if (v47)
          {
            v108 = sub_20BF188E4(v106 + v55, v107, v58, v27, v106, v34);
            if (v108 > 1.79769313e308)
            {
LABEL_211:
              *(_DWORD *)(a1 + 48) = 13;
              *(_QWORD *)(a1 + 56) = v118 - v117;
LABEL_234:
              *(_OWORD *)v124 = v123;
              return;
            }
            if (v115 == 45)
              v108 = -v108;
            v125 = v108;
            v109 = v104[4];
            if (v109 >= v104[5])
            {
              v110 = sub_20BF194CC(v104 + 3, &v125);
              goto LABEL_233;
            }
            pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v104[4], v108);
          }
          else if (v119)
          {
            if (v115 == 45)
            {
              *(_QWORD *)&v125 = -(uint64_t)v48;
              v109 = v104[4];
              if (v109 >= v104[5])
              {
                v110 = sub_20BF195EC(v104 + 3, (uint64_t *)&v125);
                goto LABEL_233;
              }
              pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v104[4], -(uint64_t)v48);
            }
            else
            {
              v125 = *(double *)&v48;
              v109 = v104[4];
              if (v109 >= v104[5])
              {
                v110 = sub_20BF1970C(v104 + 3, (uint64_t *)&v125);
                goto LABEL_233;
              }
              pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v104[4], v48);
            }
          }
          else if (v115 == 45)
          {
            LODWORD(v125) = -v31;
            v109 = v104[4];
            if (v109 >= v104[5])
            {
              v110 = sub_20BF1982C(v104 + 3, (int *)&v125);
              goto LABEL_233;
            }
            pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v104[4], -v31);
          }
          else
          {
            *(_QWORD *)&v125 = v31;
            v109 = v104[4];
            if (v109 >= v104[5])
            {
              v110 = sub_20BF1994C(v104 + 3, (uint64_t *)&v125);
              goto LABEL_233;
            }
            pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v104[4], v31);
          }
          v110 = v109 + 16;
          v104[4] = v109 + 16;
LABEL_233:
          v104[4] = v110;
          goto LABEL_234;
        }
LABEL_245:
        v66 = v101 - (char *)v28[1];
        v67 = 15;
        goto LABEL_246;
      }
      *v28 = v30 + 1;
      v32 = v30[1];
      if (v32 - 48 < 0xA)
      {
        if ((v47 & 1) != 0)
        {
          v55 = 0;
        }
        else
        {
          if (!v119)
            v48 = v31;
          if (!(v48 >> 53))
          {
            v56 = -1;
            do
            {
              v55 = v56;
              v57 = *(_BYTE **)(*(_QWORD *)v121 + 24);
              if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v121 + 32) - (_QWORD)v57) <= 0)
              {
                sub_20BF17D90(*(_QWORD **)v121, 1);
                v57 = *(_BYTE **)(*(_QWORD *)v121 + 24);
              }
              *(_QWORD *)(*(_QWORD *)v121 + 24) = v57 + 1;
              *v57 = v32;
              v58 = ++v122;
              v28 = v120;
              v59 = *v120;
              v30 = *v120 + 1;
              *v120 = v30;
              v48 = ((char)*v59 - 48) + 10 * v48;
              v32 = v59[1];
              if ((char)v32 <= 47)
              {
                v34 = (double)v48;
                goto LABEL_195;
              }
              if (v48)
                ++v35;
              v56 = v55 - 1;
            }
            while (v32 <= 0x39 && v48 >> 53 == 0);
            v34 = (double)v48;
            if (v32 - 48 <= 9)
              goto LABEL_119;
            v30 = v59 + 1;
            goto LABEL_195;
          }
          v55 = 0;
          v34 = (double)v48;
        }
        do
        {
LABEL_119:
          v61 = *(_BYTE **)(*(_QWORD *)v121 + 24);
          v62 = *(_QWORD *)(*(_QWORD *)v121 + 32) - (_QWORD)v61;
          if (v35 > 16)
          {
            if (v62 <= 0)
            {
              sub_20BF17D90(*(_QWORD **)v121, 1);
              v61 = *(_BYTE **)(*(_QWORD *)v121 + 24);
            }
            *(_QWORD *)(*(_QWORD *)v121 + 24) = v61 + 1;
            *v61 = v32;
            v58 = ++v122;
            v28 = v120;
            v30 = *v120 + 1;
            *v120 = v30;
          }
          else
          {
            if (v62 <= 0)
            {
              sub_20BF17D90(*(_QWORD **)v121, 1);
              v61 = *(_BYTE **)(*(_QWORD *)v121 + 24);
            }
            *(_QWORD *)(*(_QWORD *)v121 + 24) = v61 + 1;
            *v61 = v32;
            v58 = ++v122;
            v28 = v120;
            v63 = *v120;
            v30 = *v120 + 1;
            *v120 = v30;
            v34 = v34 * 10.0 + (double)((char)*v63 - 48);
            --v55;
            if (v34 > 0.0)
              ++v35;
          }
          v32 = *v30;
        }
        while (v32 - 48 < 0xA);
LABEL_195:
        v47 = 1;
        goto LABEL_196;
      }
      v66 = v30 + 1 - v28[1];
      v67 = 14;
LABEL_246:
      *(_DWORD *)(a1 + 48) = v67;
      *(_QWORD *)(a1 + 56) = v66;
      goto LABEL_234;
    }
    v39 = v7 + 1;
    *a2 = v39;
    while (1)
    {
      v40 = *v39;
      v16 = v40 > 0x20;
      v41 = (1 << v40) & 0x100002600;
      if (v16 || v41 == 0)
        break;
      ++v39;
    }
    *a2 = v39;
    if (!*(_DWORD *)(a1 + 48))
    {
      if (*v39 == 93)
      {
        *a2 = v39 + 1;
        v43 = a3;
        v44 = 0;
      }
      else
      {
        sub_20BF16458(a1, a2, a3, a4);
        if (*(_DWORD *)(a1 + 48))
          return;
        v90 = 0;
        while (1)
        {
          v91 = *a2;
          for (k = *a2; ; ++k)
          {
            v93 = *k;
            v16 = v93 > 0x20;
            v94 = (1 << v93) & 0x100002600;
            if (v16 || v94 == 0)
              break;
            ++v91;
          }
          ++v90;
          *a2 = k;
          v96 = *k;
          if (v96 != 44)
            break;
          v97 = k + 1;
          *a2 = k + 1;
          while (1)
          {
            v98 = *v97;
            v16 = v98 > 0x20;
            v99 = (1 << v98) & 0x100002600;
            if (v16 || v99 == 0)
              break;
            ++v97;
          }
          *a2 = v97;
          sub_20BF16458(a1, a2, a3, v89);
          if (*(_DWORD *)(a1 + 48))
            return;
        }
        if (v96 != 93)
        {
          v64 = v91 - a2[1];
          v65 = 7;
          goto LABEL_131;
        }
        *a2 = k + 1;
        v43 = a3;
        v44 = v90;
      }
      sub_20BF185E0(v43, v44);
    }
  }
}

void sub_20BF173C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, _OWORD *a18)
{
  *a18 = a17;
  _Unwind_Resume(a1);
}

double sub_20BF1741C(uint64_t a1, _OWORD *a2, uint64_t *a3, int a4)
{
  char *v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  double result;
  uint64_t v32;
  int v33[2];
  size_t __len;
  __int128 v35;
  _OWORD *v36;
  unsigned int v37;
  void *__p[2];
  char v39;

  v35 = *a2;
  v7 = (char *)(v35 + 1);
  v36 = a2;
  *(_QWORD *)&v35 = v35 + 1;
  *(_QWORD *)v33 = a1;
  LODWORD(__len) = 0;
  while (1)
  {
    v8 = *v7;
    if (v8 != 92)
      break;
    *(_QWORD *)&v35 = v7 + 1;
    v12 = v7[1];
    v9 = byte_20CA9BB8C[v12];
    if (v9)
    {
      *(_QWORD *)&v35 = v7 + 2;
      v10 = *(_QWORD *)v33;
      v11 = *(_BYTE **)(*(_QWORD *)v33 + 24);
      if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v33 + 32) - (_QWORD)v11) <= 0)
        goto LABEL_10;
      goto LABEL_6;
    }
    v13 = (uint64_t)&v7[-*((_QWORD *)&v35 + 1)];
    if ((_DWORD)v12 != 117)
    {
      *(_DWORD *)(a1 + 48) = 10;
      *(_QWORD *)(a1 + 56) = v13;
      goto LABEL_39;
    }
    *(_QWORD *)&v35 = v7 + 2;
    v32 = (uint64_t)&v7[-*((_QWORD *)&v35 + 1)];
    v14 = sub_20BF17A20(a1, (uint64_t *)&v35, v13);
    if (*(_DWORD *)(a1 + 48))
      goto LABEL_39;
    v15 = v14;
    if (v14 >> 11 == 27)
    {
      if (v14 >> 10 > 0x36)
        goto LABEL_41;
      v16 = v35;
      if (*(_BYTE *)v35 != 92)
        goto LABEL_41;
      *(_QWORD *)&v35 = v35 + 1;
      if (*(_BYTE *)(v16 + 1) != 117)
        goto LABEL_41;
      v17 = v14;
      *(_QWORD *)&v35 = v16 + 2;
      v18 = sub_20BF17A20(a1, (uint64_t *)&v35, v32);
      if (*(_DWORD *)(a1 + 48))
        goto LABEL_39;
      if ((v18 - 57344) <= 0xFFFFFBFF)
      {
LABEL_41:
        *(_DWORD *)(a1 + 48) = 9;
        v27 = (unsigned __int8 *)v32;
LABEL_33:
        *(_QWORD *)(a1 + 56) = v27;
        goto LABEL_39;
      }
      v15 = ((v18 - 56320) | ((v17 << 10) - 56623104)) + 0x10000;
    }
    sub_20BF17AA8((char *)v33, v15);
LABEL_7:
    v7 = (char *)v35;
  }
  if (v8 != 34)
  {
    if (v8 <= 0x1F)
    {
      v27 = (unsigned __int8 *)&v7[-*((_QWORD *)&v35 + 1)];
      if (v8)
        v28 = 12;
      else
        v28 = 11;
      *(_DWORD *)(a1 + 48) = v28;
      goto LABEL_33;
    }
    *(_QWORD *)&v35 = v7 + 1;
    v9 = *v7;
    v10 = *(_QWORD *)v33;
    v11 = *(_BYTE **)(*(_QWORD *)v33 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v33 + 32) - (_QWORD)v11) <= 0)
    {
LABEL_10:
      sub_20BF17D90(*(_QWORD **)v33, 1);
      v11 = *(_BYTE **)(v10 + 24);
    }
LABEL_6:
    *(_QWORD *)(v10 + 24) = v11 + 1;
    *v11 = v9;
    LODWORD(__len) = __len + 1;
    goto LABEL_7;
  }
  *(_QWORD *)&v35 = v7 + 1;
  v19 = *(_QWORD *)v33;
  v20 = *(_BYTE **)(*(_QWORD *)v33 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v33 + 32) - (_QWORD)v20) <= 0)
  {
    sub_20BF17D90(*(_QWORD **)v33, 1);
    v20 = *(_BYTE **)(v19 + 24);
  }
  *(_QWORD *)(v19 + 24) = v20 + 1;
  *v20 = 0;
  v21 = __len;
  v22 = __len + 1;
  LODWORD(__len) = __len + 1;
  if (!*(_DWORD *)(a1 + 48))
  {
    v23 = *(_QWORD *)(*(_QWORD *)v33 + 24);
    v24 = (void *)(v23 - v22);
    *(_QWORD *)(*(_QWORD *)v33 + 24) = v24;
    if (a4)
    {
      __p[0] = (void *)(v23 - v22);
      v37 = v21;
      v25 = a3[1];
      if (v25 >= a3[2])
      {
        v26 = sub_20BF17E00(a3, __p, &v37);
      }
      else
      {
        sub_20BDFC7D8((_QWORD *)a3[1], v24, v21);
        v26 = v25 + 24;
        a3[1] = v25 + 24;
      }
      a3[1] = v26;
    }
    else
    {
      sub_20BDFC7D8(__p, v24, v21);
      v29 = a3[4];
      if (v29 >= a3[5])
      {
        v30 = sub_20BF17F0C(a3 + 3, (uint64_t)__p);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::JsValue::JsValue((_QWORD *)a3[4], (uint64_t)__p);
        v30 = v29 + 16;
        a3[4] = v29 + 16;
      }
      a3[4] = v30;
      if (v39 < 0)
        operator delete(__p[0]);
    }
  }
LABEL_39:
  result = *(double *)&v35;
  *v36 = v35;
  return result;
}

void sub_20BF17740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, _OWORD *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *a14 = a13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF17790(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = (_QWORD *)*a1;
  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20BDDF694();
  v5 = (uint64_t)(a1 + 2);
  v6 = a1[2] - (_QWORD)v2;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v20 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BDEA2F0(v5, v7);
  else
    v8 = 0;
  v17 = v8;
  v18.i64[0] = (uint64_t)&v8[16 * v3];
  v19 = &v8[16 * v7];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v18.i64[0]);
  v9 = v18.i64[0];
  v10 = v18.i64[0] + 16;
  v18.i64[1] = v18.i64[0] + 16;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      v13 = *((_OWORD *)v11 - 1);
      v11 -= 2;
      *(_OWORD *)(v9 - 16) = v13;
      v9 -= 16;
      *v11 = 0;
      v11[1] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  sub_20BDEA324((uint64_t)&v17);
  return v10;
}

void sub_20BF1788C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF178A0(_QWORD *a1, char a2)
{
  unint64_t v3;
  uint64_t result;
  char v5;

  v5 = a2;
  v3 = a1[4];
  if (v3 >= a1[5])
  {
    result = sub_20BF17900(a1 + 3, &v5);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)a1[4], a2);
    result = v3 + 16;
    a1[4] = v3 + 16;
  }
  a1[4] = result;
  return result;
}

void sub_20BF178F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BF17900(uint64_t *a1, char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v20.i64[0], *a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF17A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF17A20(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result;
  v4 = 0;
  LODWORD(result) = 0;
  v5 = *a2;
  while (1)
  {
    v6 = *(char *)(v5 + v4);
    if ((v6 - 48) >= 0xA)
      break;
    v7 = -48;
LABEL_8:
    result = (v6 + 16 * result + v7);
    *a2 = v5 + v4++ + 1;
    if ((_DWORD)v4 == 4)
      return result;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 65 < 6)
  {
    v7 = -55;
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 97 < 6)
  {
    v7 = -87;
    goto LABEL_8;
  }
  result = 0;
  *(_DWORD *)(v3 + 48) = 8;
  *(_QWORD *)(v3 + 56) = a3;
  return result;
}

char *sub_20BF17AA8(char *result, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  _BYTE *v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  _QWORD *v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  _BYTE *v28;

  v3 = result;
  if (a2 <= 0x7F)
  {
    v4 = *(_QWORD *)result;
    v5 = *(_BYTE **)(*(_QWORD *)result + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v5) <= 0)
    {
      result = sub_20BF17D90(*(_QWORD **)result, 1);
      v5 = *(_BYTE **)(v4 + 24);
    }
    *(_QWORD *)(v4 + 24) = v5 + 1;
    *v5 = a2;
    v6 = v3 + 8;
    goto LABEL_27;
  }
  if (a2 <= 0x7FF)
  {
    v7 = (a2 >> 6) | 0xFFFFFFC0;
    v8 = *(_QWORD *)result;
    v9 = *(_BYTE **)(*(_QWORD *)result + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v9) <= 0)
    {
      result = sub_20BF17D90(*(_QWORD **)result, 1);
      v9 = *(_BYTE **)(v8 + 24);
    }
    *(_QWORD *)(v8 + 24) = v9 + 1;
    *v9 = v7;
    v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
LABEL_24:
    v27 = *(_QWORD **)v3;
    v28 = (_BYTE *)v27[3];
    if ((uint64_t)(v27[4] - (_QWORD)v28) <= 0)
    {
      result = sub_20BF17D90(v27, 1);
      v28 = (_BYTE *)v27[3];
    }
    v27[3] = v28 + 1;
    *v28 = a2 & 0x3F | 0x80;
    goto LABEL_27;
  }
  v10 = *(_QWORD *)result;
  v11 = *(_BYTE **)(*(_QWORD *)result + 24);
  v12 = *(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v11;
  if (HIWORD(a2))
  {
    v20 = (a2 >> 18) | 0xFFFFFFF0;
    if (v12 <= 0)
    {
      result = sub_20BF17D90(*(_QWORD **)result, 1);
      v11 = *(_BYTE **)(v10 + 24);
    }
    *(_QWORD *)(v10 + 24) = v11 + 1;
    *v11 = v20;
    v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
    v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
    v22 = *(_QWORD **)v3;
    v23 = *(_BYTE **)(*(_QWORD *)v3 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v23) <= 0)
    {
      result = sub_20BF17D90(*(_QWORD **)v3, 1);
      v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      v23 = (_BYTE *)v22[3];
    }
    v22[3] = v23 + 1;
    *v23 = v21;
    ++*((_DWORD *)v3 + 2);
    v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    v25 = *(_QWORD *)v3;
    v26 = *(_BYTE **)(*(_QWORD *)v3 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v26) <= 0)
    {
      result = sub_20BF17D90(*(_QWORD **)v3, 1);
      v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
      v26 = *(_BYTE **)(v25 + 24);
    }
    *(_QWORD *)(v25 + 24) = v26 + 1;
    *v26 = v24;
    ++*((_DWORD *)v3 + 2);
    goto LABEL_24;
  }
  v13 = (a2 >> 12) | 0xFFFFFFE0;
  if (v12 <= 0)
  {
    result = sub_20BF17D90(*(_QWORD **)result, 1);
    v11 = *(_BYTE **)(v10 + 24);
  }
  *(_QWORD *)(v10 + 24) = v11 + 1;
  *v11 = v13;
  v6 = v3 + 8;
  ++*((_DWORD *)v3 + 2);
  v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
  v15 = *(_QWORD *)v3;
  v16 = *(_BYTE **)(*(_QWORD *)v3 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v16) <= 0)
  {
    result = sub_20BF17D90(*(_QWORD **)v3, 1);
    v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    v16 = *(_BYTE **)(v15 + 24);
  }
  *(_QWORD *)(v15 + 24) = v16 + 1;
  *v16 = v14;
  ++*((_DWORD *)v3 + 2);
  v17 = a2 & 0x3F | 0x80;
  v18 = *(_QWORD **)v3;
  v19 = (_BYTE *)v18[3];
  if ((uint64_t)(v18[4] - (_QWORD)v19) <= 0)
  {
    result = sub_20BF17D90(v18, 1);
    v17 = a2 & 0x3F | 0x80;
    v19 = (_BYTE *)v18[3];
  }
  v18[3] = v19 + 1;
  *v19 = v17;
LABEL_27:
  ++*v6;
  return result;
}

char *sub_20BF17D90(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  size_t v7;
  size_t v8;

  v4 = a1[2];
  if (v4)
  {
    v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }
  else
  {
    if (!*a1)
    {
      v6 = operator new(1uLL);
      *a1 = v6;
      a1[1] = v6;
    }
    v4 = 0;
    v5 = a1[5];
  }
  v7 = a2 - v4 + a1[3];
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  return sub_20BF159E8(a1, v8);
}

uint64_t sub_20BF17E00(uint64_t *a1, void **a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BDE4FF4(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[24 * v5];
  v17 = v16;
  v18 = &v12[24 * v11];
  sub_20BDFC7D8(v16, *a2, *a3);
  v17 = v16 + 24;
  sub_20BDF34C0(a1, &v15);
  v13 = a1[1];
  sub_20BDF3648((uint64_t)&v15);
  return v13;
}

void sub_20BF17EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF17F0C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF18018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF1802C(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  __int128 v18;
  uint64_t *v19;
  _QWORD *v20[2];

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) - a2;
  v4 = a1 + 3;
  v5 = ((a1[4] - a1[3]) >> 4) - a2;
  v20[0] = 0;
  v20[1] = 0;
  v19 = (uint64_t *)v20;
  if (a2)
  {
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = *a1 + 24 * (v6 + v3);
      v9 = a1[3] + 16 * (v6 + v5);
      v10 = *(_QWORD *)(v8 + 16);
      *(_OWORD *)__p = *(_OWORD *)v8;
      v17 = v10;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = 0;
      v18 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      sub_20BF1828C(&v19, (const void **)__p, (uint64_t)__p);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (SHIBYTE(v17) < 0)
        operator delete(__p[0]);
      ++v6;
    }
    while (v6 != v7);
  }
  sub_20BDF3198(a1, v3);
  sub_20BF18220(v4, v5);
  v14 = a1[4];
  if (v14 >= a1[5])
  {
    v15 = sub_20BF184C0(v4, (uint64_t)&v19);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a1[4], &v19);
    v15 = v14 + 16;
    a1[4] = v14 + 16;
  }
  a1[4] = v15;
  sub_20BE78E5C((uint64_t)&v19, v20[0]);
}

void sub_20BF181B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 32) = v16;
  sub_20BE78E5C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF181E8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BF18220(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 16 * a2;
      while (v3 != v5)
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v3 - 16));
      a1[1] = v5;
    }
  }
  else
  {
    sub_20BF18350(a1, a2 - v4);
  }
}

_OWORD *sub_20BF1828C(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v10 = 1;
    sub_20BDDE1B4(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_20BE7B260((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *sub_20BF18350(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::JsValue *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::JsValue *v15;
  pxrInternal__aapl__pxrReserved__::JsValue *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  char *v25;
  int64x2_t v26;
  char *v27;
  _QWORD *v28;

  v6 = a1[2];
  result = a1 + 2;
  v5 = v6;
  v7 = (pxrInternal__aapl__pxrReserved__::JsValue *)*(result - 1);
  if (a2 <= (v6 - (uint64_t)v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v7 + 16 * a2);
      do
      {
        result = pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v7);
        v7 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v7 + 16);
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v28 = result;
    if (v12)
      v13 = (char *)sub_20BDEA2F0((uint64_t)result, v12);
    else
      v13 = 0;
    v16 = (pxrInternal__aapl__pxrReserved__::JsValue *)&v13[16 * v10];
    v25 = v13;
    v26.i64[0] = (uint64_t)v16;
    v26.i64[1] = (uint64_t)v16;
    v27 = &v13[16 * v12];
    v17 = 16 * a2;
    v18 = (char *)v16 + 16 * a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v16);
      v16 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v16 + 16);
      v17 -= 16;
    }
    while (v17);
    v26.i64[1] = (uint64_t)v18;
    v20 = (_QWORD *)*a1;
    v19 = (_QWORD *)a1[1];
    v21 = v26.i64[0];
    if (v19 == (_QWORD *)*a1)
    {
      v23 = vdupq_n_s64((unint64_t)v19);
    }
    else
    {
      do
      {
        v22 = *((_OWORD *)v19 - 1);
        v19 -= 2;
        *(_OWORD *)(v21 - 16) = v22;
        v21 -= 16;
        *v19 = 0;
        v19[1] = 0;
      }
      while (v19 != v20);
      v23 = *(int64x2_t *)a1;
      v18 = (char *)v26.i64[1];
    }
    *a1 = v21;
    a1[1] = (uint64_t)v18;
    v26 = v23;
    v24 = (char *)a1[2];
    a1[2] = (uint64_t)v27;
    v27 = v24;
    v25 = (char *)v23.i64[0];
    return (_QWORD *)sub_20BDEA324((uint64_t)&v25);
  }
  return result;
}

void sub_20BF1849C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF184C0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF185CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF185E0(uint64_t *a1, unsigned int a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  void **v8;

  v4 = (_QWORD *)a1[4];
  memset(v7, 0, sizeof(v7));
  sub_20BF186B8((char *)v7, &v4[-2 * a2], v4, a2);
  sub_20BF18220(a1 + 3, ((a1[4] - a1[3]) >> 4) - a2);
  v5 = a1[4];
  if (v5 >= a1[5])
  {
    v6 = sub_20BF18758(a1 + 3, (uint64_t)v7);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a1[4], v7);
    v6 = v5 + 16;
    a1[4] = v5 + 16;
  }
  a1[4] = v6;
  v8 = (void **)v7;
  sub_20BDE9EB0(&v8);
}

void sub_20BF18690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 32) = v13;
  a12 = (void **)&a9;
  sub_20BDE9EB0(&a12);
  _Unwind_Resume(a1);
}

char *sub_20BF186B8(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20BF18744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BDE9EB0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF18758(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF18864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF18878(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE **)(v2 + 24);
  if ((uint64_t)(*(_QWORD *)(v2 + 32) - (_QWORD)v3) <= 0)
  {
    sub_20BF17D90(*(_QWORD **)(a1 + 8), 1);
    v3 = *(_BYTE **)(v2 + 24);
  }
  *(_QWORD *)(v2 + 24) = v3 + 1;
  *v3 = 0;
  v4 = (*(_DWORD *)(a1 + 16) + 1);
  *(_DWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v5 + 24) - v4;
  *(_QWORD *)(v5 + 24) = result;
  return result;
}

double sub_20BF188E4(unsigned int a1, char *a2, int a3, int a4, int a5, double a6)
{
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  double v18;
  double v19;
  double v21;
  unint64_t v22[417];

  v21 = 0.0;
  if (a1 - 23 >= 0xF)
  {
    if (a6 <= 9.00719925e15 && a1 + 22 < 0x2D)
    {
      if ((a1 & 0x80000000) != 0)
        return a6 / dbl_20CA9BC90[-a1];
      return a6 * dbl_20CA9BC90[a1];
    }
  }
  else
  {
    a6 = dbl_20CA9BC90[a1 - 22] * a6;
    if (a6 <= 9.00719925e15)
    {
      a1 = 22;
      return a6 * dbl_20CA9BC90[a1];
    }
  }
  v8 = a4 - a3 + a5;
  v9 = a3 - 1;
  if (a3 < 1)
  {
    if (!a3)
      return 0.0;
  }
  else
  {
    v10 = a3;
    v11 = a3 + 1;
    while (*a2 == 48)
    {
      ++a2;
      --v9;
      --v10;
      if (--v11 <= 1)
        return 0.0;
    }
    while (a2[v9] == 48)
    {
      --v10;
      ++v8;
      --v9;
      if ((unint64_t)(v10 + 1) <= 1)
        return 0.0;
    }
    a3 = v10;
  }
  v12 = a3 - 768;
  if (a3 >= 768)
    v13 = 768;
  else
    v13 = a3;
  if (a3 <= 768)
    v12 = 0;
  v14 = (v12 + v8);
  v7 = 0.0;
  if ((int)v14 + (int)v13 >= -323)
  {
    if ((int)v14 + (int)v13 <= 309)
    {
      v15 = sub_20BF18AB4((uint64_t)a2, v13, v14, (unint64_t *)&v21);
      v7 = v21;
      if (!v15)
      {
        sub_20BF18FD0(v22, a2, v13);
        v17 = sub_20BF18E18((uint64_t)v22, v14, v16);
        *(_QWORD *)&v18 = *(_QWORD *)&v7 + 1;
        if ((LOBYTE(v7) & 1) != 0)
          *(_QWORD *)&v19 = *(_QWORD *)&v7 + 1;
        else
          v19 = v7;
        if (!v17)
          v18 = v19;
        if (v17 >= 0)
          return v18;
      }
    }
    else
    {
      return INFINITY;
    }
  }
  return v7;
}

BOOL sub_20BF18AB4(uint64_t a1, int a2, int a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  _QWORD v44[2];
  unint64_t v45;
  int v46;

  if (a2 < 1)
  {
    LODWORD(v6) = 0;
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *(char *)(a1 + v6);
      if (v7 == 0x1999999999999999 && v8 > 53)
        break;
      v7 = (v8 - 48) + 10 * v7;
      if (++v6 >= (unint64_t)a2 || v7 > 0x1999999999999999)
        goto LABEL_10;
    }
    v7 = 0x1999999999999999;
  }
LABEL_10:
  if (a2 > (int)v6 && *(char *)(a1 + v6) > 52)
    ++v7;
  v9 = a2 - v6;
  v10 = __clz(v7);
  v45 = v7 << v10;
  v46 = -v10;
  v11 = (4 * (v9 != 0)) << v10;
  v12 = v9 + a3;
  v13 = (v9 + a3 + 348) >> 3;
  v14 = ((v9 + a3 + 348) & 0xFFFFFFF8) - 348;
  v15 = qword_20CA9C638[v13];
  v16 = word_20CA9C8F0[v13];
  v44[0] = v15;
  v44[1] = v16;
  v17 = v12 - v14;
  if (v12 != v14)
  {
    v18 = atomic_load((unsigned __int8 *)&qword_25473B2A8);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_25473B2A8))
    {
      qword_25473B238[0] = 0xA000000000000000;
      dword_25473B240 = -60;
      qword_25473B248 = 0xC800000000000000;
      dword_25473B250 = -57;
      qword_25473B258 = 0xFA00000000000000;
      dword_25473B260 = -54;
      qword_25473B268 = 0x9C40000000000000;
      dword_25473B270 = -50;
      qword_25473B278 = 0xC350000000000000;
      dword_25473B280 = -47;
      qword_25473B288 = 0xF424000000000000;
      dword_25473B290 = -44;
      qword_25473B298 = 0x9896800000000000;
      dword_25473B2A0 = -40;
      __cxa_guard_release(&qword_25473B2A8);
    }
    v45 = sub_20BF18DB8(&v45, &qword_25473B238[2 * v17 - 2]);
    v46 = v19;
    if (v17 + a2 > 19)
      v11 += 4;
  }
  v20 = sub_20BF18DB8(&v45, v44);
  v22 = 8;
  if (v11)
    v22 = 9;
  v23 = __clz(v20);
  v24 = v20 << v23;
  v25 = v21 - v23;
  v26 = (v22 + v11) << v23;
  v27 = v21 - v23 + 1138;
  if (v25 < -1137)
    v27 = 0;
  if (v25 > -1086)
    v27 = 53;
  v28 = 64 - v27;
  v29 = v24 >> (4 - v27);
  v30 = (v26 >> (4 - v27)) + 9;
  v31 = v27 <= 3;
  if (v27 <= 3)
    v32 = 4 - v27 + v25;
  else
    v32 = v25;
  if (v31)
    v24 = v29;
  if (v31)
  {
    v33 = 60;
  }
  else
  {
    LODWORD(v30) = v26;
    v33 = v28;
  }
  v34 = v24 >> v33;
  v35 = v32 + v33;
  v36 = 8 * (v24 & ~(-1 << v33));
  v37 = 8 << (v33 - 1);
  v38 = v37 + v30;
  if (v36 >= v38 && (++v34 & 0x20000000000000) != 0)
  {
    v34 >>= 1;
    ++v35;
  }
  if (v35 >= -1074)
  {
    if (v35 <= 971)
    {
      v40 = (v34 & 0x10000000000000) == 0 && v35 == -1074;
      v41 = (unint64_t)(v35 + 1075) << 52;
      if (v40)
        v41 = 0;
      v39 = v41 & 0xFFF0000000000000 | v34 & 0xFFFFFFFFFFFFFLL;
    }
    else
    {
      v39 = 0x7FF0000000000000;
    }
  }
  else
  {
    v39 = 0;
  }
  *a4 = v39;
  return v37 - (unint64_t)v30 >= v36 || v36 >= v38;
}

unint64_t sub_20BF18DB8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = HIDWORD(*a1);
  v3 = HIDWORD(*a2);
  v4 = v3 * (unint64_t)*a1;
  v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v5
         + v4
         + 0x80000000) >> 32);
}

uint64_t sub_20BF18E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  int v15;
  signed int v16;
  signed int v17;
  signed int v18;
  signed int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v31[416];
  unint64_t v32;
  unint64_t v33[416];
  unint64_t v34;
  unint64_t v35[417];
  unint64_t v36[416];
  uint64_t v37;

  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](a1, a2, a3);
  v6 = (v5 & 0x7FF0000000000000) != 0;
  if ((v5 & 0xFFFFFFFFFFFFFLL) == 0)
    v6 = 1;
  v7 = ((v5 >> 52) & 0x7FF) - 1075;
  if (v6)
    v8 = v5 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  else
    v8 = v5 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = -1074;
  v9 = v7 - 1;
  v10 = v4 & ~(v4 >> 31);
  if (v4 < 0)
    v11 = -v4;
  else
    v11 = 0;
  v12 = v7 <= 0;
  if (v7 < 0)
    v13 = v7;
  else
    v13 = 0;
  v14 = (v7 & ~(v7 >> 31)) + v11;
  if (v12)
    v15 = v9;
  else
    v15 = 0;
  if (v12)
    v9 = 0;
  v16 = v10 - (v15 + v13);
  v17 = v14 - v15;
  v18 = v11 - v13 + v9;
  if (v16 >= v17)
    v19 = v17;
  else
    v19 = v10 - (v15 + v13);
  if (v19 >= v18)
    v19 = v18;
  v20 = (v16 - v19);
  v21 = (v17 - v19);
  v22 = (v18 - v19);
  v37 = v3[416];
  memcpy(v36, v3, 8 * v37);
  v23 = sub_20BF190FC(v36, v10);
  sub_20BF19190(v23, v20);
  v35[416] = 1;
  v35[0] = v8;
  v24 = sub_20BF190FC(v35, v11);
  sub_20BF19190(v24, v21);
  v34 = 1;
  v33[0] = 1;
  v25 = sub_20BF190FC(v33, v11);
  sub_20BF19190(v25, v22);
  v32 = 1;
  v31[0] = 0;
  sub_20BF1941C((uint64_t)v36, (uint64_t)v35, (uint64_t)v31);
  v26 = v32;
  v27 = v32 >= v34;
  if (v32 == v34)
  {
    while (v26)
    {
      v28 = v31[v26 - 1];
      v29 = v33[--v26];
      v27 = v28 >= v29;
      if (v28 != v29)
        goto LABEL_28;
    }
    return 0;
  }
  else
  {
LABEL_28:
    if (v27)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
}

unint64_t *sub_20BF18FD0(unint64_t *a1, char *a2, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a3;
  v4 = a2;
  a1[416] = 1;
  *a1 = 0;
  if (a3 < 0x13)
  {
    v9 = 0;
    if (!a3)
      return a1;
LABEL_7:
    sub_20BF19070(a1, &v4[v9], &v4[v9 + v3]);
    return a1;
  }
  v6 = 0;
  do
  {
    v7 = a2 + 19;
    sub_20BF19070(a1, a2, a2 + 19);
    v6 -= 19;
    v8 = v3 + v6;
    a2 = v7;
  }
  while (v3 + v6 > 0x12);
  v9 = -v6;
  v3 += v6;
  if (v8)
    goto LABEL_7;
  return a1;
}

unint64_t *sub_20BF19070(unint64_t *result, char *a2, char *a3)
{
  uint64_t v3;
  char *v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;

  if (a2 == a3)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = a2;
    do
    {
      v5 = *v4++;
      v3 = (v5 - 48) + 10 * v3;
    }
    while (v4 != a3);
  }
  if (result[416] == 1 && !*result)
  {
    *result = v3;
    result[416] = 1;
  }
  else
  {
    v6 = (_DWORD)a3 - (_DWORD)a2;
    v7 = v6;
    v8 = sub_20BF190FC(result, v6);
    v9 = sub_20BF19190(v8, v7);
    return sub_20BF1926C(v9, v3);
  }
  return result;
}

unint64_t *sub_20BF190FC(unint64_t *a1, unsigned int a2)
{
  unsigned int v3;

  if (a2)
  {
    v3 = a2;
    if (a2 >= 0x1B)
    {
      do
      {
        sub_20BF192C8(a1, 0x6765C793FA10079DuLL);
        v3 -= 27;
      }
      while (v3 > 0x1A);
    }
    if (v3 >= 0xD)
    {
      do
      {
        sub_20BF19384(a1, 0x48C27395u);
        v3 -= 13;
      }
      while (v3 > 0xC);
    }
    if (v3)
      sub_20BF19384(a1, dword_20CA9C9A0[v3 - 1]);
  }
  return a1;
}

_QWORD *sub_20BF19190(_QWORD *__src, unint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = __src[416];
  if (v3 == 1)
  {
    v4 = *__src == 0;
    if (!a2)
      return __src;
  }
  else
  {
    v4 = 0;
    if (!a2)
      return __src;
  }
  if (!v4)
  {
    v5 = a2 >> 6;
    v6 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      __src[v3] = 0;
      if (v3)
      {
        v7 = v3;
        do
        {
          __src[v5 + v7] = (__src[v7] << v6) | (__src[v7 - 1] >> 1 >> (v6 ^ 0x3Fu));
          --v7;
        }
        while (v7);
      }
      __src[v5] = *__src << v6;
      v8 = v3 + v5;
      __src[416] = v8;
      if (!__src[v8])
        goto LABEL_14;
      v9 = v8 + 1;
    }
    else
    {
      memmove(&__src[v5], __src, 8 * v3);
      v9 = __src[416] + v5;
    }
    __src[416] = v9;
LABEL_14:
    bzero(__src, 8 * v5);
  }
  return __src;
}

unint64_t *sub_20BF1926C(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *result;
  v3 = *result + a2;
  *result = v3;
  v4 = result[416];
  if (v4 == 1)
  {
LABEL_5:
    if (result[v4 - 1] < v2)
    {
      result[416] = v4 + 1;
      result[v4] = 1;
    }
  }
  else
  {
    v5 = result + 1;
    v6 = v4 - 1;
    while (v3 < v2)
    {
      v2 = *v5;
      v3 = *v5 + 1;
      *v5++ = v3;
      if (!--v6)
        goto LABEL_5;
    }
  }
  return result;
}

unint64_t *sub_20BF192C8(unint64_t *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (a2 != 1)
  {
    if (!a2)
    {
      *result = 0;
LABEL_4:
      result[416] = 1;
      return result;
    }
    v2 = result[416];
    if (v2)
    {
      if (v2 == 1 && *result == 1)
      {
        *result = a2;
        goto LABEL_4;
      }
      v3 = 0;
      v4 = a2;
      v5 = HIDWORD(a2);
      v6 = result;
      v7 = result[416];
      do
      {
        v8 = *v6;
        v9 = HIDWORD(*v6);
        v10 = v8 * (unint64_t)v4;
        v11 = v9 * (unint64_t)v4;
        v12 = v9 * (unint64_t)v5;
        v13 = v8 * (unint64_t)v5 + v11 + HIDWORD(v10);
        v14 = v12 + 0x100000000;
        if (v13 >= v11)
          v14 = v12;
        v15 = v14 + HIDWORD(v13);
        v16 = v3 + v10 + (v13 << 32);
        if (v16 >= v3)
          v3 = v15;
        else
          v3 = v15 + 1;
        *v6++ = v16;
        --v7;
      }
      while (v7);
      if (v3)
      {
        result[416] = v2 + 1;
        result[v2] = v3;
      }
    }
  }
  return result;
}

unint64_t *sub_20BF19384(unint64_t *result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (a2 != 1)
  {
    if (!a2)
    {
      *result = 0;
LABEL_4:
      result[416] = 1;
      return result;
    }
    v2 = result[416];
    if (v2)
    {
      if (v2 == 1 && *result == 1)
      {
        *result = a2;
        goto LABEL_4;
      }
      v3 = 0;
      v4 = result;
      v5 = result[416];
      do
      {
        v6 = v3 + *v4 * (unint64_t)a2;
        v7 = HIDWORD(v6) + HIDWORD(*v4) * a2;
        *v4++ = v6 | ((unint64_t)v7 << 32);
        v3 = HIDWORD(v7);
        --v5;
      }
      while (v5);
      if (v3)
      {
        result[416] = v2 + 1;
        result[v2] = v3;
      }
    }
  }
  return result;
}

uint64_t sub_20BF1941C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(a1 + 3328);
  v4 = *(_QWORD *)(a2 + 3328);
  v5 = v3 >= v4;
  if (v3 == v4)
  {
    while (v3)
    {
      v6 = a1 + 8 * v3;
      v7 = a2 + 8 * v3--;
      v8 = *(_QWORD *)(v6 - 8);
      v9 = *(_QWORD *)(v7 - 8);
      v5 = v8 >= v9;
      if (v8 != v9)
        goto LABEL_4;
    }
    goto LABEL_12;
  }
LABEL_4:
  LOBYTE(v3) = !v5;
  if (v5)
  {
    v10 = a1;
    if ((v3 & 1) == 0)
    {
LABEL_12:
      v10 = a1;
      goto LABEL_13;
    }
LABEL_11:
    a2 = a1;
    goto LABEL_13;
  }
  v10 = a2;
  if ((v3 & 1) != 0)
    goto LABEL_11;
LABEL_13:
  v11 = *(_QWORD *)(v10 + 3328);
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(v10 + 8 * v12);
      v15 = v14 + v13;
      if (v12 < *(_QWORD *)(a2 + 3328))
        v15 -= *(_QWORD *)(a2 + 8 * v12);
      if (v15 <= v14)
        v13 = 0;
      else
        v13 = -1;
      *(_QWORD *)(a3 + 8 * v12++) = v15;
      if (v15)
      {
        *(_QWORD *)(a3 + 3328) = v12;
        v11 = *(_QWORD *)(v10 + 3328);
      }
    }
    while (v12 < v11);
  }
  return v3 & 1;
}

uint64_t sub_20BF194CC(uint64_t *a1, double *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v20.i64[0], *a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF195D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF195EC(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v20.i64[0], *a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF196F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF1970C(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v20.i64[0], *a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF19818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF1982C(uint64_t *a1, int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v20.i64[0], *a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF19938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF1994C(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v20.i64[0], *a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_20BDEA324((uint64_t)&v19);
  return v12;
}

void sub_20BF19A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF19A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = a3;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (!a2)
  {
    v5 = operator new(0x18uLL);
    *v5 = 0x10000;
    v6 = operator new(1uLL);
    v7 = malloc(0x38uLL);
    v5[1] = v6;
    v5[2] = v7;
    v7[4] = 0;
    *v7 = v7 + 4;
    v7[1] = v6;
    v7[5] = 0;
    v7[6] = 0;
    *((_BYTE *)v7 + 24) = 1;
    v7[2] = 1;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v5;
  }
  return a1;
}

void sub_20BF19B14(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_20BF14608(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF19B38(_QWORD *a1)
{
  if (a1[4])
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  sub_20BF19B78((uint64_t)a1);
  sub_20BF14608((uint64_t)(a1 + 5));
  return a1;
}

void sub_20BF19B78(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = (void *)sub_20BF19B9C(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BF19B9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 < 2)
    {
      sub_20BF19C04(a1);
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(void **)(v4 + 8);
      if (*(_BYTE *)(v4 + 24))
        free((void *)v4);
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)(v2 + 16) = v3 - 1;
    }
  }
  return a1;
}

_QWORD *sub_20BF19C04(uint64_t a1)
{
  uint64_t i;
  _QWORD *result;
  uint64_t v4;

  for (i = *(_QWORD *)(a1 + 16); ; i = *(_QWORD *)(a1 + 16))
  {
    result = *(_QWORD **)i;
    v4 = *(_QWORD *)(*(_QWORD *)i + 16);
    if (!v4)
      break;
    *(_QWORD *)i = v4;
    free(result);
  }
  result[1] = 0;
  return result;
}

__n128 sub_20BF19C44(int *a1, __int128 *a2, __n128 *a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  __n128 result;

  v7 = *a1;
  v8 = a1[1];
  if (*a1 >= v8)
  {
    if ((_DWORD)v8)
      v9 = v8 + ((v8 + 1) >> 1);
    else
      v9 = 16;
    if (v8 < v9)
    {
      *((_QWORD *)a1 + 1) = sub_20BF19D04(a4, *((char **)a1 + 1), 48 * v8, 48 * v9);
      a1[1] = v9;
      v7 = *a1;
    }
  }
  v10 = *((_QWORD *)a1 + 1) + 48 * v7;
  v11 = *a2;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v10 = v11;
  *((_WORD *)a2 + 11) = 0;
  result = *a3;
  *(_QWORD *)(v10 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(v10 + 24) = result;
  a3[1].n128_u16[3] = 0;
  ++*a1;
  return result;
}

uint64_t sub_20BF19D04(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  size_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;

  if (!a2)
    return sub_20BF19DB8(a1, a4);
  if (!a4)
    return 0;
  v4 = a2;
  v5 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v6 > v5)
  {
    v7 = **(unint64_t ***)(a1 + 16);
    v8 = v7[1];
    if ((char *)v7 + v8 - v5 + 24 == v4)
    {
      v9 = v8 + v6 - v5;
      if (v9 <= *v7)
      {
        v7[1] = v9;
        return (uint64_t)v4;
      }
    }
    v10 = (void *)sub_20BF19DB8(a1, v6);
    if (v10)
    {
      v11 = v10;
      if (v5)
        memcpy(v10, v4, v5);
      return (uint64_t)v11;
    }
    return 0;
  }
  return (uint64_t)v4;
}

uint64_t sub_20BF19DB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  if (!a2)
    return 0;
  v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = **(_QWORD ***)(a1 + 16);
  v5 = v4[1];
  v6 = v5 + v3;
  if (v5 + v3 <= *v4)
  {
LABEL_3:
    result = (uint64_t)v4 + v5 + 24;
    v4[1] = v6;
    return result;
  }
  if (*(_QWORD *)a1 <= v3)
    v8 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  else
    v8 = *(_QWORD *)a1;
  if (sub_20BF19E40(a1, v8))
  {
    v4 = **(_QWORD ***)(a1 + 16);
    v5 = v4[1];
    v6 = v5 + v3;
    goto LABEL_3;
  }
  return 0;
}

size_t sub_20BF19E40(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t result;
  size_t *v6;

  if (!*(_QWORD *)(a1 + 8))
  {
    v4 = operator new(1uLL);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) = v4;
  }
  result = a2 + 24;
  if (a2 != -24)
  {
    result = (size_t)malloc(result);
    if (result)
    {
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
      v6 = *(size_t **)(a1 + 16);
      *(_QWORD *)(result + 16) = *v6;
      *v6 = result;
      return 1;
    }
  }
  return result;
}

int *sub_20BF19EA4(int *a1, __int128 *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 >= v6)
  {
    if ((_DWORD)v6)
      v7 = v6 + ((v6 + 1) >> 1);
    else
      v7 = 16;
    if (v6 < v7)
    {
      *((_QWORD *)a1 + 1) = sub_20BF19D04(a3, *((char **)a1 + 1), 24 * v6, 24 * v7);
      a1[1] = v7;
      v5 = *a1;
    }
  }
  v8 = *((_QWORD *)a1 + 1);
  *a1 = v5 + 1;
  v9 = v8 + 24 * v5;
  v10 = *a2;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v9 = v10;
  *((_WORD *)a2 + 11) = 0;
  return a1;
}

void *sub_20BF19F4C(_WORD *__dst, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  void *result;

  v4 = __dst;
  if (*(_DWORD *)(a2 + 8) > 0x15u)
  {
    __dst[11] = 3077;
    *(_DWORD *)__dst = *(_DWORD *)(a2 + 8);
    v5 = sub_20BF19DB8(a3, (*(_DWORD *)(a2 + 8) + 1));
    v4[1] = v5;
    v4 = (_QWORD *)v5;
  }
  else
  {
    __dst[11] = 7173;
    *((_BYTE *)__dst + 21) = 21 - *(_BYTE *)(a2 + 8);
  }
  result = memcpy(v4, *(const void **)a2, *(unsigned int *)(a2 + 8));
  *((_BYTE *)v4 + *(unsigned int *)(a2 + 8)) = 0;
  return result;
}

uint64_t sub_20BF19FD4(uint64_t a1)
{
  uint64_t v2;

  sub_20BF1A3D8((_BYTE *)a1);
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) - v2 <= 15)
  {
    sub_20BF15978((_QWORD *)(a1 + 8), 1);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a1 + 32) = v2 + 16;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  return sub_20BF1A830((_QWORD **)a1);
}

uint64_t sub_20BF1A030(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v2 = a1[4];
  v3 = *(v2 - 2);
  a1[4] = v2 - 2;
  if (v3)
  {
    v4 = (uint64_t)*a1;
    v5 = (_BYTE *)(*a1)[3];
    if ((uint64_t)((*a1)[4] - (_QWORD)v5) <= 0)
    {
      sub_20BF17D90(*a1, 1);
      v5 = *(_BYTE **)(v4 + 24);
    }
    *(_QWORD *)(v4 + 24) = v5 + 1;
    *v5 = 10;
    sub_20BF1A6A8((uint64_t)a1);
  }
  sub_20BF1A884(a1);
  return 1;
}

uint64_t sub_20BF1A0A8(uint64_t a1)
{
  uint64_t v2;

  sub_20BF1A3D8((_BYTE *)a1);
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) - v2 <= 15)
  {
    sub_20BF15978((_QWORD *)(a1 + 8), 1);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a1 + 32) = v2 + 16;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return sub_20BF1A8D8((_QWORD **)a1);
}

uint64_t sub_20BF1A108(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v2 = a1[4];
  v3 = *(v2 - 2);
  a1[4] = v2 - 2;
  if (v3 && (*((_BYTE *)a1 + 68) & 1) == 0)
  {
    v4 = (uint64_t)*a1;
    v5 = (_BYTE *)(*a1)[3];
    if ((uint64_t)((*a1)[4] - (_QWORD)v5) <= 0)
    {
      sub_20BF17D90(*a1, 1);
      v5 = *(_BYTE **)(v4 + 24);
    }
    *(_QWORD *)(v4 + 24) = v5 + 1;
    *v5 = 10;
    sub_20BF1A6A8((uint64_t)a1);
  }
  sub_20BF1A92C(a1);
  return 1;
}

uint64_t sub_20BF1A188(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;

  sub_20BF1A3D8(a1);
  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - (_QWORD)v5) <= 10)
  {
    sub_20BF17D90(*(_QWORD **)a1, 11);
    v5 = *(_BYTE **)(v4 + 24);
  }
  *(_QWORD *)(v4 + 24) = v5 + 11;
  if ((a2 & 0x80000000) != 0)
  {
    *v5 = 45;
    v6 = v5 + 1;
    a2 = -a2;
  }
  else
  {
    v6 = v5;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 24) = sub_20BF14B44(a2, v6) - v5 + *(_QWORD *)(*(_QWORD *)a1 + 24) - 11;
  return 1;
}

uint64_t sub_20BF1A228(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  _BYTE *v5;

  sub_20BF1A3D8(a1);
  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - (_QWORD)v5) <= 9)
  {
    sub_20BF17D90(*(_QWORD **)a1, 10);
    v5 = *(_BYTE **)(v4 + 24);
  }
  *(_QWORD *)(v4 + 24) = v5 + 10;
  *(_QWORD *)(*(_QWORD *)a1 + 24) = sub_20BF14B44(a2, v5) - v5 + *(_QWORD *)(*(_QWORD *)a1 + 24) - 10;
  return 1;
}

uint64_t sub_20BF1A2B0(_BYTE *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;

  sub_20BF1A3D8(a1);
  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - (_QWORD)v5) <= 20)
  {
    sub_20BF17D90(*(_QWORD **)a1, 21);
    v5 = *(_BYTE **)(v4 + 24);
  }
  *(_QWORD *)(v4 + 24) = v5 + 21;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *v5 = 45;
    v6 = v5 + 1;
    a2 = -(uint64_t)a2;
  }
  else
  {
    v6 = v5;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 24) = sub_20BF15004(a2, v6) - v5 + *(_QWORD *)(*(_QWORD *)a1 + 24) - 21;
  return 1;
}

uint64_t sub_20BF1A350(_BYTE *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;

  sub_20BF1A3D8(a1);
  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - (_QWORD)v5) <= 19)
  {
    sub_20BF17D90(*(_QWORD **)a1, 20);
    v5 = *(_BYTE **)(v4 + 24);
  }
  *(_QWORD *)(v4 + 24) = v5 + 20;
  *(_QWORD *)(*(_QWORD *)a1 + 24) = sub_20BF15004(a2, v5) - v5 + *(_QWORD *)(*(_QWORD *)a1 + 24) - 20;
  return 1;
}

_BYTE *sub_20BF1A3D8(_BYTE *result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  _QWORD *v12;
  char *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  v1 = result;
  v2 = *((_QWORD *)result + 4);
  if (v2 == *((_QWORD *)result + 3))
  {
    result[60] = 1;
    return result;
  }
  v3 = *(_QWORD *)(v2 - 16);
  if (*(_BYTE *)(v2 - 8))
  {
    if (v3)
    {
      v4 = *(_QWORD **)result;
      v5 = *(_BYTE **)(*(_QWORD *)result + 24);
      if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v5) <= 0)
      {
        v16 = *(_QWORD **)result;
        result = sub_20BF17D90(v4, 1);
        v4 = v16;
        v5 = (_BYTE *)v16[3];
      }
      v4[3] = v5 + 1;
      *v5 = 44;
      if ((v1[68] & 1) != 0)
      {
        v6 = *(_QWORD **)v1;
        v7 = *(_BYTE **)(*(_QWORD *)v1 + 24);
        if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1 + 32) - (_QWORD)v7) <= 0)
        {
          v19 = *(_QWORD **)v1;
          result = sub_20BF17D90(v6, 1);
          v6 = v19;
          v7 = (_BYTE *)v19[3];
        }
        v6[3] = v7 + 1;
        *v7 = 32;
      }
    }
    if ((v1[68] & 1) != 0)
      goto LABEL_30;
    v8 = *(_QWORD **)v1;
    v9 = *(_BYTE **)(*(_QWORD *)v1 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1 + 32) - (_QWORD)v9) <= 0)
    {
      v17 = *(_QWORD **)v1;
      sub_20BF17D90(v8, 1);
      v8 = v17;
      v9 = (_BYTE *)v17[3];
    }
    v8[3] = v9 + 1;
    *v9 = 10;
    goto LABEL_29;
  }
  if (!v3)
    goto LABEL_20;
  v10 = *(_QWORD **)result;
  v11 = *(_BYTE **)(*(_QWORD *)result + 24);
  if ((v3 & 1) == 0)
  {
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v11) <= 0)
    {
      v20 = *(_QWORD **)result;
      result = sub_20BF17D90(v10, 1);
      v10 = v20;
      v11 = (_BYTE *)v20[3];
    }
    v10[3] = v11 + 1;
    *v11 = 44;
LABEL_20:
    v12 = *(_QWORD **)v1;
    v13 = *(char **)(*(_QWORD *)v1 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1 + 32) - (_QWORD)v13) <= 0)
    {
      v18 = *(_QWORD **)v1;
      result = sub_20BF17D90(v12, 1);
      v12 = v18;
      v13 = (char *)v18[3];
    }
    v12[3] = v13 + 1;
    v14 = 10;
    goto LABEL_28;
  }
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v11) <= 0)
  {
    v21 = *(_QWORD **)result;
    result = sub_20BF17D90(v10, 1);
    v10 = v21;
    v11 = (_BYTE *)v21[3];
  }
  v10[3] = v11 + 1;
  *v11 = 58;
  v15 = *(_QWORD **)v1;
  v13 = *(char **)(*(_QWORD *)v1 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1 + 32) - (_QWORD)v13) <= 0)
  {
    v22 = *(_QWORD **)v1;
    result = sub_20BF17D90(v15, 1);
    v15 = v22;
    v13 = (char *)v22[3];
  }
  v15[3] = v13 + 1;
  v14 = 32;
LABEL_28:
  *v13 = v14;
  if ((*(_BYTE *)(v2 - 16) & 1) == 0)
LABEL_29:
    result = sub_20BF1A6A8((uint64_t)v1);
LABEL_30:
  ++*(_QWORD *)(v2 - 16);
  return result;
}

uint64_t sub_20BF1A60C(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;

  v2 = *(_QWORD **)a1;
  v3 = (_BYTE *)v2[3];
  if ((uint64_t)(v2[4] - (_QWORD)v3) <= 3)
  {
    sub_20BF17D90(v2, 4);
    v2 = *(_QWORD **)a1;
    v3 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  }
  v2[3] = v3 + 1;
  *v3 = 110;
  v4 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  *(_QWORD *)(*(_QWORD *)a1 + 24) = v4 + 1;
  *v4 = 117;
  v5 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  *(_QWORD *)(*(_QWORD *)a1 + 24) = v5 + 1;
  *v5 = 108;
  v6 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  *(_QWORD *)(*(_QWORD *)a1 + 24) = v6 + 1;
  *v6 = 108;
  return 1;
}

void *sub_20BF1A6A8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  int v3;
  char *v4;

  v1 = ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4) * *(unsigned int *)(a1 + 64);
  v2 = *(_QWORD **)a1;
  v3 = *(unsigned __int8 *)(a1 + 61);
  v4 = *(char **)(*(_QWORD *)a1 + 24);
  if (v2[4] - (_QWORD)v4 < v1)
  {
    sub_20BF17D90(v2, v1);
    v4 = (char *)v2[3];
  }
  v2[3] = &v4[v1];
  return memset(v4, v3, v1);
}

uint64_t sub_20BF1A718(uint64_t a1, int a2)
{
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;

  v3 = *(_QWORD **)a1;
  v4 = (_BYTE *)v3[3];
  v5 = v3[4] - (_QWORD)v4;
  if (a2)
  {
    if (v5 <= 3)
    {
      sub_20BF17D90(v3, 4);
      v3 = *(_QWORD **)a1;
      v4 = *(_BYTE **)(*(_QWORD *)a1 + 24);
    }
    v3[3] = v4 + 1;
    *v4 = 116;
    v6 = *(_BYTE **)(*(_QWORD *)a1 + 24);
    *(_QWORD *)(*(_QWORD *)a1 + 24) = v6 + 1;
    *v6 = 114;
    v7 = *(char **)(*(_QWORD *)a1 + 24);
    *(_QWORD *)(*(_QWORD *)a1 + 24) = v7 + 1;
    v8 = 117;
  }
  else
  {
    if (v5 <= 4)
    {
      sub_20BF17D90(v3, 5);
      v3 = *(_QWORD **)a1;
      v4 = *(_BYTE **)(*(_QWORD *)a1 + 24);
    }
    v3[3] = v4 + 1;
    *v4 = 102;
    v9 = *(_BYTE **)(*(_QWORD *)a1 + 24);
    *(_QWORD *)(*(_QWORD *)a1 + 24) = v9 + 1;
    *v9 = 97;
    v10 = *(_BYTE **)(*(_QWORD *)a1 + 24);
    *(_QWORD *)(*(_QWORD *)a1 + 24) = v10 + 1;
    *v10 = 108;
    v7 = *(char **)(*(_QWORD *)a1 + 24);
    *(_QWORD *)(*(_QWORD *)a1 + 24) = v7 + 1;
    v8 = 115;
  }
  *v7 = v8;
  v11 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  *(_QWORD *)(*(_QWORD *)a1 + 24) = v11 + 1;
  *v11 = 101;
  return 1;
}

uint64_t sub_20BF1A830(_QWORD **a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = (uint64_t)*a1;
  v2 = (_BYTE *)(*a1)[3];
  if ((uint64_t)((*a1)[4] - (_QWORD)v2) <= 0)
  {
    sub_20BF17D90(*a1, 1);
    v2 = *(_BYTE **)(v1 + 24);
  }
  *(_QWORD *)(v1 + 24) = v2 + 1;
  *v2 = 123;
  return 1;
}

uint64_t sub_20BF1A884(_QWORD **a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = (uint64_t)*a1;
  v2 = (_BYTE *)(*a1)[3];
  if ((uint64_t)((*a1)[4] - (_QWORD)v2) <= 0)
  {
    sub_20BF17D90(*a1, 1);
    v2 = *(_BYTE **)(v1 + 24);
  }
  *(_QWORD *)(v1 + 24) = v2 + 1;
  *v2 = 125;
  return 1;
}

uint64_t sub_20BF1A8D8(_QWORD **a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = (uint64_t)*a1;
  v2 = (_BYTE *)(*a1)[3];
  if ((uint64_t)((*a1)[4] - (_QWORD)v2) <= 0)
  {
    sub_20BF17D90(*a1, 1);
    v2 = *(_BYTE **)(v1 + 24);
  }
  *(_QWORD *)(v1 + 24) = v2 + 1;
  *v2 = 91;
  return 1;
}

uint64_t sub_20BF1A92C(_QWORD **a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = (uint64_t)*a1;
  v2 = (_BYTE *)(*a1)[3];
  if ((uint64_t)((*a1)[4] - (_QWORD)v2) <= 0)
  {
    sub_20BF17D90(*a1, 1);
    v2 = *(_BYTE **)(v1 + 24);
  }
  *(_QWORD *)(v1 + 24) = v2 + 1;
  *v2 = 93;
  return 1;
}

uint64_t sub_20BF1A980(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  char v17;
  char *v18;
  _BYTE *v19;

  v6 = *(_QWORD **)a1;
  v7 = 6 * a3 + 2;
  v8 = (_BYTE *)v6[3];
  if (v6[4] - (_QWORD)v8 < v7)
  {
    sub_20BF17D90(v6, v7);
    v6 = *(_QWORD **)a1;
    v8 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  }
  v6[3] = v8 + 1;
  *v8 = 34;
  if (a3)
  {
    v9 = 0;
    do
    {
      v10 = *(unsigned __int8 *)(a2 + v9);
      v11 = a0123456789abcd_0[v10 + 16];
      v12 = *(_BYTE **)(*(_QWORD *)a1 + 24);
      *(_QWORD *)(*(_QWORD *)a1 + 24) = v12 + 1;
      if (v11)
      {
        *v12 = 92;
        v13 = *(_BYTE **)(*(_QWORD *)a1 + 24);
        *(_QWORD *)(*(_QWORD *)a1 + 24) = v13 + 1;
        *v13 = v11;
        if (v11 == 117)
        {
          v14 = *(_BYTE **)(*(_QWORD *)a1 + 24);
          *(_QWORD *)(*(_QWORD *)a1 + 24) = v14 + 1;
          *v14 = 48;
          v15 = *(_BYTE **)(*(_QWORD *)a1 + 24);
          *(_QWORD *)(*(_QWORD *)a1 + 24) = v15 + 1;
          *v15 = 48;
          LOBYTE(v15) = a0123456789abcd_0[v10 >> 4];
          v16 = *(_BYTE **)(*(_QWORD *)a1 + 24);
          *(_QWORD *)(*(_QWORD *)a1 + 24) = v16 + 1;
          *v16 = (_BYTE)v15;
          v17 = a0123456789abcd_0[v10 & 0xF];
          v18 = *(char **)(*(_QWORD *)a1 + 24);
          *(_QWORD *)(*(_QWORD *)a1 + 24) = v18 + 1;
          *v18 = v17;
        }
      }
      else
      {
        *v12 = v10;
      }
      ++v9;
    }
    while (v9 < a3);
  }
  v19 = *(_BYTE **)(*(_QWORD *)a1 + 24);
  *(_QWORD *)(*(_QWORD *)a1 + 24) = v19 + 1;
  *v19 = 34;
  return 1;
}

uint64_t sub_20BF1AADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  char v8;
  _BYTE *v9;

  v6 = *(_QWORD **)a1;
  if (v6[4] - v6[3] < a3)
  {
    sub_20BF17D90(v6, a3);
    if (!a3)
      return 1;
  }
  else if (!a3)
  {
    return 1;
  }
  v7 = 0;
  do
  {
    v8 = *(_BYTE *)(a2 + v7);
    v9 = *(_BYTE **)(*(_QWORD *)a1 + 24);
    *(_QWORD *)(*(_QWORD *)a1 + 24) = v9 + 1;
    *v9 = v8;
    ++v7;
  }
  while (v7 < a3);
  return 1;
}

void sub_20BF1AB5C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    operator delete(v2);
  }
}

void pxrInternal__aapl__pxrReserved__::JsFindValue(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[4];
  char v16;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    v15[0] = "js/utils.cpp";
    v15[1] = "JsFindValue";
    v15[2] = 40;
    v15[3] = "JsOptionalValue pxrInternal__aapl__pxrReserved__::JsFindValue(const JsObject &, const std::string &, const "
             "JsOptionalValue &)";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Key is empty");
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  v8 = sub_20BDEEBA4(a1, (const void **)a2);
  if (a1 + 8 == v8)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (!*(_BYTE *)(a3 + 16))
      return;
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_QWORD *)(a4 + 8) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 64);
    *(_QWORD *)a4 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(a4 + 8) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  *(_BYTE *)(a4 + 16) = 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  _DWORD *v2;

  v2 = operator new(0x28uLL);
  v2[6] = 6;
  v2[8] = 6;
  return sub_20BF1C4E0(this, (uint64_t)v2);
}

{
  _DWORD *v2;

  v2 = operator new(0x28uLL);
  v2[6] = 6;
  v2[8] = 6;
  return sub_20BF1C4E0(this, (uint64_t)v2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(_QWORD *a1, const void ***a2)
{
  _DWORD *v4;
  uint64_t *v5;
  uint64_t *v7;

  v4 = operator new(0x28uLL);
  sub_20BF1BE04(&v7, a2);
  v5 = v7;
  v7 = 0;
  *(_QWORD *)v4 = v5;
  v4[6] = 0;
  sub_20BF1BFA0((_QWORD ***)&v7, 0);
  v4[8] = 0;
  return sub_20BF1C4E0(a1, (uint64_t)v4);
}

void sub_20BF1AD8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v4;
  _QWORD **v5;
  _QWORD **v7;

  v4 = operator new(0x28uLL);
  sub_20BF1BFE0(&v7, a2);
  v5 = v7;
  v7 = 0;
  *(_QWORD *)v4 = v5;
  v4[6] = 0;
  sub_20BF1BFA0(&v7, 0);
  v4[8] = 0;
  return sub_20BF1C4E0(a1, (uint64_t)v4);
}

void sub_20BF1AE18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(_QWORD *a1, _QWORD **a2)
{
  _DWORD *v4;
  char *v5;
  char *v7;

  v4 = operator new(0x28uLL);
  sub_20BF1C048(&v7, a2);
  v5 = v7;
  v7 = 0;
  *(_QWORD *)v4 = v5;
  v4[6] = 1;
  sub_20BF1C150((void ***)&v7, 0);
  v4[8] = 1;
  return sub_20BF1C4E0(a1, (uint64_t)v4);
}

void sub_20BF1AEA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(_QWORD *a1, uint64_t a2)
{
  void *v4;

  v4 = operator new(0x28uLL);
  sub_20BF1C190((uint64_t)v4, a2);
  return sub_20BF1C4E0(a1, (uint64_t)v4);
}

{
  _QWORD *v4;
  uint64_t v5;

  v4 = operator new(0x28uLL);
  v5 = (uint64_t)v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(_QWORD *)(a2 + 16);
  }
  *(_DWORD *)(v5 + 24) = 2;
  *(_DWORD *)(v5 + 32) = 2;
  return sub_20BF1C4E0(a1, v5);
}

{
  _QWORD *v4;

  v4 = operator new(0x28uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_DWORD *)v4 + 6) = 2;
  *((_DWORD *)v4 + 8) = 2;
  return sub_20BF1C4E0(a1, (uint64_t)v4);
}

{
  _QWORD *v4;

  v4 = operator new(0x28uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_DWORD *)v4 + 6) = 2;
  *((_DWORD *)v4 + 8) = 2;
  return sub_20BF1C4E0(a1, (uint64_t)v4);
}

void sub_20BF1AF04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, char *a2)
{
  _QWORD *v4;
  __int128 v6;
  uint64_t v7;

  v4 = operator new(0x28uLL);
  sub_20BDDC0E4(&v6, a2);
  *(_OWORD *)v4 = v6;
  v4[2] = v7;
  *((_DWORD *)v4 + 6) = 2;
  *((_DWORD *)v4 + 8) = 2;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

void sub_20BF1AF8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20BF1B014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, char a2)
{
  _DWORD *v4;

  v4 = operator new(0x28uLL);
  *(_BYTE *)v4 = a2;
  v4[6] = 3;
  v4[8] = 3;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

{
  _DWORD *v4;

  v4 = operator new(0x28uLL);
  *(_BYTE *)v4 = a2;
  v4[6] = 3;
  v4[8] = 3;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, int a2)
{
  _DWORD *v4;

  v4 = operator new(0x28uLL);
  *(_QWORD *)v4 = a2;
  v4[6] = 4;
  v4[8] = 4;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

{
  _DWORD *v4;

  v4 = operator new(0x28uLL);
  *(_QWORD *)v4 = a2;
  v4[6] = 4;
  v4[8] = 4;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, uint64_t a2)
{
  _DWORD *v4;

  v4 = operator new(0x28uLL);
  *(_QWORD *)v4 = a2;
  v4[6] = 4;
  v4[8] = 4;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

{
  _DWORD *v4;

  v4 = operator new(0x28uLL);
  *(_QWORD *)v4 = a2;
  v4[6] = 4;
  v4[8] = 4;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

{
  _DWORD *v4;

  v4 = operator new(0x28uLL);
  *(_QWORD *)v4 = a2;
  v4[6] = 7;
  v4[8] = 4;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

{
  _DWORD *v4;

  v4 = operator new(0x28uLL);
  *(_QWORD *)v4 = a2;
  v4[6] = 7;
  v4[8] = 4;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, double a2)
{
  double *v4;

  v4 = (double *)operator new(0x28uLL);
  *v4 = a2;
  *((_DWORD *)v4 + 6) = 5;
  *((_DWORD *)v4 + 8) = 5;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

{
  double *v4;

  v4 = (double *)operator new(0x28uLL);
  *v4 = a2;
  *((_DWORD *)v4 + 6) = 5;
  *((_DWORD *)v4 + 8) = 5;
  return sub_20BF1C4E0(this, (uint64_t)v4);
}

unint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(unint64_t **this)
{
  int *v2;
  unint64_t v3;
  _QWORD v5[4];
  char v6;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  v2 = (int *)(*this + 4);
  LODWORD(v5[0]) = 0;
  if (sub_20BF1B46C(v2, (int *)v5, (uint64_t)__p))
  {
    if (*((_DWORD *)*this + 6))
      sub_20BF1C1FC();
    v3 = **this;
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetJsObject";
    v5[2] = 261;
    v5[3] = "const JsObject &pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject() const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1);
    v3 = atomic_load(&qword_254985300);
    if (!v3)
      v3 = sub_20BF1C658(&qword_254985300);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20BF1B448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20BF1B46C(int *a1, int *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v7;
  void **v8;
  const char *v9;
  char *v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  __int128 v18;
  uint64_t v19;

  v3 = *a1;
  v4 = *a2;
  if (a3 && v3 != v4)
  {
    sub_20BF1BC70(a2, v16);
    v7 = v17;
    v8 = (void **)v16[0];
    sub_20BF1BC70(a1, __p);
    if (v7 >= 0)
      v11 = v16;
    else
      v11 = v8;
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Attempt to get %s from value holding %s", v9, v10, v11, v12);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v18;
    *(_QWORD *)(a3 + 16) = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18) = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  return v3 == v4;
}

void sub_20BF1B564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(unint64_t **this)
{
  int *v2;
  unint64_t v3;
  _QWORD v5[4];
  char v6;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  v2 = (int *)(*this + 4);
  LODWORD(v5[0]) = 1;
  if (sub_20BF1B46C(v2, (int *)v5, (uint64_t)__p))
  {
    if (*((_DWORD *)*this + 6) != 1)
      sub_20BF1C1FC();
    v3 = **this;
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetJsArray";
    v5[2] = 275;
    v5[3] = "const JsArray &pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray() const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1);
    v3 = atomic_load(&qword_254985308);
    if (!v3)
      v3 = sub_20BF1C6C4(&qword_254985308);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20BF1B674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetString(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  int *v2;
  unint64_t v3;
  _QWORD v5[4];
  char v6;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  v2 = (int *)(*(_QWORD *)this + 32);
  LODWORD(v5[0]) = 2;
  if (sub_20BF1B46C(v2, (int *)v5, (uint64_t)__p))
  {
    v3 = *(_QWORD *)this;
    if (*(_DWORD *)(v3 + 24) != 2)
      sub_20BF1C1FC();
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetString";
    v5[2] = 289;
    v5[3] = "const std::string &pxrInternal__aapl__pxrReserved__::JsValue::GetString() const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1);
    v3 = atomic_load(&qword_254985310);
    if (!v3)
      v3 = sub_20BF1C730(&qword_254985310);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20BF1B76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::GetBool(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  int *v2;
  _BOOL8 v3;
  _QWORD v5[4];
  char v6;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  v2 = (int *)(*(_QWORD *)this + 32);
  LODWORD(v5[0]) = 3;
  if (sub_20BF1B46C(v2, (int *)v5, (uint64_t)__p))
  {
    if (*(_DWORD *)(*(_QWORD *)this + 24) != 3)
      sub_20BF1C1FC();
    v3 = **(unsigned __int8 **)this != 0;
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetBool";
    v5[2] = 301;
    v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::JsValue::GetBool() const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1);
    v3 = 0;
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20BF1B854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetInt(uint64_t **this)
{
  int *v2;
  uint64_t Int64;
  _QWORD v5[4];
  char v6;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  v2 = (int *)(*this + 4);
  LODWORD(v5[0]) = 4;
  if (sub_20BF1B46C(v2, (int *)v5, (uint64_t)__p))
  {
    Int64 = pxrInternal__aapl__pxrReserved__::JsValue::GetInt64(this);
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetInt";
    v5[2] = 313;
    v5[3] = "int pxrInternal__aapl__pxrReserved__::JsValue::GetInt() const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1);
    Int64 = 0;
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return Int64;
}

void sub_20BF1B924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetInt64(uint64_t **this)
{
  int *v2;
  int v3;
  uint64_t UInt64;
  _QWORD v6[4];
  char v7;
  void *__p[2];
  uint64_t v9;

  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  v2 = (int *)(*this + 4);
  LODWORD(v6[0]) = 4;
  if (sub_20BF1B46C(v2, (int *)v6, (uint64_t)__p))
  {
    v3 = *((_DWORD *)*this + 6);
    if (v3 == 4)
    {
      UInt64 = **this;
    }
    else
    {
      if (v3 != 7)
        sub_20BF1C1FC();
      UInt64 = pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(this);
    }
  }
  else
  {
    v6[0] = "js/value.cpp";
    v6[1] = "GetInt64";
    v6[2] = 325;
    v6[3] = "int64_t pxrInternal__aapl__pxrReserved__::JsValue::GetInt64() const";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1);
    UInt64 = 0;
  }
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return UInt64;
}

void sub_20BF1BA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 24) == 7;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(uint64_t **this)
{
  int *v2;
  uint64_t Int64;
  _QWORD v5[4];
  char v6;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  v2 = (int *)(*this + 4);
  LODWORD(v5[0]) = 4;
  if (sub_20BF1B46C(v2, (int *)v5, (uint64_t)__p))
  {
    if (*((_DWORD *)*this + 6) == 7)
      Int64 = **this;
    else
      Int64 = pxrInternal__aapl__pxrReserved__::JsValue::GetInt64((pxrInternal__aapl__pxrReserved__::JsValue *)this);
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetUInt64";
    v5[2] = 340;
    v5[3] = "uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64() const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1);
    Int64 = 0;
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return Int64;
}

void sub_20BF1BB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::JsValue::GetReal(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v4;
  int v5;
  double v6;
  _QWORD v8[4];
  char v9;
  void *__p[2];
  uint64_t v11;

  v2 = *this;
  v3 = *this;
  v5 = *((_DWORD *)v3 + 8);
  v4 = (int *)(v3 + 4);
  if (v5 == 4)
  {
    if (*((_DWORD *)v2 + 6) == 7)
      return (double)(unint64_t)pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(this);
    else
      return (double)pxrInternal__aapl__pxrReserved__::JsValue::GetInt64(this);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v11 = 0;
    LODWORD(v8[0]) = 5;
    if (sub_20BF1B46C(v4, (int *)v8, (uint64_t)__p))
    {
      if (*((_DWORD *)*this + 6) != 5)
        sub_20BF1C1FC();
      v6 = *(double *)*this;
    }
    else
    {
      v8[0] = "js/value.cpp";
      v8[1] = "GetReal";
      v8[2] = 361;
      v8[3] = "double pxrInternal__aapl__pxrReserved__::JsValue::GetReal() const";
      v9 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1);
      v6 = 0.0;
    }
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  return v6;
}

void sub_20BF1BC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetType(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 32);
}

_QWORD *pxrInternal__aapl__pxrReserved__::JsValue::GetTypeName@<X0>(pxrInternal__aapl__pxrReserved__::JsValue *this@<X0>, _QWORD *a2@<X8>)
{
  return sub_20BF1BC70((int *)(*(_QWORD *)this + 32), a2);
}

_QWORD *sub_20BF1BC70@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 6)
    v5 = "unknown";
  else
    v5 = off_24C51C540[v4];
  return sub_20BDDC0E4(a2, v5);
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsObject(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 32) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsArray(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 32) == 1;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsString(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 32) == 2;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsBool(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 32) == 3;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsInt(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 32) == 4;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsReal(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 32) == 5;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsNull(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 32) == 6;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::operator BOOL(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)a1 + 32) != 6;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (*(_DWORD *)(v2 + 32) == *(_DWORD *)(v3 + 32))
    return sub_20BF1BD64(v2, v3);
  else
    return 0;
}

uint64_t sub_20BF1BD64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t result;
  BOOL v9;
  char v10;
  char *v11;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    result = v7;
  else
    result = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))off_24C51C448[v4])(&v11, a1);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::operator!=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (*(_DWORD *)(v2 + 32) == *(_DWORD *)(v3 + 32))
    return sub_20BF1BD64(v2, v3) ^ 1;
  else
    return 1;
}

uint64_t **sub_20BF1BE04(uint64_t **a1, const void ***a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new(0x18uLL);
  sub_20BF1BE5C(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_20BF1BE48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF1BE5C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20BF1BEB0(a1, *a2, a2 + 1);
  return a1;
}

void sub_20BF1BE98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE78E5C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF1BEB0(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20C6E7410(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *sub_20BF1BF34(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  __dst[3] = *((_QWORD *)a2 + 3);
  __dst[4] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return __dst;
}

void sub_20BF1BFA0(_QWORD ***a1, _QWORD **a2)
{
  _QWORD **v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_20BE78E5C((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

_QWORD *sub_20BF1BFE0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = operator new(0x18uLL);
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = *a2;
  v4[1] = v6;
  v7 = v4 + 1;
  v8 = a2[2];
  v4[2] = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *v4 = v7;
  }
  *a1 = v4;
  return a1;
}

char **sub_20BF1C048(char **a1, _QWORD **a2)
{
  char *v4;

  v4 = (char *)operator new(0x18uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  sub_20BF1C0B0(v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *a1 = v4;
  return a1;
}

void sub_20BF1C09C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20BF1C0B0(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20BF1C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BDE9EB0(&a9);
  _Unwind_Resume(a1);
}

void sub_20BF1C150(void ***a1, void **a2)
{
  void **v2;
  void **v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = v2;
    sub_20BDE9EB0(&v3);
    operator delete(v2);
  }
}

uint64_t sub_20BF1C190(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void **v6;

  v4 = operator new(0x18uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = 0;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 24) = 1;
  sub_20BF1C150(&v6, 0);
  *(_DWORD *)(a1 + 32) = 1;
  return a1;
}

void sub_20BF1C1FC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_20BF1C234(uint64_t a1, uint64_t a2, unsigned __int8 ***a3)
{
  return sub_20BF1C2C4(a2, a3);
}

uint64_t sub_20BF1C240(uint64_t a1, uint64_t ***a2, uint64_t ***a3)
{
  return sub_20BF1C460(a2, a3);
}

uint64_t sub_20BF1C24C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char v4;

  return sub_20BEB4EF8((uint64_t)&v4, a2, a3);
}

BOOL sub_20BF1C26C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

BOOL sub_20BF1C280(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL sub_20BF1C294(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

uint64_t sub_20BF1C2A8()
{
  return 1;
}

BOOL sub_20BF1C2B0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t sub_20BF1C2C4(uint64_t a1, unsigned __int8 ***a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char v13;

  v2 = *(_QWORD **)a1;
  if (*(unsigned __int8 **)(*(_QWORD *)a1 + 16) != (*a2)[2])
    return 0;
  v5 = (unsigned __int8 *)*v2;
  v3 = (unsigned __int8 *)(v2 + 1);
  v4 = v5;
  if (v5 == v3)
    return 1;
  v6 = **a2;
  do
  {
    result = sub_20BF1C3A0((uint64_t)&v13, v4 + 32, v6 + 32);
    if (!(_DWORD)result)
      break;
    v8 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v9 = v4;
    if (v8)
    {
      do
      {
        v4 = v8;
        v8 = *(unsigned __int8 **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
        v10 = *(_QWORD *)v4 == (_QWORD)v9;
        v9 = v4;
      }
      while (!v10);
    }
    v11 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = *(unsigned __int8 **)v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v10 = *(_QWORD *)v12 == (_QWORD)v6;
        v6 = v12;
      }
      while (!v10);
    }
    v6 = v12;
  }
  while (v4 != v3);
  return result;
}

uint64_t sub_20BF1C3A0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v12 = *((_QWORD *)a2 + 3);
  v13 = *((_QWORD *)a3 + 3);
  if (*(_DWORD *)(v12 + 32) == *(_DWORD *)(v13 + 32))
    return sub_20BF1BD64(v12, v13);
  return 0;
}

uint64_t sub_20BF1C460(uint64_t ***a1, uint64_t ***a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = **a2;
  if ((char *)v2 - (char *)v3 != (char *)(*a2)[1] - (char *)v4)
    return 0;
  while (v3 != v2)
  {
    if (*(_DWORD *)(*v3 + 32) != *(_DWORD *)(*v4 + 32))
      return 0;
    result = sub_20BF1BD64(*v3, *v4);
    if (!(_DWORD)result)
      return result;
    v3 += 2;
    v4 += 2;
  }
  return 1;
}

_QWORD *sub_20BF1C4E0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C51C498;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BF1C528(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (v1)
  {
    v3 = (void *)sub_20BF1C5C0(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BF1C548(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF1C55C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = (void *)sub_20BF1C5C0(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BF1C580(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51C528))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20BF1C5C0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C51C4D8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_20BF1C618(uint64_t a1, _QWORD ***a2)
{
  sub_20BF1BFA0(a2, 0);
}

void sub_20BF1C624(uint64_t a1, void ***a2)
{
  sub_20BF1C150(a2, 0);
}

void sub_20BF1C630(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

unint64_t sub_20BF1C658(unint64_t *a1)
{
  _QWORD *v2;
  void *v3;

  v2 = operator new(0x18uLL);
  v3 = v2;
  v2[2] = 0;
  v2[1] = 0;
  *v2 = v2 + 1;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  sub_20BE78E5C((uint64_t)v2, (_QWORD *)v2[1]);
  operator delete(v3);
  return atomic_load(a1);
}

unint64_t sub_20BF1C6C4(unint64_t *a1)
{
  _QWORD *v2;
  void *v3;
  void **v6;

  v2 = operator new(0x18uLL);
  v3 = v2;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  v6 = (void **)v2;
  sub_20BDE9EB0(&v6);
  operator delete(v3);
  return atomic_load(a1);
}

unint64_t sub_20BF1C730(unint64_t *a1)
{
  char *v2;
  void *v3;

  v2 = (char *)operator new(0x18uLL);
  v3 = v2;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = 0;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2[23] < 0)
    operator delete(*(void **)v2);
  operator delete(v3);
  return atomic_load(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::AddEventTreeToAggregate(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::TraceCollection **a3)
{
  _QWORD v4[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;

  pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::Trace_AggregateTreeBuilder(v4, a1, a2);
  pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_CreateAggregateNodes((pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *)v4);
  pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_ProcessCounters((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)v4, a3);
  v4[0] = off_24C51C588;
  sub_20BF1D8C8(&v5);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)v4);
}

void sub_20BF1C80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (**a10)())
{
  uint64_t v10;

  a10 = off_24C51C588;
  sub_20BF1D8C8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v10 + 16));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_CreateAggregateNodes(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this)
{
  __n128 v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v41;
  unint64_t v43;
  int v44;
  unsigned int *v45;
  __n128 __p;
  char v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  _OWORD v51[2];
  __int128 v52;

  v52 = 0u;
  memset(v51, 0, sizeof(v51));
  v50 = 0u;
  memset(v49, 0, sizeof(v49));
  sub_20BF1DC1C((uint64_t *)&__p, (uint64_t *)(*((_QWORD *)this + 1) + 24));
  v2 = sub_20BF1DDAC(v49, &__p);
  v3 = __p.n128_u64[1];
  if (__p.n128_u64[1])
  {
    v4 = (unsigned int *)(__p.n128_u64[1] + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unint64_t, __n128))(*(_QWORD *)v3 + 8))(v3, v2);
  }
  v7 = sub_20BF1CF28((uint64_t *)this + 2);
  v8 = *(_QWORD *)(sub_20BF1CFB0((uint64_t *)(v7 + 24)) + 56);
  while (1)
  {
    v9 = sub_20BF1CF28((uint64_t *)this + 2);
    if (v8 == *(_QWORD *)(sub_20BF1CFB0((uint64_t *)(v9 + 24)) + 48))
      break;
    v10 = *(_QWORD *)(v8 - 8);
    v8 -= 8;
    *(_QWORD *)&v48 = v10;
    sub_20BF1DD04((uint64_t *)&v48);
    DWORD2(v48) = 0;
    v11 = v48;
    *(_QWORD *)&v48 = 0;
    __p = (__n128)v11;
    sub_20BF1E14C(v51, &__p);
    sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
    sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v48);
  }
  pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId((pxrInternal__aapl__pxrReserved__::TraceThreadId *)&__p);
  if (v47 < 0)
    operator delete((void *)__p.n128_u64[0]);
  for (i = *((_QWORD *)&v52 + 1); *((_QWORD *)&v52 + 1); i = *((_QWORD *)&v52 + 1))
  {
    v13 = i + v52 - 1;
    v14 = *(_QWORD *)(*((_QWORD *)&v51[0] + 1) + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8));
    v15 = v13;
    __p.n128_u64[0] = *(_QWORD *)(v14 + 16 * v13);
    sub_20BF1DD04((uint64_t *)&__p);
    __p.n128_u64[1] = *(_QWORD *)(v14 + 16 * v15 + 8);
    sub_20BF1E4F0(v51);
    v16 = __p.n128_u64[1];
    if (!__p.n128_u64[1])
    {
      v17 = *(_QWORD *)(sub_20BF1CFB0((uint64_t *)&__p) + 40);
      v18 = sub_20BF1CFB0((uint64_t *)&__p);
      v19 = *((_QWORD *)&v50 + 1);
      v20 = v17 - *(_QWORD *)(v18 + 32);
      if (v20 && *((_QWORD *)&v50 + 1) >= 2uLL)
      {
        v21 = *((_QWORD *)this + 1);
        v22 = *(_QWORD *)(sub_20BF1CFB0((uint64_t *)&__p) + 16);
        v43 = v22;
        if ((v22 & 7) != 0)
        {
          v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 2, v23));
          if ((v24 & 1) == 0)
            v43 = (unint64_t)v23;
        }
        *(_QWORD *)&v48 = &v43;
        v25 = sub_20BF1E5B0((uint64_t **)(v21 + 32), (uint64_t *)&v43, (uint64_t)&unk_20CAC184C, (uint64_t **)&v48);
        v25[5] += v20;
        if ((v43 & 7) != 0)
        {
          v26 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
        v19 = *((_QWORD *)&v50 + 1);
      }
      v28 = (uint64_t *)sub_20BF1CE84((uint64_t *)(*(_QWORD *)(*((_QWORD *)&v49[0] + 1)
                                                           + (((unint64_t)(v19 + v50 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v19 + v50 - 1)));
      v29 = *(unsigned int **)(sub_20BF1CFB0((uint64_t *)&__p) + 16);
      v45 = v29;
      if ((v29 & 7) != 0)
      {
        v30 = (unsigned int *)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 2, v30));
        if ((v31 & 1) == 0)
          v45 = v30;
      }
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append((pxrInternal__aapl__pxrReserved__::TfToken *)&v45, v28, 1, v20, 1, 1, (uint64_t *)&v43);
      sub_20BF1DC1C((uint64_t *)&v48, (uint64_t *)&v43);
      sub_20BF1DBF0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v43);
      if ((v45 & 7) != 0)
      {
        v32 = (unsigned int *)((unint64_t)v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      sub_20BF1E7A0(v49, &v48);
      v34 = *((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1))
      {
        v35 = (unsigned int *)(*((_QWORD *)&v48 + 1) + 8);
        do
        {
          v36 = __ldxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
      v16 = __p.n128_u64[1];
    }
    v38 = sub_20BF1CFB0((uint64_t *)&__p);
    if (v16 >= (uint64_t)(*(_QWORD *)(v38 + 56) - *(_QWORD *)(v38 + 48)) >> 3)
    {
      sub_20BF1E844(v49);
    }
    else
    {
      v39 = __p.n128_u64[1];
      *(_QWORD *)&v48 = __p.n128_u64[0];
      sub_20BF1DD04((uint64_t *)&v48);
      *((_QWORD *)&v48 + 1) = v39 + 1;
      sub_20BF1E14C(v51, &v48);
      sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v48);
      v40 = sub_20BF1CFB0((uint64_t *)&__p);
      v43 = *(_QWORD *)(*(_QWORD *)(v40 + 48) + 8 * __p.n128_u64[1]);
      sub_20BF1DD04((uint64_t *)&v43);
      v44 = 0;
      v41 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v43;
      v43 = 0;
      v48 = (unint64_t)v41;
      sub_20BF1E14C(v51, &v48);
      sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v48);
      sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v43);
    }
    sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
  }
  sub_20BF1D9A0(v49);
  return sub_20BF1DAE0(v51);
}

void sub_20BF1CC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_20BF1D9A0((uint64_t *)va);
  sub_20BF1DAE0((_QWORD *)(v9 - 96));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_ProcessCounters(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1, pxrInternal__aapl__pxrReserved__::TraceCollection **a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::TraceCollection::Iterate(a2, a1);
  sub_20BF1DC1C(&v8, (uint64_t *)(*((_QWORD *)a1 + 1) + 24));
  v3 = sub_20BF1CE84(&v8);
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode::CalculateInclusiveCounterValues(v3);
  result = v9;
  if (v9)
  {
    v5 = (unsigned int *)(v9 + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20BF1CDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

void sub_20BF1CE08(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)off_24C51C588;
  sub_20BF1D8C8(a1 + 2);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::Trace_AggregateTreeBuilder(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  *a1 = off_24C51C588;
  a1[1] = a2;
  a1[2] = *a3;
  sub_20BF1DD04(a1 + 2);
  return a1;
}

void sub_20BF1CE70(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *v1;

  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF1CE84(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TraceAggregateNode>::operator->() const [PtrTemplate = pxrInternal__aapl__pxr"
            "Reserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TraceAggregateNode]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9CC83 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_20BF1CF28(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::TraceEventTree>::operator->("
            ") const [U = pxrInternal__aapl__pxrReserved__::TraceEventTree]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9CE68 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_20BF1CFB0(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::TraceEventNode>::operator->("
            ") const [U = pxrInternal__aapl__pxrReserved__::TraceEventNode]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9CCCCLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::AcceptsCategory(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this)
{
  return 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::OnEvent(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(a4);
  if (((_DWORD)result - 5) <= 1)
    return pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_OnCounterEvent(this, a2, a3, a4);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_OnCounterEvent(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  _QWORD *result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  double *v13;
  unsigned int *v14;
  unsigned int v15;
  double CounterValue;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  char v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t TimeStamp;
  uint64_t (*v28)(uint64_t *);
  __n128 v29;
  char v30;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode *v31;
  int v32;
  double v33;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode *v34;
  int v35;
  double v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(a4);
  if ((_DWORD)result == 6)
  {
    v8 = 0;
  }
  else
  {
    if ((_DWORD)result != 5)
      return result;
    v8 = 1;
  }
  v9 = *((_QWORD *)this + 1) + 56;
  v10 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  v40 = v10;
  v41 = 0;
  v13 = (double *)sub_20BF1E8C0(v9, &v40, (double *)&v40);
  if ((v40 & 7) != 0)
  {
    v14 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  CounterValue = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(a4);
  if (v8)
    CounterValue = CounterValue + v13[3];
  v13[3] = CounterValue;
  v17 = *((_QWORD *)this + 1);
  v18 = v17 + 96;
  v19 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 7) != 0)
  {
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 2, v20));
    if ((v21 & 1) == 0)
      v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  v22 = *(_DWORD *)(v17 + 136);
  v40 = v19;
  LODWORD(v41) = v22;
  result = sub_20BF1EBCC(v18, &v40, &v40);
  v24 = result;
  if ((v40 & 7) != 0)
  {
    v25 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  if (v23)
    ++*(_DWORD *)(*((_QWORD *)this + 1) + 136);
  if (v8)
  {
    TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
    pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_FindAggregateNode(this, TimeStamp, &v40);
    v28 = sub_20BF1D840(&v40);
    if (v30 & 1 | (unint64_t)v28)
    {
      v31 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_20BF1CE84(&v40);
      v32 = *((_DWORD *)v24 + 6);
      v33 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(a4);
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AppendExclusiveCounterValue(v31, v32, v33);
      v34 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_20BF1CE84(&v40);
      v35 = *((_DWORD *)v24 + 6);
      v36 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(a4);
      v29.n128_f64[0] = pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AppendInclusiveCounterValue(v34, v35, v36);
    }
    result = v41;
    if (v41)
    {
      v37 = (unsigned int *)(v41 + 1);
      do
      {
        v38 = __ldxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, __n128))(*result + 8))(result, v29);
    }
  }
  return result;
}

void sub_20BF1D2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a9 & 7) != 0)
  {
    v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_FindAggregateNode@<X0>(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this@<X0>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v39;
  const pxrInternal__aapl__pxrReserved__::TfToken *i;
  const pxrInternal__aapl__pxrReserved__::TfToken *v41;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode *v42;
  uint64_t (*v43)(uint64_t *);
  char v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v62;
  __int128 v63;
  int64x2_t v64;
  _QWORD v65[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v66;
  uint64_t v67;
  _BYTE v68[24];
  char *v69;
  _QWORD *v70;

  v7 = sub_20BF1CF28((uint64_t *)this + 2);
  v8 = sub_20BF1CFB0((uint64_t *)(v7 + 24));
  result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v67);
  v10 = *(uint64_t **)(v8 + 48);
  v11 = *(uint64_t **)(v8 + 56);
  if (v10 == v11)
    goto LABEL_47;
  while (1)
  {
    result = sub_20BF1CFB0(v10);
    v12 = *(_QWORD *)(result + 16);
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 7) != 0)
    {
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) != 0)
        v15 = v12;
      else
        v15 = v12 & 0xFFFFFFFFFFFFFFF8;
      v13 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      v16 = v67;
      if ((v15 & 7) != 0)
      {
        do
          v17 = __ldxr(v13);
        while (__stlxr(v17 - 2, v13));
      }
    }
    else
    {
      v16 = v67;
    }
    if (v13 == (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8))
      break;
    if (++v10 == v11)
    {
      v10 = v11;
      break;
    }
  }
  if (v10 == *(uint64_t **)(v8 + 56))
  {
LABEL_47:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v66 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v10;
    sub_20BF1DD04((uint64_t *)&v66);
    v64 = 0uLL;
    v65[0] = 0;
    while (1)
    {
      v18 = *(_QWORD *)(sub_20BF1CFB0((uint64_t *)&v66) + 16);
      if ((v18 & 7) != 0)
      {
        v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          v18 &= 0xFFFFFFFFFFFFFFF8;
      }
      v21 = v64.i64[1];
      if (v64.i64[1] >= v65[0])
      {
        v23 = (v64.i64[1] - v64.i64[0]) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          sub_20BDDF694();
        v24 = (v65[0] - v64.i64[0]) >> 2;
        if (v24 <= v23 + 1)
          v24 = v23 + 1;
        v25 = v65[0] - v64.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v24;
        v70 = v65;
        v26 = v25 ? (char *)sub_20BDDF6A8((uint64_t)v65, v25) : 0;
        v27 = &v26[8 * v23];
        v28 = &v26[8 * v25];
        v69 = v28;
        *(_QWORD *)v27 = v18;
        v22 = v27 + 8;
        *(_QWORD *)&v68[16] = v27 + 8;
        v29 = (_QWORD *)v64.i64[1];
        v30 = (_QWORD *)v64.i64[0];
        if (v64.i64[1] == v64.i64[0])
        {
          v32 = vdupq_n_s64(v64.u64[1]);
        }
        else
        {
          do
          {
            v31 = *--v29;
            *((_QWORD *)v27 - 1) = v31;
            v27 -= 8;
            *v29 = 0;
          }
          while (v29 != v30);
          v32 = v64;
          v22 = *(_QWORD **)&v68[16];
          v28 = v69;
        }
        v64.i64[0] = (uint64_t)v27;
        v64.i64[1] = (uint64_t)v22;
        *(int64x2_t *)&v68[8] = v32;
        v33 = (char *)v65[0];
        v65[0] = v28;
        v69 = v33;
        *(_QWORD *)v68 = v32.i64[0];
        sub_20BF1EE98((uint64_t)v68);
      }
      else
      {
        *(_QWORD *)v64.i64[1] = v18;
        v22 = (_QWORD *)(v21 + 8);
      }
      v64.i64[1] = (uint64_t)v22;
      v34 = *(uint64_t **)(sub_20BF1CFB0((uint64_t *)&v66) + 48);
      v35 = *(_QWORD *)(sub_20BF1CFB0((uint64_t *)&v66) + 56) - (_QWORD)v34;
      if (v35)
      {
        v36 = v35 >> 3;
        do
        {
          v37 = &v34[v36 >> 1];
          v38 = *(_QWORD *)(sub_20BF1CFB0(v37) + 40);
          if (v38 >= a2)
            v36 >>= 1;
          else
            v36 += ~(v36 >> 1);
          if (v38 < a2)
            v34 = v37 + 1;
        }
        while (v36);
      }
      if (v34 == *(uint64_t **)(sub_20BF1CFB0((uint64_t *)&v66) + 56))
        break;
      v39 = v66;
      v66 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v34;
      sub_20BF1DD04(v34);
      sub_20BF1D8F4((int)&v66, v39);
    }
    sub_20BF1DC1C((uint64_t *)v68, (uint64_t *)(*((_QWORD *)this + 1) + 24));
    v41 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v64.i64[1];
    for (i = (const pxrInternal__aapl__pxrReserved__::TfToken *)v64.i64[0];
          ;
          i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)i + 8))
    {
      if (i == v41)
      {
        *(_OWORD *)a3 = *(_OWORD *)v68;
        goto LABEL_68;
      }
      v42 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_20BF1CE84((uint64_t *)v68);
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild(v42, i, (uint64_t *)&v62);
      sub_20BF1DC1C((uint64_t *)&v63, (uint64_t *)&v62);
      sub_20BF1DBF0(&v62);
      v43 = sub_20BF1D840(&v63);
      v45 = v44 & 1 | (unint64_t)v43;
      if (v45)
      {
        v46 = *(unsigned int **)&v68[8];
        *(_OWORD *)v68 = v63;
        if (*((_QWORD *)&v63 + 1))
        {
          v47 = (unsigned int *)(*((_QWORD *)&v63 + 1) + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        if (v46)
        {
          v49 = v46 + 2;
          do
          {
            v50 = __ldxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
            (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
        }
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
      }
      v52 = *((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v53 = (unsigned int *)(*((_QWORD *)&v63 + 1) + 8);
        do
        {
          v54 = __ldxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (!v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      }
      if (!v45)
        break;
    }
    v58 = *(_QWORD *)&v68[8];
    if (*(_QWORD *)&v68[8])
    {
      v59 = (unsigned int *)(*(_QWORD *)&v68[8] + 8);
      do
      {
        v60 = __ldxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    }
LABEL_68:
    *(_QWORD *)v68 = &v64;
    sub_20BEEB2B8((void ***)v68);
    result = (uint64_t)sub_20BF1DCD8(&v66);
  }
  if ((v67 & 7) != 0)
  {
    v56 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  return result;
}

void sub_20BF1D740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a17, uint64_t a18)
{
  unsigned int *v19;
  unsigned int v20;

  a11 = (void **)&a13;
  sub_20BEEB2B8(&a11);
  sub_20BF1DCD8(&a17);
  if ((a18 & 7) != 0)
  {
    v19 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  _Unwind_Resume(a1);
}

uint64_t (*sub_20BF1D840(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20BF1DD6C;
}

void sub_20BF1D894(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  void *v2;

  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)off_24C51C588;
  sub_20BF1D8C8(a1 + 2);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)a1);
  operator delete(v2);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BF1D8C8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

void sub_20BF1D8F4(int a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this)
{
  unsigned int *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  if (!this)
    return;
  v3 = (unsigned int *)((char *)this + 8);
  v4 = *((_DWORD *)this + 2);
  if (v4 < 0)
  {
    if (v4 == -2)
    {
      v7 = 4294967294;
      goto LABEL_16;
    }
    v7 = __ldxr(v3);
    if ((_DWORD)v7 == v4)
    {
      if (!__stlxr(v4 + 1, v3))
      {
        v8 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      __clrex();
    }
    v8 = 0;
LABEL_13:
    if (v8)
    {
      if (v4 != -1)
        return;
      goto LABEL_17;
    }
LABEL_16:
    if (!pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked(this, (const pxrInternal__aapl__pxrReserved__::TfRefBase *)v7))return;
LABEL_17:
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *))(*(_QWORD *)this + 8))(this);
    return;
  }
  do
  {
    v5 = __ldxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
    goto LABEL_17;
}

uint64_t sub_20BF1D9A0(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v9 = *(unsigned int **)(v7 + 8);
        if (v9)
        {
          v10 = v9 + 2;
          do
          {
            v11 = __ldxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
        v7 += 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v13 = (uint64_t)v6[1];
          ++v6;
          v7 = v13;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v14 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v14 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v15 = v14 >> 3;
  if (v15 == 1)
  {
    v16 = 128;
  }
  else
  {
    if (v15 != 2)
      goto LABEL_21;
    v16 = 256;
  }
  a1[4] = v16;
LABEL_21:
  while (v2 != v3)
  {
    v17 = *v2++;
    operator delete(v17);
  }
  return sub_20BE97BCC((uint64_t)a1);
}

uint64_t sub_20BF1DAE0(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)*v6 + 16 * v5);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8)
    {
      do
      {
        v7 = sub_20BF1DCD8(v7) + 2;
        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 256;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_20BE97BCC((uint64_t)a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BF1DBF0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t *sub_20BF1DC1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_20BF1DCC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BF1DCD8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20BF1DD04(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  char v6;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 8);
    v3 = *(_DWORD *)(result + 8);
    if ((v3 & 0x80000000) == 0)
    {
      do
        v4 = __ldxr(v2);
      while (__stxr(v4 + 1, v2));
      return result;
    }
    if (v3 == -1)
    {
      v5 = 0xFFFFFFFFLL;
      return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked(result, (const pxrInternal__aapl__pxrReserved__::TfRefBase *)v5);
    }
    v5 = __ldxr(v2);
    if ((_DWORD)v5 == v3)
    {
      if (!__stxr(v3 - 1, v2))
      {
        v6 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      __clrex();
    }
    v6 = 0;
LABEL_13:
    if ((v6 & 1) != 0)
      return result;
    return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked(result, (const pxrInternal__aapl__pxrReserved__::TfRefBase *)v5);
  }
  return result;
}

uint64_t sub_20BF1DD6C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

__n128 sub_20BF1DDAC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_20BF1DE38(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void sub_20BF1DE38(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_20BE972A0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_20BE973B4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20BDDF6A8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_20BE974D0(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20BE975E4((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20BF1E100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20BF1E14C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_20BF1E1DC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7);
  v9 = a2[1];
  *v8 = *a2;
  *a2 = 0;
  v8[1] = v9;
  ++a1[5];
}

void sub_20BF1E1DC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_20BE972A0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_20BE973B4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20BDDF6A8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_20BE974D0(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20BE975E4((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20BF1E4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF1E4F0(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(_QWORD *)(a1[1]
                                                                                                + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                                                                    + 16 * v2));
  --a1[5];
  return sub_20BF1E544(a1, 1);
}

uint64_t sub_20BF1E544(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 32 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100)
    a2 = 1;
  if (v5 < 0x200)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *sub_20BF1E5B0(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v11;

  v6 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v9 = *a4;
    v7[4] = **a4;
    *v9 = 0;
    v7[5] = 0;
    sub_20BDDE1B4(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *sub_20BF1E63C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 4;
        if (!sub_20BF1E6D8(v7, a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_20BF1E6D8(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_20BF1E6D8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  int v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;

  v3 = *a2;
  v4 = *a3;
  if (*a2)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v3)
      v6 = 1;
    else
      v6 = v4 == 0;
    return !v6;
  }
  else
  {
    if (v3 == v4)
      return 0;
    v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v9 + 8);
    if (v10 < v11)
      return 1;
    if (v10 != v11)
    {
      return 0;
    }
    else
    {
      v14 = *(const void **)(v9 + 16);
      v12 = v9 + 16;
      v13 = v14;
      v15 = *(char *)(v12 + 23);
      v18 = *(const void **)(v8 + 16);
      v16 = v8 + 16;
      v17 = v18;
      v19 = *(char *)(v16 + 23);
      if (v19 >= 0)
        v20 = *(unsigned __int8 *)(v16 + 23);
      else
        v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= 0)
        v21 = (const void *)v16;
      else
        v21 = v17;
      if (v15 >= 0)
        v22 = *(unsigned __int8 *)(v12 + 23);
      else
        v22 = *(_QWORD *)(v12 + 8);
      if (v15 >= 0)
        v23 = (const void *)v12;
      else
        v23 = v13;
      if (v22 >= v20)
        v24 = v20;
      else
        v24 = v22;
      v25 = memcmp(v21, v23, v24);
      if (v25)
        return v25 < 0;
      else
        return v20 < v22;
    }
  }
}

void sub_20BF1E7A0(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_20BF1DE38(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unsigned int *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

uint64_t sub_20BF1E844(_QWORD *a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = a1[5] + a1[4] - 1;
  v3 = *(unsigned int **)(*(_QWORD *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v2 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  --a1[5];
  return sub_20BF1E544(a1, 1);
}

_QWORD *sub_20BF1E8C0(uint64_t a1, _QWORD *a2, double *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF1EB08(a1, v6, a3, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF1EAF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_20BF1EB08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  double *v8;
  double v9;
  unsigned int *v10;
  unsigned int v11;
  double result;

  v7 = a1 + 16;
  v8 = (double *)operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0.0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = *a3;
  v8[2] = *a3;
  if ((LOBYTE(v9) & 7) != 0)
  {
    v10 = (unsigned int *)(*(_QWORD *)&v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *((_QWORD *)v8 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  result = a3[1];
  v8[3] = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BF1EB8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v3)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = v3[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
    operator delete(v3);
  }
}

_QWORD *sub_20BF1EBCC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF1EE14(a1, v6, a3, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF1EDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF1EE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[2] = *a3;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 6) = *((_DWORD *)a3 + 2);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t sub_20BF1EE98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::Trace_EventTreeBuilder(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this)
{
  *(_QWORD *)this = off_24C51C600;
  sub_20BF1EF90((_QWORD *)this + 1);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_QWORD *)this + 6) = off_24C51C650;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  return this;
}

void sub_20BF1EF7C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *v1;

  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(v1);
  _Unwind_Resume(a1);
}

void sub_20BF1EF90(_QWORD *a1@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;

  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v6, "root");
  v4 = 0uLL;
  v5 = 0;
  sub_20BF202A0(&v6, 0, 0, 0, &v4, 0, a1);
  v7 = &v4;
  sub_20BF206A4((void ***)&v7);
  if ((v6 & 7) != 0)
  {
    v2 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

void sub_20BF1F01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int *v16;
  unsigned int v17;

  *(_QWORD *)(v14 - 24) = v13;
  sub_20BF206A4((void ***)(v14 - 24));
  if ((a13 & 7) != 0)
  {
    v16 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::OnEndCollection(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this)
{
  _QWORD *v1;
  _QWORD *i;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  v1 = (_QWORD *)((char *)this + 24);
  sub_20BF20EB0((uint64_t)this + 16, *((_QWORD **)this + 3));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  for (i = (_QWORD *)v1[19]; i; i = (_QWORD *)*i)
  {
    v3 = (unint64_t *)i[3];
    v4 = (unint64_t *)i[4];
    v5 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 5);
    if (v4 == v3)
      v6 = 0;
    else
      v6 = v5;
    sub_20BF20F3C(v3, v4, (uint64_t)&v7, v6, 1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::AcceptsCategory(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::OnBeginThread(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  char v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  void **v19;

  v17 = 0;
  v3 = this + 2;
  v18 = (__int128 *)a2;
  v4 = sub_20BF22ED4(this + 2, a2, (uint64_t)&unk_20CAC184C, &v18);
  sub_20BF231CC((void **)v4 + 7);
  *(_OWORD *)(v4 + 7) = 0uLL;
  v4[9] = v17;
  v17 = 0;
  v16 = 0uLL;
  v19 = (void **)&v16;
  sub_20BF230E4(&v19);
  *(_QWORD *)&v16 = a2;
  v5 = sub_20BF22ED4(v3, a2, (uint64_t)&unk_20CAC184C, (__int128 **)&v16);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16);
  LODWORD(v19) = 0;
  LODWORD(v18) = 0;
  v15 = 0;
  v14 = 0;
  v13 = 1;
  v6 = v5[8];
  if (v6 >= v5[9])
  {
    result = sub_20BF23238(v5 + 7, (uint64_t *)&v16, (int *)&v19, (int *)&v18, &v15, &v14, &v13);
  }
  else
  {
    v7 = v16;
    *(_QWORD *)v6 = v16;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        *(_QWORD *)v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_DWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_WORD *)(v6 + 32) = 256;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    result = v6 + 88;
    *(_OWORD *)(v6 + 72) = 0u;
  }
  v5[8] = result;
  if ((v16 & 7) != 0)
  {
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return result;
}

void sub_20BF1F254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a11 & 7) != 0)
  {
    v11 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::OnEndThread(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2)
{
  uint64_t **v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;

  v3 = (uint64_t **)((char *)this + 16);
  result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20BF23694((uint64_t)this + 16, a2);
  if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)this + 24) != result)
  {
    v5 = (uint64_t *)result;
    v15 = 0;
    v6 = result[8];
    if (result[7] != v6)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::Close((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v6 - 88), (uint64_t *)&v14);
        v8 = v14;
        v7 = v15;
        v14 = 0;
        v15 = v8;
        sub_20BF1D8F4((int)&v15, v7);
        sub_20BF1DCD8(&v14);
        if (!*((_BYTE *)v6 - 55))
        {
          v9 = (_QWORD *)sub_20BF1CFB0((uint64_t *)&v15);
          pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(v9);
        }
        v10 = v5[8];
        sub_20BF23168((uint64_t)(v5 + 9), v10 - 88);
        v5[8] = v10 - 88;
        if (v5[7] == v10 - 88)
          break;
        sub_20BF1F584((uint64_t *)(v10 - 136), (uint64_t *)&v15);
        v6 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v5[8];
      }
      while ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v5[7] != v6);
    }
    v11 = (_QWORD *)sub_20BF1CFB0((uint64_t *)&v15);
    pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(v11);
    v12 = sub_20BF1CFB0((uint64_t *)this + 1);
    v13 = v15;
    sub_20BF1DD04((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::TraceEventNode::Append(v12, (uint64_t *)&v13);
    sub_20BF1DCD8(&v13);
    sub_20BE10B80(v3, v5);
    sub_20BF20EF8((uint64_t)(v5 + 4));
    operator delete(v5);
    return sub_20BF1DCD8(&v15);
  }
  return result;
}

void sub_20BF1F3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  v5 = va_arg(va1, _QWORD);
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::Close(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  _QWORD *v7;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 *v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;

  v4 = *((_QWORD *)this + 5);
  v5 = *((_QWORD *)this + 6);
  v6 = (__n128 *)((char *)this + 40);
  v7 = (_QWORD *)(v5 - 8);
  if (v4 != v5 && (unint64_t)v7 > v4)
  {
    v9 = v4 + 8;
    do
    {
      v10 = *(_QWORD *)(v9 - 8);
      *(_QWORD *)(v9 - 8) = *v7;
      *v7-- = v10;
      v11 = v9 >= (unint64_t)v7;
      v9 += 8;
    }
    while (!v11);
  }
  v13 = (__int128 *)*((_QWORD *)this + 8);
  v12 = (__int128 *)*((_QWORD *)this + 9);
  v14 = (unint64_t)(v12 - 3);
  if (v13 != v12 && v14 > (unint64_t)v13)
  {
    do
    {
      sub_20BF24550(v13, v14);
      v13 += 3;
      v14 -= 48;
    }
    while ((unint64_t)v13 < v14);
  }
  sub_20BF202A0((uint64_t *)this, *((_DWORD *)this + 2), *((_QWORD *)this + 2), *((_QWORD *)this + 3), v6, *((_BYTE *)this + 32), a2);
  v17 = *((_QWORD *)this + 8);
  v16 = *((_QWORD *)this + 9);
  while (v17 != v16)
  {
    v18 = (uint64_t **)sub_20BF1CFB0(a2);
    v19 = *(_QWORD *)(v17 + 8);
    v24 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::TraceEventNode::AddAttribute(v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (const pxrInternal__aapl__pxrReserved__::TraceEventData *)(v17 + 16));
    if ((v24 & 7) != 0)
    {
      v22 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    v17 += 48;
  }
}

void sub_20BF1F548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v10;
  unsigned int *v12;
  unsigned int v13;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  sub_20BF1DCD8(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF1F584(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (uint64_t *)sub_20BDDF6A8(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[v10];
    v17 = v16;
    v18 = &v14[v13];
    *v16 = *a2;
    sub_20BF1DD04(&v14[v10]);
    ++v17;
    sub_20BF2370C(a1, &v15);
    v9 = (uint64_t *)a1[1];
    result = sub_20BF23814((uint64_t)&v15);
  }
  else
  {
    *v7 = *a2;
    result = sub_20BF1DD04(v7);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20BF1F67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::OnEvent(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  switch(pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(a4))
  {
    case 1u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnBegin(this, a2, a3, a4);
      break;
    case 2u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnEnd(this, a2, a3, a4);
      break;
    case 3u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnTimespan(this, a2, (unsigned int **)a3, a4);
      break;
    case 4u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnMarker((pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *)this, a2, a3, a4);
      break;
    case 7u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnData(this, a2, a3, a4);
      break;
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnBegin(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void ***v20;
  unsigned int *v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[3];
  _QWORD v29[3];
  void **v30;

  v23 = (unint64_t)a2;
  v6 = sub_20BF22ED4(this + 2, a2, (uint64_t)&unk_20CAC184C, (__int128 **)&v23);
  v7 = v6;
  v8 = v6 + 7;
  v9 = v6[8];
  v10 = -1171354717 * ((unint64_t)(v9 - v6[7]) >> 3);
  while (1)
  {
    --v10;
    for (i = v9 - 88; !*(_BYTE *)(i + 33); i = v12 + 88 * v10)
    {
      v12 = *v8;
      if ((*(_QWORD *)i & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8)
        || (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v9 - v12) >> 3)) <= 1)
      {
        goto LABEL_9;
      }
      --v10;
    }
    v12 = *v8;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v9 - *v8) >> 3)) < 2)
      break;
    v6 = pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose((uint64_t)v6, (uint64_t)v8);
    v9 = v7[8];
  }
LABEL_9:
  if (v9 == v12)
  {
    v13 = *(_QWORD *)a3;
  }
  else
  {
    v13 = *(_QWORD *)a3;
    if ((*(_QWORD *)i & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
    {
      *(_QWORD *)(i + 16) = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
      *(_WORD *)(i + 32) = 257;
      return;
    }
  }
  v14 = *((_DWORD *)a4 + 2);
  v23 = v13;
  if ((v13 & 7) != 0)
  {
    v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v23 = (unint64_t)v15;
  }
  v24 = v14;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v17 = v7[8];
  v28[0] = *(_QWORD *)(v17 - 48);
  *(_QWORD *)(v17 - 48) = 0;
  v28[1] = *(_QWORD *)(v17 - 40);
  *(_QWORD *)(v17 - 40) = 0;
  v28[2] = *(_QWORD *)(v17 - 32);
  *(_QWORD *)(v17 - 32) = 0;
  v18 = v7[8];
  v29[0] = *(_QWORD *)(v18 - 24);
  *(_QWORD *)(v18 - 24) = 0;
  v29[1] = *(_QWORD *)(v18 - 16);
  *(_QWORD *)(v18 - 16) = 0;
  v29[2] = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v18 - 8) = 0;
  pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::Close((pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode *)&v23, (uint64_t *)&v30);
  v19 = (_QWORD *)sub_20BF1CFB0((uint64_t *)&v30);
  pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(v19);
  sub_20BF1F584((uint64_t *)(v7[8] - 48), (uint64_t *)&v30);
  v20 = (void ***)sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v30);
  v30 = (void **)v29;
  sub_20BF20714(v20);
  v30 = (void **)v28;
  sub_20BF206A4(&v30);
  if ((v23 & 7) != 0)
  {
    v21 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
}

void sub_20BF1F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF200B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnEnd(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t i;
  unint64_t TimeStamp;
  int v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t result;
  char v17;
  char v18;
  int v19;
  int v20;
  __int128 *v21;

  v21 = (__int128 *)a2;
  v6 = sub_20BF22ED4(this + 2, a2, (uint64_t)&unk_20CAC184C, &v21);
  v7 = v6 + 7;
  for (i = v6[8]; *(_BYTE *)(i - 55); i = v6[8])
  {
    TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
    if (TimeStamp > *(_QWORD *)(i - 72))
      break;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v6[8] - v6[7]) >> 3)) < 2)
      break;
    pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose(TimeStamp, (uint64_t)v7);
  }
  v10 = *((_DWORD *)a4 + 2);
  v19 = 0;
  v20 = v10;
  v11 = (__int128 *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
  v21 = v11;
  v18 = 1;
  v17 = 0;
  v12 = v6[8];
  if (v12 >= v6[9])
  {
    result = sub_20BF23860(v7, (uint64_t *)a3, &v20, &v19, (uint64_t *)&v21, &v18, &v17);
  }
  else
  {
    v13 = *(_QWORD *)a3;
    *(_QWORD *)v12 = *(_QWORD *)a3;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if ((v15 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_DWORD *)(v12 + 8) = v10;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = v11;
    *(_WORD *)(v12 + 32) = 1;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    result = v12 + 88;
    *(_OWORD *)(v12 + 72) = 0u;
  }
  v6[8] = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnTimespan(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, unsigned int **a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  uint64_t StartTimeStamp;
  uint64_t EndTimeStamp;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  uint64_t *i;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  _BYTE v23[26];
  _OWORD v24[3];
  __int128 *v25;

  StartTimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetStartTimeStamp(a4);
  EndTimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetEndTimeStamp(a4);
  v10 = *((_DWORD *)a4 + 2);
  v11 = *a3;
  v22 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v22 = v12;
  }
  *(_DWORD *)v23 = v10;
  *(_QWORD *)&v23[8] = StartTimeStamp;
  *(_QWORD *)&v23[16] = EndTimeStamp;
  *(_WORD *)&v23[24] = 256;
  memset(v24, 0, sizeof(v24));
  v25 = (__int128 *)a2;
  v14 = (char *)sub_20BF22ED4(this + 2, a2, (uint64_t)&unk_20CAC184C, &v25);
  v15 = v14;
  for (i = (uint64_t *)(v14 + 56);
        ;
        v14 = (char *)pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose((uint64_t)v14, (uint64_t)i))
  {
    v17 = *((_QWORD *)v15 + 8);
    if (*(_QWORD *)&v23[8] >= *(_QWORD *)(v17 - 72) && *(_QWORD *)&v23[16] <= *(_QWORD *)(v17 - 64))
      break;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v17 - *i) >> 3)) < 2)
      break;
  }
  if (v17 >= *((_QWORD *)v15 + 9))
  {
    v19 = sub_20BF23A2C(i, (uint64_t)&v22);
  }
  else
  {
    *(_QWORD *)v17 = v22;
    v18 = *(_OWORD *)&v23[10];
    *(_OWORD *)(v17 + 8) = *(_OWORD *)v23;
    *(_OWORD *)(v17 + 18) = v18;
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = 0;
    *(_QWORD *)(v17 + 40) = 0;
    *(_OWORD *)(v17 + 40) = v24[0];
    *(_QWORD *)(v17 + 56) = *(_QWORD *)&v24[1];
    *(_QWORD *)(v17 + 64) = 0;
    memset(v24, 0, 24);
    *(_QWORD *)(v17 + 72) = 0;
    *(_QWORD *)(v17 + 80) = 0;
    *(_OWORD *)(v17 + 64) = *(_OWORD *)((char *)&v24[1] + 8);
    *(_QWORD *)(v17 + 80) = *((_QWORD *)&v24[2] + 1);
    v22 = 0;
    memset((char *)&v24[1] + 8, 0, 24);
    v19 = v17 + 88;
  }
  *((_QWORD *)v15 + 8) = v19;
  v25 = (_OWORD *)((char *)&v24[1] + 8);
  sub_20BF20714((void ***)&v25);
  v25 = v24;
  sub_20BF206A4((void ***)&v25);
  if ((v22 & 7) != 0)
  {
    v20 = (unsigned int *)((unint64_t)v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
}

void sub_20BF1FD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF200B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnMarker(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  uint64_t *v6;
  uint64_t *TimeStamp;
  __int128 __p;
  uint64_t v9;

  TimeStamp = (uint64_t *)a3;
  v6 = sub_20BF23B88((uint64_t)this + 160, a3, (uint64_t)&unk_20CAC184C, &TimeStamp) + 3;
  TimeStamp = (uint64_t *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *(_OWORD *)a2;
    v9 = *((_QWORD *)a2 + 2);
  }
  sub_20BF20120(v6, (uint64_t)&TimeStamp);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
}

void sub_20BF1FE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnData(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  unint64_t TimeStamp;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  _BYTE v20[47];

  *(_QWORD *)&v19 = a2;
  result = (uint64_t)sub_20BF22ED4(this + 2, a2, (uint64_t)&unk_20CAC184C, (__int128 **)&v19);
  v7 = result + 56;
  v8 = *(_QWORD *)(result + 64);
  if (*(_QWORD *)(result + 56) != v8)
  {
    for (i = result; ; v8 = *(_QWORD *)(i + 64))
    {
      TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
      if (TimeStamp >= *(_QWORD *)(v8 - 72))
      {
        TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
        if (TimeStamp <= *(_QWORD *)(v8 - 64))
          break;
      }
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(i + 64) - *(_QWORD *)(i + 56)) >> 3)) < 2)
        break;
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose(TimeStamp, v7);
    }
    v11 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
    v12 = *(_QWORD *)a3;
    *(_QWORD *)&v19 = v11;
    *((_QWORD *)&v19 + 1) = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        *((_QWORD *)&v19 + 1) = v13;
    }
    pxrInternal__aapl__pxrReserved__::TraceEvent::GetData(a4, (uint64_t)v20);
    v15 = *(_OWORD **)(v8 - 16);
    if ((unint64_t)v15 >= *(_QWORD *)(v8 - 8))
    {
      v16 = sub_20BF240E4((uint64_t *)(v8 - 24), (uint64_t)&v19);
    }
    else
    {
      *v15 = v19;
      v16 = (uint64_t)(v15 + 3);
      *((_QWORD *)&v19 + 1) = 0;
      sub_20BF241EC((uint64_t)(v15 + 1), (uint64_t)v20);
    }
    *(_QWORD *)(v8 - 16) = v16;
    result = sub_20BF207C0((uint64_t)v20);
    if ((BYTE8(v19) & 7) != 0)
    {
      v17 = (unsigned int *)(*((_QWORD *)&v19 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  return result;
}

void sub_20BF1FFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;

  sub_20BF207C0(v10);
  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;

  pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::Close((pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode *)(*(_QWORD *)(a2 + 8) - 88), (uint64_t *)&v5);
  v3 = *(_QWORD *)(a2 + 8);
  sub_20BF23168(a2 + 16, v3 - 88);
  *(_QWORD *)(a2 + 8) = v3 - 88;
  sub_20BF1F584((uint64_t *)(v3 - 136), (uint64_t *)&v5);
  return sub_20BF1DCD8(&v5);
}

void sub_20BF2004C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::_PendingEventNode(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  double result;

  v7 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)this &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)this + 2) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((_BYTE *)this + 32) = a6;
  *((_BYTE *)this + 33) = a7;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  double result;

  v7 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)this &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)this + 2) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((_BYTE *)this + 32) = a6;
  *((_BYTE *)this + 33) = a7;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

uint64_t sub_20BF200B8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  void **v5;

  v5 = (void **)(a1 + 64);
  sub_20BF20714(&v5);
  v5 = (void **)(a1 + 40);
  sub_20BF206A4(&v5);
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return a1;
}

uint64_t sub_20BF20120(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v12 = v5 - *a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)sub_20BED2F10(result, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(_QWORD *)v15 = *(_QWORD *)a2;
    v16 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17[2] = v15 + 32;
    sub_20BF23ED0(a1, v17);
    v9 = a1[1];
    result = sub_20BF2405C((uint64_t)v17);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_20BF20234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF2405C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF202A0(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  void *v14;

  v14 = operator new(0x68uLL);
  sub_20BF20840((uint64_t)v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14;
}

void sub_20BF20318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::CreateTree(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1, pxrInternal__aapl__pxrReserved__::TraceCollection **a2)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;
  uint64_t v6[5];
  uint64_t v7[5];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;

  v3 = a1;
  pxrInternal__aapl__pxrReserved__::TraceCollection::ReverseIterate(a2, a1);
  pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::Update((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)((char *)v3 + 48), a2);
  v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)v3 + 1);
  sub_20BF1DD04((uint64_t *)&v8);
  sub_20BF24A6C((uint64_t)v7, (uint64_t)v3 + 80);
  sub_20BF24F04((uint64_t)v6, (uint64_t)v3 + 160);
  sub_20BF20424(&v8, v7, v6, &v9);
  v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)v3 + 5);
  v3 = (pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)((char *)v3 + 40);
  *(_QWORD *)v3 = v9;
  v9 = 0;
  sub_20BF1D8F4((int)v3, v4);
  sub_20BF1D8C8(&v9);
  sub_20BF20D80((uint64_t)v6);
  sub_20BF20CC0((uint64_t)v7);
  return sub_20BF1DCD8(&v8);
}

void sub_20BF203E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF1D8C8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v14 - 24));
  sub_20BF20D80((uint64_t)&a9);
  sub_20BF20CC0((uint64_t)&a14);
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v14 - 32));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BF20424@<X0>(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  uint64_t v10[5];
  uint64_t v11[5];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  v8 = operator new(0x70uLL);
  v12 = *a1;
  sub_20BF1DD04((uint64_t *)&v12);
  sub_20BF20A20((uint64_t)v11, a2);
  sub_20BF20A20((uint64_t)v10, a3);
  sub_20BF20A90((uint64_t)v8, &v12, v11, v10);
  *a4 = v8;
  sub_20BF20D80((uint64_t)v10);
  sub_20BF20CC0((uint64_t)v11);
  return sub_20BF1DCD8(&v12);
}

void sub_20BF204C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF20D80((uint64_t)va);
  sub_20BF20CC0((uint64_t)va1);
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v3 - 56));
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_CounterAccumulator::_AcceptsCategory(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_CounterAccumulator *this)
{
  return 1;
}

void sub_20BF20504(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1)
{
  *(_QWORD *)a1 = &unk_24C51CAE8;
  sub_20BF20BCC((uint64_t)a1 + 72);
  sub_20BF20CC0((uint64_t)a1 + 32);
  sub_20BF20C54((uint64_t)a1 + 8, *((_QWORD **)a1 + 2));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(a1);
}

void sub_20BF2054C(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24C51CAE8;
  sub_20BF20BCC((uint64_t)a1 + 72);
  sub_20BF20CC0((uint64_t)a1 + 32);
  sub_20BF20C54((uint64_t)a1 + 8, *((_QWORD **)a1 + 2));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(a1);
  operator delete(v2);
}

void sub_20BF20598(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C51C600;
  sub_20BF20D80(a1 + 160);
  *(_QWORD *)(a1 + 48) = &unk_24C51CAE8;
  sub_20BF20BCC(a1 + 120);
  sub_20BF20CC0(a1 + 80);
  sub_20BF20C54(a1 + 56, *(_QWORD **)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)(a1 + 48));
  sub_20BF1D8C8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40));
  sub_20BF20EB0(a1 + 16, *(_QWORD **)(a1 + 24));
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)a1);
}

void sub_20BF2061C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C51C600;
  sub_20BF20D80(a1 + 160);
  *(_QWORD *)(a1 + 48) = &unk_24C51CAE8;
  sub_20BF20BCC(a1 + 120);
  sub_20BF20CC0(a1 + 80);
  sub_20BF20C54(a1 + 56, *(_QWORD **)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)(a1 + 48));
  sub_20BF1D8C8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40));
  sub_20BF20EB0(a1 + 16, *(_QWORD **)(a1 + 24));
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)a1);
  operator delete(v2);
}

void sub_20BF206A4(void ***a1)
{
  void **v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  void *v5;

  v1 = *a1;
  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20BF1DCD8(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BF20714(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BF20754((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_20BF20754(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 48)
  {
    result = sub_20BF207C0(i - 32);
    v5 = *(_QWORD *)(i - 40);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_20BF207C0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C51C6D8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_20BF2081C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

__n128 sub_20BF20840(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, __n128 *a6, char a7)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __n128 result;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &unk_24C51C718;
  v7 = *a2;
  *(_QWORD *)(a1 + 16) = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  result = *a6;
  *(__n128 *)(a1 + 48) = *a6;
  *(_QWORD *)(a1 + 64) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  *(_BYTE *)(a1 + 72) = a7;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  return result;
}

void sub_20BF208CC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void **v5;

  *(_QWORD *)a1 = &unk_24C51C718;
  sub_20BF209B8(a1 + 80, *(_QWORD **)(a1 + 88));
  v5 = (void **)(a1 + 48);
  sub_20BF206A4(&v5);
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_20BF20940(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &unk_24C51C718;
  sub_20BF209B8(a1 + 80, *(_QWORD **)(a1 + 88));
  v6 = (void **)(a1 + 48);
  sub_20BF206A4(&v6);
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v5);
}

void sub_20BF209B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_20BF209B8(a1, *a2);
    sub_20BF209B8(a1, a2[1]);
    sub_20BF207C0((uint64_t)(a2 + 5));
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

uint64_t sub_20BF20A20(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_20BF20A90(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C51C750;
  *(_QWORD *)(a1 + 24) = *a2;
  sub_20BF1DD04((uint64_t *)(a1 + 24));
  sub_20BF20A20(a1 + 32, a3);
  sub_20BF20A20(a1 + 72, a4);
  return a1;
}

void sub_20BF20B04(_Unwind_Exception *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfRefBase *v2;
  unsigned int **v3;

  sub_20BEBCE60(v3, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v2);
  _Unwind_Resume(a1);
}

void sub_20BF20B20(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  unsigned int **v2;
  const void *v3;

  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_24C51C750;
  v2 = (unsigned int **)(a1 + 2);
  sub_20BF20D80((uint64_t)(a1 + 9));
  sub_20BF20CC0((uint64_t)(a1 + 4));
  sub_20BF1DCD8(a1 + 3);
  sub_20BEBCE60(v2, v3);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_20BF20B74(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  unsigned int **v2;
  const void *v3;
  void *v4;

  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_24C51C750;
  v2 = (unsigned int **)(a1 + 2);
  sub_20BF20D80((uint64_t)(a1 + 9));
  sub_20BF20CC0((uint64_t)(a1 + 4));
  sub_20BF1DCD8(a1 + 3);
  sub_20BEBCE60(v2, v3);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v4);
}

uint64_t sub_20BF20BCC(uint64_t a1)
{
  void *v2;

  sub_20BF20C04(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF20C04(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BF20C54(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_20BF20C54(a1, *a2);
    sub_20BF20C54(a1, a2[1]);
    sub_20BE6100C((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

uint64_t sub_20BF20CC0(uint64_t a1)
{
  void *v2;

  sub_20BF20CF8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF20CF8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF20D34(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BF20D34(_QWORD *a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if ((*a1 & 7) != 0)
  {
    v3 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
}

uint64_t sub_20BF20D80(uint64_t a1)
{
  void *v2;

  sub_20BF20DB8(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF20DB8(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void **v7;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v7 = (void **)(v2 + 24);
      sub_20BF20E24(&v7);
      v4 = *((_QWORD *)v2 + 2);
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BF20E24(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BF20E64((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20BF20E64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_20BF20EB0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BF20EB0(a1, *a2);
    sub_20BF20EB0(a1, a2[1]);
    sub_20BF20EF8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BF20EF8(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_20BF230E4(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20BF20F3C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  __int128 v19;
  unint64_t v20;
  uint64_t *v21;
  char v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

void sub_20BF213F8(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t i;
  char *v10;
  void **v11;
  unint64_t v12;
  int v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v4 = a1 + 4;
    if (a1 + 4 != a2)
    {
      v5 = 0;
      v6 = a1;
      while (1)
      {
        v7 = v6;
        v6 = v4;
        v8 = v7[4];
        if (v8 < *v7)
          goto LABEL_8;
        if (*v7 >= v8 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v7 + 5, v7 + 1))
          break;
LABEL_21:
        v4 = v6 + 4;
        v5 += 32;
        if (v6 + 4 == a2)
          return;
      }
      v8 = *v6;
LABEL_8:
      v15 = v8;
      v16 = *(_OWORD *)(v7 + 5);
      v17 = v7[7];
      v7[5] = 0;
      v7[6] = 0;
      v7[7] = 0;
      for (i = v5; ; i -= 32)
      {
        v10 = (char *)a1 + i;
        *(unint64_t *)((char *)a1 + i + 32) = *(unint64_t *)((char *)a1 + i);
        v11 = (void **)((char *)a1 + i + 40);
        if (*((char *)a1 + i + 63) < 0)
          operator delete(*v11);
        *(_OWORD *)v11 = *(_OWORD *)(v10 + 8);
        *(unint64_t *)((char *)a1 + i + 56) = *((_QWORD *)v10 + 3);
        v10[31] = 0;
        v10[8] = 0;
        if (!i)
        {
          *a1 = v15;
          goto LABEL_20;
        }
        v12 = *(unint64_t *)((char *)a1 + i - 32);
        if (v15 >= v12)
        {
          if (v12 < v15)
          {
            *(unint64_t *)((char *)a1 + i) = v15;
            goto LABEL_20;
          }
          if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v16, (unint64_t *)((char *)a1 + i - 24)))break;
        }
      }
      v13 = *((char *)a1 + i + 31);
      *(unint64_t *)((char *)a1 + i) = v15;
      if (v13 < 0)
        operator delete(*(void **)((char *)a1 + i + 8));
LABEL_20:
      v14 = (char *)a1 + i;
      *(_OWORD *)(v14 + 8) = v16;
      *((_QWORD *)v14 + 3) = v17;
      goto LABEL_21;
    }
  }
}

void sub_20BF21578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF21594(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t *v4;
  char *i;
  unint64_t *v6;
  unint64_t v7;
  char *j;
  void **v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;

  if (a1 != a2)
  {
    v3 = a1;
    v4 = a1 + 4;
    if (a1 + 4 != a2)
    {
      for (i = (char *)a1 + 63; ; i += 32)
      {
        v6 = v3;
        v3 = v4;
        v7 = v6[4];
        if (v7 < *v6)
          goto LABEL_8;
        if (*v6 >= v7 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v6 + 5, v6 + 1))
          break;
LABEL_19:
        v4 = v3 + 4;
        if (v3 + 4 == a2)
          return;
      }
      v7 = *v3;
LABEL_8:
      v12 = v7;
      v13 = *(_OWORD *)(v6 + 5);
      v14 = v6[7];
      v6[5] = 0;
      v6[6] = 0;
      v6[7] = 0;
      for (j = i; ; j -= 32)
      {
        *(_QWORD *)(j - 31) = *(_QWORD *)(j - 63);
        v9 = (void **)(j - 23);
        if (*j < 0)
          operator delete(*v9);
        *(_OWORD *)v9 = *(_OWORD *)(j - 55);
        *(_QWORD *)(j - 7) = *(_QWORD *)(j - 39);
        *(j - 32) = 0;
        *(j - 55) = 0;
        v10 = *(_QWORD *)(j - 95);
        if (v12 >= v10)
        {
          if (v10 < v12)
          {
            *(_QWORD *)(j - 63) = v12;
            goto LABEL_18;
          }
          if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v13, j - 87))
            break;
        }
      }
      v11 = *(j - 32);
      *(_QWORD *)(j - 63) = v12;
      if (v11 < 0)
        operator delete(*(void **)(j - 55));
LABEL_18:
      *(_OWORD *)(j - 55) = v13;
      *(_QWORD *)(j - 39) = v14;
      goto LABEL_19;
    }
  }
}

void sub_20BF216E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF21700(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v6 = *a2;
  if (*a2 < *a1
    || *a1 >= v6 && (v7 = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a2 + 1, a1 + 1), v6 = *a2, v7))
  {
    v8 = *a3;
    if (*a3 < v6)
    {
LABEL_5:
      v9 = *a1;
      *a1 = v8;
      *a3 = v9;
      v10 = a1[1];
      *(_QWORD *)&v32 = a1[2];
      *(_QWORD *)((char *)&v32 + 7) = *(unint64_t *)((char *)a1 + 23);
      v11 = *((_BYTE *)a1 + 31);
      a1[2] = 0;
      a1[3] = 0;
      a1[1] = 0;
      v12 = a3[3];
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a3 + 1);
      a1[3] = v12;
      *(unint64_t *)((char *)a3 + 23) = *(_QWORD *)((char *)&v32 + 7);
      a3[1] = v10;
      a3[2] = v32;
      *((_BYTE *)a3 + 31) = v11;
      return 1;
    }
    if (v6 >= v8)
    {
      if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3 + 1, a2 + 1))
      {
        v8 = *a3;
        goto LABEL_5;
      }
      v6 = *a2;
    }
    v23 = *a1;
    *a1 = v6;
    *a2 = v23;
    v24 = a2 + 1;
    v25 = a1[1];
    *(_QWORD *)&v35 = a1[2];
    *(_QWORD *)((char *)&v35 + 7) = *(unint64_t *)((char *)a1 + 23);
    LOBYTE(v23) = *((_BYTE *)a1 + 31);
    a1[2] = 0;
    a1[3] = 0;
    a1[1] = 0;
    v26 = a2[3];
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    a1[3] = v26;
    a2[1] = v25;
    a2[2] = v35;
    *(unint64_t *)((char *)a2 + 23) = *(_QWORD *)((char *)&v35 + 7);
    *((_BYTE *)a2 + 31) = v23;
    v27 = *a3;
    v28 = *a2;
    if (*a3 >= *a2)
    {
      if (v28 < v27 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3 + 1, a2 + 1))
        return 1;
      v28 = *a2;
      v27 = *a3;
    }
    *a2 = v27;
    *a3 = v28;
    v29 = a2[1];
    *(_QWORD *)&v36 = a2[2];
    *(_QWORD *)((char *)&v36 + 7) = *(unint64_t *)((char *)a2 + 23);
    v30 = *((_BYTE *)a2 + 31);
    a2[2] = 0;
    a2[3] = 0;
    *v24 = 0;
    v31 = a3[3];
    *(_OWORD *)v24 = *(_OWORD *)(a3 + 1);
    a2[3] = v31;
    *(unint64_t *)((char *)a3 + 23) = *(_QWORD *)((char *)&v36 + 7);
    a3[1] = v29;
    a3[2] = v36;
    *((_BYTE *)a3 + 31) = v30;
    return 2;
  }
  v14 = *a3;
  if (*a3 < v6)
  {
LABEL_15:
    *a2 = v14;
    *a3 = v6;
    v15 = a2[1];
    *(_QWORD *)&v33 = a2[2];
    *(_QWORD *)((char *)&v33 + 7) = *(unint64_t *)((char *)a2 + 23);
    v16 = *((_BYTE *)a2 + 31);
    a2[3] = 0;
    a2[2] = 0;
    a2[1] = 0;
    v17 = a3[3];
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
    a2[3] = v17;
    *(unint64_t *)((char *)a3 + 23) = *(_QWORD *)((char *)&v33 + 7);
    a3[1] = v15;
    a3[2] = v33;
    *((_BYTE *)a3 + 31) = v16;
    v18 = *a2;
    v19 = *a1;
    if (*a2 >= *a1)
    {
      if (v19 < v18 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a2 + 1, a1 + 1))
        return 1;
      v19 = *a1;
      v18 = *a2;
    }
    *a1 = v18;
    *a2 = v19;
    v20 = a1[1];
    *(_QWORD *)&v34 = a1[2];
    *(_QWORD *)((char *)&v34 + 7) = *(unint64_t *)((char *)a1 + 23);
    v21 = *((_BYTE *)a1 + 31);
    a1[2] = 0;
    a1[3] = 0;
    a1[1] = 0;
    v22 = a2[3];
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    a1[3] = v22;
    a2[1] = v20;
    *(unint64_t *)((char *)a2 + 23) = *(_QWORD *)((char *)&v34 + 7);
    a2[2] = v34;
    *((_BYTE *)a2 + 31) = v21;
    return 2;
  }
  if (v6 < v14)
    return 0;
  result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3 + 1, a2 + 1);
  if ((_DWORD)result)
  {
    v6 = *a2;
    v14 = *a3;
    goto LABEL_15;
  }
  return result;
}

unint64_t *sub_20BF21A04(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t *i;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  __int128 v24;
  int v25;
  __int128 v26;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[15];
  uint64_t v32;

  v2 = a2;
  v32 = *MEMORY[0x24BDAC8D0];
  v28 = *a1;
  v4 = *a1;
  v29 = *(_OWORD *)(a1 + 1);
  v30 = a1[3];
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v5 = *(_QWORD *)(a2 - 32);
  if (v4 >= v5)
  {
    if (v5 < v4 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, (_QWORD *)(a2 - 24)))
    {
      for (i = (unint64_t *)(a1 + 4);
            (unint64_t)i < v2
         && v28 >= *i
         && (*i < v28 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, i + 1));
      goto LABEL_16;
    }
    v4 = v28;
  }
  i = (unint64_t *)a1;
  while (1)
  {
    v8 = i[4];
    i += 4;
    v7 = v8;
    if (v4 < v8)
      break;
    if (v7 >= v4)
    {
      if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, i + 1))
        break;
      v4 = v28;
    }
  }
LABEL_16:
  if ((unint64_t)i < v2)
  {
    do
    {
      do
      {
        v10 = *(_QWORD *)(v2 - 32);
        v2 -= 32;
        v9 = v10;
      }
      while (v28 < v10);
    }
    while (v9 >= v28 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, (_QWORD *)(v2 + 8)));
  }
  while ((unint64_t)i < v2)
  {
    v11 = *i;
    *i = *(_QWORD *)v2;
    *(_QWORD *)v2 = v11;
    v12 = i[1];
    v13 = i[2];
    *(_QWORD *)&v31[7] = *(unint64_t *)((char *)i + 23);
    *(_QWORD *)v31 = v13;
    LOBYTE(v11) = *((_BYTE *)i + 31);
    i[2] = 0;
    i[3] = 0;
    i[1] = 0;
    v14 = *(_QWORD *)(v2 + 24);
    *(_OWORD *)(i + 1) = *(_OWORD *)(v2 + 8);
    i[3] = v14;
    v15 = *(_QWORD *)v31;
    *(_QWORD *)(v2 + 8) = v12;
    *(_QWORD *)(v2 + 16) = v15;
    *(_QWORD *)(v2 + 23) = *(_QWORD *)&v31[7];
    *(_BYTE *)(v2 + 31) = v11;
    v17 = i[4];
    i += 4;
    v16 = v17;
    v18 = v28;
    while (v18 >= v16)
    {
      if (v16 >= v18)
      {
        if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, i + 1))
          goto LABEL_27;
        v18 = v28;
      }
      v19 = i[4];
      i += 4;
      v16 = v19;
    }
    do
    {
      do
      {
LABEL_27:
        v21 = *(_QWORD *)(v2 - 32);
        v2 -= 32;
        v20 = v21;
      }
      while (v28 < v21);
    }
    while (v20 >= v28 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, (_QWORD *)(v2 + 8)));
  }
  if (i - 4 == (unint64_t *)a1)
  {
    v25 = *((char *)i - 1);
    *(i - 4) = v28;
    v23 = (uint64_t *)(i - 3);
    if (v25 < 0)
      operator delete((void *)*v23);
  }
  else
  {
    v22 = a1 + 1;
    *a1 = *(i - 4);
    if (*((char *)a1 + 31) < 0)
      operator delete((void *)*v22);
    v23 = (uint64_t *)(i - 3);
    v24 = *(_OWORD *)(i - 3);
    v22[2] = *(i - 1);
    *(_OWORD *)v22 = v24;
    *((_BYTE *)i - 1) = 0;
    *((_BYTE *)i - 24) = 0;
    *(i - 4) = v28;
  }
  v26 = v29;
  v23[2] = v30;
  *(_OWORD *)v23 = v26;
  return i;
}

void sub_20BF21C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF21CB8(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  __int128 v30;
  int v31;
  __int128 v32;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[15];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v34 = *a1;
  v5 = a1 + 1;
  v35 = *(_OWORD *)(a1 + 1);
  v36 = a1[3];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v6 = a1;
  while (1)
  {
    do
    {
      v8 = v6[4];
      v6 += 4;
      v7 = v8;
    }
    while (v8 < v4);
    if (v4 < v7 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v6 + 1, &v35))
      break;
    v4 = v34;
  }
  if (v6 - 4 == a1)
  {
LABEL_20:
    if ((unint64_t)v6 < a2)
    {
      do
      {
        v14 = *(_QWORD *)(a2 - 32);
        a2 -= 32;
        v13 = v14;
        if (v14 < v34)
          break;
        if (v34 < v13)
          goto LABEL_20;
        v15 = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a2 + 8), &v35);
        v16 = (unint64_t)v6 >= a2 || v15;
      }
      while ((v16 & 1) == 0);
    }
  }
  else
  {
    v10 = *(_QWORD *)(a2 - 32);
    a2 -= 32;
    v9 = v10;
    v11 = v34;
    while (v9 >= v11)
    {
      if (v11 >= v9)
      {
        if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a2 + 8), &v35))
          break;
        v11 = v34;
      }
      v12 = *(_QWORD *)(a2 - 32);
      a2 -= 32;
      v9 = v12;
    }
  }
  v17 = v6;
  if ((unint64_t)v6 < a2)
  {
    v18 = a2;
    do
    {
      v19 = *v17;
      *v17 = *(_QWORD *)v18;
      *(_QWORD *)v18 = v19;
      v20 = v17[1];
      v21 = v17[2];
      *(_QWORD *)&v37[7] = *(uint64_t *)((char *)v17 + 23);
      *(_QWORD *)v37 = v21;
      LOBYTE(v19) = *((_BYTE *)v17 + 31);
      v17[2] = 0;
      v17[3] = 0;
      v17[1] = 0;
      v22 = *(_QWORD *)(v18 + 24);
      *(_OWORD *)(v17 + 1) = *(_OWORD *)(v18 + 8);
      v17[3] = v22;
      v23 = *(_QWORD *)v37;
      *(_QWORD *)(v18 + 8) = v20;
      *(_QWORD *)(v18 + 16) = v23;
      *(_QWORD *)(v18 + 23) = *(_QWORD *)&v37[7];
      *(_BYTE *)(v18 + 31) = v19;
      while (1)
      {
        do
        {
          v25 = v17[4];
          v17 += 4;
          v24 = v25;
          v26 = v34;
        }
        while (v25 < v34);
        if (v34 < v24)
          break;
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v17 + 1, &v35))
          goto LABEL_27;
      }
      do
      {
LABEL_28:
        v28 = *(_QWORD *)(v18 - 32);
        v18 -= 32;
        v27 = v28;
        if (v28 < v26)
          goto LABEL_31;
      }
      while (v26 < v27);
      if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(v18 + 8), &v35))
      {
LABEL_27:
        v26 = v34;
        goto LABEL_28;
      }
LABEL_31:
      ;
    }
    while ((unint64_t)v17 < v18);
  }
  if (v17 - 4 == a1)
  {
    v31 = *((char *)v17 - 1);
    *(v17 - 4) = v34;
    v29 = v17 - 3;
    if (v31 < 0)
      operator delete((void *)*v29);
  }
  else
  {
    *a1 = *(v17 - 4);
    if (*((char *)a1 + 31) < 0)
      operator delete((void *)*v5);
    v29 = v17 - 3;
    v30 = *(_OWORD *)(v17 - 3);
    v5[2] = *(v17 - 1);
    *(_OWORD *)v5 = v30;
    *((_BYTE *)v17 - 1) = 0;
    *((_BYTE *)v17 - 24) = 0;
    *(v17 - 4) = v34;
  }
  v32 = v35;
  v29[2] = v36;
  *(_OWORD *)v29 = v32;
  return v17 - 4;
}

void sub_20BF21F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20BF21F64(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t i;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = ((uint64_t)a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 4);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
        goto LABEL_6;
      if (v7 >= v6)
      {
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a2 - 3, (_QWORD *)(a1 + 8)))
          return 1;
        v7 = *(_QWORD *)a1;
        v6 = *(a2 - 4);
LABEL_6:
        *(_QWORD *)a1 = v6;
        *(a2 - 4) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        v22[0] = *(_QWORD *)(a1 + 16);
        *(_QWORD *)((char *)v22 + 7) = *(_QWORD *)(a1 + 23);
        v9 = *(_BYTE *)(a1 + 31);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v10 = *(a2 - 1);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(a1 + 24) = v10;
        *(unint64_t *)((char *)a2 - 9) = *(_QWORD *)((char *)v22 + 7);
        *(a2 - 3) = v8;
        *(a2 - 2) = v22[0];
        *((_BYTE *)a2 - 1) = v9;
        return 1;
      }
      return result;
    case 3:
      sub_20BF21700((unint64_t *)a1, (unint64_t *)(a1 + 32), a2 - 4);
      return 1;
    case 4:
      sub_20BF22274(a1, a1 + 32, a1 + 64, (uint64_t)(a2 - 4));
      return 1;
    case 5:
      sub_20BF2248C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 4);
      return 1;
    default:
      v11 = (unint64_t *)(a1 + 64);
      sub_20BF21700((unint64_t *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a1 + 64));
      v12 = (unint64_t *)(a1 + 96);
      if ((unint64_t *)(a1 + 96) == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *v12;
    if (*v12 < *v11)
      break;
    if (*v11 >= v15 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v12 + 1, v11 + 1))
    {
      v15 = *v12;
      break;
    }
LABEL_26:
    v11 = v12;
    v13 += 32;
    v12 += 4;
    if (v12 == a2)
      return 1;
  }
  v22[0] = v15;
  *(_OWORD *)&v22[1] = *(_OWORD *)(v12 + 1);
  v23 = v12[3];
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = 0;
  for (i = v13; ; i -= 32)
  {
    v17 = a1 + i;
    *(_QWORD *)(a1 + i + 96) = *(_QWORD *)(a1 + i + 64);
    v18 = (void **)(a1 + i + 104);
    if (*(char *)(a1 + i + 127) < 0)
      operator delete(*v18);
    *(_OWORD *)v18 = *(_OWORD *)(v17 + 72);
    *(_QWORD *)(a1 + i + 120) = *(_QWORD *)(v17 + 88);
    *(_BYTE *)(v17 + 95) = 0;
    *(_BYTE *)(v17 + 72) = 0;
    if (i == -64)
    {
      *(_QWORD *)a1 = v22[0];
      goto LABEL_25;
    }
    v19 = *(_QWORD *)(a1 + i + 32);
    if (v22[0] >= v19)
    {
      if (v19 < v22[0])
      {
        *(_QWORD *)(a1 + i + 64) = v22[0];
        goto LABEL_25;
      }
      if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v22[1], (_QWORD *)(a1 + i + 40)))
        break;
    }
  }
  v20 = *(char *)(a1 + i + 95);
  *(_QWORD *)(a1 + i + 64) = v22[0];
  if (v20 < 0)
    operator delete(*(void **)(a1 + i + 72));
LABEL_25:
  v21 = a1 + i;
  *(_OWORD *)(v21 + 72) = *(_OWORD *)&v22[1];
  *(_QWORD *)(v21 + 88) = v23;
  if (++v14 != 8)
    goto LABEL_26;
  return v12 + 4 == a2;
}

void sub_20BF22250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF22274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  result = sub_20BF21700((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v10 < v9)
      return result;
    result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a4 + 8), (_QWORD *)(a3 + 8));
    if (!(_DWORD)result)
      return result;
    v10 = *(_QWORD *)a3;
    v9 = *(_QWORD *)a4;
  }
  *(_QWORD *)a3 = v9;
  *(_QWORD *)a4 = v10;
  v11 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)((char *)&v24 + 7) = *(_QWORD *)(a3 + 23);
  v12 = *(_BYTE *)(a3 + 31);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v13 = *(_QWORD *)(a4 + 24);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)&v24 + 7);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 16) = v24;
  *(_BYTE *)(a4 + 31) = v12;
  v14 = *(_QWORD *)a3;
  v15 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v15 < v14)
      return result;
    result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a3 + 8), (_QWORD *)(a2 + 8));
    if (!(_DWORD)result)
      return result;
    v15 = *(_QWORD *)a2;
    v14 = *(_QWORD *)a3;
  }
  *(_QWORD *)a2 = v14;
  *(_QWORD *)a3 = v15;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v25 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)((char *)&v25 + 7) = *(_QWORD *)(a2 + 23);
  v17 = *(_BYTE *)(a2 + 31);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v18 = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a3 + 8) = v16;
  *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 31) = v17;
  v19 = *(_QWORD *)a2;
  v20 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
LABEL_7:
    *(_QWORD *)a1 = v19;
    *(_QWORD *)a2 = v20;
    v21 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)(a1 + 23);
    v22 = *(_BYTE *)(a1 + 31);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v23 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v23;
    *(_QWORD *)(a2 + 8) = v21;
    *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v26 + 7);
    *(_QWORD *)(a2 + 16) = v26;
    *(_BYTE *)(a2 + 31) = v22;
    return result;
  }
  if (v20 >= v19)
  {
    result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a2 + 8), (_QWORD *)(a1 + 8));
    if ((_DWORD)result)
    {
      v20 = *(_QWORD *)a1;
      v19 = *(_QWORD *)a2;
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_20BF2248C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  result = sub_20BF22274(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_QWORD *)a4;
  if (*a5 >= *(_QWORD *)a4)
  {
    if (v12 < v11)
      return result;
    result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a5 + 1, (_QWORD *)(a4 + 8));
    if (!(_DWORD)result)
      return result;
    v12 = *(_QWORD *)a4;
    v11 = *a5;
  }
  *(_QWORD *)a4 = v11;
  *a5 = v12;
  v13 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&v31 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)((char *)&v31 + 7) = *(_QWORD *)(a4 + 23);
  v14 = *(_BYTE *)(a4 + 31);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v15 = a5[3];
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 1);
  *(_QWORD *)(a4 + 24) = v15;
  *(unint64_t *)((char *)a5 + 23) = *(_QWORD *)((char *)&v31 + 7);
  a5[1] = v13;
  a5[2] = v31;
  *((_BYTE *)a5 + 31) = v14;
  v16 = *(_QWORD *)a4;
  v17 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v17 < v16)
      return result;
    result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a4 + 8), (_QWORD *)(a3 + 8));
    if (!(_DWORD)result)
      return result;
    v17 = *(_QWORD *)a3;
    v16 = *(_QWORD *)a4;
  }
  *(_QWORD *)a3 = v16;
  *(_QWORD *)a4 = v17;
  v18 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v32 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)(a3 + 23);
  v19 = *(_BYTE *)(a3 + 31);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v20 = *(_QWORD *)(a4 + 24);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a4 + 8) = v18;
  *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)&v32 + 7);
  *(_QWORD *)(a4 + 16) = v32;
  *(_BYTE *)(a4 + 31) = v19;
  v21 = *(_QWORD *)a3;
  v22 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v22 < v21)
      return result;
    result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a3 + 8), (_QWORD *)(a2 + 8));
    if (!(_DWORD)result)
      return result;
    v22 = *(_QWORD *)a2;
    v21 = *(_QWORD *)a3;
  }
  *(_QWORD *)a2 = v21;
  *(_QWORD *)a3 = v22;
  v23 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v33 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)((char *)&v33 + 7) = *(_QWORD *)(a2 + 23);
  v24 = *(_BYTE *)(a2 + 31);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v25 = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a3 + 8) = v23;
  *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v33 + 7);
  *(_QWORD *)(a3 + 16) = v33;
  *(_BYTE *)(a3 + 31) = v24;
  v26 = *(_QWORD *)a2;
  v27 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
LABEL_8:
    *(_QWORD *)a1 = v26;
    *(_QWORD *)a2 = v27;
    v28 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v34 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)((char *)&v34 + 7) = *(_QWORD *)(a1 + 23);
    v29 = *(_BYTE *)(a1 + 31);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v30 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v30;
    *(_QWORD *)(a2 + 8) = v28;
    *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v34 + 7);
    *(_QWORD *)(a2 + 16) = v34;
    *(_BYTE *)(a2 + 31) = v29;
    return result;
  }
  if (v27 >= v26)
  {
    result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a2 + 8), (_QWORD *)(a1 + 8));
    if ((_DWORD)result)
    {
      v27 = *(_QWORD *)a1;
      v26 = *(_QWORD *)a2;
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_20BF22738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v23;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (unint64_t *)(a1 + 32 * v10);
      do
      {
        sub_20BF228F0(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      while (1)
      {
        v15 = *(_QWORD *)v14;
        v16 = *(_QWORD *)a1;
        if (*(_QWORD *)v14 >= *(_QWORD *)a1)
        {
          if (v16 < v15
            || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(v14 + 8), (_QWORD *)(a1 + 8)))
          {
            goto LABEL_12;
          }
          v15 = *(_QWORD *)v14;
          v16 = *(_QWORD *)a1;
        }
        *(_QWORD *)v14 = v16;
        *(_QWORD *)a1 = v15;
        v17 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)&v23 = *(_QWORD *)(v14 + 16);
        *(_QWORD *)((char *)&v23 + 7) = *(_QWORD *)(v14 + 23);
        v18 = *(_BYTE *)(v14 + 31);
        *(_QWORD *)(v14 + 16) = 0;
        *(_QWORD *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 8) = 0;
        v19 = *(_QWORD *)(a1 + 24);
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(a1 + 8);
        *(_QWORD *)(v14 + 24) = v19;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v23 + 7);
        *(_QWORD *)(a1 + 16) = v23;
        *(_BYTE *)(a1 + 31) = v18;
        sub_20BF228F0(a1, a4, v9, (unint64_t *)a1);
LABEL_12:
        v14 += 32;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 33)
    {
      v20 = (unint64_t)v8 >> 5;
      do
      {
        sub_20BF22B18(a1, v6, a4, v20);
        v6 -= 32;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_20BF228F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t *v5;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  __n128 result;
  unint64_t v15;
  unint64_t *v16;
  void **v17;
  void **v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      v9 = ((uint64_t)a4 - a1) >> 4;
      v10 = v9 + 1;
      v11 = (unint64_t *)(a1 + 32 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3)
      {
        v13 = v11[4];
        if (*v11 < v13
          || v13 >= *v11
          && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a1 + 32 * v10 + 8), v11 + 5))
        {
          v11 += 4;
          v10 = v12;
        }
      }
      v15 = *v5;
      if (*v11 >= *v5)
      {
        if (v15 >= *v11)
        {
          if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v11 + 1, v5 + 1))
            return result;
          v15 = *v5;
        }
        v24 = v15;
        v25 = *(__n128 *)(v5 + 1);
        v26 = v5[3];
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = 0;
        while (1)
        {
          v16 = v11;
          *v5 = *v11;
          v17 = (void **)(v5 + 1);
          if (*((char *)v5 + 31) < 0)
            operator delete(*v17);
          v18 = (void **)(v16 + 1);
          v19 = *(_OWORD *)(v16 + 1);
          v5[3] = v16[3];
          *(_OWORD *)v17 = v19;
          *((_BYTE *)v16 + 31) = 0;
          *((_BYTE *)v16 + 8) = 0;
          if (v7 < v10)
          {
            *v16 = v24;
            goto LABEL_28;
          }
          v20 = (2 * v10) | 1;
          v11 = (unint64_t *)(a1 + 32 * v20);
          if (2 * v10 + 2 < a3)
          {
            v21 = v11[4];
            if (*v11 < v21
              || v21 >= *v11
              && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a1 + 32 * v20 + 8), v11 + 5))
            {
              v11 += 4;
              v20 = 2 * v10 + 2;
            }
          }
          v22 = v24;
          if (*v11 < v24)
            break;
          v5 = v16;
          v10 = v20;
          if (v24 >= *v11)
          {
            v5 = v16;
            v10 = v20;
            if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v11 + 1, &v25))
            {
              v22 = v24;
              break;
            }
          }
        }
        v23 = *((char *)v16 + 31);
        *v16 = v22;
        if (v23 < 0)
          operator delete(*v18);
LABEL_28:
        result = v25;
        v16[3] = v26;
        *(__n128 *)v18 = result;
      }
    }
  }
  return result;
}

void sub_20BF22AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF22B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  __int128 v13;
  _BYTE v14[15];

  if (a4 >= 2)
  {
    v8 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v14[7] = *(_QWORD *)(a1 + 23);
    v9 = *(_BYTE *)(a1 + 31);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v10 = sub_20BF22C6C(a1, a3, a4);
    v11 = v10;
    if (v10 == a2 - 32)
    {
      *(_QWORD *)v10 = v8;
      if (*(char *)(v10 + 31) < 0)
        operator delete(*(void **)(v10 + 8));
      *(_QWORD *)(v11 + 8) = v7;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)v14;
      *(_QWORD *)(v11 + 23) = *(_QWORD *)&v14[7];
      *(_BYTE *)(v11 + 31) = v9;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)(a2 - 32);
      v12 = (void **)(v10 + 8);
      if (*(char *)(v10 + 31) < 0)
        operator delete(*v12);
      v13 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)v12 = v13;
      *(_QWORD *)(a2 - 32) = v8;
      *(_QWORD *)(a2 - 24) = v7;
      *(_QWORD *)(a2 - 16) = *(_QWORD *)v14;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)&v14[7];
      *(_BYTE *)(a2 - 1) = v9;
      sub_20BF22D5C(a1, v11 + 32, a3, (v11 + 32 - a1) >> 5);
    }
  }
}

void sub_20BF22C54(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF22C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  __int128 v14;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = v5 + 1;
    v9 = a1 + 32 * (v5 + 1);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v12 = *(_QWORD *)(v9 + 32);
      if (*(_QWORD *)v9 < v12
        || v12 >= *(_QWORD *)v9
        && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a1 + 32 * v8 + 8), (_QWORD *)(v9 + 40)))
      {
        v9 += 32;
        v5 = v11;
      }
    }
    *(_QWORD *)a1 = *(_QWORD *)v9;
    v13 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v13);
    v14 = *(_OWORD *)(v9 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 + 24);
    *(_OWORD *)v13 = v14;
    *(_BYTE *)(v9 + 31) = 0;
    *(_BYTE *)(v9 + 8) = 0;
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

double sub_20BF22D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  double result;
  unint64_t *v12;
  void **v13;
  void **v14;
  __int128 v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (unint64_t *)(a1 + 32 * (v4 >> 1));
    v10 = (unint64_t *)(a2 - 32);
    v9 = *(_QWORD *)(a2 - 32);
    if (*v8 >= v9)
    {
      if (v9 < *v8
        || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a1 + 32 * v7 + 8), (_QWORD *)(a2 - 24)))
      {
        return result;
      }
      v9 = *v10;
    }
    v18 = v9;
    v19 = *(_OWORD *)(a2 - 24);
    v20 = *(_QWORD *)(a2 - 8);
    *(_QWORD *)(a2 - 24) = 0;
    *(_QWORD *)(a2 - 16) = 0;
    *(_QWORD *)(a2 - 8) = 0;
    while (1)
    {
      v12 = v8;
      *v10 = *v8;
      v13 = (void **)(v10 + 1);
      if (*((char *)v10 + 31) < 0)
        operator delete(*v13);
      v14 = (void **)(v12 + 1);
      v15 = *(_OWORD *)(v12 + 1);
      v10[3] = v12[3];
      *(_OWORD *)v13 = v15;
      *((_BYTE *)v12 + 31) = 0;
      *((_BYTE *)v12 + 8) = 0;
      if (!v7)
      {
        v16 = v18;
LABEL_16:
        *v12 = v16;
        goto LABEL_17;
      }
      v7 = (v7 - 1) >> 1;
      v8 = (unint64_t *)(a1 + 32 * v7);
      v16 = v18;
      v10 = v12;
      if (*v8 >= v18)
      {
        if (v18 < *v8)
          goto LABEL_16;
        v10 = v12;
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(a1 + 32 * v7 + 8), &v19))
          break;
      }
    }
    v17 = *((char *)v12 + 31);
    *v12 = v18;
    if (v17 < 0)
      operator delete(*v14);
LABEL_17:
    result = *(double *)&v19;
    *(_OWORD *)v14 = v19;
    v12[3] = v20;
  }
  return result;
}

void sub_20BF22EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF22ED4(uint64_t **a1, _QWORD *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BF22F7C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BF2300C((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BF230A0((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20BF22F7C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_BYTE *sub_20BF2300C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BF23088(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF230A0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BF230A0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF20EF8((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20BF230E4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_20BF23168((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BF23168(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  void **v5;

  v5 = (void **)(a2 + 64);
  sub_20BF20714(&v5);
  v5 = (void **)(a2 + 40);
  sub_20BF206A4(&v5);
  if ((*(_QWORD *)a2 & 7) != 0)
  {
    v3 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
}

void sub_20BF231CC(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_20BF23168((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20BF23238(uint64_t *a1, uint64_t *a2, int *a3, int *a4, int *a5, char *a6, char *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20BDDF694();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v9)
    v9 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v16 = 0x2E8BA2E8BA2E8BALL;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)sub_20BF23478((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = &v17[88 * v8];
  v23 = &v17[88 * v16];
  sub_20BF23398((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  v22 = v21 + 88;
  sub_20BF23404(a1, &v20);
  v18 = a1[1];
  sub_20BF23620(&v20);
  return v18;
}

void sub_20BF23384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF23620((void **)va);
  _Unwind_Resume(a1);
}

double sub_20BF23398(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, int *a5, int *a6, char *a7, char *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  double result;

  v8 = *a4;
  v9 = *a5;
  v10 = *a6;
  v11 = *a7;
  v12 = *a8;
  v13 = *a3;
  *(_QWORD *)a2 = *a3;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 33) = v12;
  result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  return result;
}

uint64_t sub_20BF23404(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF234C0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BF23478(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_20BDDF5B4();
  return operator new(88 * a2);
}

uint64_t sub_20BF234C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 88);
      a3 -= 88;
      *(_QWORD *)(v7 - 88) = v8;
      *(_QWORD *)a3 = 0;
      v9 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(v7 - 70) = *(_OWORD *)(a3 + 18);
      *(_OWORD *)(v7 - 80) = v9;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 64);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 80);
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 80) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 88;
      *((_QWORD *)&v15 + 1) -= 88;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20BF2359C((uint64_t)v12);
  return v10;
}

uint64_t sub_20BF2359C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF235D0((uint64_t *)a1);
  return a1;
}

void sub_20BF235D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20BF23168(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **sub_20BF23620(void **a1)
{
  sub_20BF23650(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BF23650(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    sub_20BF23168(v4, i - 88);
  }
}

_QWORD *sub_20BF23694(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a2, v5 + 4))
    return v2;
  return v5;
}

uint64_t sub_20BF2370C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF23780((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF23780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v10 = 0;
  v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    v12 = (uint64_t *)(v11 + v10);
    *v12 = *(_QWORD *)(a3 + v10 - 8);
    v10 -= 8;
    sub_20BF1DD04(v12);
  }
  return a6;
}

uint64_t sub_20BF23814(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BF23860(uint64_t *a1, uint64_t *a2, int *a3, int *a4, uint64_t *a5, char *a6, char *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20BDDF694();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v9)
    v9 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v16 = 0x2E8BA2E8BA2E8BALL;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)sub_20BF23478((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = &v17[88 * v8];
  v23 = &v17[88 * v16];
  sub_20BF239C0((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  v22 = v21 + 88;
  sub_20BF23404(a1, &v20);
  v18 = a1[1];
  sub_20BF23620(&v20);
  return v18;
}

void sub_20BF239AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF23620((void **)va);
  _Unwind_Resume(a1);
}

double sub_20BF239C0(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, int *a5, uint64_t *a6, char *a7, char *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  double result;

  v8 = *a4;
  v9 = *a5;
  v10 = *a6;
  v11 = *a7;
  v12 = *a8;
  v13 = *a3;
  *(_QWORD *)a2 = *a3;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 33) = v12;
  result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  return result;
}

uint64_t sub_20BF23A2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)sub_20BF23478(v7, v9);
  v11 = &v10[88 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[88 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v13 = *(_OWORD *)(a2 + 18);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + 18) = v13;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v16[2] = v11 + 88;
  sub_20BF23404(a1, v16);
  v14 = a1[1];
  sub_20BF23620(v16);
  return v14;
}

void sub_20BF23B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF23620((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF23B88(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF23DDC(a1, v7, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF23DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10)
    sub_20BF23E64((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF23DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BF23E64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  if (*(_BYTE *)(a1 + 8))
  {
    v6 = (void **)(a2 + 24);
    sub_20BF20E24(&v6);
    v3 = *(_QWORD *)(a2 + 16);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

uint64_t sub_20BF23ED0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF23F44((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF23F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  sub_20BF23FE4((uint64_t)v13);
  return v11;
}

uint64_t sub_20BF23FE4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF24018(a1);
  return a1;
}

void sub_20BF24018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 32;
  }
}

uint64_t sub_20BF2405C(uint64_t a1)
{
  sub_20BF24090(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BF24090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_20BF240E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE6D0B4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[48 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BF241EC((uint64_t)(v11 + 16), a2 + 16);
  v14[2] = v11 + 48;
  sub_20BF242FC(a1, v14);
  v12 = a1[1];
  sub_20BF244AC((uint64_t)v14);
  return v12;
}

void sub_20BF241D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF244AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF241EC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_20BF24220(a1, a2);
  return a1;
}

uint64_t sub_20BF24220(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C51C6D8[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C51C798[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 sub_20BF242B0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_20BF242CC(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void sub_20BF242D8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_20BF242E4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

double sub_20BF242F0(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

uint64_t sub_20BF242FC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF24370((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF24370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_OWORD *)(v9 - 48);
      v9 -= 48;
      *(_OWORD *)(v7 - 48) = v10;
      *(_QWORD *)(v9 + 8) = 0;
      sub_20BF241EC(v7 - 32, v9 + 16);
      v7 = *((_QWORD *)&v16 + 1) - 48;
      *((_QWORD *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20BF2441C((uint64_t)v13);
  return v11;
}

uint64_t sub_20BF2441C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF24450(a1);
  return a1;
}

uint64_t sub_20BF24450(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    result = sub_20BF207C0(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    v1 += 48;
  }
  return result;
}

uint64_t sub_20BF244AC(uint64_t a1)
{
  sub_20BF244E0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BF244E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 48;
      result = sub_20BF207C0(v2 - 32);
      v5 = *(_QWORD *)(v2 - 40);
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_20BF24550(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  _BYTE v15[32];

  v14 = *a1;
  *((_QWORD *)a1 + 1) = 0;
  v4 = (uint64_t)(a1 + 1);
  sub_20BF241EC((uint64_t)v15, (uint64_t)(a1 + 1));
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if ((__int128 *)a2 != a1)
  {
    v5 = *((_QWORD *)a1 + 1);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
  }
  sub_20BF2466C(v4, a2 + 16);
  *(_QWORD *)a2 = v14;
  if (&v14 != (__int128 *)a2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    *(_QWORD *)(a2 + 8) = *((_QWORD *)&v14 + 1);
    *((_QWORD *)&v14 + 1) = 0;
  }
  sub_20BF2466C(a2 + 16, (uint64_t)v15);
  result = sub_20BF207C0((uint64_t)v15);
  if ((BYTE8(v14) & 7) != 0)
  {
    v12 = (unsigned int *)(*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return result;
}

uint64_t sub_20BF2466C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C51C6D8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C51C7C8[v4])(&v5, result, a2);
}

uint64_t sub_20BF246F8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24))
    return sub_20BF247A8(result);
  return result;
}

void sub_20BF24710(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_20BF247FC(*a1, a2, a3);
}

uint64_t sub_20BF24718(uint64_t *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 2)
    return sub_20BF248DC(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_20BF2473C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 3)
    return sub_20BF24940(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_20BF24760(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 4)
    return sub_20BF249A4(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_20BF24784(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 5)
    return sub_20BF24A08(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_20BF247A8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C51C6D8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_20BF247FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;

  if (*(_DWORD *)(a1 + 24) == 1)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v5 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = v5;
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    sub_20BF24860(a1, (__int128 *)a3);
  }
}

uint64_t sub_20BF24860(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C51C6D8[v4])(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t sub_20BF248DC(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C51C6D8[v4])(&v6, a1);
  *(_BYTE *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

uint64_t sub_20BF24940(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C51C6D8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 3;
  return a1;
}

uint64_t sub_20BF249A4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C51C6D8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 4;
  return a1;
}

uint64_t sub_20BF24A08(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C51C6D8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

uint64_t sub_20BF24A6C(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20BF24AE0(a1, i + 2, i + 2);
  return a1;
}

void sub_20BF24AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF20CC0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF24AE0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20BF24D44(a1, v6, a3, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BF24EC0((uint64_t)v21, 0);
  return v10;
}

void sub_20BF24D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF24EC0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF24D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20BF24DB8((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BF24DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF24EC0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF24DB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20BF24E50((char *)(a1 + 8), (__int128 *)a2[1], (__int128 *)a2[2], (a2[2] - a2[1]) >> 4);
  return a1;
}

char *sub_20BF24E50(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20BF24EA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BF24EC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF20D34(v2 + 2);
    operator delete(v2);
  }
}

uint64_t sub_20BF24F04(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20BF24F78(a1, i + 2, i + 2);
  return a1;
}

void sub_20BF24F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF20D80(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF24F78(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF251CC(a1, v6, a3, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF251A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10)
    sub_20BF23E64((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF251CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20BF25254(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BF25238(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BF23E64(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF25254(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_20BF252EC(a1 + 1, a2[1], a2[2], (a2[2] - a2[1]) >> 5);
  return a1;
}

_QWORD *sub_20BF252EC(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BF25370(result, a4);
    result = sub_20BF253B0((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BF25350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BF20E24(&a9);
  _Unwind_Resume(a1);
}

char *sub_20BF25370(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_20BDDF694();
  result = (char *)sub_20BED2F10((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_QWORD *sub_20BF253B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  __int128 *v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  _QWORD *v13;
  _QWORD *v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *v4 = *((_QWORD *)v6 - 1);
      v8 = v4 + 1;
      if (*((char *)v6 + 23) < 0)
      {
        sub_20BDDBFAC(v8, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v9 = *v6;
        v4[3] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v8 = v9;
      }
      v4 += 4;
      v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  v12 = 1;
  sub_20BF2547C((uint64_t)v11);
  return v4;
}

void sub_20BF25468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF2547C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF2547C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF254B0(a1);
  return a1;
}

void sub_20BF254B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 32;
  }
}

void pxrInternal__aapl__pxrReserved__::_TraceEventFromJSON(unint64_t **a1, uint64_t a2)
{
  unint64_t JsObject;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  double v9;
  char v10;
  char v11;
  void **v12;
  uint64_t v14;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *v19;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  char v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  BOOL Bool;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v45;
  unsigned int v46;
  uint64_t v48;
  char v49;
  char v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  char v55;
  unsigned int *v56;
  unsigned int v57;
  _QWORD *v58;
  double Real;
  unsigned int *v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t UInt64;
  unsigned int *v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t Int64;
  unsigned int *v68;
  unsigned int v69;
  _QWORD *v70;
  unint64_t String;
  char *v72;
  void *v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t *v76[2];
  char v77;
  uint64_t v78[2];
  char v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  __int128 __p;
  uint64_t v88;
  double v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)a1))
  {
    JsObject = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(a1);
    sub_20BDDC0E4(&__p, "key");
    v5 = sub_20BF261F4(JsObject, (uint64_t)&__p);
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "category");
    v85 = sub_20BF26310(JsObject, (uint64_t)&__p);
    v86 = v6;
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "type");
    v7 = (unsigned int *)sub_20BF261F4(JsObject, (uint64_t)&__p);
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "ts");
    *(double *)&v8 = COERCE_DOUBLE(sub_20BF26444(JsObject, (uint64_t)&__p));
    v9 = *(double *)&v8;
    v11 = v10;
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    LOBYTE(v83) = 0;
    v84 = 0;
    if (v11)
    {
      v83 = pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks(v8, v9 / 1000000.0);
      v84 = 1;
    }
    if (v5 && (_BYTE)v86 && v7)
    {
      v12 = (void **)(a2 + 128);
      if ((*((char *)v7 + 23) & 0x80000000) == 0)
      {
        switch(*((_BYTE *)v7 + 23))
        {
          case 3:
            if (*(_WORD *)v7 == 28229 && *((_BYTE *)v7 + 2) == 100)
              goto LABEL_28;
            return;
          case 4:
            if (*v7 == 1635017028)
              goto LABEL_84;
            goto LABEL_63;
          case 5:
            if (*v7 == 1768383810 && *((_BYTE *)v7 + 4) == 110)
              goto LABEL_56;
            return;
          case 8:
            v19 = *(uint64_t **)v7;
            goto LABEL_73;
          case 0xC:
            if (*(_QWORD *)v7 == 0x447265746E756F43 && v7[2] == 1635019877)
              goto LABEL_112;
            if (*(_QWORD *)v7 != 0x567265746E756F43 || v7[2] != 1702194273)
              return;
            goto LABEL_104;
          default:
            return;
        }
      }
      v14 = *((_QWORD *)v7 + 1);
      switch(v14)
      {
        case 3:
          if (**(_WORD **)v7 == 28229 && *(_BYTE *)(*(_QWORD *)v7 + 2) == 100)
          {
LABEL_28:
            if (v11)
            {
              LODWORD(v76[0]) = 0;
              sub_20BF2848C(&__p);
              v78[0] = (uint64_t)(sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)&__p, (uint64_t)&__p) + 2);
              sub_20BF26690((void **)(a2 + 128), (uint64_t)v76, v78, (uint64_t *)&v83, &v85);
              if ((LOBYTE(v89) & 7) != 0)
              {
                v16 = (unsigned int *)(*(_QWORD *)&v89 & 0xFFFFFFFFFFFFFFF8);
                do
                  v17 = __ldxr(v16);
                while (__stlxr(v17 - 2, v16));
              }
            }
          }
          return;
        case 4:
          v7 = *(unsigned int **)v7;
          if (*v7 != 1635017028)
          {
            if (v14 == 4)
            {
LABEL_63:
              v25 = bswap32(*v7);
              v26 = v25 >= 0x4D61726B;
              v27 = v25 > 0x4D61726B;
              v28 = !v26;
              if (v27 == v28)
              {
                if (v11)
                {
                  LODWORD(v76[0]) = 0;
                  sub_20BF2848C(&__p);
                  v78[0] = (uint64_t)(sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)&__p, (uint64_t)&__p) + 2);
                  sub_20BF267B0((void **)(a2 + 128), (uint64_t)v76, v78, (uint64_t *)&v83, &v85);
                  if ((LOBYTE(v89) & 7) != 0)
                  {
                    v29 = (unsigned int *)(*(_QWORD *)&v89 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v30 = __ldxr(v29);
                    while (__stlxr(v30 - 2, v29));
                  }
                }
              }
            }
            return;
          }
LABEL_84:
          if (!v11)
            return;
          sub_20BDDC0E4(&__p, "data");
          LOBYTE(v78[0]) = 0;
          v79 = 0;
          pxrInternal__aapl__pxrReserved__::JsFindValue(JsObject, (uint64_t)&__p, (uint64_t)v78, (uint64_t)v76);
          if (v79)
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v78);
          if (SHIBYTE(v88) < 0)
            operator delete((void *)__p);
          if (!v77)
            return;
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)v76))
          {
            sub_20BF2848C(v78);
            v39 = sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)v78, (uint64_t)v78);
            Bool = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)v76);
            *(_QWORD *)&__p = v39 + 2;
            DWORD2(__p) = v85;
            WORD6(__p) = 1537;
            v88 = mach_absolute_time();
            LOBYTE(v89) = Bool;
            if ((v80 & 7) != 0)
            {
              v41 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
              do
                v42 = __ldxr(v41);
              while (__stlxr(v42 - 2, v41));
            }
          }
          else if (pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)v76))
          {
            sub_20BF2848C(v78);
            v58 = sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)v78, (uint64_t)v78);
            Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal(v76);
            *(_QWORD *)&__p = v58 + 2;
            DWORD2(__p) = v85;
            WORD6(__p) = 1540;
            v88 = mach_absolute_time();
            v89 = Real;
            if ((v80 & 7) != 0)
            {
              v60 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
              do
                v61 = __ldxr(v60);
              while (__stlxr(v61 - 2, v60));
            }
          }
          else if (pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64((pxrInternal__aapl__pxrReserved__::JsValue *)v76))
          {
            sub_20BF2848C(v78);
            v62 = sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)v78, (uint64_t)v78);
            UInt64 = pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(v76);
            *(_QWORD *)&__p = v62 + 2;
            DWORD2(__p) = v85;
            WORD6(__p) = 1539;
            v88 = mach_absolute_time();
            v89 = *(double *)&UInt64;
            if ((v80 & 7) != 0)
            {
              v64 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
              do
                v65 = __ldxr(v64);
              while (__stlxr(v65 - 2, v64));
            }
          }
          else if (pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)v76))
          {
            sub_20BF2848C(v78);
            v66 = sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)v78, (uint64_t)v78);
            Int64 = pxrInternal__aapl__pxrReserved__::JsValue::GetInt64(v76);
            *(_QWORD *)&__p = v66 + 2;
            DWORD2(__p) = v85;
            WORD6(__p) = 1538;
            v88 = mach_absolute_time();
            v89 = *(double *)&Int64;
            if ((v80 & 7) != 0)
            {
              v68 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
              do
                v69 = __ldxr(v68);
              while (__stlxr(v69 - 2, v68));
            }
          }
          else
          {
            if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)v76))
              goto LABEL_143;
            sub_20BF2848C(v78);
            v70 = sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)v78, (uint64_t)v78);
            String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)v76);
            if (*(char *)(String + 23) >= 0)
              v72 = (char *)String;
            else
              v72 = *(char **)String;
            v73 = sub_20BF29500((pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator *)(a2 + 56), v72);
            *(_QWORD *)&__p = v70 + 2;
            DWORD2(__p) = v85;
            WORD6(__p) = 1792;
            v88 = mach_absolute_time();
            v89 = *(double *)&v73;
            if ((v80 & 7) != 0)
            {
              v74 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
              do
                v75 = __ldxr(v74);
              while (__stlxr(v75 - 2, v74));
            }
          }
          v88 = v83;
          sub_20BF269FC(v12, &__p);
LABEL_143:
          if (v77)
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v76);
          return;
        case 5:
          if (**(_DWORD **)v7 == 1768383810 && *(_BYTE *)(*(_QWORD *)v7 + 4) == 110)
          {
LABEL_56:
            if (v11)
            {
              LODWORD(v76[0]) = 0;
              sub_20BF2848C(&__p);
              v78[0] = (uint64_t)(sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)&__p, (uint64_t)&__p) + 2);
              sub_20BF26578((void **)(a2 + 128), (uint64_t)v76, v78, (uint64_t *)&v83, &v85);
              if ((LOBYTE(v89) & 7) != 0)
              {
                v23 = (unsigned int *)(*(_QWORD *)&v89 & 0xFFFFFFFFFFFFFFF8);
                do
                  v24 = __ldxr(v23);
                while (__stlxr(v24 - 2, v23));
              }
            }
          }
          return;
        case 8:
          v19 = **(uint64_t ***)v7;
LABEL_73:
          if (v19 == (uint64_t *)0x6E617073656D6954)
          {
            sub_20BDDC0E4(&__p, "start");
            v31 = sub_20BF26310(JsObject, (uint64_t)&__p);
            v33 = v32;
            v78[0] = v31;
            v78[1] = v32;
            if (SHIBYTE(v88) < 0)
              operator delete((void *)__p);
            sub_20BDDC0E4(&__p, "end");
            v34 = (uint64_t *)sub_20BF26310(JsObject, (uint64_t)&__p);
            v36 = (char)v35;
            v76[0] = v34;
            v76[1] = v35;
            if (SHIBYTE(v88) < 0)
              operator delete((void *)__p);
            if (v33)
            {
              if (v36)
              {
                v82 = 0;
                sub_20BF2848C(&__p);
                v81 = sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)&__p, (uint64_t)&__p) + 2;
                sub_20BF268D0((void **)(a2 + 128), (uint64_t)&v82, &v81, v78, (uint64_t *)v76, &v85);
                if ((LOBYTE(v89) & 7) != 0)
                {
                  v37 = (unsigned int *)(*(_QWORD *)&v89 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v38 = __ldxr(v37);
                  while (__stlxr(v38 - 2, v37));
                }
              }
            }
          }
          return;
        case 12:
          v43 = *(unsigned int **)v7;
          if (**(_QWORD **)v7 == 0x447265746E756F43 && *(_DWORD *)(*(_QWORD *)v7 + 8) == 1635019877)
          {
LABEL_112:
            sub_20BDDC0E4(&__p, "value");
            v53 = sub_20BF26444(JsObject, (uint64_t)&__p);
            v55 = v54;
            if (SHIBYTE(v88) < 0)
              operator delete((void *)__p);
            if (!v84 || !v55)
              return;
            sub_20BF2848C(v78);
            *(_QWORD *)&__p = sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)v78, (uint64_t)v78) + 2;
            DWORD2(__p) = v85;
            BYTE13(__p) = 4;
            v88 = mach_absolute_time();
            v89 = *(double *)&v53;
            if ((v80 & 7) != 0)
            {
              v56 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
              do
                v57 = __ldxr(v56);
              while (__stlxr(v57 - 2, v56));
            }
LABEL_111:
            v88 = v83;
            sub_20BF269FC((void **)(a2 + 128), &__p);
            return;
          }
          v45 = *(_QWORD *)v43;
          v46 = v43[2];
          if (v45 != 0x567265746E756F43 || v46 != 1702194273)
            return;
LABEL_104:
          sub_20BDDC0E4(&__p, "value");
          v48 = sub_20BF26444(JsObject, (uint64_t)&__p);
          v50 = v49;
          if (SHIBYTE(v88) < 0)
            operator delete((void *)__p);
          if (v84 && v50)
          {
            sub_20BF2848C(v78);
            *(_QWORD *)&__p = sub_20BF28180(*(_QWORD *)(a2 + 40) + 16, (uint64_t)v78, (uint64_t)v78) + 2;
            DWORD2(__p) = v85;
            BYTE13(__p) = 5;
            v88 = mach_absolute_time();
            v89 = *(double *)&v48;
            if ((v80 & 7) != 0)
            {
              v51 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
              do
                v52 = __ldxr(v51);
              while (__stlxr(v52 - 2, v51));
            }
            goto LABEL_111;
          }
          break;
        default:
          return;
      }
    }
  }
}

void sub_20BF25FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  if (a11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20BF261F4(uint64_t a1, uint64_t a2)
{
  unint64_t String;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[8];
  std::__shared_weak_count *v11;
  char v12;
  _BYTE v13[8];
  std::__shared_weak_count *v14;
  char v15;

  v10[0] = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, (uint64_t)v10, (uint64_t)v13);
  if (v15)
  {
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)v13))
      String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)v13);
    else
      String = 0;
    if (v15)
    {
      v3 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
  }
  else
  {
    String = 0;
  }
  if (v12)
  {
    v6 = v11;
    if (v11)
    {
      v7 = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return String;
}

void sub_20BF262DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a17)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  if (a11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF26310(uint64_t a1, uint64_t a2)
{
  uint64_t UInt64;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[8];
  std::__shared_weak_count *v11;
  char v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  char v15;

  v10[0] = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, (uint64_t)v10, (uint64_t)&v13);
  if (v15)
  {
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64((pxrInternal__aapl__pxrReserved__::JsValue *)&v13))
      UInt64 = pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(&v13);
    else
      UInt64 = 0;
    if (v15)
    {
      v3 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
  }
  else
  {
    UInt64 = 0;
  }
  if (v12)
  {
    v6 = v11;
    if (v11)
    {
      v7 = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return UInt64;
}

void sub_20BF26410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a17)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  if (a11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF26444(uint64_t a1, uint64_t a2)
{
  double Real;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[8];
  std::__shared_weak_count *v11;
  char v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  char v15;

  v10[0] = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, (uint64_t)v10, (uint64_t)&v13);
  if (v15)
  {
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)&v13))
      Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal(&v13);
    else
      Real = 0.0;
    if (v15)
    {
      v3 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
  }
  else
  {
    Real = 0.0;
  }
  if (v12)
  {
    v6 = v11;
    if (v11)
    {
      v7 = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return *(_QWORD *)&Real;
}

void sub_20BF26544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a17)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  if (a11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(exception_object);
}

char *sub_20BF26578(void **a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;

  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (v12 >= (unint64_t)v11)
  {
    v16 = (uint64_t)(v12 - (_QWORD)*a1) >> 5;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59)
      sub_20BDDF694();
    v18 = v10 - (_BYTE *)*a1;
    if (v18 >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    v20 = (char *)sub_20BED2F10(v9, v19);
    v21 = &v20[32 * v16];
    v23 = &v20[32 * v22];
    v24 = *a4;
    v25 = *a5;
    *(_QWORD *)v21 = *a3;
    *((_DWORD *)v21 + 2) = v25;
    v21[13] = 0;
    *((_QWORD *)v21 + 2) = v24;
    v15 = v21 + 32;
    v27 = (char *)*a1;
    v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v21 - 1) = v28;
        v21 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      v26 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v23;
    if (v26)
      operator delete(v26);
  }
  else
  {
    v13 = *a4;
    v14 = *a5;
    *(_QWORD *)v12 = *a3;
    *(_DWORD *)(v12 + 8) = v14;
    *(_BYTE *)(v12 + 13) = 0;
    *(_QWORD *)(v12 + 16) = v13;
    v15 = (char *)(v12 + 32);
  }
  a1[1] = v15;
  return v15 - 32;
}

char *sub_20BF26690(void **a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;

  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (v12 >= (unint64_t)v11)
  {
    v16 = (uint64_t)(v12 - (_QWORD)*a1) >> 5;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59)
      sub_20BDDF694();
    v18 = v10 - (_BYTE *)*a1;
    if (v18 >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    v20 = (char *)sub_20BED2F10(v9, v19);
    v21 = &v20[32 * v16];
    v23 = &v20[32 * v22];
    v24 = *a4;
    v25 = *a5;
    *(_QWORD *)v21 = *a3;
    *((_DWORD *)v21 + 2) = v25;
    v21[13] = 1;
    *((_QWORD *)v21 + 2) = v24;
    v15 = v21 + 32;
    v27 = (char *)*a1;
    v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v21 - 1) = v28;
        v21 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      v26 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v23;
    if (v26)
      operator delete(v26);
  }
  else
  {
    v13 = *a4;
    v14 = *a5;
    *(_QWORD *)v12 = *a3;
    *(_DWORD *)(v12 + 8) = v14;
    *(_BYTE *)(v12 + 13) = 1;
    *(_QWORD *)(v12 + 16) = v13;
    v15 = (char *)(v12 + 32);
  }
  a1[1] = v15;
  return v15 - 32;
}

char *sub_20BF267B0(void **a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;

  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (v12 >= (unint64_t)v11)
  {
    v16 = (uint64_t)(v12 - (_QWORD)*a1) >> 5;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59)
      sub_20BDDF694();
    v18 = v10 - (_BYTE *)*a1;
    if (v18 >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    v20 = (char *)sub_20BED2F10(v9, v19);
    v21 = &v20[32 * v16];
    v23 = &v20[32 * v22];
    v24 = *a4;
    v25 = *a5;
    *(_QWORD *)v21 = *a3;
    *((_DWORD *)v21 + 2) = v25;
    v21[13] = 3;
    *((_QWORD *)v21 + 2) = v24;
    v15 = v21 + 32;
    v27 = (char *)*a1;
    v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v21 - 1) = v28;
        v21 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      v26 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v23;
    if (v26)
      operator delete(v26);
  }
  else
  {
    v13 = *a4;
    v14 = *a5;
    *(_QWORD *)v12 = *a3;
    *(_DWORD *)(v12 + 8) = v14;
    *(_BYTE *)(v12 + 13) = 3;
    *(_QWORD *)(v12 + 16) = v13;
    v15 = (char *)(v12 + 32);
  }
  a1[1] = v15;
  return v15 - 32;
}

char *sub_20BF268D0(void **a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;

  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if (v14 >= (unint64_t)v13)
  {
    v19 = (uint64_t)(v14 - (_QWORD)*a1) >> 5;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 59)
      sub_20BDDF694();
    v21 = v12 - (_BYTE *)*a1;
    if (v21 >> 4 > v20)
      v20 = v21 >> 4;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
      v22 = 0x7FFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    v23 = (char *)sub_20BED2F10(v11, v22);
    v24 = &v23[32 * v19];
    v26 = &v23[32 * v25];
    v27 = *a4;
    v28 = *a5;
    v29 = *a6;
    *(_QWORD *)v24 = *a3;
    *((_DWORD *)v24 + 2) = v29;
    v24[13] = 2;
    *((_QWORD *)v24 + 2) = v28;
    *((_QWORD *)v24 + 3) = v27;
    v18 = v24 + 32;
    v31 = (char *)*a1;
    v30 = (char *)a1[1];
    if (v30 != *a1)
    {
      do
      {
        v32 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v24 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v24 - 1) = v32;
        v24 -= 32;
        v30 -= 32;
      }
      while (v30 != v31);
      v30 = (char *)*a1;
    }
    *a1 = v24;
    a1[1] = v18;
    a1[2] = v26;
    if (v30)
      operator delete(v30);
  }
  else
  {
    v15 = *a4;
    v16 = *a5;
    v17 = *a6;
    *(_QWORD *)v14 = *a3;
    *(_DWORD *)(v14 + 8) = v17;
    *(_BYTE *)(v14 + 13) = 2;
    *(_QWORD *)(v14 + 16) = v16;
    *(_QWORD *)(v14 + 24) = v15;
    v18 = (char *)(v14 + 32);
  }
  a1[1] = v18;
  return v18 - 32;
}

_OWORD *sub_20BF269FC(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((char *)v7 - (_BYTE *)*a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_20BED2F10(v4, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v16 = &v14[32 * v13];
    v17 = a2[1];
    *(_OWORD *)v15 = *a2;
    *((_OWORD *)v15 + 1) = v17;
    v9 = v15 + 32;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = a2[1];
    *v7 = *a2;
    v7[1] = v8;
    v9 = v7 + 2;
  }
  a1[1] = v9;
  return v9 - 2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization::WriteCollectionsToJSON(pxrInternal__aapl__pxrReserved__::JsWriter *a1, pxrInternal__aapl__pxrReserved__::TraceCollection ****a2)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v4;
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v5;
  pxrInternal__aapl__pxrReserved__::TraceEventTree *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_20BF26C38(&v12);
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
  {
    if (*v4)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::TraceEventTree *)sub_20BF1CF28((uint64_t *)&v12);
      pxrInternal__aapl__pxrReserved__::TraceEventTree::Add(v6, *v4, (uint64_t *)&v11);
      sub_20BF1D8C8(&v11);
    }
    v4 += 2;
  }
  v7 = sub_20BF1CF28((uint64_t *)&v12);
  v13[0] = &off_24C51C808;
  v13[1] = a2;
  v14 = v13;
  pxrInternal__aapl__pxrReserved__::TraceEventTree::WriteChromeTraceObject(v7, a1, (uint64_t)v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_10;
  }
  if (v14)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  sub_20BF1D8C8(&v12);
  return 1;
}

void sub_20BF26BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  sub_20BF1D8C8(&a11);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BF26C38@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = operator new(0x70uLL);
  sub_20BF1EF90(&v4);
  sub_20BF284E8((uint64_t)v2, &v4);
  *a1 = v2;
  return sub_20BF1DCD8(&v4);
}

void sub_20BF26C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization::CollectionFromJSON(pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization *this@<X0>, uint64_t ***a2@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  const char *v33;
  char *v34;
  void *v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  char v44;
  char v45;
  double v46;
  uint64_t v47;
  char v48;
  char v49;
  unint64_t v50;
  unsigned __int8 **v51;
  int v52;
  char v53;
  char v54;
  int v55;
  int v56;
  int v57;
  uint64_t *v58;
  _QWORD *v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t *v68;
  _QWORD *v69;
  unsigned int *v70;
  unsigned int v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t *v88;
  _QWORD *v89;
  unsigned int *v90;
  unsigned int v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t *v115;
  _QWORD *v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t *v119;
  double v120;
  pxrInternal__aapl__pxrReserved__ *v121;
  pxrInternal__aapl__pxrReserved__ *v122;
  _QWORD *v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  __int128 v139;
  unsigned __int8 v140;
  uint64_t v141;
  char v142;
  char v143;
  char *v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  unint64_t v158;
  unint64_t **v159;
  unint64_t **v160;
  uint64_t *v161;
  uint64_t **v162;
  int v163;
  uint64_t *v164;
  uint64_t **v165;
  char *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  _OWORD *v174;
  _OWORD *v175;
  void *v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t *v179;
  BOOL v180;
  unint64_t v181;
  uint64_t *v182;
  _QWORD *v183;
  uint64_t v184;
  void *v185[2];
  const char *v186;
  void *__dst;
  _QWORD *v188;
  uint64_t v189;
  void *__p;
  __int128 v191;
  unint64_t v192;
  char v193;
  int v194;

  v5 = *((_QWORD *)this + 1);
  __p = *(void **)this;
  *(_QWORD *)&v191 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  BYTE8(v191) = 1;
  v8 = sub_20BF27F10((uint64_t)&__p);
  v9 = v8;
  if (!BYTE8(v191))
    goto LABEL_9;
  v10 = (std::__shared_weak_count *)v191;
  if (!(_QWORD)v191)
    goto LABEL_9;
  v11 = (unint64_t *)(v191 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v9)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v8)
    {
LABEL_10:
      sub_20BDDC0E4(&__p, "traceEvents");
      v13 = (uint64_t *)sub_20BF27F50(v9, (uint64_t)&__p);
      if (SHIBYTE(v191) < 0)
        operator delete(__p);
      sub_20BDDC0E4(&__p, "libTraceData");
      v14 = sub_20BF28088(v9, (uint64_t)&__p);
      if (SHIBYTE(v191) < 0)
        operator delete(__p);
      goto LABEL_25;
    }
  }
  v15 = *((_QWORD *)this + 1);
  __p = *(void **)this;
  *(_QWORD *)&v191 = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  BYTE8(v191) = 1;
  v13 = (uint64_t *)sub_20BF28048((uint64_t)&__p);
  if (BYTE8(v191))
  {
    v18 = (std::__shared_weak_count *)v191;
    if ((_QWORD)v191)
    {
      v19 = (unint64_t *)(v191 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v14 = 0;
LABEL_25:
  v183 = 0;
  v184 = 0;
  v182 = (uint64_t *)&v183;
  if (v13)
  {
    v181 = v14;
    v188 = 0;
    v189 = 0;
    __dst = &v188;
    v21 = *v13;
    v22 = v13[1];
    if (*v13 != v22)
    {
      while (1)
      {
        v23 = *(_QWORD *)(v21 + 8);
        __p = *(void **)v21;
        *(_QWORD *)&v191 = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        BYTE8(v191) = 1;
        v26 = sub_20BF27F10((uint64_t)&__p);
        v27 = v26;
        if (!BYTE8(v191))
          goto LABEL_35;
        v28 = (std::__shared_weak_count *)v191;
        if (!(_QWORD)v191)
          goto LABEL_35;
        v29 = (unint64_t *)(v191 + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          if (!v27)
            goto LABEL_148;
        }
        else
        {
LABEL_35:
          if (!v26)
            goto LABEL_148;
        }
        sub_20BDDC0E4(&__p, "tid");
        v31 = sub_20BF261F4(v27, (uint64_t)&__p);
        v32 = (void *)v31;
        if (SHIBYTE(v191) < 0)
        {
          operator delete(__p);
          if (!v32)
          {
LABEL_40:
            sub_20BDDC0E4(&__p, "tid");
            v35 = (void *)sub_20BF26310(v27, (uint64_t)&__p);
            v36 = (char)v33;
            if (SHIBYTE(v191) < 0)
              operator delete(__p);
            if (v36)
            {
              v37 = v188;
              if (!v188)
                goto LABEL_53;
              v38 = &v188;
              do
              {
                v39 = v37;
                v40 = v38;
                v41 = v37[4];
                if (v41 >= (unint64_t)v35)
                  v38 = v37;
                else
                  ++v37;
                v37 = (_QWORD *)*v37;
              }
              while (v37);
              if (v38 == &v188)
                goto LABEL_53;
              if (v41 < (unint64_t)v35)
                v39 = v40;
              if ((unint64_t)v35 >= v39[4])
              {
                v32 = v38 + 5;
              }
              else
              {
LABEL_53:
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%lld", v33, v34, v35);
                __p = v35;
                v191 = *(_OWORD *)v185;
                v192 = (unint64_t)v186;
                v185[0] = 0;
                v185[1] = 0;
                v186 = 0;
                v42 = sub_20BF28574((uint64_t **)&__dst, (unint64_t *)&__p, (uint64_t)&__p);
                if (SHIBYTE(v192) < 0)
                  operator delete((void *)v191);
                if (SHIBYTE(v186) < 0)
                  operator delete(v185[0]);
                v32 = v42 + 5;
              }
            }
            else
            {
              v32 = 0;
            }
          }
        }
        else if (!v31)
        {
          goto LABEL_40;
        }
        sub_20BDDC0E4(&__p, "ts");
        v43 = sub_20BF26444(v27, (uint64_t)&__p);
        v45 = v44;
        if (SHIBYTE(v191) < 0)
          operator delete(__p);
        v46 = *(double *)&v43;
        if (!v45)
        {
          sub_20BDDC0E4(&__p, "ts");
          v47 = sub_20BF26310(v27, (uint64_t)&__p);
          v49 = v48;
          if (SHIBYTE(v191) < 0)
            operator delete(__p);
          if (v49)
          {
            v46 = (double)(unint64_t)v47;
            v45 = 1;
          }
        }
        sub_20BDDC0E4(&__p, "name");
        v50 = sub_20BF261F4(v27, (uint64_t)&__p);
        if (SHIBYTE(v191) < 0)
          operator delete(__p);
        sub_20BDDC0E4(&__p, "ph");
        v51 = (unsigned __int8 **)sub_20BF261F4(v27, (uint64_t)&__p);
        if (SHIBYTE(v191) < 0)
          operator delete(__p);
        sub_20BDDC0E4(&__p, "libTraceCatId");
        v52 = sub_20BF26310(v27, (uint64_t)&__p);
        v54 = v53;
        if (SHIBYTE(v191) < 0)
        {
          operator delete(__p);
          if (!v32)
            goto LABEL_148;
        }
        else if (!v32)
        {
          goto LABEL_148;
        }
        if (!v45 || !v50 || !v51)
          goto LABEL_148;
        if (v54)
          v55 = v52;
        else
          v55 = 0;
        v56 = *((char *)v51 + 23);
        if (v56 < 0)
        {
          if (v51[1] != (unsigned __int8 *)1)
            goto LABEL_148;
          v57 = **v51;
        }
        else
        {
          if (v56 != 1)
            goto LABEL_148;
          v57 = *(unsigned __int8 *)v51;
        }
        if (v57 <= 72)
        {
          if (v57 == 66)
          {
            __p = v32;
            v88 = sub_20BF2A4DC(&v182, (const void **)v32, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
            sub_20BF2848C(&__p);
            v89 = sub_20BF28180(v88[12] + 16, (uint64_t)&__p, (uint64_t)&__p);
            if ((v192 & 7) != 0)
            {
              v90 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
              do
                v91 = __ldxr(v90);
              while (__stlxr(v91 - 2, v90));
            }
            __p = v32;
            v62 = sub_20BF2A4DC(&v182, (const void **)v32, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
            v63 = pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks((pxrInternal__aapl__pxrReserved__ *)v62, v46 / 1000000.0);
            v92 = v89 + 2;
            v65 = v62[24];
            v93 = v62[25];
            if (v65 < v93)
            {
              *(_QWORD *)v65 = v92;
              *(_DWORD *)(v65 + 8) = v55;
              *(_BYTE *)(v65 + 13) = 0;
LABEL_105:
              v74 = v65 + 32;
              *(_QWORD *)(v65 + 16) = v63;
              goto LABEL_147;
            }
            v75 = (void **)(v62 + 23);
            v98 = v62[23];
            v99 = (uint64_t)(v65 - v98) >> 5;
            v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 59)
              sub_20BDDF694();
            v101 = v93 - v98;
            if (v101 >> 4 > v100)
              v100 = v101 >> 4;
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFE0)
              v102 = 0x7FFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            v81 = (char *)sub_20BED2F10((uint64_t)(v62 + 25), v102);
            v83 = &v81[32 * v99];
            *(_QWORD *)v83 = v92;
            *((_DWORD *)v83 + 2) = v55;
            v83[13] = 0;
            *((_QWORD *)v83 + 2) = v63;
            v103 = (char *)v62[23];
            v84 = (char *)v62[24];
            v86 = (uint64_t)v83;
            if (v84 == v103)
              goto LABEL_145;
            do
            {
              v104 = *((_OWORD *)v84 - 1);
              *(_OWORD *)(v86 - 32) = *((_OWORD *)v84 - 2);
              *(_OWORD *)(v86 - 16) = v104;
              v86 -= 32;
              v84 -= 32;
            }
            while (v84 != v103);
LABEL_144:
            v84 = (char *)*v75;
            goto LABEL_145;
          }
          if (v57 == 69)
          {
            __p = v32;
            v68 = sub_20BF2A4DC(&v182, (const void **)v32, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
            sub_20BF2848C(&__p);
            v69 = sub_20BF28180(v68[12] + 16, (uint64_t)&__p, (uint64_t)&__p);
            if ((v192 & 7) != 0)
            {
              v70 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
              do
                v71 = __ldxr(v70);
              while (__stlxr(v71 - 2, v70));
            }
            __p = v32;
            v62 = sub_20BF2A4DC(&v182, (const void **)v32, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
            v63 = pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks((pxrInternal__aapl__pxrReserved__ *)v62, v46 / 1000000.0);
            v72 = v69 + 2;
            v65 = v62[24];
            v73 = v62[25];
            if (v65 < v73)
            {
              *(_QWORD *)v65 = v72;
              *(_DWORD *)(v65 + 8) = v55;
              v67 = 1;
LABEL_104:
              *(_BYTE *)(v65 + 13) = v67;
              goto LABEL_105;
            }
            v75 = (void **)(v62 + 23);
            v105 = v62[23];
            v106 = (uint64_t)(v65 - v105) >> 5;
            v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 59)
              sub_20BDDF694();
            v108 = v73 - v105;
            if (v108 >> 4 > v107)
              v107 = v108 >> 4;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFE0)
              v109 = 0x7FFFFFFFFFFFFFFLL;
            else
              v109 = v107;
            v81 = (char *)sub_20BED2F10((uint64_t)(v62 + 25), v109);
            v83 = &v81[32 * v106];
            *(_QWORD *)v83 = v72;
            *((_DWORD *)v83 + 2) = v55;
            v83[13] = 1;
            *((_QWORD *)v83 + 2) = v63;
            v110 = (char *)v62[23];
            v84 = (char *)v62[24];
            v86 = (uint64_t)v83;
            if (v84 == v110)
              goto LABEL_145;
            do
            {
              v111 = *((_OWORD *)v84 - 1);
              *(_OWORD *)(v86 - 32) = *((_OWORD *)v84 - 2);
              *(_OWORD *)(v86 - 16) = v111;
              v86 -= 32;
              v84 -= 32;
            }
            while (v84 != v110);
            goto LABEL_144;
          }
        }
        else if (v57 == 73 || v57 == 82 || v57 == 105)
        {
          __p = v32;
          v58 = sub_20BF2A4DC(&v182, (const void **)v32, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
          sub_20BF2848C(&__p);
          v59 = sub_20BF28180(v58[12] + 16, (uint64_t)&__p, (uint64_t)&__p);
          if ((v192 & 7) != 0)
          {
            v60 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
            do
              v61 = __ldxr(v60);
            while (__stlxr(v61 - 2, v60));
          }
          __p = v32;
          v62 = sub_20BF2A4DC(&v182, (const void **)v32, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
          v63 = pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks((pxrInternal__aapl__pxrReserved__ *)v62, v46 / 1000000.0);
          v64 = v59 + 2;
          v65 = v62[24];
          v66 = v62[25];
          if (v65 < v66)
          {
            *(_QWORD *)v65 = v64;
            *(_DWORD *)(v65 + 8) = v55;
            v67 = 3;
            goto LABEL_104;
          }
          v75 = (void **)(v62 + 23);
          v76 = v62[23];
          v77 = (uint64_t)(v65 - v76) >> 5;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 59)
            sub_20BDDF694();
          v79 = v66 - v76;
          if (v79 >> 4 > v78)
            v78 = v79 >> 4;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFE0)
            v80 = 0x7FFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          v81 = (char *)sub_20BED2F10((uint64_t)(v62 + 25), v80);
          v83 = &v81[32 * v77];
          *(_QWORD *)v83 = v64;
          *((_DWORD *)v83 + 2) = v55;
          v83[13] = 3;
          *((_QWORD *)v83 + 2) = v63;
          v85 = (char *)v62[23];
          v84 = (char *)v62[24];
          v86 = (uint64_t)v83;
          if (v84 != v85)
          {
            do
            {
              v87 = *((_OWORD *)v84 - 1);
              *(_OWORD *)(v86 - 32) = *((_OWORD *)v84 - 2);
              *(_OWORD *)(v86 - 16) = v87;
              v86 -= 32;
              v84 -= 32;
            }
            while (v84 != v85);
            goto LABEL_144;
          }
LABEL_145:
          v74 = (uint64_t)(v83 + 32);
          v62[23] = v86;
          v62[24] = (uint64_t)(v83 + 32);
          v62[25] = (uint64_t)&v81[32 * v82];
          if (v84)
            operator delete(v84);
LABEL_147:
          v62[24] = v74;
          goto LABEL_148;
        }
        if (v57 == 88)
        {
          sub_20BDDC0E4(&__p, "dur");
          v94 = sub_20BF26444(v27, (uint64_t)&__p);
          v96 = v95;
          if (SHIBYTE(v191) < 0)
            operator delete(__p);
          if (v96)
            goto LABEL_124;
          sub_20BDDC0E4(&__p, "dur");
          v112 = sub_20BF26310(v27, (uint64_t)&__p);
          v114 = v113;
          if (SHIBYTE(v191) < 0)
            operator delete(__p);
          if (v114)
          {
            v97 = (double)(unint64_t)v112;
LABEL_154:
            __p = v32;
            v115 = sub_20BF2A4DC(&v182, (const void **)v32, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
            sub_20BF2848C(&__p);
            v116 = sub_20BF28180(v115[12] + 16, (uint64_t)&__p, (uint64_t)&__p);
            if ((v192 & 7) != 0)
            {
              v117 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
              do
                v118 = __ldxr(v117);
              while (__stlxr(v118 - 2, v117));
            }
            __p = v32;
            v119 = sub_20BF2A4DC(&v182, (const void **)v32, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
            v120 = v46 / 1000000.0;
            v121 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks((pxrInternal__aapl__pxrReserved__ *)v119, v120);
            v122 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks(v121, v120);
            v123 = v116 + 2;
            v124 = (char *)v122 + pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks(v122, v97 / 1000000.0);
            v125 = v119[25];
            v126 = v119[24];
            if (v126 >= v125)
            {
              v128 = v119[23];
              v129 = (uint64_t)(v126 - v128) >> 5;
              v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 59)
                sub_20BDDF694();
              v131 = v125 - v128;
              if (v131 >> 4 > v130)
                v130 = v131 >> 4;
              if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFE0)
                v132 = 0x7FFFFFFFFFFFFFFLL;
              else
                v132 = v130;
              v133 = (char *)sub_20BED2F10((uint64_t)(v119 + 25), v132);
              v135 = &v133[32 * v129];
              *(_QWORD *)v135 = v123;
              *((_DWORD *)v135 + 2) = v55;
              v135[13] = 2;
              *((_QWORD *)v135 + 2) = v124;
              *((_QWORD *)v135 + 3) = v121;
              v137 = (char *)v119[23];
              v136 = (char *)v119[24];
              v138 = (uint64_t)v135;
              if (v136 != v137)
              {
                do
                {
                  v139 = *((_OWORD *)v136 - 1);
                  *(_OWORD *)(v138 - 32) = *((_OWORD *)v136 - 2);
                  *(_OWORD *)(v138 - 16) = v139;
                  v138 -= 32;
                  v136 -= 32;
                }
                while (v136 != v137);
                v136 = (char *)v119[23];
              }
              v127 = (uint64_t)(v135 + 32);
              v119[23] = v138;
              v119[24] = (uint64_t)(v135 + 32);
              v119[25] = (uint64_t)&v133[32 * v134];
              if (v136)
                operator delete(v136);
            }
            else
            {
              *(_QWORD *)v126 = v123;
              *(_DWORD *)(v126 + 8) = v55;
              *(_BYTE *)(v126 + 13) = 2;
              v127 = v126 + 32;
              *(_QWORD *)(v126 + 16) = v124;
              *(_QWORD *)(v126 + 24) = v121;
            }
            v119[24] = v127;
            goto LABEL_148;
          }
          sub_20BDDC0E4(&__p, "tdur");
          v94 = sub_20BF26444(v27, (uint64_t)&__p);
          v96 = v140;
          if (SHIBYTE(v191) < 0)
            operator delete(__p);
          sub_20BDDC0E4(&__p, "tdur");
          v141 = sub_20BF26310(v27, (uint64_t)&__p);
          v143 = v142;
          if (SHIBYTE(v191) < 0)
            operator delete(__p);
          if (!v143)
          {
LABEL_124:
            v97 = *(double *)&v94;
          }
          else
          {
            if (v96 <= 1uLL)
              v96 = 1;
            v97 = (double)(unint64_t)v141;
          }
          if (v96)
            goto LABEL_154;
        }
LABEL_148:
        v21 += 16;
        if (v21 == v22)
        {
          v144 = (char *)v188;
          goto LABEL_180;
        }
      }
    }
    v144 = 0;
LABEL_180:
    sub_20BF28644((uint64_t)&__dst, v144);
    v14 = v181;
  }
  if (v14)
  {
    sub_20BDDC0E4(&__p, "threadEvents");
    v145 = sub_20BF27F50(v14, (uint64_t)&__p);
    v146 = (uint64_t *)v145;
    if (SHIBYTE(v191) < 0)
    {
      operator delete(__p);
      if (!v146)
        goto LABEL_208;
    }
    else if (!v145)
    {
      goto LABEL_208;
    }
    v147 = *v146;
    v148 = v146[1];
    if (*v146 == v148)
      goto LABEL_208;
    do
    {
      v149 = *(_QWORD *)(v147 + 8);
      __p = *(void **)v147;
      *(_QWORD *)&v191 = v149;
      if (v149)
      {
        v150 = (unint64_t *)(v149 + 8);
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
      }
      BYTE8(v191) = 1;
      v152 = sub_20BF27F10((uint64_t)&__p);
      v153 = v152;
      if (!BYTE8(v191))
        goto LABEL_195;
      v154 = (std::__shared_weak_count *)v191;
      if (!(_QWORD)v191)
        goto LABEL_195;
      v155 = (unint64_t *)(v191 + 8);
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
        if (!v153)
          goto LABEL_207;
      }
      else
      {
LABEL_195:
        if (!v152)
          goto LABEL_207;
      }
      sub_20BDDC0E4(&__p, "thread");
      v157 = (void *)sub_20BF261F4(v153, (uint64_t)&__p);
      if (SHIBYTE(v191) < 0)
        operator delete(__p);
      sub_20BDDC0E4(&__p, "events");
      v158 = sub_20BF27F50(v153, (uint64_t)&__p);
      if (SHIBYTE(v191) < 0)
      {
        operator delete(__p);
        if (v157)
        {
LABEL_202:
          if (v158)
          {
            v159 = *(unint64_t ***)v158;
            v160 = *(unint64_t ***)(v158 + 8);
            while (v159 != v160)
            {
              __p = v157;
              v161 = sub_20BF2A4DC(&v182, (const void **)v157, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
              pxrInternal__aapl__pxrReserved__::_TraceEventFromJSON(v159, (uint64_t)(v161 + 7));
              v159 += 2;
            }
          }
        }
      }
      else if (v157)
      {
        goto LABEL_202;
      }
LABEL_207:
      v147 += 16;
    }
    while (v147 != v148);
  }
LABEL_208:
  if (v184)
  {
    sub_20BEB59B0((uint64_t)&__p, (uint64_t)"Trace", (uint64_t)"TraceCollection");
    v162 = (uint64_t **)malloc(0x18uLL);
    while (1)
    {
      v163 = v191;
      LODWORD(v191) = v191 - 1;
      if (!v163)
        break;
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)__p);
    }
    v162[2] = 0;
    v162[1] = 0;
    *v162 = (uint64_t *)(v162 + 1);
    *a2 = v162;
    v164 = v182;
    if (v182 != (uint64_t *)&v183)
    {
      do
      {
        v165 = *a2;
        pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId(&__dst, (__int128 *)v164 + 2);
        v167 = (_QWORD *)v164[9];
        if (v167)
          v167 = (_QWORD *)*v167;
        v168 = v164[8];
        if (v168)
          v169 = (_QWORD *)(v168 + 32);
        else
          v169 = 0;
        if (v169 != v167)
        {
          __p = "trace/jsonSerialization.cpp";
          *(_QWORD *)&v191 = "_ConstructEventList";
          *((_QWORD *)&v191 + 1) = 561;
          v192 = (unint64_t)"std::unique_ptr<TraceEventList> pxrInternal__aapl__pxrReserved__::_ConstructEventList"
                                   "(EventListConstructionData &)";
          v193 = 0;
          v194 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v166, "data.eventList.IsEmpty()");
        }
        v170 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v164[23];
        v171 = (char *)v164[24];
        v172 = 126 - 2 * __clz((v171 - (char *)v170) >> 5);
        if (v171 == (char *)v170)
          v173 = 0;
        else
          v173 = v172;
        sub_20BF28694(v170, v171, v173, 1);
        v174 = (_OWORD *)v164[23];
        v175 = (_OWORD *)v164[24];
        if (v174 != v175)
        {
          do
          {
            sub_20BF29418((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)(v164 + 7), v174);
            v174 += 2;
          }
          while (v174 != v175);
          v174 = (_OWORD *)v164[23];
        }
        v164[24] = (uint64_t)v174;
        v176 = operator new(0x80uLL);
        sub_20BF2946C((uint64_t)v176, (uint64_t)(v164 + 7));
        v185[0] = v176;
        pxrInternal__aapl__pxrReserved__::TraceCollection::AddToCollection(v165, &__dst, (uint64_t *)v185);
        v177 = (uint64_t *)v185[0];
        v185[0] = 0;
        if (v177)
          sub_20BF2A948((uint64_t)v185, v177);
        if (SHIBYTE(v189) < 0)
          operator delete(__dst);
        v178 = (uint64_t *)v164[1];
        if (v178)
        {
          do
          {
            v179 = v178;
            v178 = (uint64_t *)*v178;
          }
          while (v178);
        }
        else
        {
          do
          {
            v179 = (uint64_t *)v164[2];
            v180 = *v179 == (_QWORD)v164;
            v164 = v179;
          }
          while (!v180);
        }
        v164 = v179;
      }
      while (v179 != (uint64_t *)&v183);
    }
  }
  else
  {
    *a2 = 0;
  }
  sub_20BF2A984((uint64_t)&v182, v183);
}

void sub_20BF27C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,char *a25,int a26,__int16 a27,char a28,char a29,void *__p,void *a31,char a32,int a33,__int16 a34,char a35,uint64_t a36)
{
  if (SHIBYTE(a33) < 0)
    operator delete(__p);
  sub_20BF28644((uint64_t)&a24, a25);
  sub_20BF2A984((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

unint64_t sub_20BF27F10(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16)
    && pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)a1))
  {
    return pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)a1);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_20BF27F50(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[8];
  std::__shared_weak_count *v11;
  char v12;
  _BYTE v13[8];
  std::__shared_weak_count *v14;
  char v15;

  v10[0] = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, (uint64_t)v10, (uint64_t)v13);
  v2 = sub_20BF28048((uint64_t)v13);
  if (v15)
  {
    v3 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  if (v12)
  {
    v6 = v11;
    if (v11)
    {
      v7 = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return v2;
}

void sub_20BF28014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a17)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  if (a11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20BF28048(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16)
    && pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)a1))
  {
    return pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)a1);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_20BF28088(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[8];
  std::__shared_weak_count *v11;
  char v12;
  _BYTE v13[8];
  std::__shared_weak_count *v14;
  char v15;

  v10[0] = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, (uint64_t)v10, (uint64_t)v13);
  v2 = sub_20BF27F10((uint64_t)v13);
  if (v15)
  {
    v3 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  if (v12)
  {
    v6 = v11;
    if (v11)
    {
      v7 = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return v2;
}

void sub_20BF2814C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a17)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  if (a11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF28180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if ((result[5] & 0xFFFFFFFFFFFFFFF8) == v5)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF283C8(a1, v6, a3, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF283B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF2844C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF283C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  *((_OWORD *)result + 1) = *(_OWORD *)a3;
  v9 = *(_QWORD *)(a3 + 24);
  result[4] = *(_QWORD *)(a3 + 16);
  result[5] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[5] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BF2844C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v3)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = v3[5];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
    operator delete(v3);
  }
}

_QWORD *sub_20BF2848C(_QWORD *a1)
{
  unint64_t v2;
  const char *v3;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a1 + 3);
  v2 = a1[3] & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    v3 = (const char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0)
      v3 = *(const char **)v3;
  }
  else
  {
    v3 = "";
  }
  a1[2] = v3;
  return a1;
}

uint64_t sub_20BF284E8(uint64_t a1, _QWORD *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C51C750;
  *(_QWORD *)(a1 + 24) = *a2;
  sub_20BF1DD04((uint64_t *)(a1 + 24));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  return a1;
}

void sub_20BF28558(_Unwind_Exception *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfRefBase *v2;
  unsigned int **v3;

  sub_20BEBCE60(v3, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_20BF28574(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x40uLL);
    *((_QWORD *)v10 + 4) = *(_QWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v10 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_20BF28644(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_20BF28644(a1, *(_QWORD *)a2);
    sub_20BF28644(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void sub_20BF28694(pxrInternal__aapl__pxrReserved__::TraceEvent *a1, char *a2, uint64_t a3, char a4)
{
  pxrInternal__aapl__pxrReserved__::TraceEvent *v8;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v21;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v22;
  unint64_t v23;
  unint64_t v24;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v25;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  unint64_t TimeStamp;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v60;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  unint64_t v67;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v68;
  __int128 v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  _OWORD *v73;
  unint64_t v74;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v75;
  unint64_t v76;
  __int128 v77;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v101;
  unint64_t v102;
  __int128 v103;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v104;
  __int128 v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v110;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v111;
  unint64_t v112;
  __int128 v113;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v114;
  __int128 v115;
  unint64_t v116;
  unint64_t v117;
  __int128 v118;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v119;
  char *v120;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v121;
  int64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32);
  v120 = a2;
  v121 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 64);
  v119 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 96);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - (char *)v9;
    v11 = (a2 - (char *)v9) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v8);
        if (TimeStamp < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a1))
        {
          v53 = *((_OWORD *)a1 + 1);
          v125 = *(_OWORD *)a1;
          v126 = v53;
          v54 = *((_OWORD *)v8 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v8;
          *((_OWORD *)a1 + 1) = v54;
          v55 = v126;
          *(_OWORD *)v8 = v125;
          *((_OWORD *)v8 + 1) = v55;
        }
        return;
      case 3:
        sub_20BF29000(a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32), v8);
        return;
      case 4:
        sub_20BF29324((__n128 *)a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 64), v8);
        return;
      case 5:
        sub_20BF28EDC((__n128 *)a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 64), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 96), v8);
        return;
      default:
        if (v10 <= 767)
        {
          v56 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32);
          v57 = a1 == (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2
             || v56 == (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2;
          v58 = v57;
          if ((a4 & 1) != 0)
          {
            if ((v58 & 1) == 0)
            {
              v59 = 0;
              v60 = a1;
              do
              {
                v61 = v60;
                v60 = v56;
                v62 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v56);
                if (v62 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v61))
                {
                  v63 = *((_OWORD *)v60 + 1);
                  v125 = *(_OWORD *)v60;
                  v126 = v63;
                  v64 = v59;
                  while (1)
                  {
                    v65 = (char *)a1 + v64;
                    v66 = *(_OWORD *)((char *)a1 + v64 + 16);
                    *((_OWORD *)v65 + 2) = *(_OWORD *)((char *)a1 + v64);
                    *((_OWORD *)v65 + 3) = v66;
                    if (!v64)
                      break;
                    v64 -= 32;
                    v67 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125);
                    if (v67 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + v64)))
                    {
                      v68 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + v64 + 32);
                      goto LABEL_74;
                    }
                  }
                  v68 = a1;
LABEL_74:
                  v69 = v126;
                  *(_OWORD *)v68 = v125;
                  *((_OWORD *)v68 + 1) = v69;
                  a2 = v120;
                }
                v56 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v60 + 32);
                v59 += 32;
              }
              while ((char *)v60 + 32 != a2);
            }
          }
          else if ((v58 & 1) == 0)
          {
            v110 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 - 32);
            do
            {
              v111 = a1;
              a1 = v56;
              v112 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v56);
              if (v112 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v111))
              {
                v113 = *((_OWORD *)a1 + 1);
                v125 = *(_OWORD *)a1;
                v126 = v113;
                v114 = v110;
                do
                {
                  v115 = *((_OWORD *)v114 + 3);
                  *((_OWORD *)v114 + 4) = *((_OWORD *)v114 + 2);
                  *((_OWORD *)v114 + 5) = v115;
                  v116 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125);
                  v117 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v114);
                  v114 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v114 - 32);
                }
                while (v116 < v117);
                v118 = v126;
                *((_OWORD *)v114 + 4) = v125;
                *((_OWORD *)v114 + 5) = v118;
              }
              v56 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32);
              v110 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v110 + 32);
            }
            while ((char *)a1 + 32 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2)
          {
            v70 = (unint64_t)(v11 - 2) >> 1;
            v122 = v70;
            do
            {
              v71 = v70;
              if (v122 >= v70)
              {
                v72 = (2 * v70) | 1;
                v73 = (_OWORD *)((char *)a1 + 32 * v72);
                if (2 * v70 + 2 < v11)
                {
                  v74 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v72));
                  if (v74 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)(v73 + 2)))
                  {
                    v73 += 2;
                    v72 = 2 * v71 + 2;
                  }
                }
                v75 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v71);
                v76 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v73);
                if (v76 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v75))
                {
                  v77 = *((_OWORD *)v75 + 1);
                  v125 = *(_OWORD *)v75;
                  v126 = v77;
                  do
                  {
                    v78 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v73;
                    v79 = v73[1];
                    *(_OWORD *)v75 = *v73;
                    *((_OWORD *)v75 + 1) = v79;
                    if (v122 < v72)
                      break;
                    v80 = (2 * v72) | 1;
                    v73 = (_OWORD *)((char *)a1 + 32 * v80);
                    v81 = 2 * v72 + 2;
                    if (v81 < v11)
                    {
                      v82 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v80));
                      if (v82 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)(v73 + 2)))
                      {
                        v73 += 2;
                        v80 = v81;
                      }
                    }
                    v83 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v73);
                    v75 = v78;
                    v72 = v80;
                  }
                  while (v83 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125));
                  v84 = v126;
                  *(_OWORD *)v78 = v125;
                  *((_OWORD *)v78 + 1) = v84;
                }
              }
              v70 = v71 - 1;
            }
            while (v71);
            v85 = (unint64_t)v10 >> 5;
            v86 = v120;
            do
            {
              v87 = v86;
              v88 = 0;
              v89 = *((_OWORD *)a1 + 1);
              v123 = *(_OWORD *)a1;
              v124 = v89;
              v90 = a1;
              do
              {
                v91 = (char *)v90 + 32 * v88 + 32;
                v92 = (2 * v88) | 1;
                v93 = 2 * v88 + 2;
                if (v93 < v85)
                {
                  v94 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v90 + 32 * v88 + 32));
                  if (v94 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)(v91 + 32)))
                  {
                    v91 += 32;
                    v92 = v93;
                  }
                }
                v95 = *((_OWORD *)v91 + 1);
                *(_OWORD *)v90 = *(_OWORD *)v91;
                *((_OWORD *)v90 + 1) = v95;
                v90 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v91;
                v88 = v92;
              }
              while (v92 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
              v96 = v87 - 32;
              if (v91 == v96)
              {
                v86 = v96;
                v108 = v124;
                *(_OWORD *)v91 = v123;
                *((_OWORD *)v91 + 1) = v108;
              }
              else
              {
                v97 = *((_OWORD *)v96 + 1);
                *(_OWORD *)v91 = *(_OWORD *)v96;
                *((_OWORD *)v91 + 1) = v97;
                v98 = v124;
                *(_OWORD *)v96 = v123;
                *((_OWORD *)v96 + 1) = v98;
                v86 = v96;
                v99 = v91 - (char *)a1 + 32;
                if (v99 >= 33)
                {
                  v100 = (((unint64_t)v99 >> 5) - 2) >> 1;
                  v101 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v100);
                  v102 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v101);
                  if (v102 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v91))
                  {
                    v103 = *((_OWORD *)v91 + 1);
                    v125 = *(_OWORD *)v91;
                    v126 = v103;
                    do
                    {
                      v104 = v101;
                      v105 = *((_OWORD *)v101 + 1);
                      *(_OWORD *)v91 = *(_OWORD *)v101;
                      *((_OWORD *)v91 + 1) = v105;
                      if (!v100)
                        break;
                      v100 = (v100 - 1) >> 1;
                      v101 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v100);
                      v106 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v101);
                      v91 = (char *)v104;
                    }
                    while (v106 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125));
                    v107 = v126;
                    *(_OWORD *)v104 = v125;
                    *((_OWORD *)v104 + 1) = v107;
                  }
                }
              }
            }
            while (v85-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 <= 0x1000)
        {
          sub_20BF29000(v13, a1, v8);
        }
        else
        {
          sub_20BF29000(a1, v13, v8);
          sub_20BF29000((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v13 - 32), v121);
          sub_20BF29000((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 64), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v12 + 32), v119);
          sub_20BF29000((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v13 - 32), v13, (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v12 + 32));
          v14 = *((_OWORD *)a1 + 1);
          v125 = *(_OWORD *)a1;
          v126 = v14;
          v15 = *((_OWORD *)v13 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *((_OWORD *)a1 + 1) = v15;
          v16 = v126;
          *(_OWORD *)v13 = v125;
          *((_OWORD *)v13 + 1) = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 - 32));
          if (v17 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a1))
          {
            v36 = *((_OWORD *)a1 + 1);
            v123 = *(_OWORD *)a1;
            v124 = v36;
            v37 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123);
            if (v37 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v8))
            {
              v39 = (char *)a1 + 32;
              a2 = v120;
              do
              {
                v9 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v39;
                if (v39 >= v120)
                  break;
                v40 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123);
                v41 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v9);
                v39 = (char *)v9 + 32;
              }
              while (v40 >= v41);
            }
            else
            {
              v9 = a1;
              a2 = v120;
              do
              {
                v9 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v9 + 32);
                v38 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123);
              }
              while (v38 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v9));
            }
            v42 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2;
            if (v9 < (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2)
            {
              v42 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2;
              do
              {
                v42 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v42 - 32);
                v43 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123);
              }
              while (v43 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v42));
            }
            while (v9 < v42)
            {
              v44 = *((_OWORD *)v9 + 1);
              v125 = *(_OWORD *)v9;
              v126 = v44;
              v45 = *((_OWORD *)v42 + 1);
              *(_OWORD *)v9 = *(_OWORD *)v42;
              *((_OWORD *)v9 + 1) = v45;
              v46 = v126;
              *(_OWORD *)v42 = v125;
              *((_OWORD *)v42 + 1) = v46;
              do
              {
                v9 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v9 + 32);
                v47 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123);
              }
              while (v47 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v9));
              do
              {
                v42 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v42 - 32);
                v48 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123);
              }
              while (v48 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v42));
            }
            v49 = (_OWORD *)((char *)v9 - 32);
            if ((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v9 - 32) != a1)
            {
              v50 = *((_OWORD *)v9 - 1);
              *(_OWORD *)a1 = *v49;
              *((_OWORD *)a1 + 1) = v50;
            }
            a4 = 0;
            v51 = v124;
            *v49 = v123;
            *((_OWORD *)v9 - 1) = v51;
            continue;
          }
        }
        v18 = 0;
        v19 = *((_OWORD *)a1 + 1);
        v123 = *(_OWORD *)a1;
        v124 = v19;
        do
        {
          v18 += 32;
          v20 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + v18));
        }
        while (v20 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123));
        v21 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + v18);
        v22 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v120;
        v57 = v18 == 32;
        a2 = v120;
        if (v57)
        {
          v22 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v120;
          do
          {
            if (v21 >= v22)
              break;
            v22 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v22 - 32);
            v24 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v22);
          }
          while (v24 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123));
        }
        else
        {
          do
          {
            v22 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v22 - 32);
            v23 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v22);
          }
          while (v23 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123));
        }
        if (v21 >= v22)
        {
          v32 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v21 - 32);
        }
        else
        {
          v25 = v21;
          v26 = v22;
          do
          {
            v27 = *((_OWORD *)v25 + 1);
            v125 = *(_OWORD *)v25;
            v126 = v27;
            v28 = *((_OWORD *)v26 + 1);
            *(_OWORD *)v25 = *(_OWORD *)v26;
            *((_OWORD *)v25 + 1) = v28;
            v29 = v126;
            *(_OWORD *)v26 = v125;
            *((_OWORD *)v26 + 1) = v29;
            do
            {
              v25 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v25 + 32);
              v30 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v25);
            }
            while (v30 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123));
            do
            {
              v26 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v26 - 32);
              v31 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v26);
            }
            while (v31 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v123));
          }
          while (v25 < v26);
          v32 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v25 - 32);
        }
        if (v32 != a1)
        {
          v33 = *((_OWORD *)v32 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v32;
          *((_OWORD *)a1 + 1) = v33;
        }
        v34 = v124;
        *(_OWORD *)v32 = v123;
        *((_OWORD *)v32 + 1) = v34;
        if (v21 < v22)
        {
LABEL_32:
          sub_20BF28694(a1, v32, a3, a4 & 1);
          a4 = 0;
          v9 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v32 + 32);
          continue;
        }
        v35 = sub_20BF29138((__n128 *)a1, (char *)v32);
        v9 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v32 + 32);
        if (!sub_20BF29138((__n128 *)v32 + 2, v120))
        {
          if (v35)
            continue;
          goto LABEL_32;
        }
        a2 = (char *)v32;
        if (!v35)
          goto LABEL_2;
        return;
    }
  }
}

__n128 sub_20BF28EDC(__n128 *a1, pxrInternal__aapl__pxrReserved__::TraceEvent *a2, pxrInternal__aapl__pxrReserved__::TraceEvent *a3, pxrInternal__aapl__pxrReserved__::TraceEvent *a4, pxrInternal__aapl__pxrReserved__::TraceEvent *a5)
{
  unint64_t TimeStamp;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  unint64_t v23;
  __n128 v24;
  __n128 v25;

  sub_20BF29324(a1, a2, a3, a4);
  TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a5);
  if (TimeStamp < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4))
  {
    v13 = *(_OWORD *)a4;
    v12 = *((_OWORD *)a4 + 1);
    v14 = *((_OWORD *)a5 + 1);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((_OWORD *)a4 + 1) = v14;
    *(_OWORD *)a5 = v13;
    *((_OWORD *)a5 + 1) = v12;
    v15 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
    if (v15 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3))
    {
      v17 = *(_OWORD *)a3;
      v16 = *((_OWORD *)a3 + 1);
      v18 = *((_OWORD *)a4 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_OWORD *)a3 + 1) = v18;
      *(_OWORD *)a4 = v17;
      *((_OWORD *)a4 + 1) = v16;
      v19 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3);
      if (v19 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a2))
      {
        v21 = *(__n128 *)a2;
        v20 = *((_OWORD *)a2 + 1);
        v22 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v22;
        *(__n128 *)a3 = v21;
        *((_OWORD *)a3 + 1) = v20;
        v23 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a2);
        if (v23 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1))
        {
          v24 = *a1;
          result = a1[1];
          v25 = *((__n128 *)a2 + 1);
          *a1 = *(__n128 *)a2;
          a1[1] = v25;
          *(__n128 *)a2 = v24;
          *((__n128 *)a2 + 1) = result;
        }
      }
    }
  }
  return result;
}

unint64_t sub_20BF29000(pxrInternal__aapl__pxrReserved__::TraceEvent *a1, pxrInternal__aapl__pxrReserved__::TraceEvent *this, pxrInternal__aapl__pxrReserved__::TraceEvent *a3)
{
  unint64_t TimeStamp;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  __int128 v24;

  TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
  v7 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a1);
  v8 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3);
  result = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
  if (TimeStamp >= v7)
  {
    if (v8 < result)
    {
      v14 = *(_OWORD *)this;
      v13 = *((_OWORD *)this + 1);
      v15 = *((_OWORD *)a3 + 1);
      *(_OWORD *)this = *(_OWORD *)a3;
      *((_OWORD *)this + 1) = v15;
      *(_OWORD *)a3 = v14;
      *((_OWORD *)a3 + 1) = v13;
      v16 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
      result = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a1);
      if (v16 < result)
      {
        v18 = *(_OWORD *)a1;
        v17 = *((_OWORD *)a1 + 1);
        v19 = *((_OWORD *)this + 1);
        *(_OWORD *)a1 = *(_OWORD *)this;
        *((_OWORD *)a1 + 1) = v19;
        *(_OWORD *)this = v18;
        *((_OWORD *)this + 1) = v17;
      }
    }
  }
  else
  {
    if (v8 >= result)
    {
      v21 = *(_OWORD *)a1;
      v20 = *((_OWORD *)a1 + 1);
      v22 = *((_OWORD *)this + 1);
      *(_OWORD *)a1 = *(_OWORD *)this;
      *((_OWORD *)a1 + 1) = v22;
      *(_OWORD *)this = v21;
      *((_OWORD *)this + 1) = v20;
      v23 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3);
      result = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
      if (v23 >= result)
        return result;
      v11 = *(_OWORD *)this;
      v10 = *((_OWORD *)this + 1);
      v24 = *((_OWORD *)a3 + 1);
      *(_OWORD *)this = *(_OWORD *)a3;
      *((_OWORD *)this + 1) = v24;
    }
    else
    {
      v11 = *(_OWORD *)a1;
      v10 = *((_OWORD *)a1 + 1);
      v12 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v12;
    }
    *(_OWORD *)a3 = v11;
    *((_OWORD *)a3 + 1) = v10;
  }
  return result;
}

BOOL sub_20BF29138(__n128 *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t TimeStamp;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v11;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v20;
  unint64_t v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = (a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__n128 *)(a2 - 32);
      TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32));
      if (TimeStamp < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1))
      {
        v9 = *a1;
        v8 = a1[1];
        v10 = v6[1];
        *a1 = *v6;
        a1[1] = v10;
        *v6 = v9;
        v6[1] = v8;
      }
      return 1;
    case 3:
      sub_20BF29000((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[2], (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32));
      return 1;
    case 4:
      sub_20BF29324(a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[2], (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[4], (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32));
      return 1;
    case 5:
      sub_20BF28EDC(a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[2], (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[4], (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[6], (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32));
      return 1;
    default:
      v11 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[4];
      sub_20BF29000((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[2], (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[4]);
      v12 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[6];
      if (&a1[6] == (__n128 *)a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v12);
    if (v15 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v11))
    {
      v16 = *((__n128 *)v12 + 1);
      v24 = *(__n128 *)v12;
      v25 = v16;
      v17 = v13;
      while (1)
      {
        v18 = (_OWORD *)((char *)a1->n128_u64 + v17);
        v19 = *(__int128 *)((char *)&a1[5] + v17);
        v18[6] = *(__n128 *)((char *)&a1[4] + v17);
        v18[7] = v19;
        if (v17 == -64)
          break;
        v20 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)(v18 + 2);
        v21 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v24);
        v17 -= 32;
        if (v21 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v20))
        {
          v22 = (__n128 *)((char *)a1 + v17 + 96);
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *v22 = v24;
      v22[1] = v23;
      if (++v14 == 8)
        return (char *)v12 + 32 == a2;
    }
    v11 = v12;
    v13 += 32;
    v12 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v12 + 32);
    if (v12 == (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2)
      return 1;
  }
}

__n128 sub_20BF29324(__n128 *a1, pxrInternal__aapl__pxrReserved__::TraceEvent *a2, pxrInternal__aapl__pxrReserved__::TraceEvent *a3, pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  unint64_t TimeStamp;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;

  sub_20BF29000((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1, a2, a3);
  TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
  if (TimeStamp < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3))
  {
    v11 = *(_OWORD *)a3;
    v10 = *((_OWORD *)a3 + 1);
    v12 = *((_OWORD *)a4 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_OWORD *)a3 + 1) = v12;
    *(_OWORD *)a4 = v11;
    *((_OWORD *)a4 + 1) = v10;
    v13 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3);
    if (v13 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a2))
    {
      v15 = *(__n128 *)a2;
      v14 = *((_OWORD *)a2 + 1);
      v16 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v16;
      *(__n128 *)a3 = v15;
      *((_OWORD *)a3 + 1) = v14;
      v17 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a2);
      if (v17 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1))
      {
        v18 = *a1;
        result = a1[1];
        v19 = *((__n128 *)a2 + 1);
        *a1 = *(__n128 *)a2;
        a1[1] = v19;
        *(__n128 *)a2 = v18;
        *((__n128 *)a2 + 1) = result;
      }
    }
  }
  return result;
}

_OWORD *sub_20BF29418(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, _OWORD *a2)
{
  _OWORD *v2;
  __int128 v3;

  v2 = *(_OWORD **)a1;
  *(_QWORD *)a1 += 32;
  v3 = a2[1];
  *v2 = *a2;
  v2[1] = v3;
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v2;
}

uint64_t sub_20BF2946C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)((char *)pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)a1, (_QWORD *)a2)+ 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BEBD458((uint64_t)v4, v4, (_QWORD *)(a2 + 32));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

void *sub_20BF29500(pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator *a1, char *__s)
{
  size_t v4;
  char *v5;
  char *v6;

  v4 = strlen(__s) + 1;
  v5 = (char *)*((_QWORD *)a1 + 1);
  v6 = &v5[v4];
  if ((unint64_t)&v5[v4] > *(_QWORD *)a1)
  {
    pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator::AllocateBlock(a1, 1uLL, v4);
    v5 = (char *)*((_QWORD *)a1 + 1);
    v6 = &v5[v4];
  }
  *((_QWORD *)a1 + 1) = v6;
  return memcpy(v5, __s, v4);
}

_QWORD *sub_20BF29574(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C51C808;
  result[1] = v3;
  return result;
}

uint64_t sub_20BF295A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C51C808;
  a2[1] = v2;
  return result;
}

void sub_20BF295C4(uint64_t a1, uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection ****v4;
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v5;
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *Type;
  uint64_t *EmptyString;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  const char *v17;
  pxrInternal__aapl__pxrReserved__ *TimeStamp;
  unsigned int v19;
  const char *v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  unsigned int v22;
  const char *v23;
  pxrInternal__aapl__pxrReserved__ *StartTimeStamp;
  pxrInternal__aapl__pxrReserved__ *EndTimeStamp;
  unsigned int v26;
  unsigned int v27;
  const char *v28;
  pxrInternal__aapl__pxrReserved__ *v29;
  int64_t v30;
  _QWORD *v31;
  _QWORD **v32;
  BOOL v33;
  uint64_t (**v34)();
  _QWORD **v35;
  _QWORD *v36[2];
  _QWORD v37[3];
  double CounterValue;
  double v39;
  const char *v40;
  void **v41[6];

  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "libTraceData");
  v4 = *(pxrInternal__aapl__pxrReserved__::TraceCollection *****)(a1 + 8);
  v36[0] = 0;
  v36[1] = 0;
  v34 = off_24C51C888;
  v35 = v36;
  v5 = *v4;
  v6 = v4[1];
  while (v5 != v6)
  {
    if (*v5)
      pxrInternal__aapl__pxrReserved__::TraceCollection::Iterate(*v5, (pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v34);
    v5 += 2;
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "threadEvents");
  memset(v37, 0, sizeof(v37));
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
  v7 = v35;
  if (v35 != v36)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "thread");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this, v7 + 4);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "events");
      pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
      v8 = (_QWORD *)v7[7];
      v9 = (_QWORD *)v7[8];
      while (v8 != v9)
      {
        v10 = (unsigned int *)v8[1];
        Type = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
        switch((int)Type)
        {
          case 1:
          case 2:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
              EmptyString = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            v41[0] = (void **)v10[2];
            v16 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v17 = "Unknown";
            if (v16 <= 7)
              v17 = off_24C51C8F0[(char)v16];
            goto LABEL_23;
          case 3:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
              v14 = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            v41[0] = (void **)v10[2];
            v22 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v23 = "Unknown";
            if (v22 <= 7)
              v23 = off_24C51C8F0[(char)v22];
            v40 = v23;
            StartTimeStamp = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetStartTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v39 = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(StartTimeStamp) / 1000.0;
            EndTimeStamp = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetEndTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            CounterValue = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(EndTimeStamp)
                         / 1000.0;
            sub_20BF2A1F8((pxrInternal__aapl__pxrReserved__::JsWriter *)this, "key", v14, "category", (uint64_t)v41, "type", &v40, "start", &v39, "end", &CounterValue);
            break;
          case 4:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
              EmptyString = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            v41[0] = (void **)v10[2];
            v26 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v17 = "Unknown";
            if (v26 <= 7)
              v17 = off_24C51C8F0[(char)v26];
LABEL_23:
            v40 = v17;
            TimeStamp = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v39 = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(TimeStamp) / 1000.0;
            sub_20BF2A15C((pxrInternal__aapl__pxrReserved__::JsWriter *)this, "key", EmptyString, "category", (uint64_t)v41, "type", &v40, "ts", &v39);
            break;
          case 5:
          case 6:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
              v13 = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            v41[0] = (void **)v10[2];
            v19 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v20 = "Unknown";
            if (v19 <= 7)
              v20 = off_24C51C8F0[(char)v19];
            v40 = v20;
            v21 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v39 = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v21) / 1000.0;
            CounterValue = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            sub_20BF2A1F8((pxrInternal__aapl__pxrReserved__::JsWriter *)this, "key", v13, "category", (uint64_t)v41, "type", &v40, "ts", &v39, "value", &CounterValue);
            break;
          case 7:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
              v15 = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            v27 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v28 = "Unknown";
            if (v27 <= 7)
              v28 = off_24C51C8F0[(char)v27];
            v29 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            v30 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v29);
            pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "key");
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this, v15);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "category");
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "type");
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this, v28);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "ts");
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)this, (double)v30 / 1000.0);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "data");
            pxrInternal__aapl__pxrReserved__::TraceEvent::GetData((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10, (uint64_t)v41);
            pxrInternal__aapl__pxrReserved__::TraceEventData::WriteJson((pxrInternal__aapl__pxrReserved__::TraceEventData *)v41, (pxrInternal__aapl__pxrReserved__::JsWriter *)this);
            sub_20BF207C0((uint64_t)v41);
            pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
            break;
          default:
            break;
        }
        v8 += 2;
      }
      pxrInternal__aapl__pxrReserved__::JsWriter::EndArray((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
      pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
      v31 = (_QWORD *)v7[1];
      if (v31)
      {
        do
        {
          v32 = (_QWORD **)v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD **)v7[2];
          v33 = *v32 == v7;
          v7 = v32;
        }
        while (!v33);
      }
      v7 = v32;
    }
    while (v32 != v36);
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::EndArray((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
  v41[0] = (void **)v37;
  sub_20BDE9EB0(v41);
  pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
  v34 = off_24C51C888;
  sub_20BF2A494((uint64_t)&v35, v36[0]);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v34);
}

void sub_20BF29B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (**a15)(), uint64_t a16, _QWORD *a17, uint64_t a18, char a19)
{
  uint64_t v19;

  *(_QWORD *)(v19 - 112) = &a19;
  sub_20BDE9EB0((void ***)(v19 - 112));
  a15 = off_24C51C888;
  sub_20BF2A494(a13, a17);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF29BFC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51C8E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BF29C38()
{
  return &unk_24C51C8E0;
}

void sub_20BF29C44(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1)
{
  *(_QWORD *)a1 = off_24C51C888;
  sub_20BF2A494((uint64_t)a1 + 8, *((_QWORD **)a1 + 2));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(a1);
}

void sub_20BF29C78(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C51C888;
  sub_20BF2A494((uint64_t)a1 + 8, *((_QWORD **)a1 + 2));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(a1);
  operator delete(v2);
}

uint64_t sub_20BF29CC0()
{
  return 1;
}

char *sub_20BF29CC8(uint64_t a1, __int128 *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  char *result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 *v15;

  result = (char *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(this);
  if (((_DWORD)result - 5) <= 2)
  {
    v15 = a2;
    v9 = sub_20BF29D9C((uint64_t **)(a1 + 8), (const void **)a2, (uint64_t)&unk_20CAC184C, &v15);
    v10 = v9;
    v15 = (__int128 *)this;
    v11 = (uint64_t *)v9[8];
    if ((unint64_t)v11 >= v9[9])
    {
      result = sub_20BF29FBC((char **)v9 + 7, a3, &v15);
    }
    else
    {
      v12 = *a3;
      *v11 = *a3;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          *v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      v11[1] = (uint64_t)this;
      result = (char *)(v11 + 2);
    }
    v10[8] = (uint64_t)result;
  }
  return result;
}

uint64_t *sub_20BF29D9C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BF29E44((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BF29ED8((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20BF29E44@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BF29EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF29ED8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BF29ED8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF29F1C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20BF29F1C(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_20BF29F60(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20BF29F60(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

char *sub_20BF29FBC(char **a1, uint64_t *a2, _QWORD *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  _QWORD *v28;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 3 > v6)
    v6 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v28 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BDEA2F0(v9, v11);
  else
    v12 = 0;
  v13 = &v12[16 * v5];
  v14 = &v12[16 * v11];
  v27 = v14;
  v15 = *a2;
  *(_QWORD *)v13 = *a2;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      *(_QWORD *)v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)v13 + 1) = *a3;
  v18 = v13 + 16;
  v26.i64[1] = (uint64_t)(v13 + 16);
  v20 = *a1;
  v19 = a1[1];
  if (v19 == *a1)
  {
    v22 = vdupq_n_s64((unint64_t)v19);
  }
  else
  {
    do
    {
      v21 = *((_QWORD *)v19 - 2);
      v19 -= 16;
      *((_QWORD *)v13 - 2) = v21;
      v13 -= 16;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v19 + 1);
    }
    while (v19 != v20);
    v22 = *(int64x2_t *)a1;
    v18 = (char *)v26.i64[1];
    v14 = v27;
  }
  *a1 = v13;
  a1[1] = v18;
  v26 = v22;
  v23 = a1[2];
  a1[2] = v14;
  v27 = v23;
  v25 = v22.i64[0];
  sub_20BF2A0F8((uint64_t)&v25);
  return v18;
}

uint64_t sub_20BF2A0F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v5 = *(_QWORD *)(v3 - 16);
    v3 -= 16;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

uint64_t sub_20BF2A15C(pxrInternal__aapl__pxrReserved__::JsWriter *a1, const char *a2, uint64_t *a3, const char *a4, uint64_t a5, const char *a6, const char **a7, const char *a8, double *a9)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(a1);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a1, a3);
  sub_20BF2A2A8((uint64_t **)a1, a4, a5, a6, a7, a8, a9);
  return pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(a1);
}

uint64_t sub_20BF2A1F8(pxrInternal__aapl__pxrReserved__::JsWriter *a1, const char *a2, uint64_t *a3, const char *a4, uint64_t a5, const char *a6, const char **a7, const char *a8, double *a9, const char *a10, double *a11)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(a1);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a1, a3);
  sub_20BF2A360((uint64_t **)a1, a4, a5, a6, a7, a8, a9, a10, a11);
  return pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(a1);
}

uint64_t sub_20BF2A2A8(uint64_t **a1, const char *a2, uint64_t a3, const char *a4, const char **a5, const char *a6, double *a7)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1);
  return sub_20BF2A30C(a1, a4, a5, a6, a7);
}

uint64_t sub_20BF2A30C(uint64_t **a1, const char *a2, const char **a3, const char *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, *a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1, *a5);
}

uint64_t sub_20BF2A360(uint64_t **a1, const char *a2, uint64_t a3, const char *a4, const char **a5, const char *a6, double *a7, const char *a8, double *a9)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1);
  return sub_20BF2A3DC(a1, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_20BF2A3DC(uint64_t **a1, const char *a2, const char **a3, const char *a4, double *a5, const char *a6, double *a7)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, *a3);
  return sub_20BF2A440(a1, a4, a5, a6, a7);
}

uint64_t sub_20BF2A440(uint64_t **a1, const char *a2, double *a3, const char *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1, *a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1, *a5);
}

void sub_20BF2A494(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BF2A494(a1, *a2);
    sub_20BF2A494(a1, a2[1]);
    sub_20BF29F1C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20BF2A4DC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BF2A584((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BF2A680((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_20BF2A584@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xD0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BF2A5EC(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BF2A5D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF2A680(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20BF2A5EC(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  *((_QWORD *)__dst + 21) = 0;
  *(_OWORD *)(__dst + 136) = 0u;
  *(_OWORD *)(__dst + 152) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  pxrInternal__aapl__pxrReserved__::TraceEventList::TraceEventList((pxrInternal__aapl__pxrReserved__::TraceEventList *)(__dst + 24));
  *((_QWORD *)__dst + 19) = 0;
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  return __dst;
}

void sub_20BF2A664(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BF2A680(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF2A6C4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20BF2A6C4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v2;
  void *v3;

  v2 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)(a1 + 24);
  v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(_QWORD *)(a1 + 160) = v3;
    operator delete(v3);
  }
  sub_20BF2A724((_QWORD *)(a1 + 96));
  sub_20BF2A850((uint64_t *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BF2A724(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (void **)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (void **)v8)
    {
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
          operator delete[](v9);
        if ((char *)++v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (void **)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 512;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_20BE97BCC((uint64_t)a1);
}

void sub_20BF2A850(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_20BF2A8C0((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_20BF2A8C0(uint64_t a1)
{
  void *v2;

  sub_20BF2A8F8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF2A8F8(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[5];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BF2A948(uint64_t a1, uint64_t *a2)
{
  void *v3;

  if (a2)
  {
    sub_20BF2A724(a2 + 9);
    sub_20BF2A850(a2 + 4);
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)a2);
    operator delete(v3);
  }
}

void sub_20BF2A984(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BF2A984(a1, *a2);
    sub_20BF2A984(a1, a2[1]);
    sub_20BF2A6C4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BF2A9CC(_QWORD ***a1, _QWORD **a2)
{
  _QWORD **v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_20BF2AA0C((uint64_t)v2, v2[1]);
    free(v2);
  }
}

void sub_20BF2AA0C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BF2AA0C(a1, *a2);
    sub_20BF2AA0C(a1, a2[1]);
    sub_20BF2AA54((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BF2AA54(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  v4 = *(uint64_t **)(a1 + 24);
  v2 = (_QWORD *)(a1 + 24);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20BF2A948((uint64_t)v2, v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

pxrInternal__aapl__pxrReserved__::TraceAggregateTree *pxrInternal__aapl__pxrReserved__::TraceAggregateTree::TraceAggregateTree(pxrInternal__aapl__pxrReserved__::TraceAggregateTree *this)
{
  *((_DWORD *)this + 2) = 1;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *(_QWORD *)this = &unk_24C51C940;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::TraceAggregateTree::Clear(this);
  return this;
}

void sub_20BF2AB2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v7;

  sub_20BF20BCC(v5);
  sub_20BF20BCC(v4);
  sub_20BF2B200(v3, *(_QWORD **)(v1 + 40));
  sub_20BF1DBF0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 + 24));
  sub_20BEBCE60(v2, v7);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceAggregateTree::Clear(pxrInternal__aapl__pxrReserved__::TraceAggregateTree *this)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  sub_20BF2ABFC(&v4);
  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v4;
  v4 = 0;
  sub_20BF1D8F4((_DWORD)this + 24, v2);
  sub_20BF1DBF0(&v4);
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  this = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)((char *)this + 40);
  sub_20BF2B200((uint64_t)this - 8, v3);
  *((_QWORD *)this - 1) = this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  sub_20BF2B260((uint64_t)this + 16);
  sub_20BF2B260((uint64_t)this + 56);
  *((_DWORD *)this + 24) = 0;
}

void sub_20BF2ABE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1DBF0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void sub_20BF2ABFC(_QWORD *a1@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  char v5;

  v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v4, "root");
  sub_20BF2AF38(&v5, &v4, 0, 0, 1, a1);
  if ((v4 & 7) != 0)
  {
    v2 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceAggregateTree::GetCounterIndex(pxrInternal__aapl__pxrReserved__::TraceAggregateTree *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v2;

  v2 = sub_20BF2B2B4((_QWORD *)this + 12, a2);
  if (v2)
    return *((unsigned int *)v2 + 6);
  else
    return 0xFFFFFFFFLL;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(pxrInternal__aapl__pxrReserved__::TraceAggregateTree *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3, double a4)
{
  uint64_t *v8;
  uint64_t result;
  char v10;
  char v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;

  if ((a3 & 0x80000000) == 0
    || (v12 = "trace/aggregateTree.cpp",
        v13 = "AddCounter",
        v14 = 63,
        v15 = "BOOL pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(const TfToken &, int, double)",
        v16 = 0,
        v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "index >= 0", 0),
        result = 0,
        (v10 & 1) != 0))
  {
    if (!sub_20BF2B388((_QWORD *)this + 7, a2)
      || (v12 = "trace/aggregateTree.cpp",
          v13 = "AddCounter",
          v14 = 68,
          v15 = "BOOL pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(const TfToken &, int, double)",
          v16 = 0,
          v11 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_counters.find(key) == _counters.end()", 0), result = 0, (v11 & 1) != 0))
    {
      v8 = (uint64_t *)*((_QWORD *)this + 14);
      if (v8)
      {
        while (1)
        {
          if (*((_DWORD *)v8 + 6) == a3)
          {
            v12 = "trace/aggregateTree.cpp";
            v13 = "AddCounter";
            v14 = 74;
            v15 = "BOOL pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(const TfToken &, int, double)";
            v16 = 0;
            if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "it.second != index", 0) & 1) == 0)
              return 0;
          }
          v8 = (uint64_t *)*v8;
          if (!v8)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        v12 = (char *)a2;
        *((double *)sub_20BF2B45C((uint64_t)this + 56, a2, (uint64_t)&unk_20CAC184C, (uint64_t **)&v12) + 3) = a4;
        v12 = (char *)a2;
        *((_DWORD *)sub_20BF2B728((uint64_t)this + 96, a2, (uint64_t)&unk_20CAC184C, (uint64_t **)&v12) + 6) = a3;
        return 1;
      }
    }
  }
  return result;
}

void sub_20BF2AE84(uint64_t a1)
{
  const void *v2;

  *(_QWORD *)a1 = &unk_24C51C940;
  sub_20BF20BCC(a1 + 96);
  sub_20BF20BCC(a1 + 56);
  sub_20BF2B200(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_20BF1DBF0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
  sub_20BEBCE60((unsigned int **)(a1 + 16), v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_20BF2AEDC(uint64_t a1)
{
  const void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24C51C940;
  sub_20BF20BCC(a1 + 96);
  sub_20BF20BCC(a1 + 56);
  sub_20BF2B200(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_20BF1DBF0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
  sub_20BEBCE60((unsigned int **)(a1 + 16), v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v3);
}

void sub_20BF2AF38(_BYTE *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  void *v12;

  v12 = operator new(0xC0uLL);
  sub_20BF2AFBC((uint64_t)v12, a1, a2, a3, a4, a5);
  *a6 = v12;
}

void sub_20BF2AFA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_20BF2AFBC(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  double result;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C51C998;
  *(_BYTE *)(a1 + 24) = *a2;
  v6 = *a3;
  *(_QWORD *)(a1 + 32) = *a3;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = a6;
  *(_DWORD *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a4;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) &= 0xF0u;
  return result;
}

void sub_20BF2B050(uint64_t a1)
{
  void *v1;

  sub_20BF2B12C(a1);
  operator delete(v1);
}

void sub_20BF2B064(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20BF20BCC(v3);
    operator delete(v4);
  }
}

void sub_20BF2B090(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20BEB3FA4(v3);
    operator delete(v4);
  }
}

void sub_20BF2B0BC(void ***a1)
{
  void **v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  void *v5;

  v1 = *a1;
  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20BF1DBF0(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BF2B12C(uint64_t a1)
{
  void *v2;
  const void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  void **v11;

  *(_QWORD *)a1 = &unk_24C51C998;
  sub_20BF2B090((uint64_t *)(a1 + 176), 0);
  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  sub_20BF2B064((uint64_t *)(a1 + 144), 0);
  v11 = (void **)(a1 + 120);
  sub_20BF29F60(&v11);
  v11 = (void **)(a1 + 96);
  sub_20BF2B0BC(&v11);
  v4 = *(unsigned int **)(a1 + 80);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  v8 = *(_QWORD *)(a1 + 32);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  sub_20BEBCE60((unsigned int **)(a1 + 16), v3);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_20BF2B200(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_20BF2B200(a1, *a2);
    sub_20BF2B200(a1, a2[1]);
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

void sub_20BF2B260(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20BF20C04(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *sub_20BF2B2B4(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v2 - 1);
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v4 == v9)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_20BF2B388(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v2 - 1);
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v4)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_20BF2B45C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF2B6A4(a1, v7, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF2B68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF2B6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *sub_20BF2B728(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF2B970(a1, v7, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF2B958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF2B970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 6) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X2>, uint64_t *a2@<X0>, char a3@<W1>, unint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v28;
  char v29;

  v29 = a3;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild((pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)a2, a1, a7);
  if (*a7)
  {
    *(_BYTE *)(sub_20BF2BBEC(a7) + 24) = a3;
    v14 = sub_20BF2BBEC(a7);
    *(_QWORD *)(v14 + 40) += a4;
    v15 = sub_20BF2BBEC(a7);
    *(_DWORD *)(v15 + 56) += a5;
    v16 = sub_20BF2BBEC(a7);
    *(_DWORD *)(v16 + 64) += a5;
    v17 = sub_20BF2BBEC(a7);
    *(_DWORD *)(v17 + 60) += a6;
    v18 = sub_20BF2BBEC(a7);
    *(_QWORD *)(v18 + 48) += a4;
    result = (_QWORD *)sub_20BF2BBEC(a7);
    result[11] += a4;
  }
  else
  {
    sub_20BF2AF38(&v29, (uint64_t *)a1, a4, a5, a6, &v28);
    v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a7;
    *a7 = (uint64_t)v28;
    v28 = 0;
    sub_20BF1D8F4((int)a7, v20);
    sub_20BF1DBF0(&v28);
    sub_20BF2BC74(a2 + 12, a7);
    v22 = a2[12];
    v21 = a2[13];
    result = sub_20BF2BD8C(a2 + 15, (unint64_t *)a1);
    *result = ((v21 - v22) >> 3) - 1;
  }
  v23 = a2[6];
  v24 = v23 >= a4;
  v25 = v23 - a4;
  if (!v24)
    v25 = 0;
  a2[6] = v25;
  v26 = a2[11];
  v24 = v26 >= a4;
  v27 = v26 - a4;
  if (!v24)
    v27 = 0;
  a2[11] = v27;
  return result;
}

void sub_20BF2BB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v9;

  sub_20BF1DBF0(&a9);
  sub_20BF1DBF0(v9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild@<X0>(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;

  result = sub_20BF2C378((_QWORD *)this + 15, a2);
  if (*((_QWORD **)this + 16) == result)
  {
    *a3 = 0;
  }
  else
  {
    *a3 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * result[1]);
    return (_QWORD *)sub_20BF1DD04(a3);
  }
  return result;
}

uint64_t sub_20BF2BBEC(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::TraceAggregateNode>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::TraceAggregateNode]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9D15ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_20BF2BC74(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (uint64_t *)sub_20BDDF6A8(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[v10];
    v17 = v16;
    v18 = &v14[v13];
    *v16 = *a2;
    sub_20BF1DD04(&v14[v10]);
    ++v17;
    sub_20BF2D460(a1, &v15);
    v9 = (uint64_t *)a1[1];
    result = sub_20BF2D568((uint64_t)&v15);
  }
  else
  {
    *v7 = *a2;
    result = sub_20BF1DD04(v7);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20BF2BD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF2BD8C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v9[2];

  v2 = *a2;
  v9[0] = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v9[0] = (unint64_t)v3;
  }
  v9[1] = 0;
  v5 = sub_20BF2D5B4(a1, v9);
  if ((v9[0] & 7) != 0)
  {
    v6 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return v5 + 1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v42;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v43;
  unint64_t v44[3];

  v4 = *(_QWORD *)(sub_20BF2BBEC(a2) + 32);
  v44[0] = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v44[0] = (unint64_t)v5;
  }
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild((pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)v44, (uint64_t *)&v43);
  if ((v44[0] & 7) != 0)
  {
    v7 = (unsigned int *)(v44[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v43)
  {
    v9 = sub_20BF2BBEC(a2);
    *(_BYTE *)(sub_20BF2BBEC((uint64_t *)&v43) + 24) = *(_BYTE *)(v9 + 24);
    v10 = *(_QWORD *)(sub_20BF2BBEC(a2) + 40);
    v11 = sub_20BF2BBEC((uint64_t *)&v43);
    *(_QWORD *)(v11 + 40) += v10;
    LODWORD(v10) = *(_DWORD *)(sub_20BF2BBEC(a2) + 56);
    v12 = sub_20BF2BBEC((uint64_t *)&v43);
    *(_DWORD *)(v12 + 56) += v10;
    LODWORD(v10) = *(_DWORD *)(sub_20BF2BBEC(a2) + 56);
    v13 = sub_20BF2BBEC((uint64_t *)&v43);
    *(_DWORD *)(v13 + 64) += v10;
    LODWORD(v10) = *(_DWORD *)(sub_20BF2BBEC(a2) + 60);
    v14 = sub_20BF2BBEC((uint64_t *)&v43);
    *(_DWORD *)(v14 + 60) += v10;
    v15 = *(_QWORD *)(sub_20BF2BBEC(a2) + 40);
    v16 = sub_20BF2BBEC((uint64_t *)&v43);
    *(_QWORD *)(v16 + 48) += v15;
    v17 = *(_QWORD *)(sub_20BF2BBEC(a2) + 40);
    v18 = sub_20BF2BBEC((uint64_t *)&v43);
    *(_QWORD *)(v18 + 88) += v17;
    v19 = sub_20BF2BBEC(a2);
    v20 = *(_QWORD *)(v19 + 152);
    for (i = *(_QWORD *)(v19 + 160); v20 != i; v20 += 24)
    {
      v22 = sub_20BF2BBEC((uint64_t *)&v43);
      v44[1] = 0;
      v44[2] = 0;
      LODWORD(v44[0]) = *(_DWORD *)v20;
      v23 = sub_20BF2DDA8((uint64_t *)(v22 + 152), (int *)v44);
      *(float64x2_t *)(v23 + 2) = vaddq_f64(*(float64x2_t *)(v20 + 8), *(float64x2_t *)(v23 + 2));
    }
    v24 = sub_20BF2BBEC(a2);
    v25 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v24 + 96);
    v26 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v24 + 104);
    while (v25 != v26)
    {
      v27 = sub_20BF2BBEC((uint64_t *)&v43);
      v42 = *v25;
      sub_20BF1DD04((uint64_t *)&v42);
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append(v27, &v42);
      sub_20BF1DBF0(&v42);
      ++v25;
    }
  }
  else
  {
    sub_20BF2BC74(a1 + 12, a2);
    v29 = a1[12];
    v28 = a1[13];
    v30 = *(_QWORD *)(sub_20BF2BBEC(a2) + 32);
    v44[0] = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v44[0] = (unint64_t)v31;
    }
    *sub_20BF2BD8C(a1 + 15, v44) = ((v28 - v29) >> 3) - 1;
    if ((v44[0] & 7) != 0)
    {
      v33 = (unsigned int *)(v44[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
  }
  v35 = a1[6];
  if (v35 >= *(_QWORD *)(sub_20BF2BBEC(a2) + 40))
  {
    v37 = a1[6];
    v36 = v37 - *(_QWORD *)(sub_20BF2BBEC(a2) + 40);
  }
  else
  {
    v36 = 0;
  }
  a1[6] = v36;
  v38 = a1[11];
  if (v38 >= *(_QWORD *)(sub_20BF2BBEC(a2) + 40))
  {
    v40 = a1[11];
    v39 = v40 - *(_QWORD *)(sub_20BF2BBEC(a2) + 40);
  }
  else
  {
    v39 = 0;
  }
  a1[11] = v39;
  return sub_20BF1DBF0(&v43);
}

void sub_20BF2C144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a12 & 7) != 0)
  {
    v13 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20BF1DBF0(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetExclusiveTime(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2)
{
  uint64_t v2;

  v2 = 48;
  if (a2)
    v2 = 88;
  return *(_QWORD *)((char *)this + v2);
}

double pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AppendInclusiveCounterValue(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2, double a3)
{
  double *v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = a2;
  v4 = (double *)sub_20BF2DDA8((uint64_t *)this + 19, &v6);
  result = v4[1] + a3;
  v4[1] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetInclusiveCounterValue(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2)
{
  double *v3;
  int v5;

  v5 = a2;
  v3 = (double *)sub_20BF2C274((_QWORD *)this + 19, &v5);
  if (*((double **)this + 20) == v3)
    return 0.0;
  else
    return v3[1];
}

_DWORD *sub_20BF2C274(_QWORD *a1, int *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  _DWORD *result;
  _DWORD *v6;

  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    v4 = sub_20BF2E2F8(v3, a2);
    if (v4)
      return (_DWORD *)(*a1 + 24 * v4[3]);
    else
      return (_DWORD *)a1[1];
  }
  else
  {
    result = (_DWORD *)*a1;
    v6 = (_DWORD *)a1[1];
    if ((_DWORD *)*a1 != v6)
    {
      while (*result != *a2)
      {
        result += 6;
        if (result == v6)
          return (_DWORD *)a1[1];
      }
    }
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AppendExclusiveCounterValue(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2, double a3)
{
  double *v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = a2;
  v4 = (double *)sub_20BF2DDA8((uint64_t *)this + 19, &v6);
  result = v4[2] + a3;
  v4[2] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetExclusiveCounterValue(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2)
{
  double *v3;
  int v5;

  v5 = a2;
  v3 = (double *)sub_20BF2C274((_QWORD *)this + 19, &v5);
  if (*((double **)this + 20) == v3)
    return 0.0;
  else
    return v3[2];
}

_QWORD *sub_20BF2C378(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;

  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    v4 = sub_20BF2B388(v3, a2);
    if (v4)
      return (_QWORD *)(*a1 + 16 * v4[3]);
    else
      return (_QWORD *)a1[1];
  }
  else
  {
    result = (_QWORD *)*a1;
    v6 = (_QWORD *)a1[1];
    if ((_QWORD *)*a1 != v6)
    {
      while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        result += 2;
        if (result == v6)
          return (_QWORD *)a1[1];
      }
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AdjustForOverheadAndNoise(_QWORD *this, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;

  v6 = this;
  v7 = (uint64_t *)this[12];
  v8 = (uint64_t *)this[13];
  v23 = v8 - v7;
  if (v8 == v7)
  {
    v19 = (v8 - v7) * a2;
    v20 = this[5];
    v21 = v20 >= v19;
    v22 = v20 - v19;
    if (v21)
      v14 = v22;
    else
      v14 = 0;
    this[5] = v14;
  }
  else
  {
    do
    {
      v10 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_20BF2BBEC(v7);
      this = (_QWORD *)pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AdjustForOverheadAndNoise(v10, a2, a3, &v23);
      ++v7;
    }
    while (v7 != v8);
    v11 = (uint64_t *)v6[12];
    v12 = (uint64_t *)v6[13];
    v13 = v6[5];
    if (v13 >= v23 * a2)
      v14 = v13 - v23 * a2;
    else
      v14 = 0;
    v6[5] = v14;
    if (v11 != v12)
    {
      v15 = 20 * a3;
      do
      {
        v16 = *(_QWORD *)(sub_20BF2BBEC(v11) + 40);
        v17 = v15 * *(int *)(sub_20BF2BBEC(v11) + 56);
        this = (_QWORD *)sub_20BF2BBEC(v11);
        if (v17 >= v16)
        {
          this[6] = 0;
          this = (_QWORD *)sub_20BF2BBEC(v11);
          this[5] = 0;
        }
        else
        {
          v18 = v14;
          if (v14 > this[5])
          {
            this = (_QWORD *)sub_20BF2BBEC(v11);
            v18 = this[5];
          }
          v14 -= v18;
        }
        ++v11;
      }
      while (v11 != v12);
    }
  }
  v6[6] = v14;
  if (a4)
    *a4 += v23;
  return this;
}

void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::MarkRecursiveChildren(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this)
{
  const char *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t i;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  signed int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t (*v34)(uint64_t *);
  char v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  char v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  if ((*((_BYTE *)this + 184) & 4) == 0)
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    sub_20BF2E46C(&v81, (uint64_t)this);
    sub_20BF2D3EC((uint64_t)&v74, &v81, -1);
    sub_20BF2CC14(&v83, (uint64_t)&v74);
    v1 = v75;
    if (v75)
    {
      v2 = (unsigned int *)(v75 + 8);
      do
      {
        v3 = __ldxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
        (*(void (**)(const char *))(*(_QWORD *)v1 + 8))(v1);
    }
    v5 = v82;
    if (v82)
    {
      v6 = (unsigned int *)(v82 + 8);
      do
      {
        v7 = __ldxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    for (i = v84; v84 != v83; i = v84)
    {
      v79 = *(void ***)(i - 24);
      v10 = *(_QWORD *)(i - 16);
      v80 = v10;
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        i = v84;
      }
      v14 = *(_DWORD *)(i - 8);
      v13 = *(unsigned int *)(i - 4);
      v15 = sub_20BF1CE84((uint64_t *)&v79);
      *(_BYTE *)(v15 + 184) |= 8u;
      if ((_DWORD)v13)
      {
        if ((int)v13 >= 1)
        {
          v16 = 0;
          v17 = -1431655765 * ((unint64_t)(v84 - v83) >> 3) - 1;
          do
          {
            v18 = sub_20BF1CE84((uint64_t *)&v79);
            if ((*(_BYTE *)(sub_20BF2BBEC((uint64_t *)(*(_QWORD *)(v18 + 96) + 8 * v16)) + 184) & 8) != 0)
            {
              --*(_DWORD *)(v83 + 24 * v17 + 20);
            }
            else
            {
              v19 = sub_20BF1CE84((uint64_t *)&v79);
              sub_20BF1DC1C(&v68, (uint64_t *)(*(_QWORD *)(v19 + 96) + 8 * v16));
              sub_20BF2D3EC((uint64_t)&v74, &v68, v17);
              sub_20BF2CC14(&v83, (uint64_t)&v74);
              v20 = v75;
              if (v75)
              {
                v21 = (unsigned int *)(v75 + 8);
                do
                {
                  v22 = __ldxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                  (*(void (**)(const char *))(*(_QWORD *)v20 + 8))(v20);
              }
              v24 = v69;
              if (v69)
              {
                v25 = (unsigned int *)(v69 + 8);
                do
                {
                  v26 = __ldxr(v25);
                  v27 = v26 - 1;
                }
                while (__stlxr(v27, v25));
                if (!v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
              }
            }
            ++v16;
          }
          while (v16 != v13);
        }
      }
      else
      {
        v28 = v14;
        do
        {
          if (v28 == -1)
            break;
          v29 = v83;
          if (v28 > (int)(-1431655765 * ((unint64_t)(v84 - v83) >> 3)))
          {
            v74 = (void **)"trace/aggregateNode.cpp";
            v75 = "MarkRecursiveChildren";
            v76 = 250;
            v77 = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::MarkRecursiveChildren()";
            v78 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 1, (pxrInternal__aapl__pxrReserved__ *)"Corrupt stack state.");
            v29 = v83;
          }
          v30 = (uint64_t *)(v29 + 24 * v28);
          v72 = *v30;
          v31 = v30[1];
          v73 = v31;
          if (v31)
          {
            v32 = (unsigned int *)(v31 + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v34 = sub_20BF1D840(&v72);
          if (!(v35 & 1 | (unint64_t)v34))
          {
            v74 = (void **)"trace/aggregateNode.cpp";
            v75 = "MarkRecursiveChildren";
            v76 = 259;
            v77 = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::MarkRecursiveChildren()";
            v78 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stack state.");
          }
          v36 = *(_QWORD *)(sub_20BF1CE84((uint64_t *)&v79) + 32);
          if ((v36 & 7) != 0)
          {
            v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 2, v37));
            if ((v38 & 1) == 0)
              v36 &= 0xFFFFFFFFFFFFFFF8;
          }
          v39 = *(_QWORD *)(sub_20BF1CE84(&v72) + 32);
          if ((v39 & 7) != 0)
          {
            v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 2, v40));
            if ((v41 & 1) == 0)
              v39 &= 0xFFFFFFFFFFFFFFF8;
          }
          v42 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          if ((v39 & 7) != 0)
          {
            do
              v43 = __ldxr(v42);
            while (__stlxr(v43 - 2, v42));
          }
          v44 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
          if ((v36 & 7) != 0)
          {
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
          if (v44 == v42)
          {
            v46 = sub_20BF1CE84(&v72);
            v47 = (void **)v80;
            if (v80)
            {
              if (*(_BYTE *)(sub_20BEB47BC(&v80) + 14))
                v47 = v79;
              else
                v47 = 0;
            }
            v74 = v47;
            sub_20BF1DD04((uint64_t *)&v74);
            pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(v46, (uint64_t *)&v74);
            sub_20BF1DBF0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v74);
            v48 = sub_20BF1CE84((uint64_t *)&v79);
            v70 = v72;
            v71 = v73;
            if (v73)
            {
              v49 = (unsigned int *)(v73 + 8);
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
            }
            pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_SetAsRecursionMarker(v48, &v70);
            v51 = v71;
            if (v71)
            {
              v52 = (unsigned int *)(v71 + 8);
              do
              {
                v53 = __ldxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
                (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
            }
          }
          else
          {
            v28 = *(_DWORD *)(v83 + 24 * v28 + 16);
          }
          v55 = v73;
          if (v73)
          {
            v56 = (unsigned int *)(v73 + 8);
            do
            {
              v57 = __ldxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
              (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
          }
        }
        while (v44 != v42);
        if ((v14 & 0x80000000) == 0)
          --*(_DWORD *)(v83 + 24 * v14 + 20);
        v59 = v84;
        v60 = *(unsigned int **)(v84 - 16);
        if (v60)
        {
          v61 = v60 + 2;
          do
          {
            v62 = __ldxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 8))(v60);
        }
        v84 = v59 - 24;
      }
      v64 = v80;
      if (v80)
      {
        v65 = (unsigned int *)(v80 + 8);
        do
        {
          v66 = __ldxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      }
    }
    v74 = (void **)&v83;
    sub_20BF2E3C4(&v74);
  }
}

void sub_20BF2CA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  v26 = a17;
  if (a17)
  {
    v27 = (unsigned int *)(a17 + 8);
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v30 = a24;
  if (a24)
  {
    v31 = (unsigned int *)(a24 + 8);
    do
    {
      v32 = __ldxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  a16 = (void **)(v24 - 112);
  sub_20BF2E3C4(&a16);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BF2CC14(uint64_t *a1, uint64_t a2)
{
  unsigned int *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (unsigned int *)(a1 + 2);
  v5 = v6;
  v7 = *((_QWORD *)result - 1);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_20BDE4FF4((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    sub_20BF2E524(a1, v16);
    v8 = a1[1];
    result = sub_20BF2E6C0((unsigned int *)v16);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_20BF2CD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF2E6C0((unsigned int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t (*v5)(uint64_t *);
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v45;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v46;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v47;
  char *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  char v52;

  while (1)
  {
    v3 = a1;
    if ((*(_BYTE *)(a1 + 184) & 2) == 0)
    {
      *(_DWORD *)(a1 + 64) += *(_DWORD *)(sub_20BF2BBEC(a2) + 64);
      *(_QWORD *)(v3 + 88) += *(_QWORD *)(sub_20BF2BBEC(a2) + 88);
      *(_BYTE *)(v3 + 184) |= 4u;
      v7 = sub_20BF2BBEC(a2);
      v8 = *(_QWORD *)(v7 + 104) - *(_QWORD *)(v7 + 96);
      if (!v8)
        return;
      v9 = 0;
      v10 = v8 >> 3;
      if (v10 <= 1)
        v11 = 1;
      else
        v11 = v10;
      while (1)
      {
        v47 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(_QWORD *)(sub_20BF2BBEC(a2) + 96)
                                                                                   + 8 * v9);
        sub_20BF1DD04((uint64_t *)&v47);
        if (v47)
          break;
        v48 = "trace/aggregateNode.cpp";
        v49 = "_MergeRecursive";
        v50 = 339;
        v51 = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(const TraceAggregateNodeRefPtr &)";
        v52 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL child is not allowed.");
LABEL_45:
        sub_20BF1DBF0(&v47);
        if (++v9 == v11)
          return;
      }
      v12 = *(char **)(sub_20BF2BBEC((uint64_t *)&v47) + 32);
      v48 = v12;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          v48 = (char *)v13;
      }
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild((pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v48, (uint64_t *)&v46);
      if (v46)
      {
        v15 = (*(_BYTE *)(sub_20BF2BBEC((uint64_t *)&v47) + 184) & 2) == 0
           && (*(_BYTE *)(sub_20BF2BBEC((uint64_t *)&v46) + 184) & 2) == 0;
        if ((*(_BYTE *)(sub_20BF2BBEC((uint64_t *)&v47) + 184) & 2) != 0)
          v30 = 0;
        else
          v30 = (*(unsigned __int8 *)(sub_20BF2BBEC((uint64_t *)&v46) + 184) >> 1) & 1;
        if ((v15 | v30) != 1)
          goto LABEL_42;
      }
      else
      {
        v16 = sub_20BF2BBEC((uint64_t *)&v47);
        v17 = *(_QWORD *)(sub_20BF2BBEC((uint64_t *)&v47) + 32);
        v44 = v17;
        if ((v17 & 7) != 0)
        {
          v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 2, v18));
          if ((v19 & 1) == 0)
            v44 = (uint64_t)v18;
        }
        v20 = *(_QWORD *)(sub_20BF2BBEC((uint64_t *)&v47) + 40);
        v21 = sub_20BF2BBEC((uint64_t *)&v47);
        sub_20BF2AF38((_BYTE *)(v16 + 24), &v44, v20, 0, *(_DWORD *)(v21 + 60), &v45);
        v23 = v45;
        v22 = v46;
        v45 = 0;
        v46 = v23;
        sub_20BF1D8F4((int)&v46, v22);
        sub_20BF1DBF0(&v45);
        if ((v44 & 7) != 0)
        {
          v24 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        v26 = *(_QWORD *)(sub_20BF2BBEC((uint64_t *)&v47) + 48);
        *(_QWORD *)(sub_20BF2BBEC((uint64_t *)&v46) + 48) = v26;
        *(_QWORD *)(sub_20BF2BBEC((uint64_t *)&v46) + 88) = 0;
        sub_20BF2BC74((uint64_t *)(v3 + 96), (uint64_t *)&v46);
        v28 = *(_QWORD *)(v3 + 96);
        v27 = *(_QWORD *)(v3 + 104);
        *sub_20BF2BD8C((uint64_t *)(v3 + 120), (unint64_t *)&v48) = ((v27 - v28) >> 3) - 1;
        if ((*(_BYTE *)(sub_20BF2BBEC((uint64_t *)&v47) + 184) & 2) != 0)
        {
          v31 = sub_20BF2BBEC((uint64_t *)&v46);
          v32 = sub_20BF2BBEC((uint64_t *)&v47);
          v33 = *(_QWORD *)(v32 + 80);
          v42 = *(_QWORD *)(v32 + 72);
          v43 = v33;
          if (v33)
          {
            v34 = (unsigned int *)(v33 + 8);
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_SetAsRecursionMarker(v31, &v42);
          v36 = v43;
          if (v43)
          {
            v37 = (unsigned int *)(v43 + 8);
            do
            {
              v38 = __ldxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          }
          goto LABEL_42;
        }
      }
      v29 = sub_20BF2BBEC((uint64_t *)&v46);
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(v29, &v47);
LABEL_42:
      sub_20BF1DBF0(&v46);
      if ((v48 & 7) != 0)
      {
        v40 = (unsigned int *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      goto LABEL_45;
    }
    v4 = (uint64_t *)(a1 + 72);
    v5 = sub_20BF1D840((_QWORD *)(a1 + 72));
    if (!(v6 & 1 | (unint64_t)v5))
      break;
    a1 = sub_20BF1CE84(v4);
  }
  v48 = "trace/aggregateNode.cpp";
  v49 = "_MergeRecursive";
  v50 = 313;
  v51 = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(const TraceAggregateNodeRefPtr &)";
  v52 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Marker has no or expired parent.");
}

void sub_20BF2D144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, uint64_t a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a14, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  if (a11)
  {
    v17 = a11 + 2;
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  sub_20BF1DBF0(&a14);
  if ((a16 & 7) != 0)
  {
    v20 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  sub_20BF1DBF0(&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_SetAsRecursionMarker(uint64_t a1, _QWORD *a2)
{
  uint64_t (*v3)(uint64_t *);
  char v4;
  _QWORD v5[4];
  char v6;

  *(_BYTE *)(a1 + 184) |= 2u;
  sub_20BF2D298(a1 + 72, (uint64_t)a2);
  v3 = sub_20BF1D840(a2);
  if (!(v4 & 1 | (unint64_t)v3))
  {
    v5[0] = "trace/aggregateNode.cpp";
    v5[1] = "_SetAsRecursionMarker";
    v5[2] = 417;
    v5[3] = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_SetAsRecursionMarker(TraceAggregateNodePtr)";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Marker has no or expired parent.");
  }
}

uint64_t sub_20BF2D298(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (v3)
  {
    v7 = v3 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceAggregateNode::CalculateInclusiveCounterValues(uint64_t this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (_QWORD *)this;
  v2 = *(uint64_t **)(this + 96);
  v3 = *(uint64_t **)(this + 104);
  while (v2 != v3)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_20BF2BBEC(v2);
    this = pxrInternal__aapl__pxrReserved__::TraceAggregateNode::CalculateInclusiveCounterValues(v4);
    ++v2;
  }
  v5 = v1[19];
  v6 = v1[20];
  v7 = v1 + 19;
  while (v5 != v6)
  {
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 16);
    v5 += 24;
  }
  v8 = (uint64_t *)v1[12];
  for (i = (uint64_t *)v1[13]; v8 != i; ++v8)
  {
    this = sub_20BF2BBEC(v8);
    v10 = *(_QWORD *)(this + 152);
    v11 = *(_QWORD *)(this + 160);
    while (v10 != v11)
    {
      if (*(double *)(v10 + 8) != 0.0)
      {
        v13 = 0;
        v14 = 0;
        v12 = *(_DWORD *)v10;
        this = (uint64_t)sub_20BF2DDA8(v7, &v12);
        *(double *)(this + 8) = *(double *)(v10 + 8) + *(double *)(this + 8);
      }
      v10 += 24;
    }
  }
  return this;
}

uint64_t sub_20BF2D3EC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 16) = a3;
  v7 = sub_20BF1CE84(a2);
  *(_DWORD *)(a1 + 20) = (*(_QWORD *)(v7 + 104) - *(_QWORD *)(v7 + 96)) >> 3;
  return a1;
}

void sub_20BF2D448(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B36C(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF2D460(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF2D4D4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF2D4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v10 = 0;
  v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    v12 = (uint64_t *)(v11 + v10);
    *v12 = *(_QWORD *)(a3 + v10 - 8);
    v10 -= 8;
    sub_20BF1DD04(v12);
  }
  return a6;
}

uint64_t sub_20BF2D568(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_20BF1DBF0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20BF2D5B4(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *result;
  _QWORD *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;

  v4 = a1[3];
  if (v4)
  {
    v5 = (a1[1] - *a1) >> 4;
    v6 = *a2;
    if ((*a2 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = v6;
    v26 = v5;
    v9 = sub_20BF2D7C8(v4, &v25, (uint64_t *)&v25);
    if ((v25 & 7) != 0)
    {
      v11 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if (!v10)
      return (_QWORD *)(*a1 + 16 * v9[3]);
    goto LABEL_17;
  }
  result = (_QWORD *)*a1;
  v14 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v14)
  {
    while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      result += 2;
      if (result == v14)
        goto LABEL_17;
    }
  }
  if (result == v14)
  {
LABEL_17:
    v15 = *a2;
    v25 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
      {
        v25 = v15 & 0xFFFFFFFFFFFFFFF8;
        v15 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    v18 = a2[1];
    v26 = v18;
    v19 = (unint64_t *)a1[1];
    if ((unint64_t)v19 >= a1[2])
    {
      v22 = sub_20BF2DA94(a1, (uint64_t *)&v25);
      v15 = v25;
    }
    else
    {
      *v19 = v15;
      if ((v15 & 7) != 0)
      {
        v20 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          *v19 &= 0xFFFFFFFFFFFFFFF8;
      }
      v19[1] = v18;
      v22 = (uint64_t)(v19 + 2);
    }
    a1[1] = v22;
    if ((v15 & 7) != 0)
    {
      v23 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
      v22 = a1[1];
    }
    if ((unint64_t)(v22 - *a1) >= 0x7F1)
    {
      sub_20BF2DC7C(a1);
      v22 = a1[1];
    }
    return (_QWORD *)(v22 - 16);
  }
  return result;
}

_QWORD *sub_20BF2D7C8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF2DA10(a1, v6, a3, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF2D9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF2DA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[2] = *a3;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = a3[1];
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t sub_20BF2DA94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[16 * v9];
  v12 = *a2;
  *(_QWORD *)v11 = *a2;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      *(_QWORD *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)v11 + 1) = a2[1];
  v17[2] = v11 + 16;
  sub_20BF2DBA4(a1, v17);
  v15 = a1[1];
  sub_20BF2A0F8((uint64_t)v17);
  return v15;
}

void sub_20BF2DB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF2A0F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF2DBA4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF2DC18((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], (_QWORD *)a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF2DC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  result = a6;
  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      v10 = a7;
      v12 = *(_QWORD *)(v9 - 16);
      v9 -= 16;
      v11 = v12;
      *(a7 - 2) = v12;
      a7 -= 2;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          *a7 &= 0xFFFFFFFFFFFFFFF8;
      }
      *(v10 - 1) = *(_QWORD *)(a3 - 8);
      a3 = v9;
    }
    while (v9 != a5);
  }
  return result;
}

void sub_20BF2DC7C(uint64_t *a1)
{
  uint64_t *v1;
  _OWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12[2];

  v1 = a1 + 3;
  if (!a1[3])
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
    sub_20BF2B064(v1, (uint64_t)v3);
    v4 = *a1;
    if (a1[1] != *a1)
    {
      v5 = 0;
      do
      {
        v6 = *v1;
        v7 = *(_QWORD *)(v4 + 16 * v5);
        if ((v7 & 7) != 0)
        {
          v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 2, v8));
          if ((v9 & 1) == 0)
            v7 &= 0xFFFFFFFFFFFFFFF8;
        }
        v12[0] = v7;
        v12[1] = v5;
        sub_20BF2D7C8(v6, v12, v12);
        if ((v12[0] & 7) != 0)
        {
          v10 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v11 = __ldxr(v10);
          while (__stlxr(v11 - 2, v10));
        }
        ++v5;
        v4 = *a1;
      }
      while (v5 < (a1[1] - *a1) >> 4);
    }
  }
}

void sub_20BF2DD68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BF20BCC(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_DWORD *sub_20BF2DDA8(uint64_t *a1, int *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char v7;
  unint64_t v8;
  _DWORD *result;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _BYTE v23[20];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a1[3];
  if (v4)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
    *(_DWORD *)v23 = *a2;
    *(_QWORD *)&v23[8] = v5;
    v6 = sub_20BF2E0C8(v4, (int *)v23, v23);
    if (!v7)
      return (_DWORD *)(*a1 + 24 * v6[3]);
    v8 = a1[1];
    goto LABEL_9;
  }
  result = (_DWORD *)*a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    while (*result != *a2)
    {
      result += 6;
      if (result == (_DWORD *)v8)
        goto LABEL_9;
    }
  }
  if (result == (_DWORD *)v8)
  {
LABEL_9:
    v10 = *a2;
    *(_OWORD *)&v23[4] = *(_OWORD *)(a2 + 2);
    v11 = a1[2];
    if (v8 >= v11)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *a1) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *a1) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[24 * v13];
      v19 = &v17[24 * v16];
      *(_DWORD *)v18 = v10;
      *(_OWORD *)(v18 + 4) = *(_OWORD *)v23;
      *((_DWORD *)v18 + 5) = *(_DWORD *)&v23[16];
      v12 = (uint64_t)(v18 + 24);
      v21 = (char *)*a1;
      v20 = (char *)a1[1];
      if (v20 != (char *)*a1)
      {
        do
        {
          v22 = *(_OWORD *)(v20 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v20 - 1);
          *(_OWORD *)(v18 - 24) = v22;
          v18 -= 24;
          v20 -= 24;
        }
        while (v20 != v21);
        v20 = (char *)*a1;
      }
      *a1 = (uint64_t)v18;
      a1[1] = v12;
      a1[2] = (uint64_t)v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_DWORD *)v8 = v10;
      *(_OWORD *)(v8 + 4) = *(_OWORD *)v23;
      *(_DWORD *)(v8 + 20) = *(_DWORD *)&v23[16];
      v12 = v8 + 24;
    }
    a1[1] = v12;
    sub_20BF2DFD0(a1);
    return (_DWORD *)(a1[1] - 24);
  }
  return result;
}

void sub_20BF2DFD0(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) >= 0x80)
  {
    v2 = a1 + 3;
    if (!a1[3])
    {
      v3 = operator new(0x28uLL);
      *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_20BDEC6E0((uint64_t)v3, 0x80uLL);
      sub_20BF2B090(v2, (uint64_t)v3);
      v4 = *a1;
      if (a1[1] != *a1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = a1[3];
          LODWORD(v8) = *(_DWORD *)(v4 + v5);
          *((_QWORD *)&v8 + 1) = v6;
          sub_20BF2E0C8(v7, (int *)&v8, &v8);
          ++v6;
          v4 = *a1;
          v5 += 24;
        }
        while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
      }
    }
  }
}

void sub_20BF2E0B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BEB3FA4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF2E0C8(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_20BF2E2E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF2E2F8(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v2 - 1);
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  for (result = *v7; result; result = (uint64_t *)*result)
  {
    v9 = result[1];
    if (v9 == v4)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(_QWORD *)&v2)
          v9 %= *(_QWORD *)&v2;
      }
      else
      {
        v9 &= *(_QWORD *)&v2 - 1;
      }
      if (v9 != v6)
        return 0;
    }
  }
  return result;
}

void sub_20BF2E3C4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BF2E404((unsigned int *)v2);
    operator delete(**a1);
  }
}

unsigned int *sub_20BF2E404(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = result;
  v2 = *(_QWORD *)result;
  for (i = *((_QWORD *)result + 1); i != v2; i -= 24)
  {
    result = *(unsigned int **)(i - 16);
    if (result)
    {
      v4 = result + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *((_QWORD *)v1 + 1) = v2;
  return result;
}

_QWORD *sub_20BF2E46C(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20BF2E50C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF2E524(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF2E598((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF2E598(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *a3 = 0;
      a3[1] = 0;
      *(_QWORD *)(v7 - 8) = a3[2];
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BF2E62C((uint64_t)v11);
  return v9;
}

uint64_t sub_20BF2E62C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF2E660((unsigned int *)a1);
  return a1;
}

unsigned int *sub_20BF2E660(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  v2 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  while (v1 != v2)
  {
    result = *(unsigned int **)(v1 + 8);
    if (result)
    {
      v3 = result + 2;
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    v1 += 24;
  }
  return result;
}

unsigned int *sub_20BF2E6C0(unsigned int *a1)
{
  sub_20BF2E6F0(a1);
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int *sub_20BF2E6F0(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      *((_QWORD *)v3 + 2) = v1 - 24;
      result = *(unsigned int **)(v1 - 16);
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  pxrInternal__aapl__pxrReserved__::TraceCategory *v6;
  char *v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9D1A2 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCategory*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCategory*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v6 = (pxrInternal__aapl__pxrReserved__::TraceCategory *)operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::TraceCategory::TraceCategory(v6);
      v8 = atomic_load(a1);
      if (v8)
      {
        if (v6 != (pxrInternal__aapl__pxrReserved__::TraceCategory *)v8)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>"
                "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TraceCategory]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v7);
        }
      }
      else
      {
        do
          v10 = __ldaxr(a1);
        while (__stlxr((unint64_t)v6, a1));
        if (v10)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>"
                "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TraceCategory]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v7, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCategory*> &)::isInitializing);
  }
  v11 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_13TraceCategoryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BF2E948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::SetInstanceConstructed(unint64_t result)
{
  unint64_t v1;
  char *v2;
  char *v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance));
  if (v1)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v4[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::"
            "SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TraceCategory]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::DeleteInstance()
{
  char **i;
  unint64_t v1;

  for (i = (char **)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
        i;
        i = (char **)v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
    if ((char **)v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance))
      {
        sub_20BF28644((uint64_t)i, i[1]);
        operator delete(i);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

pxrInternal__aapl__pxrReserved__::TraceCategory *pxrInternal__aapl__pxrReserved__::TraceCategory::TraceCategory(pxrInternal__aapl__pxrReserved__::TraceCategory *this)
{
  void *__p[2];
  char v4;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  sub_20BDDC0E4(__p, "Default");
  pxrInternal__aapl__pxrReserved__::TraceCategory::RegisterCategory((uint64_t **)this, 0, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_20BF2EB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_20BF28644(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceCategory::RegisterCategory(uint64_t **a1, int a2, __int128 *a3)
{
  int v4;
  __int128 __p;
  uint64_t v6;

  v4 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    __p = *a3;
    v6 = *((_QWORD *)a3 + 2);
  }
  sub_20BF2ED04(a1, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
}

void sub_20BF2EBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::TraceCategory::GetInstance(pxrInternal__aapl__pxrReserved__::TraceCategory *this)
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceCategory::GetCategories@<X0>(pxrInternal__aapl__pxrReserved__::TraceCategory *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned int v13[3];

  v13[0] = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_20BF2EDA8((uint64_t)this, v13);
  v5 = (uint64_t)result;
  v7 = v6;
  if (result != v6)
  {
    v8 = a3[1];
    do
    {
      v9 = (__int128 *)(v5 + 40);
      if (v8 >= a3[2])
      {
        result = (_QWORD *)sub_20BE4EE50(a3, v9);
        v8 = (unint64_t)result;
      }
      else
      {
        result = sub_20BE4EDF4(a3, v9);
        v8 += 24;
      }
      a3[1] = v8;
      v10 = *(_QWORD **)(v5 + 8);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = *(_QWORD **)(v5 + 16);
          v12 = *v11 == v5;
          v5 = (uint64_t)v11;
        }
        while (!v12);
      }
      v5 = (uint64_t)v11;
    }
    while (v11 != v7);
  }
  return result;
}

void sub_20BF2ECE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_20BF2ED04(uint64_t **a1, int *a2)
{
  char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t **v10;

  v4 = (char *)operator new(0x40uLL);
  v5 = *((_QWORD *)a2 + 3);
  v6 = *(_OWORD *)(a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v7 = a1 + 1;
  v8 = a1[1];
  v9 = *a2;
  *((_DWORD *)v4 + 8) = *a2;
  *(_OWORD *)(v4 + 40) = v6;
  *((_QWORD *)v4 + 7) = v5;
  if (v8)
  {
    do
    {
      while (1)
      {
        v7 = (uint64_t **)v8;
        if (v9 >= *((_DWORD *)v8 + 8))
          break;
        v8 = (uint64_t *)*v8;
        v10 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      v8 = (uint64_t *)v8[1];
    }
    while (v8);
    v10 = v7 + 1;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v7, v10, (uint64_t *)v4);
  return v4;
}

uint64_t *sub_20BF2EDA8(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *result;
  uint64_t *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = *((_DWORD *)v3 + 8);
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (uint64_t *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = *((_DWORD *)v7 + 8);
      v9 = v8 >= v4;
      if (v8 >= v4)
        v10 = (uint64_t **)v7;
      else
        v10 = (uint64_t **)(v7 + 1);
      if (v9)
        result = v7;
      v7 = *v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 32))
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = (uint64_t *)v11;
      v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TraceCollection::AddToCollection(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v6;

  v6 = (uint64_t **)sub_20BF23694((uint64_t)a1, a2);
  if (a1 + 1 == v6)
    return sub_20BF2F3E4(a1, a2, (uint64_t)a2, a3);
  else
    return pxrInternal__aapl__pxrReserved__::TraceEventList::Append(v6[7], (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)*a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollection::_Iterate(pxrInternal__aapl__pxrReserved__::TraceCollection **this, pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::TraceCollection *v16;
  pxrInternal__aapl__pxrReserved__::TraceCollection *v17;
  BOOL v18;
  _QWORD v20[4];
  _QWORD v21[4];
  _OWORD v22[2];
  int v23;

  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *))(*(_QWORD *)a2 + 16))(a2);
  v6 = *this;
  if (*this != (pxrInternal__aapl__pxrReserved__::TraceCollection *)(this + 1))
  {
    do
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *, uint64_t))(*(_QWORD *)a2 + 32))(a2, (uint64_t)v6 + 32);
      v7 = *((_QWORD *)v6 + 7);
      if (a3)
      {
        v8 = *(uint64_t **)(v7 + 16);
        if (v8)
          v9 = *v8;
        else
          v9 = 0;
        v21[0] = *(_QWORD *)(v7 + 16);
        v21[1] = v9;
        v21[2] = v8;
        v21[3] = v9;
        v14 = *(_QWORD *)(v7 + 8);
        v15 = v14 + 32;
        if (!v14)
          v15 = 0;
        v20[0] = v14;
        v20[1] = v15;
        v20[2] = v14;
        v20[3] = v15;
        sub_20BF2F034((uint64_t)this, (uint64_t)a2, v22, (uint64_t)v6 + 32, (uint64_t)v21, (uint64_t)v20);
      }
      else
      {
        v10 = *(_QWORD **)(v7 + 8);
        v11 = *(uint64_t **)(v7 + 16);
        if (v10)
          v12 = (uint64_t)(v10 + 4);
        else
          v12 = 0;
        if (v11)
          v13 = *v11;
        else
          v13 = 0;
        sub_20BF2F20C((uint64_t)this, (uint64_t)a2, v22, (uint64_t)v6 + 32, v10, v12, (uint64_t)v11, v13);
      }
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *, uint64_t))(*(_QWORD *)a2 + 40))(a2, (uint64_t)v6 + 32);
      v16 = (pxrInternal__aapl__pxrReserved__::TraceCollection *)*((_QWORD *)v6 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(pxrInternal__aapl__pxrReserved__::TraceCollection **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (pxrInternal__aapl__pxrReserved__::TraceCollection *)*((_QWORD *)v6 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v6;
          v6 = v17;
        }
        while (!v18);
      }
      v6 = v17;
    }
    while (v17 != (pxrInternal__aapl__pxrReserved__::TraceCollection *)(this + 1));
  }
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *))(*(_QWORD *)a2 + 24))(a2);
  return sub_20BF2F568((uint64_t)v22);
}

void sub_20BF2F01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20BF2F568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF2F034(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t **v11;
  uint64_t *v12;
  const char ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void *__p;
  char v20;
  uint64_t v21;
  const char **v22;
  uint64_t v23;

  v6 = *(uint64_t **)(a5 + 24);
  if (v6 != *(uint64_t **)(a6 + 24))
  {
    v11 = *(uint64_t ***)(a5 + 16);
    do
    {
      v12 = v6;
      if (v6 == (uint64_t *)(v11 + 4))
        v12 = (uint64_t *)*v11[2];
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((unsigned int *)v12 - 6)))
      {
        v13 = (const char ***)(v12 - 4);
        v14 = sub_20BF2F5F0(a3, v13);
        if (!v14)
        {
          pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::GetString((pxrInternal__aapl__pxrReserved__::TraceStaticKeyData *)*v13, (uint64_t)&__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v21);
          v22 = *v13;
          v23 = v21;
          v21 = 0;
          v14 = sub_20BF2F6F4((uint64_t)a3, &v22, (uint64_t)&v22);
          if ((v23 & 7) != 0)
          {
            v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          if ((v21 & 7) != 0)
          {
            v17 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
            do
              v18 = __ldxr(v17);
            while (__stlxr(v18 - 2, v17));
          }
          if (v20 < 0)
            operator delete(__p);
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD *, const char ***))(*(_QWORD *)a2 + 56))(a2, a4, v14 + 3, v13);
      }
      if (v6 == (uint64_t *)(v11 + 4))
      {
        v11 = (uint64_t **)v11[2];
        v6 = *v11;
      }
      v6 -= 4;
    }
    while (v6 != *(uint64_t **)(a6 + 24));
  }
}

void sub_20BF2F1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  if ((a17 & 7) != 0)
  {
    v18 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if ((a15 & 7) != 0)
  {
    v20 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF2F20C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  void *__p;
  char v21;
  uint64_t v22;
  const char **v23;
  uint64_t v24;

  if (a6 != a8)
  {
    v9 = a6;
    do
    {
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(unsigned int *)(v9 + 8)))
      {
        v14 = sub_20BF2F5F0(a3, (const char ***)v9);
        if (!v14)
        {
          pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::GetString(*(pxrInternal__aapl__pxrReserved__::TraceStaticKeyData **)v9, (uint64_t)&__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v22);
          v23 = *(const char ***)v9;
          v24 = v22;
          v22 = 0;
          v14 = sub_20BF2F6F4((uint64_t)a3, &v23, (uint64_t)&v23);
          if ((v24 & 7) != 0)
          {
            v15 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          if ((v22 & 7) != 0)
          {
            v17 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
            do
              v18 = __ldxr(v17);
            while (__stlxr(v18 - 2, v17));
          }
          if (v21 < 0)
            operator delete(__p);
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 56))(a2, a4, v14 + 3, v9);
      }
      v9 += 32;
      if (v9 == *a5)
      {
        v19 = a5[3];
        if (v19)
        {
          a5 = (_QWORD *)a5[3];
          v9 = v19 + 32;
        }
      }
    }
    while (v9 != a8);
  }
}

void sub_20BF2F364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  if ((a17 & 7) != 0)
  {
    v18 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if ((a15 & 7) != 0)
  {
    v20 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollection::Iterate(pxrInternal__aapl__pxrReserved__::TraceCollection **this, pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a2)
{
  return pxrInternal__aapl__pxrReserved__::TraceCollection::_Iterate(this, a2, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollection::ReverseIterate(pxrInternal__aapl__pxrReserved__::TraceCollection **this, pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a2)
{
  return pxrInternal__aapl__pxrReserved__::TraceCollection::_Iterate(this, a2, 1);
}

uint64_t *sub_20BF2F3E4(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)sub_20BF22F7C((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    sub_20BF2F484((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_20BDDE1B4(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_20BF2F524((uint64_t)v11, 0);
  }
  return v8;
}

_BYTE *sub_20BF2F484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;
  uint64_t v10;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = v8 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  v10 = *a3;
  *a3 = 0;
  *((_QWORD *)v8 + 7) = v10;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BF2F50C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF2F524(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BF2F524(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF2AA54((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20BF2F568(uint64_t a1)
{
  void *v2;

  sub_20BF2F5A0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF2F5A0(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_20BF2F5F0(_QWORD *a1, const char ***a2)
{
  int8x8_t v2;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  const char **v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = (unint64_t)*a2 / 0x18;
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = (unint64_t)*a2 / 0x18;
    if (v4 >= *(_QWORD *)&v2)
      v7 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = v9[1];
      if (v10 == v4)
      {
        v11 = (const char **)v9[2];
        if (v11 == *a2 || pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::operator==(v11, *a2))
          return v9;
      }
      else
      {
        if (v6 > 1)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  return v9;
}

_QWORD *sub_20BF2F6F4(uint64_t a1, const char ***a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  const char **v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = (unint64_t)*a2 / 0x18;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = (unint64_t)*a2 / 0x18;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v6)
        {
          v14 = (const char **)i[2];
          if (v14 == *a2 || pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::operator==(v14, *a2))
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v7)
              v13 %= v7;
          }
          else
          {
            v13 &= v7 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *(_QWORD *)(a3 + 8) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_39:
    *v23 = i;
    goto LABEL_40;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v3) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BF2F940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF2F958((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BF2F958(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v3)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = v3[3];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
    operator delete(v3);
  }
}

void pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable::~TraceCollectionAvailable(pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *this)
{
  *(_QWORD *)this = off_24C51CA50;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  *(_QWORD *)this = off_24C51CA50;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void *v2;

  *(_QWORD *)this = off_24C51CA50;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v2);
}

uint64_t *sub_20BF2FA30()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BEB9D48((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BF2FB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::TraceCollector *v10;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  std::string v15;
  uint64_t v16;
  int v17;
  void *__p[2];
  uint64_t v19;
  const char *v20;
  char v21;
  int v22;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9D297 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v15);
  v2 = std::string::insert(&v15, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v19 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v16, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCollector*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCollector*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      sub_20BEB59B0((uint64_t)__p, (uint64_t)"Trace", (uint64_t)"TraceCollector");
      v10 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)malloc(0x50uLL);
      while (LODWORD(__p[1])--)
        pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)__p[0]);
      pxrInternal__aapl__pxrReserved__::TraceCollector::TraceCollector(v10);
      v13 = atomic_load(a1);
      if (v13)
      {
        if (v10 != (pxrInternal__aapl__pxrReserved__::TraceCollector *)v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v19 = 84;
          v20 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector"
                ">::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TraceCollector]";
          v21 = 0;
          v22 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v12);
        }
      }
      else
      {
        do
          v14 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v14)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v19 = 88;
          v20 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector"
                ">::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TraceCollector]";
          v21 = 0;
          v22 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v12, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCollector*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v17--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_14TraceCollectorEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BF2FD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>:"
            ":SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TraceCollector]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::DeleteInstance()
{
  pxrInternal__aapl__pxrReserved__::TraceCollector *i;
  unint64_t v1;
  void *v2;

  for (i = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
        i;
        i = (pxrInternal__aapl__pxrReserved__::TraceCollector *)v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
    if ((pxrInternal__aapl__pxrReserved__::TraceCollector *)v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance))
      {
        pxrInternal__aapl__pxrReserved__::TraceCollector::~TraceCollector(i);
        free(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *result;

  v5 = (uint64_t *)off_254740AF8();
  result = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)*v5;
  if (!*v5)
  {
    result = sub_20BF2FF34((unint64_t *)(v4 + 8), v1, v2, v3);
    *v5 = (uint64_t)result;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *sub_20BF2FF34(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *v5;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)tbb::internal::NFS_Allocate(1uLL, 256, 0, a4);
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((_OWORD *)v5 + 14) = 0u;
  *((_OWORD *)v5 + 15) = 0u;
  result = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::_PerThreadData(v5);
  v7 = *a1;
  *((_QWORD *)result + 8) = *a1;
  v8 = __ldaxr(a1);
  if (v8 == v7)
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  else
  {
    __clrex();
  }
  do
  {
    while (1)
    {
      *((_QWORD *)result + 8) = v8;
      v9 = *a1;
      *((_QWORD *)result + 8) = *a1;
      v8 = __ldaxr(a1);
      if (v8 == v9)
        break;
      __clrex();
    }
  }
  while (__stlxr((unint64_t)result, a1));
  return result;
}

pxrInternal__aapl__pxrReserved__::TraceCollector *pxrInternal__aapl__pxrReserved__::TraceCollector::TraceCollector(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  char *v2;
  unint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;
  void *__p[2];
  uint64_t v8;
  const char *v9;
  char v10;
  int v11;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  sub_20BDDC0E4((_QWORD *)this + 3, "TraceRegistry global collector");
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 9) = 0;
  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  while (__stlxr((unint64_t)this, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance));
  if (v3)
  {
    __p[0] = "tf/instantiateSingleton.h";
    __p[1] = "SetInstanceConstructed";
    v8 = 56;
    v9 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::Se"
         "tInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TraceCollector]";
    v10 = 0;
    v11 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  sub_20BDDC0E4(__p, "PXR_ENABLE_GLOBAL_TRACE");
  v4 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
  v5 = v4;
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    if (!v4)
      return this;
    goto LABEL_9;
  }
  operator delete(__p[0]);
  if (v5)
  {
LABEL_9:
    atexit((void (*)(void))sub_20BF30158);
    atomic_store(1u, (unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  }
  return this;
}

void sub_20BF300FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v16;
  const void *v18;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v16);
  if (*(char *)(v14 + 47) < 0)
    operator delete(*v15);
  sub_20BF31380((unint64_t *)(v14 + 8));
  sub_20BEBCE60((unsigned int **)v14, v18);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF30158()
{
  uint64_t v0;
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(&v5);
  v0 = sub_20BF312DC(&v5);
  pxrInternal__aapl__pxrReserved__::TraceReporter::Report(v0, MEMORY[0x24BEDB318], 1);
  result = v6;
  if (v6)
  {
    v2 = (unsigned int *)(v6 + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20BF301C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B0D8(a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(pxrInternal__aapl__pxrReserved__::TraceCollector *this, unsigned int a2)
{
  atomic_store(a2, (unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::~TraceCollector(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  const void *v2;

  atomic_store(0, (unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::TraceCollector *)((char *)this + 64));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  sub_20BF31380((unint64_t *)this + 1);
  sub_20BEBCE60((unsigned int **)this, v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::Scope(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector *Instance;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *ThreadData;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a3;
  v10 = a2;
  Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  ThreadData = pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(Instance);
  v8 = 0;
  atomic_store(1u, (unsigned __int8 *)ThreadData);
  v6 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)ThreadData + 1);
  result = sub_20BF313C0(v6, (uint64_t)&v8 + 4, a1, &v10, &v9, (int *)&v8);
  atomic_store(0, (unsigned __int8 *)ThreadData);
  return result;
}

void sub_20BF302B8(void *a1)
{
  unsigned __int8 *v1;

  atomic_store(0, v1);
  sub_20BDC12F4(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_BeginEvent(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *ThreadData;
  uint64_t v8;
  uint64_t v11;
  int v12;

  sub_20BEB59B0((uint64_t)&v11, (uint64_t)"Trace", (uint64_t)"TraceCollector::BeginEvent");
  v6 = atomic_load((unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  if (v6 == 1)
  {
    ThreadData = pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    v8 = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::BeginEvent((uint64_t)ThreadData, a2, a3);
  }
  else
  {
    v8 = 0;
  }
  while (v12--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return v8;
}

void sub_20BF30360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::BeginEvent(uint64_t a1, uint64_t a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v5;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v6;
  uint64_t TimeStamp;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v14 = a3;
  sub_20BEB59B0((uint64_t)&v12, (uint64_t)"Trace", (uint64_t)"TraceCollector::_PerThreadData::BeginEvent");
  atomic_store(1u, (unsigned __int8 *)a1);
  v5 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v11 = 0;
  v10 = sub_20BF28180(*((_QWORD *)v5 + 5) + 16, a2, a2) + 2;
  v6 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)sub_20BF3157C(v5, (uint64_t)&v11, &v10, &v14);
  TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v6);
  atomic_store(0, (unsigned __int8 *)a1);
  while (v13--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return TimeStamp;
}

void sub_20BF30434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 *v4;
  va_list va;

  va_start(va, a4);
  atomic_store(0, v4);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_EndEvent(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *ThreadData;
  uint64_t v8;
  uint64_t v11;
  int v12;

  sub_20BEB59B0((uint64_t)&v11, (uint64_t)"Trace", (uint64_t)"TraceCollector::EndEvent (key)");
  v6 = atomic_load((unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  if (v6 == 1)
  {
    ThreadData = pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    v8 = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::EndEvent((uint64_t)ThreadData, a2, a3);
  }
  else
  {
    v8 = 0;
  }
  while (v12--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return v8;
}

void sub_20BF304F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::EndEvent(uint64_t a1, uint64_t a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v5;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v6;
  uint64_t TimeStamp;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v14 = a3;
  sub_20BEB59B0((uint64_t)&v12, (uint64_t)"Trace", (uint64_t)"TraceCollector::_PerThreadData::EndEvent");
  atomic_store(1u, (unsigned __int8 *)a1);
  v5 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v11 = 0;
  v10 = sub_20BF28180(*((_QWORD *)v5 + 5) + 16, a2, a2) + 2;
  v6 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)sub_20BF315EC(v5, (uint64_t)&v11, &v10, &v14);
  TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v6);
  atomic_store(0, (unsigned __int8 *)a1);
  while (v13--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return TimeStamp;
}

void sub_20BF305C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 *v4;
  va_list va;

  va_start(va, a4);
  atomic_store(0, v4);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_MarkerEvent(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *ThreadData;
  uint64_t v8;
  uint64_t v11;
  int v12;

  sub_20BEB59B0((uint64_t)&v11, (uint64_t)"Trace", (uint64_t)"TraceCollector::MarkerEvent");
  v6 = atomic_load((unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  if (v6 == 1)
  {
    ThreadData = pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    v8 = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::MarkerEvent((uint64_t)ThreadData, a2, a3);
  }
  else
  {
    v8 = 0;
  }
  while (v12--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return v8;
}

void sub_20BF30688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::MarkerEvent(uint64_t a1, uint64_t a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v5;
  pxrInternal__aapl__pxrReserved__::TraceEvent *v6;
  uint64_t TimeStamp;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v14 = a3;
  sub_20BEB59B0((uint64_t)&v12, (uint64_t)"Trace", (uint64_t)"TraceCollector::_PerThreadData::MarkerEvent");
  atomic_store(1u, (unsigned __int8 *)a1);
  v5 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v11 = 0;
  v10 = sub_20BF28180(*((_QWORD *)v5 + 5) + 16, a2, a2) + 2;
  v6 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)sub_20BF31660(v5, (uint64_t)&v11, &v10, &v14);
  TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v6);
  atomic_store(0, (unsigned __int8 *)a1);
  while (v13--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return TimeStamp;
}

void sub_20BF3075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 *v4;
  va_list va;

  va_start(va, a4);
  atomic_store(0, v4);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_EndEventAtTime(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3, double a4)
{
  uint64_t result;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *ThreadData;
  uint64_t v12;
  int v13;

  result = sub_20BEB59B0((uint64_t)&v12, (uint64_t)"Trace", (uint64_t)"TraceCollector::EndEventAtTime (key, double)");
  v9 = atomic_load((unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  if (v9 == 1)
  {
    ThreadData = pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    result = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::EndEventAtTime((uint64_t)ThreadData, a2, a3, a4);
  }
  while (v13--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return result;
}

void sub_20BF3081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::EndEventAtTime(uint64_t a1, uint64_t a2, int a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v7;
  uint64_t result;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v15 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  sub_20BEB59B0((uint64_t)&v13, (uint64_t)"Trace", (uint64_t)"TraceCollector::_PerThreadData::EndEventAtTime");
  v12 = (unint64_t)(a4
                         * 1000.0
                         / pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)0xF4240));
  v7 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v11 = 0;
  v10 = sub_20BF28180(*((_QWORD *)v7 + 5) + 16, a2, a2) + 2;
  for (result = sub_20BF3173C(v7, (uint64_t)&v11, &v10, (uint64_t *)&v12, &v15);
        v14--;
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_20BF30918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 *v4;
  va_list va;

  va_start(va, a4);
  sub_20BEB24F4((uint64_t)va);
  atomic_store(0, v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_BeginEventAtTime(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3, double a4)
{
  uint64_t result;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *ThreadData;
  uint64_t v12;
  int v13;

  result = sub_20BEB59B0((uint64_t)&v12, (uint64_t)"Trace", (uint64_t)"TraceCollector::BeginEventAtTime (key, double)");
  v9 = atomic_load((unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  if (v9 == 1)
  {
    ThreadData = pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    result = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::BeginEventAtTime((uint64_t)ThreadData, a2, a3, a4);
  }
  while (v13--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return result;
}

void sub_20BF309E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::BeginEventAtTime(uint64_t a1, uint64_t a2, int a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v7;
  uint64_t result;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v15 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  sub_20BEB59B0((uint64_t)&v13, (uint64_t)"Trace", (uint64_t)"TraceCollector::_PerThreadData::BeginEventAtTime");
  v12 = (unint64_t)(a4
                         * 1000.0
                         / pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)0xF4240));
  v7 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v11 = 0;
  v10 = sub_20BF28180(*((_QWORD *)v7 + 5) + 16, a2, a2) + 2;
  for (result = sub_20BF316D4(v7, (uint64_t)&v11, &v10, (uint64_t *)&v12, &v15);
        v14--;
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_20BF30ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 *v4;
  va_list va;

  va_start(va, a4);
  sub_20BEB24F4((uint64_t)va);
  atomic_store(0, v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_MarkerEventAtTime(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3, double a4)
{
  uint64_t result;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *ThreadData;
  uint64_t v12;
  int v13;

  result = sub_20BEB59B0((uint64_t)&v12, (uint64_t)"Trace", (uint64_t)"TraceCollector::MarkerEventAtTime (key, double)");
  v9 = atomic_load((unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  if (v9 == 1)
  {
    ThreadData = pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    result = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::MarkerEventAtTime((uint64_t)ThreadData, a2, a3, a4);
  }
  while (v13--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return result;
}

void sub_20BF30BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::MarkerEventAtTime(uint64_t a1, uint64_t a2, int a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v7;
  uint64_t result;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v15 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  sub_20BEB59B0((uint64_t)&v13, (uint64_t)"Trace", (uint64_t)"TraceCollector::_PerThreadData::MarkerEventAtTime");
  v12 = (unint64_t)(a4
                         * 1000.0
                         / pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)0xF4240));
  v7 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v11 = 0;
  v10 = sub_20BF28180(*((_QWORD *)v7 + 5) + 16, a2, a2) + 2;
  for (result = sub_20BF317A8(v7, (uint64_t)&v11, &v10, (uint64_t *)&v12, &v15);
        v14--;
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_20BF30CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 *v4;
  va_list va;

  va_start(va, a4);
  sub_20BEB24F4((uint64_t)va);
  atomic_store(0, v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::GetScopeOverhead(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  return *((_QWORD *)this + 6);
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::Clear(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *i;

  for (i = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)atomic_load((unint64_t *)this + 1);
        i;
        i = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)*((_QWORD *)i + 8))
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::Clear(i);
  }
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::Clear(pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *this)
{
  uint64_t *v1;
  uint64_t *v2;

  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::GetCollectionData(this, (unint64_t *)&v2);
  v1 = v2;
  v2 = 0;
  if (v1)
    sub_20BF2A948((uint64_t)&v2, v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_EndScope(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, _QWORD *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *ThreadData;

  ThreadData = pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
  return sub_20BF30D64((uint64_t)ThreadData, a2, a3);
}

uint64_t sub_20BF30D64(uint64_t a1, _QWORD *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v4;
  uint64_t result;
  int v6;
  int v7;

  atomic_store(1u, (unsigned __int8 *)a1);
  v6 = 0;
  v7 = a3;
  v4 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  result = sub_20BF315EC(v4, (uint64_t)&v6, a2, &v7);
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_20BF30DB4(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;

  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_MeasureScopeOverhead(pxrInternal__aapl__pxrReserved__::TraceCollector *this, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t (*a5)(const void *, int))
{
  unint64_t result;
  void *v7;
  BOOL v8[8];

  v7 = &pxrInternal__aapl__pxrReserved__::externallyVisibleValue;
  *(_QWORD *)v8 = &v7;
  result = pxrInternal__aapl__pxrReserved__::Arch_MeasureExecutionTime((pxrInternal__aapl__pxrReserved__ *)0x989680, 0, v8, (uint64_t (*)(_QWORD, _QWORD))sub_20BF31430, a5);
  *((_QWORD *)this + 6) = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::CreateCollection(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  uint64_t **v2;
  int v3;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *i;
  uint64_t *v5;
  void (*v6)(pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *__hidden);
  void (*v7)(pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *__hidden);
  void (*v8)(pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *__hidden);
  uint64_t **v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void (**v15)(pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *__hidden);
  uint64_t **v16;
  std::__shared_weak_count *v17;
  uint64_t **v18;

  sub_20BEB59B0((uint64_t)&v15, (uint64_t)"Trace", (uint64_t)"TraceCollection");
  v2 = (uint64_t **)malloc(0x18uLL);
  while (1)
  {
    v3 = (int)v16;
    LODWORD(v16) = (_DWORD)v16 - 1;
    if (!v3)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v15);
  }
  v2[2] = 0;
  v2[1] = 0;
  *v2 = (uint64_t *)(v2 + 1);
  v18 = v2;
  for (i = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)atomic_load((unint64_t *)this + 1);
        i;
        i = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)*((_QWORD *)i + 8))
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::GetCollectionData(i, (unint64_t *)&v15);
    v5 = (uint64_t *)v15;
    v6 = v15[2];
    if (v6)
      v6 = *(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *__hidden))v6;
    v7 = v15[1];
    if (v7)
      v8 = (void (*)(pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *__hidden))((char *)v7 + 32);
    else
      v8 = 0;
    if (v8 == v6)
    {
      v15 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TraceCollection::AddToCollection(v18, (_QWORD *)i + 2, (uint64_t *)&v15);
      v5 = (uint64_t *)v15;
      v15 = 0;
      if (!v5)
        continue;
    }
    sub_20BF2A948((uint64_t)&v15, v5);
  }
  v9 = v18;
  if (v18)
  {
    v10 = (std::__shared_weak_count *)operator new(0x20uLL);
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C51CA88;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
    v18 = 0;
    v15 = off_24C51CA50;
    v16 = v9;
    v17 = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v18 = 0;
    v16 = 0;
    v17 = 0;
    v15 = off_24C51CA50;
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&v15);
  pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable::~TraceCollectionAvailable((pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *)&v15);
  sub_20BF2A9CC(&v18, 0);
}

void sub_20BF30FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF2A9CC((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::GetCollectionData@<X0>(pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *this@<X0>, unint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TraceEventList *v4;
  uint64_t result;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;

  v4 = (pxrInternal__aapl__pxrReserved__::TraceEventList *)operator new(0x80uLL);
  result = pxrInternal__aapl__pxrReserved__::TraceEventList::TraceEventList(v4);
  v6 = (unint64_t *)((char *)this + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr((unint64_t)v4, v6));
  *a2 = v7;
  do
    v8 = atomic_load((unsigned __int8 *)this);
  while ((v8 & 1) != 0);
  return result;
}

void sub_20BF31058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::_PerThreadData(pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *this)
{
  char *v2;
  pxrInternal__aapl__pxrReserved__::TraceEventList *v3;
  __int128 v5;
  uint64_t v6;

  *(_BYTE *)this = 0;
  v2 = (char *)this + 16;
  pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId((pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)((char *)this + 16));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId((pxrInternal__aapl__pxrReserved__::TraceThreadId *)&v5);
  if (*((char *)this + 39) < 0)
    operator delete(*(void **)v2);
  *(_OWORD *)v2 = v5;
  *((_QWORD *)v2 + 2) = v6;
  v3 = (pxrInternal__aapl__pxrReserved__::TraceEventList *)operator new(0x80uLL);
  pxrInternal__aapl__pxrReserved__::TraceEventList::TraceEventList(v3);
  atomic_store((unint64_t)v3, (unint64_t *)this + 1);
  return this;
}

void sub_20BF310F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v12;
  void *v13;

  v13 = v12;
  operator delete(v13);
  sub_20BF3151C((void ***)&a10);
  if (*(char *)(v10 + 39) < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::~_PerThreadData(pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *this)
{
  uint64_t *v2;
  void *v3;
  void **v4;

  v2 = (uint64_t *)atomic_load((unint64_t *)this + 1);
  if (v2)
  {
    sub_20BF2A724(v2 + 9);
    sub_20BF2A850(v2 + 4);
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)v2);
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 40);
  sub_20BF3151C(&v4);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::_EndScope(uint64_t a1, _QWORD *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v3;
  int v5;
  int v6;

  v6 = a3;
  v3 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v5 = 0;
  return sub_20BF315EC(v3, (uint64_t)&v5, a2, &v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::CounterDelta(uint64_t a1, uint64_t a2, int a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v5;
  uint64_t result;
  _QWORD *v7;
  int v8;
  int v9;
  double v10;

  v10 = a4;
  v8 = 0;
  v9 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  v5 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v7 = sub_20BF28180(*((_QWORD *)v5 + 5) + 16, a2, a2) + 2;
  result = sub_20BF31814(v5, (uint64_t)&v8, &v7, (uint64_t *)&v10, &v9);
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_20BF3125C(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;

  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::CounterValue(uint64_t a1, uint64_t a2, int a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v5;
  uint64_t result;
  _QWORD *v7;
  int v8;
  int v9;
  double v10;

  v10 = a4;
  v8 = 0;
  v9 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  v5 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load((unint64_t *)(a1 + 8));
  v7 = sub_20BF28180(*((_QWORD *)v5 + 5) + 16, a2, a2) + 2;
  result = sub_20BF31898(v5, (uint64_t)&v8, &v7, (uint64_t *)&v10, &v9);
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_20BF312D4(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;

  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF312DC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TraceReporter>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReser"
            "ved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TraceReporter]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9D253 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

unint64_t *sub_20BF31380(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *i;
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *v3;
  tbb::internal *v4;
  void *v5;

  for (i = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)atomic_load(a1); i; i = v3)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)*((_QWORD *)i + 8);
    pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::~_PerThreadData(i);
    tbb::internal::NFS_Free(v4, v5);
  }
  return a1;
}

uint64_t sub_20BF313C0(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, int *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v7 = *a4;
  v8 = *a5;
  v9 = *a6;
  *(_QWORD *)v6 = *a3;
  *(_DWORD *)(v6 + 8) = v9;
  *(_BYTE *)(v6 + 13) = 2;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v7;
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v6;
}

uint64_t sub_20BF31430(_QWORD ***a1, int a2)
{
  uint64_t i;

  for (i = mach_absolute_time(); a2; --a2)
    ++***a1;
  return mach_absolute_time() - i;
}

void sub_20BF31488(uint64_t a1, _QWORD **a2)
{
  if (a2)
  {
    sub_20BF2AA0C((uint64_t)a2, a2[1]);
    free(a2);
  }
}

void sub_20BF314C0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF314D4(uint64_t a1)
{
  sub_20BF31488(a1 + 24, *(_QWORD ***)(a1 + 24));
}

uint64_t sub_20BF314DC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51CAC8))
    return a1 + 24;
  else
    return 0;
}

void sub_20BF3151C(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if ((v5 & 7) != 0)
        {
          v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t sub_20BF3157C(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, int *a4)
{
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v6 = *a4;
  *(_QWORD *)v5 = *a3;
  *(_DWORD *)(v5 + 8) = v6;
  *(_BYTE *)(v5 + 13) = 0;
  *(_QWORD *)(v5 + 16) = mach_absolute_time();
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v5;
}

uint64_t sub_20BF315EC(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, int *a4)
{
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v6 = *a4;
  *(_QWORD *)v5 = *a3;
  *(_DWORD *)(v5 + 8) = v6;
  *(_BYTE *)(v5 + 13) = 1;
  *(_QWORD *)(v5 + 16) = mach_absolute_time();
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v5;
}

uint64_t sub_20BF31660(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, int *a4)
{
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v6 = *a4;
  *(_QWORD *)v5 = *a3;
  *(_DWORD *)(v5 + 8) = v6;
  *(_BYTE *)(v5 + 13) = 3;
  *(_QWORD *)(v5 + 16) = mach_absolute_time();
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v5;
}

uint64_t sub_20BF316D4(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v6 = *a4;
  v7 = *a5;
  *(_QWORD *)v5 = *a3;
  *(_DWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 13) = 0;
  *(_QWORD *)(v5 + 16) = v6;
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v5;
}

uint64_t sub_20BF3173C(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v6 = *a4;
  v7 = *a5;
  *(_QWORD *)v5 = *a3;
  *(_DWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 13) = 1;
  *(_QWORD *)(v5 + 16) = v6;
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v5;
}

uint64_t sub_20BF317A8(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v6 = *a4;
  v7 = *a5;
  *(_QWORD *)v5 = *a3;
  *(_DWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 13) = 3;
  *(_QWORD *)(v5 + 16) = v6;
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v5;
}

uint64_t sub_20BF31814(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int *a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v7 = *a4;
  v8 = *a5;
  *(_QWORD *)v6 = *a3;
  *(_DWORD *)(v6 + 8) = v8;
  *(_BYTE *)(v6 + 13) = 4;
  *(_QWORD *)(v6 + 16) = mach_absolute_time();
  *(_QWORD *)(v6 + 24) = v7;
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v6;
}

uint64_t sub_20BF31898(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int *a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 += 32;
  v7 = *a4;
  v8 = *a5;
  *(_QWORD *)v6 = *a3;
  *(_DWORD *)(v6 + 8) = v8;
  *(_BYTE *)(v6 + 13) = 5;
  *(_QWORD *)(v6 + 16) = mach_absolute_time();
  *(_QWORD *)(v6 + 24) = v7;
  **((_QWORD **)a1 + 2) += 32;
  if (**((_QWORD **)a1 + 2) == *(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::Update(pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator *this, pxrInternal__aapl__pxrReserved__::TraceCollection **a2)
{
  return pxrInternal__aapl__pxrReserved__::TraceCollection::Iterate(a2, this);
}

void pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::OnEndCollection(pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator *this)
{
  char *v1;
  char *v2;
  char *v3;
  double v4;
  char *v5;
  double v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  double *v18;
  char *v19;
  char *v20;
  double *v21;
  char *v22;
  char *v23;
  BOOL v24;
  char *v25;
  char *v26;
  char *v27;
  char *v29;
  char *v30;
  uint64_t *v31;

  v1 = (char *)*((_QWORD *)this + 1);
  v27 = (char *)this + 8;
  v30 = (char *)this + 16;
  if (v1 != (char *)this + 16)
  {
    v2 = (char *)this + 72;
    v3 = (char *)this + 32;
    v29 = (char *)this + 72;
    do
    {
      v31 = (uint64_t *)(v1 + 32);
      v4 = *((double *)sub_20BF2B45C((uint64_t)v2, (_QWORD *)v1 + 4, (uint64_t)&unk_20CAC184C, &v31) + 3);
      v5 = (char *)*((_QWORD *)v1 + 5);
      if (v5 != v1 + 48)
      {
        do
        {
          v6 = -0.0;
          if (v5[48])
            v6 = v4;
          v4 = *((double *)v5 + 5) + v6;
          v31 = (uint64_t *)(v1 + 32);
          v7 = sub_20BF31CBC((uint64_t)v3, (_QWORD *)v1 + 4, (uint64_t)&unk_20CAC184C, &v31);
          v8 = v7[4];
          v9 = v7[5];
          if (v8 >= v9)
          {
            v11 = v7[3];
            v12 = (uint64_t)(v8 - v11) >> 4;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 60)
              sub_20BDDF694();
            v14 = v9 - v11;
            if (v14 >> 3 > v13)
              v13 = v14 >> 3;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
              v15 = 0xFFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            v16 = (char *)sub_20BDEA2F0((uint64_t)(v7 + 5), v15);
            v18 = (double *)&v16[16 * v12];
            *v18 = *((double *)v5 + 4);
            v18[1] = v4;
            v20 = (char *)v7[3];
            v19 = (char *)v7[4];
            v21 = v18;
            if (v19 != v20)
            {
              do
              {
                *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
                v21 -= 2;
                v19 -= 16;
              }
              while (v19 != v20);
              v19 = (char *)v7[3];
            }
            v10 = (char *)(v18 + 2);
            v7[3] = v21;
            v7[4] = v18 + 2;
            v7[5] = &v16[16 * v17];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *(_QWORD *)v8 = *((_QWORD *)v5 + 4);
            *(double *)(v8 + 8) = v4;
            v10 = (char *)(v8 + 16);
          }
          v7[4] = v10;
          v22 = (char *)*((_QWORD *)v5 + 1);
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = *(char **)v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (char *)*((_QWORD *)v5 + 2);
              v24 = *(_QWORD *)v23 == (_QWORD)v5;
              v5 = v23;
            }
            while (!v24);
          }
          v5 = v23;
        }
        while (v23 != v1 + 48);
      }
      v31 = (uint64_t *)(v1 + 32);
      v2 = v29;
      *((double *)sub_20BF2B45C((uint64_t)v29, (_QWORD *)v1 + 4, (uint64_t)&unk_20CAC184C, &v31) + 3) = v4;
      v25 = (char *)*((_QWORD *)v1 + 1);
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = *(char **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (char *)*((_QWORD *)v1 + 2);
          v24 = *(_QWORD *)v26 == (_QWORD)v1;
          v1 = v26;
        }
        while (!v24);
      }
      v1 = v26;
    }
    while (v26 != v30);
  }
  sub_20BF20C54((uint64_t)v27, *((_QWORD **)this + 2));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v30;
}

char *pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::OnEvent(uint64_t a1, int a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  char *result;
  uint64_t **v8;
  uint64_t *v9;
  double v10;
  uint64_t *TimeStamp;
  double CounterValue;
  uint64_t *v13;
  double v14;
  char v15;

  result = (char *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(this);
  if ((_DWORD)result == 6)
  {
    v13 = a3;
    v8 = (uint64_t **)(sub_20BF31F20((uint64_t **)(a1 + 8), a3, (uint64_t)&unk_20CAC184C, &v13) + 5);
    TimeStamp = (uint64_t *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
    CounterValue = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(this);
    v13 = TimeStamp;
    v14 = CounterValue;
    v15 = 0;
  }
  else
  {
    if ((_DWORD)result != 5)
      return result;
    v13 = a3;
    v8 = (uint64_t **)(sub_20BF31F20((uint64_t **)(a1 + 8), a3, (uint64_t)&unk_20CAC184C, &v13) + 5);
    v9 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
    v10 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(this);
    v13 = v9;
    v14 = v10;
    v15 = 1;
  }
  return sub_20BF32034(v8, (uint64_t *)&v13);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::AcceptsCategory(pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator *))(*(_QWORD *)this + 64))(this);
}

void pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::SetCurrentValues(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 72);
  if (v3 != (_QWORD *)a2)
  {
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 32);
    sub_20BF320C8(v3, *(double **)(a2 + 16), 0);
  }
}

_QWORD *sub_20BF31CBC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20BF23DDC(a1, v7, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BF24EC0((uint64_t)v22, 0);
  return v11;
}

void sub_20BF31F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF24EC0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF31F20(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20BF31FB4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_20BF31FB4@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = **a2;
  v6[4] = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v6[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  v6[6] = 0;
  v6[7] = 0;
  result = v6 + 6;
  *(result - 1) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

char *sub_20BF32034(uint64_t **a1, uint64_t *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (char *)operator new(0x38uLL);
  v5 = *a2;
  *((_QWORD *)v4 + 4) = *a2;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 1);
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

void sub_20BF320C8(_QWORD *a1, double *a2, double *a3)
{
  double *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        sub_20BF32220(v8 + 2, (_QWORD *)v4 + 2);
        v8[3] = *((_QWORD *)v4 + 3);
        v10 = (_QWORD *)*v8;
        sub_20BF321C0(a1, v8);
        v4 = *(double **)v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    sub_20BF20C04((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_20BF32634(a1, v4 + 2);
    v4 = *(double **)v4;
  }
}

void sub_20BF32198(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  sub_20C96B39C(v1);
  __cxa_rethrow();
}

void sub_20BF321AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF321C0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = a2 + 2;
  v5 = bswap64(0x9E3779B97F4A7C55 * (a2[2] & 0xFFFFFFFFFFFFFFF8));
  a2[1] = v5;
  v6 = sub_20BF32284((uint64_t)a1, v5, v4);
  sub_20BEC5B54(a1, a2, v6);
  return a2;
}

_QWORD *sub_20BF32220(_QWORD *result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  if (a2 != result)
  {
    if ((*a2 & 7) != 0)
    {
      v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 + 2, v2));
      if ((v3 & 1) == 0)
        *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((*result & 7) != 0)
    {
      v4 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    *result = *a2;
  }
  return result;
}

_QWORD *sub_20BF32284(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_20BF323E0(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && (v16[2] & 0xFFFFFFFFFFFFFFF8) == (*a3 & 0xFFFFFFFFFFFFFFF8);
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void sub_20BF323E0(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_20BF324BC(a1, prime);
  }
}

void sub_20BF324BC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      sub_20BDDF5B4();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v13[2] & 0xFFFFFFFFFFFFFFF8));
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_20BF32634(_QWORD *a1, double *a2)
{
  _QWORD *v4;

  sub_20BF32684((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_20BF321C0(a1, v4);
}

void sub_20BF3266C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_20BF32684@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double *v6;
  double v7;
  unsigned int *v8;
  unsigned int v9;
  double result;

  v5 = a1 + 16;
  v6 = (double *)operator new(0x20uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *v6 = 0.0;
  v6[1] = 0.0;
  v7 = *a2;
  v6[2] = *a2;
  if ((LOBYTE(v7) & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)&v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    v7 = v6[2];
    if ((v9 & 1) == 0)
    {
      *(_QWORD *)&v7 &= 0xFFFFFFFFFFFFFFF8;
      v6[2] = v7;
    }
  }
  result = a2[1];
  v6[3] = result;
  *(_BYTE *)(a3 + 16) = 1;
  *((_QWORD *)v6 + 1) = bswap64(0x9E3779B97F4A7C55 * (*(_QWORD *)&v7 & 0xFFFFFFFFFFFFFFF8));
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator::AllocateBlock(pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator *this, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  size_t v6;
  char *v7;
  void *v8;
  void *__p;

  if (a2 <= 8)
    v4 = 0;
  else
    v4 = a2;
  v5 = v4 + a3;
  if (v5 <= *((_QWORD *)this + 8))
    v6 = *((_QWORD *)this + 8);
  else
    v6 = v5;
  v7 = (char *)operator new[](v6);
  __p = v7;
  *(_QWORD *)this = &v7[v6];
  *((_QWORD *)this + 1) = v7;
  sub_20BF327AC((_QWORD *)this + 2, (uint64_t *)&__p);
  v8 = __p;
  __p = 0;
  if (v8)
    operator delete[](v8);
}

void sub_20BF32790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF327AC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_20BF32834(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  v9 = *(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

void sub_20BF32834(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_20BE972A0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_20BE973B4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20BDDF6A8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_20BE974D0(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20BE975E4((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20BF32AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  return *((_QWORD *)this + 2);
}

double pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  double result;

  result = 0.0;
  if ((*((_BYTE *)this + 13) & 0xFE) == 4)
    return *((double *)this + 3);
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceEvent::GetData(pxrInternal__aapl__pxrReserved__::TraceEvent *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  char *v4;
  int v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  v3 = *((unsigned __int8 *)this + 13);
  if ((v3 & 0xFE) == 6)
  {
    v4 = (char *)this + 24;
    if (v3 != 6)
      v4 = *(char **)v4;
    switch(*((_BYTE *)this + 12))
    {
      case 0:
        sub_20BDDC0E4(__p, v4);
        if (SHIBYTE(v8) < 0)
        {
          sub_20BDDBFAC((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
          v6 = SHIBYTE(v8);
          *(_DWORD *)(a2 + 24) = 1;
          if (v6 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_OWORD *)a2 = *(_OWORD *)__p;
          *(_QWORD *)(a2 + 16) = v8;
          v5 = 1;
LABEL_12:
          *(_DWORD *)(a2 + 24) = v5;
        }
        break;
      case 1:
        *(_BYTE *)a2 = *v4;
        v5 = 2;
        goto LABEL_12;
      case 2:
        *(_QWORD *)a2 = *(_QWORD *)v4;
        v5 = 3;
        goto LABEL_12;
      case 3:
        *(_QWORD *)a2 = *(_QWORD *)v4;
        v5 = 4;
        goto LABEL_12;
      case 4:
        *(_QWORD *)a2 = *(_QWORD *)v4;
        v5 = 5;
        goto LABEL_12;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    *(_DWORD *)(a2 + 24) = 0;
  }
}

void sub_20BF32C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEvent::GetStartTimeStamp(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  if (*((_BYTE *)this + 13) == 2)
    return *((_QWORD *)this + 3);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEvent::GetEndTimeStamp(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  if (*((_BYTE *)this + 13) == 2)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  unint64_t v1;
  char v2;

  v1 = *((unsigned __int8 *)this + 13);
  if (v1 >= 8)
    v2 = 0;
  else
    v2 = 0x707060504030201uLL >> (8 * v1);
  return v2 & 7;
}

pxrInternal__aapl__pxrReserved__::TraceEventContainer *pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer(pxrInternal__aapl__pxrReserved__::TraceEventContainer *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 512;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(this);
  return this;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 512;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(this);
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(pxrInternal__aapl__pxrReserved__::TraceEventContainer *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  v3 = (v2 - 32) & 0xFFFFFFFFFFFFFFE0;
  result = malloc(v3 + 32);
  *result = result + 4;
  result[1] = (char *)result + v3 + 32;
  result[2] = 0;
  result[3] = 0;
  if (*((_QWORD *)this + 1))
  {
    v5 = *((_QWORD *)this + 2);
    *(_QWORD *)(v5 + 24) = result;
    result[2] = v5;
    v2 = *((_QWORD *)this + 3);
  }
  else
  {
    *((_QWORD *)this + 1) = result;
  }
  *(_QWORD *)this = result + 4;
  *((_QWORD *)this + 2) = result;
  *((_QWORD *)this + 3) = 2 * v2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer(pxrInternal__aapl__pxrReserved__::TraceEventContainer *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (v1)
  {
    do
    {
      v2 = (_QWORD *)v1[3];
      free(v1);
      v1 = v2;
    }
    while (v2);
  }
}

{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (v1)
  {
    do
    {
      v2 = (_QWORD *)v1[3];
      free(v1);
      v1 = v2;
    }
    while (v2);
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node::DestroyList(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    do
    {
      v1 = (_QWORD *)result[3];
      free(result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TraceEventContainer *pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 512;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  *a2 = v4;
  v5 = *((_QWORD *)a1 + 2);
  v6 = a2[3];
  *((_QWORD *)a1 + 2) = a2[2];
  a2[2] = v5;
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = a2[1];
  a2[1] = v7;
  *((_QWORD *)a1 + 3) = v6;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 512;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  *a2 = v4;
  v5 = *((_QWORD *)a1 + 2);
  v6 = a2[3];
  *((_QWORD *)a1 + 2) = a2[2];
  a2[2] = v5;
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = a2[1];
  a2[1] = v7;
  *((_QWORD *)a1 + 3) = v6;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventContainer::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE v8[24];

  pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)v8, a2);
  v3 = *(_OWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v8[16];
  *(_OWORD *)a1 = v3;
  *(_OWORD *)&v8[8] = v4;
  v5 = (_QWORD *)v4;
  if ((_QWORD)v4)
  {
    do
    {
      v6 = (_QWORD *)v5[3];
      free(v5);
      v5 = v6;
    }
    while (v6);
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceEventContainer::Append(_QWORD *result, pxrInternal__aapl__pxrReserved__::TraceEventContainer *this)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = result;
  v4 = *((_QWORD *)this + 1);
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  if (v5)
    v5 = (_QWORD *)*v5;
  v6 = (_QWORD *)(v4 + 32);
  if (!v4)
    v6 = 0;
  if (v6 != v5)
  {
    v8 = result[1];
    v7 = (_QWORD *)result[2];
    if (v7)
      v9 = (_QWORD *)*v7;
    else
      v9 = 0;
    if (v8)
      v10 = (_QWORD *)(v8 + 32);
    else
      v10 = 0;
    if (v10 == v9)
    {
      return (_QWORD *)pxrInternal__aapl__pxrReserved__::TraceEventContainer::operator=((uint64_t)v3, this);
    }
    else
    {
      if (v7 + 4 == (_QWORD *)*v7)
      {
        v11 = v7 + 2;
        v3[2] = v7[2];
        v12 = v7[2];
        if (v12)
          *(_QWORD *)(v12 + 24) = v7[3];
        v13 = v7[3];
        if (v13)
          *(_QWORD *)(v13 + 16) = *v11;
        *v11 = 0;
        v7[3] = 0;
        do
        {
          v14 = (_QWORD *)v7[3];
          free(v7);
          v7 = v14;
        }
        while (v14);
        v7 = (_QWORD *)v3[2];
        v4 = *((_QWORD *)this + 1);
      }
      v7[3] = v4;
      *(_QWORD *)(v4 + 16) = v7;
      v3[2] = *((_QWORD *)this + 2);
      *v3 = *(_QWORD *)this;
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      return pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(this);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node::Join(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node::New(pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node *this)
{
  _QWORD *result;

  result = malloc(32 * (_QWORD)this + 32);
  *result = result + 4;
  result[1] = &result[4 * (_QWORD)this + 4];
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node::_Node(_QWORD *this, pxrInternal__aapl__pxrReserved__::TraceEvent *a2, uint64_t a3)
{
  *this = a2;
  this[1] = (char *)a2 + 32 * a3;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = a2;
  this[1] = (char *)a2 + 32 * a3;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, pxrInternal__aapl__pxrReserved__::TraceEventData *))off_24C51CB58[v1])(&v4, this);
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetInt(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  pxrInternal__aapl__pxrReserved__::TraceEventData *v1;

  v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this) != 2)
    return 0;
  if (*((_DWORD *)v1 + 6) != 3)
    sub_20BF1C1FC();
  return v1;
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetUInt(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  pxrInternal__aapl__pxrReserved__::TraceEventData *v1;

  v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this) != 3)
    return 0;
  if (*((_DWORD *)v1 + 6) != 4)
    sub_20BF1C1FC();
  return v1;
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetFloat(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  pxrInternal__aapl__pxrReserved__::TraceEventData *v1;

  v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this) != 4)
    return 0;
  if (*((_DWORD *)v1 + 6) != 5)
    sub_20BF1C1FC();
  return v1;
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetBool(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  pxrInternal__aapl__pxrReserved__::TraceEventData *v1;

  v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this) != 1)
    return 0;
  if (*((_DWORD *)v1 + 6) != 2)
    sub_20BF1C1FC();
  return v1;
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetString(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  pxrInternal__aapl__pxrReserved__::TraceEventData *v1;

  v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this))
    return 0;
  if (*((_DWORD *)v1 + 6) != 1)
    sub_20BF1C1FC();
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventData::WriteJson(pxrInternal__aapl__pxrReserved__::TraceEventData *this, pxrInternal__aapl__pxrReserved__::JsWriter *a2)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::JsWriter *v4;
  pxrInternal__aapl__pxrReserved__::JsWriter **v5;

  v4 = a2;
  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(pxrInternal__aapl__pxrReserved__::JsWriter ***, pxrInternal__aapl__pxrReserved__::TraceEventData *))off_24C51CB88[v2])(&v5, this);
}

uint64_t sub_20BF332EC()
{
  return 5;
}

uint64_t sub_20BF332F4()
{
  return 0;
}

uint64_t sub_20BF332FC()
{
  return 1;
}

uint64_t sub_20BF33304()
{
  return 2;
}

uint64_t sub_20BF3330C()
{
  return 3;
}

uint64_t sub_20BF33314()
{
  return 4;
}

uint64_t sub_20BF3331C(_QWORD ****a1)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1);
}

uint64_t sub_20BF3332C(uint64_t ****a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1, a2);
}

uint64_t sub_20BF33338(pxrInternal__aapl__pxrReserved__::JsWriter ***a1)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1);
}

uint64_t sub_20BF33348(pxrInternal__aapl__pxrReserved__::JsWriter ***a1)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1);
}

uint64_t sub_20BF33358(pxrInternal__aapl__pxrReserved__::JsWriter ***a1)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1);
}

uint64_t sub_20BF33368(pxrInternal__aapl__pxrReserved__::JsWriter ***a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1, *a2);
}

pxrInternal__aapl__pxrReserved__::TraceEventList *pxrInternal__aapl__pxrReserved__::TraceEventList::TraceEventList(pxrInternal__aapl__pxrReserved__::TraceEventList *this)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v2;
  char *v3;
  _OWORD *v4;

  v2 = pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer(this);
  v3 = (char *)v2 + 32;
  *((_QWORD *)v2 + 4) = (char *)v2 + 32;
  *((_QWORD *)v2 + 5) = (char *)v2 + 32;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 15) = 1024;
  v4 = operator new(0x38uLL);
  v4[1] = 0u;
  v4[2] = 0u;
  *((_DWORD *)v4 + 12) = 1065353216;
  *(_QWORD *)v4 = v3;
  *((_QWORD *)v4 + 1) = v3;
  *((_QWORD *)this + 4) = v4;
  *((_QWORD *)this + 5) = v4;
  *((_QWORD *)this + 6) = 1;
  return this;
}

void sub_20BF333E8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer *v1;
  uint64_t *v2;

  sub_20BF2A724((_QWORD *)v1 + 9);
  sub_20BF2A850(v2);
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceEventList::Append(_QWORD *a1, pxrInternal__aapl__pxrReserved__::TraceEventContainer *a2)
{
  sub_20BEBD458((uint64_t)(a1 + 4), a1 + 4, (_QWORD *)a2 + 4);
  return pxrInternal__aapl__pxrReserved__::TraceEventContainer::Append(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventNode::Append@<X0>(pxrInternal__aapl__pxrReserved__::TraceEventNode *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  __n128 v10;
  uint64_t v11;
  __n128 *v12;

  v10 = 0uLL;
  v11 = 0;
  sub_20BF202A0((uint64_t *)a2, a3, a4, a5, &v10, a6, a7);
  v12 = &v10;
  sub_20BF206A4((void ***)&v12);
  return sub_20BF1F584((uint64_t *)this + 6, a7);
}

void sub_20BF334B8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;

  sub_20BF1DCD8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventNode::Append(uint64_t a1, uint64_t *a2)
{
  return sub_20BF1F584((uint64_t *)(a1 + 48), a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(_QWORD *this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  v1 = this;
  v2 = (uint64_t *)this[6];
  v3 = (uint64_t *)this[7];
  if (v2 == v3)
  {
    this[4] = 0;
    this[5] = 0;
  }
  else
  {
    *((_OWORD *)this + 2) = xmmword_20CA9D3F0;
    do
    {
      v4 = *(_QWORD *)(sub_20BF1CFB0(v2) + 32);
      if (v4 >= v1[4])
        v4 = v1[4];
      v1[4] = v4;
      this = (_QWORD *)sub_20BF1CFB0(v2);
      v5 = this[5];
      if (v1[5] > v5)
        v5 = v1[5];
      v1[5] = v5;
      ++v2;
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TraceEventNode::AddAttribute(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TraceEventData *a3)
{
  return sub_20BF3357C(this + 10, (uint64_t *)a2, (uint64_t)a3);
}

uint64_t *sub_20BF3357C(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t v6;
  uint64_t *v7;

  sub_20BF335F4((uint64_t)a1, a2, a3, (uint64_t)&v7);
  v4 = (uint64_t **)sub_20BF3367C((uint64_t)a1, &v6, v7 + 4);
  sub_20BDDE1B4(a1, v6, v4, v7);
  return v7;
}

void sub_20BF335D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11)
{
  if (a10)
    sub_20BF338A8((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF335F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *result;

  v7 = a1 + 8;
  v8 = (uint64_t *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_20BF336F4(v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BF33660(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BF338A8(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF3367C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = v4;
        if (!sub_20BF1E6D8(v7, a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t *sub_20BF336F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF33778((uint64_t)(a1 + 1), a3);
  return a1;
}

uint64_t sub_20BF33778(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_20BF337BC(a1, a2);
  return a1;
}

void sub_20BF337A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF207C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF337BC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C51CBB8[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_24C51CBE8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void *sub_20BF3384C(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20BDDBFAC(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20BF33878(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void sub_20BF33884(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_20BF33890(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

double sub_20BF3389C(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void sub_20BF338A8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_20BF207C0((uint64_t)(a2 + 5));
    v3 = a2[4];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void pxrInternal__aapl__pxrReserved__::TraceEventTree::New(pxrInternal__aapl__pxrReserved__::TraceCollection **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t (**v6)();
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  _QWORD *v8[3];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  void *v10;
  _QWORD *v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::Trace_EventTreeBuilder((pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *)&v6);
  if (a2)
    pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::SetCurrentValues((uint64_t)&v10, a2);
  pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::CreateTree((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v6, a1);
  *a3 = (uint64_t)v9;
  sub_20BF1DD04(a3);
  v6 = off_24C51C600;
  sub_20BF20D80((uint64_t)&v14);
  v10 = &unk_24C51CAE8;
  sub_20BF20BCC((uint64_t)&v13);
  sub_20BF20CC0((uint64_t)&v12);
  sub_20BF20C54((uint64_t)v11, v11[1]);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v10);
  sub_20BF1D8C8(&v9);
  sub_20BF20EB0((uint64_t)v8, v8[1]);
  sub_20BF1DCD8(&v7);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v6);
}

void sub_20BF33A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF20598((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventTree::Add@<X0>(pxrInternal__aapl__pxrReserved__::TraceEventTree *this@<X0>, pxrInternal__aapl__pxrReserved__::TraceCollection **a2@<X1>, uint64_t *a3@<X8>)
{
  _BYTE v7[40];

  pxrInternal__aapl__pxrReserved__::TraceEventTree::GetFinalCounterValues(this, (uint64_t)v7);
  pxrInternal__aapl__pxrReserved__::TraceEventTree::New(a2, (uint64_t)v7, a3);
  pxrInternal__aapl__pxrReserved__::TraceEventTree::Merge((uint64_t *)this, a3);
  return sub_20BF20BCC((uint64_t)v7);
}

void sub_20BF33A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  va_list va;

  va_start(va, a2);
  sub_20BF1D8C8(v2);
  sub_20BF20BCC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceEventTree::GetFinalCounterValues@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = (_QWORD *)this[6]; i; i = (_QWORD *)*i)
  {
    v4 = i[4];
    if (i[3] != v4)
    {
      v5 = *(_QWORD *)(v4 - 8);
      v6 = i + 2;
      this = sub_20BF2B45C(a2, i + 2, (uint64_t)&unk_20CAC184C, &v6);
      this[3] = v5;
    }
  }
  return this;
}

void sub_20BF33B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF20BCC(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceEventTree::Merge(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **i;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v22;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *j;
  char **v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  char *v37;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v38;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v39;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v40;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v41;

  v4 = sub_20BF1CF28(a2);
  v5 = sub_20BF1CFB0((uint64_t *)(v4 + 24));
  v6 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v5 + 48);
  for (i = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v5 + 56); v6 != i; ++v6)
  {
    v41 = *v6;
    sub_20BF1DD04((uint64_t *)&v41);
    v8 = sub_20BF1CFB0(a1 + 3);
    v9 = *(uint64_t **)(v8 + 48);
    v10 = *(uint64_t **)(v8 + 56);
    if (v9 == v10)
      goto LABEL_26;
    while (1)
    {
      v11 = *(_QWORD *)(sub_20BF1CFB0(v9) + 16);
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      v14 = *(_QWORD *)(sub_20BF1CFB0((uint64_t *)&v41) + 16);
      if ((v14 & 7) != 0)
      {
        v15 = v14 & 0xFFFFFFFFFFFFFFF8;
        do
          v16 = __ldxr((unsigned int *)v15);
        while (__stxr(v16 + 2, (unsigned int *)v15));
        if ((v16 & 1) != 0)
          v15 = v14;
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        if ((v15 & 7) != 0)
        {
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
      }
      else
      {
        v17 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      }
      v19 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      if ((v11 & 7) != 0)
      {
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if (v17 == v19)
        break;
      if (++v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
    if (v9 == *(uint64_t **)(v8 + 56))
    {
LABEL_26:
      v25 = sub_20BF1CFB0(a1 + 3);
      v38 = v41;
      sub_20BF1DD04((uint64_t *)&v38);
      pxrInternal__aapl__pxrReserved__::TraceEventNode::Append(v25, (uint64_t *)&v38);
      sub_20BF1DCD8(&v38);
    }
    else
    {
      v21 = sub_20BF1CFB0((uint64_t *)&v41);
      v22 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v21 + 48);
      v23 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v21 + 56);
      while (v22 != v23)
      {
        v40 = *v22;
        sub_20BF1DD04((uint64_t *)&v40);
        v24 = sub_20BF1CFB0(v9);
        v39 = v40;
        sub_20BF1DD04((uint64_t *)&v39);
        pxrInternal__aapl__pxrReserved__::TraceEventNode::Append(v24, (uint64_t *)&v39);
        sub_20BF1DCD8(&v39);
        sub_20BF1DCD8(&v40);
        ++v22;
      }
      v26 = (_QWORD *)sub_20BF1CFB0(v9);
      pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(v26);
    }
    sub_20BF1DCD8(&v41);
  }
  for (j = *(uint64_t **)(sub_20BF1CF28(a2) + 48); j; j = (uint64_t *)*j)
  {
    v28 = (char **)sub_20BF2B388(a1 + 4, j + 2);
    if (v28)
    {
      v29 = (uint64_t)v28[4];
      v30 = (uint64_t *)(v28 + 3);
      v31 = v29 - (_QWORD)v28[3];
      sub_20BF34F08(v28 + 3, v29, (__int128 *)j[3], (__int128 *)j[4], (j[4] - j[3]) >> 4);
      sub_20BF3512C(*v30, (unint64_t *)(*v30 + v31), (uint64_t *)v30[1], (uint64_t)&v41);
    }
    else
    {
      sub_20BF24AE0((uint64_t)(a1 + 4), j + 2, j + 2);
    }
  }
  v32 = *(uint64_t **)(sub_20BF1CF28(a2) + 88);
  if (v32)
  {
    v33 = a1 + 9;
    do
    {
      v34 = sub_20BF2B388(v33, v32 + 2);
      if (v34)
      {
        v35 = (_QWORD *)v34[4];
        v36 = v34 + 3;
        v37 = (char *)v35 - v34[3];
        sub_20BF357E8(v34 + 3, v35, (_QWORD *)v32[3], v32[4], (v32[4] - v32[3]) >> 5);
        sub_20BF35CA8(*v36, &v37[*v36], (uint64_t *)v36[1], (uint64_t)&v41);
      }
      else
      {
        sub_20BF24F78((uint64_t)v33, v32 + 2, v32 + 2);
      }
      v32 = (uint64_t *)*v32;
    }
    while (v32);
  }
}

void sub_20BF33E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF1DCD8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventTree::WriteChromeTraceObject(uint64_t a1, pxrInternal__aapl__pxrReserved__::JsWriter *this, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *v7;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t *EmptyString;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *i;
  uint64_t j;
  uint64_t v20;
  uint64_t *v21;
  double v22;
  _QWORD *k;
  uint64_t v24;
  uint64_t m;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *__p[2];
  char v32;
  int v33;

  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(this);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "traceEvents");
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray(this);
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1CFB0((uint64_t *)(a1 + 24));
  v8 = (uint64_t *)*((_QWORD *)v6 + 6);
  v7 = (uint64_t *)*((_QWORD *)v6 + 7);
  while (v8 != v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1CFB0(v8);
    v10 = *((_QWORD *)v9 + 2);
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v10 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)(v13 + 4);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId(__p, (__int128 *)EmptyString);
    if ((v10 & 7) != 0)
    {
      do
        v15 = __ldxr(v13);
      while (__stlxr(v15 - 2, v13));
    }
    v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1CFB0(v8);
    v16 = (uint64_t *)*((_QWORD *)v6 + 6);
    v17 = (uint64_t *)*((_QWORD *)v6 + 7);
    while (v16 != v17)
      sub_20BF3429C(v16++, 0, __p, (void **)this);
    if (v32 < 0)
      operator delete(__p[0]);
    ++v8;
  }
  v29 = a1;
  v30 = a3;
  for (i = *(_QWORD **)(a1 + 48); i; i = (_QWORD *)*i)
  {
    v20 = i[3];
    for (j = i[4]; v20 != j; v20 += 16)
    {
      if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0)
        v21 = (uint64_t *)((i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v21 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      v22 = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(*(pxrInternal__aapl__pxrReserved__ **)v20)
          / 1000.0;
      pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(this);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "cat");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)this, "");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "tid");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "pid");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "name");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)this, v21);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "ph");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)this, "C");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "ts");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this, v22);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "args");
      sub_20BF34C94(this, "value", (double *)(v20 + 8));
      v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(this);
    }
  }
  v33 = 0;
  for (k = *(_QWORD **)(v29 + 88); k; k = (_QWORD *)*k)
  {
    v24 = k[3];
    for (m = k[4]; v24 != m; v24 += 32)
    {
      if ((k[2] & 0xFFFFFFFFFFFFFFF8) != 0)
        v26 = (uint64_t *)((k[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v26 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      *(double *)__p = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(*(pxrInternal__aapl__pxrReserved__ **)v24)
                     / 1000.0;
      pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(this);
      sub_20BF34CE0((uint64_t **)this, "cat", "", "tid", (uint64_t *)(v24 + 8), "pid", (uint64_t)&v33, "name", v26, "ph", "I", "s", "t", "ts", (double *)__p);
      v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(this);
    }
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::EndArray(this);
  v27 = *(_QWORD *)(v30 + 24);
  if (v27)
    (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::JsWriter *))(*(_QWORD *)v27 + 48))(v27, this);
  return pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(this);
}

void sub_20BF3425C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF3429C(uint64_t *a1, unsigned int a2, void **a3, void **a4)
{
  pxrInternal__aapl__pxrReserved__::TraceCategory *v7;
  pxrInternal__aapl__pxrReserved__::TraceCategory *Instance;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  std::string::size_type size;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t *EmptyString;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  int v47;
  void **v48[5];
  uint64_t v49;
  uint64_t v50;
  std::string v51;
  unsigned int v52;

  v52 = a2;
  v7 = (pxrInternal__aapl__pxrReserved__::TraceCategory *)sub_20BDDC0E4(&v51, "");
  Instance = (pxrInternal__aapl__pxrReserved__::TraceCategory *)pxrInternal__aapl__pxrReserved__::TraceCategory::GetInstance(v7);
  v9 = sub_20BF1CFB0(a1);
  pxrInternal__aapl__pxrReserved__::TraceCategory::GetCategories(Instance, *(_DWORD *)(v9 + 24), &v49);
  v10 = v49;
  for (i = v50; v10 != i; v10 += 24)
  {
    size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v51.__r_.__value_.__l.__size_;
    if (size)
      std::string::append(&v51, ",");
    v13 = *(char *)(v10 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v10;
    else
      v14 = *(const std::string::value_type **)v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v10 + 23);
    else
      v15 = *(_QWORD *)(v10 + 8);
    std::string::append(&v51, v14, v15);
  }
  v48[0] = a4;
  v48[1] = (void **)&v51;
  v48[2] = (void **)a1;
  v48[3] = (void **)&v52;
  v48[4] = a3;
  sub_20BF34780((uint64_t)v48);
  v16 = sub_20BF1CFB0(a1);
  v17 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(*(pxrInternal__aapl__pxrReserved__ **)(v16 + 32));
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ts");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a4, (double)v17 / 1000.0);
  if (*(_QWORD *)(sub_20BF1CFB0(a1) + 96))
  {
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "args");
    pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
    memset(v46, 0, sizeof(v46));
    v47 = 1065353216;
    v18 = sub_20BF1CFB0(a1);
    v19 = *(_QWORD **)(v18 + 80);
    v20 = (_QWORD *)(v18 + 88);
    if (v19 != (_QWORD *)(v18 + 88))
    {
      do
      {
        v21 = v19 + 4;
        if (!sub_20BF2B388(v46, v19 + 4))
        {
          sub_20BF348DC((uint64_t)v46, v19 + 4, v19 + 4);
          v22 = sub_20BF1CFB0(a1);
          v23 = sub_20BF34BA0(v22 + 80, v19 + 4);
          v25 = v23;
          v26 = v24;
          if (v23 == v24)
            goto LABEL_25;
          v27 = 0;
          v28 = v23;
          do
          {
            v29 = v27;
            v30 = (_QWORD *)v28[1];
            if (v30)
            {
              do
              {
                v31 = v30;
                v30 = (_QWORD *)*v30;
              }
              while (v30);
            }
            else
            {
              do
              {
                v31 = (_QWORD *)v28[2];
                v32 = *v31 == (_QWORD)v28;
                v28 = v31;
              }
              while (!v32);
            }
            v27 = v29 + 1;
            v28 = v31;
          }
          while (v31 != v24);
          if (v29)
          {
LABEL_25:
            if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0)
              EmptyString = (uint64_t *)((*v21 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v23);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, EmptyString);
            pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
            if (v25 != v26)
            {
              do
              {
                pxrInternal__aapl__pxrReserved__::TraceEventData::WriteJson((pxrInternal__aapl__pxrReserved__::TraceEventData *)(v25 + 5), (pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
                v34 = (_QWORD *)v25[1];
                if (v34)
                {
                  do
                  {
                    v35 = v34;
                    v34 = (_QWORD *)*v34;
                  }
                  while (v34);
                }
                else
                {
                  do
                  {
                    v35 = (_QWORD *)v25[2];
                    v32 = *v35 == (_QWORD)v25;
                    v25 = v35;
                  }
                  while (!v32);
                }
                v25 = v35;
              }
              while (v35 != v26);
            }
            pxrInternal__aapl__pxrReserved__::JsWriter::EndArray((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
          }
          else
          {
            if ((v23[4] & 0xFFFFFFFFFFFFFFF8) != 0)
              v36 = (uint64_t *)((v23[4] & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v23);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, v36);
            pxrInternal__aapl__pxrReserved__::TraceEventData::WriteJson((pxrInternal__aapl__pxrReserved__::TraceEventData *)(v25 + 5), (pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
          }
        }
        v37 = (_QWORD *)v19[1];
        if (v37)
        {
          do
          {
            v38 = v37;
            v37 = (_QWORD *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v19[2];
            v32 = *v38 == (_QWORD)v19;
            v19 = v38;
          }
          while (!v32);
        }
        v19 = v38;
      }
      while (v38 != v20);
    }
    pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
    sub_20BF20BCC((uint64_t)v46);
  }
  if (*(_BYTE *)(sub_20BF1CFB0(a1) + 72))
  {
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ph");
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a4, "B");
    pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
    sub_20BF34780((uint64_t)v48);
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ph");
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a4, "E");
    v39 = sub_20BF1CFB0(a1);
    v40 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(*(pxrInternal__aapl__pxrReserved__ **)(v39 + 40));
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ts");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ph");
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a4, "X");
    v41 = *(_QWORD *)(sub_20BF1CFB0(a1) + 40);
    v42 = sub_20BF1CFB0(a1);
    v40 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds((pxrInternal__aapl__pxrReserved__ *)(v41 - *(_QWORD *)(v42 + 32)));
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "dur");
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a4, (double)v40 / 1000.0);
  pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
  v43 = sub_20BF1CFB0(a1);
  v44 = *(_QWORD *)(v43 + 48);
  v45 = *(_QWORD *)(v43 + 56);
  while (v44 != v45)
  {
    sub_20BF3429C(v44, v52, a3, a4);
    v44 += 8;
  }
  v48[0] = (void **)&v49;
  sub_20BDE5038(v48);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
}

void sub_20BF3470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_20BF20BCC((uint64_t)&a9);
  a15 = &a20;
  sub_20BDE5038((void ***)&a15);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF34780(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::JsWriter *v2;
  uint64_t *v3;
  pxrInternal__aapl__pxrReserved__::JsWriter *v4;
  pxrInternal__aapl__pxrReserved__::JsWriter *v5;
  pxrInternal__aapl__pxrReserved__::JsWriter *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::JsWriter *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t *EmptyString;
  uint64_t result;
  unsigned int v16;

  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(*(pxrInternal__aapl__pxrReserved__::JsWriter **)a1);
  v2 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  v3 = *(uint64_t **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(*(uint64_t ***)a1, "cat");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)v2, v3);
  v4 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  sub_20BF1CFB0(*(uint64_t **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)v4, "libTraceCatId");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(v4);
  v5 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(*(uint64_t ***)a1, "pid");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(v5);
  v6 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  v7 = *(uint64_t **)(a1 + 32);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(*(uint64_t ***)a1, "tid");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)v6, v7);
  v8 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1CFB0(*(uint64_t **)(a1 + 16));
  v10 = *((_QWORD *)v9 + 2);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  v13 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)(v13 + 4);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)v8, "name");
  result = pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)v8, EmptyString);
  if ((v10 & 7) != 0)
  {
    do
      v16 = __ldxr(v13);
    while (__stlxr(v16 - 2, v13));
  }
  return result;
}

_QWORD *sub_20BF348DC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF34B24(a1, v6, a3, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BF34B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF34B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x18uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[2] = *a3;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *sub_20BF34BA0(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  while ((sub_20BF1E6D8(v5, a2, v3 + 4) & 1) != 0)
  {
    v2 = v3;
LABEL_7:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return v2;
  }
  if (sub_20BF1E6D8(v5, v3 + 4, a2))
  {
    ++v3;
    goto LABEL_7;
  }
  v8 = (_QWORD *)*v3;
  v6 = v3;
  if (*v3)
  {
    v6 = v3;
    do
    {
      v9 = sub_20BF1E6D8(v5, v8 + 4, a2);
      v10 = v8 + 1;
      if (!v9)
      {
        v10 = v8;
        v6 = v8;
      }
      v8 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  v11 = (_QWORD *)v3[1];
  if (v11)
  {
    do
    {
      v12 = sub_20BF1E6D8(v5, a2, v11 + 4);
      v13 = v11 + 1;
      if (v12)
        v13 = v11;
      v11 = (_QWORD *)*v13;
    }
    while (*v13);
  }
  return v6;
}

uint64_t sub_20BF34C94(pxrInternal__aapl__pxrReserved__::JsWriter *a1, const char *a2, double *a3)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(a1);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, *a3);
  return pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(a1);
}

uint64_t sub_20BF34CE0(uint64_t **a1, const char *a2, const char *a3, const char *a4, uint64_t *a5, const char *a6, uint64_t a7, const char *a8, uint64_t *a9, const char *a10, const char *a11, const char *a12, const char *a13, const char *a14, double *a15)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a5);
  return sub_20BF34D98(a1, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_20BF34D98(uint64_t **a1, const char *a2, uint64_t a3, const char *a4, uint64_t *a5, const char *a6, const char *a7, const char *a8, const char *a9, const char *a10, double *a11)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1);
  return sub_20BF34E28(a1, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_20BF34E28(uint64_t **a1, const char *a2, uint64_t *a3, const char *a4, const char *a5, const char *a6, const char *a7, const char *a8, double *a9)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a5);
  return sub_20BF34EB4(a1, a6, a7, a8, a9);
}

uint64_t sub_20BF34EB4(uint64_t **a1, const char *a2, const char *a3, const char *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1, *a5);
}

char *sub_20BF34F08(char **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  __int128 *v9;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v22;
  __int128 *v23;
  _OWORD *v24;
  __int128 v25;
  char *v26;
  __int128 *v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *i;
  __int128 v44;
  char *v45;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF0];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if (a5 <= (uint64_t)&v13[-v14] >> 4)
  {
    v20 = (uint64_t)(v14 - (_QWORD)v7) >> 4;
    if (v20 >= a5)
    {
      v21 = &a3[a5];
      v22 = *(char **)(v11 - 8);
    }
    else
    {
      v21 = &a3[v20];
      v22 = *(char **)(v11 - 8);
      if (v21 != a4)
      {
        v23 = v21;
        v24 = *(_OWORD **)(v11 - 8);
        do
        {
          v25 = *v23++;
          *v24++ = v25;
          v22 += 16;
        }
        while (v23 != a4);
      }
      a1[1] = v22;
      if ((uint64_t)(v14 - (_QWORD)v7) < 1)
        return v7;
    }
    v26 = &v7[16 * a5];
    v27 = (__int128 *)&v22[-16 * a5];
    v28 = v22;
    if ((unint64_t)v27 < v14)
    {
      v28 = v22;
      do
      {
        v29 = *v27++;
        *(_OWORD *)v28 = v29;
        v28 += 16;
      }
      while ((unint64_t)v27 < v14);
    }
    a1[1] = v28;
    if (v22 != v26)
    {
      v30 = v22 - 8;
      v31 = 16 * ((v22 - v26) >> 4);
      do
      {
        *((_QWORD *)v30 - 1) = *(_QWORD *)&v7[v31 - 16];
        *(_QWORD *)v30 = *(_QWORD *)&v7[v31 - 8];
        v30 -= 16;
        v31 -= 16;
      }
      while (v31);
    }
    if (v21 != a3)
    {
      v32 = v7;
      do
      {
        *(_QWORD *)v32 = *(_QWORD *)v9;
        *((_QWORD *)v32 + 1) = *((_QWORD *)v9++ + 1);
        v32 += 16;
      }
      while (v9 != v21);
    }
    return v7;
  }
  v15 = a5 + ((uint64_t)(v14 - (_QWORD)v5) >> 4);
  if (v15 >> 60)
    sub_20BDDF694();
  v16 = v6 >> 4;
  v17 = v12 - v5;
  if (v17 >> 3 > v15)
    v15 = v17 >> 3;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
    v18 = 0xFFFFFFFFFFFFFFFLL;
  else
    v18 = v15;
  if (v18)
    v19 = (char *)sub_20BDEA2F0(v11, v18);
  else
    v19 = 0;
  v33 = &v19[16 * v16];
  v34 = &v33[16 * a5];
  v35 = 16 * a5;
  v36 = v33;
  do
  {
    v37 = *v9++;
    *(_OWORD *)v36 = v37;
    v36 += 16;
    v35 -= 16;
  }
  while (v35);
  v38 = *a1;
  v39 = v33;
  if (*a1 != v7)
  {
    v40 = v7;
    v41 = v33;
    do
    {
      v39 = v41 - 16;
      *((_OWORD *)v41 - 1) = *((_OWORD *)v40 - 1);
      v40 -= 16;
      v41 -= 16;
    }
    while (v40 != v38);
  }
  v42 = &v19[16 * v18];
  for (i = a1[1]; v7 != i; v34 += 16)
  {
    v44 = *(_OWORD *)v7;
    v7 += 16;
    *(_OWORD *)v34 = v44;
  }
  v45 = *a1;
  *a1 = v39;
  a1[1] = v34;
  a1[2] = v42;
  if (v45)
    operator delete(v45);
  return v33;
}

void sub_20BF3512C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  double v13;

  v8 = ((uint64_t)a2 - a1) >> 4;
  v9 = ((char *)a3 - (char *)a2) >> 4;
  if (v9 >= v8)
    v10 = ((uint64_t)a2 - a1) >> 4;
  else
    v10 = ((char *)a3 - (char *)a2) >> 4;
  v11 = (uint64_t *)sub_20BF351E8(v10);
  sub_20BF35248(a1, a2, a3, a4, v8, v9, v11, v12, v13);
  if (v11)
    operator delete(v11);
}

void sub_20BF351D0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *sub_20BF351E8(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x7FFFFFFFFFFFFFFLL)
    v1 = 0x7FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(16 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double sub_20BF35248(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, double result)
{
  uint64_t v9;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;

  if (a6)
  {
    v9 = a6;
    v39 = a8;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return sub_20BF35524(a1, a2, a3, result, a4, a5, v9, a7);
      if (!a5)
        return result;
      v12 = 0;
      v13 = *a2;
      v14 = -a5;
      while (1)
      {
        v15 = *(unint64_t *)((char *)v12 + a1);
        if (v13 < v15)
          break;
        if (v15 >= v13)
        {
          result = *((double *)a2 + 1);
          if (result < *(double *)((char *)v12 + a1 + 8))
            break;
        }
        v12 += 2;
        if (__CFADD__(v14++, 1))
          return result;
      }
      if (-v14 >= v9)
      {
        if (v14 == -1)
        {
          v38 = (unint64_t *)((char *)v12 + a1);
          *v38 = v13;
          *a2 = v15;
          result = *(double *)((char *)v12 + a1 + 8);
          v38[1] = a2[1];
          *((double *)a2 + 1) = result;
          return result;
        }
        if (v14 <= 0)
          v26 = -v14;
        else
          v26 = 1 - v14;
        v25 = v26 >> 1;
        v20 = (unint64_t *)((char *)&v12[2 * (v26 >> 1)] + a1);
        v19 = a2;
        if (a2 != (unint64_t *)a3)
        {
          v27 = ((char *)a3 - (char *)a2) >> 4;
          v28 = *v20;
          v19 = a2;
          do
          {
            v29 = v27 >> 1;
            v30 = &v19[2 * (v27 >> 1)];
            if (*v30 < v28 || v28 >= *v30 && *(double *)&v19[2 * v29 + 1] < *((double *)v20 + 1))
            {
              v19 = v30 + 2;
              v29 = v27 + ~v29;
            }
            v27 = v29;
          }
          while (v29);
        }
        v18 = ((char *)v19 - (char *)a2) >> 4;
      }
      else
      {
        if (v9 >= 0)
          v17 = v9;
        else
          v17 = v9 + 1;
        v18 = v17 >> 1;
        v19 = &a2[2 * (v17 >> 1)];
        v20 = (unint64_t *)((char *)v12 + a1);
        if ((unint64_t *)((char *)a2 - a1) != v12)
        {
          v21 = ((char *)a2 - a1 - (char *)v12) >> 4;
          v22 = *v19;
          v20 = (unint64_t *)((char *)v12 + a1);
          do
          {
            v23 = v21 >> 1;
            v24 = &v20[2 * (v21 >> 1)];
            if (v22 >= *v24 && (*v24 < v22 || *((double *)v19 + 1) >= *(double *)&v20[2 * v23 + 1]))
            {
              v20 = v24 + 2;
              v23 = v21 + ~v23;
            }
            v21 = v23;
          }
          while (v23);
        }
        v25 = ((char *)v20 - a1 - (char *)v12) >> 4;
      }
      v31 = (uint64_t *)v19;
      if (v20 != a2)
      {
        v31 = (uint64_t *)v20;
        if (v19 != a2)
        {
          v32 = a3;
          v33 = v18;
          v34 = sub_20BF35724((uint64_t *)v20, (uint64_t *)a2, (uint64_t *)v19);
          v18 = v33;
          a3 = v32;
          a8 = v39;
          v31 = v34;
        }
      }
      a5 = -v25 - v14;
      v35 = v9 - v18;
      if (v25 + v18 >= v9 - (v25 + v18) - v14)
      {
        v37 = v18;
        sub_20BF35248(v31, v19, a3, a4, -v25 - v14, v35, a7, a8);
        v19 = v20;
        v35 = v37;
        a5 = v25;
        a3 = v31;
        a1 += (uint64_t)v12;
      }
      else
      {
        v36 = a3;
        sub_20BF35248((char *)v12 + a1, v20, v31, a4, v25, v18, a7, a8);
        a3 = v36;
        a1 = (uint64_t)v31;
      }
      v9 = v35;
      a2 = v19;
      a8 = v39;
    }
    while (v35);
  }
  return result;
}

double sub_20BF35524(uint64_t a1, unint64_t *a2, uint64_t *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t *v14;
  unint64_t *v15;
  __int128 v16;

  if (a6 <= a7)
  {
    v14 = a8;
    if ((unint64_t *)a1 != a2)
    {
      v14 = a8;
      v15 = (unint64_t *)a1;
      do
      {
        v16 = *(_OWORD *)v15;
        v15 += 2;
        a4 = *(double *)&v16;
        *(_OWORD *)v14 = v16;
        v14 += 2;
      }
      while (v15 != a2);
    }
    return sub_20BF355E4(a8, v14, a2, a3, a1, a4);
  }
  else
  {
    v10 = a8;
    if (a2 != (unint64_t *)a3)
    {
      v10 = a8;
      v11 = (uint64_t *)a2;
      do
      {
        v12 = *(_OWORD *)v11;
        v11 += 2;
        a4 = *(double *)&v12;
        *(_OWORD *)v10 = v12;
        v10 += 2;
      }
      while (v11 != a3);
    }
    return sub_20BF3567C(a4, (uint64_t)v10, (uint64_t)v10, (uint64_t)a8, (uint64_t)a8, (uint64_t)a2, (uint64_t)a2, a1, a1, (uint64_t)a3, (uint64_t)a3);
  }
}

double sub_20BF355E4(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t a5, double result)
{
  unint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  while (a1 != a2)
  {
    if (a3 == (unint64_t *)a4)
    {
      v9 = 0;
      do
      {
        v10 = a5 + v9 * 8;
        v11 = &a1[v9];
        *(_QWORD *)v10 = a1[v9];
        result = *(double *)&a1[v9 + 1];
        *(double *)(v10 + 8) = result;
        v9 += 2;
      }
      while (v11 + 2 != a2);
      return result;
    }
    v6 = *a3;
    v7 = *a1;
    if (*a3 < *a1)
    {
      result = *((double *)a3 + 1);
LABEL_5:
      *(_QWORD *)a5 = v6;
      *(double *)(a5 + 8) = result;
      a3 += 2;
      goto LABEL_10;
    }
    if (v7 >= v6)
    {
      result = *((double *)a3 + 1);
      v8 = *((double *)a1 + 1);
      if (result < v8)
        goto LABEL_5;
    }
    else
    {
      v8 = *((double *)a1 + 1);
    }
    *(_QWORD *)a5 = v7;
    *(double *)(a5 + 8) = v8;
    a1 += 2;
LABEL_10:
    a5 += 16;
  }
  return result;
}

double sub_20BF3567C(double result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double *v16;

  if (a3 != a5)
  {
    v11 = (double *)(a11 - 8);
    while (a7 != a9)
    {
      v12 = a7 - 16;
      v13 = *(_QWORD *)(a7 - 16);
      v14 = *(_QWORD *)(a3 - 16);
      if (v14 >= v13)
      {
        if (v13 < v14 || (result = *(double *)(a7 - 8), *(double *)(a3 - 8) >= result))
        {
          v13 = *(_QWORD *)(a3 - 16);
          result = *(double *)(a3 - 8);
          v12 = a7;
          a3 -= 16;
        }
      }
      else
      {
        result = *(double *)(a7 - 8);
      }
      *((_QWORD *)v11 - 1) = v13;
      *v11 = result;
      v11 -= 2;
      a7 = v12;
      if (a3 == a5)
        return result;
    }
    v15 = 0;
    do
    {
      v16 = &v11[v15 / 8];
      *(v16 - 1) = *(double *)(a3 + v15 - 16);
      result = *(double *)(a3 + v15 - 8);
      *v16 = result;
      v15 -= 16;
    }
    while (a3 + v15 != a5);
  }
  return result;
}

uint64_t *sub_20BF35724(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  result = a1 + 2;
  for (i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2)
      a2 = i;
    v7 = *result;
    *result = *i;
    *i = v7;
    v8 = result[1];
    result[1] = i[1];
    i[1] = v8;
    result += 2;
  }
  if (result != a2)
  {
    v9 = result;
    v10 = a2;
    do
    {
      while (1)
      {
        v11 = *v9;
        *v9 = *v10;
        *v10 = v11;
        v12 = v9[1];
        v9[1] = v10[1];
        v10[1] = v12;
        v9 += 2;
        v10 += 2;
        if (v10 == a3)
          break;
        if (v9 == a2)
          a2 = v10;
      }
      v10 = a2;
    }
    while (v9 != a2);
  }
  return result;
}

_QWORD *sub_20BF357E8(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      v19 = v12 - (_QWORD)a2;
      v20 = (uint64_t)(v12 - (_QWORD)a2) >> 5;
      if (v20 >= a5)
      {
        v21 = &a3[4 * a5];
      }
      else
      {
        v21 = &a3[4 * v20];
        a1[1] = (uint64_t)sub_20BF253B0(v9, (uint64_t)v21, a4, *(_QWORD **)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      sub_20BF35964((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[4 * a5]);
      sub_20BF35BBC(a3, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 5;
      v16 = v10 - v13;
      if (v16 >> 4 > v14)
        v14 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v27 = v9;
      if (v17)
        v18 = (char *)sub_20BED2F10(v9, v17);
      else
        v18 = 0;
      v23 = v18;
      v24 = &v18[32 * v15];
      v25 = v24;
      v26 = &v18[32 * v17];
      sub_20BF359E0(&v23, (uint64_t)a3, a5);
      v5 = (_QWORD *)sub_20BF35A74(a1, &v23, (uint64_t)v5);
      sub_20BF2405C((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_20BF35944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF35964(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v10 = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v8 += 32;
      v9 += 32;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20BF35B24((uint64_t)&v12, a2, v7, v6);
}

_QWORD *sub_20BF359E0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v5 = v4 + 8;
    v6 = 32 * a3;
    v7 = (__int128 *)(a2 + 8);
    v4 += 32 * a3;
    do
    {
      *(_QWORD *)(v5 - 8) = *((_QWORD *)v7 - 1);
      if (*((char *)v7 + 23) < 0)
      {
        result = sub_20BDDBFAC((_BYTE *)v5, *(void **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v8 = *v7;
        *(_QWORD *)(v5 + 16) = *((_QWORD *)v7 + 2);
        *(_OWORD *)v5 = v8;
      }
      v5 += 32;
      v7 += 2;
      v6 -= 32;
    }
    while (v6);
  }
  v3[2] = v4;
  return result;
}

void sub_20BF35A68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

uint64_t sub_20BF35A74(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20BF23F44((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20BF35C1C(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20BF35B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      *(_QWORD *)(a4 + v7 - 32) = *(_QWORD *)(a3 + v7 - 32);
      v9 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0)
        operator delete(*v9);
      v10 = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(a4 + v7 - 8) = *(_QWORD *)(v8 - 8);
      *(_OWORD *)v9 = v10;
      *(_BYTE *)(v8 - 1) = 0;
      *(_BYTE *)(v8 - 24) = 0;
      v7 -= 32;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

_QWORD *sub_20BF35BBC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const std::string *v6;
  uint64_t v7;
  std::string *v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = (const std::string *)(v4 + 1);
    v7 = *v4;
    v4 += 4;
    v8 = (std::string *)(a3 + 1);
    *a3 = v7;
    a3 += 4;
    std::string::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_20BF35C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)a2;
      v5 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(v4 + 8) = v5;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v4 += 32;
      a2 += 32;
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  sub_20BF2547C((uint64_t)v7);
  return v4;
}

void sub_20BF35CA8(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v8 = (uint64_t)&a2[-a1] >> 5;
  v9 = ((char *)a3 - a2) >> 5;
  if (v9 >= v8)
    v10 = (uint64_t)&a2[-a1] >> 5;
  else
    v10 = ((char *)a3 - a2) >> 5;
  v11 = sub_20BF35D64(v10);
  sub_20BF35DC4(a1, a2, a3, a4, v8, v9, (uint64_t)v11, v12);
  if (v11)
    operator delete(v11);
}

void sub_20BF35D4C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *sub_20BF35D64(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x3FFFFFFFFFFFFFFLL)
    v1 = 0x3FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(32 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

__n128 sub_20BF35DC4(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  __int128 v34;

  if (a6)
  {
    v8 = a6;
    do
    {
      if (v8 <= a8 || a5 <= a8)
      {
        sub_20BF36084(a1, (uint64_t *)a2, a3, a4, a5, v8, a7);
        return result;
      }
      if (!a5)
        return result;
      v12 = 0;
      v13 = -a5;
      while (1)
      {
        v14 = *(_QWORD *)(a1 + v12);
        if (*(_QWORD *)a2 < v14
          || v14 >= *(_QWORD *)a2
          && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)a2 + 1, (_QWORD *)(a1 + v12 + 8)))
        {
          break;
        }
        v12 += 32;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v17 = -v13;
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          v25 = (_QWORD *)(a1 + v12);
          v26 = *(_QWORD *)(a1 + v12);
          *v25 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v26;
          v27 = *(_QWORD *)(a1 + v12 + 8);
          *(_QWORD *)((char *)&v34 + 7) = *(_QWORD *)(a1 + v12 + 23);
          *(_QWORD *)&v34 = *(_QWORD *)(a1 + v12 + 16);
          v28 = *(_BYTE *)(a1 + v12 + 31);
          v25[1] = 0;
          v25[2] = 0;
          v25[3] = 0;
          result = *(__n128 *)(a2 + 8);
          v25[3] = *((_QWORD *)a2 + 3);
          *(__n128 *)(v25 + 1) = result;
          *((_QWORD *)a2 + 1) = v27;
          *((_QWORD *)a2 + 2) = v34;
          *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v34 + 7);
          a2[31] = v28;
          return result;
        }
        if (v13 > 0)
          v17 = 1 - v13;
        v30 = v17 >> 1;
        v21 = (char *)(a1 + 32 * (v17 >> 1) + v12);
        v20 = sub_20BF3666C(a2, (char *)a3, v21);
        v19 = (v20 - a2) >> 5;
      }
      else
      {
        if (v8 >= 0)
          v18 = v8;
        else
          v18 = v8 + 1;
        v19 = v18 >> 1;
        v20 = &a2[32 * (v18 >> 1)];
        v21 = sub_20BF361E4((char *)(a1 + v12), a2, v20);
        v30 = (uint64_t)&v21[-a1 - v12] >> 5;
      }
      if (v21 == a2)
      {
        v22 = (uint64_t *)v20;
      }
      else if (v20 == a2)
      {
        v22 = (uint64_t *)v21;
      }
      else
      {
        v22 = sub_20BF366FC((uint64_t)v21, (uint64_t *)a2, (uint64_t *)v20);
      }
      a5 = -(v30 + v13);
      v23 = v8 - v19;
      if (v30 + v19 >= v8 - (v30 + v19) - v13)
      {
        sub_20BF35DC4(v22, v20, a3, a4, -(v30 + v13), v8 - v19, a7, a8);
        a1 += v12;
        v24 = v22;
        a2 = v21;
        v23 = v19;
        a5 = v30;
        a3 = v24;
      }
      else
      {
        sub_20BF35DC4(a1 + v12, v21, v22, a4, v30, v19, a7, a8);
        a1 = (uint64_t)v22;
        a2 = v20;
      }
      v8 = v23;
    }
    while (v23);
  }
  return result;
}

void sub_20BF36084(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;

  if (a5 <= a6)
  {
    if ((uint64_t *)a1 == a2)
    {
      v14 = 0;
      v15 = a7;
    }
    else
    {
      v14 = 0;
      v15 = a7;
      v16 = a1;
      do
      {
        *(_QWORD *)v15 = *(_QWORD *)v16;
        v17 = *(_OWORD *)(v16 + 8);
        *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
        *(_OWORD *)(v15 + 8) = v17;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 8) = 0;
        ++v14;
        v15 += 32;
        v16 += 32;
      }
      while ((uint64_t *)v16 != a2);
    }
    v18 = v14;
    sub_20BF36270(a7, v15, a2, a3, a1);
  }
  else
  {
    if (a2 == a3)
    {
      v10 = 0;
      v11 = a7;
    }
    else
    {
      v10 = 0;
      v11 = a7;
      v12 = a2;
      do
      {
        *(_QWORD *)v11 = *v12;
        v13 = *(_OWORD *)(v12 + 1);
        *(_QWORD *)(v11 + 24) = v12[3];
        *(_OWORD *)(v11 + 8) = v13;
        v12[2] = 0;
        v12[3] = 0;
        v12[1] = 0;
        ++v10;
        v11 += 32;
        v12 += 4;
      }
      while (v12 != a3);
    }
    v18 = v10;
    sub_20BF36384(v11, v11, a7, a7, (uint64_t)a2, (uint64_t)a2, a1, a1, (uint64_t)a3, (uint64_t)a3);
  }
  if (a7)
    sub_20BF36610(&v18, a7);
}

void sub_20BF361C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v1)
    sub_20BF36610((unint64_t *)(v2 - 24), v1);
  _Unwind_Resume(exception_object);
}

char *sub_20BF361E4(char *a1, char *a2, _QWORD *a3)
{
  char *v3;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;

  v3 = a1;
  if (a2 != a1)
  {
    v5 = (a2 - a1) >> 5;
    v6 = a3 + 1;
    do
    {
      v7 = v5 >> 1;
      v8 = &v3[32 * (v5 >> 1)];
      if (*a3 >= *(_QWORD *)v8
        && (*(_QWORD *)v8 < *a3 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v6, &v3[32 * v7 + 8])))
      {
        v3 = v8 + 32;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  return v3;
}

void sub_20BF36270(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v19 = v5;
    v20 = v6;
    v11 = a1;
    do
    {
      if (a3 == a4)
      {
        sub_20BF364D0((uint64_t)&v18, v11, a2, a5);
        return;
      }
      v12 = *a3;
      v13 = *(_QWORD *)v11;
      if ((unint64_t)*a3 >= *(_QWORD *)v11)
      {
        if (v13 < v12)
          goto LABEL_12;
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3 + 1, (_QWORD *)(v11 + 8)))
        {
          v13 = *(_QWORD *)v11;
LABEL_12:
          *(_QWORD *)a5 = v13;
          v16 = (void **)(a5 + 8);
          if (*(char *)(a5 + 31) < 0)
            operator delete(*v16);
          v17 = *(_OWORD *)(v11 + 8);
          *(_QWORD *)(a5 + 24) = *(_QWORD *)(v11 + 24);
          *(_OWORD *)v16 = v17;
          *(_BYTE *)(v11 + 31) = 0;
          *(_BYTE *)(v11 + 8) = 0;
          v11 += 32;
          goto LABEL_15;
        }
        v12 = *a3;
      }
      *(_QWORD *)a5 = v12;
      v14 = (void **)(a5 + 8);
      if (*(char *)(a5 + 31) < 0)
        operator delete(*v14);
      v15 = *(_OWORD *)(a3 + 1);
      *(_QWORD *)(a5 + 24) = a3[3];
      *(_OWORD *)v14 = v15;
      *((_BYTE *)a3 + 31) = 0;
      *((_BYTE *)a3 + 8) = 0;
      a3 += 4;
LABEL_15:
      a5 += 32;
    }
    while (v11 != a2);
  }
}

void sub_20BF36384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  __int128 v25;
  _QWORD v26[16];

  if (a2 != a4)
  {
    v26[14] = v10;
    v26[15] = v11;
    v15 = a2;
    v17 = a10;
    v18 = a10 - 32;
    do
    {
      if (a6 == a8)
      {
        sub_20BF36554(a1, v15, a4, a9, v17, v26);
        return;
      }
      v19 = *(_QWORD *)(a6 - 32);
      v20 = *(_QWORD *)(v15 - 32);
      if (v20 >= v19)
      {
        if (v19 < v20)
          goto LABEL_12;
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((_QWORD *)(v15 - 24), (_QWORD *)(a6 - 24)))
        {
          v20 = *(_QWORD *)(v15 - 32);
LABEL_12:
          *(_QWORD *)v18 = v20;
          v24 = (void **)(v18 + 8);
          if (*(char *)(v18 + 31) < 0)
            operator delete(*v24);
          v25 = *(_OWORD *)(v15 - 24);
          *(_QWORD *)(v18 + 24) = *(_QWORD *)(v15 - 8);
          *(_OWORD *)v24 = v25;
          v23 = v15;
          v15 -= 32;
          goto LABEL_15;
        }
        v19 = *(_QWORD *)(a6 - 32);
      }
      *(_QWORD *)v18 = v19;
      v21 = (void **)(v18 + 8);
      if (*(char *)(v18 + 31) < 0)
        operator delete(*v21);
      v22 = *(_OWORD *)(a6 - 24);
      *(_QWORD *)(v18 + 24) = *(_QWORD *)(a6 - 8);
      *(_OWORD *)v21 = v22;
      v23 = a6;
      a6 -= 32;
LABEL_15:
      *(_BYTE *)(v23 - 1) = 0;
      *(_BYTE *)(v23 - 24) = 0;
      v17 -= 32;
      v18 -= 32;
    }
    while (v15 != a4);
  }
}

uint64_t sub_20BF364D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)a4 = *(_QWORD *)v5;
      v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      a4 += 32;
      v5 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_20BF36554(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int128 v15;

  if (a2 == a3)
  {
    v11 = a2;
  }
  else
  {
    v11 = a3;
    v12 = 0;
    do
    {
      v13 = a2 + v12;
      *(_QWORD *)(a5 + v12 - 32) = *(_QWORD *)(a2 + v12 - 32);
      v14 = (void **)(a5 + v12 - 24);
      if (*(char *)(a5 + v12 - 1) < 0)
        operator delete(*v14);
      v15 = *(_OWORD *)(v13 - 24);
      *(_QWORD *)(a5 + v12 - 8) = *(_QWORD *)(v13 - 8);
      *(_OWORD *)v14 = v15;
      *(_BYTE *)(v13 - 1) = 0;
      *(_BYTE *)(v13 - 24) = 0;
      v12 -= 32;
    }
    while (a2 + v12 != v11);
    a5 += v12;
  }
  *a6 = a1;
  a6[1] = v11;
  a6[2] = a4;
  a6[3] = a5;
}

void sub_20BF36610(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  char *v5;
  char *v6;
  int v7;

  v2 = *a1;
  if (*a1)
  {
    v4 = 0;
    v5 = (char *)(a2 + 31);
    v6 = (char *)(a2 + 31);
    do
    {
      v7 = *v6;
      v6 += 32;
      if (v7 < 0)
      {
        operator delete(*(void **)(v5 - 23));
        v2 = *a1;
      }
      ++v4;
      v5 = v6;
    }
    while (v4 < v2);
  }
}

char *sub_20BF3666C(char *a1, char *a2, _QWORD *a3)
{
  char *v3;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;

  v3 = a1;
  if (a2 != a1)
  {
    v5 = (a2 - a1) >> 5;
    v6 = a3 + 1;
    do
    {
      v7 = v5 >> 1;
      v8 = &v3[32 * (v5 >> 1)];
      if (*(_QWORD *)v8 < *a3
        || *a3 >= *(_QWORD *)v8 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v3[32 * v7 + 8], v6))
      {
        v3 = v8 + 32;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  return v3;
}

uint64_t *sub_20BF366FC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  result = (uint64_t *)(a1 + 32);
  v4 = result;
  v5 = a2;
  while (1)
  {
    v6 = *(v4 - 4);
    *(v4 - 4) = *v5;
    *v5 = v6;
    v7 = *(v4 - 3);
    *(_QWORD *)&v14 = *(v4 - 2);
    *(_QWORD *)((char *)&v14 + 7) = *(uint64_t *)((char *)v4 - 9);
    v8 = *((_BYTE *)v4 - 1);
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    *(v4 - 3) = 0;
    v9 = v5[3];
    *(_OWORD *)(v4 - 3) = *(_OWORD *)(v5 + 1);
    *(v4 - 1) = v9;
    *(uint64_t *)((char *)v5 + 23) = *(_QWORD *)((char *)&v14 + 7);
    v5[1] = v7;
    v5[2] = v14;
    *((_BYTE *)v5 + 31) = v8;
    v5 += 4;
    if (v5 == a3)
      break;
    if (v4 == a2)
      a2 = v5;
    v4 += 4;
    result += 4;
  }
  if (v4 != a2)
  {
    v10 = a2;
    do
    {
      while (1)
      {
        v11 = *v4;
        *v4 = *v10;
        *v10 = v11;
        v12 = v4[1];
        *(_QWORD *)&v15 = v4[2];
        *(_QWORD *)((char *)&v15 + 7) = *(uint64_t *)((char *)v4 + 23);
        LOBYTE(v11) = *((_BYTE *)v4 + 31);
        v4[2] = 0;
        v4[3] = 0;
        v4[1] = 0;
        v13 = *(_OWORD *)(v10 + 1);
        v4[3] = v10[3];
        *(_OWORD *)(v4 + 1) = v13;
        v10[1] = v12;
        v10[2] = v15;
        *(uint64_t *)((char *)v10 + 23) = *(_QWORD *)((char *)&v15 + 7);
        *((_BYTE *)v10 + 31) = v11;
        v4 += 4;
        v10 += 4;
        if (v10 == a3)
          break;
        if (v4 == a2)
          a2 = v10;
      }
      v10 = a2;
    }
    while (v4 != a2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType::~TraceReporterTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType::TraceReporterTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "WARNING:", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20BF369D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::TraceReporter(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  uint64_t v12;

  v5 = *a3;
  *a3 = 0;
  v12 = v5;
  pxrInternal__aapl__pxrReserved__::TraceReporterBase::TraceReporterBase(a1, &v12);
  v6 = v12;
  v12 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)a1 = off_24C51CC28;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 96), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 96) = v7;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 122) = 1;
  *(_QWORD *)(a1 + 136) = 0;
  sub_20BF36BA0(&v11);
  v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v11;
  v11 = 0;
  sub_20BF1D8F4(a1 + 128, v8);
  sub_20BF38394(&v11);
  sub_20BF26C38(&v11);
  v9 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v11;
  v11 = 0;
  sub_20BF1D8F4(a1 + 136, v9);
  sub_20BF1D8C8(&v11);
  return a1;
}

void sub_20BF36B20(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceReporterBase *v1;

  pxrInternal__aapl__pxrReserved__::TraceReporterBase::~TraceReporterBase(v1);
  _Unwind_Resume(a1);
}

void sub_20BF36B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  JUMPOUT(0x20BF36B78);
}

uint64_t sub_20BF36BA0@<X0>(pxrInternal__aapl__pxrReserved__::TraceAggregateTree **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TraceAggregateTree *v2;
  uint64_t result;

  v2 = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)operator new(0x90uLL);
  result = pxrInternal__aapl__pxrReserved__::TraceAggregateTree::TraceAggregateTree(v2);
  *a1 = v2;
  return result;
}

void sub_20BF36BD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporter::~TraceReporter(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  *(_QWORD *)this = off_24C51CC28;
  sub_20BF1D8C8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 17);
  sub_20BF38394((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 16);
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  pxrInternal__aapl__pxrReserved__::TraceReporterBase::~TraceReporterBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TraceReporter::~TraceReporter(this);
  free(v1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporter::_PrintTimes(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t **v5;
  int8x16_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  int8x16_t *v11;
  int8x16_t **v12;
  BOOL v13;
  uint64_t *v14;
  double v15;
  const char *v16;
  char *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  void *__p[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  uint64_t *v30;
  _QWORD *v31[2];

  v31[0] = 0;
  v31[1] = 0;
  v30 = (uint64_t *)v31;
  v3 = sub_20BF36EDC((uint64_t *)(a1 + 128));
  v4 = *(int8x16_t **)(v3 + 32);
  v5 = (int8x16_t **)(v3 + 40);
  if (v4 != (int8x16_t *)(v3 + 40))
  {
    do
    {
      v6 = v4[2];
      *(int8x16_t *)v28 = vextq_s8(v6, v6, 8uLL);
      if ((v6.i8[0] & 7) != 0)
      {
        v7 = (unsigned int *)(v6.i64[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 2, v7));
        if ((v8 & 1) == 0)
          v28[1] = (void *)((unint64_t)v28[1] & 0xFFFFFFFFFFFFFFF8);
      }
      sub_20BF38420(&v30, (__int128 *)v28);
      if (((uint64_t)v28[1] & 7) != 0)
      {
        v9 = (unsigned int *)((unint64_t)v28[1] & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      v11 = (int8x16_t *)v4->i64[1];
      if (v11)
      {
        do
        {
          v12 = (int8x16_t **)v11;
          v11 = (int8x16_t *)v11->i64[0];
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int8x16_t **)v4[1].i64[0];
          v13 = *v12 == v4;
          v4 = (int8x16_t *)v12;
        }
        while (!v13);
      }
      v4 = (int8x16_t *)v12;
    }
    while (v12 != v5);
  }
  v14 = v30;
  if (v30 != (uint64_t *)v31)
  {
    do
    {
      v15 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)((double)(unint64_t)v14[4] * 1000.0));
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%9.3f ms ", v16, v17, *(_QWORD *)&v15);
      if ((v29 & 0x80u) == 0)
        v18 = v28;
      else
        v18 = (void **)v28[0];
      if ((v29 & 0x80u) == 0)
        v19 = v29;
      else
        v19 = (uint64_t)v28[1];
      v20 = sub_20BDDC1C8(a2, (uint64_t)v18, v19);
      sub_20BF36F64((pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 5), (uint64_t)__p);
      if ((v27 & 0x80u) == 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v22 = v27;
      else
        v22 = (uint64_t)__p[1];
      v23 = sub_20BDDC1C8(v20, (uint64_t)v21, v22);
      sub_20BDDC1C8(v23, (uint64_t)"\n", 1);
      if ((char)v27 < 0)
        operator delete(__p[0]);
      if ((char)v29 < 0)
        operator delete(v28[0]);
      v24 = (uint64_t *)v14[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)v14[2];
          v13 = *v25 == (_QWORD)v14;
          v14 = v25;
        }
        while (!v13);
      }
      v14 = v25;
    }
    while (v25 != (uint64_t *)v31);
  }
  sub_20BF383C0((uint64_t)&v30, v31[0]);
}

void sub_20BF36E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,_QWORD *a23)
{
  sub_20BF383C0((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF36EDC(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::TraceAggregateTree>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::TraceAggregateTree]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9D434 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t *sub_20BF36F64@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    result = (uint64_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*((char *)result + 23) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)*result, result[1]);
  v4 = *(_OWORD *)result;
  *(_QWORD *)(a2 + 16) = result[2];
  *(_OWORD *)a2 = v4;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceReporter::Report(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::TraceCollector *Instance;
  pxrInternal__aapl__pxrReserved__ *ScopeOverhead;
  unint64_t TickQuantum;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  const char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v32;
  char *v33;
  uint64_t v34[3];
  char v35;

  v3 = a3;
  if ((int)a3 <= 0)
  {
    v33 = "trace/reporter.cpp";
    v34[0] = (uint64_t)"Report";
    v34[1] = 206;
    v34[2] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::TraceReporter::Report(std::ostream &, int)";
    v35 = 0;
    v3 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v33, 1, (pxrInternal__aapl__pxrReserved__ *)"iterationCount %d is invalid; falling back to 1",
      a3);
  }
  pxrInternal__aapl__pxrReserved__::TraceReporter::_RebuildEventAndAggregateTrees((pxrInternal__aapl__pxrReserved__::TraceReporter *)a1);
  if (*(_BYTE *)(a1 + 122))
  {
    v6 = sub_20BF36EDC((uint64_t *)(a1 + 128));
    sub_20BF1DC1C((uint64_t *)&v33, (uint64_t *)(v6 + 24));
    v7 = (_QWORD *)sub_20BF1CE84((uint64_t *)&v33);
    Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
    if (!Instance)
      Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
    ScopeOverhead = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceCollector::GetScopeOverhead(Instance);
    TickQuantum = pxrInternal__aapl__pxrReserved__::ArchGetTickQuantum(ScopeOverhead);
    pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AdjustForOverheadAndNoise(v7, (unint64_t)ScopeOverhead, TickQuantum, 0);
    v11 = v34[0];
    if (v34[0])
    {
      v12 = (unsigned int *)(v34[0] + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  if (*(_BYTE *)(a1 + 121))
  {
    v15 = sub_20BF36EDC((uint64_t *)(a1 + 128));
    sub_20BF1DC1C((uint64_t *)&v33, (uint64_t *)(v15 + 24));
    v16 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_20BF1CE84((uint64_t *)&v33);
    pxrInternal__aapl__pxrReserved__::TraceAggregateNode::MarkRecursiveChildren(v16);
    v17 = v34[0];
    if (v34[0])
    {
      v18 = (unsigned int *)(v34[0] + 8);
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  if (v3 <= 1)
  {
    sub_20BDDC1C8(a2, (uint64_t)"\nTree view  ==============\n", 27);
    v22 = "   inclusive    exclusive        \n";
    v23 = a2;
    v24 = 34;
  }
  else
  {
    sub_20BDDC1C8(a2, (uint64_t)"\nNumber of iterations: ", 23);
    v21 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v21, (uint64_t)"\n", 1);
    sub_20BDDC1C8(a2, (uint64_t)"\nTree view  ==============\n", 27);
    v22 = "  incl./iter   excl./iter       samples/iter\n";
    v23 = a2;
    v24 = 45;
  }
  sub_20BDDC1C8(v23, (uint64_t)v22, v24);
  v25 = sub_20BF36EDC((uint64_t *)(a1 + 128));
  sub_20BF1DC1C((uint64_t *)&v33, (uint64_t *)(v25 + 24));
  v26 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v34[0];
  if (v34[0])
  {
    if (*(_BYTE *)(sub_20BEB47BC(v34) + 14))
      v26 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v33;
    else
      v26 = 0;
  }
  v32 = v26;
  sub_20BF1DD04((uint64_t *)&v32);
  sub_20BF372EC(a2, (uint64_t *)&v32, 0, v3);
  sub_20BF1DBF0(&v32);
  v27 = v34[0];
  if (v34[0])
  {
    v28 = (unsigned int *)(v34[0] + 8);
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  return sub_20BDDC1C8(a2, (uint64_t)"\n", 1);
}

void sub_20BF37268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  sub_20BF1DBF0(&a11);
  v14 = a13;
  if (a13)
  {
    v15 = (unsigned int *)(a13 + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::ShouldAdjustForOverheadAndNoise(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return *((unsigned __int8 *)this + 122);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetFoldRecursiveCalls(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return *((unsigned __int8 *)this + 121);
}

void sub_20BF372EC(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  char v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode *v10;
  uint64_t v11;
  uint64_t ExclusiveTime;
  int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  double v17;
  const char *v18;
  char *v19;
  std::string::size_type v20;
  double v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  std::string::size_type v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  _QWORD *v47;
  std::string *p_p;
  std::string::size_type v49;
  _QWORD *v50;
  std::string *p_b;
  std::string::size_type v52;
  _QWORD *v53;
  std::string *v54;
  std::string::size_type v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v64;
  std::string::size_type size;
  uint64_t v66;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  unsigned __int8 v71;
  std::string v72;
  std::string __b;
  std::string __p;
  std::string v75;

  if (!*(_BYTE *)(sub_20BF2BBEC(a2) + 24))
  {
LABEL_112:
    memset(&v75, 0, sizeof(v75));
    v61 = sub_20BF2BBEC(a2);
    v62 = *(uint64_t **)(v61 + 96);
    v63 = *(uint64_t **)(v61 + 104);
    while (v62 != v63)
      sub_20BF2BC74((uint64_t *)&v75, v62++);
    size = v75.__r_.__value_.__l.__size_;
    v64 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v75.__r_.__value_.__r.__words[0];
    if (v75.__r_.__value_.__r.__words[0] != v75.__r_.__value_.__l.__size_)
    {
      v66 = (a3 + 2);
      do
      {
        v67 = *v64;
        sub_20BF1DD04((uint64_t *)&v67);
        sub_20BF372EC(a1, &v67, v66, a4);
        sub_20BF1DBF0(&v67);
        ++v64;
      }
      while (v64 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)size);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    sub_20BF2B0BC((void ***)&__p);
    return;
  }
  if ((*(_BYTE *)(sub_20BF2BBEC(a2) + 184) & 2) == 0)
  {
    v8 = *(_BYTE *)(sub_20BF2BBEC(a2) + 184);
    v9 = *(_QWORD *)(sub_20BF2BBEC(a2) + 40);
    v10 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_20BF2BBEC(a2);
    if ((v8 & 4) != 0)
      v11 = 64;
    else
      v11 = 56;
    ExclusiveTime = pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetExclusiveTime(v10, (v8 & 4) >> 2);
    v13 = *(_DWORD *)(sub_20BF2BBEC(a2) + v11);
    v14 = *(_QWORD *)(sub_20BF2BBEC(a2) + 32);
    v68 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
      {
        v68 = v14 & 0xFFFFFFFFFFFFFFF8;
        v14 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_20BF36F64((pxrInternal__aapl__pxrReserved__::TfToken *)&v68, (uint64_t)&v69);
    v17 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)((unint64_t)((double)v9 * 1000.0)
                                                                                                  / a4));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%9.3f ms ", v18, v19, *(_QWORD *)&v17);
    if (!v9)
    {
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      else
        v20 = v75.__r_.__value_.__l.__size_;
      sub_20BDDC468(&__p, v20, 32);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      v75 = __p;
    }
    v21 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)((unint64_t)((double)(unint64_t)ExclusiveTime * 1000.0)
                                                                                                  / a4));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%9.3f ms ", v22, v23, *(_QWORD *)&v21);
    if (!ExclusiveTime)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v26 = __p.__r_.__value_.__l.__size_;
      sub_20BDDC468(&__b, v26, 32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __b;
    }
    memset(&__b, 0, sizeof(__b));
    if ((_DWORD)a4 == 1)
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%7.0f samples ", v24, v25, (double)v13);
    else
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%10.3f samples ", v24, v25, (double)v13 / (double)(int)a4);
    __b = v72;
    if (v13 <= 0)
    {
      v43 = SHIBYTE(__b.__r_.__value_.__r.__words[2]);
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      else
        v44 = __b.__r_.__value_.__l.__size_;
      sub_20BDDC468(&v72, v44, 32);
      if (v43 < 0)
        operator delete(__b.__r_.__value_.__l.__data_);
      __b = v72;
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v75;
    else
      v45 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    else
      v46 = v75.__r_.__value_.__l.__size_;
    v47 = sub_20BDDC1C8(a1, (uint64_t)v45, v46);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v49 = __p.__r_.__value_.__l.__size_;
    v50 = sub_20BDDC1C8(v47, (uint64_t)p_p, v49);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_b = &__b;
    else
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    else
      v52 = __b.__r_.__value_.__l.__size_;
    v53 = sub_20BDDC1C8(v50, (uint64_t)p_b, v52);
    sub_20BDDC1C8(v53, (uint64_t)" ", 1);
    sub_20BF38304(a3, &v72);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &v72;
    else
      v54 = (std::string *)v72.__r_.__value_.__r.__words[0];
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    else
      v55 = v72.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(a1, (uint64_t)v54, v55);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v72.__r_.__value_.__l.__data_);
      if ((v8 & 4) == 0)
      {
LABEL_95:
        if ((v71 & 0x80u) == 0)
          v56 = &v69;
        else
          v56 = v69;
        if ((v71 & 0x80u) == 0)
          v57 = v71;
        else
          v57 = v70;
        v58 = sub_20BDDC1C8(a1, (uint64_t)v56, v57);
        sub_20BDDC1C8(v58, (uint64_t)"\n", 1);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__b.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if ((char)v71 < 0)
          operator delete(v69);
        if ((v14 & 7) != 0)
        {
          v59 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
          do
            v60 = __ldxr(v59);
          while (__stlxr(v60 - 2, v59));
        }
        goto LABEL_112;
      }
    }
    else if ((v8 & 4) == 0)
    {
      goto LABEL_95;
    }
    sub_20BDDC1C8(a1, (uint64_t)"*", 1);
    goto LABEL_95;
  }
  v27 = *(_QWORD *)(sub_20BF2BBEC(a2) + 32);
  v68 = v27;
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 2, v28));
    if ((v29 & 1) == 0)
    {
      v68 = v27 & 0xFFFFFFFFFFFFFFF8;
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  sub_20BF36F64((pxrInternal__aapl__pxrReserved__::TfToken *)&v68, (uint64_t)&v69);
  *((_BYTE *)&v75.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v75, "             ");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__p, "             ");
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__b, "                ");
  sub_20BF38304(a3 - 1, &v72);
  v30 = sub_20BDDC1C8(a1, (uint64_t)&v75, 13);
  v31 = sub_20BDDC1C8(v30, (uint64_t)&__p, 13);
  v32 = sub_20BDDC1C8(v31, (uint64_t)&__b, 16);
  v33 = sub_20BDDC1C8(v32, (uint64_t)" ", 1);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v72;
  else
    v34 = (std::string *)v72.__r_.__value_.__r.__words[0];
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  else
    v35 = v72.__r_.__value_.__l.__size_;
  v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
  sub_20BDDC1C8(v36, (uint64_t)" ", 1);
  v37 = sub_20BDDC1C8(a1, (uint64_t)"[", 1);
  if ((v71 & 0x80u) == 0)
    v38 = &v69;
  else
    v38 = v69;
  if ((v71 & 0x80u) == 0)
    v39 = v71;
  else
    v39 = v70;
  v40 = sub_20BDDC1C8(v37, (uint64_t)v38, v39);
  sub_20BDDC1C8(v40, (uint64_t)"]\n", 2);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if ((char)v71 < 0)
    operator delete(v69);
  if ((v27 & 7) != 0)
  {
    v41 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
}

void sub_20BF37900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  unsigned int *v40;
  unsigned int v41;

  if (a30 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  if (a18 < 0)
    operator delete(a13);
  if ((v37 & 7) != 0)
  {
    v40 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceReporter::ReportTimes(pxrInternal__aapl__pxrReserved__::TraceReporter *a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::TraceReporter::_RebuildEventAndAggregateTrees(a1);
  sub_20BDDC1C8(a2, (uint64_t)"\nTotal time for each key ==============\n", 40);
  pxrInternal__aapl__pxrReserved__::TraceReporter::_PrintTimes((uint64_t)a1, a2);
  return sub_20BDDC1C8(a2, (uint64_t)"\n", 1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporter::ReportChromeTracing(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TraceReporter::_RebuildEventAndAggregateTrees((pxrInternal__aapl__pxrReserved__::TraceReporter *)a1);
  pxrInternal__aapl__pxrReserved__::JsWriter::JsWriter(&v7, a2, 0);
  v4 = sub_20BF1CF28(a1 + 17);
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::TraceEventTree::WriteChromeTraceObject(v4, (pxrInternal__aapl__pxrReserved__::JsWriter *)&v7, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter(&v7);
}

void sub_20BF37B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter((uint64_t **)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::_RebuildEventAndAggregateTrees(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  char v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t *EmptyString;
  size_t v10;
  void **v11;
  const void *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;
  uint64_t v23;
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::TraceReporterBase::_Update(this);
  v2 = sub_20BF36EDC((uint64_t *)this + 16);
  sub_20BF1DC1C(&v23, (uint64_t *)(v2 + 24));
  v3 = sub_20BF1D840(&v23);
  if (v4 & 1 | (unint64_t)v3)
  {
    v5 = sub_20BF1CE84(&v23);
    if (*(_QWORD *)(v5 + 96) != *(_QWORD *)(v5 + 104))
    {
      v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
      if ((v6 & 1) != 0)
      {
        v7 = (uint64_t *)sub_20BF1CE84(&v23);
        v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::TraceReporterTokens);
        if (!v8)
          v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF384B4(&pxrInternal__aapl__pxrReserved__::TraceReporterTokens);
        if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
        if (*((char *)EmptyString + 23) >= 0)
          v10 = *((unsigned __int8 *)EmptyString + 23);
        else
          v10 = EmptyString[1];
        v11 = __p;
        sub_20BDF6BDC((uint64_t)__p, v10 + 19);
        if (v20 < 0)
          v11 = (void **)__p[0];
        if (v10)
        {
          if (*((char *)EmptyString + 23) >= 0)
            v12 = EmptyString;
          else
            v12 = (const void *)*EmptyString;
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, " MallocTags enabled");
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v21);
        pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append((pxrInternal__aapl__pxrReserved__::TfToken *)&v21, v7, 0, 0, 1, 1, (uint64_t *)&v22);
        sub_20BF1DBF0(&v22);
        if ((v21 & 7) != 0)
        {
          v13 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        if (v20 < 0)
          operator delete(__p[0]);
      }
    }
  }
  result = v24;
  if (v24)
  {
    v16 = (unsigned int *)(v24 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20BF37D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int *a18)
{
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  if ((a15 & 7) != 0)
  {
    v19 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  if (a14 < 0)
    operator delete(__p);
  if (a18)
  {
    v21 = a18 + 2;
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(unsigned int *))(*(_QWORD *)a18 + 8))(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::ClearTree(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  pxrInternal__aapl__pxrReserved__::TraceAggregateTree *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;

  v2 = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)sub_20BF36EDC((uint64_t *)this + 16);
  pxrInternal__aapl__pxrReserved__::TraceAggregateTree::Clear(v2);
  sub_20BF26C38(&v5);
  v3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v5;
  v5 = 0;
  sub_20BF1D8F4((_DWORD)this + 136, v3);
  sub_20BF1D8C8(&v5);
  return pxrInternal__aapl__pxrReserved__::TraceReporterBase::_Clear(this);
}

void sub_20BF37E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1D8C8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TraceReporter::GetAggregateTreeRoot@<X0>(pxrInternal__aapl__pxrReserved__::TraceReporter *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;

  v3 = (uint64_t *)(sub_20BF36EDC((uint64_t *)this + 16) + 24);
  return sub_20BF1DC1C(a2, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetEventRoot@<X0>(pxrInternal__aapl__pxrReserved__::TraceReporter *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *(_QWORD *)(sub_20BF1CF28((uint64_t *)this + 17) + 24);
  return sub_20BF1DD04(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetEventTree@<X0>(pxrInternal__aapl__pxrReserved__::TraceReporter *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *((_QWORD *)this + 17);
  return sub_20BF1DD04(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounters(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return sub_20BF36EDC((uint64_t *)this + 16) + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounterIndex(pxrInternal__aapl__pxrReserved__::TraceReporter *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::TraceAggregateTree *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)sub_20BF36EDC((uint64_t *)this + 16);
  return pxrInternal__aapl__pxrReserved__::TraceAggregateTree::GetCounterIndex(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::AddCounter(pxrInternal__aapl__pxrReserved__::TraceReporter *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::TraceAggregateTree *v7;

  v7 = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)sub_20BF36EDC((uint64_t *)this + 16);
  return pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(v7, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::SetGroupByFunction(uint64_t this, char a2)
{
  *(_BYTE *)(this + 120) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetGroupByFunction(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::SetFoldRecursiveCalls(uint64_t this, char a2)
{
  *(_BYTE *)(this + 121) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::SetShouldAdjustForOverheadAndNoise(uint64_t this, char a2)
{
  *(_BYTE *)(this + 122) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::CreateValidEventId(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  void *__p;
  char v3;

  pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId((pxrInternal__aapl__pxrReserved__::TraceThreadId *)&__p);
  if (v3 < 0)
    operator delete(__p);
  return 1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::TraceReporter::_ProcessCollection(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, pxrInternal__aapl__pxrReserved__::TraceCollection ***a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  pxrInternal__aapl__pxrReserved__::TraceEventTree *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6;

  if (*a2)
  {
    v3 = result;
    v4 = (pxrInternal__aapl__pxrReserved__::TraceEventTree *)sub_20BF1CF28((uint64_t *)result + 17);
    pxrInternal__aapl__pxrReserved__::TraceEventTree::Add(v4, *a2, (uint64_t *)&v6);
    v5 = sub_20BF36EDC((uint64_t *)v3 + 16);
    pxrInternal__aapl__pxrReserved__::TraceAggregateTree::Append(v5, &v6, *a2);
    return sub_20BF1D8C8(&v6);
  }
  return result;
}

void sub_20BF38030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1D8C8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *v8;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *v9;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *v10;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *v11;
  void *__p[2];
  char v13;

  v3 = atomic_load((unsigned __int8 *)&qword_254985328);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254985328))
  {
    v7 = sub_20BF38208(0x90uLL);
    sub_20BDDC0E4(__p, "Trace global reporter");
    sub_20BF38274(&v10);
    v8 = v10;
    v10 = 0;
    v11 = v8;
    pxrInternal__aapl__pxrReserved__::TraceReporter::TraceReporter((uint64_t)v7, (__int128 *)__p, (uint64_t *)&v11);
    sub_20BF3857C(&qword_254985318, (uint64_t)v7);
    if (v11)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *))(*(_QWORD *)v11 + 8))(v11);
    v9 = v10;
    v10 = 0;
    if (v9)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *))(*(_QWORD *)v9 + 8))(v9);
    if (v13 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))sub_20BF382B8, &qword_254985318, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985328);
  }
  v4 = unk_254985320;
  *a1 = qword_254985318;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_20BF38178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  free(v17);
  __cxa_guard_abort(&qword_254985328);
  _Unwind_Resume(a1);
}

void *sub_20BF38208(size_t a1)
{
  void *v2;
  uint64_t v5;
  int v6;

  sub_20BEB59B0((uint64_t)&v5, (uint64_t)"Trace", (uint64_t)"TraceReporter");
  v2 = malloc(a1);
  while (v6--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v5);
  return v2;
}

pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *sub_20BF38274@<X0>(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *v2;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *result;

  v2 = (pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *)operator new(0x48uLL);
  result = pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(v2);
  *a1 = v2;
  return result;
}

void sub_20BF382A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF382B8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_20BF38304(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = a1;
  std::string::resize(a2, a1, 32);
  if (a1 >= 3)
  {
    v5 = 2;
    do
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = a2;
      else
        v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v6->__r_.__value_.__s.__data_[v5] = 124;
      v5 += 4;
    }
    while (v5 < v4);
  }
}

void sub_20BF38378(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BF38394(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

void sub_20BF383C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_20BF383C0(a1, *a2);
    sub_20BF383C0(a1, a2[1]);
    v4 = a2[5];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

uint64_t *sub_20BF38420(uint64_t **a1, __int128 *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x30uLL);
  v5 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  v6 = a1 + 1;
  v7 = a1[1];
  *((_OWORD *)v4 + 2) = v5;
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if ((unint64_t)v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v6, v8, v4);
  return v4;
}

unint64_t sub_20BF384B4(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *v2;
  pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *v3;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = sub_20BF3853C();
  v3 = v2;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2)
  {
    v8 = (void **)((char *)v2 + 8);
    sub_20BEEB2B8(&v8);
    if ((*(_QWORD *)v3 & 7) != 0)
    {
      v5 = (unsigned int *)(*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(v3);
  }
  return atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *sub_20BF3853C()
{
  pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType::TraceReporterTokens_StaticTokenType(v0);
  return v0;
}

void sub_20BF38568(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF3857C(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20BF3861C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B408(v3);
  _Unwind_Resume(exception_object);
}

void sub_20BF38634(unsigned int *a1@<X8>)
{
  __ldxr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporterBase::TraceReporterBase(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t i;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_24C51CC68;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v2;
  for (i = 72; i != 96; i += 8)
    *(_QWORD *)(result + i) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 64) = result + 72;
  *(_QWORD *)(result + 40) = sub_20BF38980;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TraceReporterBase::SerializeProcessedCollections(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v15[3];
  pxrInternal__aapl__pxrReserved__::TraceCollection ****v16;

  memset(v15, 0, sizeof(v15));
  v4 = a1[7];
  __dmb(0xBu);
  v5 = tbb::internal::concurrent_vector_base_v3::internal_capacity((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5));
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      if (!v9)
      {
        v10 = sub_20BEB4B94(v8);
        v11 = a1[8];
        __dmb(0xBu);
        v9 = (__int128 *)(*(_QWORD *)(v11 + 8 * v10) - 32 * ((unint64_t)(1 << v10) >> 1) + v7);
      }
      sub_20BDEA72C((char **)v15, v9);
      v12 = v8 + 1;
      if (((v8 - 1) & (v8 + 1)) != 0)
        ++v9;
      else
        v9 = 0;
      v7 += 16;
      ++v8;
    }
    while (v6 != v12);
  }
  v13 = pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(a2, v15);
  v16 = v15;
  sub_20BDE9EB0((void ***)&v16);
  return v13;
}

void sub_20BF38784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BDE9EB0(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporterBase::~TraceReporterBase(pxrInternal__aapl__pxrReserved__::TraceReporterBase *this)
{
  const void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24C51CC68;
  sub_20BF38990((unint64_t *)this + 4);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_20BEBCE60((unsigned int **)this + 2, v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporterBase::_Clear(pxrInternal__aapl__pxrReserved__::TraceReporterBase *this)
{
  uint64_t result;

  tbb::internal::concurrent_vector_base_v3::internal_clear((pxrInternal__aapl__pxrReserved__::TraceReporterBase *)((char *)this + 40), (void (*)(void *, unint64_t))tbb::concurrent_vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>,tbb::cache_aligned_allocator<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>>>::destroy_array);
  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceReporterBase::_Update(pxrInternal__aapl__pxrReserved__::TraceReporterBase *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;
  void *v5;
  void **v6[3];
  _QWORD *v7;
  _QWORD *v8;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v2 + 24))(&v7);
    v3 = v7;
    for (i = v8; v3 != i; v3 += 2)
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceReporterBase *, _QWORD *))(*(_QWORD *)this + 16))(this, v3);
      sub_20BF38904((uint64_t)this + 32, v3, v5, v6);
    }
    v6[0] = (void **)&v7;
    sub_20BDE9EB0(v6);
  }
}

void sub_20BF388E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_20BDE9EB0(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF38904@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, void *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  _QWORD *v13;

  result = (_QWORD *)tbb::internal::concurrent_vector_base_v3::internal_push_back((tbb::internal::concurrent_vector_base_v3 *)(a1 + 8), 16, &v12, a3);
  v13 = result;
  *result = *a2;
  v7 = a2[1];
  result[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    result = v13;
  }
  v10 = v12;
  *a4 = a1;
  a4[1] = v10;
  a4[2] = result;
  return result;
}

uint64_t sub_20BF38980(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 16, 0, a4);
}

unint64_t *sub_20BF38990(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>,tbb::cache_aligned_allocator<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *tbb::concurrent_vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>,tbb::cache_aligned_allocator<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>>>::destroy_array(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a2;
    result = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)result + 16 * a2 - 16);
    do
    {
      --v2;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(result);
      result = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v3 - 16);
    }
    while (v2);
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection::TraceReporterDataSourceCollection(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  *a1 = off_24C51CD08;
  v4 = *a2;
  v3 = a2[1];
  v11[0] = *a2;
  v11[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v7 = operator new(0x10uLL);
  a1[1] = v7;
  a1[2] = v7;
  a1[3] = v7 + 2;
  *v7 = v4;
  v7[1] = v3;
  if (v3)
  {
    v8 = (unint64_t *)(v3 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a1[2] = v7 + 2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v11);
  return a1;
}

void sub_20BF38B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *v2;
  void **v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  sub_20BDE9EB0((void ***)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase(v2);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection::TraceReporterDataSourceCollection(_QWORD *a1, __n128 *a2)
{
  __n128 result;

  *a1 = off_24C51CD08;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *a1 = off_24C51CD08;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection::Clear(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection *this)
{
  __int128 v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v1 = *(_OWORD *)((char *)this + 8);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = v1;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  v5 = v2;
  v6 = (void **)&v4;
  sub_20BDE9EB0(&v6);
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection::ConsumeData@<Q0>(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v3;

  result = *(__n128 *)((char *)this + 8);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *a2 = result;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  a2[1].n128_u64[0] = v3;
  return result;
}

void sub_20BF38BE8(void **a1)
{
  void **v2;

  *a1 = off_24C51CD08;
  v2 = a1 + 1;
  sub_20BDE9EB0(&v2);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase((pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *)a1);
}

void sub_20BF38C30(void **a1)
{
  void *v2;
  void **v3;

  *a1 = off_24C51CD08;
  v3 = a1 + 1;
  sub_20BDE9EB0(&v3);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase((pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *)a1);
  operator delete(v2);
}

pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &unk_24C51CDB8;
  v5[1] = sub_20BF38D5C;
  v6 = v5;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return this;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &unk_24C51CDB8;
  v5[1] = sub_20BF38D5C;
  v6 = v5;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return this;
}

void sub_20BF38D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF38D5C()
{
  return 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  pxrInternal__aapl__pxrReserved__::TfNotice *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  a1[1] = 0;
  *a1 = off_24C51CD50;
  sub_20BF393D8((uint64_t)(a1 + 2), a2);
  a1[6] = &unk_24C51CEE8;
  v4 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v3);
  a1[7] = v4;
  bzero(v4, 0x2C0uLL);
  *(int64x2_t *)(a1[7] + 256) = vdupq_n_s64(0x10uLL);
  a1[6] = &unk_24C51CE68;
  sub_20BF39634(&v15, (uint64_t)a1);
  v5 = (pxrInternal__aapl__pxrReserved__::TfNotice *)sub_20BF396EC(&v15, (uint64_t)pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::_OnTraceCollection, 0);
  pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v5, &v17);
  v6 = v18;
  if (v18)
  {
    v7 = (unsigned int *)(v18 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return a1;
}

void sub_20BF38E90(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *v1;
  unsigned int **v2;
  _QWORD *v3;
  _QWORD *v4;
  const void *v6;
  _QWORD *v7;
  uint64_t v8;

  sub_20BF394EC(v4);
  v7 = (_QWORD *)*((_QWORD *)v1 + 5);
  if (v7 == v3)
  {
    v8 = 4;
    v7 = v3;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  sub_20BEBCE60(v2, v6);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase(v1);
  _Unwind_Resume(a1);
}

void sub_20BF38FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::_OnTraceCollection(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *this, const pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *((_QWORD *)this + 5);
  if (!v3)
    sub_20BE9E974();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  if ((_DWORD)result)
  {
    v6 = *((_QWORD *)this + 7);
    v7 = (unint64_t *)(v6 + 128);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    return sub_20BF39FFC((_QWORD *)(v6 + 40 * ((3 * (_BYTE)v8) & 7) + 384), (uint64_t)a2 + 8, v8, (uint64_t *)this + 6, (uint64_t (*)(_QWORD *, uint64_t))sub_20BF39FD8);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::ConsumeData(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *this@<X0>, char **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector *Instance;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  _QWORD *v29;

  Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  pxrInternal__aapl__pxrReserved__::TraceCollector::CreateCollection(Instance);
  a2[2] = 0;
  *a2 = 0;
  a2[1] = 0;
  v5 = (char *)this + 48;
  v25 = 0uLL;
  while (sub_20BF39D40((uint64_t)v5, (uint64_t)&v25))
  {
    v7 = a2[1];
    v6 = (unint64_t)a2[2];
    if ((unint64_t)v7 >= v6)
    {
      v9 = (v7 - *a2) >> 4;
      if ((unint64_t)(v9 + 1) >> 60)
        sub_20BDDF694();
      v10 = v6 - (_QWORD)*a2;
      v11 = v10 >> 3;
      if (v10 >> 3 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v29 = a2 + 2;
      v13 = (char *)sub_20BDEA2F0((uint64_t)(a2 + 2), v12);
      v15 = &v13[16 * v9];
      *(_OWORD *)v15 = v25;
      v25 = 0uLL;
      v17 = *a2;
      v16 = a2[1];
      if (v16 == *a2)
      {
        v20 = vdupq_n_s64((unint64_t)v16);
        v18 = &v13[16 * v9];
      }
      else
      {
        v18 = &v13[16 * v9];
        do
        {
          v19 = *((_OWORD *)v16 - 1);
          v16 -= 16;
          *((_OWORD *)v18 - 1) = v19;
          v18 -= 16;
          *(_QWORD *)v16 = 0;
          *((_QWORD *)v16 + 1) = 0;
        }
        while (v16 != v17);
        v20 = *(int64x2_t *)a2;
      }
      v8 = v15 + 16;
      *a2 = v18;
      a2[1] = v15 + 16;
      v27 = v20;
      v21 = a2[2];
      a2[2] = &v13[16 * v14];
      v28 = v21;
      v26 = v20.i64[0];
      sub_20BDEA324((uint64_t)&v26);
    }
    else
    {
      *(_OWORD *)v7 = v25;
      v8 = v7 + 16;
      v25 = 0uLL;
    }
    a2[1] = v8;
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_20BF3921C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20BDE9EB0((void ***)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::Clear(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *this)
{
  sub_20BF39248((uint64_t)this + 48);
}

void sub_20BF39248(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v10 = 0;
  v11 = 0;
  while (1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = v2[16];
    __dmb(0xBu);
    v4 = *v2;
    __dmb(0xBu);
    v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4)
        break;
    }
    sub_20BF39D40(a1, (uint64_t)&v10);
  }
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20BF392F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF39304(uint64_t a1)
{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24C51CD50;
  sub_20BF394EC((_QWORD *)(a1 + 48));
  v3 = *(_QWORD **)(a1 + 40);
  if (v3 == (_QWORD *)(a1 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 16);
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_20BEBCE60((unsigned int **)(a1 + 8), v2);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase((pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *)a1);
}

void sub_20BF3936C(uint64_t a1)
{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = off_24C51CD50;
  sub_20BF394EC((_QWORD *)(a1 + 48));
  v3 = *(_QWORD **)(a1 + 40);
  if (v3 == (_QWORD *)(a1 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 16);
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_20BEBCE60((unsigned int **)(a1 + 8), v2);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase((pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *)a1);
  operator delete(v5);
}

uint64_t sub_20BF393D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_20BF39444(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C51CDB8;
  result[1] = v3;
  return result;
}

uint64_t sub_20BF3947C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C51CDB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BF3949C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_20BF394A4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51CE38))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BF394E0()
{
  return &unk_24C51CE38;
}

uint64_t sub_20BF394EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_24C51CE68;
  sub_20BF39248((uint64_t)a1);
  v2 = 0;
  v3 = a1[1] + 400;
  do
  {
    v4 = *(void **)(v3 + v2);
    __dmb(0xBu);
    if ((unint64_t)v4 >= 2)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return sub_20BF39570((uint64_t)a1, v4);
}

uint64_t sub_20BF39570(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = &unk_24C51CEE8;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

void sub_20BF395AC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_20BF394EC(a1);
  operator delete(v1);
}

uint64_t sub_20BF395C0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 16 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20BF395D8(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 16 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20BF395F0(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20BF3962C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

_QWORD *sub_20BF39634(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 8), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20BF396D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B0D8(v3);
  _Unwind_Resume(exception_object);
}

void *sub_20BF396EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  _BYTE v6[8];
  _QWORD v7[4];
  __int128 v8;

  *(_QWORD *)&v8 = a2;
  *((_QWORD *)&v8 + 1) = a3;
  v4 = operator new(0x68uLL);
  v7[0] = off_24C51AF48;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v6);
  sub_20BF39788((uint64_t)v4, a1, &v8, (uint64_t)v7);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *__hidden))v7[0])((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *)v7);
  return v4;
}

void sub_20BF39764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(_QWORD))
{
  void *v11;

  (*a11)(&a11);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF39788(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)a1 = &unk_24C51CF28;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a2[1];
  *(_QWORD *)(a1 + 40) = *a2;
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = *a3;
  return a1;
}

void sub_20BF39804(_Unwind_Exception *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 48);
  if (v4)
    sub_20C96B36C(v4);
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)v2, a2);
  _Unwind_Resume(a1);
}

void sub_20BF39824(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)a1 = &unk_24C51CF28;
  (**(void (***)(uint64_t))(a1 + 56))(a1 + 56);
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)a1, v2);
}

void sub_20BF3988C(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  *(_QWORD *)a1 = &unk_24C51CF28;
  (**(void (***)(uint64_t))(a1 + 56))(a1 + 56);
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((unsigned int **)a1, v2);
  operator delete(v7);
}

uint64_t sub_20BF398F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v18)(_QWORD *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = a1[6];
  v8 = a1 + 6;
  if (!v9)
    return 0;
  v13 = v8 - 1;
  v14 = sub_20BEB47BC(v8);
  v15 = *v13;
  v16 = !*(_BYTE *)(v14 + 14) || v15 == 0;
  if (v16
    || (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 7)) & 1) != 0)
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    v25 = v15;
    v21 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
    v22 = sub_20BF39C9C(v13) + 8;
    if (v21)
      v23 = a6;
    else
      v23 = MEMORY[0x24BEDB7C8];
    v24 = v21;
    v15 = v25;
  }
  v18 = (void (*)(_QWORD *, uint64_t))a1[11];
  v19 = a1[12];
  v20 = (_QWORD *)(v15 + (v19 >> 1));
  if ((v19 & 1) != 0)
    v18 = *(void (**)(_QWORD *, uint64_t))(*v20 + v18);
  v18(v20, a2);
  if (*a7 != a7[1])
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery((uint64_t)a1, a7);
  return 1;
}

uint64_t sub_20BF39A10(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;
  _QWORD v13[4];
  char v14;
  int v15;

  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v13);
  if (v13[0] == v3)
  {
    v13[0] = "tf/notice.h";
    v13[1] = "GetNoticeType";
    v13[2] = 563;
    v13[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::Tra"
             "ceReporterDataSourceCollector>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__aapl__px"
             "rReserved__::TraceReporterDataSourceCollector::*)(const pxrInternal__aapl__pxrReserved__::TraceCollectionAv"
             "ailable &), pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable>>::GetNoticeType() const [Derived = "
             "pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInter"
             "nal__aapl__pxrReserved__::TraceReporterDataSourceCollector>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr"
             ", void (pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::*)(const pxrInternal__aapl__pxr"
             "Reserved__::TraceCollectionAvailable &), pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable>]";
    v14 = 0;
    v15 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__24TraceCollectionAvailableE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v9);
    v4 = std::string::insert(&v9, 0, "notice type ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v10, " undefined in the TfType system");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)v13, (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_20BF39B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF39B78(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *v9;
  char IsInvalid;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  result = pxrInternal__aapl__pxrReserved__::TfType::IsA(a2, v6, v7);
  if ((_DWORD)result)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
    IsInvalid = pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(v9);
    result = 0;
    if (a3)
    {
      if ((IsInvalid & 1) == 0)
        return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v9) == a3;
    }
  }
  return result;
}

uint64_t sub_20BF39BEC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
  if (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL(a1 + 56))
    return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v1);
  else
    return 0;
}

void *sub_20BF39C28(uint64_t a1)
{
  void *v2;

  v2 = operator new(0x68uLL);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  sub_20BF39788((uint64_t)v2, (_QWORD *)(a1 + 40), (_OWORD *)(a1 + 88), a1 + 56);
  return v2;
}

void sub_20BF39C88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF39C9C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TraceReporterDataSourceCollector>::operator->() const [PtrTemplate = pxrInter"
            "nal__aapl__pxrReserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9D879 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

BOOL sub_20BF39D40(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(unint64_t **)(a1 + 8);
  while (1)
  {
    v5 = *v4;
    __dmb(0xBu);
    v6 = v4[16];
    __dmb(0xBu);
    v7 = v6 - v5;
    v8 = v7 > 0;
LABEL_3:
    if (v7 < 1)
      return 0;
    do
    {
      while (1)
      {
        v9 = __ldaxr(v4);
        if (v9 == v5)
          break;
        __clrex();
        do
          v10 = __ldxr(v4);
        while (__stxr(v10, v4));
        if (v10 != v5)
        {
          v11 = v4[16];
          __dmb(0xBu);
          v7 = v11 - v10;
          v5 = v10;
          goto LABEL_3;
        }
      }
    }
    while (__stlxr(v5 + 1, v4));
    if (sub_20BF39E10((uint64_t *)&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1))
      return v8;
  }
}

BOOL sub_20BF39E10(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23[4];

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8)
        break;
      sched_yield();
    }
  }
  v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8)
        break;
      sched_yield();
    }
  }
  v13 = *a1;
  __dmb(0xBu);
  v14 = *(_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(v14 + 256) - 1;
  v16 = v15 & (a3 >> 3);
  if (v16 == v15)
    v17 = v13;
  else
    v17 = 0;
  v23[0] = v8 + 8;
  v23[1] = (uint64_t)a1;
  v23[2] = v17;
  v23[3] = a4;
  v18 = *(_QWORD *)(v13 + 8) & (1 << v16);
  if (v18)
  {
    v19 = (__int128 *)(v13 + 16 * v16 + 16);
    sub_20BDE82DC(a2, v19);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v19);
  }
  else
  {
    v20 = (unint64_t *)(v14 + 272);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
  }
  sub_20BF39F2C(v23);
  return v18 != 0;
}

uint64_t *sub_20BF39F2C(uint64_t *a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v12;

  v2 = (unint64_t *)a1[2];
  if ((unint64_t)v2 < 2)
  {
    v10 = *a1;
    v9 = a1[1];
    __dmb(0xBu);
    *(_QWORD *)(v9 + 8) = v10;
  }
  else
  {
    sub_20BEB3FEC((uint64_t)&v12, a1[1] + 32);
    v3 = *v2;
    v4 = (unint64_t *)a1[1];
    __dmb(0xBu);
    *v4 = v3;
    if (v3 <= 1)
    {
      v5 = a1[1];
      __dmb(0xBu);
      *(_QWORD *)(v5 + 16) = 0;
    }
    v6 = v12;
    if (v12)
    {
      __dmb(0xBu);
      *v6 = 0;
    }
    v8 = *a1;
    v7 = a1[1];
    __dmb(0xBu);
    *(_QWORD *)(v7 + 8) = v8;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1[3] + 24))(a1[3], v2);
  }
  return a1;
}

_QWORD *sub_20BF39FD8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_20BF39FFC(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD *, uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t result;
  unint64_t v17;
  _BYTE *v18;

  v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  v10 = (*(_QWORD *)(a4[1] + 256) - 1) & (a3 >> 3);
  if (v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a4 + 16))(a4);
    *v11 = 0;
    v11[1] = 0;
  }
  v13 = a1 + 3;
  v12 = a1[3];
  __dmb(0xBu);
  if (v12 != v9)
    sub_20BF3A228((uint64_t)a1, a1 + 3, v9, a4[1]);
  if (v11)
  {
    sub_20BEB3FEC((uint64_t)&v18, (uint64_t)(a1 + 4));
    v14 = (_QWORD *)a1[2];
    __dmb(0xBu);
    if ((unint64_t)v14 < 2)
    {
      __dmb(0xBu);
      *a1 = v11;
    }
    else
    {
      *v14 = v11;
    }
    __dmb(0xBu);
    a1[2] = v11;
    v15 = v18;
    if (v18)
    {
      __dmb(0xBu);
      *v15 = 0;
    }
  }
  else
  {
    v11 = (_QWORD *)a1[2];
    __dmb(0xBu);
  }
  result = a5(&v11[2 * v10 + 2], a2);
  v11[1] |= 1 << v10;
  do
    v17 = __ldaxr(v13);
  while (__stlxr(v17 + 8, v13));
  return result;
}

void sub_20BF3A12C(void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  __cxa_begin_catch(a1);
  v4 = (unint64_t *)(*(_QWORD *)(v1 + 8) + 272);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  sub_20BF3A1B0(v2, v3);
}

void sub_20BF3A154()
{
  __cxa_end_catch();
  __break(1u);
}

void sub_20BF3A15C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BF3A1B0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;

  sub_20BEB3FEC((uint64_t)&v6, (uint64_t)(a1 + 4));
  __dmb(0xBu);
  a1[3] = a2 + 9;
  v4 = (_QWORD *)a1[2];
  __dmb(0xBu);
  if ((unint64_t)v4 < 2)
  {
    __dmb(0xBu);
    *a1 = 1;
  }
  else
  {
    *v4 = 1;
  }
  __dmb(0xBu);
  a1[2] = 1;
  v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    *v5 = 0;
  }
  __cxa_rethrow();
}

uint64_t sub_20BF3A228(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = sched_yield();
  v8 = *a2;
  __dmb(0xBu);
  if (v8 != a3)
  {
    v9 = (unint64_t *)(a4 + 272);
    do
    {
      if ((v8 & 1) != 0)
      {
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        tbb::internal::throw_exception_v4(2);
      }
      result = sched_yield();
      v8 = *a2;
      __dmb(0xBu);
    }
    while (v8 != a3);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(uint64_t a1, pxrInternal__aapl__pxrReserved__::TraceCollection ***a2)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection **v2;
  pxrInternal__aapl__pxrReserved__::TraceCollection **v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v7;
  unint64_t *v8;
  unint64_t v9;
  _BOOL8 v10;
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v12;
  char *v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::TraceCollection ****v15;
  char v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (!*a2)
    return 0;
  v4 = a2[1];
  v17[0] = *a2;
  v17[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = &v12;
  v16 = 0;
  v7 = (pxrInternal__aapl__pxrReserved__::TraceCollection ***)operator new(0x10uLL);
  v12 = v7;
  v14 = (char *)(v7 + 2);
  *v7 = v2;
  v7[1] = v4;
  if (v4)
  {
    v8 = (unint64_t *)(v4 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v13 = (char *)(v7 + 2);
  v10 = pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(a1, &v12);
  v15 = &v12;
  sub_20BDE9EB0((void ***)&v15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v17);
  return v10;
}

void sub_20BF3A394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  sub_20BDE9EB0((void ***)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(uint64_t a1, pxrInternal__aapl__pxrReserved__::TraceCollection ****a2)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v4;
  pxrInternal__aapl__pxrReserved__::TraceCollection ***v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v10[4];
  char v11;
  _BYTE v12[96];
  char v13[8];
  std::__shared_weak_count *v14;

  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v13);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v10[0] = (uint64_t *)"trace/serialization.cpp";
    v10[1] = (uint64_t *)"Write";
    v10[2] = (uint64_t *)55;
    v10[3] = (uint64_t *)"static BOOL pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(std::ostream &, const st"
                        "d::vector<std::shared_ptr<TraceCollection>> &)";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v12, "Writing JSON", v10);
    pxrInternal__aapl__pxrReserved__::JsWriter::JsWriter(v10, a1, 0);
    pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization::WriteCollectionsToJSON((pxrInternal__aapl__pxrReserved__::JsWriter *)v10, a2);
    pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter(v10);
    pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v12);
  }
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4 != v5;
}

void sub_20BF3A4A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, uint64_t *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter((uint64_t **)va);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 - 48));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceSerialization::Read(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t ***a3@<X8>)
{
  const char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[8];
  std::__shared_weak_count *v14;
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  pxrInternal__aapl__pxrReserved__::JsParseStream(a1, (uint64_t)&v15, (pxrInternal__aapl__pxrReserved__::JsValue *)v13);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)v13))
  {
    if (a2)
    {
      v7 = (char *)&v15 + 8;
      if (v16 < 0)
        v7 = (char *)*((_QWORD *)&v15 + 1);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing JSON\nline: %d, col: %d ->\n\t%s.\n", v5, v6, v15, DWORD1(v15), v7);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = v11;
      *(_QWORD *)(a2 + 16) = v12;
    }
    *a3 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization::CollectionFromJSON((pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization *)v13, a3);
  }
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(*((void **)&v15 + 1));
}

void sub_20BF3A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  if (*(char *)(v7 - 17) < 0)
    operator delete(*(void **)(v7 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::operator==(const char **a1, const char **a2)
{
  const char *v4;
  const char *v5;
  BOOL v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  _BOOL8 result;
  const char *v11;
  const char *v12;

  v4 = *a1;
  v5 = *a2;
  if (v4 != v5)
  {
    v6 = !v4 || v5 == 0;
    if (v6 || strcmp(v4, v5))
      return 0;
  }
  v7 = a1[1];
  v8 = a2[1];
  if (v7 != v8)
  {
    v9 = !v7 || v8 == 0;
    if (v9 || strcmp(v7, v8))
      return 0;
  }
  v11 = a1[2];
  v12 = a2[2];
  if (v11 == v12)
    return 1;
  result = 0;
  if (v11)
  {
    if (v12)
      return strcmp(a1[2], v12) == 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::GetString(pxrInternal__aapl__pxrReserved__::TraceStaticKeyData *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  std::string __p;
  _QWORD v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(char **)this;
  if (*(_QWORD *)this && *((_QWORD *)this + 1))
  {
    if (*((_QWORD *)this + 2))
    {
      sub_20BDDC0E4(v17, v4);
      sub_20BDDC0E4(&__p, *((char **)this + 1));
      pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v17, &__p, &v19);
      v5 = std::string::append(&v19, " (");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      v7 = std::string::append(&v20, *((const std::string::value_type **)this + 2));
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v21, ")");
      v10 = v9->__r_.__value_.__r.__words[0];
      v22[0] = v9->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v12 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v22 + 7);
      v13 = v22[0];
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v13;
      *(_BYTE *)(a2 + 23) = v11;
      if (v12 < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v18 < 0)
      {
        v14 = (void *)v17[0];
LABEL_20:
        operator delete(v14);
      }
    }
    else
    {
      sub_20BDDC0E4(&v20, v4);
      sub_20BDDC0E4(&v19, *((char **)this + 1));
      pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)&v20, &v19, &v21);
      v15 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
      *(std::string *)a2 = v21;
      *((_BYTE *)&v21.__r_.__value_.__s + 23) = 0;
      v21.__r_.__value_.__s.__data_[0] = 0;
      if (v15 < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        v14 = (void *)v20.__r_.__value_.__r.__words[0];
        goto LABEL_20;
      }
    }
  }
  else
  {
    MEMORY[0x212B929D0](a2, *((_QWORD *)this + 2));
  }
}

void sub_20BF3A890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TraceThreadId *pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId(pxrInternal__aapl__pxrReserved__::TraceThreadId *this)
{
  pxrInternal__aapl__pxrReserved__ *v2;
  uint64_t MainThreadId;
  _QWORD *v4;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = (pxrInternal__aapl__pxrReserved__ *)pthread_self();
  MainThreadId = pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId(v2);
  if (v2)
  {
    if (MainThreadId && v2 == (pxrInternal__aapl__pxrReserved__ *)MainThreadId)
      goto LABEL_4;
  }
  else if (!MainThreadId)
  {
LABEL_4:
    MEMORY[0x212B929D0](this, "Main Thread");
    return this;
  }
  sub_20BDDE5E0((uint64_t)v8);
  v4 = sub_20BDDC1C8(v8, (uint64_t)"Thread ", 7);
  pthread_self();
  sub_20BEC03C8(v4);
  std::stringbuf::str();
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(_OWORD *)this = v6;
  *((_QWORD *)this + 2) = v7;
  v8[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[1] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v10);
  return this;
}

void sub_20BF3AA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20BDDE6CC((uint64_t)va);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  return __dst;
}

{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  return __dst;
}

BOOL pxrInternal__aapl__pxrReserved__::TraceThreadId::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  _BOOL4 v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  int v8;

  v2 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    v5 = a1[1];
    v3 = *((char *)a2 + 23) < 0;
    v4 = *((unsigned __int8 *)a2 + 23);
    if (*((char *)a2 + 23) < 0)
      v4 = a2[1];
    if (v5 == v4)
      goto LABEL_9;
    v2 = a1[1];
    return v2 < v4;
  }
  v3 = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
    v4 = a2[1];
  if (v4 != v2)
    return v2 < v4;
  v5 = *((unsigned __int8 *)a1 + 23);
LABEL_9:
  if ((v2 & 0x80u) == 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = a1[1];
  if ((v2 & 0x80u) != 0)
    a1 = (_QWORD *)*a1;
  if (v3)
    a2 = (_QWORD *)*a2;
  if (v5 >= v6)
    v7 = v6;
  else
    v7 = v5;
  v8 = memcmp(a1, a2, v7);
  if (v8)
    return v8 < 0;
  else
    return v6 < v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254985338);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985338))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)operator new(0x150uLL);
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher(v3);
    qword_254985330 = (uint64_t)v3;
    __cxa_guard_release(&qword_254985338);
  }
  return qword_254985330;
}

void sub_20BF3AD28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_254985338);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(pxrInternal__aapl__pxrReserved__ *this)
{
  std::thread *v2;
  std::thread *v3;
  void *v5;
  uint64_t DetachedDispatcher;
  std::thread v7;

  if (!atomic_load(&qword_254985340))
  {
    v2 = (std::thread *)operator new(8uLL);
    v3 = v2;
    v2->__t_ = 0;
    do
    {
      if (__ldaxr(&qword_254985340))
      {
        __clrex();
        std::thread::~thread(v2);
        operator delete(v5);
        return;
      }
    }
    while (__stlxr((unint64_t)v2, &qword_254985340));
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)v2);
    sub_20BF3ADFC(&v7.__t_, &DetachedDispatcher);
    if (v3->__t_)
      std::terminate();
    v3->__t_ = v7.__t_;
    v7.__t_ = 0;
    std::thread::~thread(&v7);
    std::thread::detach(v3);
  }
}

pthread_t *sub_20BF3ADFC(pthread_t *a1, uint64_t *a2)
{
  std::__thread_struct *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t *v9;

  v4 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v4);
  v5 = (uint64_t *)operator new(0x10uLL);
  v6 = *a2;
  *v5 = (uint64_t)v4;
  v5[1] = v6;
  v9 = v5;
  v7 = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_20BF3AEC0, v5);
  if (v7)
  {
    std::__throw_system_error(v7, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x20BF3AE8CLL);
  }
  v9 = 0;
  sub_20BF3AF24(&v9);
  return a1;
}

void sub_20BF3AEC0(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  std::chrono::nanoseconds __ns;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(*(pxrInternal__aapl__pxrReserved__::WorkDispatcher **)(a1 + 8));
    __ns.__rep_ = 50000000;
    std::this_thread::sleep_for (&__ns);
  }
}

void sub_20BF3AF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  sub_20BF3AF24(&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_20BF3AF24(uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20BF3AF64(v2, 0);
    operator delete(v2);
  }
  return a1;
}

void sub_20BF3AF64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x212B92C64]();
    operator delete(v4);
  }
}

pxrInternal__aapl__pxrReserved__::WorkDispatcher *pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher(pxrInternal__aapl__pxrReserved__::WorkDispatcher *this, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t i;
  _QWORD *v6;
  tbb::task_group_context *v8;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 16) = 327683;
  *((_DWORD *)this + 42) = 55;
  tbb::task_group_context::init((uint64_t)this, a2, a3, a4);
  for (i = 304; i != 328; i += 8)
    *(_QWORD *)((char *)this + i) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 37) = (char *)this + 304;
  *((_QWORD *)this + 34) = sub_20BF3B32C;
  atomic_store(0, (unsigned __int8 *)this + 328);
  v8 = this;
  v6 = (_QWORD *)tbb::internal::allocate_root_with_context_proxy::allocate(&v8, 8uLL);
  *((_BYTE *)v6 - 11) = 1;
  *v6 = &unk_24C5164A8;
  *((_QWORD *)this + 32) = v6;
  *(v6 - 3) = 1;
  return this;
}

void sub_20BF3B03C(_Unwind_Exception *a1)
{
  unint64_t *v1;

  sub_20BF3B33C(v1 + 33);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(pxrInternal__aapl__pxrReserved__::WorkDispatcher *this)
{
  tbb::task *v2;

  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(this);
  tbb::interface5::internal::task_base::destroy(*((tbb::interface5::internal::task_base **)this + 32), v2);
  sub_20BF3B33C((unint64_t *)this + 33);
  tbb::task_group_context::~task_group_context(this);
}

unint64_t pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(pxrInternal__aapl__pxrReserved__::WorkDispatcher *this)
{
  unint64_t result;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::TfErrorTransport *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 32) - 40) + 8))(*(_QWORD *)(*((_QWORD *)this + 32) - 40), *((_QWORD *)this + 32), 0);
  v3 = (unsigned __int8 *)this + 328;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(1u, v3));
  if ((v4 & 1) == 0)
  {
    if (tbb::task_group_context::is_group_execution_cancelled(this))
      tbb::task_group_context::reset(this);
    v5 = *((_QWORD *)this + 36);
    __dmb(0xBu);
    v6 = tbb::internal::concurrent_vector_base_v3::internal_capacity((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)((char *)this + 272));
    if (v6 >= v5)
      v7 = v5;
    else
      v7 = v6;
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        if (!v10)
        {
          v11 = sub_20BEB4B94(v9);
          v12 = *((_QWORD *)this + 37);
          __dmb(0xBu);
          v10 = (pxrInternal__aapl__pxrReserved__::TfErrorTransport *)(*(_QWORD *)(v12 + 8 * v11)
                                                                     - 48 * ((unint64_t)(1 << v11) >> 1)
                                                                     + v8);
        }
        if (*((_QWORD *)v10 + 2))
          pxrInternal__aapl__pxrReserved__::TfErrorTransport::_PostImpl(v10);
        v13 = v9 + 1;
        if (((v9 - 1) & (v9 + 1)) != 0)
          v10 = (pxrInternal__aapl__pxrReserved__::TfErrorTransport *)((char *)v10 + 24);
        else
          v10 = 0;
        v8 += 24;
        ++v9;
      }
      while (v7 != v13);
    }
    result = tbb::internal::concurrent_vector_base_v3::internal_clear((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)((char *)this + 272), (void (*)(void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::destroy_array);
    atomic_store(0, v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(unint64_t *a1, uint64_t a2)
{
  unint64_t Instance;
  unint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  tbb::internal::concurrent_vector_base_v3 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12[3];
  char v13;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v5 = (unint64_t *)(Instance + 152);
  v13 = 0;
  v6 = sub_20BEB5B80((unint64_t *)(Instance + 152), &v13);
  v7 = sub_20BEC5244(a1, 0);
  v13 = 0;
  v8 = (_QWORD *)sub_20BEB5B80(v5, &v13);
  sub_20BF3B2DC(v12, v6, v7, v8);
  v9 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a2 + 8), 1, (void *)0x18, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::initialize_array, 0);
  v10 = sub_20BEB4B94((unint64_t)v9);
  v11 = *(_QWORD *)(a2 + 32);
  __dmb(0xBu);
  sub_20BEDEA80((__int128 *)(*(_QWORD *)(v11 + 8 * v10) + 24 * ((_QWORD)v9 - ((1 << v10) & 0xFFFFFFFFFFFFFFFELL))), v12);
  sub_20BEBFFB4(v12);
}

void sub_20BF3B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEBFFB4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF3B2D4()
{
  return 0;
}

uint64_t *sub_20BF3B2DC(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  sub_20BEDE808((uint64_t)a1, a1, a2, a3, a4);
  return a1;
}

void sub_20BF3B318(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20BEBFFB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF3B32C(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 24, 0, a4);
}

unint64_t *sub_20BF3B33C(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::destroy_array(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  if (a2)
  {
    v2 = a2;
    v3 = (uint64_t *)(a1 + 24 * a2 - 24);
    do
    {
      --v2;
      sub_20BEBFFB4(v3);
      v3 -= 3;
    }
    while (v2);
  }
}

_QWORD *tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::initialize_array(_QWORD *result, uint64_t a2, uint64_t a3)
{
  for (; a3; --a3)
  {
    *result = result;
    result[1] = result;
    result[2] = 0;
    result += 3;
  }
  return result;
}

void sub_20BF3B3F8()
{
  if (!atomic_load((unint64_t *)PXR_WORK_THREAD_LIMIT))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&PXR_WORK_THREAD_LIMIT);
    atomic_load((unint64_t *)PXR_WORK_THREAD_LIMIT);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Work_InitializeThreading(pxrInternal__aapl__pxrReserved__ *this)
{
  tbb::task_scheduler_init *v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  const char *v5;

  v1 = (tbb::task_scheduler_init *)sub_20BF3B4A0(this);
  result = tbb::task_scheduler_init::default_num_threads(v1);
  if ((_DWORD)v1)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    result = tbb::task_scheduler_init::initialize((uint64_t)v3, v1, 1, v4, v5);
    qword_254985348 = (uint64_t)v3;
  }
  return result;
}

void sub_20BF3B48C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF3B4A0(tbb::task_scheduler_init *a1)
{
  unsigned int *v1;
  int v2;
  int v4;

  v1 = (unsigned int *)atomic_load((unint64_t *)PXR_WORK_THREAD_LIMIT);
  if (!v1)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&PXR_WORK_THREAD_LIMIT);
    v1 = (unsigned int *)atomic_load((unint64_t *)PXR_WORK_THREAD_LIMIT);
  }
  if ((*v1 & 0x80000000) == 0)
    return *v1;
  v2 = *v1;
  v4 = tbb::task_scheduler_init::default_num_threads(a1) + v2;
  if (v4 <= 1)
    return 1;
  else
    return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::WorkSetConcurrencyLimit(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;

  if ((_DWORD)this)
  {
    LODWORD(v1) = (_DWORD)this;
    v2 = sub_20BF3B4A0(this);
    if (v2)
      v1 = v2;
    else
      v1 = v1;
  }
  else
  {
    v1 = tbb::interface7::internal::task_arena_base::internal_max_concurrency(0);
  }
  if (qword_254985348)
  {
    tbb::task_scheduler_init::terminate((const char *)qword_254985348, v3, v4, v5, v6);
    return tbb::task_scheduler_init::initialize(qword_254985348, (tbb::internal::governor *)v1, v7, v8, v9);
  }
  else
  {
    v11 = operator new(8uLL);
    *v11 = 0;
    result = tbb::task_scheduler_init::initialize((uint64_t)v11, (tbb::internal::governor *)v1, 1, v12, v13);
    qword_254985348 = (uint64_t)v11;
  }
  return result;
}

void sub_20BF3B590(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::WorkGetConcurrencyLimit(pxrInternal__aapl__pxrReserved__ *this)
{
  return tbb::interface7::internal::task_arena_base::internal_max_concurrency(0);
}

uint64_t pxrInternal__aapl__pxrReserved__::WorkSetMaximumConcurrencyLimit(pxrInternal__aapl__pxrReserved__ *this)
{
  pxrInternal__aapl__pxrReserved__ *v1;

  v1 = (pxrInternal__aapl__pxrReserved__ *)tbb::task_scheduler_init::default_num_threads(this);
  return pxrInternal__aapl__pxrReserved__::WorkSetConcurrencyLimit(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::WorkSetConcurrencyLimitArgument(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t v1;
  int v2;

  v1 = (unint64_t)this;
  if ((this & 0x80000000) != 0)
  {
    v2 = tbb::task_scheduler_init::default_num_threads(this) + (_DWORD)this;
    if (v2 <= 1)
      v1 = 1;
    else
      v1 = v2;
  }
  return pxrInternal__aapl__pxrReserved__::WorkSetConcurrencyLimit((pxrInternal__aapl__pxrReserved__ *)v1);
}

BOOL pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(pxrInternal__aapl__pxrReserved__ *this)
{
  return tbb::interface7::internal::task_arena_base::internal_max_concurrency(0) > 1;
}

void sub_20BF3B614()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::WORK_SYNCHRONIZE_ASYNC_DESTROY_CALLS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::WORK_SYNCHRONIZE_ASYNC_DESTROY_CALLS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::WORK_SYNCHRONIZE_ASYNC_DESTROY_CALLS);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::WORK_SYNCHRONIZE_ASYNC_DESTROY_CALLS);
  if (!v1)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::WORK_SYNCHRONIZE_ASYNC_DESTROY_CALLS);
    v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::WORK_SYNCHRONIZE_ASYNC_DESTROY_CALLS);
  }
  return *v1;
}

void sub_20BF3B6A0()
{
  _QWORD *v0;
  _QWORD *v1;
  std::string::size_type size;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  char *v6;
  std::string *p_p;
  _QWORD *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  std::string::size_type v14;
  __int128 v15;
  _QWORD *v16;
  void *v17[2];
  char v18;
  void *v19[2];
  uint64_t v20;
  std::string __p;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25[3];
  std::string v26;
  char *v27;
  unint64_t *v28;

  memset(v25, 0, sizeof(v25));
  v22 = 0;
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  if (!pxrInternal__aapl__pxrReserved__::ArchGetAddressInfo(sub_20BF3B6A0, (uint64_t)&__p, 0, 0, 0))
  {
    v0 = v23;
    if ((unint64_t)v23 >= v24)
    {
      v1 = (_QWORD *)sub_20BF3BD64(&v22, "Failed to determine absolute path for Plug search using using ArchGetAddressInfo().  This is expected if pxr is linked as a static library.\n");
    }
    else
    {
      sub_20BDDC0E4(v23, "Failed to determine absolute path for Plug search using using ArchGetAddressInfo().  This is expected if pxr is linked as a static library.\n");
      v1 = v0 + 3;
    }
    v23 = v1;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    v3 = v23;
    if ((unint64_t)v23 >= v24)
    {
      v4 = (_QWORD *)sub_20BF3BE68(&v22, "Using ArchGetExecutablePath() to determine absolute path for Plug search location.\n");
    }
    else
    {
      sub_20BDDC0E4(v23, "Using ArchGetExecutablePath() to determine absolute path for Plug search location.\n");
      v4 = v3 + 3;
    }
    v23 = v4;
    pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath(&v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v26;
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&__p, &v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v26;
  p_p = &__p;
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Plug will search for plug infos under '%s'\n", v5, v6, p_p);
  v8 = v23;
  if ((unint64_t)v23 >= v24)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - v22) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    if (0x5555555555555556 * ((uint64_t)(v24 - v22) >> 3) > v11)
      v11 = 0x5555555555555556 * ((uint64_t)(v24 - v22) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v22) >> 3) >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    v28 = &v24;
    if (v12)
      v13 = (char *)sub_20BDE4FF4((uint64_t)&v24, v12);
    else
      v13 = 0;
    v14 = (std::string::size_type)&v13[24 * v10];
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    v26.__r_.__value_.__l.__size_ = v14;
    v27 = &v13[24 * v12];
    v15 = *(_OWORD *)v19;
    *(_QWORD *)(v14 + 16) = v20;
    *(_OWORD *)v14 = v15;
    v19[1] = 0;
    v20 = 0;
    v19[0] = 0;
    v26.__r_.__value_.__r.__words[2] = v14 + 24;
    sub_20BDF34C0(&v22, &v26);
    v16 = v23;
    sub_20BDF3648((uint64_t)&v26);
    v23 = v16;
  }
  else
  {
    v9 = *(_OWORD *)v19;
    v23[2] = v20;
    *(_OWORD *)v8 = v9;
    v23 = v8 + 3;
  }
  sub_20BDDC0E4(v19, "PXR_PLUGINPATH_NAME");
  sub_20BDDC0E4(v17, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v19, (uint64_t)v17, (uint64_t)&v26);
  sub_20BF3BAF0(v25, &v26, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  sub_20BDDC0E4(&v26, "usd");
  sub_20BF3BAF0(v25, &v26, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&v26, "../plugin/usd");
  sub_20BF3BAF0(v25, &v26, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::Plug_SetPaths((uint64_t)v25, (uint64_t)&v22, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  sub_20BDE5038((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  sub_20BDE5038((void ***)&v26);
}

void sub_20BF3BA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = v30;
  a30 = v32;
  if (a28 < 0)
    operator delete(__p);
  __p = &a29;
  sub_20BDE5038((void ***)&__p);
  a29 = v31 - 80;
  sub_20BDE5038((void ***)&a29);
  _Unwind_Resume(a1);
}

void sub_20BF3BAF0(uint64_t *a1, std::string *a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  _QWORD *v27;
  char *v28;
  uint64_t *v29;

  sub_20BDDC0E4(__p, ":");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a2, (char *)__p, &v24);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  v6 = v24;
  v7 = v25;
  while (v6 != v7)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      if (*(_QWORD *)(v6 + 8))
      {
LABEL_8:
        if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)v6))
        {
          pxrInternal__aapl__pxrReserved__::TfStringCatPaths(a3, v6, v22);
          v9 = a1[1];
          v8 = a1[2];
          if (v9 >= v8)
          {
            v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
            v14 = v13 + 1;
            if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *a1) >> 3);
            if (2 * v15 > v14)
              v14 = 2 * v15;
            if (v15 >= 0x555555555555555)
              v16 = 0xAAAAAAAAAAAAAAALL;
            else
              v16 = v14;
            v29 = a1 + 2;
            if (v16)
              v17 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 2), v16);
            else
              v17 = 0;
            v18 = &v17[24 * v13];
            __p[0] = v17;
            __p[1] = v18;
            v28 = &v17[24 * v16];
            v19 = *(_OWORD *)v22;
            *((_QWORD *)v18 + 2) = v23;
            *(_OWORD *)v18 = v19;
            v22[1] = 0;
            v23 = 0;
            v22[0] = 0;
            v27 = v18 + 24;
            sub_20BDF34C0(a1, __p);
            v20 = a1[1];
            sub_20BDF3648((uint64_t)__p);
            v21 = SHIBYTE(v23);
            a1[1] = v20;
            if (v21 < 0)
              operator delete(v22[0]);
          }
          else
          {
            v10 = *(_OWORD *)v22;
            *(_QWORD *)(v9 + 16) = v23;
            *(_OWORD *)v9 = v10;
            a1[1] = v9 + 24;
          }
        }
        else
        {
          v11 = a1[1];
          if (v11 >= a1[2])
          {
            v12 = sub_20BE4EE50(a1, (__int128 *)v6);
          }
          else
          {
            sub_20BE4EDF4(a1, (__int128 *)v6);
            v12 = v11 + 24;
          }
          a1[1] = v12;
        }
      }
    }
    else if (*(_BYTE *)(v6 + 23))
    {
      goto LABEL_8;
    }
    v6 += 24;
  }
  __p[0] = &v24;
  sub_20BDE5038((void ***)__p);
}

void sub_20BF3BD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF3BD64(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_20BDDC0E4(v14, a2);
  v15 = v14 + 24;
  sub_20BDF34C0(a1, &v13);
  v11 = a1[1];
  sub_20BDF3648((uint64_t)&v13);
  return v11;
}

void sub_20BF3BE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF3BE68(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_20BDDC0E4(v14, a2);
  v15 = v14 + 24;
  sub_20BDF34C0(a1, &v13);
  v11 = a1[1];
  sub_20BDF3648((uint64_t)&v13);
  return v11;
}

void sub_20BF3BF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Plug_SetAdditionalEntitlements(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  void *__p[2];
  uint64_t v9;

  sub_20BF3C050();
  v4 = (_QWORD *)*a1;
  v2 = a1 + 1;
  v3 = v4;
  if (v4 != v2)
  {
    do
    {
      if (*((char *)v3 + 55) < 0)
      {
        sub_20BDDBFAC(__p, (void *)v3[4], v3[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v3 + 2);
        v9 = v3[6];
      }
      sub_20BE74FC0((uint64_t **)&qword_254985350, (const void **)__p, (uint64_t)__p);
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
}

void sub_20BF3C034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF3C050()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985368);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254985368))
    {
      qword_254985360 = 0;
      qword_254985358 = 0;
      qword_254985350 = (uint64_t)&qword_254985358;
      __cxa_atexit((void (*)(void *))sub_20BF3C328, &qword_254985350, &dword_20BDBC000);
      __cxa_guard_release(&qword_254985368);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::PassesEntitlementCheck(pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata *this)
{
  __SecTask *v2;
  const char *v3;
  char *v4;
  _QWORD *v5;
  const void ***v6;
  const __CFAllocator *v7;
  const void **v8;
  const void **v9;
  _BOOL8 v10;
  uint64_t *v11;
  const char *v12;
  const __CFString *v13;
  void *v14;
  CFTypeID v15;
  int Value;
  const char *v17;
  char *v18;
  CFErrorRef v19;
  const char *v20;
  char *v21;
  const void ***v23;
  CFErrorRef error;

  if (*((_QWORD *)this + 17) != *((_QWORD *)this + 16))
  {
    v2 = SecTaskCreateFromSelf(0);
    if (!v2 && sub_20BF3C2C8(0))
    {
      v5 = (_QWORD *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v5 = (_QWORD *)*v5;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Failed to fetch entitlement task for %s\n", v3, v4, v5);
    }
    sub_20BF3C050();
    v6 = (const void ***)*((_QWORD *)this + 16);
    v23 = (const void ***)*((_QWORD *)this + 17);
    error = 0;
    if (v6 == v23)
    {
      v10 = 0;
      goto LABEL_37;
    }
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    while (1)
    {
      v9 = *v6;
      v8 = v6[1];
      v10 = *v6 == v8;
      if (*v6 == v8)
        goto LABEL_37;
      while (1)
      {
        v11 = (uint64_t *)sub_20BDEEBA4((uint64_t)&qword_254985350, v9);
        if (!v2 || v11 != &qword_254985358)
        {
          if (v11 == &qword_254985358)
            goto LABEL_33;
          goto LABEL_19;
        }
        v12 = (const char *)v9;
        if (*((char *)v9 + 23) < 0)
          v12 = (const char *)*v9;
        v13 = CFStringCreateWithCString(v7, v12, 0x8000100u);
        v14 = (void *)SecTaskCopyValueForEntitlement(v2, v13, &error);
        CFRelease(v13);
        if (!v14)
          break;
        v15 = CFGetTypeID(v14);
        if (v15 != CFBooleanGetTypeID())
        {
          if (sub_20BF3C2C8(0))
          {
            if (*((char *)v9 + 23) < 0)
              v9 = (const void **)*v9;
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Entitlement is not a BOOLean %s\n", v20, v21, v9);
          }
          v19 = (CFErrorRef)v14;
          goto LABEL_32;
        }
        Value = CFBooleanGetValue((CFBooleanRef)v14);
        CFRelease(v14);
        if (!Value)
          goto LABEL_33;
LABEL_19:
        v9 += 3;
        if (v9 == v8)
        {
          v10 = 1;
          goto LABEL_37;
        }
      }
      if (!error)
        goto LABEL_33;
      if (sub_20BF3C2C8(0))
      {
        if (*((char *)v9 + 23) < 0)
          v9 = (const void **)*v9;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Failed to check entitlement %s\n", v17, v18, v9);
      }
      v19 = error;
LABEL_32:
      CFRelease(v19);
LABEL_33:
      v6 += 3;
      if (v6 == v23)
      {
LABEL_37:
        CFRelease(v2);
        return v10;
      }
    }
  }
  return 1;
}

BOOL sub_20BF3C2C8(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20BF3C350();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20BF3C350();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_24C51CF90[a1]);
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t sub_20BF3C328(uint64_t a1)
{
  sub_20BDECAB8(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20BF3C350()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B318);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B318))
  {
    v2 = operator new(0x10uLL);
    *v2 = 0;
    v2[1] = 0;
    qword_25473B310 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473B318);
  }
  return qword_25473B310;
}

void sub_20BF3C3B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473B318);
  _Unwind_Resume(a1);
}

void sub_20BF3C3C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *__p;
  uint64_t v5;
  uint64_t v6;
  void *v7[2];
  char v8;

  sub_20BDDC0E4(v7, "PLUG_LOAD");
  __p = 0;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51CFB0, 0, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  v0 = sub_20BF3C350();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "PLUG_LOAD", "Plugin loading");
  sub_20BDDC0E4(v7, "PLUG_REGISTRATION");
  __p = 0;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51CFB0, 1, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  v1 = sub_20BF3C350();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "PLUG_REGISTRATION", "Plugin registration");
  sub_20BDDC0E4(v7, "PLUG_LOAD_IN_SECONDARY_THREAD");
  __p = 0;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51CFB0, 2, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  v2 = sub_20BF3C350();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "PLUG_LOAD_IN_SECONDARY_THREAD", "Plugins loaded from non-main threads");
  sub_20BDDC0E4(v7, "PLUG_INFO_SEARCH");
  __p = 0;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51CFB0, 3, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  v3 = sub_20BF3C350();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "PLUG_INFO_SEARCH", "Plugin info file search");
}

void sub_20BF3C594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Plug_TaskArena *pxrInternal__aapl__pxrReserved__::Plug_TaskArena::Plug_TaskArena(pxrInternal__aapl__pxrReserved__::Plug_TaskArena *this)
{
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)operator new(0x150uLL);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher(v2);
  *(_QWORD *)this = v2;
  return this;
}

void sub_20BF3C600(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Plug_TaskArena::Plug_TaskArena(_QWORD *result)
{
  *result = 0;
  return result;
}

{
  *result = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Plug_TaskArena::~Plug_TaskArena(pxrInternal__aapl__pxrReserved__::WorkDispatcher **this)
{
  sub_20BF3E278(this, 0);
}

{
  sub_20BF3E278(this, 0);
}

pxrInternal__aapl__pxrReserved__::WorkDispatcher *pxrInternal__aapl__pxrReserved__::Plug_TaskArena::Wait(pxrInternal__aapl__pxrReserved__::WorkDispatcher **this)
{
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *result;

  result = *this;
  if (result)
    return (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(result);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata(uint64_t a1, pxrInternal__aapl__pxrReserved__::JsValue *this, std::string *a3, uint64_t a4)
{
  std::string *v8;
  uint64_t **v9;
  void **v10;
  uint64_t *v11;
  _QWORD *JsObject;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *EmptyString;
  const char *v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::JsValue *v18;
  _DWORD *String;
  int v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  const char *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::JsValue *v29;
  const std::string *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::JsValue *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  pxrInternal__aapl__pxrReserved__::JsValue *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::JsValue *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t **v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  const char *v59;
  unint64_t v60;
  const char *v61;
  uint64_t v63;
  unint64_t **v64;
  unint64_t JsArray;
  pxrInternal__aapl__pxrReserved__::JsValue *v66;
  unint64_t v67;
  pxrInternal__aapl__pxrReserved__::JsValue *v68;
  pxrInternal__aapl__pxrReserved__::JsValue *v69;
  __int128 *v70;
  _QWORD *v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  _QWORD *v81;
  _QWORD *v82;
  pxrInternal__aapl__pxrReserved__::JsValue *v83;
  pxrInternal__aapl__pxrReserved__::JsValue *v84;
  pxrInternal__aapl__pxrReserved__::JsValue *v85;
  _QWORD *v86;
  void **v87;
  std::string *__str;
  std::string v89;
  const char *v90;
  char v91;
  std::string *v92;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  v9 = (uint64_t **)(a1 + 56);
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v10 = (void **)(a1 + 80);
  v87 = (void **)(a1 + 104);
  __str = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 128) = 0u;
  v11 = (uint64_t *)(a1 + 128);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsObject(this))
  {
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
    v89.__r_.__value_.__l.__size_ = (std::string::size_type)"Plug_RegistrationMetadata";
    v89.__r_.__value_.__r.__words[2] = 545;
    v90 = "pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata(const JsValue &, const "
          "std::string &, const std::string &)";
    v91 = 0;
    if (*(char *)(a4 + 23) >= 0)
      v16 = (const char *)a4;
    else
      v16 = *(const char **)a4;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v89, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info %s doesn't hold an object; plugin ignored",
      v16);
    return a1;
  }
  JsObject = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)this);
  v13 = (_QWORD *)sub_20BF3CFEC();
  v14 = v13 + 3;
  if ((v13[3] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v13[3] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v13);
  v17 = sub_20BDEEBA4((uint64_t)JsObject, (const void **)EmptyString);
  v86 = JsObject + 1;
  if (JsObject + 1 == (_QWORD *)v17)
    goto LABEL_95;
  v18 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v17 + 56);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v17 + 56)))
    goto LABEL_79;
  String = (_DWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetString(v18);
  if (*((char *)String + 23) < 0)
  {
    v21 = *((_QWORD *)String + 1);
    if (v21 != 7
      || (**(_DWORD **)String == 1919052140 ? (v22 = *(_DWORD *)(*(_QWORD *)String + 3) == 2037539186) : (v22 = 0),
          !v22))
    {
      if (v21 != 8)
        goto LABEL_28;
      String = *(_DWORD **)String;
LABEL_22:
      if (*(_QWORD *)String == 0x656372756F736572)
      {
        v23 = 3;
        goto LABEL_30;
      }
LABEL_28:
      v25 = "doesn't hold a valid type";
LABEL_96:
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
      v89.__r_.__value_.__l.__size_ = (std::string::size_type)"Plug_RegistrationMetadata";
      v89.__r_.__value_.__r.__words[2] = 743;
      v90 = "pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata(const JsValue &, cons"
            "t std::string &, const std::string &)";
      v91 = 0;
      if (*(char *)(a4 + 23) >= 0)
        v59 = (const char *)a4;
      else
        v59 = *(const char **)a4;
      v60 = *v14 & 0xFFFFFFFFFFFFFFF8;
      if (v60)
      {
        v61 = (const char *)(v60 + 16);
        if (*(char *)(v60 + 39) < 0)
          v61 = *(const char **)v61;
      }
      else
      {
        v61 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v89, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info %s key '%s' %s; plugin ignored",
        v59,
        v61,
        v25);
      *(_DWORD *)a1 = 0;
      return a1;
    }
  }
  else
  {
    v20 = *((unsigned __int8 *)String + 23);
    if (v20 != 7)
    {
      if (v20 != 8)
        goto LABEL_28;
      goto LABEL_22;
    }
    if (*String != 1919052140 || *(_DWORD *)((char *)String + 3) != 2037539186)
      goto LABEL_28;
  }
  v23 = 1;
LABEL_30:
  *(_DWORD *)a1 = v23;
  v26 = (_QWORD *)sub_20BF3CFEC();
  v14 = v26 + 4;
  if ((v26[4] & 0xFFFFFFFFFFFFFFF8) != 0)
    v27 = (uint64_t *)((v26[4] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v26);
  v28 = sub_20BDEEBA4((uint64_t)JsObject, (const void **)v27);
  if (v86 == (_QWORD *)v28)
    goto LABEL_95;
  v29 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v28 + 56);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v28 + 56)))
    goto LABEL_79;
  v30 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString(v29);
  std::string::operator=(v8, v30);
  if (*(char *)(a1 + 31) < 0)
    v31 = *(_QWORD *)(a1 + 16);
  else
    v31 = *(unsigned __int8 *)(a1 + 31);
  if (!v31)
  {
    v25 = "doesn't hold a valid name";
    goto LABEL_96;
  }
  v32 = (_QWORD *)sub_20BF3CFEC();
  v14 = v32 + 6;
  if ((v32[6] & 0xFFFFFFFFFFFFFFF8) != 0)
    v33 = (uint64_t *)((v32[6] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v33 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v32);
  v34 = sub_20BDEEBA4((uint64_t)JsObject, (const void **)v33);
  if (v86 == (_QWORD *)v34)
  {
    pxrInternal__aapl__pxrReserved__::TfGetPathName(a3, &v89);
    if (*(char *)(a1 + 55) < 0)
      operator delete(__str->__r_.__value_.__l.__data_);
    *__str = v89;
  }
  else
  {
    v35 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v34 + 56);
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v34 + 56)))
      goto LABEL_79;
    v36 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v35);
    sub_20BF3D778(a3, v36, 0, &v89);
    if (*(char *)(a1 + 55) < 0)
      operator delete(__str->__r_.__value_.__l.__data_);
    *__str = v89;
    if (*(char *)(a1 + 55) < 0)
      v37 = *(_QWORD *)(a1 + 40);
    else
      v37 = *(unsigned __int8 *)(a1 + 55);
    if (!v37)
      goto LABEL_87;
  }
  v38 = (_QWORD *)sub_20BF3CFEC();
  v14 = v38 + 7;
  if ((v38[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    v39 = (uint64_t *)((v38[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v38);
  v40 = sub_20BDEEBA4((uint64_t)JsObject, (const void **)v39);
  if (v86 == (_QWORD *)v40)
  {
    if (*(_DWORD *)a1 != 1)
      goto LABEL_70;
LABEL_95:
    v25 = "is missing";
    goto LABEL_96;
  }
  v41 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v40 + 56);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v40 + 56)))
    goto LABEL_79;
  v42 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v41);
  v43 = *(unsigned __int8 *)(v42 + 23);
  if ((v43 & 0x80u) != 0)
    v43 = *(_QWORD *)(v42 + 8);
  if (v43)
  {
    v44 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v41);
    sub_20BF3D938((uint64_t)__str, v44, &v89);
    if (*(char *)(a1 + 103) < 0)
      operator delete(*v10);
    *(std::string *)v10 = v89;
    if (!(*(char *)(a1 + 103) < 0 ? *(_QWORD *)(a1 + 88) : *(unsigned __int8 *)(a1 + 103)))
      goto LABEL_87;
  }
LABEL_70:
  v46 = (_QWORD *)sub_20BF3CFEC();
  v14 = v46 + 8;
  if ((v46[8] & 0xFFFFFFFFFFFFFFF8) != 0)
    v47 = (uint64_t *)((v46[8] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v47 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v46);
  v48 = sub_20BDEEBA4((uint64_t)JsObject, (const void **)v47);
  if (v86 != (_QWORD *)v48)
  {
    v49 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v48 + 56);
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v48 + 56)))
    {
      v50 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v49);
      sub_20BF3D938((uint64_t)__str, v50, &v89);
      if (*(char *)(a1 + 127) < 0)
        operator delete(*v87);
      *(std::string *)v87 = v89;
      if (*(char *)(a1 + 127) < 0)
        v51 = *(_QWORD *)(a1 + 112);
      else
        v51 = *(unsigned __int8 *)(a1 + 127);
      if (v51)
        goto LABEL_85;
LABEL_87:
      v25 = "doesn't hold a valid path";
      goto LABEL_96;
    }
LABEL_79:
    v25 = "doesn't hold a string";
    goto LABEL_96;
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(__str, &v89);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v87);
  *(std::string *)v87 = v89;
LABEL_85:
  v52 = (_QWORD *)sub_20BF3CFEC();
  v14 = v52 + 5;
  if ((v52[5] & 0xFFFFFFFFFFFFFFF8) != 0)
    v53 = (uint64_t *)((v52[5] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v53 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v52);
  v54 = sub_20BDEEBA4((uint64_t)JsObject, (const void **)v53);
  if (v86 == (_QWORD *)v54)
    goto LABEL_95;
  v55 = (unint64_t **)(v54 + 56);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v54 + 56)))
  {
    v25 = "doesn't hold an object";
    goto LABEL_96;
  }
  v56 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v55);
  if (v9 != (uint64_t **)v56)
    sub_20BF3E018(v9, *(__int128 **)v56, (__int128 *)(v56 + 8));
  v57 = (_QWORD *)sub_20BF3CFEC();
  v14 = v57 + 9;
  if ((v57[9] & 0xFFFFFFFFFFFFFFF8) != 0)
    v58 = (uint64_t *)((v57[9] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v58 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v57);
  v63 = sub_20BDEEBA4((uint64_t)JsObject, (const void **)v58);
  if (v86 != (_QWORD *)v63)
  {
    v64 = (unint64_t **)(v63 + 56);
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v63 + 56)))
    {
      v25 = "outer element is not an array";
      goto LABEL_96;
    }
    JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v64);
    v66 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
    v83 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
    if (*(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray != v83)
    {
      v25 = "inner element is not an array";
      while (2)
      {
        if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray(v66))
          goto LABEL_96;
        v84 = v66;
        v67 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v66);
        memset(&v89, 0, sizeof(v89));
        v69 = *(pxrInternal__aapl__pxrReserved__::JsValue **)v67;
        v68 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(v67 + 8);
        v85 = v68;
        while (v69 != v68)
        {
          if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v69))
          {
            v92 = &v89;
            sub_20BDE5038((void ***)&v92);
            v25 = "entitlement is not a string";
            goto LABEL_96;
          }
          v70 = (__int128 *)pxrInternal__aapl__pxrReserved__::JsValue::GetString(v69);
          sub_20BF3D9F4((uint64_t *)&v89, v70);
          v69 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v69 + 16);
          v68 = v85;
        }
        sub_20BF3DA34(v11, (__int128 **)&v89);
        v92 = &v89;
        sub_20BDE5038((void ***)&v92);
        v66 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v84 + 16);
        if ((pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v84 + 16) != v83)
          continue;
        break;
      }
    }
  }
  v71 = (_QWORD *)*JsObject;
  if ((_QWORD *)*JsObject != v86)
  {
    do
    {
      v72 = sub_20BF3CFEC();
      v73 = (const char *)(v71 + 4);
      if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v72 + 24), (unsigned __int8 *)v71 + 32) & 1) == 0)
      {
        v74 = sub_20BF3CFEC();
        if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v74 + 32), (unsigned __int8 *)v71 + 32) & 1) == 0)
        {
          v75 = sub_20BF3CFEC();
          if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v75 + 40), (unsigned __int8 *)v71 + 32) & 1) == 0)
          {
            v76 = sub_20BF3CFEC();
            if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v76 + 48), (unsigned __int8 *)v71 + 32) & 1) == 0)
            {
              v77 = sub_20BF3CFEC();
              if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v77 + 56), (unsigned __int8 *)v71 + 32) & 1) == 0)
              {
                v78 = sub_20BF3CFEC();
                if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v78 + 64), (unsigned __int8 *)v71 + 32) & 1) == 0)
                {
                  v79 = sub_20BF3CFEC();
                  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v79 + 72), (unsigned __int8 *)v71 + 32) & 1) == 0)
                  {
                    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
                    v89.__r_.__value_.__l.__size_ = (std::string::size_type)"Plug_RegistrationMetadata";
                    v89.__r_.__value_.__r.__words[2] = 734;
                    v90 = "pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata(const J"
                          "sValue &, const std::string &, const std::string &)";
                    v91 = 0;
                    if (*(char *)(a4 + 23) >= 0)
                      v80 = (const char *)a4;
                    else
                      v80 = *(const char **)a4;
                    if (*((char *)v71 + 55) < 0)
                      v73 = *(const char **)v73;
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v89, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info %s: ignoring unknown key '%s'", v80, v73);
                  }
                }
              }
            }
          }
        }
      }
      v81 = (_QWORD *)v71[1];
      if (v81)
      {
        do
        {
          v82 = v81;
          v81 = (_QWORD *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (_QWORD *)v71[2];
          v22 = *v82 == (_QWORD)v71;
          v71 = v82;
        }
        while (!v22);
      }
      v71 = v82;
    }
    while (v82 != v86);
  }
  return a1;
}

void sub_20BF3CF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, ...)
{
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  va_list va;

  va_start(va, a11);
  sub_20BF3DFA8((void ***)va);
  if (*(char *)(v11 + 127) < 0)
    operator delete(*a10);
  if (*(char *)(v11 + 103) < 0)
    operator delete(*v13);
  sub_20BE78E5C(v14, *(_QWORD **)(v11 + 64));
  if (*(char *)(v11 + 55) < 0)
    operator delete(*a11);
  if (*(char *)(v11 + 31) < 0)
    operator delete(*v12);
  _Unwind_Resume(a1);
}

unint64_t sub_20BF3CFEC()
{
  unint64_t *v0;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  void ***v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v0 = (unint64_t *)atomic_load(&qword_254985370);
  if (!v0)
  {
    v0 = (unint64_t *)operator new(0x68uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "plugInfo.json", 0);
    v71 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "Includes", 0);
    v70 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "Plugins", 0);
    v2 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "Type", 0);
    v3 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "Name", 0);
    v4 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "Info", 0);
    v5 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "Root", 0);
    v6 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "LibraryPath", 0);
    v7 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "ResourcePath", 0);
    v8 = (uint64_t *)(v0 + 9);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 9, "Entitlements", 0);
    v9 = *v0;
    v72 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v72 &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 = *v71;
    v73 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v73 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *v70;
    v74 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v74 &= 0xFFFFFFFFFFFFFFF8;
    }
    v18 = *v2;
    v75 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v75 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = *v3;
    v76 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v76 &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 = *v4;
    v77 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) == 0)
        v77 &= 0xFFFFFFFFFFFFFFF8;
    }
    v27 = *v5;
    v78 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v78 &= 0xFFFFFFFFFFFFFFF8;
    }
    v30 = *v6;
    v79 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v79 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = *v7;
    v80 = v33;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        v80 &= 0xFFFFFFFFFFFFFFF8;
    }
    v36 = *v8;
    v81 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 2, v37));
      if ((v38 & 1) == 0)
        v81 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[10] = 0;
    v0[11] = 0;
    v0[12] = 0;
    v39 = operator new(0x50uLL);
    v40 = 0;
    v0[10] = (unint64_t)v39;
    v0[11] = (unint64_t)v39;
    v0[12] = (unint64_t)(v39 + 10);
    do
    {
      v41 = *(&v72 + v40);
      *v39 = v41;
      if ((v41 & 7) != 0)
      {
        v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 2, v42));
        if ((v43 & 1) == 0)
          *v39 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v40;
      ++v39;
    }
    while (v40 != 10);
    v44 = (void ***)&v82;
    v0[11] = (unint64_t)v39;
    do
    {
      v46 = (uint64_t)*--v44;
      v45 = v46;
      if ((v46 & 7) != 0)
      {
        v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
    }
    while (v44 != (void ***)&v72);
    while (!__ldaxr(&qword_254985370))
    {
      if (!__stlxr((unint64_t)v0, &qword_254985370))
        return (unint64_t)v0;
    }
    __clrex();
    v72 = (unint64_t)(v0 + 10);
    sub_20BEEB2B8((void ***)&v72);
    if ((*v8 & 7) != 0)
    {
      v50 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((*v7 & 7) != 0)
    {
      v52 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    if ((*v6 & 7) != 0)
    {
      v54 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    if ((*v5 & 7) != 0)
    {
      v56 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    if ((*v4 & 7) != 0)
    {
      v58 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    if ((*v3 & 7) != 0)
    {
      v60 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    if ((*v2 & 7) != 0)
    {
      v62 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stlxr(v63 - 2, v62));
    }
    if ((*v70 & 7) != 0)
    {
      v64 = (unsigned int *)(*v70 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    if ((*v71 & 7) != 0)
    {
      v66 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v67 = __ldxr(v66);
      while (__stlxr(v67 - 2, v66));
    }
    if ((*v0 & 7) != 0)
    {
      v68 = (unsigned int *)(*v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    operator delete(v0);
    return atomic_load(&qword_254985370);
  }
  return (unint64_t)v0;
}

void sub_20BF3D594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, void **a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;

  sub_20BEEB2B8(&a12);
  v33 = &a24;
  while (1)
  {
    v35 = *--v33;
    v34 = v35;
    if ((v35 & 7) != 0)
    {
      v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
    if (v33 == (uint64_t *)&a14)
    {
      if ((*v31 & 7) != 0)
      {
        v38 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v30 & 7) != 0)
      {
        v40 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((*v29 & 7) != 0)
      {
        v42 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if ((*v28 & 7) != 0)
      {
        v44 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if ((*v27 & 7) != 0)
      {
        v46 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v26 & 7) != 0)
      {
        v48 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((*v25 & 7) != 0)
      {
        v50 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*a10 & 7) != 0)
      {
        v52 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*a11 & 7) != 0)
      {
        v54 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v24 & 7) != 0)
      {
        v56 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      operator delete(v24);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20BF3D768()
{
  JUMPOUT(0x20BF3D738);
}

void sub_20BF3D770()
{
  JUMPOUT(0x20BF3D758);
}

void sub_20BF3D778(std::string *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v10;
  char *v11;
  size_t v12;
  void **v13;
  std::string __p;
  void *v15[2];
  uint64_t v16;

  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
    {
      pxrInternal__aapl__pxrReserved__::TfGetPathName(a1, &__p);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&__p.__r_.__value_.__l.__data_, a2, v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!a3)
          goto LABEL_30;
      }
      else if (!a3)
      {
        goto LABEL_30;
      }
      v10 = *(unsigned __int8 *)(a2 + 23);
      if ((v10 & 0x80u) == 0)
        v11 = (char *)a2;
      else
        v11 = *(char **)a2;
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a2 + 8);
      if (v11[v10 - 1] == 47)
      {
        if (v16 >= 0)
          v12 = HIBYTE(v16);
        else
          v12 = (size_t)v15[1];
        sub_20BDF6BDC((uint64_t)a4, v12 + 1);
        if (*((char *)a4 + 23) < 0)
          a4 = (_QWORD *)*a4;
        if (v12)
        {
          if (v16 >= 0)
            v13 = v15;
          else
            v13 = (void **)v15[0];
          memmove(a4, v13, v12);
        }
        *(_WORD *)((char *)a4 + v12) = 47;
        goto LABEL_33;
      }
LABEL_30:
      if (SHIBYTE(v16) < 0)
      {
        sub_20BDDBFAC(a4, v15[0], (unint64_t)v15[1]);
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v15;
        a4[2] = v16;
      }
LABEL_33:
      if (SHIBYTE(v16) < 0)
        operator delete(v15[0]);
      return;
    }
    v7 = *(_BYTE *)(a2 + 23);
  }
  if (v7 < 0)
  {
    sub_20BDDBFAC(a4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    a4[2] = *(_QWORD *)(a2 + 16);
  }
}

void sub_20BF3D908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF3D938(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  void *v8;
  unint64_t v9;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
    {
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)a1, a2, a3);
      return;
    }
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      v7 = *(_QWORD *)(a2 + 16);
      goto LABEL_10;
    }
    v8 = *(void **)a2;
    v9 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      v7 = *(_QWORD *)(a1 + 16);
LABEL_10:
      a3[2] = v7;
      return;
    }
    v8 = *(void **)a1;
    v9 = *(_QWORD *)(a1 + 8);
  }
  sub_20BDDBFAC(a3, v8, v9);
}

uint64_t sub_20BF3D9F4(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = sub_20BF3E2A4(a1, a2);
  }
  else
  {
    sub_20BE4EDF4(a1, a2);
    v4 = v3 + 24;
  }
  a1[1] = v4;
  return v4 - 24;
}

uint64_t sub_20BF3DA34(uint64_t *a1, __int128 **a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = sub_20BF3E420(a1, a2);
  }
  else
  {
    sub_20BF3E3C4((uint64_t)a1, a2);
    v4 = v3 + 24;
  }
  a1[1] = v4;
  return v4 - 24;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Plug_ReadPlugInfo(std::string **a1, int a2, uint64_t a3, uint64_t a4, std::string::size_type a5)
{
  const char *v10;
  char *v11;
  std::string *v12;
  std::string::size_type *p_size;
  std::string *v14;
  std::string *v15;
  int v16;
  std::string::size_type size;
  std::string *v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  int IsDir;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE *v33;
  __int128 v34;
  uint64_t v35;
  double v36;
  const char *v37;
  char *v38;
  _QWORD *result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **p_p;
  __int128 v44;
  std::string::size_type v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  std::string __p;
  std::string *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (sub_20BF3C2C8(3) && sub_20BF3C2C8(3))
  {
    pxrInternal__aapl__pxrReserved__::TfStringJoin("\n    ", a1, &__p);
    v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Will check plugin info paths:\n    %s\n", v10, v11, v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v42 = mach_absolute_time();
  __p.__r_.__value_.__r.__words[0] = a5;
  p_size = &__p.__r_.__value_.__l.__size_;
  sub_20BE9E6E8((uint64_t)&__p.__r_.__value_.__l.__size_, a3);
  sub_20BE9E6E8((uint64_t)v51, a4);
  v14 = *a1;
  v15 = a1[1];
  if (*a1 != v15)
  {
    while (1)
    {
      v16 = SHIBYTE(v14->__r_.__value_.__r.__words[2]);
      if (v16 < 0)
      {
        size = v14->__r_.__value_.__l.__size_;
        if (!size)
          goto LABEL_42;
        v18 = (std::string *)v14->__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((_BYTE *)&v14->__r_.__value_.__s + 23))
          goto LABEL_42;
        size = HIBYTE(v14->__r_.__value_.__r.__words[2]);
        v18 = v14;
      }
      v19 = v18->__r_.__value_.__s.__data_[size - 1];
      v20 = v19 == 47;
      if (v19 == 47)
        break;
      IsDir = pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)v14, 1);
      v21 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
      v16 = SHIBYTE(v14->__r_.__value_.__r.__words[2]);
      if (IsDir)
        goto LABEL_18;
      p_p = (uint64_t **)&__p;
      if (v16 < 0)
      {
        sub_20BDDBFAC(&v44, v14->__r_.__value_.__l.__data_, v14->__r_.__value_.__l.__size_);
      }
      else
      {
        v29 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v45 = v14->__r_.__value_.__r.__words[2];
        v44 = v29;
      }
      v30 = *v21;
      if (*v21)
      {
        v31 = *(_QWORD *)(v30 + 256);
        v47 = 0;
        v48 = v31;
        v32 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v47, 0x30uLL);
        *((_BYTE *)v32 - 11) = 1;
        *v32 = &off_24C51D240;
        v32[1] = p_p;
        v33 = v32 + 2;
        if (SHIBYTE(v45) < 0)
        {
          sub_20BDDBFAC(v33, (void *)v44, *((unint64_t *)&v44 + 1));
        }
        else
        {
          v34 = v44;
          v32[4] = v45;
          *(_OWORD *)v33 = v34;
        }
        v32[5] = v30 + 264;
        (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v32 - 5))(*(v32 - 5), v32, (uint64_t)(v32 - 1));
      }
      else
      {
        sub_20BF3E968(p_p, (uint64_t)&v44);
      }
LABEL_36:
      if (SHIBYTE(v45) < 0)
      {
        operator delete((void *)v44);
        if (a2)
        {
LABEL_40:
          if (*(_QWORD *)__p.__r_.__value_.__l.__data_)
            pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(*(pxrInternal__aapl__pxrReserved__::WorkDispatcher **)__p.__r_.__value_.__l.__data_);
        }
      }
      else if (a2)
      {
        goto LABEL_40;
      }
LABEL_42:
      if (++v14 == v15)
        goto LABEL_43;
    }
    v21 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
LABEL_18:
    p_p = (uint64_t **)&__p;
    if (v16 < 0)
    {
      sub_20BDDBFAC(&v44, v14->__r_.__value_.__l.__data_, v14->__r_.__value_.__l.__size_);
    }
    else
    {
      v23 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v45 = v14->__r_.__value_.__r.__words[2];
      v44 = v23;
    }
    v46 = v20;
    v24 = *v21;
    if (*v21)
    {
      v25 = *(_QWORD *)(v24 + 256);
      v47 = 0;
      v48 = v25;
      v26 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v47, 0x38uLL);
      *(_BYTE *)(v26 - 11) = 1;
      *(_QWORD *)v26 = &off_24C51CFD0;
      *(_QWORD *)(v26 + 8) = p_p;
      v27 = (_BYTE *)(v26 + 16);
      if (SHIBYTE(v45) < 0)
      {
        sub_20BDDBFAC(v27, (void *)v44, *((unint64_t *)&v44 + 1));
      }
      else
      {
        v28 = v44;
        *(_QWORD *)(v26 + 32) = v45;
        *(_OWORD *)v27 = v28;
      }
      *(_BYTE *)(v26 + 40) = v46;
      *(_QWORD *)(v26 + 48) = v24 + 264;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v26 - 40))(*(_QWORD *)(v26 - 40), v26, v26 - 8);
    }
    else
    {
      sub_20BF3E750((uint64_t)&p_p);
    }
    goto LABEL_36;
  }
LABEL_43:
  if ((a2 & 1) == 0 && *(_QWORD *)__p.__r_.__value_.__l.__data_)
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(*(pxrInternal__aapl__pxrReserved__::WorkDispatcher **)__p.__r_.__value_.__l.__data_);
  v35 = mach_absolute_time();
  if (sub_20BF3C2C8(3))
  {
    v36 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)(v35 - v42));
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" Did check plugin info paths in %f seconds\n", v37, v38, *(_QWORD *)&v36);
  }
  result = v52;
  if (v52 == v51)
  {
    v40 = 4;
    result = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_53;
    v40 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v40))();
LABEL_53:
  if (v50 == (std::string *)&__p.__r_.__value_.__r.__words[1])
  {
    v41 = 4;
  }
  else
  {
    if (!v50)
      return result;
    v41 = 5;
    p_size = (std::string::size_type *)v50;
  }
  return (_QWORD *)(*(uint64_t (**)(std::string::size_type *))(*p_size + 8 * v41))(p_size);
}

void sub_20BF3DE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF3DF28(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_20BF3DFA8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_20BDE5038(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **sub_20BF3E018(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **v10;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          sub_20BDE881C(v8 + 7, (uint64_t *)v9 + 7);
          v10 = (uint64_t **)sub_20BDFC638((uint64_t)v5, &v18, v17 + 4);
          sub_20BDDE1B4(v5, v18, v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_20BDFC6B0((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_20BF3E1A4((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20BF3E1F8(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_20BF3E190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF3E1A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF3E1A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_20BE78E5C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_20BE78E5C(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_20BF3E1F8(uint64_t **a1, __int128 *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  sub_20C6E74A4((uint64_t)a1, a2, (uint64_t)v7);
  v3 = (uint64_t **)sub_20BDFC638((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_20BDDE1B4(a1, v6, v3, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  sub_20BE7B260((uint64_t)v7, 0);
  return v4;
}

void sub_20BF3E260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7B260((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BF3E278(pxrInternal__aapl__pxrReserved__::WorkDispatcher **a1, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a2)
{
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v3);
    operator delete(v4);
  }
}

uint64_t sub_20BF3E2A4(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_20BDF34C0(a1, v15);
  v13 = a1[1];
  sub_20BDF3648((uint64_t)v15);
  return v13;
}

void sub_20BF3E3B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20BF3E3C4(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_20BE78B98((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_20BF3E418(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BF3E420(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20BE78B98(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_20BF3E540(a1, v14);
  v12 = a1[1];
  sub_20BF3E6D0(v14);
  return v12;
}

void sub_20BF3E52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF3E6D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF3E540(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF3E5B4((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF3E5B4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BF3E654((uint64_t)v11);
  return v9;
}

uint64_t sub_20BF3E654(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF3E688(a1);
  return a1;
}

void sub_20BF3E688(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_20BDE5038(&v3);
    v1 += 3;
  }
}

void **sub_20BF3E6D0(void **a1)
{
  sub_20BF3E700((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BF3E700(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_20BDE5038(&v5);
  }
}

void sub_20BF3E750(uint64_t a1)
{
  uint64_t **v2;
  size_t v3;
  void **v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  void *__p[2];
  uint64_t v10;

  v2 = *(uint64_t ***)a1;
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 24);
    }
  }
  else
  {
    if (*(char *)(a1 + 31) >= 0)
      v3 = *(unsigned __int8 *)(a1 + 31);
    else
      v3 = *(_QWORD *)(a1 + 16);
    v4 = __p;
    sub_20BDF6BDC((uint64_t)__p, v3 + 1);
    if (v10 < 0)
      v4 = (void **)__p[0];
    if (v3)
    {
      v7 = *(char **)(a1 + 8);
      v6 = (char *)(a1 + 8);
      v5 = v7;
      if (v6[23] >= 0)
        v8 = v6;
      else
        v8 = v5;
      memmove(v4, v8, v3);
    }
    *(_WORD *)((char *)v4 + v3) = 47;
  }
  sub_20BF3E968(v2, (uint64_t)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_20BF3E834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF3E850(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C51CFD0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20BF3E88C(void **__p)
{
  *__p = &off_24C51CFD0;
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t sub_20BF3E8C8(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20BF3E750(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20BF3E954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20BF3E968(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  const char *v5;
  std::string::size_type v6;
  uint64_t v7;
  BOOL v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string::size_type size;
  const char *v17;
  char *v18;
  char v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string *v22;
  int v23;
  const char *v24;
  char *v25;
  const char *v26;
  char *v27;
  char *i;
  uint64_t *v29;
  __int128 v30;
  uint64_t v31;
  std::string::size_type v32;
  _QWORD *v33;
  _BYTE *v34;
  __int128 v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  unint64_t v39;
  const char *v40;
  const std::locale *v41;
  uint64_t v42;
  std::string *v43;
  const char *v44;
  char *v45;
  const char *v46;
  uint64_t *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD *v52;
  _BYTE *v53;
  __int128 v54;
  uint64_t **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _BYTE v70[32];
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  std::string v75;
  void *v76[2];
  uint64_t v77;
  std::string __p;
  std::string __str;
  uint64_t v80;
  std::__shared_weak_count *v81;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return;
  if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
  {
    *(_QWORD *)v70 = "plug/info.cpp";
    *(_QWORD *)&v70[8] = "_ReadPlugInfoWithWildcards";
    *(_QWORD *)&v70[16] = 388;
    *(_QWORD *)&v70[24] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfoWithWildcards(_Read"
                          "Context *, const std::string &)";
    LOBYTE(v71) = 0;
    if (*(char *)(a2 + 23) >= 0)
      v5 = (const char *)a2;
    else
      v5 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v70, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s is not absolute", v5);
    return;
  }
  v6 = std::string::find((const std::string *)a2, 42, 0);
  v7 = *(unsigned __int8 *)(a2 + 23);
  if (v6 != -1)
  {
    v8 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 8);
    if (v8)
      v9 = *(char **)a2;
    else
      v9 = (char *)a2;
    if (v7 < 2)
      goto LABEL_59;
    v10 = &v9[v7];
    v11 = v9;
    while (1)
    {
      v12 = (char *)memchr(v11, 42, v7 - 1);
      if (!v12)
        goto LABEL_59;
      if (*(_WORD *)v12 == 10794)
        break;
      v11 = v12 + 1;
      v7 = v10 - (_BYTE *)v11;
      if (v10 - (_BYTE *)v11 < 2)
        goto LABEL_59;
    }
    if (v12 == v10 || (v14 = v12 - v9, v14 == -1))
    {
LABEL_59:
      if (sub_20BF3C2C8(3))
      {
        if (*(char *)(a2 + 23) >= 0)
          v26 = (const char *)a2;
        else
          v26 = *(const char **)a2;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Globbing plugin info path %s\n", v24, v25, v26);
      }
      pxrInternal__aapl__pxrReserved__::TfGlob(a2, 0, (uint64_t *)v76);
      v27 = (char *)v76[0];
      for (i = (char *)v76[1]; v27 != i; v27 += 24)
      {
        v29 = *a1;
        *(_QWORD *)v70 = a1;
        if (v27[23] < 0)
        {
          sub_20BDDBFAC(&v70[8], *(void **)v27, *((_QWORD *)v27 + 1));
        }
        else
        {
          v30 = *(_OWORD *)v27;
          *(_QWORD *)&v70[24] = *((_QWORD *)v27 + 2);
          *(_OWORD *)&v70[8] = v30;
        }
        v31 = *v29;
        if (*v29)
        {
          v32 = *(_QWORD *)(v31 + 256);
          __str.__r_.__value_.__r.__words[0] = 0;
          __str.__r_.__value_.__l.__size_ = v32;
          v33 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&__str, 0x30uLL);
          *((_BYTE *)v33 - 11) = 1;
          *v33 = &off_24C51D0A8;
          v33[1] = *(_QWORD *)v70;
          v34 = v33 + 2;
          if ((v70[31] & 0x80000000) != 0)
          {
            sub_20BDDBFAC(v34, *(void **)&v70[8], *(unint64_t *)&v70[16]);
          }
          else
          {
            v35 = *(_OWORD *)&v70[8];
            v33[4] = *(_QWORD *)&v70[24];
            *(_OWORD *)v34 = v35;
          }
          v33[5] = v31 + 264;
          (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v33 - 5))(*(v33 - 5), v33, (uint64_t)(v33 - 1));
        }
        else
        {
          if ((v70[31] & 0x80000000) != 0)
            sub_20BDDBFAC(&__str, *(void **)&v70[8], *(unint64_t *)&v70[16]);
          else
            __str = *(std::string *)&v70[8];
          sub_20BF3F3B0(*(uint64_t *)v70, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        if ((v70[31] & 0x80000000) != 0)
          operator delete(*(void **)&v70[8]);
      }
      *(_QWORD *)v70 = v76;
      sub_20BDE5038((void ***)v70);
      return;
    }
    sub_20BDDC0E4(v70, "\\");
    sub_20BDDC0E4(v76, "/");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)a2, v70, (unsigned __int8 *)v76, &__str);
    if (SHIBYTE(v77) < 0)
      operator delete(v76[0]);
    if ((v70[23] & 0x80000000) != 0)
      operator delete(*(void **)v70);
    v15 = std::string::rfind(&__str, 47, v14);
    std::string::basic_string((std::string *)v70, &__str, 0, v15, (std::allocator<char> *)&v75);
    pxrInternal__aapl__pxrReserved__::TfNormPath(v76, v70, 0);
    if ((v70[23] & 0x80000000) != 0)
      operator delete(*(void **)v70);
    std::string::basic_string(&v75, &__str, v15 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v70);
    memset(v70, 0, 24);
    size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v75.__r_.__value_.__l.__size_;
    std::string::reserve((std::string *)v70, 5 * size);
    v19 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    else
      v20 = v75.__r_.__value_.__l.__size_;
    if (v20)
    {
      v21 = 0;
      while (1)
      {
        v22 = (v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v75
            : (std::string *)v75.__r_.__value_.__r.__words[0];
        v23 = v22->__r_.__value_.__s.__data_[v21];
        if (v23 > 90)
          break;
        if (v23 == 42)
        {
          if (v21 + 1 == v20 || v22->__r_.__value_.__s.__data_[v21 + 1] != 42)
          {
            std::string::append((std::string *)v70, "[^/]*", 5uLL);
          }
          else
          {
            std::string::append((std::string *)v70, ".*", 2uLL);
            ++v21;
          }
          goto LABEL_53;
        }
        if (v23 == 46)
          goto LABEL_51;
LABEL_52:
        std::string::push_back((std::string *)v70, v23);
LABEL_53:
        if (++v21 == v20)
        {
          v19 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
          goto LABEL_83;
        }
      }
      if (v23 != 93 && v23 != 91)
        goto LABEL_52;
LABEL_51:
      std::string::push_back((std::string *)v70, 92);
      goto LABEL_52;
    }
LABEL_83:
    if (v19 < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    v75 = *(std::string *)v70;
    if (v77 >= 0)
      v36 = v76;
    else
      v36 = (void **)v76[0];
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
      v37 = v75.__r_.__value_.__l.__size_;
      v38 = (std::string *)v75.__r_.__value_.__r.__words[0];
      if (!v75.__r_.__value_.__l.__size_)
        goto LABEL_96;
    }
    else
    {
      v37 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      if (!*((_BYTE *)&v75.__r_.__value_.__s + 23))
      {
        v40 = "";
        v38 = &v75;
        goto LABEL_98;
      }
      v38 = &v75;
    }
    if (v38->__r_.__value_.__s.__data_[v37 - 1] == 47)
    {
      v39 = *(_QWORD *)sub_20BF3CFEC() & 0xFFFFFFFFFFFFFFF8;
      if (v39)
      {
        v40 = (const char *)(v39 + 16);
        if (*(char *)(v39 + 39) < 0)
          v40 = *(const char **)v40;
LABEL_98:
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s%s", v17, v18, v36, v38, v40);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        v75 = *(std::string *)v70;
        v73 = 0;
        v74 = 0;
        v41 = (const std::locale *)operator new(0x40uLL);
        v42 = (uint64_t)v41;
        if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v75;
        else
          v43 = (std::string *)v75.__r_.__value_.__r.__words[0];
        sub_20BE8E538(v41, (char *)v43, 32);
        sub_20BF40170(&v73, v42);
        if (sub_20BF3C2C8(3))
        {
          if (*(char *)(a2 + 23) >= 0)
            v46 = (const char *)a2;
          else
            v46 = *(const char **)a2;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Recursively walking plugin info path %s\n", v44, v45, v46);
        }
        v47 = *a1;
        *(_QWORD *)v70 = a1;
        if (SHIBYTE(v77) < 0)
        {
          sub_20BDDBFAC(&v70[8], v76[0], (unint64_t)v76[1]);
        }
        else
        {
          *(_OWORD *)&v70[8] = *(_OWORD *)v76;
          *(_QWORD *)&v70[24] = v77;
        }
        v71 = v73;
        v72 = v74;
        if (v74)
        {
          p_shared_owners = (unint64_t *)&v74->__shared_owners_;
          do
            v49 = __ldxr(p_shared_owners);
          while (__stxr(v49 + 1, p_shared_owners));
        }
        v50 = *v47;
        if (*v47)
        {
          v51 = *(std::__shared_weak_count **)(v50 + 256);
          v80 = 0;
          v81 = v51;
          v52 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v80, 0x40uLL);
          *((_BYTE *)v52 - 11) = 1;
          *v52 = off_24C51D168;
          v52[1] = *(_QWORD *)v70;
          v53 = v52 + 2;
          if ((v70[31] & 0x80000000) != 0)
          {
            sub_20BDDBFAC(v53, *(void **)&v70[8], *(unint64_t *)&v70[16]);
          }
          else
          {
            v54 = *(_OWORD *)&v70[8];
            v52[4] = *(_QWORD *)&v70[24];
            *(_OWORD *)v53 = v54;
          }
          v52[5] = v71;
          v61 = v72;
          v52[6] = v72;
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          v52[7] = v50 + 264;
          (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v52 - 5))(*(v52 - 5), v52, (uint64_t)(v52 - 1));
        }
        else
        {
          v55 = *(uint64_t ***)v70;
          v56 = v72;
          v80 = v71;
          v81 = v72;
          if (v72)
          {
            v57 = (unint64_t *)&v72->__shared_owners_;
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
          sub_20BF40DFC(v55, &v70[8], (uint64_t)&v80);
          if (v56)
          {
            v59 = (unint64_t *)&v56->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
        }
        v64 = v72;
        if (v72)
        {
          v65 = (unint64_t *)&v72->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        if ((v70[31] & 0x80000000) != 0)
          operator delete(*(void **)&v70[8]);
        v67 = v74;
        if (v74)
        {
          v68 = (unint64_t *)&v74->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if (SHIBYTE(v77) < 0)
          operator delete(v76[0]);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v13 = (void *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_26;
        }
        return;
      }
    }
LABEL_96:
    v40 = "";
    goto LABEL_98;
  }
  if ((v7 & 0x80) != 0)
    sub_20BDDBFAC(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_20BF3F3B0((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_26:
    operator delete(v13);
  }
}

void sub_20BF3F188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  tbb::task *v38;
  uint64_t v39;

  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)(v39 - 96), v38);
  sub_20BE032CC((uint64_t)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a19);
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v39 - 105) < 0)
    operator delete(*(void **)(v39 - 128));
  _Unwind_Resume(a1);
}

void sub_20BF3F3B0(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string::size_type size;
  std::string *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  uint64_t v7;
  char v8;
  _BOOL4 v9;
  const char *v10;
  char *v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::ios_base *v18;
  uint64_t v19;
  std::locale::id *v20;
  const std::locale::facet *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  std::string::size_type v24;
  int v25;
  _BYTE *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  _BYTE *v33;
  char *v34;
  const char *v35;
  std::locale::__imp *locale;
  const char *v37;
  char *v38;
  std::string *v39;
  unint64_t JsObject;
  const char *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  const char *v45;
  char *v46;
  std::string *v47;
  pxrInternal__aapl__pxrReserved__::TfToken *v48;
  uint64_t *v49;
  _QWORD **v50;
  _QWORD **v51;
  const char *v52;
  const char *v53;
  char *v54;
  uint64_t *JsArray;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::string *v60;
  _QWORD **v61;
  uint64_t *v62;
  uint64_t v63;
  std::string::size_type v64;
  _QWORD *v65;
  uint64_t v66;
  const char *v67;
  pxrInternal__aapl__pxrReserved__::TfToken *v68;
  uint64_t *v69;
  _QWORD **v70;
  _QWORD **v71;
  const char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t String;
  uint64_t *v79;
  const char *v80;
  const char *v81;
  uint64_t v82;
  std::locale::__imp *v83;
  _QWORD *v84;
  _BYTE *v85;
  __int128 v86;
  const char *v87;
  uint64_t *v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  const char *v92;
  uint64_t *v93;
  uint64_t *v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  std::string *v99;
  uint64_t *v100;
  _QWORD *v101[2];
  unint64_t *v102;
  std::__shared_weak_count *v103;
  std::locale v104[2];
  __int128 v105;
  std::string *v106;
  _BYTE *v107;
  unint64_t v108;
  std::string v109;
  std::string __p;
  const char *v111;
  void *v112;
  char v113;
  _QWORD *v114[5];
  char v115;
  void *v116;
  char v117;
  uint64_t v118;
  _BYTE v119[32];
  char v120;
  char v121;
  void *v122;
  char v123;
  _QWORD *v124[5];
  char v125;
  void *v126;
  char v127;
  uint64_t v128;
  _QWORD v129[21];

  v2 = a2;
  v129[19] = *MEMORY[0x24BDAC8D0];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a2->__r_.__value_.__l.__size_;
    if (!size)
      return;
    v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
      return;
    v4 = a2;
  }
  if (v4->__r_.__value_.__s.__data_[size - 1] == 47)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF3CFEC();
    if ((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&v2->__r_.__value_.__l.__data_, (const void **)EmptyString, (uint64_t)v119);
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2->__r_.__value_.__l.__data_);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v119;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)&v119[16];
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
    sub_20BE9E974();
  v8 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 48))(v7, v2);
  v9 = sub_20BF3C2C8(3);
  if ((v8 & 1) != 0)
  {
    if (v9)
    {
      v12 = v2;
      if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
        v12 = (std::string *)v2->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Will read plugin info %s\n", v10, v11, v12);
    }
    v101[0] = 0;
    v101[1] = 0;
    v100 = (uint64_t *)v101;
    v13 = MEMORY[0x24BEDB838];
    v14 = MEMORY[0x24BEDB838] + 64;
    v15 = (_QWORD *)MEMORY[0x24BEDB7E0];
    v16 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
    v17 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
    v129[0] = MEMORY[0x24BEDB838] + 64;
    *(_QWORD *)v119 = v16;
    *(_QWORD *)&v119[*(_QWORD *)(v16 - 24)] = v17;
    *(_QWORD *)&v119[8] = 0;
    v18 = (std::ios_base *)&v119[*(_QWORD *)(*(_QWORD *)v119 - 24)];
    std::ios_base::init(v18, &v119[16]);
    v18[1].__vftable = 0;
    v18[1].__fmtflags_ = -1;
    *(_QWORD *)v119 = v13 + 24;
    v129[0] = v14;
    MEMORY[0x212B92AA8](&v119[16]);
    std::ifstream::open();
    v19 = v128;
    v99 = v2;
    if (v128)
    {
      v96 = v128;
      memset(&v109, 0, sizeof(v109));
      v106 = 0;
      v107 = 0;
      v108 = 0;
      v20 = (std::locale::id *)MEMORY[0x24BEDB350];
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)&v119[*(_QWORD *)(*(_QWORD *)v119 - 24)]);
        v21 = std::locale::use_facet(v104, v20);
        v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(v104);
        v23 = sub_20BE9EB38(v119, (uint64_t)&v109, v22);
        if ((*((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 32) & 5) != 0)
          break;
        v24 = std::string::find(&v109, 35, 0);
        v25 = SHIBYTE(v109.__r_.__value_.__r.__words[2]);
        v27 = v109.__r_.__value_.__l.__size_;
        v26 = (_BYTE *)v109.__r_.__value_.__r.__words[0];
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v109;
        else
          v28 = (std::string *)v109.__r_.__value_.__r.__words[0];
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
        else
          v29 = v109.__r_.__value_.__l.__size_;
        if (v29)
        {
          v30 = 0;
          while (memchr(" \t#", v28->__r_.__value_.__s.__data_[v30], 3uLL))
          {
            if (v29 == ++v30)
              goto LABEL_32;
          }
        }
        else
        {
LABEL_32:
          v30 = -1;
        }
        if (v24 < v30)
        {
          if (v25 < 0)
          {
            v27 = 0;
            *v26 = 0;
            v109.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v109.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v109.__r_.__value_.__s + 23) = 0;
          }
        }
        v31 = v107;
        if ((unint64_t)v107 >= v108)
        {
          v33 = (_BYTE *)sub_20BE4EE50((uint64_t *)&v106, (__int128 *)&v109);
        }
        else
        {
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20BDDBFAC(v107, v109.__r_.__value_.__l.__data_, v27);
          }
          else
          {
            v32 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
            *((_QWORD *)v107 + 2) = *((_QWORD *)&v109.__r_.__value_.__l + 2);
            *v31 = v32;
          }
          v33 = (char *)v31 + 24;
        }
        v107 = v33;
      }
      *(_OWORD *)&v104[0].__locale_ = 0u;
      v105 = 0u;
      pxrInternal__aapl__pxrReserved__::TfStringJoin("\n", &v106, &__p);
      pxrInternal__aapl__pxrReserved__::JsParseString((char *)&__p, (uint64_t)v104, v34, (pxrInternal__aapl__pxrReserved__::JsValue *)&v102);
      v15 = (_QWORD *)MEMORY[0x24BEDB7E0];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v102))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_ReadPlugInfoObject";
        __p.__r_.__value_.__r.__words[2] = 196;
        v111 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfoObject(const std::string &, JsObject *)";
        LOBYTE(v112) = 0;
        if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = (const char *)v2;
        else
          v35 = (const char *)v2->__r_.__value_.__r.__words[0];
        locale = (std::locale::__imp *)&v104[1];
        if (v105 < 0)
          locale = v104[1].__locale_;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s couldn't be read (line %d, col %d): %s", v35, LODWORD(v104[0].__locale_), HIDWORD(v104[0].__locale_), (const char *)locale);
      }
      else if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v102))
      {
        JsObject = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v102);
        if ((uint64_t **)JsObject != &v100)
          sub_20BF3E018(&v100, *(__int128 **)JsObject, (__int128 *)(JsObject + 8));
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_ReadPlugInfoObject";
        __p.__r_.__value_.__r.__words[2] = 201;
        v111 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfoObject(const std::string &, JsObject *)";
        LOBYTE(v112) = 0;
        if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = (const char *)v2;
        else
          v41 = (const char *)v2->__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s did not contain a JSON object", v41);
      }
      v42 = v103;
      if (v103)
      {
        p_shared_owners = (unint64_t *)&v103->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (SHIBYTE(v105) < 0)
        operator delete(v104[1].__locale_);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
      sub_20BDE5038((void ***)&__p);
      v19 = v96;
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
    }
    else if (sub_20BF3C2C8(3))
    {
      if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = v2;
      else
        v39 = (std::string *)v2->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Failed to open plugin info %s\n", v37, v38, v39);
    }
    *(_QWORD *)v119 = *v15;
    *(_QWORD *)&v119[*(_QWORD *)(*(_QWORD *)v119 - 24)] = v15[3];
    MEMORY[0x212B92AB4](&v119[16]);
    std::istream::~istream();
    MEMORY[0x212B92EB0](v129);
    if (v19)
    {
      if (sub_20BF3C2C8(3))
      {
        v47 = v2;
        if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
          v47 = (std::string *)v2->__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" Did read plugin info %s\n", v45, v46, v47);
      }
      v48 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF3CFEC();
      if ((*((_QWORD *)v48 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
        v49 = (uint64_t *)((*((_QWORD *)v48 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v49 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
      v50 = (_QWORD **)sub_20BDEEBA4((uint64_t)&v100, (const void **)v49);
      v51 = v50;
      if (v101 != v50)
      {
        v52 = (const char *)(v50 + 4);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v50 + 7)))
        {
          JsArray = (uint64_t *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v51 + 7);
          v56 = JsArray[1] - *JsArray;
          if (v56)
          {
            v57 = 0;
            v58 = 0;
            v97 = v56 >> 4;
            do
            {
              v59 = *JsArray;
              v60 = (std::string *)v2->__r_.__value_.__r.__words[0];
              if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v60 = v2;
              v61 = (_QWORD **)v51[4];
              if (*((char *)v51 + 55) >= 0)
                v61 = v51 + 4;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"file %s %s[%zd]", v53, v54, v60, v61, v58);
              pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::JsValue *)(v59 + v57), v2, (uint64_t)v104);
              if (LODWORD(__p.__r_.__value_.__l.__data_))
              {
                v62 = *(uint64_t **)a1;
                *(_QWORD *)v119 = a1;
                sub_20BF40520((uint64_t)&v119[8], (uint64_t)&__p);
                v63 = *v62;
                if (*v62)
                {
                  v64 = *(_QWORD *)(v63 + 256);
                  v109.__r_.__value_.__r.__words[0] = 0;
                  v109.__r_.__value_.__l.__size_ = v64;
                  v65 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v109, 0xB0uLL);
                  *((_BYTE *)v65 - 11) = 1;
                  *v65 = off_24C51D018;
                  v65[1] = *(_QWORD *)v119;
                  sub_20BF40520((uint64_t)(v65 + 2), (uint64_t)&v119[8]);
                  v65[21] = v63 + 264;
                  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v65 - 5))(*(v65 - 5), v65, (uint64_t)(v65 - 1));
                }
                else
                {
                  v66 = *(_QWORD *)(*(_QWORD *)v119 + 64);
                  if (!v66)
                    sub_20BE9E974();
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v66 + 48))(v66, &v119[8]);
                }
                v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
                sub_20BF3DFA8((void ***)&v109);
                if (v127 < 0)
                  operator delete(v126);
                v2 = v99;
                if (v125 < 0)
                  operator delete(v124[3]);
                sub_20BE78E5C((uint64_t)v124, v124[1]);
                if (v123 < 0)
                  operator delete(v122);
                if (v121 < 0)
                  operator delete(*(void **)&v119[16]);
              }
              *(_QWORD *)v119 = &v118;
              sub_20BF3DFA8((void ***)v119);
              if (v117 < 0)
                operator delete(v116);
              if (v115 < 0)
                operator delete(v114[3]);
              sub_20BE78E5C((uint64_t)v114, v114[1]);
              if (v113 < 0)
                operator delete(v112);
              if (SHIBYTE(v111) < 0)
                operator delete((void *)__p.__r_.__value_.__l.__size_);
              if (SBYTE7(v105) < 0)
                operator delete(v104[0].__locale_);
              ++v58;
              v57 += 16;
            }
            while (v97 != v58);
          }
        }
        else
        {
          *(_QWORD *)v119 = "plug/info.cpp";
          *(_QWORD *)&v119[8] = "_ReadPlugInfo";
          *(_QWORD *)&v119[16] = 249;
          *(_QWORD *)&v119[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfo(_ReadContex"
                                 "t *, std::string)";
          v120 = 0;
          v67 = (const char *)v2;
          if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
            v67 = (const char *)v2->__r_.__value_.__r.__words[0];
          if (*((char *)v51 + 55) < 0)
            v52 = *(const char **)v52;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v119, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s key '%s' doesn't hold an array", v67, v52);
        }
      }
      v68 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF3CFEC();
      if ((*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        v69 = (uint64_t *)((*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v69 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v68);
      v70 = (_QWORD **)sub_20BDEEBA4((uint64_t)&v100, (const void **)v69);
      v71 = v70;
      if (v101 != v70)
      {
        v72 = (const char *)(v70 + 4);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v70 + 7)))
        {
          v73 = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v71 + 7);
          v74 = v73[1] - *v73;
          if (v74)
          {
            v75 = 0;
            v76 = 0;
            v77 = v74 >> 4;
            do
            {
              if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(*v73 + v75)))
              {
                String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(*v73 + v75));
                sub_20BF3D778(v99, String, 1, &__p);
                v79 = *(uint64_t **)a1;
                *(_QWORD *)v119 = a1;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  sub_20BDDBFAC(&v119[8], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  *(std::string *)&v119[8] = __p;
                v82 = *v79;
                if (*v79)
                {
                  v83 = *(std::locale::__imp **)(v82 + 256);
                  v104[0].__locale_ = 0;
                  v104[1].__locale_ = v83;
                  v84 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v104, 0x30uLL);
                  *((_BYTE *)v84 - 11) = 1;
                  *v84 = &off_24C51D060;
                  v84[1] = *(_QWORD *)v119;
                  v85 = v84 + 2;
                  if ((v119[31] & 0x80000000) != 0)
                  {
                    sub_20BDDBFAC(v85, *(void **)&v119[8], *(unint64_t *)&v119[16]);
                  }
                  else
                  {
                    v86 = *(_OWORD *)&v119[8];
                    v84[4] = *(_QWORD *)&v119[24];
                    *(_OWORD *)v85 = v86;
                  }
                  v84[5] = v82 + 264;
                  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v84 - 5))(*(v84 - 5), v84, (uint64_t)(v84 - 1));
                }
                else
                {
                  sub_20BF3E968(*(_QWORD *)v119, &v119[8]);
                }
                if ((v119[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v119[8]);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              else
              {
                *(_QWORD *)v119 = "plug/info.cpp";
                *(_QWORD *)&v119[8] = "_ReadPlugInfo";
                *(_QWORD *)&v119[16] = 271;
                *(_QWORD *)&v119[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfo(_Read"
                                       "Context *, std::string)";
                v120 = 0;
                v80 = (const char *)v99;
                if (SHIBYTE(v99->__r_.__value_.__r.__words[2]) < 0)
                  v80 = (const char *)v99->__r_.__value_.__r.__words[0];
                v81 = (const char *)(v71 + 4);
                if (*((char *)v71 + 55) < 0)
                  v81 = *(const char **)v72;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v119, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s key '%s' index %zd doesn't hold a string", v80, v81, v76);
              }
              ++v76;
              v75 += 16;
            }
            while (v77 != v76);
          }
        }
        else
        {
          *(_QWORD *)v119 = "plug/info.cpp";
          *(_QWORD *)&v119[8] = "_ReadPlugInfo";
          *(_QWORD *)&v119[16] = 263;
          *(_QWORD *)&v119[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfo(_ReadContex"
                                 "t *, std::string)";
          v120 = 0;
          v87 = (const char *)v99;
          if (SHIBYTE(v99->__r_.__value_.__r.__words[2]) < 0)
            v87 = (const char *)v99->__r_.__value_.__r.__words[0];
          if (*((char *)v71 + 55) < 0)
            v72 = *(const char **)v72;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v119, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s key '%s' doesn't hold an array", v87, v72);
        }
      }
      v88 = v100;
      if (v100 != (uint64_t *)v101)
      {
        do
        {
          v89 = sub_20BF3CFEC();
          v90 = (const char *)(v88 + 4);
          if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v89 + 16), (unsigned __int8 *)v88 + 32) & 1) == 0)
          {
            v91 = sub_20BF3CFEC();
            if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v91 + 8), (unsigned __int8 *)v88 + 32) & 1) == 0)
            {
              *(_QWORD *)v119 = "plug/info.cpp";
              *(_QWORD *)&v119[8] = "_ReadPlugInfo";
              *(_QWORD *)&v119[16] = 293;
              *(_QWORD *)&v119[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfo(_ReadCo"
                                     "ntext *, std::string)";
              v120 = 0;
              v92 = (const char *)v99;
              if (SHIBYTE(v99->__r_.__value_.__r.__words[2]) < 0)
                v92 = (const char *)v99->__r_.__value_.__r.__words[0];
              if (*((char *)v88 + 55) < 0)
                v90 = *(const char **)v90;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v119, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s has unknown key %s", v92, v90);
            }
          }
          v93 = (uint64_t *)v88[1];
          if (v93)
          {
            do
            {
              v94 = v93;
              v93 = (uint64_t *)*v93;
            }
            while (v93);
          }
          else
          {
            do
            {
              v94 = (uint64_t *)v88[2];
              v95 = *v94 == (_QWORD)v88;
              v88 = v94;
            }
            while (!v95);
          }
          v88 = v94;
        }
        while (v94 != (uint64_t *)v101);
      }
    }
    sub_20BE78E5C((uint64_t)&v100, v101[0]);
  }
  else if (v9)
  {
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
      v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Ignore already read plugin info %s\n", v10, v11, v2);
  }
}

void sub_20BF3FFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,std::locale a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a23);
  if (a31 < 0)
    operator delete(__p);
  a42 = &a33;
  sub_20BDE5038((void ***)&a42);
  if (a41 < 0)
    operator delete(a36);
  sub_20BF401E0(&a61);
  sub_20BE78E5C((uint64_t)&a20, (_QWORD *)a21);
  _Unwind_Resume(a1);
}

void sub_20BF40170(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BF40B20(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20BF401E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x212B92AB4](a1 + 2);
  std::istream::~istream();
  MEMORY[0x212B92EB0](a1 + 53);
  return a1;
}

uint64_t sub_20BF40238(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 136);
  sub_20BF3DFA8(&v3);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  sub_20BE78E5C(a1 + 64, *(_QWORD **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20BF402BC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 128);
  sub_20BF3DFA8(&v3);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  sub_20BE78E5C(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20BF40340(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C51D018;
  v3 = (void **)(a1 + 144);
  sub_20BF3DFA8(&v3);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_20BE78E5C(a1 + 72, *(_QWORD **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20BF403D0(void **a1)
{
  void **v2;

  *a1 = off_24C51D018;
  v2 = a1 + 18;
  sub_20BF3DFA8(&v2);
  if (*((char *)a1 + 143) < 0)
    operator delete(a1[15]);
  if (*((char *)a1 + 119) < 0)
    operator delete(a1[12]);
  sub_20BE78E5C((uint64_t)(a1 + 9), a1[10]);
  if (*((char *)a1 + 71) < 0)
    operator delete(a1[6]);
  if (*((char *)a1 + 47) < 0)
    operator delete(a1[3]);
  operator delete(a1);
}

uint64_t sub_20BF40464(uint64_t a1)
{
  uint64_t v2;
  unint64_t *Instance;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
  if (!v2)
    sub_20BE9E974();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 16);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v4 = v7;
  v5 = atomic_load(Instance + 18);
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(_QWORD *)(a1 + 168));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_20BF4050C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF40520(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  sub_20BF1BE5C((uint64_t *)(a1 + 56), (const void ***)(a2 + 56));
  if (*(char *)(a2 + 103) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v6;
  }
  if (*(char *)(a2 + 127) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 104), *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v7;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BF406D4((_QWORD *)(a1 + 128), *(__int128 ***)(a2 + 128), *(__int128 ***)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
  return a1;
}

void sub_20BF4065C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v5);
  sub_20BE78E5C(v4, *(_QWORD **)(v2 + 64));
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF406D4(_QWORD *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDE4FA4(result, a4);
    result = (_QWORD *)sub_20BF40758((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BF40738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BF3DFA8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF40758(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4)
{
  uint64_t v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_20BE78B98((char *)v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20BF40814((uint64_t)v8);
  return v4;
}

void sub_20BF40800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF40814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF40814(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF40848(a1);
  return a1;
}

void sub_20BF40848(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    sub_20BDE5038(&v3);
  }
}

uint64_t sub_20BF40890(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C51D060;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20BF408CC(void **__p)
{
  *__p = &off_24C51D060;
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t sub_20BF40908(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20BF3E968(*(uint64_t ***)(a1 + 8), a1 + 16);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20BF40998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF409AC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C51D0A8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20BF409E8(void **__p)
{
  *__p = &off_24C51D0A8;
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t sub_20BF40A24(uint64_t a1)
{
  uint64_t v2;
  unint64_t *Instance;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 39) < 0)
    sub_20BDDBFAC(&__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    __p = *(std::string *)(a1 + 16);
  sub_20BF3F3B0(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v4 = v7;
  v5 = atomic_load(Instance + 18);
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(_QWORD *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_20BF40AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF40B20(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::locale *v6;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C51D0F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  sub_20BF40C30(&v6, 0);
  return a1;
}

void sub_20BF40B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF40C30((std::locale **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BF40BA0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF40BB4(uint64_t a1)
{
  sub_20BF40BFC(a1 + 24, *(std::locale **)(a1 + 24));
}

uint64_t sub_20BF40BBC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51D140))
    return a1 + 24;
  else
    return 0;
}

void sub_20BF40BFC(uint64_t a1, std::locale *a2)
{
  void *v3;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a2[5]);
    std::locale::~locale(a2);
    operator delete(v3);
  }
}

void sub_20BF40C30(std::locale **a1, std::locale *a2)
{
  std::locale *v2;
  void *v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v2[5]);
    std::locale::~locale(v2);
    operator delete(v3);
  }
}

uint64_t sub_20BF40C70(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C51D168;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20BF40CB0(void **a1)
{
  *a1 = off_24C51D168;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 5));
  if (*((char *)a1 + 39) < 0)
    operator delete(a1[2]);
  operator delete(a1);
}

uint64_t sub_20BF40CF0(uint64_t a1)
{
  uint64_t **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *Instance;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  _QWORD v13[2];

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
  v2 = *(uint64_t ***)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  v13[0] = *(_QWORD *)(a1 + 40);
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20BF40DFC(v2, (char *)(a1 + 16), (uint64_t)v13);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v9 = v12;
  v10 = atomic_load(Instance + 18);
  if (v9 < v10
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v12, *(_QWORD *)(a1 + 56));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
  return 0;
}

void sub_20BF40DD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20BF40DFC(uint64_t **a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void **v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  _BYTE *v21;
  __int128 v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  std::string::size_type v37;
  unint64_t v38;
  _BYTE *v39;
  __int128 v40;
  void *v41;
  void *v42[2];
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *__p[8];
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  std::string __dst[2];

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  pxrInternal__aapl__pxrReserved__::TfReadDir(a2, &v47, &v44, &v44, 0);
  v6 = v44;
  v7 = v45;
  if (v44 == v45)
  {
LABEL_13:
    v12 = v47;
    for (i = v48; v12 != i; v12 += 24)
    {
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)a2, v12, __dst);
      v14 = *a1;
      __p[0] = a1;
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        sub_20BDDBFAC(&__p[1], __dst[0].__r_.__value_.__l.__data_, __dst[0].__r_.__value_.__l.__size_);
      else
        *(std::string *)&__p[1] = __dst[0];
      v15 = *(unint64_t **)(a3 + 8);
      __p[4] = *(void **)a3;
      __p[5] = v15;
      if (v15)
      {
        v16 = v15 + 1;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *v14;
      if (*v14)
      {
        v19 = *(void **)(v18 + 256);
        v42[0] = 0;
        v42[1] = v19;
        v20 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v42, 0x40uLL);
        *(_BYTE *)(v20 - 11) = 1;
        *(_QWORD *)v20 = off_24C51D1F8;
        *(void **)(v20 + 8) = __p[0];
        v21 = (_BYTE *)(v20 + 16);
        if (SHIBYTE(__p[3]) < 0)
        {
          sub_20BDDBFAC(v21, __p[1], (unint64_t)__p[2]);
        }
        else
        {
          v22 = *(_OWORD *)&__p[1];
          *(void **)(v20 + 32) = __p[3];
          *(_OWORD *)v21 = v22;
        }
        *(void **)(v20 + 40) = __p[4];
        v29 = (char *)__p[5];
        *(void **)(v20 + 48) = __p[5];
        if (v29)
        {
          v30 = (unint64_t *)(v29 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        *(_QWORD *)(v20 + 56) = v18 + 264;
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      }
      else
      {
        v23 = __p[0];
        v24 = (std::__shared_weak_count *)__p[5];
        v42[0] = __p[4];
        v42[1] = __p[5];
        if (__p[5])
        {
          v25 = (unint64_t *)((char *)__p[5] + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        sub_20BF40DFC(v23, &__p[1], v42);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      v32 = (std::__shared_weak_count *)__p[5];
      if (__p[5])
      {
        v33 = (unint64_t *)((char *)__p[5] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (SHIBYTE(__p[3]) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)a2, v6, v42);
      v8 = *(void **)a3;
      v9 = (void *)HIBYTE(v43);
      if (SHIBYTE(v43) >= 0)
        v10 = v42;
      else
        v10 = (void **)v42[0];
      if (SHIBYTE(v43) < 0)
        v9 = v42[1];
      __p[6] = 0;
      __p[7] = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      memset(__p, 0, 41);
      v11 = sub_20BF41354((uint64_t)v10, (uint64_t)v9 + (_QWORD)v10, (uint64_t)__p, (uint64_t)v8, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v11)
        break;
      if (SHIBYTE(v43) < 0)
        operator delete(v42[0]);
      v6 += 24;
      if (v6 == v7)
        goto LABEL_13;
    }
    v35 = *a1;
    __p[0] = a1;
    if (SHIBYTE(v43) < 0)
    {
      sub_20BDDBFAC(&__p[1], v42[0], (unint64_t)v42[1]);
    }
    else
    {
      *(_OWORD *)&__p[1] = *(_OWORD *)v42;
      __p[3] = v43;
    }
    v36 = *v35;
    if (*v35)
    {
      v37 = *(_QWORD *)(v36 + 256);
      __dst[0].__r_.__value_.__r.__words[0] = 0;
      __dst[0].__r_.__value_.__l.__size_ = v37;
      v38 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)__dst, 0x30uLL);
      *(_BYTE *)(v38 - 11) = 1;
      *(_QWORD *)v38 = &off_24C51D1B0;
      *(void **)(v38 + 8) = __p[0];
      v39 = (_BYTE *)(v38 + 16);
      if (SHIBYTE(__p[3]) < 0)
      {
        sub_20BDDBFAC(v39, __p[1], (unint64_t)__p[2]);
      }
      else
      {
        v40 = *(_OWORD *)&__p[1];
        *(void **)(v38 + 32) = __p[3];
        *(_OWORD *)v39 = v40;
      }
      *(_QWORD *)(v38 + 40) = v36 + 264;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v38 - 40))(*(_QWORD *)(v38 - 40), v38, v38 - 8);
    }
    else
    {
      v41 = __p[0];
      if (SHIBYTE(__p[3]) < 0)
        sub_20BDDBFAC(__dst, __p[1], (unint64_t)__p[2]);
      else
        __dst[0] = *(std::string *)&__p[1];
      sub_20BF3F3B0((uint64_t)v41, __dst);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(v43) < 0)
      operator delete(v42[0]);
  }
  __p[0] = &v44;
  sub_20BDE5038((void ***)__p);
  __p[0] = &v47;
  sub_20BDE5038((void ***)__p);
}

void sub_20BF41260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  tbb::task *v28;
  uint64_t v29;

  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)(v29 - 128), v28);
  if (a28 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  a22 = &a16;
  sub_20BDE5038((void ***)&a22);
  a22 = &a19;
  sub_20BDE5038((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF41354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  void *__p[2];
  _BYTE v12[25];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v5 = a5;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  *(_OWORD *)__p = 0u;
  memset(v12, 0, sizeof(v12));
  v9 = sub_20BE95EF8(a4, a1, a2, (uint64_t)__p, a5 | 0x1040u);
  sub_20BE960D0(a3, a1, a2, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_20BF4142C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF41448(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C51D1B0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20BF41484(void **__p)
{
  *__p = &off_24C51D1B0;
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t sub_20BF414C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t *Instance;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 39) < 0)
    sub_20BDDBFAC(&__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    __p = *(std::string *)(a1 + 16);
  sub_20BF3F3B0(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v4 = v7;
  v5 = atomic_load(Instance + 18);
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(_QWORD *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_20BF41590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF415BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C51D1F8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20BF415FC(void **a1)
{
  *a1 = off_24C51D1F8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 5));
  if (*((char *)a1 + 39) < 0)
    operator delete(a1[2]);
  operator delete(a1);
}

uint64_t sub_20BF4163C(uint64_t a1)
{
  uint64_t **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *Instance;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  _QWORD v13[2];

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
  v2 = *(uint64_t ***)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  v13[0] = *(_QWORD *)(a1 + 40);
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20BF40DFC(v2, (char *)(a1 + 16), (uint64_t)v13);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v9 = v12;
  v10 = atomic_load(Instance + 18);
  if (v9 < v10
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v12, *(_QWORD *)(a1 + 56));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
  return 0;
}

void sub_20BF41724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF41748(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C51D240;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20BF41784(void **__p)
{
  *__p = &off_24C51D240;
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t sub_20BF417C0(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20BF3E968(*(uint64_t ***)(a1 + 8), a1 + 16);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20BF41850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::~_TestPlugBase(unsigned int **a1, const void *a2)
{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  void *v3;

  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v3);
}

char *pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::GetTypeName@<X0>(uint64_t a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  char *result;
  __int128 v7;
  uint64_t v8;

  v8 = a1;
  v5 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_20BF4193C((pxrInternal__aapl__pxrReserved__::TfType *)&v8, a2, a3);
  result = (char *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v5);
  if (result[23] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a4, *(void **)result, *((_QWORD *)result + 1));
  v7 = *(_OWORD *)result;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)a4 = v7;
  return result;
}

uint64_t sub_20BF4193C(pxrInternal__aapl__pxrReserved__::TfType *a1, const std::type_info *a2, char *a3)
{
  if (*(_QWORD *)a1)
    return pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(**(_QWORD **)a1 - 8), a2, a3);
  else
    return pxrInternal__aapl__pxrReserved__::TfType::GetUnknownType(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::New@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x18uLL);
  result[2] = 1;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &unk_24C51D288;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::_TestPlugBase(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24C51D288;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24C51D288;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::Manufacture(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t TypeByName;
  uint64_t v5;
  char *v6;
  void *v7;
  const char *v8;
  _QWORD v9[4];
  char v10;
  uint64_t v11;

  TypeByName = pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(a1);
  v11 = TypeByName;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v9);
  if (v9[0] == TypeByName)
  {
    v9[0] = "plug/testPlugBase.cpp";
    v9[1] = "Manufacture";
    v9[2] = 42;
    v9[3] = "static TfRefPtr<_TestPlugBase<N>> pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::Manufacture(const std:"
            ":string &) [M = 1]";
    v10 = 0;
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find TfType for %s", v8);
  }
  else
  {
    v7 = sub_20BF41A7C((pxrInternal__aapl__pxrReserved__::TfType *)&v11, v5, v6);
    if (v7)
    {
      (*(void (**)(void *))(*(_QWORD *)v7 + 16))(v7);
      return;
    }
  }
  *a2 = 0;
}

void *sub_20BF41A7C(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::~_TestPlugBase(unsigned int **a1, const void *a2)
{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  void *v3;

  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v3);
}

char *pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::GetTypeName@<X0>(uint64_t a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  char *result;
  __int128 v7;
  uint64_t v8;

  v8 = a1;
  v5 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_20BF4193C((pxrInternal__aapl__pxrReserved__::TfType *)&v8, a2, a3);
  result = (char *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v5);
  if (result[23] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a4, *(void **)result, *((_QWORD *)result + 1));
  v7 = *(_OWORD *)result;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)a4 = v7;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::New@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x18uLL);
  result[2] = 1;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &unk_24C51D2B0;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::_TestPlugBase(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24C51D2B0;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24C51D2B0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::Manufacture(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t TypeByName;
  uint64_t v5;
  char *v6;
  void *v7;
  const char *v8;
  _QWORD v9[4];
  char v10;
  uint64_t v11;

  TypeByName = pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(a1);
  v11 = TypeByName;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v9);
  if (v9[0] == TypeByName)
  {
    v9[0] = "plug/testPlugBase.cpp";
    v9[1] = "Manufacture";
    v9[2] = 42;
    v9[3] = "static TfRefPtr<_TestPlugBase<N>> pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::Manufacture(const std:"
            ":string &) [M = 2]";
    v10 = 0;
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find TfType for %s", v8);
  }
  else
  {
    v7 = sub_20BF41CD0((pxrInternal__aapl__pxrReserved__::TfType *)&v11, v5, v6);
    if (v7)
    {
      (*(void (**)(void *))(*(_QWORD *)v7 + 16))(v7);
      return;
    }
  }
  *a2 = 0;
}

void *sub_20BF41CD0(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::~_TestPlugBase(unsigned int **a1, const void *a2)
{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  void *v3;

  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v3);
}

char *pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::GetTypeName@<X0>(uint64_t a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  char *result;
  __int128 v7;
  uint64_t v8;

  v8 = a1;
  v5 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_20BF4193C((pxrInternal__aapl__pxrReserved__::TfType *)&v8, a2, a3);
  result = (char *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v5);
  if (result[23] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a4, *(void **)result, *((_QWORD *)result + 1));
  v7 = *(_OWORD *)result;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)a4 = v7;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::New@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x18uLL);
  result[2] = 1;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &unk_24C51D2D8;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::_TestPlugBase(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24C51D2D8;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24C51D2D8;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::Manufacture(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t TypeByName;
  uint64_t v5;
  char *v6;
  void *v7;
  const char *v8;
  _QWORD v9[4];
  char v10;
  uint64_t v11;

  TypeByName = pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(a1);
  v11 = TypeByName;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v9);
  if (v9[0] == TypeByName)
  {
    v9[0] = "plug/testPlugBase.cpp";
    v9[1] = "Manufacture";
    v9[2] = 42;
    v9[3] = "static TfRefPtr<_TestPlugBase<N>> pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::Manufacture(const std:"
            ":string &) [M = 3]";
    v10 = 0;
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find TfType for %s", v8);
  }
  else
  {
    v7 = sub_20BF41F24((pxrInternal__aapl__pxrReserved__::TfType *)&v11, v5, v6);
    if (v7)
    {
      (*(void (**)(void *))(*(_QWORD *)v7 + 16))(v7);
      return;
    }
  }
  *a2 = 0;
}

void *sub_20BF41F24(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::~_TestPlugBase(unsigned int **a1, const void *a2)
{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  void *v3;

  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v3);
}

char *pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::GetTypeName@<X0>(uint64_t a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  char *result;
  __int128 v7;
  uint64_t v8;

  v8 = a1;
  v5 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_20BF4193C((pxrInternal__aapl__pxrReserved__::TfType *)&v8, a2, a3);
  result = (char *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v5);
  if (result[23] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a4, *(void **)result, *((_QWORD *)result + 1));
  v7 = *(_OWORD *)result;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)a4 = v7;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::New@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x18uLL);
  result[2] = 1;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &unk_24C51D300;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::_TestPlugBase(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24C51D300;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24C51D300;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::Manufacture(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t TypeByName;
  uint64_t v5;
  char *v6;
  void *v7;
  const char *v8;
  _QWORD v9[4];
  char v10;
  uint64_t v11;

  TypeByName = pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(a1);
  v11 = TypeByName;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v9);
  if (v9[0] == TypeByName)
  {
    v9[0] = "plug/testPlugBase.cpp";
    v9[1] = "Manufacture";
    v9[2] = 42;
    v9[3] = "static TfRefPtr<_TestPlugBase<N>> pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::Manufacture(const std:"
            ":string &) [M = 4]";
    v10 = 0;
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find TfType for %s", v8);
  }
  else
  {
    v7 = sub_20BF42178((pxrInternal__aapl__pxrReserved__::TfType *)&v11, v5, v6);
    if (v7)
    {
      (*(void (**)(void *))(*(_QWORD *)v7 + 16))(v7);
      return;
    }
  }
  *a2 = 0;
}

void *sub_20BF42178(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

uint64_t sub_20BF421CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v0 = sub_20BF425C8();
  sub_20BF42200(v0);
  v1 = sub_20BF42724();
  sub_20BF42288(v1);
  v2 = sub_20BF42880();
  sub_20BF42310(v2);
  v3 = sub_20BF429DC();
  sub_20BF42398(v3);
  v4 = sub_20BF42420();
  return sub_20BF42540(v4);
}

uint64_t sub_20BF42200(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C51D408;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20BF42264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF42288(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C51D460;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20BF422EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF42310(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C51D4B8;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20BF42374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF42398(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C51D510;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20BF423FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF42420()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BF42B38((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D558, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51D558, (char *)0x18, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BF424F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF42540(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C51D580;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20BF425A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF425C8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF42684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20BF426CC(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

_DWORD *sub_20BF426E0@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x18uLL);
  result[2] = 1;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &unk_24C51D288;
  *a1 = result;
  return result;
}

uint64_t *sub_20BF42724()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF427E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20BF42828(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

_DWORD *sub_20BF4283C@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x18uLL);
  result[2] = 1;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &unk_24C51D2B0;
  *a1 = result;
  return result;
}

uint64_t *sub_20BF42880()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4293C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20BF42984(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

_DWORD *sub_20BF42998@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x18uLL);
  result[2] = 1;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &unk_24C51D2D8;
  *a1 = result;
  return result;
}

uint64_t *sub_20BF429DC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF42A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20BF42AE0(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

_DWORD *sub_20BF42AF4@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(0x18uLL);
  result[2] = 1;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &unk_24C51D300;
  *a1 = result;
  return result;
}

void sub_20BF42B38(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BF42BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF42BCC(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BF42BE0@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = operator new(0x18uLL);
  v2[2] = 1;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &unk_24C51D5C0;
  *a1 = v2;
  v4 = 0;
  return sub_20BF42C8C(&v4);
}

void sub_20BF42C38(unsigned int **a1, const void *a2)
{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_20BF42C60(unsigned int **a1, const void *a2)
{
  void *v3;

  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v3);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BF42C8C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t *sub_20BF42CB8()
{
  sub_20BF42E24();
  return sub_20BF42F44();
}

void pxrInternal__aapl__pxrReserved__::PlugNotice::Base::~Base(pxrInternal__aapl__pxrReserved__::PlugNotice::Base *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::DidRegisterPlugins(_QWORD *a1, _QWORD **a2)
{
  *a1 = off_24C51D5E8;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_20BF430F8(a1 + 1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_20BF42D30(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfNotice *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins(pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *this)
{
  void **v2;

  *(_QWORD *)this = off_24C51D5E8;
  v2 = (void **)((char *)this + 8);
  sub_20BEB4844(&v2);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void **v2;

  *(_QWORD *)this = off_24C51D5E8;
  v2 = (void **)((char *)this + 8);
  sub_20BEB4844(&v2);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_24C51D5E8;
  v3 = (void **)((char *)this + 8);
  sub_20BEB4844(&v3);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v2);
}

uint64_t *sub_20BF42E24()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BEB9D48((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BF42EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF42F44()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BF43068((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BF43018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20BF43068(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BF430D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF430F8(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE90F0C(result, a4);
    result = sub_20BF4317C((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BF4315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BEB4844(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF4317C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v12 = a4;
  v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      *v4 = *a2;
      v5 = a2[1];
      v4[1] = v5;
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      a2 += 2;
      v4 += 2;
    }
    while (a2 != a3);
    v12 = v4;
  }
  v10 = 1;
  sub_20BF43210((uint64_t)v9);
  return v4;
}

uint64_t sub_20BF43210(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF43244((_QWORD **)a1);
  return a1;
}

_QWORD **sub_20BF43244(_QWORD **result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *result[2];
  v2 = *result[1];
  while (v1 != v2)
  {
    result = *(_QWORD ***)(v1 - 8);
    if (result)
    {
      v3 = (unsigned int *)(result + 1);
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[1])(result);
    }
    v1 -= 16;
  }
  return result;
}

void sub_20BF432A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)atomic_load(&qword_254985378);
  if (!v4)
    v4 = sub_20BF46264(&qword_254985378);
  sub_20BF432F8(a1, 0, (__int128 *)(a1 + 80), v4, a2);
}

void sub_20BF432F8(uint64_t a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t (*v17)(uint64_t *);
  char v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unint64_t *v31;
  const char *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned __int8 *v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  __int128 v58;
  uint64_t v59;
  const char *v60;
  char v61;
  __int128 *v62;

  v10 = (char *)atomic_load(&qword_254985390);
  if (!v10)
    v10 = sub_20BF4742C(&qword_254985390);
  std::mutex::lock((std::mutex *)v10);
  v11 = (uint64_t *)atomic_load(&qword_2549853A0);
  if (!v11)
    v11 = (uint64_t *)sub_20BF475CC(&qword_2549853A0);
  *(_QWORD *)&v58 = a1 + 32;
  v12 = sub_20BF46390(v11, (unsigned __int8 *)(a1 + 32), (uint64_t)&unk_20CAC184C, (__int128 **)&v58);
  v13 = v12;
  if (!v14)
  {
    v31 = *(unint64_t **)(v12 + 32);
    if (!v31)
    {
      *(_QWORD *)&v58 = "plug/plugin.cpp";
      *((_QWORD *)&v58 + 1) = "_NewPlugin";
      v59 = 106;
      v60 = "static pair<PlugPluginPtr, BOOL> pxrInternal__aapl__pxrReserved__::PlugPlugin::_NewPlugin(const Plug_Registr"
            "ationMetadata &, _Type, const std::string &, PluginMap *) [PluginMap = pxrInternal__aapl__pxrReserved__::TfH"
            "ashMap<std::string, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin"
            ">, pxrInternal__aapl__pxrReserved__::TfHash>]";
      v61 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v58, "it->second", 0);
      v31 = *(unint64_t **)(v13 + 32);
    }
    sub_20BF47694((unint64_t **)&v58, v31);
    *(_OWORD *)a5 = v58;
    goto LABEL_33;
  }
  v15 = sub_20BEC301C(a4, (unsigned __int8 *)(a1 + 8));
  v16 = v15;
  if (v15)
  {
    v17 = sub_20BF46110((_QWORD *)v15 + 5);
    if (!(v18 & 1 | (unint64_t)v17))
    {
      *(_QWORD *)&v58 = "plug/plugin.cpp";
      *((_QWORD *)&v58 + 1) = "_NewPlugin";
      v59 = 114;
      v60 = "static pair<PlugPluginPtr, BOOL> pxrInternal__aapl__pxrReserved__::PlugPlugin::_NewPlugin(const Plug_Registr"
            "ationMetadata &, _Type, const std::string &, PluginMap *) [PluginMap = pxrInternal__aapl__pxrReserved__::TfH"
            "ashMap<std::string, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin"
            ">, pxrInternal__aapl__pxrReserved__::TfHash>]";
      v61 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v58, "it->second", 0);
    }
    if (sub_20BF3C2C8(1))
    {
      v19 = "<invalid enum value>";
      if (a2 == 2)
        v19 = "resource";
      if (a2)
        v20 = v19;
      else
        v20 = "shared library";
      if (*(char *)(a1 + 31) >= 0)
        v21 = a1 + 8;
      else
        v21 = *(_QWORD *)(a1 + 8);
      v22 = sub_20BF444D8((uint64_t *)v16 + 5);
      v25 = (_QWORD *)(v22 + 32);
      if (*(char *)(v22 + 55) < 0)
        v25 = (_QWORD *)*v25;
      if (*((char *)a3 + 23) >= 0)
        v26 = (uint64_t *)a3;
      else
        v26 = *(uint64_t **)a3;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Already registered %s plugin '%s' at %s - not registering '%s'.\n\n", v23, v24, v20, v21, v25, v26);
    }
    v27 = atomic_load(&qword_2549853A0);
    if (!v27)
      v27 = sub_20BF475CC(&qword_2549853A0);
    sub_20BF46DA4(v27, v13);
    v28 = *((_QWORD *)v16 + 6);
    *(_QWORD *)a5 = *((_QWORD *)v16 + 5);
    *(_QWORD *)(a5 + 8) = v28;
    if (v28)
    {
      v29 = (unsigned int *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
LABEL_33:
    *(_BYTE *)(a5 + 16) = 0;
    goto LABEL_34;
  }
  if (sub_20BF3C2C8(1))
  {
    v34 = "<invalid enum value>";
    if (a2 == 2)
      v34 = "resource";
    if (!a2)
      v34 = "shared library";
    if (*(char *)(a1 + 31) >= 0)
      v35 = a1 + 8;
    else
      v35 = *(_QWORD *)(a1 + 8);
    if (*((char *)a3 + 23) >= 0)
      v36 = (uint64_t *)a3;
    else
      v36 = *(uint64_t **)a3;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Registering %s plugin '%s' at '%s'.\n\n", v32, v33, v34, v35, v36);
  }
  v37 = (unint64_t *)operator new(0x78uLL);
  sub_20BF4380C((uint64_t)v37, a3, (__int128 *)(a1 + 8), (__int128 *)(a1 + 104), (const void ***)(a1 + 56), a2);
  if (sub_20BF3C2C8(1))
  {
    v38 = *(unsigned __int8 *)(a1 + 55);
    if ((v38 & 0x80u) != 0)
      v38 = *(_QWORD *)(a1 + 40);
    if (v38 && (pxrInternal__aapl__pxrReserved__::TfIsFile((const char *)a3, 1) & 1) == 0 && sub_20BF3C2C8(1))
    {
      if (*(char *)(a1 + 31) >= 0)
        v41 = a1 + 8;
      else
        v41 = *(_QWORD *)(a1 + 8);
      if (*((char *)a3 + 23) >= 0)
        v42 = (uint64_t *)a3;
      else
        v42 = *(uint64_t **)a3;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Unable to read library plugin '%s' at '%s'.\n\n", v39, v40, v41, v42);
    }
  }
  sub_20BF47694((unint64_t **)&v58, v37);
  sub_20BF46F18((pxrInternal__aapl__pxrReserved__::PlugPlugin **)(v13 + 32), (pxrInternal__aapl__pxrReserved__::PlugPlugin *)v37);
  v62 = (__int128 *)(a1 + 8);
  v43 = sub_20BF46F44((uint64_t)a4, (unsigned __int8 *)(a1 + 8), (uint64_t)&unk_20CAC184C, &v62);
  v44 = (unsigned int *)*((_QWORD *)v43 + 6);
  v45 = *((_QWORD *)&v58 + 1);
  *((_QWORD *)v43 + 5) = v58;
  *((_QWORD *)v43 + 6) = v45;
  if (v45)
  {
    v46 = (unsigned int *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  if (v44)
  {
    v48 = v44 + 2;
    do
    {
      v49 = __ldxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
      (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
  }
  v51 = *((_QWORD *)&v58 + 1);
  *(_QWORD *)a5 = v58;
  *(_QWORD *)(a5 + 8) = v51;
  if (v51)
  {
    v52 = (unsigned int *)(v51 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    v54 = (unsigned int *)*((_QWORD *)&v58 + 1);
    *(_BYTE *)(a5 + 16) = 1;
    if (v54)
    {
      v55 = v54 + 2;
      do
      {
        v56 = __ldxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
        (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 16) = 1;
  }
LABEL_34:
  std::mutex::unlock((std::mutex *)v10);
}

void sub_20BF4374C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::mutex *v14;

  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20BF437B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)atomic_load(&qword_254985380);
  if (!v4)
    v4 = sub_20BF46264(&qword_254985380);
  sub_20BF432F8(a1, 2, (__int128 *)(a1 + 32), v4, a2);
}

uint64_t sub_20BF4380C(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, const void ***a5, int a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 8), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v11;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 32), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v12;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 56), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v13 = *a4;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v13;
  }
  sub_20BF1BE5C((uint64_t *)(a1 + 80), a5);
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = a6 == 2;
  *(_DWORD *)(a1 + 116) = a6;
  return a1;
}

void sub_20BF438FC(_Unwind_Exception *a1, const void *a2)
{
  uint64_t v2;
  void **v3;
  void **v4;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  sub_20BEBCE60((unsigned int **)v2, a2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugPlugin::~PlugPlugin(pxrInternal__aapl__pxrReserved__::PlugPlugin *this)
{
  const void *v2;

  sub_20BE78E5C((uint64_t)this + 80, *((_QWORD **)this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  sub_20BEBCE60((unsigned int **)this, v2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return sub_20BF1BE5C(a2, this + 10);
}

void pxrInternal__aapl__pxrReserved__::PlugPlugin::GetDependencies(pxrInternal__aapl__pxrReserved__::PlugPlugin *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  unint64_t **v5;
  const void ***JsObject;
  void *__p[2];
  char v8;

  v4 = (char *)this + 80;
  sub_20BDDC0E4(__p, "PluginDependencies");
  v5 = (unint64_t **)sub_20BDEEBA4((uint64_t)v4, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((unint64_t **)((char *)this + 88) == v5
    || !pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v5 + 7)))
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
  else
  {
    JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v5 + 7);
    sub_20BF1BE5C(a2, JsObject);
  }
}

void sub_20BF43A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20BF43A88(uint64_t a1, const char *a2, char *a3)
{
  std::string *v4;
  std::string::size_type v5;
  const char *v6;
  char *v7;
  std::string *v8;
  const char *v9;
  char *v10;
  std::string *v11;
  _BOOL8 v12;
  const char *v13;
  char *v14;
  void *v15;
  const char *v16;
  const char *v19;
  char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  char v30;
  std::string v31;
  uint64_t v32;
  int v33;

  v4 = (std::string *)(a1 + 8);
  v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    v5 = v4->__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Load %s", a2, a3, v5);
  sub_20BF472E8((uint64_t)&v32, "PlugPlugin::_Load", (char *)__p);
  if (v30 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(v4, &v31);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v31;
  else
    v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Loading plugin '%s'", v6, v7, v8);
  v21 = "plug/plugin.cpp";
  v22 = "_Load";
  v23 = 228;
  v24 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_Load()";
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(__p, &v26, &v21);
  if (SHIBYTE(v28) < 0)
    operator delete(v26);
  if (sub_20BF3C2C8(0))
  {
    v11 = v4;
    if (*(char *)(a1 + 31) < 0)
      v11 = (std::string *)v4->__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Loading plugin '%s'.\n", v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 116) == 2)
    goto LABEL_15;
  v13 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v14 = *(char **)v13;
      goto LABEL_21;
    }
LABEL_38:
    if (sub_20BF3C2C8(0))
    {
      if (*(char *)(a1 + 31) < 0)
        v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"No path to library for '%s'.\n", v19, v20, v4);
    }
LABEL_15:
    v12 = 1;
    goto LABEL_33;
  }
  if (!*(_BYTE *)(a1 + 55))
    goto LABEL_38;
  v26 = 0;
  v27 = 0;
  v14 = (char *)(a1 + 32);
  v28 = 0;
LABEL_21:
  sub_20BDDC0E4(&v21, v14);
  v15 = pxrInternal__aapl__pxrReserved__::TfDlopen((char *)&v21, 2, &v26);
  *(_QWORD *)(a1 + 104) = v15;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v21);
    v15 = *(void **)(a1 + 104);
  }
  v12 = v15 != 0;
  if (!v15)
  {
    v21 = "plug/plugin.cpp";
    v22 = "_Load";
    v23 = 261;
    v24 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_Load()";
    v25 = 0;
    if (*(char *)(a1 + 31) < 0)
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    v16 = (const char *)&v26;
    if (v28 < 0)
      v16 = (const char *)v26;
    if (*(char *)(a1 + 55) < 0)
      v13 = *(const char **)v13;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin '%s': %s in '%s'", (const char *)v4, v16, v13);
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v26);
LABEL_33:
  atomic_store(v12, (unsigned __int8 *)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  while (v33--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v32);
  return v12;
}

void sub_20BF43D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;

  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a26);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  sub_20BEB24F4(v26 - 80);
  _Unwind_Resume(a1);
}

void sub_20BF43DA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  JUMPOUT(0x20BF43DA0);
}

BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::IsResource(pxrInternal__aapl__pxrReserved__::PlugPlugin *this)
{
  return *((_DWORD *)this + 29) == 2;
}

uint64_t sub_20BF43DD4(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v2;
  char *v5;
  _BOOL8 v6;
  const char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::JsValue *v16;
  unint64_t JsArray;
  uint64_t v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__::JsValue *v20;
  pxrInternal__aapl__pxrReserved__::JsValue *v21;
  _QWORD *v22;
  pxrInternal__aapl__pxrReserved__::JsValue **v23;
  uint64_t v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::JsValue *v26;
  pxrInternal__aapl__pxrReserved__::JsValue *v27;
  uint64_t v28;
  unint64_t String;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(uint64_t *);
  char v37;
  uint64_t v38;
  int v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  const char *v46;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 i;
  _OWORD v53[2];
  void *__p[2];
  uint64_t v55;
  uint64_t v56;
  _QWORD **v57;
  uint64_t v58;
  _QWORD *v59;
  __int128 __dst;
  uint64_t v61;
  const char *v62;
  char v63;

  v2 = atomic_load((unsigned __int8 *)(a1 + 112));
  if ((v2 & 1) != 0)
    return 1;
  v5 = (char *)(a1 + 8);
  if (sub_20BEB4DB8(a2, (unsigned __int8 *)(a1 + 8)))
  {
    *(_QWORD *)&__dst = "plug/plugin.cpp";
    *((_QWORD *)&__dst + 1) = "_LoadWithDependents";
    v61 = 284;
    v62 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
    v63 = 0;
    if (*(char *)(a1 + 31) < 0)
      v5 = *(char **)v5;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed because of cyclic dependency for '%s'", v5);
    return 0;
  }
  sub_20BEB4F9C((uint64_t)a2, (unsigned __int8 *)v5, (uint64_t)v5);
  pxrInternal__aapl__pxrReserved__::PlugPlugin::GetDependencies((pxrInternal__aapl__pxrReserved__::PlugPlugin *)a1, &v58);
  v56 = v58;
  v57 = &v59;
LABEL_8:
  if ((_QWORD **)v56 != v57)
  {
    v9 = sub_20BF44300(&v56, (uint64_t)v7, v8);
    v12 = *v9;
    if (*(char *)(*v9 + 55) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)(v12 + 32), *(_QWORD *)(v12 + 40));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v12 + 32);
      v55 = *(_QWORD *)(v12 + 48);
    }
    v13 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::FindByName((uint64_t)__p, v10, v11);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__dst);
    if ((_QWORD)__dst == v13)
    {
      *(_QWORD *)&__dst = "plug/plugin.cpp";
      *((_QWORD *)&__dst + 1) = "_LoadWithDependents";
      v61 = 298;
      v62 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
      v63 = 0;
      v48 = __p;
      if (v55 < 0)
        v48 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: unknown base class '%s'", (const char *)v48);
      goto LABEL_57;
    }
    v16 = (pxrInternal__aapl__pxrReserved__::JsValue *)(*sub_20BF44300(&v56, v14, v15) + 56);
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray(v16))
    {
LABEL_56:
      *(_QWORD *)&__dst = "plug/plugin.cpp";
      *((_QWORD *)&__dst + 1) = "_LoadWithDependents";
      v61 = 305;
      v62 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
      v63 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: dependency list has wrong type");
LABEL_57:
      if (SHIBYTE(v55) < 0)
        operator delete(__p[0]);
LABEL_59:
      v6 = 0;
      goto LABEL_60;
    }
    JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v16);
    v21 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
    v20 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
    while (v21 != v20)
    {
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v21))
        goto LABEL_56;
      v21 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v21 + 16);
    }
    v22 = sub_20BF44300(&v56, v18, v19);
    v23 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)(*v22 + 56));
    sub_20BDE4F04(v53, (v23[1] - *v23) >> 4);
    v27 = *v23;
    v26 = v23[1];
    if (*v23 != v26)
    {
      v28 = *(_QWORD *)&v53[0];
      do
      {
        String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v27);
        if (*(char *)(String + 23) < 0)
        {
          sub_20BDDBFAC(&__dst, *(void **)String, *(_QWORD *)(String + 8));
        }
        else
        {
          v30 = *(_OWORD *)String;
          v61 = *(_QWORD *)(String + 16);
          __dst = v30;
        }
        if (*(char *)(v28 + 23) < 0)
          operator delete(*(void **)v28);
        v31 = __dst;
        *(_QWORD *)(v28 + 16) = v61;
        *(_OWORD *)v28 = v31;
        v28 += 24;
        v27 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v27 + 16);
      }
      while (v27 != v26);
    }
    for (i = v53[0]; ; sub_20BF4457C(&i))
    {
      v32 = i;
      if ((_QWORD)i == *((_QWORD *)&i + 1))
      {
LABEL_52:
        *(_QWORD *)&__dst = v53;
        sub_20BDE5038((void ***)&__dst);
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
        if ((_QWORD)v32 != *((_QWORD *)&v32 + 1))
          goto LABEL_59;
        sub_20BF445F8(&v56);
        goto LABEL_8;
      }
      v33 = sub_20BF44378((uint64_t *)&i, v24, v25);
      v51 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::FindByName(v33, v34, v35);
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v49);
      if (v51 == v49)
      {
        *(_QWORD *)&__dst = "plug/plugin.cpp";
        *((_QWORD *)&__dst + 1) = "_LoadWithDependents";
        v61 = 317;
        v62 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
        v63 = 0;
        if (*(char *)(v33 + 23) >= 0)
          v46 = (const char *)v33;
        else
          v46 = *(const char **)v33;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: unknown dependent class '%s'", v46);
        goto LABEL_52;
      }
      sub_20BF443F4(&v51, &v49);
      v36 = sub_20BF46110(&v49);
      if (!(v37 & 1 | (unint64_t)v36))
        break;
      v38 = sub_20BF444D8(&v49);
      if ((sub_20BF43DD4(v38, a2) & 1) == 0)
      {
        *(_QWORD *)&__dst = "plug/plugin.cpp";
        *((_QWORD *)&__dst + 1) = "_LoadWithDependents";
        v61 = 329;
        v62 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
        v63 = 0;
        if (*(char *)(v33 + 23) >= 0)
          v41 = (const char *)v33;
        else
          v41 = *(const char **)v33;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: unable to load dependent plugin '%s'", v41);
LABEL_40:
        v39 = 0;
        goto LABEL_41;
      }
      v39 = 1;
LABEL_41:
      v42 = v50;
      if (v50)
      {
        v43 = (unsigned int *)(v50 + 8);
        do
        {
          v44 = __ldxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
      if (!v39)
        goto LABEL_52;
    }
    *(_QWORD *)&__dst = "plug/plugin.cpp";
    *((_QWORD *)&__dst + 1) = "_LoadWithDependents";
    v61 = 324;
    v62 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
    v63 = 0;
    if (*(char *)(v33 + 23) >= 0)
      v40 = (const char *)v33;
    else
      v40 = *(const char **)v33;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: unknown dependent plugin '%s'", v40);
    goto LABEL_40;
  }
  v6 = sub_20BF43A88(a1, v7, v8);
LABEL_60:
  sub_20BE78E5C((uint64_t)&v58, v59);
  return v6;
}

void sub_20BF44240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,uint64_t a30)
{
  if (a24 < 0)
    operator delete(__p);
  sub_20BE78E5C((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF44300(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<std::string, pxrInternal__aapl__pxrReserved_"
            "_::JsValue>>::operator->() [T = std::map<std::string, pxrInternal__aapl__pxrReserved__::JsValue>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BF44378(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::string>>::operator*() [T = con"
            "st std::vector<std::string>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BF443EC()
{
  JUMPOUT(0x20BF4439CLL);
}

void sub_20BF443F4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  sub_20BF4881C();
  v4 = (char *)atomic_load(&qword_2549853A8);
  if (!v4)
    v4 = sub_20BF4742C(&qword_2549853A8);
  std::mutex::lock((std::mutex *)v4);
  v5 = (_QWORD *)atomic_load(&qword_2549853B0);
  if (!v5)
    v5 = sub_20BF4774C(&qword_2549853B0);
  v6 = sub_20BEB4074(v5, a1);
  if (!atomic_load(&qword_2549853B0))
    sub_20BF4774C(&qword_2549853B0);
  if (v6)
  {
    v8 = v6[4];
    *a2 = v6[3];
    a2[1] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  std::mutex::unlock((std::mutex *)v4);
}

void sub_20BF444C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF444D8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::PlugPlugin>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReserved"
            "__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::PlugPlugin]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAA28B0 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

_QWORD *sub_20BF4457C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::string>>::operat"
            "or++() [T = const std::vector<std::string>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

_QWORD *sub_20BF445F8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<std::string, pxrInternal__aapl"
            "__pxrReserved__::JsValue>>::operator++() [T = std::map<std::string, pxrInternal__aapl__pxrReserved__::JsValu"
            "e>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(pxrInternal__aapl__pxrReserved__::PlugPlugin *this)
{
  std::recursive_mutex *v2;
  pxrInternal__aapl__pxrReserved__ *v3;
  unsigned __int8 v4;
  _BOOL4 v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  _QWORD *v9;
  _OWORD v11[2];
  int v12;

  v2 = (std::recursive_mutex *)atomic_load(&qword_254985388);
  if (!v2)
    v2 = sub_20BF473A4(&qword_254985388);
  std::recursive_mutex::lock(v2);
  v4 = atomic_load((unsigned __int8 *)this + 112);
  v5 = (v4 & 1) == 0 && !pxrInternal__aapl__pxrReserved__::ArchIsMainThread(v3);
  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  v6 = sub_20BF43DD4((uint64_t)this, v11);
  sub_20BEB3F28((uint64_t)v11);
  std::recursive_mutex::unlock(v2);
  if (v5 && sub_20BF3C2C8(2))
  {
    v9 = (_QWORD *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      v9 = (_QWORD *)*v9;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Loaded plugin '%s' in a secondary thread.\n", v7, v8, v9);
  }
  return v6;
}

void sub_20BF44774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::recursive_mutex *v11;

  std::recursive_mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugPlugin::IsLoaded(pxrInternal__aapl__pxrReserved__::PlugPlugin *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 112);
  return v1 & 1;
}

double pxrInternal__aapl__pxrReserved__::PlugPlugin::MakeResourcePath@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  _BYTE *v7;
  __int128 v9;
  uint64_t v10;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(_QWORD *)(a3 + 8))
      return *(double *)&v6;
    v7 = *(_BYTE **)a3;
  }
  else
  {
    v7 = (_BYTE *)a3;
    if (!*(_BYTE *)(a3 + 23))
      return *(double *)&v6;
  }
  if (*v7 != 47)
  {
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)(a1 + 56), a2, &v9);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_QWORD *)&v6 = v9;
    *(_OWORD *)a3 = v9;
    *(_QWORD *)(a3 + 16) = v10;
  }
  return *(double *)&v6;
}

void sub_20BF44860(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PlugPlugin::FindPluginResource(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PlugPlugin::MakeResourcePath(a1, a2, a4);
  if (a3 && !pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)a4, 0))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
}

void sub_20BF448D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BF448F0(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  sub_20BF4881C();
  v4 = (char *)atomic_load(&qword_254985390);
  if (!v4)
    v4 = sub_20BF4742C(&qword_254985390);
  std::mutex::lock((std::mutex *)v4);
  v5 = (_QWORD *)atomic_load(&qword_254985378);
  if (!v5)
    v5 = sub_20BF46264(&qword_254985378);
  v6 = sub_20BEC301C(v5, a1);
  if (!atomic_load(&qword_254985378))
    sub_20BF46264(&qword_254985378);
  if (v6)
  {
    v8 = *((_QWORD *)v6 + 6);
    *a2 = *((_QWORD *)v6 + 5);
    a2[1] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v11 = (_QWORD *)atomic_load(&qword_254985398);
    if (!v11)
      v11 = sub_20BF46264(&qword_254985398);
    v12 = sub_20BEC301C(v11, a1);
    if (!atomic_load(&qword_254985398))
      sub_20BF46264(&qword_254985398);
    if (v12)
    {
      v14 = *((_QWORD *)v12 + 6);
      *a2 = *((_QWORD *)v12 + 5);
      a2[1] = v14;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
    }
    else
    {
      v17 = (_QWORD *)atomic_load(&qword_254985380);
      if (!v17)
        v17 = sub_20BF46264(&qword_254985380);
      v18 = sub_20BEC301C(v17, a1);
      if (!atomic_load(&qword_254985380))
        sub_20BF46264(&qword_254985380);
      if (v18)
      {
        v20 = *((_QWORD *)v18 + 6);
        *a2 = *((_QWORD *)v18 + 5);
        a2[1] = v20;
        if (v20)
        {
          v21 = (unsigned int *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
      }
    }
  }
  std::mutex::unlock((std::mutex *)v4);
}

void sub_20BF44A9C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins(uint64_t *a1@<X8>)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];

  sub_20BF4881C();
  v3 = (char *)atomic_load(&qword_254985390);
  if (!v3)
    v3 = sub_20BF4742C(&qword_254985390);
  std::mutex::lock((std::mutex *)v3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = atomic_load(&qword_2549853A0);
  if (!v4)
    v4 = sub_20BF475CC(&qword_2549853A0);
  sub_20BF44D38(a1, *(_QWORD *)(v4 + 48));
  v7 = atomic_load(&qword_2549853A0);
  if (!v7)
    v7 = sub_20BF475CC(&qword_2549853A0);
  v9 = *(_QWORD *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  v10 = 0;
  if (v8)
  {
    v11 = (__int16 *)(v9 + 4);
    while (1)
    {
      v12 = *v11;
      v11 += 20;
      if (v12 != -1)
        break;
      if (v8 == ++v10)
      {
        v10 = *(_QWORD *)(v7 + 40);
        break;
      }
    }
  }
  v29 = v9 + 40 * v10;
  v30 = v9 + 40 * v8;
  while (v29 != v30)
  {
    v13 = sub_20BF44DC8(&v29, v5, v6);
    sub_20BF47694((unint64_t **)&v28, *(unint64_t **)(*v13 + 32));
    v15 = (_OWORD *)a1[1];
    v14 = a1[2];
    if ((unint64_t)v15 >= v14)
    {
      v16 = ((uint64_t)v15 - *a1) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        sub_20BDDF694();
      v18 = v14 - *a1;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      v31[4] = a1 + 2;
      v20 = (char *)sub_20BDEA2F0((uint64_t)(a1 + 2), v19);
      v21 = &v20[16 * v16];
      v31[0] = v20;
      v31[1] = v21;
      v31[3] = &v20[16 * v22];
      *(_OWORD *)v21 = v28;
      v28 = 0uLL;
      v31[2] = v21 + 16;
      sub_20BF47494(a1, v31);
      v23 = a1[1];
      sub_20BEB5F68((unsigned int *)v31);
      v24 = (unsigned int *)*((_QWORD *)&v28 + 1);
      a1[1] = v23;
      if (v24)
      {
        v25 = v24 + 2;
        do
        {
          v26 = __ldxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
          (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
      }
    }
    else
    {
      *v15 = v28;
      a1[1] = (uint64_t)(v15 + 1);
    }
    sub_20BF44E40(&v29);
  }
  std::mutex::unlock((std::mutex *)v3);
}

void sub_20BF44CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  va_list va;

  va_start(va, a4);
  sub_20BEB4844((void ***)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BF44D38(uint64_t *a1, unint64_t a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (unsigned int *)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDEA2F0((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_20BF47494(a1, v7);
    return sub_20BEB5F68((unsigned int *)v7);
  }
  return result;
}

void sub_20BF44DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB5F68((unsigned int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF44DC8(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<"
            "std::string, std::unique_ptr<pxrInternal__aapl__pxrReserved__::PlugPlugin>, pxrInternal__aapl__pxrReserved__"
            "::TfHash>>::operator->() [T = pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<std::string, std::unique_"
            "ptr<pxrInternal__aapl__pxrReserved__::PlugPlugin>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t *sub_20BF44E40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  char v6;

  if (*a1 == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator++";
    v5[2] = 250;
    v5[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::pxr_t"
            "sl::robin_map<std::string, std::unique_ptr<pxrInternal__aapl__pxrReserved__::PlugPlugin>, pxrInternal__aapl_"
            "_pxrReserved__::TfHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<std::string"
            ", std::unique_ptr<pxrInternal__aapl__pxrReserved__::PlugPlugin>, pxrInternal__aapl__pxrReserved__::TfHash>, "
            "Reverse = false]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v2 = *a1 + 40;
    do
    {
      v3 = v2;
      if (*(_BYTE *)(v2 - 34))
        break;
      v2 += 40;
    }
    while (*(__int16 *)(v3 + 4) == -1);
    *a1 = v3;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(pxrInternal__aapl__pxrReserved__::PlugPlugin *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfType *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t JsObject;
  const void **TypeName;
  uint64_t v8;
  const void ***v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;

  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v18);
  sub_20BF4783C((uint64_t)this + 80, "Types", &v18);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v18))
  {
    JsObject = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v18);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v16);
    TypeName = (const void **)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
    v8 = sub_20BDEEBA4(JsObject, TypeName);
    if (JsObject + 8 != v8)
      sub_20BDE881C(&v16, (uint64_t *)(v8 + 56));
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v16))
    {
      v9 = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v16);
      sub_20BF1BE5C(a3, v9);
    }
    else
    {
      a3[2] = 0;
      a3[1] = 0;
      *a3 = (uint64_t)(a3 + 1);
    }
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    a3[2] = 0;
    a3[1] = 0;
    *a3 = (uint64_t)(a3 + 1);
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20BF4502C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugPlugin::DeclaresType(pxrInternal__aapl__pxrReserved__::PlugPlugin *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, int a3)
{
  uint64_t result;
  unint64_t **v6;
  _QWORD *JsObject;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  result = sub_20BF45120((uint64_t)this + 80, "Types");
  if (result)
  {
    v6 = (unint64_t **)result;
    result = pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)result);
    if ((_DWORD)result)
    {
      JsObject = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v6);
      v16 = (_QWORD *)*JsObject;
      v17 = JsObject + 1;
      if (v16 == JsObject + 1)
        return 0;
      while (1)
      {
        v10 = sub_20BF45198(&v16, v8, v9);
        v14 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::FindByName(*v10 + 32, v11, v12);
        v15 = v14;
        if (a3)
        {
          if ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)&v15, *(_QWORD *)a2, v13) & 1) != 0)
            return 1;
        }
        else if (*(_QWORD *)a2 == v14)
        {
          return 1;
        }
        sub_20BF45210(&v16);
        if (v16 == v17)
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_20BF45120(uint64_t a1, char *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, a2);
  v3 = sub_20BDEEBA4(a1, (const void **)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (a1 + 8 == v3)
    return 0;
  else
    return v3 + 56;
}

void sub_20BF4517C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF45198(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<std::string, pxrInternal__aapl__pxrRes"
            "erved__::JsValue>>::operator->() [T = const std::map<std::string, pxrInternal__aapl__pxrReserved__::JsValue>"
            ", Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BF45210(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<std::string, pxrInternal"
            "__aapl__pxrReserved__::JsValue>>::operator++() [T = const std::map<std::string, pxrInternal__aapl__pxrReserv"
            "ed__::JsValue>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_20BF452B4(uint64_t a1)
{
  char *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v8;
  uint64_t TypeName;
  const char *v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD v15[4];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a1;
  v17 = 0;
  v18 = 0;
  v1 = (char *)atomic_load(&qword_2549853A8);
  if (!v1)
    v1 = sub_20BF4742C(&qword_2549853A8);
  std::mutex::lock((std::mutex *)v1);
  v2 = (_QWORD *)atomic_load(&qword_2549853B0);
  if (!v2)
    v2 = sub_20BF4774C(&qword_2549853B0);
  v3 = sub_20BEB4074(v2, &v19);
  if (!atomic_load(&qword_2549853B0))
    sub_20BF4774C(&qword_2549853B0);
  if (v3)
  {
    v5 = v3[4];
    v17 = v3[3];
    v18 = v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    std::mutex::unlock((std::mutex *)v1);
    v8 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v17);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v8);
  }
  else
  {
    v15[0] = "plug/plugin.cpp";
    v15[1] = "_DefineType";
    v15[2] = 520;
    v15[3] = "static void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DefineType(TfType)";
    v16 = 0;
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v19);
    if (*(char *)(TypeName + 23) >= 0)
      v10 = (const char *)TypeName;
    else
      v10 = *(const char **)TypeName;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"unknown plugin type %s", v10);
    std::mutex::unlock((std::mutex *)v1);
  }
  result = v18;
  if (v18)
  {
    v12 = (unsigned int *)(v18 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20BF45448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17)
{
  std::mutex *v17;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  std::mutex::unlock(v17);
  if (a17)
  {
    v19 = a17 + 2;
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_20BF4549C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *JsObject;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char *String;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  char *v18;
  void **v19;
  void *v20[2];
  char v21;
  void *__p[2];
  uint64_t v23;
  const char *v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v28 = a2;
  sub_20BDDC0E4(__p, "alias");
  v4 = sub_20BDEEBA4(a3, (const void **)__p);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (a3 + 8 != v4
    && pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v4 + 56)))
  {
    JsObject = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)(v4 + 56));
    v26 = (_QWORD *)*JsObject;
    v27 = JsObject + 1;
    while (v26 != v27)
    {
      v8 = sub_20BF45198(&v26, v6, v7);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(*v8 + 56)))
      {
        v11 = sub_20BF45198(&v26, v9, v10);
        String = (char *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(*v11 + 56));
        v15 = sub_20BF45198(&v26, v13, v14);
        v16 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)(*v15 + 32));
        pxrInternal__aapl__pxrReserved__::TfType::AddAlias(&v28, *v16, String);
      }
      else
      {
        __p[0] = "plug/plugin.cpp";
        __p[1] = "_DeclareAliases";
        v23 = 543;
        v24 = "void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DeclareAliases(TfType, const JsObject &)";
        v25 = 0;
        v17 = sub_20BF45198(&v26, v9, v10);
        pxrInternal__aapl__pxrReserved__::JsValue::GetTypeName((pxrInternal__aapl__pxrReserved__::JsValue *)(*v17 + 56), v20);
        if (v21 >= 0)
          v19 = v20;
        else
          v19 = (void **)v20[0];
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Expected string for alias name, but found %s", v18, v19);
        if (v21 < 0)
          operator delete(v20[0]);
      }
      sub_20BF45210(&v26);
    }
  }
}

void sub_20BF45628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF45658(uint64_t a1)
{
  _QWORD *JsObject;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;

  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v18);
  sub_20BF4783C(a1 + 80, "Types", &v18);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v18))
  {
    JsObject = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v18);
    v16 = (_QWORD *)*JsObject;
    v17 = JsObject + 1;
    while (v16 != v17)
    {
      v5 = sub_20BF45198(&v16, v3, v4);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(*v5 + 56)))
      {
        v8 = *sub_20BF45198(&v16, v6, v7);
        v11 = sub_20BF45198(&v16, v9, v10);
        v12 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)(*v11 + 56));
        sub_20BF45768(a1, (char *)(v8 + 32), v12);
      }
      sub_20BF45210(&v16);
    }
  }
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20BF4574C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20BF45768(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t JsArray;
  pxrInternal__aapl__pxrReserved__::JsValue *v7;
  pxrInternal__aapl__pxrReserved__::JsValue *v8;
  const char *v9;
  const char *v10;
  pxrInternal__aapl__pxrReserved__::JsValue **v11;
  pxrInternal__aapl__pxrReserved__::JsValue *v12;
  pxrInternal__aapl__pxrReserved__::JsValue *v13;
  void **v14;
  unint64_t String;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t TypeName;
  __int128 *v37;
  pxrInternal__aapl__pxrReserved__::TfType **v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  void **v42;
  char *v43;
  void **v44;
  std::string::size_type v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  std::string *v50;
  char *v51;
  _QWORD *v52;
  _OWORD *v53;
  _QWORD *v54;
  std::string::size_type v55;
  unsigned int *v56;
  unsigned int v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  std::string::size_type size;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  _OWORD *v68;
  _QWORD *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  void *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  uint64_t v82;
  __int128 *v83;
  __int128 *v84;
  std::string v85;
  uint64_t v86;
  __int128 i;
  unint64_t v88;
  void *__p[2];
  uint64_t v90;
  const char *v91;
  char v92;
  void *v93;
  __int128 *v94;
  unint64_t *v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  char *v98;

  v97 = 0uLL;
  v98 = 0;
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v95);
  v82 = a3;
  sub_20BF4783C(a3, "bases", &v95);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v95))
  {
    JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v95);
    v8 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
    v7 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
    while (v8 != v7)
    {
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v8))
        goto LABEL_6;
      v8 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v8 + 16);
    }
    v11 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v95);
    sub_20BDE4F04(&v93, (v11[1] - *v11) >> 4);
    v13 = *v11;
    v12 = v11[1];
    if (*v11 != v12)
    {
      v14 = (void **)v93;
      do
      {
        String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v13);
        if (*(char *)(String + 23) < 0)
        {
          sub_20BDDBFAC(__p, *(void **)String, *(_QWORD *)(String + 8));
        }
        else
        {
          v16 = *(_OWORD *)String;
          v90 = *(_QWORD *)(String + 16);
          *(_OWORD *)__p = v16;
        }
        if (*((char *)v14 + 23) < 0)
          operator delete(*v14);
        v17 = *(_OWORD *)__p;
        v14[2] = (void *)v90;
        *(_OWORD *)v14 = v17;
        v14 += 3;
        v13 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v13 + 16);
      }
      while (v13 != v12);
    }
    v19 = (__int128 *)v93;
    v18 = v94;
    if (v93 != v94)
    {
      do
      {
        v20 = pxrInternal__aapl__pxrReserved__::TfType::Declare(v19);
        v21 = v20;
        v22 = *((_QWORD *)&v97 + 1);
        if (*((_QWORD *)&v97 + 1) >= (unint64_t)v98)
        {
          v24 = (uint64_t)(*((_QWORD *)&v97 + 1) - v97) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            sub_20BDDF694();
          v25 = (uint64_t)&v98[-v97] >> 2;
          if (v25 <= v24 + 1)
            v25 = v24 + 1;
          if ((unint64_t)&v98[-v97] >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
            v27 = (char *)sub_20BDDF6A8((uint64_t)&v98, v26);
          else
            v27 = 0;
          v28 = (unint64_t *)&v27[8 * v24];
          *v28 = *v21;
          v23 = v28 + 1;
          v29 = (char *)*((_QWORD *)&v97 + 1);
          v30 = (char *)v97;
          if (*((_QWORD *)&v97 + 1) != (_QWORD)v97)
          {
            do
            {
              v31 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *--v28 = v31;
            }
            while (v29 != v30);
            v29 = (char *)v97;
          }
          *(_QWORD *)&v97 = v28;
          *((_QWORD *)&v97 + 1) = v23;
          v98 = &v27[8 * v26];
          if (v29)
            operator delete(v29);
        }
        else
        {
          **((_QWORD **)&v97 + 1) = *v20;
          v23 = (_QWORD *)(v22 + 8);
        }
        *((_QWORD *)&v97 + 1) = v23;
        v19 = (__int128 *)((char *)v19 + 24);
      }
      while (v19 != v18);
    }
    __p[0] = &v93;
    sub_20BDE5038((void ***)__p);
  }
  else
  {
LABEL_6:
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v95))
    {
      __p[0] = "plug/plugin.cpp";
      __p[1] = "_DeclareType";
      v90 = 588;
      v91 = "void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DeclareType(const std::string &, const JsObject &)";
      v92 = 0;
      if (a2[23] >= 0)
        v9 = a2;
      else
        v9 = *(const char **)a2;
      v10 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = *(const char **)v10;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid bases for type %s specified by plugin %s. Expected list of strings.", v9, v10);
    }
  }
  v88 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)a2);
  pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v88, v32, v33, &v93);
  if (v93 == v94)
  {
    pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)a2, (char **)&v97, (uint64_t)sub_20BF452B4);
  }
  else
  {
    for (i = v97; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BEEEBD8(&i))
    {
      v86 = *(_QWORD *)sub_20BF46024((uint64_t *)&i, v34, v35);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v86);
      if (v93 == v94)
      {
        v37 = (__int128 *)v93;
      }
      else
      {
        v37 = (__int128 *)v93;
        while (*(_QWORD *)v37 != v86)
        {
          v37 = (__int128 *)((char *)v37 + 8);
          if (v37 == v94)
          {
            v37 = v94;
            break;
          }
        }
      }
      if (v37 == v94)
      {
        memset(&v85, 0, sizeof(v85));
        v83 = (__int128 *)v93;
        v84 = v94;
        while (v83 != v84)
        {
          v38 = (pxrInternal__aapl__pxrReserved__::TfType **)sub_20BEEEB50(&v83);
          v39 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(*v38);
          v40 = (char *)v39;
          if (*(char *)(v39 + 23) >= 0)
            v41 = *(unsigned __int8 *)(v39 + 23);
          else
            v41 = *(_QWORD *)(v39 + 8);
          sub_20BDF6BDC((uint64_t)__p, v41 + 1);
          if (v90 >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          if (v41)
          {
            if (v40[23] >= 0)
              v43 = v40;
            else
              v43 = *(char **)v40;
            memmove(v42, v43, v41);
          }
          *(_WORD *)((char *)v42 + v41) = 32;
          if (v90 >= 0)
            v44 = __p;
          else
            v44 = (void **)__p[0];
          if (v90 >= 0)
            v45 = HIBYTE(v90);
          else
            v45 = (std::string::size_type)__p[1];
          std::string::append(&v85, (const std::string::value_type *)v44, v45);
          if (SHIBYTE(v90) < 0)
            operator delete(__p[0]);
          sub_20BEEEBD8(&v83);
        }
        __p[0] = "plug/plugin.cpp";
        __p[1] = "_DeclareType";
        v90 = 629;
        v91 = "void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DeclareType(const std::string &, const JsObject &)";
        v92 = 0;
        v46 = (const char *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v46 = *(const char **)(a1 + 8);
        v47 = (const char *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v47 = *(const char **)(a1 + 32);
        if (a2[23] >= 0)
          v48 = a2;
        else
          v48 = *(const char **)a2;
        if (*(char *)(TypeName + 23) >= 0)
          v49 = (const char *)TypeName;
        else
          v49 = *(const char **)TypeName;
        v50 = &v85;
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v50 = (std::string *)v85.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"The metadata for plugin '%s' defined in %s declares type '%s' with base type '%s', but the type has already been declared with a different set of bases that does not include that type.  The existing bases are: (%s).  Please fix the plugin.", v46, v47, v48, v49, (const char *)v50);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
      }
    }
  }
  v51 = (char *)atomic_load(&qword_2549853A8);
  if (!v51)
    v51 = sub_20BF4742C(&qword_2549853A8);
  std::mutex::lock((std::mutex *)v51);
  v52 = (_QWORD *)atomic_load(&qword_2549853B0);
  if (!v52)
    v52 = sub_20BF4774C(&qword_2549853B0);
  if (sub_20BEDA270(v52, &v88))
  {
    v53 = (_OWORD *)atomic_load(&qword_2549853B0);
    if (!v53)
      v53 = sub_20BF4774C(&qword_2549853B0);
    __p[0] = &v88;
    v54 = sub_20BF478D0((uint64_t)v53, &v88, (uint64_t)&unk_20CAC184C, (uint64_t **)__p);
    v55 = v54[4];
    v85.__r_.__value_.__r.__words[0] = v54[3];
    v85.__r_.__value_.__l.__size_ = v55;
    if (v55)
    {
      v56 = (unsigned int *)(v55 + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    __p[0] = "plug/plugin.cpp";
    __p[1] = "_DeclareType";
    v90 = 649;
    v91 = "void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DeclareType(const std::string &, const JsObject &)";
    v92 = 0;
    v58 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v58 = *(const char **)v58;
    v59 = (const char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v59 = *(const char **)v59;
    if (a2[23] < 0)
      a2 = *(char **)a2;
    v60 = sub_20BF444D8((uint64_t *)&v85);
    v61 = (const char *)(v60 + 8);
    if (*(char *)(v60 + 31) < 0)
      v61 = *(const char **)v61;
    v62 = sub_20BF444D8((uint64_t *)&v85);
    v63 = (const char *)(v62 + 32);
    if (*(char *)(v62 + 55) < 0)
      v63 = *(const char **)v63;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Plugin '%s' defined in %s has metadata claiming that it provides type %s, but this was previously provided by plugin '%s' defined in %s.", v58, v59, a2, v61, v63);
    size = v85.__r_.__value_.__l.__size_;
    if (v85.__r_.__value_.__l.__size_)
    {
      v65 = (unsigned int *)(v85.__r_.__value_.__l.__size_ + 8);
      do
      {
        v66 = __ldxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
        (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
    }
    std::mutex::unlock((std::mutex *)v51);
  }
  else
  {
    sub_20BF47694((unint64_t **)__p, (unint64_t *)a1);
    v68 = (_OWORD *)atomic_load(&qword_2549853B0);
    if (!v68)
      v68 = sub_20BF4774C(&qword_2549853B0);
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    v69 = sub_20BF478D0((uint64_t)v68, &v88, (uint64_t)&unk_20CAC184C, (uint64_t **)&v85);
    v70 = (unsigned int *)v69[4];
    *(_OWORD *)(v69 + 3) = *(_OWORD *)__p;
    __p[1] = 0;
    if (v70)
    {
      v71 = v70 + 2;
      do
      {
        v72 = __ldxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
        (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 8))(v70);
      v74 = __p[1];
      __p[0] = 0;
      if (__p[1])
      {
        v75 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v76 = __ldxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
          (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
      }
    }
    std::mutex::unlock((std::mutex *)v51);
    sub_20BF4549C(v78, v88, v82);
  }
  if (v93)
  {
    v94 = (__int128 *)v93;
    operator delete(v93);
  }
  v79 = v96;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if ((_QWORD)v97)
  {
    *((_QWORD *)&v97 + 1) = v97;
    operator delete((void *)v97);
  }
}

void sub_20BF45EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  void *v39;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v37 - 144));
  v39 = *(void **)(v37 - 128);
  if (v39)
  {
    *(_QWORD *)(v37 - 120) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BF46024(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfType>"
            ">::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BF46098()
{
  JUMPOUT(0x20BF46048);
}

void pxrInternal__aapl__pxrReserved__::PlugFindPluginResource(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t (*v8)(uint64_t *);
  char v9;
  uint64_t v10;

  v8 = sub_20BF46110(a1);
  if (v9 & 1 | (unint64_t)v8)
  {
    v10 = sub_20BF444D8(a1);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::FindPluginResource(v10, a2, a3, (uint64_t)a4);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

uint64_t (*sub_20BF46110(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20BF47364;
}

uint64_t *sub_20BF46164()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51D648, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, (std::type_info *)&unk_24C51D648, (char *)0x78, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF46220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_OWORD *sub_20BF46264(unint64_t *a1)
{
  _OWORD *result;
  void *v4;

  result = operator new(0x28uLL);
  *result = 0u;
  result[1] = 0u;
  *((_DWORD *)result + 8) = 1065353216;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  v4 = (void *)sub_20BF462BC((uint64_t)result);
  operator delete(v4);
  return (_OWORD *)atomic_load(a1);
}

uint64_t sub_20BF462BC(uint64_t a1)
{
  void *v2;

  sub_20BF462F4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF462F4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF46330((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BF46330(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 32);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BF46390(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v22;
  char v23;

  v6 = a2;
  v22 = 0;
  v23 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v22, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * v22);
  v11 = *a1 & v10;
  v12 = a1[4];
  if (*(__int16 *)(v12 + 40 * v11 + 4) < 0)
  {
    LOWORD(v13) = 0;
LABEL_10:
    v14 = sub_20BF465AC((uint64_t)a1);
    v15 = a1[4];
    if ((v14 & 1) != 0)
    {
      v11 = v10 & *a1;
      if (*(__int16 *)(v15 + 40 * v11 + 4) < 0)
      {
        LOWORD(v13) = 0;
        v16 = *(unsigned __int16 *)(v15 + 40 * v11 + 4);
      }
      else
      {
        LOWORD(v13) = 0;
        do
        {
          v13 = (__int16)(v13 + 1);
          v11 = (v11 + 1) & *a1;
        }
        while (v13 <= *(__int16 *)(v15 + 40 * v11 + 4));
        v16 = *(unsigned __int16 *)(v15 + 40 * v11 + 4);
      }
    }
    else
    {
      v16 = *(unsigned __int16 *)(v15 + 40 * v11 + 4);
    }
    if (v16 == 0xFFFF)
    {
      v17 = v15 + 40 * v11;
      v18 = (_BYTE *)(v17 + 8);
      v19 = *a4;
      if (*((char *)*a4 + 23) < 0)
      {
        sub_20BDDBFAC(v18, *(void **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)(v15 + 40 * v11 + 24) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v18 = v20;
      }
      *(_QWORD *)(v15 + 40 * v11 + 32) = 0;
      *(_DWORD *)v17 = v10;
      *(_WORD *)(v17 + 4) = v13;
    }
    else
    {
      sub_20BF46670(a1, v11, v13, v10, a3, a4);
    }
    ++a1[6];
  }
  else
  {
    LOWORD(v13) = 0;
    while ((sub_20BEB4EF8((uint64_t)a1, (unsigned __int8 *)(v12 + 40 * v11 + 8), v6) & 1) == 0)
    {
      v11 = *a1 & (v11 + 1);
      v13 = (__int16)(v13 + 1);
      v12 = a1[4];
      if (v13 > *(__int16 *)(v12 + 40 * v11 + 4))
        goto LABEL_10;
    }
  }
  return a1[4] + 40 * v11;
}

uint64_t sub_20BF465AC(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20BF46714(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20BF46714(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20BF46670(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, __int128 **a6)
{
  __int128 *v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v12;
  void *v13;
  void *__p[2];
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v16;

  v10 = *a6;
  if (*((char *)*a6 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v15 = *((_QWORD *)v10 + 2);
    *(_OWORD *)__p = v11;
  }
  v16 = 0;
  sub_20BF46C54(a1, a2, a3, a4, (__n128 *)__p);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    pxrInternal__aapl__pxrReserved__::PlugPlugin::~PlugPlugin(v12);
    operator delete(v13);
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20BF46714(uint64_t a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  char *v9;
  uint64_t v10;
  _QWORD v11[9];
  void **v12;
  char v13;

  sub_20BF46914((uint64_t)&v10, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(unsigned int **)(a1 + 8);
  v4 = *(unsigned int **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = (unint64_t)(v11[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v3 + 2) != -1)
      {
        if (v5)
        {
          v12 = 0;
          v13 = 0;
          v7 = *((char *)v3 + 31);
          if (v7 >= 0)
            v8 = (pxrInternal__aapl__pxrReserved__ *)(v3 + 2);
          else
            v8 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)v3 + 1);
          if (v7 >= 0)
            v9 = (char *)*((unsigned __int8 *)v3 + 31);
          else
            v9 = (char *)*((_QWORD *)v3 + 2);
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v12, v8, v9);
          v6 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v12);
        }
        else
        {
          v6 = *v3;
        }
        sub_20BF4684C(&v10, v10 & v6, 0, v6, (__n128 *)(v3 + 2));
      }
      v3 += 10;
    }
    while (v3 != v4);
  }
  v11[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v10, (uint64_t *)a1);
  v12 = (void **)v11;
  sub_20BF46B34(&v12);
}

void sub_20BF46828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20BF46B34((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

__n128 sub_20BF4684C(_QWORD *a1, uint64_t a2, __int16 a3, int a4, __n128 *a5)
{
  uint64_t v5;
  int *v6;
  _WORD *v7;
  int v8;
  __n128 *v9;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  __n128 result;
  uint64_t v17;
  unint64_t v18;

  while (1)
  {
    v5 = a1[4];
    v6 = (int *)(v5 + 40 * a2);
    v7 = v6 + 1;
    v8 = *((__int16 *)v6 + 2);
    if (v8 >= a3)
      goto LABEL_4;
    v9 = (__n128 *)(v5 + 40 * a2 + 8);
    if (v8 == -1)
      break;
    v10 = a5[1].n128_u64[0];
    v11 = *a5;
    v12 = *(_QWORD *)(v5 + 40 * a2 + 24);
    *a5 = *v9;
    a5[1].n128_u64[0] = v12;
    *v9 = v11;
    *(_QWORD *)(v5 + 40 * a2 + 24) = v10;
    v13 = v5 + 40 * a2;
    v14 = a5[1].n128_u64[1];
    a5[1].n128_u64[1] = *(_QWORD *)(v13 + 32);
    *(_QWORD *)(v13 + 32) = v14;
    LOWORD(v13) = *v7;
    *v7 = a3;
    v15 = *v6;
    *v6 = a4;
    a3 = v13;
    a4 = v15;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  result = *a5;
  *(_QWORD *)(v5 + 40 * a2 + 24) = a5[1].n128_u64[0];
  *v9 = result;
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  v17 = v5 + 40 * a2;
  v18 = a5[1].n128_u64[1];
  a5[1].n128_u64[0] = 0;
  a5[1].n128_u64[1] = 0;
  *(_QWORD *)(v17 + 32) = v18;
  *v6 = a4;
  *v7 = a3;
  return result;
}

uint64_t sub_20BF46914(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x666666666666667)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20BF46AAC((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20BF46A34();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 34) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20BF46A20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20BF46A34()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B348);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B348))
  {
    dword_25473B320 = 0;
    word_25473B324 = -1;
    byte_25473B326 = 1;
    __cxa_atexit((void (*)(void *))sub_20BF46BD8, &dword_25473B320, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473B348);
  }
  return &dword_25473B320;
}

_QWORD *sub_20BF46AAC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BED4B34(a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20BF46B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BF46B34(&a9);
  _Unwind_Resume(a1);
}

void sub_20BF46B34(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BF46B74((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20BF46B74(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 40;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        sub_20BF46C14(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      v5 = v4 == v3;
      v4 -= 40;
    }
    while (!v5);
  }
  a1[1] = v3;
}

uint64_t sub_20BF46BD8(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_20BF46C14(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

void sub_20BF46C14(uint64_t a1)
{
  sub_20BF46F18((pxrInternal__aapl__pxrReserved__::PlugPlugin **)(a1 + 32), 0);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

__n128 sub_20BF46C54(uint64_t *a1, uint64_t a2, __int16 a3, int a4, __n128 *a5)
{
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  unint64_t v8;
  unint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  int *v16;
  unsigned __int16 i;
  _WORD *v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  __n128 result;
  unint64_t v27;

  v5 = a1[4] + 40 * a2;
  v6 = a5[1].n128_u64[0];
  v7 = *a5;
  v8 = *(_QWORD *)(v5 + 24);
  *a5 = *(__n128 *)(v5 + 8);
  a5[1].n128_u64[0] = v8;
  *(__n128 *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v6;
  v9 = a5[1].n128_u64[1];
  a5[1].n128_u64[1] = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = v9;
  v10 = *(_WORD *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  v11 = *(_DWORD *)v5;
  *(_DWORD *)v5 = a4;
  v12 = *a1;
  v13 = *a1 & (a2 + 1);
  v14 = v10 + 1;
  v15 = a1[4];
  v16 = (int *)(v15 + 40 * v13);
  v18 = v16 + 1;
  for (i = *((_WORD *)v16 + 2); i != 0xFFFF; i = *((_WORD *)v16 + 2))
  {
    if (v14 > (__int16)i)
    {
      if (v14 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      v19 = v15 + 40 * v13;
      v20 = *a5;
      v21 = a5[1].n128_u64[0];
      v22 = *(_QWORD *)(v19 + 24);
      *a5 = *(__n128 *)(v19 + 8);
      a5[1].n128_u64[0] = v22;
      *(_QWORD *)(v19 + 24) = v21;
      *(__n128 *)(v19 + 8) = v20;
      v23 = a5[1].n128_u64[1];
      a5[1].n128_u64[1] = *(_QWORD *)(v19 + 32);
      *(_QWORD *)(v19 + 32) = v23;
      LOWORD(v22) = *v18;
      *v18 = v14;
      v24 = *v16;
      *v16 = v11;
      v12 = *a1;
      v15 = a1[4];
      v14 = v22;
      v11 = v24;
    }
    v13 = v12 & (v13 + 1);
    ++v14;
    v16 = (int *)(v15 + 40 * v13);
    v18 = v16 + 1;
  }
  v25 = v15 + 40 * v13;
  result = *a5;
  *(_QWORD *)(v25 + 24) = a5[1].n128_u64[0];
  *(__n128 *)(v25 + 8) = result;
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  v27 = a5[1].n128_u64[1];
  a5[1].n128_u64[0] = 0;
  a5[1].n128_u64[1] = 0;
  *(_QWORD *)(v25 + 32) = v27;
  *v16 = v11;
  *v18 = v14;
  return result;
}

uint64_t sub_20BF46DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 *v4;
  uint64_t v5;
  int v6;

  v2 = a2;
  sub_20BF46E04((_QWORD *)a1, a2);
  if (*(__int16 *)(v2 + 4) == -1)
  {
    v4 = (__int16 *)(v2 + 44);
    v5 = v2 + 40;
    do
    {
      v2 = v5;
      if (*((_BYTE *)v4 - 38))
        break;
      v6 = *v4;
      v4 += 20;
      v5 += 40;
    }
    while (v6 == -1);
  }
  *(_BYTE *)(a1 + 73) = 1;
  return v2;
}

void sub_20BF46E04(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _WORD *v14;
  int v15;

  if (*(__int16 *)(a2 + 4) != -1)
  {
    sub_20BF46C14(a2);
    *(_WORD *)(a2 + 4) = -1;
  }
  --a1[6];
  v4 = a1[4];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v4) >> 3);
  v6 = (v5 + 1) & *a1;
  v7 = *(__int16 *)(v4 + 40 * v6 + 4);
  if (v7 >= 1)
  {
    do
    {
      v8 = (int *)(v4 + 40 * v6);
      v9 = v4 + 40 * v5;
      v10 = *(_OWORD *)(v8 + 2);
      v11 = *((_QWORD *)v8 + 4);
      *(_QWORD *)(v9 + 24) = *((_QWORD *)v8 + 3);
      v12 = *v8;
      *(_OWORD *)(v9 + 8) = v10;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      *((_QWORD *)v8 + 4) = 0;
      *(_QWORD *)(v9 + 32) = v11;
      *(_DWORD *)v9 = v12;
      *(_WORD *)(v9 + 4) = v7 - 1;
      v4 = a1[4];
      v13 = v4 + 40 * v6;
      v15 = *(__int16 *)(v13 + 4);
      v14 = (_WORD *)(v13 + 4);
      if (v15 != -1)
      {
        sub_20BF46C14(v4 + 40 * v6);
        *v14 = -1;
        v4 = a1[4];
      }
      v5 = v6;
      v6 = *a1 & (v6 + 1);
      v7 = *(__int16 *)(v4 + 40 * v6 + 4);
    }
    while (v7 > 0);
  }
}

void sub_20BF46F18(pxrInternal__aapl__pxrReserved__::PlugPlugin **a1, pxrInternal__aapl__pxrReserved__::PlugPlugin *a2)
{
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::PlugPlugin::~PlugPlugin(v3);
    operator delete(v4);
  }
}

unsigned __int8 *sub_20BF46F44(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20BF47208(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  v26 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BF472A4((uint64_t)&v26, 0);
  return i;
}

void sub_20BF471F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF472A4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BF47208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BF4728C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF472A4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BF472A4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF46330((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20BF472E8(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 v4;
  int v5;
  _QWORD *v7;
  char *v8;
  _DWORD *v9;
  char *v10;

  v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v4 & 1) != 0)
  {
    v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(_QWORD *)a1 = v7;
    if (v7)
    {
      v9 = v7;
      if (a3[23] >= 0)
        v10 = a3;
      else
        v10 = *(char **)a3;
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(v10, v9, v8);
      v5 = 2;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_20BF47364(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

std::recursive_mutex *sub_20BF473A4(unint64_t *a1)
{
  std::recursive_mutex *result;
  void *v4;

  result = (std::recursive_mutex *)sub_20BF473EC();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    std::recursive_mutex::~recursive_mutex(result);
    operator delete(v4);
  }
  return (std::recursive_mutex *)atomic_load(a1);
}

void *sub_20BF473EC()
{
  void *v0;

  v0 = operator new(0x40uLL);
  MEMORY[0x212B92CA0]();
  return v0;
}

void sub_20BF47418(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20BF4742C(unint64_t *a1)
{
  char *result;
  void *v4;

  result = (char *)operator new(0x40uLL);
  *(_QWORD *)result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *((_QWORD *)result + 7) = 0;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  std::mutex::~mutex((std::mutex *)result);
  operator delete(v4);
  return (char *)atomic_load(a1);
}

uint64_t sub_20BF47494(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF47508((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF47508(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20BF47598((uint64_t)v12);
  return v10;
}

uint64_t sub_20BF47598(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BEB5F08((unsigned int *)a1);
  return a1;
}

unint64_t sub_20BF475CC(unint64_t *a1)
{
  void **v2;
  void **v3;
  void **v6;

  v2 = (void **)sub_20BF47634();
  v3 = v2;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2)
  {
    v6 = v2 + 1;
    sub_20BF46B34(&v6);
    operator delete(v3);
  }
  return atomic_load(a1);
}

void *sub_20BF47634()
{
  void *v0;

  v0 = operator new(0x50uLL);
  sub_20BF46914((uint64_t)v0, 0, 0.0, 0.5);
  return v0;
}

void sub_20BF47680(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t **sub_20BF47694(unint64_t **a1, unint64_t *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8(a2, &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = (unint64_t *)v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20BF47734(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20BF4774C(unint64_t *a1)
{
  _OWORD *result;
  void *v4;

  result = operator new(0x28uLL);
  *result = 0u;
  result[1] = 0u;
  *((_DWORD *)result + 8) = 1065353216;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  v4 = (void *)sub_20BF477A4((uint64_t)result);
  operator delete(v4);
  return (_OWORD *)atomic_load(a1);
}

uint64_t sub_20BF477A4(uint64_t a1)
{
  void *v2;

  sub_20BF477DC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF477DC(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      v4 = (unsigned int *)v3[4];
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
      operator delete(v3);
    }
    while (v2);
  }
}

BOOL sub_20BF4783C(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;

  sub_20BDDC0E4(__p, a2);
  v5 = sub_20BDEEBA4(a1, (const void **)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  v6 = a1 + 8;
  if (v6 != v5)
    sub_20BDE881C(a3, (uint64_t *)(v5 + 56));
  return v6 != v5;
}

void sub_20BF478B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF478D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[3] = 0;
  i[4] = 0;
  i[2] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BF47B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BF47B34(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20BF47B34(uint64_t a1, _QWORD *__p)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (unsigned int *)__p[4];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  std::string v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  uint64_t v20;
  const char *v21;
  char v22;
  int v23;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9ED9CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v16);
  v2 = std::string::insert(&v16, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v20 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v17, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::PlugRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::PlugRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = operator new(0x70uLL);
      sub_20BF47F2C((unint64_t)v10, v11, v12);
      v14 = atomic_load(a1);
      if (v14)
      {
        if (v10 != (void *)v14)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v20 = 84;
          v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>:"
                ":_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v13);
        }
      }
      else
      {
        do
          v15 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v15)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v20 = 88;
          v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>:"
                ":_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v13, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::PlugRegistry*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v18--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_12PlugRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BF47D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::S"
            "etInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::DeleteInstance()
{
  unint64_t i;
  unint64_t v1;
  const void *v2;
  unsigned int **v3;

  for (i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
        i;
        i = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
    if (v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance))
      {
        std::mutex::~mutex((std::mutex *)(i + 48));
        sub_20BEB3F28(i + 8);
        v3 = sub_20BEBCE60((unsigned int **)i, v2);
        operator delete(v3);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(pxrInternal__aapl__pxrReserved__::PlugRegistry *this)
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  return result;
}

unint64_t sub_20BF47F2C(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  *(_QWORD *)(result + 32) = 0;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 40) = 1065353216;
  *(_QWORD *)(result + 48) = 850045863;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_QWORD *)(result + 104) = 0;
  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::S"
            "etInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void sub_20BF47FE8(_Unwind_Exception *a1)
{
  unsigned int **v1;
  std::mutex *v2;
  const void *v4;

  std::mutex::~mutex(v2);
  sub_20BEB3F28((uint64_t)(v1 + 1));
  sub_20BEBCE60(v1, v4);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF48010(uint64_t a1, unsigned __int8 *a2)
{
  char v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  uint64_t result;

void sub_20BF480C8(_Unwind_Exception *a1)
{
  __dmb(0xBu);
  LOBYTE(dword_2549853B8) = 0;
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::RegisterPlugins(unint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5[3];
  char **v6;

  sub_20BED7D38(v5, 1uLL, a2);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::RegisterPlugins(a1, v5, a3);
  v6 = v5;
  sub_20BDE5038((void ***)&v6);
}

void sub_20BF48138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::RegisterPlugins(unint64_t *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD v11[4];

  sub_20BF48244((uint64_t)a1, a2, 1, (uint64_t **)a3);
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
    pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::DidRegisterPlugins(v11, a3);
    sub_20BF491A0(&v9, a1);
    sub_20BF48474(v11, (uint64_t *)&v9);
    v5 = v10;
    if (v10)
    {
      v6 = (unsigned int *)(v10 + 8);
      do
      {
        v7 = __ldxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins((pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *)v11);
  }
}

void sub_20BF481E8(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if (a3)
  {
    v4 = a3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 8))(a3);
  }
  pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins((pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *)va);
  sub_20BEB4844((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20BF48244(uint64_t a1@<X0>, char **a2@<X1>, char a3@<W2>, uint64_t **a4@<X8>)
{
  uint64_t i;
  const char *v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  char **v16;
  char *v17;
  uint64_t v18;
  char **v19;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher **v20;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v21;
  char *v22;
  uint64_t (*v23)(int, tbb::internal *, uint64_t, void *);
  uint64_t v24;
  const char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE v30[103];
  char v31;
  char **v32;
  _QWORD *v33;
  uint64_t v34;

  v31 = a3;
  v22 = "plug/registry.cpp";
  v23 = (uint64_t (*)(int, tbb::internal *, uint64_t, void *))"_RegisterPlugins";
  v24 = 136;
  v25 = "PlugPluginPtrVector pxrInternal__aapl__pxrReserved__::PlugRegistry::_RegisterPlugins(const std::vector<std::string> &, BOOL)";
  LOBYTE(v26) = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v30, "Registering plugins", &v22);
  sub_20BEB59B0((uint64_t)&v28, (uint64_t)"Plug", (uint64_t)"PlugRegistry::RegisterPlugins");
  for (i = 5; i != 8; ++i)
    (&v22)[i] = 0;
  v25 = 0;
  v24 = 0;
  v26 = &v27;
  v23 = sub_20BF49390;
  pxrInternal__aapl__pxrReserved__::Plug_TaskArena::Plug_TaskArena((pxrInternal__aapl__pxrReserved__::Plug_TaskArena *)&v21);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v16 = a2;
  v17 = &v31;
  v18 = a1;
  v19 = &v22;
  v20 = &v21;
  v32 = (char **)off_24C51D670;
  v33 = &v16;
  tbb::interface7::internal::isolate_within_arena((uint64_t (***)(_QWORD))&v32, 0);
  std::mutex::unlock((std::mutex *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Plug_TaskArena::~Plug_TaskArena(&v21);
  v8 = v25;
  __dmb(0xBu);
  if (v8)
  {
    v9 = v25;
    __dmb(0xBu);
    v10 = tbb::internal::concurrent_vector_base_v3::internal_capacity((tbb::internal::concurrent_vector_base_v3 *)&v23);
    if (v10 >= (unint64_t)v9)
      v11 = (unint64_t)v9;
    else
      v11 = v10;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v17 = 0;
    v18 = 0;
    v16 = &v22;
    v32 = &v22;
    v33 = (_QWORD *)v11;
    v34 = 0;
    sub_20BF4945C(a4, (uint64_t)&v16, (uint64_t)&v32, v11);
    v12 = *a4;
    v13 = a4[1];
    while (v12 != v13)
    {
      v14 = sub_20BF444D8(v12);
      sub_20BF45658(v14);
      v12 += 2;
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  sub_20BF493A0((unint64_t *)&v22);
  while (v29--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v28);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v30);
}

void sub_20BF4840C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  std::mutex *v25;

  std::mutex::unlock(v25);
  pxrInternal__aapl__pxrReserved__::Plug_TaskArena::~Plug_TaskArena(&a14);
  sub_20BF493A0(&a15);
  sub_20BEB24F4((uint64_t)&a23);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF48474(_QWORD *a1, uint64_t *a2)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  const std::type_info *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;

  v4 = sub_20BF49258(a2);
  if (!(v5 & 1 | (unint64_t)v4))
  {
    v6 = 0;
    goto LABEL_6;
  }
  v6 = (const std::type_info *)sub_20BF492EC(a2);
  if (!v6)
  {
LABEL_6:
    v10 = 0;
    v11 = (void *)MEMORY[0x24BEDB7C8];
    return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(a1, v6, v10, (uint64_t)v11);
  }
  v8 = a2[1];
  v7 = a2 + 1;
  if (v8)
  {
    v9 = sub_20BEB47BC(v7);
    v10 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &unk_24C51D808;
  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(a1, v6, v10, (uint64_t)v11);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD v4[4];
  char v5;
  uint64_t v6;

  v6 = a1;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v4);
  if (v4[0] == a1)
  {
    v4[0] = "plug/registry.cpp";
    v4[1] = "GetPluginForType";
    v4[2] = 185;
    v4[3] = "PlugPluginPtr pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(TfType) const";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown base type");
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    sub_20BF443F4(&v6, a2);
  }
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginWithName(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  sub_20BF448F0(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(uint64_t a1@<X1>, const void **a2@<X2>, pxrInternal__aapl__pxrReserved__::JsValue *a3@<X8>)
{
  uint64_t TypeName;
  __int128 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a3);
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v21);
  if (*(char *)(TypeName + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)TypeName, *(_QWORD *)(TypeName + 8));
  }
  else
  {
    v6 = *(_OWORD *)TypeName;
    v20 = *(_QWORD *)(TypeName + 16);
    *(_OWORD *)__p = v6;
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(v21, &v17);
  v7 = sub_20BF46110(&v17);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v17);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v9, (const pxrInternal__aapl__pxrReserved__::TfType *)&v21, &v15);
    v10 = sub_20BDEEBA4((uint64_t)&v15, a2);
    if (&v16 != (_QWORD **)v10)
      sub_20BDE881C(a3, (uint64_t *)(v10 + 56));
    sub_20BE78E5C((uint64_t)&v15, v16);
  }
  v11 = v18;
  if (v18)
  {
    v12 = (unsigned int *)(v18 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_20BF486B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  sub_20BE78E5C((uint64_t)&a10, a11);
  v22 = a14;
  if (a14)
  {
    v23 = (unsigned int *)(a14 + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (a20 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v20);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetStringFromPluginMetaData(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t String;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(a1, a2, (pxrInternal__aapl__pxrReserved__::JsValue *)&v9);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v9))
  {
    String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v9);
    if (*(char *)(String + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)String, *(_QWORD *)(String + 8));
    }
    else
    {
      v5 = *(_OWORD *)String;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(String + 16);
      *(_OWORD *)a3 = v5;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20BF487DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(uint64_t a1)
{
  uint64_t v2;
  char *v3;

  sub_20BF4881C();
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::FindByName(a1, v2, v3);
}

void sub_20BF4881C()
{
  unint64_t v0;
  unint64_t *Instance;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void ***v6;
  uint64_t v7;
  void **v8[4];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v8[0] = (void **)&v9;
  v0 = atomic_load(&qword_2549853C0);
  if (v0 != -1)
  {
    v6 = v8;
    v12 = (unint64_t **)&v6;
    std::__call_once(&qword_2549853C0, &v12, (void (__cdecl *)(void *))sub_20BF496B0);
  }
  if (v9 != v10)
  {
    pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::DidRegisterPlugins(v8, &v9);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
    sub_20BF491A0((unint64_t **)&v6, Instance);
    sub_20BF48474(v8, (uint64_t *)&v6);
    v2 = v7;
    if (v7)
    {
      v3 = (unsigned int *)(v7 + 8);
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
    pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins((pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *)v8);
  }
  v8[0] = (void **)&v9;
  sub_20BEB4844(v8);
}

void sub_20BF4891C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  if (a10)
  {
    v16 = a10 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins((pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *)&a11);
  a11 = (void **)&a15;
  sub_20BEB4844(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::FindDerivedTypeByName(uint64_t a1, uint64_t a2)
{
  char *v3;
  uint64_t v5;

  v5 = a1;
  sub_20BF4881C();
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::FindDerivedByName(&v5, a2, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDirectlyDerivedTypes@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v6 = a1;
  sub_20BF4881C();
  return pxrInternal__aapl__pxrReserved__::TfType::GetDirectlyDerivedTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v6, v3, v4, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(uint64_t a1, uint64_t **a2)
{
  char *v3;
  uint64_t v5;

  v5 = a1;
  sub_20BF4881C();
  return pxrInternal__aapl__pxrReserved__::TfType::GetAllDerivedTypes(&v5, a2, v3);
}

void pxrInternal__aapl__pxrReserved__::Plug_SetPaths(uint64_t a1, uint64_t a2, char a3)
{
  sub_20BF48ACC();
  if ((__int128 *)a1 != &xmmword_2549853C8)
    sub_20BE75818((uint64_t)&xmmword_2549853C8, *(std::string **)a1, *(__int128 **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  if ((__int128 *)a2 != (__int128 *)((char *)&xmmword_2549853D8 + 8))
    sub_20BE75818((uint64_t)&xmmword_2549853D8 + 8, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  byte_2549853F8 = a3;
}

void sub_20BF48ACC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985400);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254985400))
    {
      xmmword_2549853D8 = 0u;
      unk_2549853E8 = 0u;
      xmmword_2549853C8 = 0u;
      byte_2549853F8 = 1;
      __cxa_atexit((void (*)(void *))sub_20BF4905C, &xmmword_2549853C8, &dword_20BDBC000);
      __cxa_guard_release(&qword_254985400);
    }
  }
}

_QWORD *sub_20BF48B44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string **v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(std::string ***)v1;
  v4 = **(unsigned __int8 **)(v1 + 8);
  v5 = operator new(0x20uLL);
  *v5 = &unk_24C51D6B0;
  v5[1] = sub_20BF48010;
  v5[2] = 0;
  v5[3] = v2;
  v15 = v5;
  v6 = *(_QWORD *)(v1 + 24);
  v7 = operator new(0x28uLL);
  *v7 = &unk_24C51D770;
  v7[1] = sub_20BF48CF8;
  v7[2] = 0;
  v7[3] = v2;
  v7[4] = v6;
  v13 = v7;
  pxrInternal__aapl__pxrReserved__::Plug_ReadPlugInfo(v3, v4 != 0, (uint64_t)v14, (uint64_t)v12, *(_QWORD *)(v1 + 32));
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20BF48C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_20BF48CF8(int a1, const char **this, uint64_t a3)
{
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;
  char *v18;
  const char *v19;
  char v20;

  if (!pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::PassesEntitlementCheck((pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata *)this))
    return;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  if (*(_DWORD *)this == 1)
  {
    sub_20BF432A4((uint64_t)this, (uint64_t)&v13);
    goto LABEL_6;
  }
  if (*(_DWORD *)this == 3)
  {
    sub_20BF437B8((uint64_t)this, (uint64_t)&v13);
LABEL_6:
    v6 = (unsigned int *)v14;
    v18 = v13;
    v19 = v14;
    v20 = v15;
    if ((_BYTE)v15)
    {
      sub_20BF48EFC(a3, &v18, v5, &v13);
      v6 = (unsigned int *)v19;
    }
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
    return;
  }
  v13 = "plug/registry.cpp";
  v14 = "_RegisterPlugin";
  v15 = 93;
  v16 = "void pxrInternal__aapl__pxrReserved__::PlugRegistry::_RegisterPlugin(const Plug_RegistrationMetadata &, Concurre"
        "ntVector *) [ConcurrentVector = tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__"
        "aapl__pxrReserved__::PlugPlugin>>]";
  v17 = 0;
  v12 = this[4];
  v11 = (const char *)(this + 4);
  v10 = v12;
  if (v11[23] >= 0)
    v10 = v11;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Tried to register a plugin of unknown type (maybe from %s)", v10);
}

void sub_20BF48E08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 32);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

__n128 sub_20BF48E28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C51D6B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20BF48E6C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C51D6B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BF48E98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_20BF48EB4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51D748))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BF48EF0()
{
  return &unk_24C51D748;
}

_QWORD *sub_20BF48EFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, void *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v12;
  _QWORD *v13;

  result = (_QWORD *)tbb::internal::concurrent_vector_base_v3::internal_push_back((tbb::internal::concurrent_vector_base_v3 *)(a1 + 8), 16, &v12, a3);
  v13 = result;
  *result = *a2;
  v7 = a2[1];
  result[1] = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    result = v13;
  }
  v10 = v12;
  *a4 = a1;
  a4[1] = v10;
  a4[2] = result;
  return result;
}

__n128 sub_20BF48F80(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_24C51D770;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20BF48FC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C51D770;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BF48FF0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, uint64_t, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v4 + v3);
  return v3(v4, a2, a1[4]);
}

uint64_t sub_20BF49014(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51D7F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BF49050()
{
  return &unk_24C51D7F0;
}

void **sub_20BF4905C(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  sub_20BDE5038(&v3);
  v3 = a1;
  sub_20BDE5038(&v3);
  return a1;
}

uint64_t *sub_20BF490A0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51D808, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, (std::type_info *)&unk_24C51D808, (char *)0x70, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4915C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t **sub_20BF491A0(unint64_t **a1, unint64_t *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8(a2, &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = (unint64_t *)v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20BF49240(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

uint64_t (*sub_20BF49258(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20BF492AC;
}

uint64_t sub_20BF492AC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

uint64_t sub_20BF492EC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::PlugRegistry>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReserv"
            "ed__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9EDCFLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_20BF49390(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 16, 0, a4);
}

unint64_t *sub_20BF493A0(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>>::destroy_array(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      --v2;
      result = *(_QWORD *)(v3 + 16 * v2 + 8);
      if (result)
      {
        v4 = (unsigned int *)(result + 8);
        do
        {
          v5 = __ldxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_20BF4945C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;

  v11 = result;
  v12 = 0;
  if (a4)
  {
    v6 = (uint64_t)result;
    sub_20BE90F0C(result, a4);
    v9 = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
    v7 = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 16);
    return sub_20BF494F0(v6, &v9, &v7);
  }
  return result;
}

void sub_20BF494DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB4844((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF494F0(uint64_t a1, __int128 *a2, __int128 *a3)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *((_QWORD *)a2 + 2);
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  v11 = *a2;
  v12 = v5;
  v9 = v6;
  v10 = v7;
  result = sub_20BF49558(a1 + 16, (uint64_t *)&v11, &v9, v4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_20BF49550(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF49558(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[3];
  char v20;
  _QWORD *v21;
  _QWORD *v22;

  v4 = a4;
  v21 = a4;
  v22 = a4;
  v19[0] = a1;
  v19[1] = &v21;
  v19[2] = &v22;
  v20 = 0;
  if (a2[1] != a3[1] || *a2 != *a3)
  {
    do
    {
      v8 = (_QWORD *)sub_20BF49654(a2);
      *v4 = *v8;
      v9 = v8[1];
      v4[1] = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = a2[1];
      v13 = a2[2];
      v14 = v12 + 1;
      a2[1] = v12 + 1;
      if (v13)
      {
        v15 = v13 + 16;
        if (((v12 - 1) & v14) != 0)
          v16 = v15;
        else
          v16 = 0;
        a2[2] = v16;
      }
      v4 = v22 + 2;
      v22 += 2;
    }
    while (v14 != a3[1] || *a2 != *a3);
  }
  v20 = 1;
  sub_20BF43210((uint64_t)v19);
  return v4;
}

void sub_20BF49640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF43210((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF49654(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  result = a1[2];
  if (!result)
  {
    v4 = *a1;
    v3 = a1[1];
    v5 = sub_20BEB4B94(v3);
    v6 = *(_QWORD *)(v4 + 32);
    __dmb(0xBu);
    result = *(_QWORD *)(v6 + 8 * v5) + 16 * (v3 - ((1 << v5) & 0xFFFFFFFFFFFFFFELL));
    a1[2] = result;
  }
  return result;
}

void sub_20BF496B0(uint64_t ***a1)
{
  uint64_t *v1;
  unint64_t Instance;
  BOOL v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t *i;
  const char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  void **v13;

  v1 = **a1;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  sub_20BDDC0E4(__p, "PXR_DISABLE_STANDARD_PLUG_SEARCH_PATH");
  v3 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
  v4 = v3;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return;
  }
  else if (v3)
  {
    return;
  }
  sub_20BF48ACC();
  v5 = (uint64_t *)*((_QWORD *)&xmmword_2549853D8 + 1);
  for (i = (uint64_t *)unk_2549853E8; v5 != i; v5 += 3)
  {
    if (sub_20BF3C2C8(3))
    {
      v9 = v5;
      if (*((char *)v5 + 23) < 0)
        v9 = (uint64_t *)*v5;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s", v7, v8, v9);
    }
  }
  sub_20BF48ACC();
  sub_20BF48ACC();
  sub_20BF48244(Instance, (char **)&xmmword_2549853C8, byte_2549853F8, (uint64_t **)__p);
  v10 = *v1;
  sub_20BF49804(*v1);
  *(_OWORD *)v10 = *(_OWORD *)__p;
  *(_QWORD *)(v10 + 16) = v12;
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  v13 = __p;
  sub_20BEB4844(&v13);
}

void sub_20BF497E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

