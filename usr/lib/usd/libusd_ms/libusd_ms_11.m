void sub_20C23FCC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = v1[3];
  if (v4)
    sub_20C96B4E8(v4);
  sub_20C96B82C(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::GetHash(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  if (*(_QWORD *)this)
    return bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)(*(_QWORD *)this + 72));
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (a1 == a2)
    return 1;
  v2 = *a1;
  v3 = *a2;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 != 0) == (v3 != 0);
  else
    return pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator!=(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==(a1, a2) ^ 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *a1;
  v3 = *a2;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
    return pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator<();
  if (v2)
    v5 = 1;
  else
    v5 = v3 == 0;
  return !v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1)
    return *(_QWORD *)a1;
  else
    return a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
  if (*(_QWORD *)this)
    return *(_QWORD *)this;
  return result;
}

_QWORD *sub_20C23FDEC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52D158;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23FE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_20C23FEBC((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20C23FE60(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C23FE74(uint64_t a1)
{
  sub_20C23FEBC(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_20C23FE7C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52D1A8))
    return a1 + 24;
  else
    return 0;
}

void sub_20C23FEBC(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 56));
    v11 = (void **)(a2 + 32);
    sub_20BDE9EB0(&v11);
    v3 = *(unsigned int **)(a2 + 24);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
    v7 = *(unsigned int **)(a2 + 8);
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
    operator delete((void *)a2);
  }
}

double pxrInternal__aapl__pxrReserved__::PcpInstanceKey::PcpInstanceKey(pxrInternal__aapl__pxrReserved__::PcpInstanceKey *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

pxrInternal__aapl__pxrReserved__::PcpInstanceKey *pxrInternal__aapl__pxrReserved__::PcpInstanceKey::PcpInstanceKey(pxrInternal__aapl__pxrReserved__::PcpInstanceKey *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v12;
  __int128 v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void **v17;
  char *v18;
  char *v19;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  _QWORD v23[2];
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char HasAnyPayloads;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;

  *((_QWORD *)this + 6) = 0;
  v4 = (uint64_t *)((char *)this + 48);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v5 = (char *)this + 24;
  *(_OWORD *)this = 0u;
  if ((pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable(a2) & 1) != 0)
  {
    v26 = 0uLL;
    v27 = 0;
    HasAnyPayloads = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasAnyPayloads(a2);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
    v35 = v8;
    v36 = v6;
    v9 = **(void ****)(v8 + 16);
    v10 = (void **)WORD2(v9[6 * v6 + 3]);
    v29 = (void **)v8;
    v30 = v10;
    v31 = v9;
    v32 = (void **)v8;
    v11 = 0xFFFFLL;
    v33 = 0xFFFFLL;
    v34 = v9;
    while (v10 != (void **)v11 || v29 != v32)
    {
      v12 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(&v29, v6, v7);
      sub_20C240964(v12, (uint64_t)&v26, 0);
      sub_20C2049E8(&v29);
      v10 = v30;
      v11 = v33;
    }
    v13 = *(_OWORD *)this;
    *(_OWORD *)this = v26;
    v26 = v13;
    v14 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v27;
    v27 = v14;
    v25 = 0uLL;
    v24 = &v25;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)&v29);
    v16 = v29;
    v15 = v30;
    v17 = v31;
    if (v29 != v31 || v30 != v32)
    {
      v18 = (char *)v32 - 1;
      do
      {
        v19 = (char *)v15;
        v23[0] = v16;
        v23[1] = v15;
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v23))
        {
          LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v23);
          Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v23);
          pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSelections(LayerStack, Path, (uint64_t *)&v24, 0, 0);
        }
        v15 = (void **)(v19 + 1);
      }
      while (v16 != v17 || v18 != v19);
    }
    sub_20C2401EC((uint64_t)v5, v24, &v25);
    v29 = 0;
    LOBYTE(v30) = 0;
    sub_20C241508((unint64_t)&v29, v4, (uint64_t)this, (uint64_t)v5);
    *v4 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v29);
    sub_20BDE9D48((uint64_t)&v24, (_QWORD *)v25);
    v29 = (void **)&v26;
    sub_20C24064C(&v29);
  }
  return this;
}

void sub_20C240190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  _QWORD *v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  sub_20BDE9D48((uint64_t)va, v7);
  va_copy((va_list)v5, va1);
  sub_20C24064C((void ***)va);
  sub_20BE93030((void ***)va1);
  sub_20C24064C((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_20C2401EC(uint64_t a1, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  BOOL v7;

  if (a2 == a3)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = a2;
    do
    {
      v5 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(__int128 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (__int128 *)*((_QWORD *)v4 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      ++v3;
      v4 = v6;
    }
    while (v6 != a3);
  }
  sub_20C241098(a1, a2, a3, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpInstanceKey::operator==(uint64_t *a1, uint64_t *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;

  v2 = (unsigned __int8 *)a1[3];
  v3 = (unsigned __int8 *)a1[4];
  v4 = (unsigned __int8 *)a2[3];
  if (v3 - v2 != a2[4] - (_QWORD)v4)
    return 0;
  while (v2 != v3)
  {
    result = sub_20BF77F70((uint64_t)&v13, v2, v4);
    if (!(_DWORD)result)
      return result;
    v2 += 48;
    v4 += 48;
  }
  v10 = a1;
  v8 = *a1;
  v9 = v10[1];
  v12 = a2;
  v11 = *a2;
  if (v9 - v8 != v12[1] - v11)
    return 0;
  if (v8 == v9)
    return 1;
  do
  {
    result = sub_20C241694(v8, v11);
    if (!(_DWORD)result)
      break;
    v8 += 112;
    v11 += 112;
  }
  while (v8 != v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpInstanceKey::operator!=(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::PcpInstanceKey::operator==(a1, a2) ^ 1;
}

std::string *pxrInternal__aapl__pxrReserved__::PcpInstanceKey::GetString@<X0>(pxrInternal__aapl__pxrReserved__::PcpInstanceKey *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v4;
  void **v5;
  const char *v6;
  char *v7;
  BOOL IsIdentity;
  const char *v9;
  const char *v10;
  char *v11;
  void **v12;
  const std::string::value_type *p_p;
  std::string::size_type v14;
  _QWORD *v15;
  const char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  uint64_t v24;
  void *v27[2];
  char v28;
  void *v29;
  char v30;
  void *v31[2];
  char v32;
  void *__p;
  std::string::size_type v34;
  unsigned __int8 v35;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::string::append((std::string *)a2, "Arcs:\n");
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v3)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(*(_QWORD *)this + 96);
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, *((unsigned int *)v4 - 24), (uint64_t)v31);
      if (v32 >= 0)
        v5 = v31;
      else
        v5 = (void **)v31[0];
      IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v4);
      v9 = "";
      if (!IsIdentity)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" (offset: %f scale: %f)", v6, v7, *(_QWORD *)v4, *((_QWORD *)v4 + 1));
        if (v30 >= 0)
          v9 = (const char *)&v29;
        else
          v9 = (const char *)v29;
      }
      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v27, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)((char *)v4 - 88), (const pxrInternal__aapl__pxrReserved__::PcpSite *)v6);
      if (v28 >= 0)
        v12 = v27;
      else
        v12 = (void **)v27[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  %s%s : %s\n", v10, v11, v5, v9, v12);
      if ((v35 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v35 & 0x80u) == 0)
        v14 = v35;
      else
        v14 = v34;
      std::string::append((std::string *)a2, p_p, v14);
      if ((char)v35 < 0)
        operator delete(__p);
      if (v28 < 0)
      {
        operator delete(v27[0]);
        if (!IsIdentity)
        {
LABEL_25:
          if (v30 < 0)
            operator delete(v29);
        }
      }
      else if (!IsIdentity)
      {
        goto LABEL_25;
      }
      if (v32 < 0)
        operator delete(v31[0]);
      v15 = (_QWORD *)((char *)v4 + 16);
      v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)((char *)v4 + 112);
      if (v15 == v3)
        goto LABEL_32;
    }
  }
  std::string::append((std::string *)a2, "  (none)\n");
LABEL_32:
  std::string::append((std::string *)a2, "Variant selections:\n");
  v18 = (uint64_t *)*((_QWORD *)this + 3);
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  if (v18 == v19)
    return std::string::append((std::string *)a2, "  (none)");
  do
  {
    v20 = v18;
    if (*((char *)v18 + 23) < 0)
      v20 = (uint64_t *)*v18;
    v21 = v18 + 3;
    if (*((char *)v18 + 47) < 0)
      v21 = (_QWORD *)*v21;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  %s = %s\n", v16, v17, v20, v21);
    if ((v35 & 0x80u) == 0)
      v22 = (const std::string::value_type *)&__p;
    else
      v22 = (const std::string::value_type *)__p;
    if ((v35 & 0x80u) == 0)
      v23 = v35;
    else
      v23 = v34;
    std::string::append((std::string *)a2, v22, v23);
    if ((char)v35 < 0)
      operator delete(__p);
    v18 += 6;
  }
  while (v18 != v19);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  return std::string::erase((std::string *)a2, v24 - 1, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_20C2405AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 + 23) < 0)
    operator delete(*(void **)v36);
  _Unwind_Resume(exception_object);
}

void sub_20C24064C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        sub_20C2406D0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C2406D0(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 92));
  sub_20BFD265C((_DWORD *)(a2 + 88));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 64));
  v11 = (void **)(a2 + 40);
  sub_20BDE9EB0(&v11);
  v3 = *(unsigned int **)(a2 + 32);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = *(_QWORD *)(a2 + 16);
  if (result)
  {
    v8 = (unsigned int *)(result + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20C240778(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v11;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 92));
  sub_20BFD265C((_DWORD *)(a1 + 88));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 64));
  v11 = (void **)(a1 + 40);
  sub_20BDE9EB0(&v11);
  v2 = *(unsigned int **)(a1 + 32);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 16);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

BOOL sub_20C240824(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  void **v24;

  if (!a3)
    return 1;
  sub_20C240FE0((uint64_t)&v15, a2);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    v5 = sub_20C240A4C((uint64_t *)a1, (uint64_t)&v15);
  }
  else
  {
    *(_DWORD *)v4 = v15;
    sub_20C240B80(v4 + 8, (uint64_t)&v16);
    *(_OWORD *)(v4 + 96) = v23;
    v5 = v4 + 112;
    *(_QWORD *)(a1 + 8) = v4 + 112;
  }
  *(_QWORD *)(a1 + 8) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v20);
  v24 = (void **)&v19;
  sub_20BDE9EB0(&v24);
  v6 = v18;
  if (v18)
  {
    v7 = (unsigned int *)(v18 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unsigned int *)(v17 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return *(_BYTE *)(a1 + 24) != 0;
}

void sub_20C24093C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C240778((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C240964(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  int IsDueToAncestor;
  int HasSpecs;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if ((result & 1) != 0)
    return result;
  if ((a3 & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    IsDueToAncestor = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1);
    v7 = IsDueToAncestor ^ 1u;
    if ((IsDueToAncestor & 1) != 0)
    {
      HasSpecs = 0;
      goto LABEL_7;
    }
  }
  HasSpecs = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
LABEL_7:
  result = sub_20C240824(a2, a1, HasSpecs);
  if ((_DWORD)result)
  {
    v12 = *((_QWORD *)a1 + 1);
    v23 = *(_QWORD *)a1;
    v24 = v12;
    v13 = **(_QWORD **)(v23 + 16);
    v14 = *(unsigned __int16 *)(v13 + 48 * v12 + 28);
    v17 = v23;
    v18 = v14;
    v19 = v13;
    v20 = v23;
    v15 = 0xFFFFLL;
    v21 = 0xFFFFLL;
    v22 = v13;
    while (v14 != v15 || v17 != v20)
    {
      v16 = sub_20C20495C(&v17, v10, v11);
      sub_20C240964(v16, a2, v7);
      result = (uint64_t)sub_20C2049E8(&v17);
      v14 = v18;
      v15 = v21;
    }
  }
  return result;
}

uint64_t sub_20C240A4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20C240CE4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[112 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[112 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  sub_20C240B80((uint64_t)(v11 + 8), a2 + 8);
  *(_OWORD *)&v10[112 * v4 + 96] = *(_OWORD *)(a2 + 96);
  v15 += 112;
  sub_20C240C70(a1, v14);
  v12 = a1[1];
  sub_20C240F6C(v14);
  return v12;
}

void sub_20C240B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C240F6C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C240B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BFB73DC((char *)(a1 + 32), *(_QWORD **)(a2 + 32), *(_QWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_20BFD38A4((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_20BFD38DC((_DWORD *)(a1 + 84), (_DWORD *)(a2 + 84));
  return a1;
}

void sub_20C240C50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
    sub_20C96B4E8(v4);
  sub_20C96B82C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C240C70(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C240D2C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20C240CE4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    sub_20BDDF5B4();
  return operator new(112 * a2);
}

uint64_t sub_20C240D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      v11 = *(_DWORD *)(v10 - 112);
      v10 -= 112;
      *(_DWORD *)(v7 - 112) = v11;
      sub_20C240DF8(v7 - 104, v10 + 8);
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(v9 - 16);
      v7 = *((_QWORD *)&v17 + 1) - 112;
      *((_QWORD *)&v17 + 1) -= 112;
      v9 = v10;
    }
    while (v10 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C240EE8((uint64_t)v14);
  return v12;
}

void sub_20C240DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C240EE8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C240DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BFB73DC((char *)(a1 + 32), *(_QWORD **)(a2 + 32), *(_QWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_20BFD6E54((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_20BFD6EA4((_DWORD *)(a1 + 84), (_DWORD *)(a2 + 84));
  return a1;
}

void sub_20C240EC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
    sub_20C96B4E8(v4);
  sub_20C96B82C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C240EE8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C240F1C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C240F1C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C2406D0(v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C240F6C(void **a1)
{
  sub_20C240F9C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20C240F9C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 112;
      result = sub_20C2406D0(v4, v1 - 112);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C240FE0(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v5;
  char *v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  int v9;
  int v10;

  *(_DWORD *)a1 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 8), (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  sub_20C2012CC(&v8);
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)((char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v5, v6)+ 40);
  return a1;
}

void sub_20C241074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C20ACC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C241098(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18[2];
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_20C241224((void **)a1);
    if (a4 > 0x555555555555555)
      sub_20BDDF694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    sub_20C02CC00((_QWORD *)a1, v11);
    v12 = sub_20C241290(v8, a2, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4);
  if (v13 < a4)
  {
    *(_QWORD *)v18 = a2;
    sub_20BE754A0((_QWORD **)v18, v13);
    v14 = *(__int128 **)v18;
    sub_20C241474((int)&v19, a2, *(_QWORD **)v18, *(std::string **)a1);
    v12 = sub_20C241290(v8, v14, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20C241474((int)&v20, a2, a3, v9);
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  if (v17 != v15)
  {
    do
    {
      v17 -= 48;
      sub_20BE930B4(v8, v17);
    }
    while (v17 != v16);
  }
  *(_QWORD *)(a1 + 8) = v16;
}

void sub_20C241214(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C24121C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C241224(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        sub_20BE930B4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_20C241290(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;
  _QWORD v11[3];
  char v12;
  char *v13;
  char *v14;

  v4 = __dst;
  v13 = __dst;
  v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C24135C(v4, v6 + 2);
      v7 = (__int128 *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(__int128 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (__int128 *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v4 = v14 + 48;
      v14 += 48;
      v6 = v8;
    }
    while (v8 != a3);
  }
  v12 = 1;
  sub_20C2413F0((uint64_t)v11);
  return v4;
}

void sub_20C241348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2413F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20C24135C(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20C2413D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2413F0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C241424((uint64_t *)a1);
  return a1;
}

void sub_20C241424(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      sub_20BE930B4(v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *sub_20C241474(int a1, _QWORD *a2, _QWORD *a3, std::string *this)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::string::operator=(this, (const std::string *)(v5 + 4));
      std::string::operator=(this + 1, (const std::string *)(v5 + 7));
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      this += 2;
      v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

unint64_t sub_20C241508(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20C241540(a1, a3, a4);
}

unint64_t sub_20C241540(unint64_t result, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_HashState *v5;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  pxrInternal__aapl__pxrReserved__ *v10;
  uint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__ *v13;

  v5 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
  v6 = *(int8x16_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - (_QWORD)v6;
  if (v7)
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 4);
    do
    {
      --v8;
      v9 = v6 + 7;
      result = sub_20C2415E0((uint64_t)v5, v6);
      v6 = v9;
    }
    while (v8);
  }
  v10 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 4);
    do
    {
      --v12;
      v13 = (pxrInternal__aapl__pxrReserved__ *)((char *)v10 + 48);
      result = sub_20C0305E8(v5, v10);
      v10 = v13;
    }
    while (v12);
  }
  return result;
}

unint64_t sub_20C2415E0(uint64_t a1, int8x16_t *a2)
{
  uint64_t v4;

  v4 = a2->u32[0];
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  sub_20C241640(a1, (uint64_t)&a2->i64[1]);
  return sub_20C02F108(a1, a2 + 6);
}

unint64_t sub_20C241640(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  char v4;

  result = pxrInternal__aapl__pxrReserved__::PcpSite::Hash::operator()((uint64_t)&v4, a2);
  if (*(_BYTE *)(a1 + 8))
    result += (*(_QWORD *)a1 + result + (*(_QWORD *)a1 + result) * (*(_QWORD *)a1 + result)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = result;
  return result;
}

BOOL sub_20C241694(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && pxrInternal__aapl__pxrReserved__::PcpSite::operator==(a1 + 8, a2 + 8)
      && pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)(a1 + 96), (double *)(a2 + 96));
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(_QWORD *this)
{
  *this = 0;
  this[1] = -1;
  return this;
}

{
  *this = 0;
  this[1] = -1;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this)
{
  _QWORD v1[4];
  char v2;

  if (*(_QWORD *)this)
  {
    ++*((_QWORD *)this + 1);
  }
  else
  {
    v1[0] = "pcp/iterator.cpp";
    v1[1] = "increment";
    v1[2] = 51;
    v1[3] = "void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment()";
    v2 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot increment invalid iterator");
  }
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this)
{
  _QWORD v1[4];
  char v2;

  if (*(_QWORD *)this)
  {
    --*((_QWORD *)this + 1);
  }
  else
  {
    v1[0] = "pcp/iterator.cpp";
    v1[1] = "decrement";
    v1[2] = 62;
    v1[3] = "void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement()";
    v2 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot decrement invalid iterator");
  }
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::advance(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this, uint64_t a2)
{
  _QWORD v2[4];
  char v3;

  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) += a2;
  }
  else
  {
    v2[0] = "pcp/iterator.cpp";
    v2[1] = "advance";
    v2[2] = 73;
    v2[3] = "void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::advance(difference_type)";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot advance invalid iterator");
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIterator::distance_to(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *a2)
{
  char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  char v7;

  if (*(_QWORD *)this && *(_QWORD *)a2)
  {
    if (*(_QWORD *)this == *(_QWORD *)a2)
      return *((_QWORD *)a2 + 1) - *((_QWORD *)this + 1);
    v3 = "pcp/iterator.cpp";
    v4 = "distance_to";
    v5 = 90;
    v6 = "PcpPrimIterator::difference_type pxrInternal__aapl__pxrReserved__::PcpPrimIterator::distance_to(const PcpPrimIterator &) const";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot compute distance for iterators from different prim indexes.");
  }
  else
  {
    v3 = "pcp/iterator.cpp";
    v4 = "distance_to";
    v5 = 84;
    v6 = "PcpPrimIterator::difference_type pxrInternal__aapl__pxrReserved__::PcpPrimIterator::distance_to(const PcpPrimIterator &) const";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid iterator");
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *a2)
{
  return *(_QWORD *)this == *(_QWORD *)a2 && *((_QWORD *)this + 1) == *((_QWORD *)a2 + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIterator::dereference@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_20C21137C(*this);
  return sub_20C241970(v4, (unsigned __int16 *)((*this)[1] + 4 * (_QWORD)this[1]), a2);
}

uint64_t sub_20C241970@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v6;
  _QWORD *Layers;
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)(**(_QWORD **)(a1 + 16) + 48 * *a2));
  Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
  sub_20C1034E8(&v12, (uint64_t *)(*Layers + 8 * a2[1]));
  sub_20C2314A8(a3, &v12, (_DWORD *)(*(_QWORD *)(a1 + 32) + 12 * *a2));
  result = v13;
  if (v13)
  {
    v9 = (unsigned int *)(v13 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C241A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode(uint64_t **this)
{
  return sub_20C21137C(*this);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIterator::_GetSiteRef(uint64_t **this)
{
  uint64_t v2;

  v2 = sub_20C21137C(*this);
  return sub_20C241A9C(v2, (unsigned __int16 *)((*this)[1] + 4 * (_QWORD)this[1]));
}

uint64_t sub_20C241A9C(uint64_t a1, unsigned __int16 *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)(**(_QWORD **)(a1 + 16) + 48 * *a2));
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3) + 8 * a2[1];
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::increment(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  _QWORD v1[4];
  char v2;

  if (*(_QWORD *)this)
  {
    ++*((_QWORD *)this + 1);
  }
  else
  {
    v1[0] = "pcp/iterator.cpp";
    v1[1] = "increment";
    v1[2] = 136;
    v1[3] = "void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::increment()";
    v2 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot increment invalid iterator");
  }
}

void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  _QWORD v1[4];
  char v2;

  if (*(_QWORD *)this)
  {
    --*((_QWORD *)this + 1);
  }
  else
  {
    v1[0] = "pcp/iterator.cpp";
    v1[1] = "decrement";
    v1[2] = 147;
    v1[3] = "void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement()";
    v2 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot decrement invalid iterator");
  }
}

void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::advance(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this, uint64_t a2)
{
  _QWORD v2[4];
  char v3;

  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) += a2;
  }
  else
  {
    v2[0] = "pcp/iterator.cpp";
    v2[1] = "advance";
    v2[2] = 158;
    v2[3] = "void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::advance(difference_type)";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot advance invalid iterator");
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::distance_to(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this, const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *a2)
{
  char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  char v7;

  if (*(_QWORD *)this && *(_QWORD *)a2)
  {
    if (*(_QWORD *)this == *(_QWORD *)a2)
      return *((_QWORD *)a2 + 1) - *((_QWORD *)this + 1);
    v3 = "pcp/iterator.cpp";
    v4 = "distance_to";
    v5 = 175;
    v6 = "PcpPropertyIterator::difference_type pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::distance_to(const P"
         "cpPropertyIterator &) const";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot compute distance for iterators from different property indexes");
  }
  else
  {
    v3 = "pcp/iterator.cpp";
    v4 = "distance_to";
    v5 = 169;
    v6 = "PcpPropertyIterator::difference_type pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::distance_to(const P"
         "cpPropertyIterator &) const";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid iterator");
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this, const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *a2)
{
  return *(_QWORD *)this == *(_QWORD *)a2 && *((_QWORD *)this + 1) == *((_QWORD *)a2 + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::dereference(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  return **(_QWORD **)this + 24 * *((_QWORD *)this + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::GetNode(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 24 * *((_QWORD *)this + 1) + 8);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::IsLocal(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return v1 < pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetNumLocalSpecs(*(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex **)this);
}

void sub_20C241D8C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_ENABLE_PARALLEL_LAYER_PREFETCH))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_ENABLE_PARALLEL_LAYER_PREFETCH);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_ENABLE_PARALLEL_LAYER_PREFETCH);
  }
}

void sub_20C241DD0()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpIsTimeScalingForLayerTimeCodesPerSecondDisabled(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
  if (!v1)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
    v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
  }
  return *v1;
}

void pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack(unsigned int ****a1, uint64_t **a2, char *a3, uint64_t **a4, uint64_t **a5, uint64_t *a6)
{
  unsigned __int8 v8;
  unsigned int ***v9;
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__::SdfSpec *i;
  unsigned int **v21;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v22;
  unsigned int v23;
  unsigned int **v24;
  uint64_t **v25;
  char *v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int v29;
  char *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  const char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  const char *Text;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v53;
  uint64_t Identifier;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  unint64_t v59;
  const char *v60;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v65;
  const char *v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v70;
  uint64_t v71;
  const char *v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  pxrInternal__aapl__pxrReserved__::SdfPath *v81;
  uint64_t *v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  uint64_t *v86;
  uint64_t *v87;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  int v100;
  int v101;
  unsigned int *v102;
  unsigned int *v103;
  uint64_t v104;
  const char *v105;
  char v106[80];
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v107;
  unsigned int **v108;
  unsigned int **v109;
  unint64_t v110;
  unsigned int ***v111;
  unsigned int ***v112;
  unsigned int ***v113;
  unsigned int ***v114;
  unsigned int *v115;
  _QWORD *v116[2];
  uint64_t *v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v116[0] = 0;
  v116[1] = 0;
  v115 = (unsigned int *)v116;
  v8 = atomic_load((unsigned __int8 *)&qword_2549881E0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549881E0))
  {
    v88 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v88)
      v88 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v89 = *((_QWORD *)v88 + 36);
    qword_2549881D8 = v89;
    if ((v89 & 7) != 0)
    {
      v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 2, v90));
      if ((v91 & 1) == 0)
        qword_2549881D8 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_2549881D8, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549881E0);
  }
  v9 = *a1;
  v111 = a1[1];
  v112 = v111;
  v113 = v9;
  v114 = v9;
  while (v112 != v114)
  {
    v10 = (uint64_t *)sub_20C22F36C((uint64_t)&v111, (uint64_t)a2, a3);
    v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v10);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetHints(v11) & 1) != 0)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v14 = (uint64_t *)sub_20C22F36C((uint64_t)&v111, v12, v13);
      v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v14);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v15, &v102);
      v16 = v109;
      if ((unint64_t)v109 >= v110)
      {
        v19 = sub_20C0D7E80(&v108, &v102);
      }
      else
      {
        v17 = v102;
        *v109 = v102;
        if (v17)
        {
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
        }
        v19 = (char *)(v16 + 1);
      }
      v109 = (unsigned int **)v19;
      for (i = (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v102; ; i = (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v107)
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(i);
        v21 = v109;
        if (v108 == v109)
          break;
        v22 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*(v109 - 1);
        v107 = v22;
        if (v22)
        {
          do
            v23 = __ldaxr((unsigned int *)v22);
          while (__stlxr(v23 + 1, (unsigned int *)v22));
          v21 = v109;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v21 - 1));
        v109 = v24;
        v25 = (uint64_t **)sub_20C0B0CA4(&v107);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v25, (uint64_t)&v118);
        sub_20C10429C((uint64_t)&v102, (uint64_t)&v118);
        sub_20BFE6A54((uint64_t)&v118);
        while (v103 != (unsigned int *)v105)
        {
          sub_20C0F8FF8((uint64_t)&v102, v26, &v118);
          v27 = v109;
          if ((unint64_t)v109 >= v110)
          {
            v30 = sub_20C0D7E80(&v108, &v118);
          }
          else
          {
            v28 = v118;
            *v109 = v118;
            if (v28)
            {
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 + 1, v28));
            }
            v30 = (char *)(v27 + 1);
          }
          v109 = (unsigned int **)v30;
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v118);
          sub_20C0F9084((uint64_t)&v102);
        }
        sub_20BFE6A54((uint64_t)v106);
        v31 = sub_20C0B0CA4(&v107);
        if (pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(v31, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_2549881D8))
        {
          v32 = sub_20C0B0CA4(&v107);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v32, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_2549881D8, (pxrInternal__aapl__pxrReserved__::VtValue *)&v118);
          if ((sub_20C0E3D20((pxrInternal__aapl__pxrReserved__::VtValue *)&v118) & 1) != 0)
          {
            v33 = sub_20C0B0CA4(&v107);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &v100);
            if ((v119 & 4) != 0)
              v36 = (uint64_t *)(*(uint64_t (**)(unsigned int **))((v119 & 0xFFFFFFFFFFFFFFF8) + 168))(&v118);
            else
              v36 = (uint64_t *)v118;
            v98 = (uint64_t *)*v36;
            v99 = v36 + 1;
            while (v98 != v99)
            {
              v37 = sub_20BFEB714(&v98, v34, v35);
              pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v37 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v100, (int *)&v97);
              v40 = sub_20BFEB714(&v98, v38, v39);
              pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v40 + 36), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v100, (int *)&v96);
              if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v97)
                && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v97))
              {
                if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v96)
                  && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v96))
                {
                  if (v97 != v96
                    && !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v96))
                  {
                    v117 = (uint64_t *)&v100;
                    v57 = sub_20C248A8C((uint64_t **)&v115, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v100, (uint64_t)&unk_20CAC184C, (_DWORD **)&v117);
                    v117 = &v97;
                    v58 = sub_20C0E4490((uint64_t **)v57 + 5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, (uint64_t)&unk_20CAC184C, (_DWORD **)&v117);
                    sub_20C01A074((int *)v58 + 9, &v96);
                    sub_20C01A0C8((int *)v58 + 10, (_DWORD *)&v96 + 1);
                  }
                }
                else
                {
                  v102 = (unsigned int *)"pcp/layerStack.cpp";
                  v103 = (unsigned int *)"Pcp_ComputeRelocationsForLayerStack";
                  v104 = 253;
                  v105 = "void pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack(const SdfLayerRefPtr"
                         "Vector &, SdfRelocatesMap *, SdfRelocatesMap *, SdfRelocatesMap *, SdfRelocatesMap *, SdfPathVector *)";
                  v106[0] = 0;
                  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v96);
                  v52 = (uint64_t *)sub_20C22F36C((uint64_t)&v111, v50, v51);
                  v53 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v52);
                  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v53);
                  if (*(char *)(Identifier + 23) >= 0)
                    v56 = Identifier;
                  else
                    v56 = *(_QWORD *)Identifier;
                  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v102, (pxrInternal__aapl__pxrReserved__ *)"Ignoring invalid relocate target path <%s> in layer @%s@", v55, Text, v56);
                }
              }
              else
              {
                v102 = (unsigned int *)"pcp/layerStack.cpp";
                v103 = (unsigned int *)"Pcp_ComputeRelocationsForLayerStack";
                v104 = 246;
                v105 = "void pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack(const SdfLayerRefPtrVe"
                       "ctor &, SdfRelocatesMap *, SdfRelocatesMap *, SdfRelocatesMap *, SdfRelocatesMap *, SdfPathVector *)";
                v106[0] = 0;
                v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v97);
                v44 = (uint64_t *)sub_20C22F36C((uint64_t)&v111, v42, v43);
                v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v44);
                v46 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v45);
                if (*(char *)(v46 + 23) >= 0)
                  v48 = v46;
                else
                  v48 = *(_QWORD *)v46;
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v102, (pxrInternal__aapl__pxrReserved__ *)"Ignoring invalid relocate source path <%s> in layer @%s@", v47, v41, v48);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v96 + 1);
              sub_20BFD265C(&v96);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97 + 1);
              sub_20BFD265C(&v97);
              sub_20BFEB78C(&v98);
            }
            v61 = sub_20C0B0CA4(&v107);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v61, &v102);
            v62 = a6[1];
            if (v62 >= a6[2])
            {
              v63 = sub_20C12C530(a6, &v102);
            }
            else
            {
              sub_20BFD38A4((_DWORD *)a6[1], &v102);
              sub_20BFD38DC((_DWORD *)(v62 + 4), (_DWORD *)&v102 + 1);
              v63 = v62 + 8;
            }
            a6[1] = v63;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v102 + 1);
            sub_20BFD265C(&v102);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v101);
            v64 = (uint64_t *)&v100;
          }
          else
          {
            v102 = (unsigned int *)"pcp/layerStack.cpp";
            v103 = (unsigned int *)"Pcp_ComputeRelocationsForLayerStack";
            v104 = 223;
            v105 = "void pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack(const SdfLayerRefPtrVector"
                   " &, SdfRelocatesMap *, SdfRelocatesMap *, SdfRelocatesMap *, SdfRelocatesMap *, SdfPathVector *)";
            v106[0] = 0;
            v59 = qword_2549881D8 & 0xFFFFFFFFFFFFFFF8;
            if ((qword_2549881D8 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v60 = (const char *)(v59 + 16);
              if (*(char *)(v59 + 39) < 0)
                v60 = *(const char **)v60;
            }
            else
            {
              v60 = "";
            }
            v65 = sub_20C0B0CA4(&v107);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v65, &v98);
            v66 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
            v69 = (uint64_t *)sub_20C22F36C((uint64_t)&v111, v67, v68);
            v70 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v69);
            v71 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v70);
            if (*(char *)(v71 + 23) >= 0)
              v72 = (const char *)v71;
            else
              v72 = *(const char **)v71;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v102, 1, (pxrInternal__aapl__pxrReserved__ *)"Field '%s' in <%s> in layer @%s@does not contain an SdfRelocatesMap", v60, v66, v72);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
            v64 = (uint64_t *)&v98;
          }
          sub_20BFD265C(v64);
          sub_20BF4C2D8((uint64_t)&v118);
        }
      }
      v102 = (unsigned int *)&v108;
      sub_20BFE69E4((void ***)&v102);
    }
    sub_20C22F508((uint64_t)&v111);
  }
  v102 = v115;
  v103 = (unsigned int *)v116;
  while (v102 != v103)
  {
    v73 = sub_20C242930(&v102, (uint64_t)a2, a3);
    v76 = *v73 + 48;
    v118 = *(unsigned int **)(*v73 + 40);
    v119 = v76;
    while (v118 != (unsigned int *)v119)
    {
      v77 = *sub_20C22F3EC(&v118, v74, v75);
      sub_20BFD6E54(&v108, (_DWORD *)(v77 + 28));
      sub_20BFD6EA4((_DWORD *)&v108 + 1, (_DWORD *)(v77 + 32));
      v80 = *sub_20C22F3EC(&v118, v78, v79);
      v81 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v80 + 36);
      v111 = (unsigned int ***)(v80 + 36);
      v82 = sub_20C0E4490(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v80 + 36), (uint64_t)&unk_20CAC184C, (_DWORD **)&v111);
      sub_20C01A074((int *)v82 + 9, &v108);
      sub_20C01A0C8((int *)v82 + 10, (_DWORD *)&v108 + 1);
      v111 = &v108;
      v83 = sub_20C0E4490(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, (uint64_t)&unk_20CAC184C, (_DWORD **)&v111);
      sub_20C01A074((int *)v83 + 9, (_DWORD *)(v80 + 36));
      sub_20C01A0C8((int *)v83 + 10, (_DWORD *)(v80 + 40));
      sub_20BFD6E54(&v111, &v108);
      sub_20BFD6EA4((_DWORD *)&v111 + 1, (_DWORD *)&v108 + 1);
      while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v111))
      {
        v84 = (char *)sub_20BFE4AF0((uint64_t)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v111);
        v85 = v84;
        if (a3 + 8 != v84)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v98, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v84 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v84 + 36), 1);
          sub_20BFD3EBC((int *)&v108, (int *)&v98);
          sub_20BFD3F10((int *)&v108 + 1, (int *)&v98 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
          sub_20BFD265C(&v98);
          sub_20C01A074((int *)&v111, (_DWORD *)v85 + 9);
          sub_20C01A0C8((int *)&v111 + 1, (_DWORD *)v85 + 10);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, &v98);
        sub_20BFD3EBC((int *)&v111, (int *)&v98);
        sub_20BFD3F10((int *)&v111 + 1, (int *)&v98 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
        sub_20BFD265C(&v98);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
      sub_20BFD265C(&v111);
      v111 = (unsigned int ***)(v80 + 36);
      v86 = sub_20C0E4490((uint64_t **)a3, v81, (uint64_t)&unk_20CAC184C, (_DWORD **)&v111);
      sub_20C01A074((int *)v86 + 9, &v108);
      sub_20C01A0C8((int *)v86 + 10, (_DWORD *)&v108 + 1);
      v111 = &v108;
      v87 = sub_20C0E4490(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, (uint64_t)&unk_20CAC184C, (_DWORD **)&v111);
      sub_20C01A074((int *)v87 + 9, v81);
      sub_20C01A0C8((int *)v87 + 10, (_DWORD *)(v80 + 40));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
      sub_20BFD265C(&v108);
      sub_20C22F464(&v118);
    }
    sub_20C2429A8(&v102);
  }
  sub_20C248A0C((uint64_t)&v115, v116[0]);
}

void sub_20C24276C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_2549881E0);
  sub_20C248A0C(v1 - 216, *(_QWORD **)(v1 - 208));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C242930(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, s"
            "td::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator->("
            ") [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, std::map<pxrInternal__aapl__pxrReserved__::SdfPat"
            "h, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C2429A8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>"
            ">::operator++() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, std::map<pxrInternal__aapl__pxrRese"
            "rved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  void *v14;
  int v15;
  uint64_t v16;
  void *__s1;
  size_t __n;
  unsigned __int8 v20;
  _BYTE v21[48];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20C1FF3C0(a1);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v21, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(v2 + 56));
  v3 = sub_20C1FF3C0(a1);
  v4 = *(_QWORD *)(v3 + 184);
  v5 = *(_QWORD *)(v3 + 192);
  if (v4 == v5)
  {
LABEL_23:
    v16 = 0;
  }
  else
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)v4, v4 + 16, (uint64_t)&__s1);
      if ((v20 & 0x80u) == 0)
        v6 = v20;
      else
        v6 = __n;
      v7 = *(unsigned __int8 *)(v4 + 63);
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v4 + 48);
      if (v6 != v7)
        break;
      if (v8 >= 0)
        v9 = (unsigned __int8 *)(v4 + 40);
      else
        v9 = *(unsigned __int8 **)(v4 + 40);
      if ((v20 & 0x80) != 0)
      {
        v14 = __s1;
        v15 = memcmp(__s1, v9, __n);
        operator delete(v14);
        if (v15)
          goto LABEL_26;
      }
      else if (v20)
      {
        v10 = 0;
        do
        {
          v11 = *((unsigned __int8 *)&__s1 + v10);
          v12 = v9[v10];
        }
        while (v11 == v12 && v20 - 1 != v10++);
        if (v11 != v12)
          goto LABEL_26;
      }
      v4 += 64;
      if (v4 == v5)
        goto LABEL_23;
    }
    if ((v20 & 0x80) != 0)
      operator delete(__s1);
LABEL_26:
    v16 = 1;
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v21);
  return v16;
}

void sub_20C242BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 24;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeLayerStackTimeCodesPerSecond(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _BOOL8 result;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  double TimeCodesPerSecond;

  v4 = (uint64_t *)(sub_20C1FF3C0(a1) + 40);
  v5 = (uint64_t *)(sub_20C1FF3C0(a1) + 24);
  if (sub_20BEB560C(a2, (uint64_t)v4) || (result = sub_20BEB560C(a2, (uint64_t)v5)))
  {
    if (sub_20C242C64(v4, v5))
      v7 = v4;
    else
      v7 = v5;
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v7);
    TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v8);
    return TimeCodesPerSecond != *(double *)(sub_20C1FF3C0(a1) + 168);
  }
  return result;
}

uint64_t sub_20C242C64(uint64_t *a1, uint64_t *a2)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;

  v4 = sub_20BFD2F78(a1);
  if (!(v5 & 1 | (unint64_t)v4))
    return 0;
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasTimeCodesPerSecond(v6) & 1) != 0)
    return 1;
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasTimeCodesPerSecond(v8) & 1) != 0)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramesPerSecond(v9);
}

pxrInternal__aapl__pxrReserved__::PcpLayerStack *pxrInternal__aapl__pxrReserved__::PcpLayerStack::PcpLayerStack(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2, const pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *RootLayerStackIdentifier;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *v18;
  uint64_t (*v19)(uint64_t *);
  char v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD **v28;
  _QWORD *v29;
  const char *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD **v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t FileFormatTarget;
  uint64_t MutedLayers;
  char *v42;
  const char *v43;
  _QWORD **v44[2];
  char v45;
  const char *v46;
  int v47;
  _QWORD **v48;
  uint64_t v49;
  uint64_t v50;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_24C52D1D0;
  *((_QWORD *)this + 3) = *(_QWORD *)a2;
  v6 = (_QWORD *)((char *)this + 24);
  v7 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 4) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 6) = v10;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  sub_20BFB73DC((char *)this + 56, *((_QWORD **)a2 + 4), *((_QWORD **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 7);
  v13 = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 11) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *((_QWORD *)a2 + 9);
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 12) = v16;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_QWORD *)this + 33) = (char *)this + 272;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 36) = (char *)this + 296;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = (char *)this + 320;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = (char *)this + 344;
  *((_BYTE *)this + 360) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = 0;
  RootLayerStackIdentifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetRootLayerStackIdentifier(a3);
  v18 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((uint64_t)a2 + 56, (uint64_t)RootLayerStackIdentifier);
  if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)a2, (uint64_t)v18) & 1) != 0)
  {
    v49 = 0;
    v50 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Find(a3, v18, &v49);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(&v42);
  v44[0] = 0;
  v19 = sub_20C20BDB4(&v49);
  if (v20 & 1 | (unint64_t)v19)
  {
    v21 = sub_20C1FF3C0(&v49);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute((uint64_t *)a2, RootLayerStackIdentifier, *(const char ***)(v21 + 392), &v46);
    sub_20BDE881C(&v42, (uint64_t *)&v46);
    v22 = v48;
    v48 = 0;
    sub_20BF49F14(v44, v22);
    sub_20BF49F14(&v48, 0);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v46);
    v23 = sub_20C1FF3C0(&v49);
    if (sub_20C24675C((uint64_t)&v42, *(uint64_t **)(v23 + 392)))
    {
      v24 = sub_20C1FF3C0(&v49);
      *((_QWORD *)this + 49) = *(_QWORD *)(v24 + 392);
      v25 = *(_QWORD *)(v24 + 400);
      *((_QWORD *)this + 50) = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      goto LABEL_24;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute((uint64_t *)a2, RootLayerStackIdentifier, 0, &v46);
    sub_20BDE881C(&v42, (uint64_t *)&v46);
    v28 = v48;
    v48 = 0;
    sub_20BF49F14(v44, v28);
    sub_20BF49F14(&v48, 0);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v46);
  }
  v29 = operator new(0x30uLL);
  v29[2] = 0;
  *v29 = &unk_24C52D228;
  v29[1] = 0;
  v30 = v43;
  v29[3] = v42;
  v29[4] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = v44[0];
  v44[0] = 0;
  v29[5] = v33;
  *((_QWORD *)this + 49) = v29 + 3;
  *((_QWORD *)this + 50) = v29;
LABEL_24:
  sub_20BF49F14(v44, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v42);
  v34 = v50;
  if (v50)
  {
    v35 = (unsigned int *)(v50 + 8);
    do
    {
      v36 = __ldxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 1065353216;
  *((_BYTE *)this + 448) = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_IsUsd(a3);
  sub_20BEB59B0((uint64_t)&v46, (uint64_t)"Pcp", (uint64_t)"PcpLayerStack::PcpLayerStack");
  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator BOOL(v6)
    || (v42 = "pcp/layerStack.cpp",
        v43 = "PcpLayerStack",
        v44[0] = (_QWORD **)493,
        v44[1] = (_QWORD **)"pxrInternal__aapl__pxrReserved__::PcpLayerStack::PcpLayerStack(const PcpLayerStackIdentifier"
                            " &, const Pcp_LayerStackRegistry &)",
        v45 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v42, "_identifier", 0) & 1) != 0))
  {
    FileFormatTarget = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetFileFormatTarget(a3);
    MutedLayers = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetMutedLayers(a3);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_Compute((uint64_t)this, FileFormatTarget, MutedLayers);
    if (!*((_BYTE *)this + 448))
      pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack((unsigned int ****)this + 15, (uint64_t **)this + 30, (char *)this + 264, (uint64_t **)this + 36, (uint64_t **)this + 39, (uint64_t *)this + 46);
  }
  while (v47--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v46);
  return this;
}

void sub_20C243164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a11, unsigned int **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  const void *v32;

  sub_20BEB24F4((uint64_t)&a22);
  sub_20BEB3F28(v23);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v25 + 144));
  a22 = a13;
  sub_20BFD6F90(&a22);
  sub_20C248D4C(v25 + 88, *(_QWORD **)(v22 + 344));
  sub_20BFE4CE8(a14, *(_QWORD **)(v22 + 320));
  sub_20BFE4CE8(a15, *(_QWORD **)(v22 + 296));
  sub_20BFE4CE8(v26, *(_QWORD **)(v22 + 272));
  sub_20BFE4CE8(a16, *(_QWORD **)(v22 + 248));
  sub_20BF1C150(a9, 0);
  sub_20BDECAB8(a10, *(char **)(v22 + 216));
  a22 = (void **)(v25 - 64);
  sub_20C248C58(&a22);
  sub_20C1075E8(a11);
  a22 = (void **)(v25 - 104);
  sub_20C248BE8(&a22);
  sub_20C248B78(&a22);
  v28 = *(unsigned int **)(v22 + 112);
  if (v28)
  {
    v29 = v28 + 2;
    do
    {
      v30 = __ldxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
  }
  sub_20C20D09C(v24);
  sub_20BEBCE60(a12, v32);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v22);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::_Compute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  double TimeCodesPerSecond;
  uint64_t (*v11)(uint64_t *);
  char v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t Identifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  double v16;
  double *v17;
  double v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v19;
  uint64_t (*v20)(uint64_t *);
  char v21;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v22;
  void **v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  std::string __p;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v28;
  double v29[2];
  __int128 v30;
  uint64_t v31;
  double v32[2];
  __int128 *v33;
  _QWORD *v34[2];
  __int128 v35;
  uint64_t v36;
  std::string v37;
  _QWORD v38[3];
  _BYTE v39[48];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 56;
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v39, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(a2, v38);
  memset(&v37, 0, sizeof(v37));
  v35 = 0uLL;
  v36 = 0;
  v34[0] = 0;
  v34[1] = 0;
  v33 = (__int128 *)v34;
  v7 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
  if (!v7)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
    v7 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
  }
  v8 = *v7;
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)(a1 + 24));
  TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v9);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v32, 0.0, 1.0);
  *(double *)(a1 + 168) = TimeCodesPerSecond;
  v11 = sub_20BFD2F78((_QWORD *)(a1 + 40));
  if (v12 & 1 | (unint64_t)v11)
  {
    v30 = 0uLL;
    v31 = 0;
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)(a1 + 40));
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
    if (pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::IsLayerMuted(a3, (uint64_t *)(a1 + 40), Identifier, &v30))
    {
      sub_20BE74FC0((uint64_t **)(a1 + 208), (const void **)&v30, (uint64_t)&v30);
LABEL_15:
      if (SHIBYTE(v31) < 0)
        operator delete((void *)v30);
      goto LABEL_17;
    }
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)(a1 + 40));
    v16 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v15);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v29, 0.0, 1.0);
    if (sub_20C242C64((uint64_t *)(a1 + 40), (uint64_t *)(a1 + 24)))
    {
      *(double *)(a1 + 168) = v16;
      if (!v8)
      {
        v17 = v32;
        v18 = v16 / TimeCodesPerSecond;
LABEL_11:
        v17[1] = v18;
      }
    }
    else if (!v8)
    {
      v17 = v29;
      v18 = *(double *)(a1 + 168) / v16;
      goto LABEL_11;
    }
    memset(&__p, 0, sizeof(__p));
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack(a1, (uint64_t *)(a1 + 40), (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v29, v6, (std::string::size_type)v38, &__p, a3, (uint64_t **)&v33, &v28, v16, (uint64_t)&v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20C246334((uint64_t *)&v28, &v37);
    sub_20C1075E8(&v28);
    goto LABEL_15;
  }
LABEL_17:
  pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack(a1, (uint64_t *)(a1 + 24), (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v32, v6, (std::string::size_type)v38, &v37, a3, (uint64_t **)&v33, &v30, TimeCodesPerSecond, (uint64_t)&v35);
  v19 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v30;
  *(_QWORD *)&v30 = 0;
  sub_20BF1D8F4(a1 + 176, v19);
  sub_20C1075E8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v30);
  v20 = sub_20C2439C8((_QWORD *)(a1 + 104));
  if (v21 & 1 | (unint64_t)v20)
  {
    v22 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C243A1C((uint64_t *)(a1 + 104));
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayers(v22, (const pxrInternal__aapl__pxrReserved__::PcpLayerStack *)a1);
  }
  if ((_QWORD)v35 == *((_QWORD *)&v35 + 1))
  {
    sub_20BF1C150((void ***)(a1 + 232), 0);
  }
  else
  {
    v23 = (void **)operator new(0x18uLL);
    *v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
    sub_20BF1C150((void ***)(a1 + 232), v23);
    v24 = *(__int128 **)(a1 + 232);
    v25 = *v24;
    *v24 = v35;
    v35 = v25;
    v26 = *((_QWORD *)v24 + 2);
    *((_QWORD *)v24 + 2) = v36;
    v36 = v26;
  }
  sub_20BFF29AC((uint64_t)&v33, v34[0]);
  v33 = &v35;
  sub_20BDE9EB0((void ***)&v33);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)v38, (_QWORD *)v38[1]);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v39);
}

void sub_20C243668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char *a28,_QWORD *a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  sub_20BFF29AC((uint64_t)&a28, a29);
  a28 = &a31;
  sub_20BDE9EB0((void ***)&a28);
  if (a39 < 0)
    operator delete(__p);
  sub_20BDE9D48(v39 - 160, *(_QWORD **)(v39 - 152));
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v39 - 136));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::~PcpLayerStack(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void **v18;

  *(_QWORD *)this = off_24C52D1D0;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowLayers(this);
  v2 = sub_20C2439C8((_QWORD *)this + 13);
  if (v3 & 1 | (unint64_t)v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C243A1C((uint64_t *)this + 13);
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayersAndRemove(v4, (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)((char *)this + 24), this);
  }
  sub_20BEB3F28((uint64_t)this + 408);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpLayerStack *)((char *)this + 392));
  v18 = (void **)((char *)this + 368);
  sub_20BFD6F90(&v18);
  sub_20C248D4C((uint64_t)this + 336, *((_QWORD **)this + 43));
  sub_20BFE4CE8((uint64_t)this + 312, *((_QWORD **)this + 40));
  sub_20BFE4CE8((uint64_t)this + 288, *((_QWORD **)this + 37));
  sub_20BFE4CE8((uint64_t)this + 264, *((_QWORD **)this + 34));
  sub_20BFE4CE8((uint64_t)this + 240, *((_QWORD **)this + 31));
  sub_20BF1C150((void ***)this + 29, 0);
  sub_20BDECAB8((uint64_t)this + 208, *((char **)this + 27));
  v18 = (void **)((char *)this + 184);
  sub_20C248C58(&v18);
  sub_20C1075E8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 22);
  v18 = (void **)((char *)this + 144);
  sub_20C248BE8(&v18);
  v18 = (void **)((char *)this + 120);
  sub_20C248B78(&v18);
  v5 = (unsigned int *)*((_QWORD *)this + 14);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpLayerStack *)((char *)this + 80));
  v18 = (void **)((char *)this + 56);
  sub_20BDE9EB0(&v18);
  v10 = (unsigned int *)*((_QWORD *)this + 6);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 4);
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  sub_20BEBCE60((unsigned int **)this + 2, v9);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpLayerStack::~PcpLayerStack(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowLayers(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *i;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6;
  uint64_t j;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;

  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)*((_QWORD *)this + 16);
  v3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)*((_QWORD *)this + 15);
  while (v2 != v3)
    v2 = sub_20C103234(v2 - 1);
  *((_QWORD *)this + 16) = v3;
  v5 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)*((_QWORD *)this + 18);
  for (i = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)*((_QWORD *)this + 19);
        i != v5;
  *((_QWORD *)this + 19) = v5;
  v6 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  v11 = 0;
  sub_20BF1D8F4((_DWORD)this + 176, v6);
  sub_20C1075E8(&v11);
  v8 = *((_QWORD *)this + 23);
  for (j = *((_QWORD *)this + 24); j != v8; sub_20C248CDC((uint64_t)this + 200, j))
    j -= 64;
  v10 = (char *)*((_QWORD *)this + 27);
  v9 = (_QWORD *)((char *)this + 216);
  *(v9 - 3) = v8;
  sub_20BDECAB8((uint64_t)(v9 - 1), v10);
  *(v9 - 1) = v9;
  *v9 = 0;
  v9[1] = 0;
  sub_20C23FB80((uint64_t)(v9 + 24));
}

void sub_20C2439B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1075E8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t (*sub_20C2439C8(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20C248DD8;
}

uint64_t sub_20C243A1C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::Pcp_LayerStackRegistry>::operator->() const [PtrTemplate = pxrInternal__aapl_"
            "_pxrReserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC7A38 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::Apply(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  int v8;
  BOOL v9;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v11;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *RootLayerStackIdentifier;
  const void ****v13;
  uint64_t *v14;
  const char *v15;
  const char *v16;
  unint64_t *v17;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v18;
  uint64_t FileFormatTarget;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v20;
  uint64_t MutedLayers;
  char *v22;
  uint64_t **v23;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v30;
  char *v31;
  const char *v32;
  const char *v33;
  _QWORD **v34[6];

  v34[5] = *(_QWORD ***)MEMORY[0x24BDAC8D0];
  v6 = a2[4];
  v7 = a2[3];
  v8 = a2[160];
  if (a2[4])
    v9 = 0;
  else
    v9 = v7 == 0;
  if (!v9 || v8 != 0)
  {
    v30 = this;
    if (v6)
    {
      v11 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C243A1C((uint64_t *)this + 13);
      RootLayerStackIdentifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetRootLayerStackIdentifier(v11);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute((uint64_t *)this + 3, RootLayerStackIdentifier, 0, &v32);
      sub_20C243DE0(&v30, (const void ****)v34, (uint64_t *)&v32);
      sub_20BF49F14(v34, 0);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v32);
      goto LABEL_16;
    }
    if (v7)
    {
      v13 = (const void ****)(a2 + 152);
      if (v8)
      {
LABEL_12:
        v14 = (uint64_t *)(a2 + 168);
LABEL_15:
        sub_20C243DE0(&v30, v13, v14);
        goto LABEL_16;
      }
    }
    else
    {
      v13 = (const void ****)(*((_QWORD *)this + 49) + 16);
      if (v8)
        goto LABEL_12;
    }
    v14 = (uint64_t *)*((_QWORD *)this + 49);
    goto LABEL_15;
  }
LABEL_16:
  if (*a2 | a2[1])
  {
    v15 = (const char *)*((_QWORD *)this + 15);
    v16 = (const char *)*((_QWORD *)this + 16);
    v32 = v15;
    v33 = v16;
    while (v15 != v16)
    {
      v17 = (unint64_t *)sub_20C244004((uint64_t *)&v32, (uint64_t)a2, a3);
      pxrInternal__aapl__pxrReserved__::PcpLifeboat::Retain((uint64_t)a3, v17);
      sub_20C244080(&v32);
      v15 = v32;
      v16 = v33;
    }
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowLayers(this);
    v18 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C243A1C((uint64_t *)this + 13);
    FileFormatTarget = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetFileFormatTarget(v18);
    v20 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C243A1C((uint64_t *)this + 13);
    MutedLayers = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetMutedLayers(v20);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_Compute((uint64_t)this, FileFormatTarget, MutedLayers);
  }
  if (!*((_BYTE *)this + 448) && a2[4] | a2[2])
  {
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowRelocations(this);
    v23 = (uint64_t **)((char *)this + 240);
    if (a2[4])
    {
      pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack((unsigned int ****)this + 15, v23, (char *)this + 264, (uint64_t **)this + 36, (uint64_t **)this + 39, (uint64_t *)this + 46);
    }
    else
    {
      if (v23 != (uint64_t **)(a2 + 32))
        sub_20C0E3D98((uint64_t **)this + 30, *((_QWORD **)a2 + 4), (_QWORD *)a2 + 5);
      if ((unsigned __int8 *)((char *)this + 264) != a2 + 8)
        sub_20C0E3D98((uint64_t **)this + 33, *((_QWORD **)a2 + 1), (_QWORD *)a2 + 2);
      if ((unsigned __int8 *)((char *)this + 288) != a2 + 56)
        sub_20C0E3D98((uint64_t **)this + 36, *((_QWORD **)a2 + 7), (_QWORD *)a2 + 8);
      if ((unsigned __int8 *)((char *)this + 312) != a2 + 80)
        sub_20C0E3D98((uint64_t **)this + 39, *((_QWORD **)a2 + 10), (_QWORD *)a2 + 11);
      if ((unsigned __int8 *)((char *)this + 368) != a2 + 104)
        sub_20C0E29B0((uint64_t)this + 368, *((_DWORD **)a2 + 13), *((_DWORD **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
    }
    v24 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)*((_QWORD *)this + 42);
    v25 = (char *)this + 344;
    v30 = v24;
    v31 = (char *)this + 344;
    while (v24 != (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)v25)
    {
      v26 = *(_QWORD *)(*sub_20C2441AC(&v30, (uint64_t)v23, v22) + 40);
      v29 = sub_20C2441AC(&v30, v27, v28);
      sub_20C244224((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v29 + 32), (uint64_t)&v32);
      (*(void (**)(uint64_t, const char **))(*(_QWORD *)v26 + 24))(v26, &v32);
      sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v32);
      sub_20C244498(&v30);
      v24 = v30;
      v25 = v31;
    }
  }
}

void sub_20C243DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD ***v3;
  va_list va;

  va_start(va, a3);
  sub_20BF49F14(v3, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C243DE0(_QWORD *a1, const void ****a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v7;
  uint64_t RootLayerStackIdentifier;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *v9;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v10;
  uint64_t (*v11)(uint64_t *);
  char v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;

  v5 = *a1;
  v6 = (uint64_t *)(*a1 + 104);
  v7 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C243A1C(v6);
  RootLayerStackIdentifier = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetRootLayerStackIdentifier(v7);
  v9 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((uint64_t)a3, RootLayerStackIdentifier);
  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)v9, v5 + 24))
  {
    if (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==(*(uint64_t **)(v5 + 392), a3))
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(*(_QWORD *)(v5 + 392) + 16), a2);
    }
    else
    {
      sub_20C24680C(a3, (pxrInternal__aapl__pxrReserved__::VtDictionary *)a2, &v26);
      sub_20BDE82DC(v5 + 392, &v26);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  else
  {
    v10 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C243A1C(v6);
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Find(v10, v9, &v26);
    v11 = sub_20C20BDB4(&v26);
    if (v12 & 1 | (unint64_t)v11)
    {
      v13 = sub_20C1FF3C0((uint64_t *)&v26);
      sub_20BDE881C((_QWORD *)(v5 + 392), (uint64_t *)(v13 + 392));
      if (pxrInternal__aapl__pxrReserved__::operator!=(a2, (uint64_t *)(*(_QWORD *)(v5 + 392) + 16), v14))pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(*(_QWORD *)(v5 + 392) + 16), a2);
    }
    else
    {
      sub_20C24680C(a3, (pxrInternal__aapl__pxrReserved__::VtDictionary *)a2, &v25);
      sub_20BDE82DC(v5 + 392, &v25);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    v21 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v22 = (unsigned int *)(*((_QWORD *)&v26 + 1) + 8);
      do
      {
        v23 = __ldxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
  }
}

void sub_20C243FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C244004(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfRefPt"
            "r<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved"
            "__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C244078()
{
  JUMPOUT(0x20C244028);
}

_QWORD *sub_20C244080(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = std::vector<pxrInternal__aa"
            "pl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowRelocations(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  char *v2;
  _DWORD *i;
  _DWORD *v4;

  v2 = (char *)this + 248;
  sub_20BFE4CE8((uint64_t)this + 240, *((_QWORD **)this + 31));
  *((_QWORD *)v2 - 1) = v2;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  sub_20BFE4CE8((uint64_t)(v2 + 16), *((_QWORD **)v2 + 3));
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = v2 + 24;
  sub_20BFE4CE8((uint64_t)(v2 + 40), *((_QWORD **)v2 + 6));
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = 0;
  *((_QWORD *)v2 + 5) = v2 + 48;
  sub_20BFE4CE8((uint64_t)(v2 + 64), *((_QWORD **)v2 + 9));
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 8) = v2 + 72;
  v4 = (_DWORD *)*((_QWORD *)v2 + 15);
  for (i = (_DWORD *)*((_QWORD *)v2 + 16); i != v4; sub_20BFD6F64((uint64_t)this + 384, i))
    i -= 2;
  *((_QWORD *)this + 47) = v4;
}

_QWORD *sub_20C2441AC(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, s"
            "td::unique_ptr<pxrInternal__aapl__pxrReserved__::PcpMapExpression::Variable>, pxrInternal__aapl__pxrReserved"
            "__::SdfPath::FastLessThan>>::operator->() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, std::uniq"
            "ue_ptr<pxrInternal__aapl__pxrReserved__::PcpMapExpression::Variable>, pxrInternal__aapl__pxrReserved__::SdfP"
            "ath::FastLessThan>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C244224(uint64_t HasPrefix@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  uint64_t **v20;
  _DWORD *v21[2];
  _OWORD v22[2];
  int v23;
  uint64_t *v24;
  _QWORD *v25[2];

  v4 = HasPrefix;
  v25[0] = 0;
  v25[1] = 0;
  v24 = (uint64_t *)v25;
  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  v7 = (_QWORD *)(HasPrefix + 248);
  v6 = *(_QWORD **)(HasPrefix + 248);
  if (v6)
  {
    v8 = (_QWORD *)(HasPrefix + 248);
    do
    {
      HasPrefix = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 28), a2);
      v9 = v6 + 1;
      if (!(_DWORD)HasPrefix)
      {
        v9 = v6;
        v8 = v6;
      }
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v8 != v7)
    {
      do
      {
        HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a2);
        if ((HasPrefix & 1) == 0)
          break;
        sub_20C246960(&v24, (_QWORD *)((char *)v8 + 28), (_DWORD *)v8 + 7);
        HasPrefix = (uint64_t)sub_20C2215D8((uint64_t)v22, (unsigned int *)v8 + 9, (_DWORD *)v8 + 9);
        v10 = (_QWORD *)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v8[2];
            v12 = *v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != v7);
    }
  }
  v13 = *(_QWORD **)(v4 + 296);
  if (v13)
  {
    v14 = (unsigned int *)(v4 + 296);
    v15 = (unsigned int *)(v4 + 296);
    do
    {
      HasPrefix = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), a2);
      v16 = v13 + 1;
      if (!(_DWORD)HasPrefix)
      {
        v16 = v13;
        v15 = (unsigned int *)v13;
      }
      v13 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v15 != v14)
    {
      do
      {
        HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 + 7), a2);
        if ((HasPrefix & 1) == 0)
          break;
        HasPrefix = (uint64_t)sub_20C0AD934(v22, v15 + 9);
        if (!HasPrefix)
        {
          sub_20C246960(&v24, (unint64_t *)(v15 + 7), v15 + 7);
          HasPrefix = (uint64_t)sub_20C2215D8((uint64_t)v22, v15 + 9, v15 + 9);
        }
        v17 = (unsigned int *)*((_QWORD *)v15 + 1);
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = *(unsigned int **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (unsigned int *)*((_QWORD *)v15 + 2);
            v12 = *(_QWORD *)v18 == (_QWORD)v15;
            v15 = v18;
          }
          while (!v12);
        }
        v15 = v18;
      }
      while (v18 != v14);
    }
  }
  v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)HasPrefix);
  v21[0] = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v19);
  v20 = sub_20C246A40(&v24, (unint64_t *)v21[0], (uint64_t)&unk_20CAC184C, v21);
  sub_20C01A074((int *)v20 + 9, v19);
  sub_20C01A0C8((int *)v20 + 10, (_DWORD *)v19 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v21, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(&v24, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v21, a3);
  sub_20C220E58((uint64_t)v22);
  sub_20BFE4CE8((uint64_t)&v24, v25[0]);
}

void sub_20C244460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  sub_20C220E58((uint64_t)&a11);
  sub_20BFE4CE8((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C244498(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, std::unique_ptr<pxrInternal__aapl__pxrReserved__::PcpMapExpression::Variable>, pxrInternal__aap"
            "l__pxrReserved__::SdfPath::FastLessThan>>::operator++() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath, std::unique_ptr<pxrInternal__aapl__pxrReserved__::PcpMapExpression::Variable>, pxrInternal__aapl__pxrRe"
            "served__::SdfPath::FastLessThan>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 120;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetSessionLayers@<X0>(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t result;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD v9[4];
  char v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (unint64_t)sub_20BFD2F78((_QWORD *)this + 5);
  if (v5 & 1 | result)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 15);
    v7 = (uint64_t *)*((_QWORD *)this + 16);
    if (v6 == v7)
    {
      v8 = (uint64_t *)*((_QWORD *)this + 15);
    }
    else
    {
      while (!sub_20C1020E4((_QWORD *)this + 3, v6))
      {
        if (++v6 == v7)
        {
          v6 = v7;
          break;
        }
      }
      v8 = v6;
      v6 = (uint64_t *)*((_QWORD *)this + 16);
    }
    if (v8 != v6)
      return (unint64_t)sub_20C248E18(a2, (_QWORD *)*a2, *((uint64_t **)this + 15), v8, ((uint64_t)v8 - *((_QWORD *)this + 15)) >> 3);
    v9[0] = "pcp/layerStack.cpp";
    v9[1] = "GetSessionLayers";
    v9[2] = 675;
    v9[3] = "SdfLayerHandleVector pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetSessionLayers() const";
    v10 = 0;
    result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "rootLayerIt != _layers.end()", 0);
    if ((result & 1) != 0)
      return (unint64_t)sub_20C248E18(a2, (_QWORD *)*a2, *((uint64_t **)this + 15), v8, ((uint64_t)v8 - *((_QWORD *)this + 15)) >> 3);
  }
  return result;
}

void sub_20C244640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB4844((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerTree(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 176;
}

pxrInternal__aapl__pxrReserved__::SdfLayerOffset *pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v9;

  v2 = a1[16] - a1[15];
  if (!v2)
    return 0;
  v5 = 0;
  v6 = v2 >> 3;
  v7 = -40;
  while (!sub_20C1020E4(a2, (_QWORD *)(a1[15] + v5)))
  {
    v7 -= 56;
    v5 += 8;
    if (!--v6)
      return 0;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1[18] - v7);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v9))
    return 0;
  else
    return v9;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v7;

  v2 = (_QWORD *)a1[15];
  v3 = a1[16] - (_QWORD)v2;
  if (!v3)
    return 0;
  v4 = v3 >> 3;
  v5 = -40;
  while (*v2 != *a2)
  {
    v5 -= 56;
    ++v2;
    if (!--v4)
      return 0;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1[18] - v5);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v7))
    return 0;
  else
    return v7;
}

pxrInternal__aapl__pxrReserved__::SdfLayerOffset *pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this, unint64_t a2)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v4;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *result;
  int v7;
  _QWORD v8[4];
  char v9;

  v3 = *((_QWORD *)this + 18);
  if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 19) - v3) >> 3) <= a2)
  {
    v8[0] = "pcp/layerStack.cpp";
    v8[1] = "GetLayerOffsetForLayer";
    v8[2] = 727;
    v8[3] = "const SdfLayerOffset *pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(size_t) const";
    v9 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "layerIdx < _mapFunctions.size()", 0);
    result = 0;
    if (!v7)
      return result;
    v3 = *((_QWORD *)this + 18);
  }
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(v3 + 56 * a2 + 40);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v4))
    return 0;
  else
    return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetMutedLayers(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 208;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  v3 = a2[1];
  if (v3)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
      v3 = *a2;
    else
      v3 = 0;
  }
  v6 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  if (v6 == v5)
    return 0;
  v7 = v6 + 8;
  do
  {
    v8 = *(_QWORD *)(v7 - 8);
    result = v8 == v3;
    v10 = v8 == v3 || v7 == v5;
    v7 += 8;
  }
  while (!v10);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 120);
  v3 = *(_QWORD **)(a1 + 128);
  if (v2 != v3)
  {
    while (*v2 != *a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 128);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesSourceToTarget(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 240;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesTargetToSource(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 264;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesSourceToTarget(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 288;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesTargetToSource(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 312;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetPathsToPrimsWithRelocates(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 368;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetExpressionForRelocatesAtPath(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD v17[8];

  v17[7] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 360;
  sub_20BEB3FEC((uint64_t)v17, (uint64_t)this + 360);
  v5 = (_QWORD *)*((_QWORD *)this + 43);
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)a2;
  v7 = (_QWORD *)((char *)this + 344);
  do
  {
    v8 = v5[4];
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != (_QWORD *)((char *)this + 344) && v6 >= v7[4])
    v11 = v7[5];
  else
LABEL_12:
    v11 = 0;
  v12 = (_BYTE *)v17[0];
  if (v17[0])
  {
    __dmb(0xBu);
    *v12 = 0;
  }
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  sub_20C244224((uint64_t)this, a2, (uint64_t)v17);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::NewVariable((uint64_t)v17, &v16);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v17);
  sub_20BEB3FEC((uint64_t)v17, (uint64_t)v4);
  v14 = sub_20C2491C4((uint64_t)this + 336, (unint64_t *)a2, a2, &v16)[5];
  v15 = (_BYTE *)v17[0];
  if (v17[0])
  {
    __dmb(0xBu);
    *v15 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C244A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a3@<X2>, uint64_t a4@<X3>, std::string::size_type a5@<X4>, std::string *a6@<X5>, uint64_t a7@<X6>, uint64_t **a8@<X7>, _QWORD *a9@<X8>, double a10@<D0>, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v18;
  unint64_t v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v20;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v28;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v29;
  _QWORD **v30;
  unint64_t v31;
  uint64_t v32;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  unint64_t v38;
  uint64_t v39;
  int IsVariableExpression;
  uint64_t v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::SdfPath *v43;
  _DWORD *v44;
  void **v45;
  __int128 v46;
  uint64_t v47;
  uint64_t **v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  pxrInternal__aapl__pxrReserved__::SdfPath *v57;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v58;
  uint64_t v59;
  std::string *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  void *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  void *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  int64x2_t v76;
  unint64_t *v77;
  unint64_t v78;
  int64x2_t *v79;
  unint64_t v80;
  int64x2_t *v81;
  pxrInternal__aapl__pxrReserved__::SdfPath *v82;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v83;
  uint64_t v84;
  std::string *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  void *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  __int128 v96;
  int64x2_t v97;
  unint64_t v98;
  int64x2_t *v99;
  int64x2_t *v100;
  int64x2_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  __int128 v112;
  int64x2_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  int64x2_t v125;
  void *v126;
  pxrInternal__aapl__pxrReserved__::SdfPath *v127;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v128;
  uint64_t v129;
  std::string *v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  void *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  void *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  int64x2_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  int64x2_t *v150;
  int64x2_t *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  __int128 v162;
  int64x2_t v163;
  std::string *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::string *v168;
  unint64_t *v169;
  std::string *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v174;
  _BYTE *v175;
  BOOL v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(uint64_t *);
  unint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t i;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v193;
  __int128 v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  pxrInternal__aapl__pxrReserved__::SdfPath *v201;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v202;
  uint64_t v203;
  std::string *v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int v207;
  void *v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t *v212;
  unint64_t v213;
  _OWORD *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  __int128 v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  __int128 v245;
  int64x2_t v246;
  std::string *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t **v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  _QWORD *v257;
  uint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  _QWORD *v263;
  int64x2_t v264;
  uint64_t v265;
  std::string::size_type v266;
  int64x2_t v267;
  int64x2_t v268;
  uint64_t v270;
  uint64_t **v271;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *v272;
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *v273[2];
  std::string *__str;
  __int128 v276;
  unint64_t v277;
  std::string __p;
  _QWORD *v279;
  uint64_t *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD v285[3];
  _QWORD v286[3];
  unint64_t v287;
  void *v288;
  _BYTE *v289;
  uint64_t v290;
  uint64_t v291;
  __int128 v292;
  void *v293[3];
  std::string *p_p;
  _QWORD v295[3];
  _BYTE v296[24];
  int v297;
  int v298[3];
  __int128 v299;
  void *v300[2];
  std::string::size_type v301;
  int64x2_t v302;
  std::string::size_type v303;
  int64x2_t __dst;
  std::string::size_type v305;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v306[5];
  __int128 v307;
  uint64_t v308;

  v263 = a9;
  v308 = *MEMORY[0x24BDAC8D0];
  sub_20BFF2A18(a8, (uint64_t)a2, a2);
  v18 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a2[1];
  if (v18)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
      v18 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    else
      v18 = 0;
  }
  v306[0] = v18;
  sub_20BF1DD04((uint64_t *)v306);
  v19 = *(_QWORD *)(a1 + 136);
  v20 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 128);
  if ((unint64_t)v20 >= v19)
  {
    v22 = *(_QWORD *)(a1 + 120);
    v23 = ((uint64_t)v20 - v22) >> 3;
    if ((unint64_t)(v23 + 1) >> 61)
      sub_20BDDF694();
    v24 = v19 - v22;
    v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    v295[0] = a1 + 136;
    if (v26)
      v27 = (char *)sub_20BDDF6A8(a1 + 136, v26);
    else
      v27 = 0;
    v28 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v27[8 * v23];
    v293[0] = v27;
    v293[1] = v28;
    p_p = (std::string *)&v27[8 * v26];
    *v28 = v306[0];
    v306[0] = 0;
    v293[2] = v28 + 1;
    sub_20C249340((uint64_t *)(a1 + 120), v293);
    v21 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 128);
    sub_20C249448((uint64_t)v293);
  }
  else
  {
    *v20 = v306[0];
    v21 = v20 + 1;
    v306[0] = 0;
    *(_QWORD *)(a1 + 128) = v21;
  }
  *(_QWORD *)(a1 + 128) = v21;
  v29 = sub_20C103234(v306);
  v30 = (_QWORD **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)v29);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v30, a3, (uint64_t)v306);
  v31 = *(_QWORD *)(a1 + 152);
  if (v31 >= *(_QWORD *)(a1 + 160))
  {
    v32 = sub_20C249494((uint64_t *)(a1 + 144), (uint64_t)v306);
  }
  else
  {
    sub_20C20123C(*(_DWORD **)(a1 + 152), (uint64_t)v306);
    *(_OWORD *)(v31 + 40) = v307;
    v32 = v31 + 56;
    *(_QWORD *)(a1 + 152) = v31 + 56;
  }
  *(_QWORD *)(a1 + 152) = v32;
  v33 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v33, (uint64_t)v293);
  sub_20BFE0F18((uint64_t)v293, (uint64_t)&v290);
  v34 = (std::__shared_weak_count *)v293[1];
  if (v293[1])
  {
    v35 = (unint64_t *)((char *)v293[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffsets(v37, &v288);
  v265 = a4;
  v266 = a5;
  __str = a6;
  v271 = a8;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v291 - v290) >> 3);
  v287 = v38;
  if (v291 != v290)
  {
    v39 = 0;
    v38 = 0;
    while (1)
    {
      IsVariableExpression = pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(v290 + v39);
      v41 = v290;
      if (!IsVariableExpression)
        break;
      v42 = *(_QWORD *)(a1 + 392);
      v43 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDC0E4(&__p, "sublayer");
      v44 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v43);
      pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression((const std::string *)(v41 + v39), v42, &__p, (uint64_t)a2, v44, a1 + 408, (char **)a11, (uint64_t)v293);
      v45 = (void **)(v290 + v39);
      if (*(char *)(v290 + v39 + 23) < 0)
        operator delete(*v45);
      v46 = *(_OWORD *)v293;
      v45[2] = v293[2];
      *(_OWORD *)v45 = v46;
      HIBYTE(v293[2]) = 0;
      LOBYTE(v293[0]) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v41 = v290;
      if (*(char *)(v290 + v39 + 23) < 0)
      {
        if (*(_QWORD *)(v290 + v39 + 8))
          break;
      }
      else if (*(_BYTE *)(v290 + v39 + 23))
      {
        break;
      }
LABEL_42:
      ++v38;
      v39 += 24;
      if (v38 == v287)
        goto LABEL_43;
    }
    memset(v293, 0, sizeof(v293));
    if (pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::IsLayerMuted(a7, a2, v41 + v39, (__int128 *)v293))
    {
      sub_20BE74FC0((uint64_t **)(a1 + 208), (const void **)v293, (uint64_t)v293);
      v47 = v290 + v39;
      if (*(char *)(v290 + v39 + 23) < 0)
      {
        **(_BYTE **)v47 = 0;
        *(_QWORD *)(v47 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v47 = 0;
        *(_BYTE *)(v47 + 23) = 0;
      }
    }
    if (SHIBYTE(v293[2]) < 0)
      operator delete(v293[0]);
    goto LABEL_42;
  }
LABEL_43:
  sub_20C249724(v286, v38);
  sub_20BDE4F04(v285, v287);
  v48 = v271;
  sub_20C2497A0(&v282, v287);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
  __p.__r_.__value_.__l.__size_ = v266;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
  v279 = v286;
  v280 = &v282;
  v281 = v285;
  v293[0] = (void *)a1;
  v293[1] = &v287;
  v293[2] = &v290;
  p_p = &__p;
  v295[0] = a4;
  v302.i64[0] = (uint64_t)v293;
  __dst.i64[0] = (uint64_t)off_24C52D2B0;
  __dst.i64[1] = (uint64_t)&v302;
  tbb::interface7::internal::isolate_within_arena(&__dst, 0);
  v276 = 0uLL;
  v277 = 0;
  if (v287)
  {
    v49 = 0;
    v272 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 24);
    v270 = a11 + 16;
    v264 = vdupq_n_s64(0x7FF0000000000000uLL);
    do
    {
      v50 = v290 + 24 * v49;
      if (*(char *)(v50 + 23) < 0)
      {
        if (!*(_QWORD *)(v50 + 8))
          goto LABEL_186;
      }
      else if (!*(_BYTE *)(v50 + 23))
      {
        goto LABEL_186;
      }
      v51 = (uint64_t *)(v286[0] + 8 * v49);
      if (!*v51)
      {
        v82 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::New(&__dst);
        v83 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v82);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v293, v272, v83);
        v84 = __dst.i64[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__dst.i64[0] + 16, (uint64_t)v293);
        sub_20BFD3EBC((int *)(v84 + 96), &v297);
        sub_20BFD3F10((int *)(v84 + 100), v298);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v298);
        sub_20BFD265C(&v297);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v296);
        v302.i64[0] = (uint64_t)v295;
        sub_20BDE9EB0((void ***)&v302);
        v85 = p_p;
        if (p_p)
        {
          v86 = (unsigned int *)&p_p->__r_.__value_.__r.__words[1];
          do
          {
            v87 = __ldxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (!v88)
            (*(void (**)(std::string *))(v85->__r_.__value_.__r.__words[0] + 8))(v85);
        }
        v89 = v293[1];
        if (v293[1])
        {
          v90 = (unsigned int *)((char *)v293[1] + 8);
          do
          {
            v91 = __ldxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
            (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
        }
        sub_20BF2D298(__dst.i64[0] + 104, (uint64_t)a2);
        std::string::operator=((std::string *)(__dst.i64[0] + 120), (const std::string *)(v282 + (v49 << 6) + 40));
        v93 = v285[0];
        v94 = __dst.i64[0] + 144;
        if (*(char *)(__dst.i64[0] + 167) < 0)
          operator delete(*(void **)v94);
        v95 = (__int128 *)(v93 + 24 * v49);
        v96 = *v95;
        *(_QWORD *)(v94 + 16) = *((_QWORD *)v95 + 2);
        *(_OWORD *)v94 = v96;
        *((_BYTE *)v95 + 23) = 0;
        *(_BYTE *)v95 = 0;
        v97 = __dst;
        v302 = __dst;
        __dst = 0uLL;
        v99 = *(int64x2_t **)(a11 + 8);
        v98 = *(_QWORD *)(a11 + 16);
        if ((unint64_t)v99 >= v98)
        {
          v268 = v97;
          v114 = ((uint64_t)v99->i64 - *(_QWORD *)a11) >> 4;
          v48 = v271;
          if ((unint64_t)(v114 + 1) >> 60)
            sub_20BDDF694();
          v115 = v98 - *(_QWORD *)a11;
          v116 = v115 >> 3;
          if (v115 >> 3 <= (unint64_t)(v114 + 1))
            v116 = v114 + 1;
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF0)
            v117 = 0xFFFFFFFFFFFFFFFLL;
          else
            v117 = v116;
          v295[0] = a11 + 16;
          v118 = (char *)sub_20BDEA2F0(v270, v117);
          v120 = &v118[16 * v114];
          *(int64x2_t *)v120 = v268;
          v122 = *(char **)a11;
          v121 = *(char **)(a11 + 8);
          if (v121 == *(char **)a11)
          {
            v125 = vdupq_n_s64((unint64_t)v121);
            v123 = &v118[16 * v114];
          }
          else
          {
            v123 = &v118[16 * v114];
            do
            {
              v124 = *((_OWORD *)v121 - 1);
              v121 -= 16;
              *((_OWORD *)v123 - 1) = v124;
              v123 -= 16;
              *(_QWORD *)v121 = 0;
              *((_QWORD *)v121 + 1) = 0;
            }
            while (v121 != v122);
            v125 = *(int64x2_t *)a11;
          }
          v100 = (int64x2_t *)(v120 + 16);
          *(_QWORD *)a11 = v123;
          *(_QWORD *)(a11 + 8) = v120 + 16;
          *(int64x2_t *)&v293[1] = v125;
          v168 = *(std::string **)(a11 + 16);
          *(_QWORD *)(a11 + 16) = &v118[16 * v119];
          p_p = v168;
          v293[0] = (void *)v125.i64[0];
          sub_20BDEA324((uint64_t)v293);
        }
        else
        {
          *v99 = v97;
          v100 = v99 + 1;
          v48 = v271;
        }
        *(_QWORD *)(a11 + 8) = v100;
        v165 = (std::__shared_weak_count *)__dst.i64[1];
        if (!__dst.i64[1])
          goto LABEL_186;
        v169 = (unint64_t *)(__dst.i64[1] + 8);
        do
          v167 = __ldaxr(v169);
        while (__stlxr(v167 - 1, v169));
        goto LABEL_166;
      }
      sub_20C1034E8((uint64_t *)v293, v51);
      v52 = sub_20C24988C((uint64_t)v48, (uint64_t)v293);
      v53 = v293[1];
      if (v293[1])
      {
        v54 = (unsigned int *)((char *)v293[1] + 8);
        do
        {
          v55 = __ldxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
          (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
      }
      if (!v52)
      {
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst.i64, 0.0, 1.0);
        if (v49 >= (v289 - (_BYTE *)v288) >> 4)
        {
          v293[0] = "pcp/layerStack.cpp";
          v293[1] = "_BuildLayerStack";
          v293[2] = (void *)1123;
          p_p = (std::string *)"SdfLayerTreeHandle pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack(cons"
                               "t SdfLayerHandle &, const SdfLayerOffset &, double, const ArResolverContext &, const SdfL"
                               "ayer::FileFormatArguments &, const std::string &, const Pcp_MutedLayers &, SdfLayerHandle"
                               "Set *, PcpErrorVector *)";
          LOBYTE(v295[0]) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v293, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer index");
          v101 = v264;
        }
        else
        {
          v101 = *((int64x2_t *)v288 + v49);
        }
        __dst = v101;
        if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&__dst)
          || (v293[0] = COERCE_VOID_(pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&__dst)),
              v293[1] = v126,
              !pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v293)))
        {
          v127 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::New(&v302);
          v128 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v127);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v293, v272, v128);
          v129 = v302.i64[0];
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v302.i64[0] + 16, (uint64_t)v293);
          sub_20BFD3EBC((int *)(v129 + 96), &v297);
          sub_20BFD3F10((int *)(v129 + 100), v298);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v298);
          sub_20BFD265C(&v297);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v296);
          v300[0] = v295;
          sub_20BDE9EB0((void ***)v300);
          v130 = p_p;
          if (p_p)
          {
            v131 = (unsigned int *)&p_p->__r_.__value_.__r.__words[1];
            do
            {
              v132 = __ldxr(v131);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v131));
            if (!v133)
              (*(void (**)(std::string *))(v130->__r_.__value_.__r.__words[0] + 8))(v130);
          }
          v134 = v293[1];
          if (v293[1])
          {
            v135 = (unsigned int *)((char *)v293[1] + 8);
            do
            {
              v136 = __ldxr(v135);
              v137 = v136 - 1;
            }
            while (__stlxr(v137, v135));
            if (!v137)
              (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
          }
          sub_20BF2D298(v302.i64[0] + 104, (uint64_t)a2);
          sub_20C1034E8((uint64_t *)v293, (uint64_t *)(v286[0] + 8 * v49));
          v138 = *(unsigned int **)(v302.i64[0] + 128);
          *(_OWORD *)(v302.i64[0] + 120) = *(_OWORD *)v293;
          v293[1] = 0;
          if (v138)
          {
            v139 = v138 + 2;
            do
            {
              v140 = __ldxr(v139);
              v141 = v140 - 1;
            }
            while (__stlxr(v141, v139));
            if (!v141)
              (*(void (**)(unsigned int *))(*(_QWORD *)v138 + 8))(v138);
            v142 = v293[1];
            v293[0] = 0;
            if (v293[1])
            {
              v143 = (unsigned int *)((char *)v293[1] + 8);
              do
              {
                v144 = __ldxr(v143);
                v145 = v144 - 1;
              }
              while (__stlxr(v145, v143));
              if (!v145)
                (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
            }
          }
          v146 = v302;
          *(int64x2_t *)(v302.i64[0] + 136) = __dst;
          *(int64x2_t *)v300 = v146;
          if (v146.i64[1])
          {
            v147 = (unint64_t *)(v146.i64[1] + 8);
            do
              v148 = __ldxr(v147);
            while (__stxr(v148 + 1, v147));
          }
          v150 = *(int64x2_t **)(a11 + 8);
          v149 = *(_QWORD *)(a11 + 16);
          if ((unint64_t)v150 >= v149)
          {
            v152 = ((uint64_t)v150->i64 - *(_QWORD *)a11) >> 4;
            v153 = v152 + 1;
            if ((unint64_t)(v152 + 1) >> 60)
              sub_20BDDF694();
            v154 = v149 - *(_QWORD *)a11;
            if (v154 >> 3 > v153)
              v153 = v154 >> 3;
            if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0)
              v155 = 0xFFFFFFFFFFFFFFFLL;
            else
              v155 = v153;
            v295[0] = a11 + 16;
            v156 = (char *)sub_20BDEA2F0(v270, v155);
            v158 = &v156[16 * v152];
            *(int64x2_t *)v158 = v146;
            v160 = *(char **)a11;
            v159 = *(char **)(a11 + 8);
            if (v159 == *(char **)a11)
            {
              v163 = vdupq_n_s64((unint64_t)v159);
              v161 = &v156[16 * v152];
              v48 = v271;
            }
            else
            {
              v161 = &v156[16 * v152];
              v48 = v271;
              do
              {
                v162 = *((_OWORD *)v159 - 1);
                v159 -= 16;
                *((_OWORD *)v161 - 1) = v162;
                v161 -= 16;
                *(_QWORD *)v159 = 0;
                *((_QWORD *)v159 + 1) = 0;
              }
              while (v159 != v160);
              v163 = *(int64x2_t *)a11;
            }
            v151 = (int64x2_t *)(v158 + 16);
            *(_QWORD *)a11 = v161;
            *(_QWORD *)(a11 + 8) = v158 + 16;
            *(int64x2_t *)&v293[1] = v163;
            v170 = *(std::string **)(a11 + 16);
            *(_QWORD *)(a11 + 16) = &v156[16 * v157];
            p_p = v170;
            v293[0] = (void *)v163.i64[0];
            sub_20BDEA324((uint64_t)v293);
          }
          else
          {
            *v150 = v146;
            v151 = v150 + 1;
          }
          *(_QWORD *)(a11 + 8) = v151;
          pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v293, 0.0, 1.0);
          __dst = *(int64x2_t *)v293;
          v171 = (std::__shared_weak_count *)v302.i64[1];
          if (v302.i64[1])
          {
            v172 = (unint64_t *)(v302.i64[1] + 8);
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
        }
        v293[0] = 0;
        v174 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(v286[0] + 8 * v49));
        v293[0] = COERCE_VOID_(pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v174));
        v175 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
        if (!v175)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
          v175 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
        }
        if (*v175)
          v176 = 1;
        else
          v176 = *(double *)v293 == a10;
        if (!v176)
          *(double *)&__dst.i64[1] = *(double *)&__dst.i64[1] * a10 / *(double *)v293;
        __dst.i64[0] = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)a3, (double *)__dst.i64);
        __dst.i64[1] = v177;
        v178 = (_QWORD *)(v286[0] + 8 * v49);
        v179 = *((_QWORD *)&v276 + 1);
        if (*((_QWORD *)&v276 + 1) >= v277)
        {
          v181 = sub_20C2498F4((uint64_t *)&v276, v178, &__dst, (uint64_t *)v293);
        }
        else
        {
          v180 = v293[0];
          **((_QWORD **)&v276 + 1) = *v178;
          sub_20BF1DD04((uint64_t *)v179);
          *(int64x2_t *)(v179 + 8) = __dst;
          *(_QWORD *)(v179 + 24) = v180;
          v181 = v179 + 32;
        }
        *((_QWORD *)&v276 + 1) = v181;
        goto LABEL_186;
      }
      v57 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::New(&__dst);
      v58 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v57);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v293, v272, v58);
      v59 = __dst.i64[0];
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__dst.i64[0] + 16, (uint64_t)v293);
      sub_20BFD3EBC((int *)(v59 + 96), &v297);
      sub_20BFD3F10((int *)(v59 + 100), v298);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v298);
      sub_20BFD265C(&v297);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v296);
      v302.i64[0] = (uint64_t)v295;
      sub_20BDE9EB0((void ***)&v302);
      v60 = p_p;
      if (p_p)
      {
        v61 = (unsigned int *)&p_p->__r_.__value_.__r.__words[1];
        do
        {
          v62 = __ldxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
          (*(void (**)(std::string *))(v60->__r_.__value_.__r.__words[0] + 8))(v60);
      }
      v64 = v293[1];
      if (v293[1])
      {
        v65 = (unsigned int *)((char *)v293[1] + 8);
        do
        {
          v66 = __ldxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
          (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
      }
      sub_20BF2D298(__dst.i64[0] + 104, (uint64_t)a2);
      sub_20C1034E8((uint64_t *)v293, (uint64_t *)(v286[0] + 8 * v49));
      v68 = *(unsigned int **)(__dst.i64[0] + 128);
      *(_OWORD *)(__dst.i64[0] + 120) = *(_OWORD *)v293;
      v293[1] = 0;
      if (v68)
      {
        v69 = v68 + 2;
        do
        {
          v70 = __ldxr(v69);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v69));
        if (!v71)
          (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
        v72 = v293[1];
        v293[0] = 0;
        if (v293[1])
        {
          v73 = (unsigned int *)((char *)v293[1] + 8);
          do
          {
            v74 = __ldxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
            (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
        }
      }
      v76 = __dst;
      v302 = __dst;
      if (__dst.i64[1])
      {
        v77 = (unint64_t *)(__dst.i64[1] + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = *(int64x2_t **)(a11 + 8);
      v80 = *(_QWORD *)(a11 + 16);
      if ((unint64_t)v79 >= v80)
      {
        v267 = v76;
        v102 = ((uint64_t)v79->i64 - *(_QWORD *)a11) >> 4;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 60)
          sub_20BDDF694();
        v104 = v80 - *(_QWORD *)a11;
        if (v104 >> 3 > v103)
          v103 = v104 >> 3;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0)
          v105 = 0xFFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        v295[0] = a11 + 16;
        v106 = (char *)sub_20BDEA2F0(v270, v105);
        v108 = &v106[16 * v102];
        *(int64x2_t *)v108 = v267;
        v110 = *(char **)a11;
        v109 = *(char **)(a11 + 8);
        if (v109 == *(char **)a11)
        {
          v113 = vdupq_n_s64((unint64_t)v109);
          v111 = &v106[16 * v102];
        }
        else
        {
          v111 = &v106[16 * v102];
          do
          {
            v112 = *((_OWORD *)v109 - 1);
            v109 -= 16;
            *((_OWORD *)v111 - 1) = v112;
            v111 -= 16;
            *(_QWORD *)v109 = 0;
            *((_QWORD *)v109 + 1) = 0;
          }
          while (v109 != v110);
          v113 = *(int64x2_t *)a11;
        }
        v81 = (int64x2_t *)(v108 + 16);
        *(_QWORD *)a11 = v111;
        *(_QWORD *)(a11 + 8) = v108 + 16;
        *(int64x2_t *)&v293[1] = v113;
        v164 = *(std::string **)(a11 + 16);
        *(_QWORD *)(a11 + 16) = &v106[16 * v107];
        p_p = v164;
        v293[0] = (void *)v113.i64[0];
        sub_20BDEA324((uint64_t)v293);
      }
      else
      {
        *v79 = v76;
        v81 = v79 + 1;
      }
      *(_QWORD *)(a11 + 8) = v81;
      v165 = (std::__shared_weak_count *)__dst.i64[1];
      if (__dst.i64[1])
      {
        v166 = (unint64_t *)(__dst.i64[1] + 8);
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
LABEL_166:
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
LABEL_186:
      ++v49;
    }
    while (v49 != v287);
  }
  sub_20C246410((uint64_t *)(a1 + 184), ((v283 - v282) >> 6) + ((uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 6));
  v184 = v282;
  v185 = v283;
  if (v282 != v283)
  {
    do
    {
      v186 = sub_20BFD2F78((_QWORD *)v184);
      if (v182 & 1 | (unint64_t)v186)
      {
        v187 = *(_QWORD *)(a1 + 192);
        if (v187 >= *(_QWORD *)(a1 + 200))
        {
          v190 = sub_20C249DA4((uint64_t *)(a1 + 184), v184);
        }
        else
        {
          *(_OWORD *)v187 = *(_OWORD *)v184;
          *(_QWORD *)v184 = 0;
          *(_QWORD *)(v184 + 8) = 0;
          v188 = *(_OWORD *)(v184 + 16);
          *(_QWORD *)(v187 + 32) = *(_QWORD *)(v184 + 32);
          *(_OWORD *)(v187 + 16) = v188;
          *(_QWORD *)(v184 + 24) = 0;
          *(_QWORD *)(v184 + 32) = 0;
          *(_QWORD *)(v184 + 16) = 0;
          v189 = *(_OWORD *)(v184 + 40);
          *(_QWORD *)(v187 + 56) = *(_QWORD *)(v184 + 56);
          *(_OWORD *)(v187 + 40) = v189;
          *(_QWORD *)(v184 + 48) = 0;
          *(_QWORD *)(v184 + 56) = 0;
          *(_QWORD *)(v184 + 40) = 0;
          v190 = v187 + 64;
        }
        *(_QWORD *)(a1 + 192) = v190;
      }
      v184 += 64;
    }
    while (v184 != v185);
    v184 = v282;
    for (i = v283; i != v184; sub_20C248CDC((uint64_t)&v284, i))
      i -= 64;
  }
  v283 = v184;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size)
  {
    v193 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFCF650(a2);
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetHasOwnedSubLayers(v193))
    {
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20BDDBFAC(&__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      }
      else
      {
        __dst = *(int64x2_t *)&__str->__r_.__value_.__l.__data_;
        v305 = __str->__r_.__value_.__r.__words[2];
      }
      v194 = v276;
      if (SHIBYTE(v305) < 0)
      {
        sub_20BDDBFAC(&v302, (void *)__dst.i64[0], __dst.u64[1]);
      }
      else
      {
        v302 = __dst;
        v303 = v305;
      }
      if ((uint64_t)(*((_QWORD *)&v194 + 1) - v194) < 1)
      {
        v195 = 0;
        v197 = 0;
      }
      else
      {
        v195 = sub_20BF35D64((uint64_t)(*((_QWORD *)&v194 + 1) - v194) >> 5);
        v197 = v196;
      }
      sub_20C247710((uint64_t *)v194, *((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)&v194 + 1), (unsigned __int8 *)&v302, (uint64_t)(*((_QWORD *)&v194 + 1) - v194) >> 5, (uint64_t)v195, v197);
      if (v195)
        operator delete(v195);
      if (SHIBYTE(v303) < 0)
        operator delete((void *)v302.i64[0]);
      v182 = v276;
      if ((_QWORD)v276 != *((_QWORD *)&v276 + 1)
        && sub_20C247620((unsigned __int8 *)&__dst, (uint64_t *)v276))
      {
        v199 = *((_QWORD *)&v276 + 1);
        v198 = (uint64_t *)v276;
        if (SHIBYTE(v305) < 0)
        {
          sub_20BDDBFAC(v300, (void *)__dst.i64[0], __dst.u64[1]);
        }
        else
        {
          *(int64x2_t *)v300 = __dst;
          v301 = v305;
        }
        v200 = sub_20C248584((uint64_t)v198, v199, v198, (unsigned __int8 *)v300);
        if (SHIBYTE(v301) < 0)
          operator delete(v300[0]);
        if (v200 - (uint64_t)v198 >= 33)
        {
          v201 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::New(&v299);
          v202 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v201);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v293, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 24), v202);
          v203 = v299;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v299 + 16, (uint64_t)v293);
          sub_20BFD3EBC((int *)(v203 + 96), &v297);
          sub_20BFD3F10((int *)(v203 + 100), v298);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v298);
          sub_20BFD265C(&v297);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v296);
          *(_QWORD *)&v292 = v295;
          sub_20BDE9EB0((void ***)&v292);
          v204 = p_p;
          v48 = v271;
          if (p_p)
          {
            v205 = (unsigned int *)&p_p->__r_.__value_.__r.__words[1];
            do
            {
              v206 = __ldxr(v205);
              v207 = v206 - 1;
            }
            while (__stlxr(v207, v205));
            if (!v207)
              (*(void (**)(std::string *))(v204->__r_.__value_.__r.__words[0] + 8))(v204);
          }
          v208 = v293[1];
          if (v293[1])
          {
            v209 = (unsigned int *)((char *)v293[1] + 8);
            do
            {
              v210 = __ldxr(v209);
              v211 = v210 - 1;
            }
            while (__stlxr(v211, v209));
            if (!v211)
              (*(void (**)(void *))(*(_QWORD *)v208 + 8))(v208);
          }
          std::string::operator=((std::string *)(v299 + 104), __str);
          sub_20BF2D298(v299 + 128, (uint64_t)a2);
          for (; v198 != (uint64_t *)v200; v198 += 4)
          {
            v212 = (uint64_t *)v299;
            sub_20C1034E8((uint64_t *)&v292, v198);
            v213 = v212[20];
            v214 = (_OWORD *)v212[19];
            if ((unint64_t)v214 >= v213)
            {
              v215 = v212[18];
              v216 = ((uint64_t)v214 - v215) >> 4;
              v217 = v216 + 1;
              if ((unint64_t)(v216 + 1) >> 60)
                sub_20BDDF694();
              v218 = v213 - v215;
              if (v218 >> 3 > v217)
                v217 = v218 >> 3;
              if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF0)
                v219 = 0xFFFFFFFFFFFFFFFLL;
              else
                v219 = v217;
              v295[0] = v212 + 20;
              v220 = (char *)sub_20BDEA2F0((uint64_t)(v212 + 20), v219);
              v221 = &v220[16 * v216];
              v293[0] = v220;
              v293[1] = v221;
              p_p = (std::string *)&v220[16 * v222];
              *(_OWORD *)v221 = v292;
              v292 = 0uLL;
              v293[2] = v221 + 16;
              sub_20C139948(v212 + 18, v293);
              v223 = v212[19];
              sub_20BEB5F68((unsigned int *)v293);
              v224 = (unsigned int *)*((_QWORD *)&v292 + 1);
              v212[19] = v223;
              v48 = v271;
              if (v224)
              {
                v225 = v224 + 2;
                do
                {
                  v226 = __ldxr(v225);
                  v227 = v226 - 1;
                }
                while (__stlxr(v227, v225));
                if (!v227)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v224 + 8))(v224);
              }
            }
            else
            {
              *v214 = v292;
              v212[19] = (uint64_t)(v214 + 1);
            }
          }
          v228 = v299;
          v292 = v299;
          v229 = *((_QWORD *)&v299 + 1);
          if (*((_QWORD *)&v299 + 1))
          {
            v230 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
            do
              v231 = __ldxr(v230);
            while (__stxr(v231 + 1, v230));
          }
          v232 = *(_QWORD *)(a11 + 16);
          v233 = *(_QWORD **)(a11 + 8);
          if ((unint64_t)v233 >= v232)
          {
            *(_OWORD *)v273 = v228;
            v235 = ((uint64_t)v233 - *(_QWORD *)a11) >> 4;
            if ((unint64_t)(v235 + 1) >> 60)
              sub_20BDDF694();
            v236 = v232 - *(_QWORD *)a11;
            v237 = v236 >> 3;
            if (v236 >> 3 <= (unint64_t)(v235 + 1))
              v237 = v235 + 1;
            if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF0)
              v238 = 0xFFFFFFFFFFFFFFFLL;
            else
              v238 = v237;
            v295[0] = a11 + 16;
            v239 = (char *)sub_20BDEA2F0(a11 + 16, v238);
            v241 = &v239[16 * v235];
            *(_OWORD *)v241 = *(_OWORD *)v273;
            v243 = *(char **)a11;
            v242 = *(char **)(a11 + 8);
            if (v242 == *(char **)a11)
            {
              v246 = vdupq_n_s64((unint64_t)v242);
              v244 = &v239[16 * v235];
            }
            else
            {
              v244 = &v239[16 * v235];
              do
              {
                v245 = *((_OWORD *)v242 - 1);
                v242 -= 16;
                *((_OWORD *)v244 - 1) = v245;
                v244 -= 16;
                *(_QWORD *)v242 = 0;
                *((_QWORD *)v242 + 1) = 0;
              }
              while (v242 != v243);
              v246 = *(int64x2_t *)a11;
            }
            v234 = v241 + 16;
            *(_QWORD *)a11 = v244;
            *(_QWORD *)(a11 + 8) = v241 + 16;
            *(int64x2_t *)&v293[1] = v246;
            v247 = *(std::string **)(a11 + 16);
            *(_QWORD *)(a11 + 16) = &v239[16 * v240];
            p_p = v247;
            v293[0] = (void *)v246.i64[0];
            sub_20BDEA324((uint64_t)v293);
          }
          else
          {
            *v233 = v228;
            v233[1] = v229;
            v234 = v233 + 2;
          }
          *(_QWORD *)(a11 + 8) = v234;
          v248 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
          if (*((_QWORD *)&v299 + 1))
          {
            v249 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
            do
              v250 = __ldaxr(v249);
            while (__stlxr(v250 - 1, v249));
            if (!v250)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v248);
            }
          }
        }
      }
      if (SHIBYTE(v305) < 0)
        operator delete((void *)__dst.i64[0]);
    }
  }
  memset(v293, 0, sizeof(v293));
  for (__dst = (int64x2_t)v276; __dst.i64[0] != __dst.i64[1]; sub_20C246630(&__dst))
  {
    v251 = (uint64_t **)sub_20C2464A0(&__dst, v182, v183);
    sub_20C1034E8(v302.i64, *v251);
    v254 = *sub_20C2464A0(&__dst, v252, v253);
    v257 = sub_20C2464A0(&__dst, v255, v256);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack(v300, a1, &v302, v254 + 8, v265, v266, __str, a7, v48, *(double *)(*v257 + 24), a11, v263);
    v258 = v302.i64[1];
    if (v302.i64[1])
    {
      v259 = (unsigned int *)(v302.i64[1] + 8);
      do
      {
        v260 = __ldxr(v259);
        v261 = v260 - 1;
      }
      while (__stlxr(v261, v259));
      if (!v261)
        (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
    }
    if (v300[0])
      sub_20C246518((uint64_t *)v293, (uint64_t *)v300);
    sub_20C1075E8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v300);
  }
  sub_20C222F90(v48, (uint64_t)a2);
  pxrInternal__aapl__pxrReserved__::SdfLayerTree::New(a2, (uint64_t *)v293, (__int128 *)a3, v263);
  __dst.i64[0] = (uint64_t)v293;
  sub_20C107614((void ***)&__dst);
  v293[0] = &v276;
  sub_20C24981C((void ***)v293);
  v293[0] = &v282;
  sub_20C248C58((void ***)v293);
  v293[0] = v285;
  sub_20BDE5038((void ***)v293);
  v293[0] = v286;
  sub_20C248B78((void ***)v293);
  if (v288)
  {
    v289 = v288;
    operator delete(v288);
  }
  v293[0] = &v290;
  sub_20BDE5038((void ***)v293);
  return sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v306);
}

void sub_20C245FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;

  if (*(char *)(v67 - 185) < 0)
    operator delete(*(void **)(v67 - 208));
  a67 = (uint64_t)&a27;
  sub_20C24981C((void ***)&a67);
  a31 = &a37;
  sub_20C248C58((void ***)&a31);
  a31 = &a40;
  sub_20BDE5038((void ***)&a31);
  a31 = &a43;
  sub_20C248B78((void ***)&a31);
  if (__p)
  {
    a48 = (uint64_t)__p;
    operator delete(__p);
  }
  a31 = &a50;
  sub_20BDE5038((void ***)&a31);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v67 - 176));
  _Unwind_Resume(a1);
}

uint64_t sub_20C246334(uint64_t *a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayerTree *v4;
  uint64_t *Layer;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayerTree *v10;
  uint64_t *ChildTrees;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerTree *)sub_20C246B20(a1);
  Layer = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetLayer(v4);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFCF650(Layer);
  v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((sub_20C246BA8(v6, v7, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 296), a2) & 1) != 0)
    return 1;
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayerTree *)sub_20C246B20(a1);
  ChildTrees = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetChildTrees(v10);
  v14 = ChildTrees[1];
  v17 = *ChildTrees;
  v18 = v14;
  if (v17 == v14)
    return 0;
  do
  {
    v15 = sub_20C246BFC(&v17, v12, v13);
    v9 = sub_20C246334(v15, a2);
    if ((v9 & 1) != 0)
      break;
    sub_20C246C78(&v17);
  }
  while (v17 != v18);
  return v9;
}

void **sub_20C246410(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C00D6F0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 64 * v6;
    sub_20C249B78(a1, v7);
    return sub_20C249D30(v7);
  }
  return result;
}

void sub_20C24648C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C249D30((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2464A0(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Sub"
            "layerInfo>>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_SublayerInfo>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C246518(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (uint64_t *)sub_20BDDF6A8(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[v10];
    v17 = v16;
    v18 = &v14[v13];
    *v16 = *a2;
    sub_20BF1DD04(&v14[v10]);
    ++v17;
    sub_20C249EB4(a1, &v15);
    v9 = (uint64_t *)a1[1];
    result = sub_20C249FBC((uint64_t)&v15);
  }
  else
  {
    *v7 = *a2;
    result = sub_20BF1DD04(v7);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20C246610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C246630(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::Pcp_SublayerInfo>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_SublayerInfo>"
            ", Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t sub_20C24675C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  char *v5;

  if ((uint64_t *)a1 == a2)
    return 1;
  result = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==((uint64_t *)a1, a2);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::operator==((_QWORD **)(a1 + 16), a2 + 2, v5);
  return result;
}

void sub_20C2467A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C52D228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C2467B8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C52D228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C2467DC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 24);
  sub_20BF49F14((_QWORD ***)(a1 + 40), 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
}

_QWORD *sub_20C24680C@<X0>(uint64_t *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = sub_20C24686C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20C246858(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C24686C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C52D228;
  a1[1] = 0;
  sub_20C2468B8(a1 + 3, a2, a3);
  return a1;
}

void sub_20C2468A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2468B8(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2[1];
  v13 = *a2;
  v14 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v12, a3);
  v7 = v14;
  *a1 = v13;
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = v12;
  v12 = 0;
  a1[2] = v10;
  sub_20BF49F14(&v12, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v13);
  return a1;
}

void sub_20C24694C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20C246960(uint64_t **a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = *(uint64_t *)((char *)v5 + 28);
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v13[1] = v6;
    sub_20C0D9B58((_DWORD *)v11 + 7, a3);
    v14 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_20BFE4C64((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t **sub_20C246A40(uint64_t **a1, unint64_t *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *(uint64_t *)((char *)v6 + 28);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    sub_20C0E453C((_DWORD *)v12 + 7, *a4);
    v15 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_20BFE4C64((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t sub_20C246B20(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>::operator->() "
            "const [T = pxrInternal__aapl__pxrReserved__::SdfLayerTree]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC75B7 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_20C246BA8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C516910;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D278;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C246BFC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>>>::operator*() [T = const std::vector<pxrInternal__a"
            "apl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C246C70()
{
  JUMPOUT(0x20C246C20);
}

_QWORD *sub_20C246C78(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>>>::operator++() [T = const std::vector"
            "<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20C246CF4(uint64_t a1, const std::string **a2)
{
  const std::string *v4;
  const std::string *v5;
  uint64_t result;

  if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                + 168))(a2);
    else
      v5 = *a2;
    std::string::operator=(*(std::string **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C246D74(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;

  if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C246E00(a2, &v7);
    v4 = *(_QWORD *)(a1 + 8);
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    v5 = v7;
    *(_QWORD *)(v4 + 16) = v8;
    *(_OWORD *)v4 = v5;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C246E00@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_20C1D1544(a1);
  *(_OWORD *)a2 = *(_OWORD *)result;
  a2[2] = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  v5 = a1[1];
  if (v5 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C246E6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C246E8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];
  _BYTE v12[256];
  uint64_t v13;
  _QWORD v14[10];

  v14[9] = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v12);
  v2 = *v1;
  if (*(_BYTE *)(*(_QWORD *)*v1 + 448) && **(_QWORD **)(v2 + 8) >= 2uLL)
  {
    v3 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_ENABLE_PARALLEL_LAYER_PREFETCH);
    if (!v3)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_ENABLE_PARALLEL_LAYER_PREFETCH);
      v3 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_ENABLE_PARALLEL_LAYER_PREFETCH);
    }
    v4 = *v3 != 0;
  }
  else
  {
    v4 = 0;
  }
  if (**(_QWORD **)(v2 + 8))
  {
    v5 = 0;
    for (i = 0; i != **(_QWORD **)(v2 + 8); ++i)
    {
      v7 = **(_QWORD **)(v2 + 16) + v5;
      if (*(char *)(v7 + 23) < 0)
      {
        if (*(_QWORD *)(v7 + 8))
        {
LABEL_13:
          v8 = *(_QWORD *)(v2 + 24);
          if (v4)
          {
            v9 = *(_QWORD *)(v2 + 32);
            v11[0] = 0;
            v11[1] = v13;
            v10 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v11, 0x28uLL);
            *((_BYTE *)v10 - 11) = 1;
            *v10 = &off_24C52D2F0;
            v10[1] = i;
            v10[2] = v8;
            v10[3] = v9;
            v10[4] = v14;
            (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v10 - 5))(*(v10 - 5), v10, (uint64_t)(v10 - 1));
          }
          else
          {
            sub_20C24704C(*(_QWORD *)(v2 + 24), i);
          }
        }
      }
      else if (*(_BYTE *)(v7 + 23))
      {
        goto LABEL_13;
      }
      v5 += 24;
    }
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v12);
}

void sub_20C247028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)va);
  _Unwind_Resume(a1);
}

void sub_20C24704C(uint64_t a1, uint64_t a2)
{
  uint64_t **ArgumentsForFileFormatTarget;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void **v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t *Instance;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  __int128 v28;
  unint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  std::string v34;
  void *__dst[2];
  __int128 __p;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  char v41;
  uint64_t *v42;
  _QWORD *v43[2];
  unint64_t v44;
  char v45;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v44);
  v43[0] = 0;
  v43[1] = 0;
  v42 = (uint64_t *)v43;
  ArgumentsForFileFormatTarget = pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(**(_QWORD **)a1 + 24 * a2, *(_QWORD *)(a1 + 8), &v42);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(*(uint64_t **)(a1 + 16), **(_QWORD **)a1 + 24 * a2, (uint64_t)v40);
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)v40, ArgumentsForFileFormatTarget, __dst);
  v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(**(_QWORD **)(a1 + 24) + 8 * a2);
  v6 = *v5;
  *v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__dst[0];
  __dst[0] = 0;
  sub_20BF1D8F4((int)v5, v6);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__dst);
  sub_20C247530((uint64_t)__dst, *(_QWORD **)(a1 + 16), (__int128 *)(**(_QWORD **)a1 + 24 * a2), (__int128 *)v40);
  v7 = **(_QWORD **)(a1 + 32);
  v8 = v7 + (a2 << 6);
  v9 = *(unsigned int **)(v8 + 8);
  *(_OWORD *)v8 = *(_OWORD *)__dst;
  __dst[1] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  __dst[0] = 0;
  v13 = (void **)(v8 + 16);
  if (*(char *)(v8 + 39) < 0)
    operator delete(*v13);
  v14 = __p;
  *(_QWORD *)(v8 + 32) = v37;
  *(_OWORD *)v13 = v14;
  HIBYTE(v37) = 0;
  LOBYTE(__p) = 0;
  v15 = v7 + (a2 << 6) + 40;
  if (*(char *)(v8 + 63) < 0)
    operator delete(*(void **)v15);
  v16 = v38;
  *(_QWORD *)(v15 + 16) = v39;
  *(_OWORD *)v15 = v16;
  HIBYTE(v39) = 0;
  LOBYTE(v38) = 0;
  if (SHIBYTE(v37) < 0)
    operator delete((void *)__p);
  v17 = __dst[1];
  if (__dst[1])
  {
    v18 = (unsigned int *)((char *)__dst[1] + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v22 = v44;
  v23 = atomic_load(Instance + 18);
  if (v22 < v23
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v44, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    __dst[0] = 0;
    __dst[1] = 0;
    *(_QWORD *)&__p = 0;
    v24 = sub_20BEC5244(&v44, 0);
    v25 = sub_20BEDAF68();
    if (v24 != (_QWORD *)v25)
    {
      v26 = (char *)__dst[1];
      do
      {
        v27 = (__int128 *)(v24 + 7);
        if ((unint64_t)v26 >= (unint64_t)__p)
        {
          v26 = (char *)sub_20BE4EE50((uint64_t *)__dst, v27);
        }
        else
        {
          if (*((char *)v24 + 79) < 0)
          {
            sub_20BDDBFAC(v26, (void *)v24[7], v24[8]);
          }
          else
          {
            v28 = *v27;
            *((_QWORD *)v26 + 2) = v24[9];
            *(_OWORD *)v26 = v28;
          }
          v26 += 24;
        }
        __dst[1] = v26;
        v24 = (_QWORD *)v24[1];
      }
      while (v24 != (_QWORD *)v25);
    }
    v29 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v29)
      v29 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v30 = sub_20BEC5244(&v44, 0);
    v45 = 0;
    v31 = (_QWORD *)sub_20BEB5B80(v29 + 19, &v45);
    if (v31 != v30)
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v29, v30, v31);
    sub_20BEE380C("; ", (std::string *)__dst[0], (std::string *)__dst[1], &v34);
    v32 = **(_QWORD **)(a1 + 40) + 24 * a2;
    if (*(char *)(v32 + 23) < 0)
      operator delete(*(void **)v32);
    v33 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
    *(_QWORD *)(v32 + 16) = *((_QWORD *)&v34.__r_.__value_.__l + 2);
    *(_OWORD *)v32 = v33;
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
    sub_20BDE5038((void ***)&v34);
  }
  if (v41 < 0)
    operator delete(v40[0]);
  sub_20BDE9D48((uint64_t)&v42, v43[0]);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v44);
}

void sub_20C2473A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  a10 = &a13;
  sub_20BDE5038((void ***)&a10);
  if (a26 < 0)
    operator delete(__p);
  sub_20BDE9D48(v26 - 88, *(_QWORD **)(v26 - 80));
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v26 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20C247438(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v7, *(const pxrInternal__aapl__pxrReserved__::ArResolverContext **)(a1 + 24));
  sub_20C24704C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v7);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C247504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&a10);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C247530(uint64_t a1, _QWORD *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = (_BYTE *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    sub_20BDDBFAC(v10, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v10 = v11;
  }
  return a1;
}

void sub_20C2475D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v4 = *(unsigned int **)(v1 + 8);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C247620(unsigned __int8 *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v5;
  size_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  void **p_s1;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  _BOOL8 v18;
  void *__s1;
  size_t __n;
  unsigned __int8 v22;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayer::HasOwner(v4))
    return 0;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20C0EEAF8(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetOwner(v5, (uint64_t)&__s1);
  if ((v22 & 0x80u) == 0)
    v6 = v22;
  else
    v6 = __n;
  v7 = a1[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a1 + 1);
  if (v6 == v7)
  {
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(unsigned __int8 **)a1;
    if ((v22 & 0x80) != 0)
    {
      v18 = memcmp(__s1, v9, __n) == 0;
LABEL_25:
      operator delete(__s1);
      return v18;
    }
    if (!v22)
      return 1;
    v10 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      v13 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v12 = v13;
      v15 = *v9++;
      v14 = v15;
      v17 = v10-- != 0;
      v18 = v12 == v14;
    }
    while (v12 == v14 && v17);
  }
  else
  {
    v18 = 0;
  }
  if ((v22 & 0x80) != 0)
    goto LABEL_25;
  return v18;
}

void sub_20C247710(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v15;
  uint64_t *v16;

  v16 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v15 = a2 - 4;
      if (sub_20C247620(a3, (uint64_t *)a2 - 4))
      {
        if ((sub_20C247620(a3, a1) & 1) == 0)
          sub_20C2478E4(&v16, (uint64_t *)&v15);
      }
    }
    else
    {
      v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        sub_20C247988((uint64_t)a1, a2, a3);
      }
      else
      {
        v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a5;
        v12 = a4 >> 1;
        v13 = &a1[4 * (a4 >> 1)];
        v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          sub_20C247AFC((uint64_t)a1, v13, a3, v14, a5);
          sub_20C247AFC((uint64_t)&a1[4 * (v9 >> 1)], (uint64_t *)a2, a3, v9 - (v9 >> 1), (uint64_t)&v11[4 * v12]);
          sub_20C247CA0((uint64_t)v11, (uint64_t)&v11[4 * v12], (uint64_t)&v11[4 * v12], (uint64_t)&v11[4 * v9], (uint64_t)a1, a3);
          if (v11)
          {
            do
            {
              sub_20C103234(v11);
              v11 += 4;
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          sub_20C247710(a1, v13, a3, v14, a5, a6);
          sub_20C247710(&a1[4 * (v9 >> 1)], a2, a3, v9 - (v9 >> 1), v11, a6);
          sub_20C247E04(a1, (uint64_t)&a1[4 * (v9 >> 1)], (uint64_t *)a2, (uint64_t)a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void sub_20C2478C0(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;
  uint64_t v2;

  if (v1)
  {
    do
    {
      sub_20C103234(v1);
      v1 += 4;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C2478E4(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  __int128 v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  *v2 = 0;
  v5 = *(_OWORD *)(v2 + 1);
  v12 = v2[3];
  v11 = v5;
  *v2 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  v6 = *(_OWORD *)(v3 + 8);
  v2[3] = *(_QWORD *)(v3 + 24);
  *(_OWORD *)(v2 + 1) = v6;
  v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v3;
  *(_QWORD *)v3 = v4;
  v10 = 0;
  sub_20BF1D8F4(v3, v7);
  v8 = v11;
  *(_QWORD *)(v3 + 24) = v12;
  *(_OWORD *)(v3 + 8) = v8;
  return sub_20C103234(&v10);
}

void sub_20C247974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9)
{
  sub_20C103234(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C247988(uint64_t result, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, unsigned __int8 *a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  uint64_t *v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v13;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v16;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  __int128 v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;

  if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)result != a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)result;
    v5 = (uint64_t *)(result + 32);
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(result + 32) != a2)
    {
      v7 = 0;
      v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)result;
      do
      {
        v9 = v8;
        v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v5;
        result = sub_20C247620(a3, v5);
        if ((_DWORD)result)
        {
          result = sub_20C247620(a3, (uint64_t *)v9);
          if ((result & 1) == 0)
          {
            v20 = *v8;
            *v8 = 0;
            v21 = *(_OWORD *)(v9 + 5);
            v22 = v9[7];
            v10 = v7;
            while (1)
            {
              v11 = v10;
              v12 = (char *)v4 + v10;
              v13 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v4 + v10 + 32);
              v14 = *v13;
              *v13 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v4 + v10);
              *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v4 + v10) = 0;
              sub_20BF1D8F4((int)v13, v14);
              *(_OWORD *)(v12 + 40) = *(_OWORD *)(v12 + 8);
              *((_QWORD *)v12 + 7) = *((_QWORD *)v12 + 3);
              if (!v11)
                break;
              if (sub_20C247620(a3, (uint64_t *)&v20))
              {
                v15 = sub_20C247620(a3, (uint64_t *)((char *)v4 + v11 - 32));
                v10 = v11 - 32;
                if (!v15)
                  continue;
              }
              v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v4 + v11);
              goto LABEL_12;
            }
            v16 = v4;
LABEL_12:
            v17 = *v16;
            *v16 = v20;
            v20 = 0;
            sub_20BF1D8F4((int)v16, v17);
            v18 = (uint64_t)v4 + v11 + 8;
            v19 = v21;
            *(_QWORD *)(v18 + 16) = v22;
            *(_OWORD *)v18 = v19;
            result = (uint64_t)sub_20C103234(&v20);
          }
        }
        v5 = (uint64_t *)(v8 + 4);
        v7 += 32;
      }
      while (v8 + 4 != a2);
    }
  }
  return result;
}

void sub_20C247AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9)
{
  sub_20C103234(&a9);
  _Unwind_Resume(a1);
}

void sub_20C247AFC(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  if (a4)
  {
    if (a4 == 2)
    {
      if (sub_20C247620(a3, a2 - 4) && (sub_20C247620(a3, (uint64_t *)a1) & 1) == 0)
      {
        *(_QWORD *)a5 = *(a2 - 4);
        *(a2 - 4) = 0;
        v14 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(a5 + 24) = *(a2 - 1);
        *(_OWORD *)(a5 + 8) = v14;
        *(_QWORD *)(a5 + 32) = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        v12 = *(_OWORD *)(a1 + 8);
        v13 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        *(_QWORD *)a5 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        v11 = *(_OWORD *)(a1 + 8);
        *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
        *(_OWORD *)(a5 + 8) = v11;
        *(_QWORD *)(a5 + 32) = *(a2 - 4);
        *(a2 - 4) = 0;
        v12 = *(_OWORD *)(a2 - 3);
        v13 = *(a2 - 1);
      }
      *(_QWORD *)(a5 + 56) = v13;
      *(_OWORD *)(a5 + 40) = v12;
    }
    else if (a4 == 1)
    {
      *(_QWORD *)a5 = *(_QWORD *)a1;
      *(_QWORD *)a1 = 0;
      v10 = *(_OWORD *)(a1 + 8);
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a5 + 8) = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_20C247710(a1, a1 + 32 * (a4 >> 1), a3, a4 >> 1, a5, a4 >> 1);
      sub_20C247710(a1 + 32 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5 + 32 * (a4 >> 1), a4 - (a4 >> 1));
      sub_20C24829C((_QWORD *)a1, (_QWORD *)(a1 + 32 * (a4 >> 1)), a1 + 32 * (a4 >> 1), (uint64_t)a2, a5, a3);
    }
    else
    {
      sub_20C2480BC(a1, a2, a5, a3);
    }
  }
}

__n128 sub_20C247CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;
  __n128 result;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v19;

  if (a1 == a2)
  {
LABEL_11:
    while (a3 != a4)
    {
      v15 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a5;
      *(_QWORD *)a5 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      sub_20BF1D8F4(a5, v15);
      result = *(__n128 *)(a3 + 8);
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(__n128 *)(a5 + 8) = result;
      a3 += 32;
      a5 += 32;
    }
  }
  else
  {
    v11 = a1;
    while (a3 != a4)
    {
      if (sub_20C247620(a6, (uint64_t *)a3) && (sub_20C247620(a6, (uint64_t *)v11) & 1) == 0)
      {
        v14 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a5;
        *(_QWORD *)a5 = *(_QWORD *)a3;
        *(_QWORD *)a3 = 0;
        sub_20BF1D8F4(a5, v14);
        result = *(__n128 *)(a3 + 8);
        *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
        *(__n128 *)(a5 + 8) = result;
        a3 += 32;
      }
      else
      {
        v12 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a5;
        *(_QWORD *)a5 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        sub_20BF1D8F4(a5, v12);
        result = *(__n128 *)(v11 + 8);
        *(_QWORD *)(a5 + 24) = *(_QWORD *)(v11 + 24);
        *(__n128 *)(a5 + 8) = result;
        v11 += 32;
      }
      a5 += 32;
      if (v11 == a2)
        goto LABEL_11;
    }
    if (v11 != a2)
    {
      v16 = 0;
      do
      {
        v17 = v11 + v16;
        v18 = a5 + v16;
        v19 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a5 + v16);
        *(_QWORD *)(a5 + v16) = *(_QWORD *)(v11 + v16);
        *(_QWORD *)(v11 + v16) = 0;
        sub_20BF1D8F4(a5 + v16, v19);
        result = *(__n128 *)(v11 + v16 + 8);
        *(_QWORD *)(v18 + 24) = *(_QWORD *)(v11 + v16 + 24);
        *(__n128 *)(v18 + 8) = result;
        v16 += 32;
      }
      while (v17 + 32 != a2);
    }
  }
  return result;
}

void sub_20C247E04(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v31;
  void *__p[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v34 = a2;
  v35 = a1;
  if (!a6)
    return;
  v10 = a6;
  v14 = (uint64_t *)a2;
  v15 = a1;
  do
  {
    if (v10 <= a8 || a5 <= a8)
    {
      sub_20C248414((uint64_t)v15, (uint64_t)v14, (uint64_t)a3, (unsigned __int8 *)a4, a5, v10, a7);
      return;
    }
    if (!a5)
      return;
    v16 = -a5;
    while (!sub_20C247620((unsigned __int8 *)a4, v14))
    {
LABEL_10:
      v15 += 4;
      v35 = v15;
      if (__CFADD__(v16++, 1))
        return;
    }
    if (sub_20C247620((unsigned __int8 *)a4, v15))
    {
      v15 = v35;
      goto LABEL_10;
    }
    v30 = a8;
    v31 = a7;
    if (-v16 < v10)
    {
      if (v10 >= 0)
        v18 = v10;
      else
        v18 = v10 + 1;
      v19 = v18 >> 1;
      v20 = &v14[4 * (v18 >> 1)];
      v15 = v35;
      v21 = (uint64_t *)sub_20C248584((uint64_t)v35, (uint64_t)v14, v20, (unsigned __int8 *)a4);
      v22 = ((char *)v21 - (char *)v15) >> 5;
      goto LABEL_28;
    }
    if (v16 == -1)
    {
      sub_20C2478E4(&v35, &v34);
      return;
    }
    if (v16 <= 0)
      v23 = -v16;
    else
      v23 = 1 - v16;
    v15 = v35;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v33 = *(_QWORD *)(a4 + 16);
    }
    v22 = v23 >> 1;
    v21 = &v15[4 * (v23 >> 1)];
    v36 = 0;
    v20 = (uint64_t *)sub_20C2488D4((uint64_t)v14, (uint64_t)a3, v21, (unsigned __int8 *)__p);
    if (SHIBYTE(v33) < 0)
      operator delete(__p[0]);
    v19 = ((char *)v20 - (char *)v14) >> 5;
LABEL_28:
    v28 = v21;
    v29 = a3;
    if (v21 == v14)
    {
      v14 = v20;
      a3 = v20;
    }
    else if (v14 == v20)
    {
      v14 = v20;
      a3 = v21;
    }
    else
    {
      v24 = (uint64_t)v14;
      v14 = v20;
      a3 = sub_20C24895C(v21, v24, (uint64_t)v20);
    }
    a5 = -v22 - v16;
    v25 = v10 - v19;
    if (v22 + v19 >= v10 - v22 - v19 - v16)
    {
      sub_20C247E04(a3, v14, v29, a4, a5, v10 - v19, v31, v30);
      v14 = v28;
      v25 = v19;
      a7 = v31;
      a5 = v22;
      a8 = v30;
    }
    else
    {
      v26 = v22;
      v27 = v19;
      a8 = v30;
      a7 = v31;
      sub_20C247E04(v15, v28, a3, a4, v26, v27, v31, v30);
      v35 = a3;
      v15 = a3;
      a3 = v29;
    }
    v34 = (uint64_t)v14;
    v10 = v25;
  }
  while (v25);
}

void sub_20C2480A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2480BC(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t *v5;
  __int128 v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v16;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v19;
  __int128 v20;

  if ((uint64_t *)a1 != a2)
  {
    v5 = (uint64_t *)a1;
    *(_QWORD *)a3 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a3 + 8) = v6;
    v7 = (uint64_t *)(a1 + 32);
    if ((uint64_t *)(a1 + 32) != a2)
    {
      v9 = 0;
      v10 = 1;
      v11 = a3;
      do
      {
        v12 = v7;
        if (sub_20C247620(a4, v7) && (sub_20C247620(a4, (uint64_t *)v11) & 1) == 0)
        {
          *(_QWORD *)(v11 + 32) = *(_QWORD *)v11;
          *(_QWORD *)v11 = 0;
          *(_OWORD *)(v11 + 40) = *(_OWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 56) = *(_QWORD *)(v11 + 24);
          ++v10;
          v14 = a3;
          if (v11 != a3)
          {
            v15 = v9;
            v14 = v11;
            while (sub_20C247620(a4, v12))
            {
              v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 + v15);
              if ((sub_20C247620(a4, (uint64_t *)(a3 + v15 - 32)) & 1) != 0)
              {
                v14 = a3 + v15;
                break;
              }
              v17 = *v16;
              *v16 = *(v16 - 4);
              *(v16 - 4) = 0;
              sub_20BF1D8F4(a3 + v15, v17);
              v14 -= 32;
              v18 = a3 + v15;
              *(_OWORD *)(v18 + 8) = *(_OWORD *)(a3 + v15 - 24);
              *(_QWORD *)(v18 + 24) = *(_QWORD *)(a3 + v15 - 8);
              v15 -= 32;
              if (!v15)
              {
                v14 = a3;
                break;
              }
            }
          }
          v19 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v14;
          *(_QWORD *)v14 = *v12;
          *v12 = 0;
          sub_20BF1D8F4(v14, v19);
          v20 = *(_OWORD *)(v5 + 5);
          *(_QWORD *)(v14 + 24) = v5[7];
          *(_OWORD *)(v14 + 8) = v20;
        }
        else
        {
          *(_QWORD *)(v11 + 32) = *v12;
          *v12 = 0;
          v13 = *(_OWORD *)(v5 + 5);
          *(_QWORD *)(v11 + 56) = v5[7];
          *(_OWORD *)(v11 + 40) = v13;
          ++v10;
        }
        v11 += 32;
        v7 = v12 + 4;
        v9 += 32;
        v5 = v12;
      }
      while (v12 + 4 != a2);
    }
  }
}

void sub_20C248274(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;
  uint64_t v2;

  for (; v2; --v2)
  {
    sub_20C103234(v1);
    v1 += 4;
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20C24829C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (a1 == a2)
  {
    v12 = a5;
LABEL_12:
    while (a3 != a4)
    {
      *(_QWORD *)v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      result = *(__n128 *)(a3 + 8);
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 + 24);
      *(__n128 *)(v12 + 8) = result;
      a3 += 32;
      v12 += 32;
    }
  }
  else
  {
    v10 = a1;
    v11 = 0;
    v12 = a5;
    while (a3 != a4)
    {
      if (sub_20C247620(a6, (uint64_t *)a3) && (sub_20C247620(a6, v10) & 1) == 0)
      {
        *(_QWORD *)v12 = *(_QWORD *)a3;
        *(_QWORD *)a3 = 0;
        result = *(__n128 *)(a3 + 8);
        *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 + 24);
        *(__n128 *)(v12 + 8) = result;
        a3 += 32;
      }
      else
      {
        *(_QWORD *)v12 = *v10;
        *v10 = 0;
        result = *(__n128 *)(v10 + 1);
        *(_QWORD *)(v12 + 24) = v10[3];
        *(__n128 *)(v12 + 8) = result;
        v10 += 4;
      }
      ++v11;
      v12 += 32;
      if (v10 == a2)
        goto LABEL_12;
    }
    if (v10 != a2)
    {
      v14 = 0;
      do
      {
        v15 = v12 + v14 * 8;
        v16 = &v10[v14];
        *(_QWORD *)v15 = v10[v14];
        *v16 = 0;
        result = *(__n128 *)&v10[v14 + 1];
        *(_QWORD *)(v15 + 24) = v10[v14 + 3];
        *(__n128 *)(v15 + 8) = result;
        v14 += 4;
      }
      while (v16 + 4 != a2);
    }
  }
  return result;
}

void sub_20C2483EC(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      sub_20C103234(v1);
      v1 += 4;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C248414(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 *v17;

  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      v10 = 0;
      v14 = (uint64_t)a7;
    }
    else
    {
      v10 = 0;
      v14 = (uint64_t)a7;
      v15 = a1;
      do
      {
        *(_QWORD *)v14 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        v16 = *(_OWORD *)(v15 + 8);
        *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
        *(_OWORD *)(v14 + 8) = v16;
        ++v10;
        v14 += 32;
        v15 += 32;
      }
      while (v15 != a2);
    }
    sub_20C248604((uint64_t)a7, v14, a2, a3, a1, a4);
  }
  else
  {
    if (a2 == a3)
    {
      v10 = 0;
      v11 = (uint64_t)a7;
    }
    else
    {
      v10 = 0;
      v11 = (uint64_t)a7;
      v12 = a2;
      do
      {
        *(_QWORD *)v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        v13 = *(_OWORD *)(v12 + 8);
        *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
        *(_OWORD *)(v11 + 8) = v13;
        ++v10;
        v11 += 32;
        v12 += 32;
      }
      while (v12 != a3);
    }
    v17 = a4;
    sub_20C248710(v11, v11, (uint64_t)a7, (uint64_t)a7, a2, a2, a1, a1, a3, a3, &v17);
  }
  if (a7 && v10)
  {
    do
    {
      sub_20C103234(a7);
      a7 += 4;
      --v10;
    }
    while (v10);
  }
}

void sub_20C248558(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      sub_20C103234(v1);
      v1 += 4;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C248584(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;

  v4 = a1;
  if (a2 != a1)
  {
    v7 = (a2 - a1) >> 5;
    do
    {
      v8 = v7 >> 1;
      if (!sub_20C247620(a4, a3) || sub_20C247620(a4, (uint64_t *)(v4 + 32 * (v7 >> 1))))
      {
        v4 += 32 * (v7 >> 1) + 32;
        v8 = v7 + ~v8;
      }
      v7 = v8;
    }
    while (v8);
  }
  return v4;
}

void sub_20C248604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  __int128 v16;

  if (a1 != a2)
  {
    v7 = a5;
    v11 = a1;
    v12 = a5;
    while (a3 != a4)
    {
      if (sub_20C247620(a6, (uint64_t *)a3) && (sub_20C247620(a6, (uint64_t *)v11) & 1) == 0)
      {
        v15 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v12;
        *(_QWORD *)v12 = *(_QWORD *)a3;
        *(_QWORD *)a3 = 0;
        sub_20BF1D8F4(v12, v15);
        v16 = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 + 24);
        *(_OWORD *)(v12 + 8) = v16;
        a3 += 32;
      }
      else
      {
        v13 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v12;
        *(_QWORD *)v12 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        sub_20BF1D8F4(v12, v13);
        v14 = *(_OWORD *)(v11 + 8);
        *(_QWORD *)(v12 + 24) = *(_QWORD *)(v11 + 24);
        *(_OWORD *)(v12 + 8) = v14;
        v11 += 32;
      }
      v12 += 32;
      v7 += 32;
      if (v11 == a2)
        return;
    }
    sub_20C248814(v11, a2, v7);
  }
}

void sub_20C248710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 **a11)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;
  __int128 v23;

  if (a2 != a4)
  {
    v14 = a2;
    v15 = a10 - 32;
    while (a6 != a8)
    {
      v16 = sub_20C248894(a11, (uint64_t *)(a6 - 32), (uint64_t *)(v14 - 32));
      v17 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v15;
      if (v16)
        v18 = a6;
      else
        v18 = v14;
      if (v16)
        a6 -= 32;
      else
        v14 -= 32;
      *(_QWORD *)v15 = *(_QWORD *)(v18 - 32);
      *(_QWORD *)(v18 - 32) = 0;
      sub_20BF1D8F4(v15, v17);
      v19 = *(_OWORD *)(v18 - 24);
      *(_QWORD *)(v15 + 24) = *(_QWORD *)(v18 - 8);
      *(_OWORD *)(v15 + 8) = v19;
      v15 -= 32;
      if (v14 == a4)
        return;
    }
    v20 = 0;
    do
    {
      v21 = v15 + v20;
      v22 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v15 + v20);
      *(_QWORD *)(v15 + v20) = *(_QWORD *)(v14 + v20 - 32);
      *(_QWORD *)(v14 + v20 - 32) = 0;
      sub_20BF1D8F4(v15 + v20, v22);
      v23 = *(_OWORD *)(v14 + v20 - 24);
      *(_QWORD *)(v21 + 24) = *(_QWORD *)(v14 + v20 - 8);
      *(_OWORD *)(v21 + 8) = v23;
      v20 -= 32;
    }
    while (v14 + v20 != a4);
  }
}

uint64_t sub_20C248814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  __int128 v8;

  v3 = a3;
  v4 = a1;
  if (a1 != a2)
  {
    v6 = a3;
    do
    {
      v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6;
      *(_QWORD *)v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      sub_20BF1D8F4(v6, v7);
      v8 = *(_OWORD *)(v4 + 8);
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(v4 + 24);
      *(_OWORD *)(v6 + 8) = v8;
      v3 += 32;
      v4 += 32;
      v6 += 32;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_20C248894(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3)
{
  unsigned __int8 *v4;
  uint64_t result;

  v4 = *a1;
  result = sub_20C247620(*a1, a3);
  if ((_DWORD)result)
    return sub_20C247620(v4, a2) ^ 1;
  return result;
}

uint64_t sub_20C2488D4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;

  v4 = a1;
  if (a2 != a1)
  {
    v7 = (a2 - a1) >> 5;
    do
    {
      v8 = v7 >> 1;
      if (sub_20C247620(a4, (uint64_t *)(v4 + 32 * (v7 >> 1))) && (sub_20C247620(a4, a3) & 1) == 0)
      {
        v8 = v7 + ~v8;
        v4 += 32 * (v7 >> 1) + 32;
      }
      v7 = v8;
    }
    while (v8);
  }
  return v4;
}

uint64_t *sub_20C24895C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;

  v4 = a2;
  v10 = a2;
  v11 = a1;
  while (1)
  {
    sub_20C2478E4(&v11, &v10);
    v5 = v11 + 4;
    v6 = v10 + 32;
    v10 = v6;
    v11 += 4;
    if (v6 == a3)
      break;
    if (v5 == (uint64_t *)v4)
      v4 = v6;
  }
  if (v5 != (uint64_t *)v4)
  {
    do
    {
      v10 = v4;
      while (1)
      {
        sub_20C2478E4(&v11, &v10);
        v7 = v11 + 4;
        v8 = v10 + 32;
        v10 = v8;
        v11 += 4;
        if (v8 == a3)
          break;
        if (v7 == (uint64_t *)v4)
          v4 = v8;
      }
    }
    while (v7 != (uint64_t *)v4);
  }
  return v5;
}

void sub_20C248A0C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C248A0C(a1, *a2);
    sub_20C248A0C(a1, a2[1]);
    sub_20C248A54((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_20C248A54(uint64_t a1)
{
  sub_20BFE4CE8(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t *sub_20C248A8C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C137858((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C1378E8((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C248B34((uint64_t)v10, 0);
  }
  return v7;
}

void sub_20C248B34(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C248A54((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C248B78(void ***a1)
{
  void **v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  void *v5;

  v1 = *a1;
  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20C103234(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C248BE8(void ***a1)
{
  void **v1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v4;
  void *v5;

  v1 = *a1;
  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)**a1;
  if (v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)v4 - 56));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C248C58(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_20C248CDC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C248CDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  result = *(_QWORD *)(a2 + 8);
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C248D4C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C248D4C(a1, *a2);
    sub_20C248D4C(a1, a2[1]);
    sub_20C248D94((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_20C248D94(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C248DD8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

_QWORD *sub_20C248E18(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD v26[2];
  uint64_t *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      v19 = v12 - (_QWORD)a2;
      v20 = (uint64_t)(v12 - (_QWORD)a2) >> 4;
      if (v20 >= a5)
      {
        v21 = &a3[a5];
      }
      else
      {
        v21 = &a3[v20];
        a1[1] = (uint64_t)sub_20C20E618(v9, v21, a4, *(uint64_t **)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      sub_20C248FC0((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      sub_20C20E6F0((uint64_t)v26, v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 4;
      v16 = v10 - v13;
      if (v16 >> 3 > v14)
        v14 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v29 = v9;
      if (v17)
        v18 = (char *)sub_20BDEA2F0(v9, v17);
      else
        v18 = 0;
      v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v27 = v22;
      v28 = &v18[16 * v17];
      v23 = 16 * a5;
      v24 = &v22[2 * a5];
      do
      {
        sub_20C1034E8(v22, v7);
        v22 += 2;
        ++v7;
        v23 -= 16;
      }
      while (v23);
      v27 = v24;
      v5 = (_QWORD *)sub_20C249020(a1, v26, v5);
      sub_20BEB5F68((unsigned int *)v26);
    }
  }
  return v5;
}

void sub_20C248F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C248FC0(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C2490D0((uint64_t)&v11, a2, v7, v6);
}

uint64_t sub_20C249020(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C1399BC((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C249154(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *sub_20C2490D0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      v9 = *(unsigned int **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      v7[1] = 0;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
      }
      *v7 = 0;
    }
    while (v7 != a2);
  }
  return a3;
}

_OWORD *sub_20C249154(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  _OWORD *v4;
  _QWORD v6[3];
  char v7;
  _OWORD *v8;
  _OWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  sub_20C20E6BC((uint64_t)v6);
  return v4;
}

uint64_t *sub_20C2491C4(uint64_t a1, unint64_t *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_20C249288(a1, a3, a4, (uint64_t)v11);
    sub_20BDDE1B4((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_20C2492FC((uint64_t)v11, 0);
  }
  return v8;
}

_DWORD *sub_20C249288@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _DWORD *v8;
  _DWORD *result;
  uint64_t v10;

  v7 = a1 + 8;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  sub_20BFD6E54(v8 + 8, a2);
  result = sub_20BFD6EA4(v8 + 9, a2 + 1);
  v10 = *a3;
  *a3 = 0;
  *((_QWORD *)v8 + 5) = v10;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C2492FC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C248D94((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20C249340(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2493B4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2493B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v10 = 0;
  v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    v12 = (uint64_t *)(v11 + v10);
    *v12 = *(_QWORD *)(a3 + v10 - 8);
    v10 -= 8;
    sub_20BF1DD04(v12);
  }
  return a6;
}

uint64_t sub_20C249448(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C249494(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE16B34(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v15 = v14;
  v16 = &v10[56 * v9];
  sub_20C20123C(v14, a2);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a2 + 40);
  v15 += 56;
  sub_20C2495C0(a1, &v13);
  v11 = a1[1];
  sub_20C2496D8((uint64_t)&v13);
  return v11;
}

void sub_20C2495AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2496D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2495C0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C249634((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C249634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      sub_20C20123C((_DWORD *)(a7 + v11 - 56), a3 + v11 - 56);
      *(_OWORD *)(a7 + v11 - 16) = *(_OWORD *)(a3 + v11 - 16);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_20C2496B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 56)
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2496D8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20C249724(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C24978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C248B78(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2497A0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C00D6B0(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, a2 << 6);
    a1[1] = &v4[64 * a2];
  }
  return a1;
}

void sub_20C249808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C248C58(&a9);
  _Unwind_Resume(a1);
}

void sub_20C24981C(void ***a1)
{
  void **v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  void *v5;

  v1 = *a1;
  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20C103234(v4 - 4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C24988C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if (!sub_20BFF2B40(a2, (uint64_t)(v2 + 4)))
      {
        if (!sub_20BFF2B40((uint64_t)(v2 + 4), a2))
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_20C2498F4(uint64_t *a1, _QWORD *a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;

  v5 = *a1;
  v6 = (a1[1] - *a1) >> 5;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59)
    sub_20BDDF694();
  v11 = (uint64_t)(a1 + 2);
  v12 = a1[2] - v5;
  if (v12 >> 4 > v7)
    v7 = v12 >> 4;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
    v13 = 0x7FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v22 = a1 + 2;
  if (v13)
    v14 = (char *)sub_20BED2F10(v11, v13);
  else
    v14 = 0;
  v15 = &v14[32 * v6];
  v19[0] = v14;
  v19[1] = v15;
  v20 = v15;
  v21 = &v14[32 * v13];
  v16 = *a4;
  *(_QWORD *)v15 = *a2;
  sub_20BF1DD04((uint64_t *)v15);
  *(_OWORD *)(v15 + 8) = *a3;
  *((_QWORD *)v15 + 3) = v16;
  v20 += 32;
  sub_20C249A04(a1, v19);
  v17 = a1[1];
  sub_20C249B2C((uint64_t)v19);
  return v17;
}

void sub_20C2499F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C249B2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C249A04(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C249A78((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C249A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  if (a3 != a5)
  {
    v10 = 0;
    v11 = a7 - 32;
    do
    {
      v12 = v11 + v10;
      *(_QWORD *)(v11 + v10) = *(_QWORD *)(a3 + v10 - 32);
      sub_20BF1DD04((uint64_t *)(v11 + v10));
      v13 = *(_OWORD *)(a3 + v10 - 24);
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 + v10 - 8);
      *(_OWORD *)(v12 + 8) = v13;
      v10 -= 32;
    }
    while (a3 + v10 != a5);
  }
  return a6;
}

void sub_20C249B0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 32)
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C249B2C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C249B78(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C249BEC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C249BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v8 = a7 - 64;
    do
    {
      v9 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)v8 = v9;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v10 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v11 = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(a3 + 56);
      *(_OWORD *)(v8 + 40) = v11;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *((_QWORD *)&v17 + 1) = v8;
      v8 -= 64;
      v7 -= 64;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C249CAC((uint64_t)v14);
  return v12;
}

uint64_t sub_20C249CAC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C249CE0((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C249CE0(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C248CDC(v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C249D30(void **a1)
{
  sub_20C249D60((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20C249D60(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 64;
      result = sub_20C248CDC(v4, v1 - 64);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C249DA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20C00D6F0(v7, v9);
  else
    v10 = 0;
  v11 = &v10[64 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[64 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *((_OWORD *)v11 + 1) = v12;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v13 = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = v13;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v16[2] = v11 + 64;
  sub_20C249B78(a1, v16);
  v14 = a1[1];
  sub_20C249D30(v16);
  return v14;
}

void sub_20C249EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C249D30((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C249EB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C249F28((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C249F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v10 = 0;
  v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    v12 = (uint64_t *)(v11 + v10);
    *v12 = *(_QWORD *)(a3 + v10 - 8);
    v10 -= 8;
    sub_20BF1DD04(v12);
  }
  return a6;
}

uint64_t sub_20C249FBC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_20C1075E8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *this)
{
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((_QWORD *)this + 7);
  *((_QWORD *)this + 9) = 0;
  return this;
}

void sub_20C24A04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v12;

  a10 = (void **)(v10 + 32);
  sub_20BDE9EB0(&a10);
  v12 = *(_QWORD *)(v10 + 24);
  if (v12)
    sub_20C96B340(v12);
  sub_20C96B9B8(v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD **a4, _QWORD *a5)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t *);
  char v17;
  unint64_t v18;
  uint64_t v20;
  char v21;

  *(_QWORD *)a1 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 16) = *a3;
  v10 = a3[1];
  *(_QWORD *)(a1 + 24) = v10;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BFB73DC((char *)(a1 + 32), *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  *(_QWORD *)(a1 + 56) = *a5;
  v13 = a5[1];
  *(_QWORD *)(a1 + 64) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = sub_20BFD2F78((_QWORD *)a1);
  v18 = v17 & 1 | (unint64_t)v16;
  if (v18)
  {
    v20 = 0;
    v21 = 0;
    sub_20C24ABB4((uint64_t)&v20, a1, a1 + 16, a1 + 32, (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
    v18 = bswap64(0x9E3779B97F4A7C55 * v20);
  }
  *(_QWORD *)(a1 + 72) = v18;
  return a1;
}

void sub_20C24A1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v14 = *(unsigned int **)(v12 + 24);
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  v18 = *(unsigned int **)(v12 + 8);
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::_ComputeHash(pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *this)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20C24ABB4((uint64_t)&v2, (uint64_t)this, (uint64_t)this + 16, (uint64_t)this + 32, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)this + 56));
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_20BF2D298(a1, a2);
    sub_20BF2D298(a1 + 16, a2 + 16);
    sub_20C24A6B0(a1 + 32, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
    sub_20BDE881C((_QWORD *)(a1 + 56), (uint64_t *)(a2 + 56));
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator BOOL(_QWORD *a1)
{
  uint64_t (*v1)(uint64_t *);
  char v2;

  v1 = sub_20BFD2F78(a1);
  return (v2 & 1 | (unint64_t)v1) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];
  _QWORD v4[5];
  char v5;

  v4[0] = a1 + 72;
  v4[1] = a1;
  v4[2] = a1 + 16;
  v4[3] = a1 + 32;
  v4[4] = a1 + 56;
  v3[0] = a2 + 72;
  v3[1] = a2;
  v3[2] = a2 + 16;
  v3[3] = a2 + 32;
  v3[4] = a2 + 56;
  return sub_20C24A860((uint64_t)&v5, (uint64_t)v4, (uint64_t)v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator<(uint64_t a1, uint64_t a2)
{
  uint64_t v3[4];
  uint64_t v4[4];
  char v5;

  v4[0] = a1 + 16;
  v4[1] = a1;
  v4[2] = a1 + 32;
  v4[3] = a1 + 56;
  v3[0] = a2 + 16;
  v3[1] = a2;
  v3[2] = a2 + 32;
  v3[3] = a2 + 56;
  return sub_20C24A940((uint64_t)&v5, v4, v3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatBaseName(_QWORD *a1)
{
  std::ios_base *v2;
  int v3;

  v2 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v3 = sub_20C24A408();
  *std::ios_base::iword(v2, v3) = 2;
  return a1;
}

uint64_t sub_20C24A408()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2549881F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549881F0))
  {
    qword_2549881E8 = std::ios_base::xalloc();
    __cxa_guard_release(&qword_2549881F0);
  }
  return qword_2549881E8;
}

void sub_20C24A464(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549881F0);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatRealPath(_QWORD *a1)
{
  std::ios_base *v2;
  int v3;

  v2 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v3 = sub_20C24A408();
  *std::ios_base::iword(v2, v3) = 1;
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatIdentifier(_QWORD *a1)
{
  std::ios_base *v2;
  int v3;

  v2 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v3 = sub_20C24A408();
  *std::ios_base::iword(v2, v3) = 0;
  return a1;
}

void sub_20C24A544(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t *);
  char v9;
  _QWORD *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::string __p;

  v4 = sub_20BDDC1C8(a1, (uint64_t)"@", 1);
  sub_20C24AAC4(a1, a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = sub_20BDDC1C8(v4, (uint64_t)p_p, size);
  sub_20BDDC1C8(v7, (uint64_t)"@", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = sub_20BFD2F78(a2 + 2);
  if (v9 & 1 | (unint64_t)v8)
  {
    v10 = sub_20BDDC1C8(a1, (uint64_t)",@", 2);
    sub_20C24AAC4(a1, a2 + 2, &__p);
    v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
    sub_20BDDC1C8(v13, (uint64_t)"@", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v14 = a2[7];
  if (v14)
  {
    sub_20BDDC1C8(a1, (uint64_t)",exprVarOverrideSource=", 23);
    sub_20C24A544(a1, v14);
  }
}

void sub_20C24A690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C24A6B0(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;

  v6 = a2;
  v8 = *(char **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_20BE10AE4((void **)a1);
    if (a4 >> 60)
      sub_20BDDF694();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    sub_20BE90F0C((_QWORD *)a1, v11);
    v12 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v13 = v6[1];
      *v12 = *v6;
      v12[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v6 += 2;
      v12 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v16 = *(char **)(a1 + 8);
  v17 = (v16 - v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if (v16 != v8)
    {
      v19 = 16 * v17;
      do
      {
        sub_20BDE881C(v8, v6);
        v6 += 2;
        v8 += 16;
        v19 -= 16;
      }
      while (v19);
      v8 = *(char **)(a1 + 8);
    }
    v12 = (uint64_t *)v8;
    if (v18 != a3)
    {
      v12 = (uint64_t *)v8;
      do
      {
        v20 = v18[1];
        *v12 = *v18;
        v12[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v12 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      sub_20BDE881C(v8, v6);
      v6 += 2;
      v8 += 16;
      v23 += 16;
    }
    while (v6 != a3);
    v16 = *(char **)(a1 + 8);
  }
  while (v16 != v23)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v16 - 16));
  *(_QWORD *)(a1 + 8) = v23;
}

uint64_t sub_20C24A860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;

  result = sub_20C24A8A0((uint64_t)&v6, a2, a3);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==(*(uint64_t **)(a2 + 32), *(uint64_t **)(a3 + 32));
  return result;
}

uint64_t sub_20C24A8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;

  result = sub_20C24A8E0((uint64_t)&v6, a2, a3);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::ArResolverContext::operator==(*(uint64_t **)(a2 + 24), *(uint64_t **)(a3 + 24));
  return result;
}

BOOL sub_20C24A8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return **(_QWORD **)a2 == **(_QWORD **)a3
      && sub_20BEB560C(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8))
      && sub_20BEB560C(*(_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16));
}

uint64_t sub_20C24A940(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  char v6;

  if (sub_20BFF2B40(*a2, *a3))
    return 1;
  if (sub_20BFF2B40(*a3, *a2))
    return 0;
  return sub_20C24A9A8((uint64_t)&v6, (uint64_t)a2, (uint64_t)a3);
}

uint64_t sub_20C24A9A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  if (sub_20BFF2B40(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8)))
    return 1;
  if (sub_20BFF2B40(*(_QWORD *)(a3 + 8), *(_QWORD *)(a2 + 8)))
    return 0;
  return sub_20C24AA10((uint64_t)&v6, a2, a3);
}

uint64_t sub_20C24AA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  if (pxrInternal__aapl__pxrReserved__::ArResolverContext::operator<(*(uint64_t **)(a2 + 16), *(uint64_t **)(a3 + 16)))
    return 1;
  if (pxrInternal__aapl__pxrReserved__::ArResolverContext::operator<(*(uint64_t **)(a3 + 16), *(uint64_t **)(a2 + 16)))
    return 0;
  return sub_20C24AA78((uint64_t)&v6, a2, a3);
}

uint64_t sub_20C24AA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator<(*(uint64_t **)(a2 + 24), *(uint64_t **)(a3 + 24));
  if ((v5 & 1) == 0)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator<(*(uint64_t **)(a3 + 24), *(uint64_t **)(a2 + 24));
  return v5;
}

void sub_20C24AAC4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  std::ios_base *v8;
  int v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  std::string *Identifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t RealPath;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  __int128 v16;

  v6 = sub_20BFD2F78(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v9 = sub_20C24A408();
    v10 = *std::ios_base::iword(v8, v9);
    if (v10 == 1)
    {
      v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v13);
    }
    else
    {
      if (v10 == 2)
      {
        v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
        Identifier = (std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
        pxrInternal__aapl__pxrReserved__::TfGetBaseName(Identifier, a3);
        return;
      }
      v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
    }
    if (*(char *)(RealPath + 23) < 0)
    {
      sub_20BDDBFAC(a3, *(void **)RealPath, *(_QWORD *)(RealPath + 8));
    }
    else
    {
      v16 = *(_OWORD *)RealPath;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(RealPath + 16);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v16;
    }
  }
  else
  {
    sub_20BDDC0E4(a3, "<expired>");
  }
}

unint64_t sub_20C24ABB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = *(_QWORD *)(a2 + 8);
  v9 = (uint64_t *)(a2 + 8);
  if (v10)
  {
    v11 = sub_20BEB47BC(v9);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  else
  {
    v12 = 0;
  }
  if (*(_BYTE *)(a1 + 8))
    v12 += (unint64_t)(*(_QWORD *)a1 + v12 + (*(_QWORD *)a1 + v12) * (*(_QWORD *)a1 + v12)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v12;
  return sub_20C24AC40(a1, a3, a4, a5);
}

unint64_t sub_20C24AC40(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a2 + 8);
  v7 = (uint64_t *)(a2 + 8);
  if (v8)
  {
    v9 = sub_20BEB47BC(v7);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  else
  {
    v10 = 0;
  }
  if (*(_BYTE *)(a1 + 8))
    v10 += (unint64_t)(*(_QWORD *)a1 + v10 + (*(_QWORD *)a1 + v10) * (*(_QWORD *)a1 + v10)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v10;
  return sub_20C24ACC4(a1, a3, a4);
}

unint64_t sub_20C24ACC4(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a3)
{
  unint64_t v5;
  char v7;

  v5 = sub_20C24AD28((uint64_t)&v7, a2);
  if (*(_BYTE *)(a1 + 8))
    v5 += (*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20C24ADB4(a1, a3);
}

unint64_t sub_20C24AD28(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(uint64_t **)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = v3 >> 4;
    do
    {
      v7 = *v2;
      v2 += 2;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      if (v4)
      {
        v5 = v8 + ((unint64_t)(v8 + v5 + (v8 + v5) * (v8 + v5)) >> 1);
      }
      else
      {
        v4 = 1;
        v5 = v8;
      }
      --v6;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

unint64_t sub_20C24ADB4(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  unint64_t result;

  result = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::GetHash(this);
  if (*(_BYTE *)(a1 + 8))
    result += (*(_QWORD *)a1 + result + (*(_QWORD *)a1 + result) * (*(_QWORD *)a1 + result)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **this, const char *a2, char *a3)
{
  unsigned __int8 v4;

  v4 = atomic_load((unsigned __int8 *)&qword_254988230);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254988230))
  {
    sub_20C20116C((uint64_t)&unk_2549881F8);
    __cxa_atexit((void (*)(void *))sub_20C24AEA8, &unk_2549881F8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988230);
  }
  if (*this)
    return (void *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*this, a2, a3);
  else
    return &unk_2549881F8;
}

void sub_20C24AE90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988230);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *this, const char *a2, char *a3)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v6;
  _BYTE *v7;
  _BYTE *v9;
  _BYTE v10[40];
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)this + 225);
  if ((v4 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_EvaluateUncached(this, a2, a3, (uint64_t)v10);
    sub_20BEB3FEC((uint64_t)&v9, (uint64_t)this + 224);
    v5 = atomic_load((unsigned __int8 *)this + 225);
    if ((v5 & 1) == 0)
    {
      if ((char *)this + 88 != v10)
      {
        v6 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)this + 88));
        sub_20C20123C(v6, (uint64_t)v10);
      }
      *((_OWORD *)this + 8) = v11;
      atomic_store(1u, (unsigned __int8 *)this + 225);
    }
    v7 = v9;
    if (v9)
    {
      __dmb(0xBu);
      *v7 = 0;
    }
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v10);
  }
  return (uint64_t)this + 88;
}

void sub_20C24AF78(_Unwind_Exception *a1, _BYTE *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a2)
  {
    __dmb(0xBu);
    *a2 = 0;
  }
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v7;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression *v8;

  v3 = atomic_load((unsigned __int8 *)&qword_254988240);
  if ((v3 & 1) == 0)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)__cxa_guard_acquire(&qword_254988240);
    if ((_DWORD)v7)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression *)pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity(v7);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant(v8, &qword_254988238);
      __cxa_atexit((void (*)(void *))sub_20C24B0F4, &qword_254988238, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988240);
    }
  }
  v4 = qword_254988238;
  *a1 = qword_254988238;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 84);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
}

void sub_20C24B048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988240);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ **pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapExpression *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v8;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v9;
  pxrInternal__aapl__pxrReserved__ *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  pxrInternal__aapl__pxrReserved__ *v13;

  v11 = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(0, (uint64_t *)&v12, (uint64_t *)&v11, (uint64_t)this, &v13);
  v5 = v13;
  *a2 = v13;
  if (v5)
  {
    v6 = (unsigned int *)((char *)v5 + 84);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  sub_20C211C74(&v13, v4);
  sub_20C211C74(&v11, v8);
  return sub_20C211C74(&v12, v9);
}

void sub_20C24B0D8(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, pxrInternal__aapl__pxrReserved__ *);
  sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)va, a2);
  sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v19;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v20;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  pxrInternal__aapl__pxrReserved__ *v30;
  pxrInternal__aapl__pxrReserved__ *v31;
  _QWORD v32[8];

  v32[7] = *MEMORY[0x24BDAC8D0];
  sub_20BEB59B0((uint64_t)&v27, (uint64_t)"Pcp", (uint64_t)"PcpMapExpresion");
  sub_20C24C540((uint64_t)&v29, a1, a2, a3, a4);
  if (v29 == 1)
  {
    v10 = (char *)operator new(0xE8uLL);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Node((uint64_t)v10, (uint64_t)&v29);
    *a5 = v10;
    v11 = (unsigned int *)(v10 + 84);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v13 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
    if (!v13)
    {
      sub_20C24C5E8(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
      v13 = v23;
    }
    if ((sub_20C24C760(v13, 1, (uint64_t)&v29, (uint64_t)&v24, (uint64_t (*)(uint64_t *, uint64_t, _QWORD))sub_20C24CBD4) & 1) != 0)goto LABEL_12;
    v14 = (unsigned int *)(*(_QWORD *)(v26 + 96) + 84);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (!v15)
    {
LABEL_12:
      v16 = (char *)operator new(0xE8uLL);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Node((uint64_t)v16, (uint64_t)&v29);
      *a5 = v16;
      v17 = (unsigned int *)(v16 + 84);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      *(_QWORD *)(v26 + 96) = *a5;
    }
    else
    {
      *a5 = *(_QWORD *)(v26 + 96);
    }
    v26 = 0;
    sub_20BEBF29C(&v24);
  }
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v32);
  sub_20C211C74(&v31, v19);
  for (result = (uint64_t)sub_20C211C74(&v30, v20); v28--; result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v27))
    ;
  return result;
}

void sub_20C24B33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v6 = 0;
  sub_20BEBF29C((uint64_t *)va);
  sub_20C24BAE0((pxrInternal__aapl__pxrReserved__ **)va2);
  sub_20BEB24F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapExpression *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpMapExpression *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v7;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v16;
  pxrInternal__aapl__pxrReserved__ *v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v20;
  const char *v21;
  char *v22;
  const pxrInternal__aapl__pxrReserved__::PcpMapFunction *v23;
  pxrInternal__aapl__pxrReserved__ *v24;
  _OWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD **)this;
  if (*(_QWORD *)this
    && !*v7
    && (result = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(v7 + 6)),
        (_DWORD)result))
  {
    v9 = *(_QWORD *)a2;
    *a4 = *(_QWORD *)a2;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 84);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  else
  {
    v12 = *(_DWORD **)a2;
    if (*(_QWORD *)a2
      && !*v12
      && (result = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(v12 + 6)),
          (_DWORD)result))
    {
      v13 = *(_DWORD **)this;
      *a4 = *(_QWORD *)this;
      if (v13)
      {
        v14 = v13 + 21;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
    }
    else
    {
      if (**(_DWORD **)this || **(_DWORD **)a2)
      {
        v26 = 0;
        memset(v25, 0, sizeof(v25));
        sub_20C20116C((uint64_t)v25);
        pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(3, (uint64_t *)this, (uint64_t *)a2, (uint64_t)v25, &v24);
        v17 = v24;
        *a4 = v24;
        if (v17)
        {
          v18 = (unsigned int *)((char *)v17 + 84);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        sub_20C211C74(&v24, v16);
      }
      else
      {
        v20 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this, (const char *)a2, a3);
        v23 = (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)a2, v21, v22);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose(v20, v23, (uint64_t)v25);
        pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v25, a4);
      }
      return sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v25);
    }
  }
  return result;
}

void sub_20C24B540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ **pxrInternal__aapl__pxrReserved__::PcpMapExpression::Inverse@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapExpression *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v8;
  pxrInternal__aapl__pxrReserved__ **result;
  const char *v10;
  char *v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  pxrInternal__aapl__pxrReserved__ *v17;
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (**(_DWORD **)this)
  {
LABEL_2:
    v16 = 0;
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    sub_20C20116C((uint64_t)v18);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(2, (uint64_t *)this, (uint64_t *)&v16, (uint64_t)v18, &v17);
    v5 = v17;
    *a2 = v17;
    if (v5)
    {
      v6 = (unsigned int *)((char *)v5 + 84);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    sub_20C211C74(&v17, v4);
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v18);
    return sub_20C211C74(&v16, v8);
  }
  result = (pxrInternal__aapl__pxrReserved__ **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(*(_QWORD *)this + 24));
  v12 = *(_DWORD **)this;
  if (!(_DWORD)result)
  {
    if (!*v12)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this, v10, v11);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetInverse(v15, (uint64_t)v18);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v18, a2);
      return (pxrInternal__aapl__pxrReserved__ **)sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v18);
    }
    goto LABEL_2;
  }
  *a2 = v12;
  if (v12)
  {
    v13 = v12 + 21;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C24B68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ **pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity@<X0>(pxrInternal__aapl__pxrReserved__ **this@<X0>, const char *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v4;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v15;
  _BYTE *v16;
  pxrInternal__aapl__pxrReserved__ *v17;
  pxrInternal__aapl__pxrReserved__ *v18;
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v4 = this;
  v21 = *MEMORY[0x24BDAC8D0];
  v6 = *this;
  if (!*this)
  {
LABEL_8:
    if (!*(_DWORD *)v6)
    {
      v16 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v4, a2, a3);
      sub_20C24B858(v16, (uint64_t)v19);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v19, a4);
      return (pxrInternal__aapl__pxrReserved__ **)sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v19);
    }
    goto LABEL_9;
  }
  if (!*(_DWORD *)v6)
  {
    this = (pxrInternal__aapl__pxrReserved__ **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)v6 + 24));
    v6 = *v4;
    if ((_DWORD)this)
    {
      *a4 = v6;
      if (v6)
      {
        v7 = (unsigned int *)((char *)v6 + 84);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
      return this;
    }
    goto LABEL_8;
  }
LABEL_9:
  if (*((_BYTE *)v6 + 80))
  {
    *a4 = v6;
    v9 = (unsigned int *)((char *)v6 + 84);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  else
  {
    v17 = 0;
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    sub_20C20116C((uint64_t)v19);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(4, (uint64_t *)v4, (uint64_t *)&v17, (uint64_t)v19, &v18);
    v12 = v18;
    *a4 = v18;
    if (v12)
    {
      v13 = (unsigned int *)((char *)v12 + 84);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    sub_20C211C74(&v18, v11);
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v19);
    return sub_20C211C74(&v17, v15);
  }
  return this;
}

void sub_20C24B81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C24B858(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  int *SourceToTargetMap;
  _DWORD *v5;
  uint64_t **v6;
  uint64_t *v7[3];
  _DWORD *v8;

  if (a1[36])
  {
    sub_20C20123C((_DWORD *)a2, (uint64_t)a1);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  }
  else
  {
    SourceToTargetMap = pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetSourceToTargetMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)a1, v7);
    v5 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)SourceToTargetMap);
    v8 = v5;
    v6 = sub_20C246A40(v7, (unint64_t *)v5, (uint64_t)&unk_20CAC184C, &v8);
    sub_20C01A074((int *)v6 + 9, v5);
    sub_20C01A0C8((int *)v6 + 10, v5 + 1);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v7, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 40), a2);
    sub_20BFE4CE8((uint64_t)v7, v7[1]);
  }
}

void sub_20C24B914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BFE4CE8((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::NewVariable(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v6;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v7;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v8;
  pxrInternal__aapl__pxrReserved__ *v9;
  pxrInternal__aapl__pxrReserved__ *v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x10uLL);
  v9 = 0;
  v10 = 0;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  sub_20C20116C((uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(1, (uint64_t *)&v10, (uint64_t *)&v9, (uint64_t)v12, &v11);
  v5 = v11;
  *v4 = &unk_24C52D380;
  v4[1] = v5;
  v11 = 0;
  sub_20C211C74(&v11, v6);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v12);
  sub_20C211C74(&v9, v7);
  sub_20C211C74(&v10, v8);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::SetValueForVariable((_OWORD *)v4[1], a1);
  *a2 = v4;
}

void sub_20C24BA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void sub_20C24BA58(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::SetValueForVariable(*(_OWORD **)(a1 + 8), a2);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_ExpressionTreeAlwaysHasIdentity(int *a1)
{
  int v2;
  _BOOL8 result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  result = 1;
  switch(v2)
  {
    case 0:
      v4 = *((unsigned __int8 *)a1 + 60);
      return v4 != 0;
    case 1:
      return 0;
    case 3:
      v6 = *((_QWORD *)a1 + 1);
      if (v6 && *(_BYTE *)(v6 + 80))
        goto LABEL_8;
      return 0;
    case 4:
      return result;
    default:
      v5 = *((_QWORD *)a1 + 1);
      if (v5 && *(_BYTE *)(v5 + 80))
        return 1;
LABEL_8:
      v7 = *((_QWORD *)a1 + 2);
      if (!v7)
        return 0;
      v4 = *(unsigned __int8 *)(v7 + 80);
      return v4 != 0;
  }
}

pxrInternal__aapl__pxrReserved__ **sub_20C24BAE0(pxrInternal__aapl__pxrReserved__ **a1)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v2;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v3;

  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 3));
  sub_20C211C74(a1 + 2, v2);
  sub_20C211C74(a1 + 1, v3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Node(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t **v12;
  _BYTE *v13;
  uint64_t **v14;
  _BYTE *v15;
  uint64_t v17;
  _QWORD v18[2];

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 84);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = (_QWORD *)(a1 + 16);
  if (v7)
  {
    v9 = (unsigned int *)(v7 + 84);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  sub_20C20123C((_DWORD *)(a1 + 24), a2 + 24);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_ExpressionTreeAlwaysHasIdentity((int *)a1);
  sub_20C20116C(a1 + 88);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 160) = 0;
  sub_20C20116C(a1 + 168);
  *(_BYTE *)(a1 + 224) = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 225));
  __dmb(0xBu);
  *(_DWORD *)(a1 + 84) = 0;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    sub_20BEB3FEC((uint64_t)v18, v11 + 224);
    v12 = (uint64_t **)(*(_QWORD *)(a1 + 8) + 144);
    v17 = a1;
    sub_20BEB968C(v12, (unint64_t *)&v17, &v17);
    v13 = (_BYTE *)v18[0];
    if (v18[0])
    {
      __dmb(0xBu);
      *v13 = 0;
    }
  }
  if (*v8)
  {
    sub_20BEB3FEC((uint64_t)v18, *v8 + 224);
    v14 = (uint64_t **)(*(_QWORD *)(a1 + 16) + 144);
    v17 = a1;
    sub_20BEB968C(v14, (unint64_t *)&v17, &v17);
    v15 = (_BYTE *)v18[0];
    if (v18[0])
    {
      __dmb(0xBu);
      *v15 = 0;
    }
  }
  return a1;
}

void sub_20C24BC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  pxrInternal__aapl__pxrReserved__ **v11;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;
  _QWORD **v15;

  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  sub_20C2011B8(v14);
  sub_20BE6100C(v13, *v15);
  sub_20C2011B8(v12);
  sub_20C24BAE0(v11);
  _Unwind_Resume(a1);
}

void sub_20C24BCE4(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  pxrInternal__aapl__pxrReserved__ **v2;
  pxrInternal__aapl__pxrReserved__ **v3;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v4;

  sub_20C211C74(v3, a2);
  sub_20C211C74(v2, v4);
  JUMPOUT(0x20C24BCDCLL);
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::~_Node(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  tbb::spin_rw_mutex_v3 *v5;
  uint64_t v6;
  uint64_t v7;
  tbb::spin_rw_mutex_v3 *v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  tbb::spin_rw_mutex_v3 *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44[3];

  v3 = (char *)this + 8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    sub_20BEB3FEC((uint64_t)&v40, v2 + 224);
    v4 = *((_QWORD *)this + 1) + 144;
    v44[0] = (unint64_t)this;
    sub_20C24D118(v4, v44);
    v5 = v40;
    if (v40)
    {
      __dmb(0xBu);
      *(_BYTE *)v5 = 0;
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    sub_20BEB3FEC((uint64_t)&v40, v6 + 224);
    v7 = *((_QWORD *)this + 2) + 144;
    v44[0] = (unint64_t)this;
    sub_20C24D118(v7, v44);
    v8 = v40;
    if (v40)
    {
      __dmb(0xBu);
      *(_BYTE *)v8 = 0;
    }
  }
  if (*(_DWORD *)this != 1)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v9 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
    if (!v9)
    {
      sub_20C24C5E8(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
      v9 = v38;
    }
    if (v42)
    {
      v10 = (unint64_t *)v40;
      v40 = 0;
      if (v41)
      {
        while (1)
        {
          v11 = *v10;
          v12 = *v10 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            while (1)
            {
              v13 = __ldaxr(v10);
              if (v13 != v11)
                break;
              if (!__stlxr(v12, v10))
                goto LABEL_21;
            }
            __clrex();
            do
              v14 = __ldxr(v10);
            while (__stxr(v14, v10));
          }
          while (v14 == v11);
          sched_yield();
        }
      }
      do
        v15 = __ldaxr(v10);
      while (__stlxr(v15 - 4, v10));
LABEL_21:
      v42 = 0;
    }
    if (sub_20C24C760(v9, 0, (uint64_t)this, (uint64_t)&v40, (uint64_t (*)(uint64_t *, uint64_t, _QWORD))sub_20C24D190)&& *(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v42 + 96) == this)
    {
      v16 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
      if (!v16)
      {
        sub_20C24C5E8(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
        v16 = v39;
      }
      v17 = (_QWORD *)v42;
      v18 = v43;
      v19 = *v16;
      __dmb(0xBu);
      while (1)
      {
        sub_20C24CC58((uint64_t)v44, (uint64_t)v16, v19 & v18, 1);
        v20 = (_QWORD *)(v44[2] + 16);
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
          if (v20)
            v22 = v20 == v17;
          else
            v22 = 1;
        }
        while (!v22);
        if (v20)
          break;
        v23 = *v16;
        __dmb(0xBu);
        if (v19 == v23 || !sub_20BECF7E4((uint64_t)v16, v18, v19, v23))
        {
          if (v42)
          {
            v24 = (unint64_t *)v40;
            v40 = 0;
            if (v41)
            {
              while (1)
              {
                v25 = *v24;
                v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  while (1)
                  {
                    v27 = __ldaxr(v24);
                    if (v27 != v25)
                      break;
                    if (!__stlxr(v26, v24))
                      goto LABEL_48;
                  }
                  __clrex();
                  do
                    v28 = __ldxr(v24);
                  while (__stxr(v28, v24));
                }
                while (v28 == v25);
                sched_yield();
              }
            }
            do
              v29 = __ldaxr(v24);
            while (__stlxr(v29 - 4, v24));
LABEL_48:
            v42 = 0;
          }
          sub_20BEBF29C(v44);
          goto LABEL_67;
        }
        sub_20BEBF29C(v44);
        v19 = v23;
      }
      *v21 = *v17;
      v30 = (unint64_t *)(v16 + 65);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      sub_20BEBF29C(v44);
      if (!v41)
      {
        v41 = 1;
        tbb::spin_rw_mutex_v3::internal_upgrade(v40);
      }
      if (v42)
      {
        v32 = (unint64_t *)v40;
        v40 = 0;
        if (v41)
        {
          while (1)
          {
            v33 = *v32;
            v34 = *v32 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v35 = __ldaxr(v32);
                if (v35 != v33)
                  break;
                if (!__stlxr(v34, v32))
                  goto LABEL_65;
              }
              __clrex();
              do
                v36 = __ldxr(v32);
              while (__stxr(v36, v32));
            }
            while (v36 == v33);
            sched_yield();
          }
        }
        do
          v37 = __ldaxr(v32);
        while (__stlxr(v37 - 4, v32));
LABEL_65:
        v42 = 0;
      }
      sub_20C24C720((uint64_t)v17);
    }
LABEL_67:
    v42 = 0;
    sub_20BEBF29C(&v40);
  }
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)this + 168));
  sub_20BE6100C((uint64_t)this + 144, *((_QWORD **)this + 19));
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)this + 88));
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)this + 24));
  sub_20C211C74((char *)this + 16);
  sub_20C211C74(v3);
}

void sub_20C24C088(void *a1)
{
  sub_20BDC12F4(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_EvaluateUncached(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v8;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v9;
  const pxrInternal__aapl__pxrReserved__::PcpMapFunction *v10;
  _BYTE *v11;
  _QWORD v12[4];
  char v13;

  switch(*(_DWORD *)this)
  {
    case 0:
      sub_20C20123C((_DWORD *)a4, (uint64_t)this + 24);
      v6 = *((_OWORD *)this + 4);
      goto LABEL_5;
    case 1:
      sub_20C20123C((_DWORD *)a4, (uint64_t)this + 168);
      v6 = *((_OWORD *)this + 13);
LABEL_5:
      *(_OWORD *)(a4 + 40) = v6;
      break;
    case 2:
      v8 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this + 1));
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetInverse(v8, a4);
      break;
    case 3:
      v9 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this + 1));
      v10 = (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this + 2));
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose(v9, v10, a4);
      break;
    case 4:
      v11 = (_BYTE *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this
                                                                                                 + 1));
      sub_20C24B858(v11, a4);
      break;
    default:
      v12[0] = "pcp/mapExpression.cpp";
      v12[1] = "_EvaluateUncached";
      v12[2] = 327;
      v12[3] = "PcpMapExpression::Value pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_EvaluateUncached() const";
      v13 = 0;
      v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"unhandled case", a2, a3);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "false", v7);
      *(_QWORD *)(a4 + 48) = 0;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)a4 = 0u;
      sub_20C20116C(a4);
      break;
  }
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Invalidate(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  _QWORD *v4;
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _BYTE v11[56];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)this + 225);
  if ((v1 & 1) != 0)
  {
    v2 = (uint64_t)this;
    atomic_store(0, (unsigned __int8 *)this + 225);
    memset(v11, 0, sizeof(v11));
    sub_20C20116C((uint64_t)v11);
    if ((_BYTE *)(v2 + 88) != v11)
    {
      v3 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 88));
      sub_20C201ECC(v3, (uint64_t)v11);
    }
    *(_OWORD *)(v2 + 128) = *(_OWORD *)&v11[40];
    this = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v11);
    v4 = *(_QWORD **)(v2 + 144);
    v5 = (_QWORD *)(v2 + 152);
    if (v4 != (_QWORD *)(v2 + 152))
    {
      do
      {
        v6 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v4[4];
        sub_20BEB3FEC((uint64_t)v11, (uint64_t)v6 + 224);
        this = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Invalidate(v6);
        v7 = *(_BYTE **)v11;
        if (*(_QWORD *)v11)
        {
          __dmb(0xBu);
          *v7 = 0;
        }
        v8 = (_QWORD *)v4[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v4[2];
            v10 = *v9 == (_QWORD)v4;
            v4 = v9;
          }
          while (!v10);
        }
        v4 = v9;
      }
      while (v9 != v5);
    }
  }
  return this;
}

void sub_20C24C328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::SetValueForVariable(_OWORD *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v4;
  _BYTE *v5;
  _QWORD v6[4];
  char v7;

  if (*(_DWORD *)a1 == 1)
  {
    sub_20BEB3FEC((uint64_t)v6, (uint64_t)(a1 + 14));
    if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator!=((uint64_t)a1 + 168, a2))
    {
      if ((_OWORD *)((char *)a1 + 168) != (_OWORD *)a2)
      {
        v4 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)a1 + 168));
        sub_20C201ECC(v4, a2);
      }
      a1[13] = *(_OWORD *)(a2 + 40);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Invalidate((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
    }
    v5 = (_BYTE *)v6[0];
    if (v6[0])
    {
      __dmb(0xBu);
      *v5 = 0;
    }
  }
  else
  {
    v6[0] = "pcp/mapExpression.cpp";
    v6[1] = "SetValueForVariable";
    v6[2] = 352;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::SetValueForVariable(Value &&)";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set value for non-variable");
  }
}

void sub_20C24C414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::Key::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    return pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==(a1 + 24, a2 + 24);
  }
  else
  {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 84);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

void pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  unsigned int *v2;
  unsigned int v3;
  void *v4;

  v2 = (unsigned int *)((char *)this + 84);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (this)
  {
    if (v3 == 1)
    {
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::~_Node(this);
      operator delete(v4);
    }
  }
}

uint64_t sub_20C24C4C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return a1;
}

void sub_20C24C4E8(pxrInternal__aapl__pxrReserved__ **a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  sub_20C211C74(a1 + 1, a2);
  operator delete(a1);
}

uint64_t sub_20C24C510(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 168;
}

uint64_t sub_20C24C51C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 84);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_20C24C540(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_DWORD *)a1 = a2;
  v7 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 84);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = *a4;
  *(_QWORD *)(a1 + 16) = *a4;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 84);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  sub_20C20123C((_DWORD *)(a1 + 24), a5);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a5 + 40);
  return a1;
}

void sub_20C24C5CC(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  pxrInternal__aapl__pxrReserved__ **v2;
  pxrInternal__aapl__pxrReserved__ **v3;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v5;

  sub_20C211C74(v3, a2);
  sub_20C211C74(v2, v5);
  _Unwind_Resume(a1);
}

void sub_20C24C5E8(unint64_t *a1)
{
  unint64_t *v2;
  unint64_t *v4;

  sub_20C20A3BC();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return;
  }
  __clrex();
  if (v2)
  {
    v4 = sub_20C24C630(v2);
    operator delete(v4);
  }
  atomic_load(a1);
}

unint64_t *sub_20C24C630(unint64_t *a1)
{
  unint64_t v2;
  void *v3;
  unint64_t i;
  unint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD **v11;
  _QWORD *v12;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  for (i = sub_20BEB4B94(v2); ; --i)
  {
    v5 = 0;
    v6 = &a1[i];
    v9 = v6[1];
    v7 = (uint64_t *)(v6 + 1);
    v8 = v9;
    v10 = i <= 1 ? 1 : i;
    do
    {
      v11 = (_QWORD **)(v8 + 24 * v5 + 16);
      while (1)
      {
        v12 = *v11;
        if ((unint64_t)*v11 <= 0x3F)
          break;
        *v11 = (_QWORD *)*v12;
        sub_20C24C720((uint64_t)v12);
      }
      ++v5;
    }
    while (!(v5 >> v10));
    if (i < 8 && i != 1)
      break;
    tbb::internal::deallocate_via_handler_v3(*v7, v3);
LABEL_14:
    *v7 = 0;
  }
  if (i)
    goto LABEL_14;
  __dmb(0xBu);
  *a1 = 1;
  return a1;
}

uint64_t sub_20C24C720(uint64_t a1)
{
  void *v2;

  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 40));
  sub_20C211C74(a1 + 32);
  sub_20C211C74(a1 + 24);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

uint64_t sub_20C24C760(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t, _QWORD))
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  uint64x2_t v35;
  uint64x2_t v36;
  int8x16_t v37;
  int64x2_t v38;
  uint64x2_t v39;
  int8x16_t v40;
  unsigned int v43;
  tbb::spin_rw_mutex_v3 *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v8 = *(_QWORD *)(a3 + 8);
  v48 = *(_QWORD *)(a3 + 16);
  v49 = v8;
  v45 = 0;
  v46 = 0;
  sub_20C24CEB4((uint64_t)&v45, (unsigned int *)a3, &v49, &v48, a3 + 24);
  v9 = 0;
  v10 = 0;
  v11 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v45);
  v12 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_20C24CC58((uint64_t)&v45, (uint64_t)a1, v12 & v11, 0);
    v13 = (_QWORD *)(v47 + 16);
    do
      v13 = (_QWORD *)*v13;
    while ((unint64_t)v13 >= 0x40
         && !pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::Key::operator==(a3, (uint64_t)(v13 + 2)));
    if (a2)
      break;
    if (v13)
    {
      v43 = 1;
LABEL_10:
      v14 = (uint64_t)v9;
      if (!a4)
        goto LABEL_62;
      goto LABEL_11;
    }
    v23 = *a1;
    __dmb(0xBu);
    if (v12 == v23 || !sub_20BECF7E4((uint64_t)a1, v11, v12, v23))
    {
      sub_20BEBF29C(&v45);
      return 0;
    }
LABEL_34:
    sub_20BEBF29C(&v45);
    v12 = v23;
  }
  if (v13)
  {
LABEL_7:
    v43 = 0;
    goto LABEL_10;
  }
  if (!v9)
    v9 = (_QWORD *)a5(a1 + 72, a3, 0);
  if (!v46)
  {
    v46 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v45) & 1) == 0)
    {
      v13 = (_QWORD *)(v47 + 16);
      while (1)
      {
        v13 = (_QWORD *)*v13;
        if ((unint64_t)v13 < 0x40)
          break;
        if (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::Key::operator==(a3, (uint64_t)(v13 + 2)))
        {
          if (!v46)
            goto LABEL_7;
          v24 = (unint64_t *)v45;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 + 3, v24));
          v43 = 0;
          v46 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  v23 = *a1;
  __dmb(0xBu);
  if (v12 != v23)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v11, v12, v23))
      goto LABEL_36;
    goto LABEL_34;
  }
  v23 = v12;
LABEL_36:
  v10 = sub_20BECF26C((uint64_t)a1, v47, v9, v23);
  v14 = 0;
  v43 = 1;
  v13 = v9;
  if (!a4)
  {
LABEL_62:
    sub_20BEBF29C(&v45);
    if (!v10)
      goto LABEL_59;
    goto LABEL_46;
  }
LABEL_11:
  *(_BYTE *)(a4 + 8) = 1;
  if (!tbb::spin_rw_mutex_v3::internal_try_acquire_writer((tbb::spin_rw_mutex_v3 *)(v13 + 1)))
  {
    sched_yield();
    v15 = 2;
    while (1)
    {
      *(_BYTE *)(a4 + 8) = 1;
      if (tbb::spin_rw_mutex_v3::internal_try_acquire_writer((tbb::spin_rw_mutex_v3 *)(v13 + 1)))
        break;
      sched_yield();
      v16 = v15 < 16;
      v15 *= 2;
      if (!v16)
      {
        v17 = (unint64_t *)v45;
        v45 = 0;
        if (v46)
        {
          while (1)
          {
            v18 = *v17;
            v19 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v20 = __ldaxr(v17);
                if (v20 != v18)
                  break;
                if (!__stlxr(v19, v17))
                  goto LABEL_25;
              }
              __clrex();
              do
                v21 = __ldxr(v17);
              while (__stxr(v21, v17));
            }
            while (v21 == v18);
            sched_yield();
          }
        }
        do
          v22 = __ldaxr(v17);
        while (__stlxr(v22 - 4, v17));
LABEL_25:
        sched_yield();
        v23 = *a1;
        __dmb(0xBu);
        v9 = (_QWORD *)v14;
        goto LABEL_34;
      }
    }
  }
  *(_QWORD *)a4 = v13 + 1;
  sub_20BEBF29C(&v45);
  *(_QWORD *)(a4 + 16) = v13;
  *(_QWORD *)(a4 + 24) = v11;
  if (v10)
  {
LABEL_46:
    if (v10 < 8)
    {
      v30 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      v31 = -6096;
      do
      {
        v32 = v30 + v31;
        *(_QWORD *)(v32 + 6104) = 0;
        *(_QWORD *)(v32 + 6112) = 3;
        v31 += 24;
      }
      while (v31);
      v33 = (int64x2_t)xmmword_20CA59F60;
      v34 = v30 - 48;
      v35 = (uint64x2_t)vdupq_n_s64(7uLL);
      v36 = (uint64x2_t)vdupq_n_s64(1uLL);
      v37 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      v38 = vdupq_n_s64(2uLL);
      v29 = 255;
      do
      {
        v39 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v31), (int8x16_t)xmmword_20CA59F70);
        v40 = vandq_s8((int8x16_t)vshlq_u64(v36, (uint64x2_t)v33), v37);
        if ((vmovn_s64((int64x2_t)vcgtq_u64(v35, v39)).u8[0] & 1) != 0)
          a1[v31 + 2] = v34 + 24 * v40.i64[0];
        if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v39)).i32[1] & 1) != 0)
          a1[v31 + 3] = v34 + 24 * v40.i64[1];
        v31 += 2;
        v33 = vaddq_s64(v33, v38);
      }
      while (v31 != 8);
    }
    else
    {
      v26 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v10));
      v27 = 1 << v10;
      v28 = (_QWORD *)(v26 + 16);
      do
      {
        *(v28 - 1) = 0;
        *v28 = 3;
        v28 += 3;
        --v27;
      }
      while (v27);
      a1[v10 + 1] = v26;
      v29 = (2 << v10) - 1;
    }
    __dmb(0xBu);
    *a1 = v29;
  }
LABEL_59:
  if (v14)
    sub_20C24C720(v14);
  return v43;
}

void sub_20C24CB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8 * v13 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C24CBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v7[2];

  v4 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x68);
  v7[1] = a1;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = 0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  sub_20C24D068(v4 + 16, a2);
  v7[0] = 0;
  sub_20C24D038(v7, v5);
  return v4;
}

void sub_20C24CC44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C24D038(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C24CC58(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  unsigned int v15;
  char v16;
  tbb::spin_rw_mutex_v3 *v17;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  tbb::spin_rw_mutex_v3 *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
    {
      __dmb(0xBu);
      *(_QWORD *)(v11 + 16) = 0;
      if (a3)
      {
        v12 = HIDWORD(a3);
        if (!HIDWORD(a3))
          v12 = a3;
        v13 = 32 * (HIDWORD(a3) != 0);
        if (v12 >= 0x10000)
        {
          v12 >>= 16;
          v13 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v12 >= 0x100)
        {
          v12 >>= 8;
          v13 |= 8u;
        }
        if (v12 >= 0x10)
        {
          v12 >>= 4;
          v13 |= 4u;
        }
        v14 = v12 >= 4;
        if (v12 >= 4)
          LODWORD(v12) = v12 >> 2;
        v15 = (v12 >> 1) & 1;
        if (v14)
          v13 += 2;
        v16 = v15 + v13;
      }
      else
      {
        v16 = -1;
      }
      v19 = ~(-1 << v16);
      sub_20C24CC58(&v24, a2, v19 & a3, 0);
      v20 = (unint64_t *)(v26 + 16);
      v21 = *(_QWORD *)(v26 + 16);
      __dmb(0xBu);
      if (v21 >= 0x40)
      {
        v22 = (2 * v19) | 1;
        while (1)
        {
          v23 = *(_QWORD *)(v21 + 24);
          v27 = *(_QWORD *)(v21 + 32);
          v28 = v23;
          v29 = 0;
          v30 = 0;
          sub_20C24CEB4((uint64_t)&v29, (unsigned int *)(v21 + 16), &v28, &v27, v21 + 40);
          if ((bswap64(0x9E3779B97F4A7C55 * v29) & v22) != a3)
            break;
          if (v25 || (v25 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v24) & 1) != 0))
          {
            *v20 = *(_QWORD *)v21;
            *(_QWORD *)v21 = *(_QWORD *)(v11 + 16);
            *(_QWORD *)(v11 + 16) = v21;
LABEL_31:
            v21 = *v20;
            if (*v20 <= 0x3F)
              goto LABEL_34;
          }
          else
          {
            v20 = (unint64_t *)(v26 + 16);
            v21 = *(_QWORD *)(v26 + 16);
            __dmb(0xBu);
            if (v21 < 0x40)
              goto LABEL_34;
          }
        }
        v20 = (unint64_t *)v21;
        goto LABEL_31;
      }
LABEL_34:
      sub_20BEBF29C(&v24);
    }
  }
  else
  {
    v17 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v17;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v17);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v17);
  }
  return a1;
}

void sub_20C24CE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  sub_20BEBF29C(v2);
  _Unwind_Resume(a1);
}

unint64_t sub_20C24CEB4(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20C24CEF0(a1, a3, a4, a5);
}

unint64_t sub_20C24CEF0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20C24CF28(a1, a3, a4);
}

unint64_t sub_20C24CF28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  sub_20C24CF88(a1, (unsigned int *)a3);
  return sub_20C02F108(a1, (int8x16_t *)(a3 + 40));
}

uint64_t sub_20C24CF88(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((unsigned __int8 *)a2 + 36);
  if (*(_BYTE *)(a1 + 8))
    v2 += (unint64_t)(*(_QWORD *)a1 + v2 + (*(_QWORD *)a1 + v2) * (*(_QWORD *)a1 + v2)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)a1 = (int)a2[8] + ((unint64_t)(v2 + (int)a2[8] + (v2 + (int)a2[8]) * (v2 + (int)a2[8])) >> 1);
  v3 = (int)a2[8];
  if (v3 >= 3)
    a2 = *(unsigned int **)a2;
  return sub_20C24CFE0(a1, a2, &a2[4 * v3]);
}

uint64_t sub_20C24CFE0(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t v5;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    do
    {
      sub_20BFD84AC(v5, v4);
      result = sub_20BFD84AC(v5, v4 + 2);
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t *sub_20C24D038(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20C24D068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 84);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 84);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  sub_20C20123C((_DWORD *)(a1 + 24), a2 + 24);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_20C24D0FC(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  pxrInternal__aapl__pxrReserved__ **v2;
  pxrInternal__aapl__pxrReserved__ **v3;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v5;

  sub_20C211C74(v3, a2);
  sub_20C211C74(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20C24D118(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_20BE10B80((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t sub_20C24D190()
{
  return 0;
}

int **pxrInternal__aapl__pxrReserved__::PcpMapFunction::PcpMapFunction(int **a1, char *a2, char *a3, char a4, double a5, double a6)
{
  int **result;

  result = sub_20C24F0CC(a1, a2, a3, a4);
  *((double *)result + 5) = a5;
  *((double *)result + 6) = a6;
  return result;
}

{
  int **result;

  result = sub_20C24F0CC(a1, a2, a3, a4);
  *((double *)result + 5) = a5;
  *((double *)result + 6) = a6;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create@<X0>(_QWORD **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _DWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _BOOL8 IsIdentity;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  const char *Text;
  const char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char *v25;
  char *v26;
  int *v27;
  int *v28;
  int *v29;
  uint64_t v30;
  const char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BEB59B0((uint64_t)&v34, (uint64_t)"Pcp", (uint64_t)"PcpMapFunction");
  v7 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  sub_20BFD6E54(&v33, v7);
  sub_20BFD6EA4((_DWORD *)&v33 + 1, v7 + 1);
  v10 = (unint64_t)a1[2];
  if (v10 == 1)
  {
    IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(a2);
    if (IsIdentity)
    {
      v12 = *(_QWORD *)((char *)*a1 + 28);
      if (v12 == v33 && *(_QWORD *)((char *)*a1 + 36) == v12)
      {
        v13 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
        sub_20C20123C((_DWORD *)a3, v13);
        *(_OWORD *)(a3 + 40) = *(_OWORD *)(v13 + 40);
        goto LABEL_20;
      }
    }
    v10 = (unint64_t)a1[2];
  }
  if (v10 >> 31)
  {
    v28 = (int *)"pcp/mapFunction.cpp";
    v29 = (int *)"Create";
    v30 = 177;
    v31 = "static PcpMapFunction pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(const PathMap &, const SdfLayerOffset &)";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot construct a PcpMapFunction with %zu entries; limit is %zu",
      v10,
      0x7FFFFFFFuLL);
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    sub_20C20116C(a3);
  }
  else
  {
    v26 = (char *)*a1;
    v27 = (int *)(a1 + 1);
    while (v26 != (char *)v27)
    {
      v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_20C24D584(&v26, v8, v9) + 28);
      v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_20C24D584(&v26, v14, v15) + 36);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v16)
        || !pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(v16)
        && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v16)
        || !pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v17)
        || !pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(v17)
        && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v17) & 1) == 0)
      {
        v28 = (int *)"pcp/mapFunction.cpp";
        v29 = (int *)"Create";
        v30 = 201;
        v31 = "static PcpMapFunction pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(const PathMap &, const SdfLayerOffset &)";
        v32 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v16);
        v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v17);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"The mapping of '%s' to '%s' is invalid.", Text, v19);
        *(_QWORD *)(a3 + 48) = 0;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        sub_20C20116C(a3);
        goto LABEL_20;
      }
      sub_20C24D5FC(&v26);
    }
    sub_20C250194(&v28, *a1, a1 + 1);
    v25 = (char *)v29;
    v26 = (char *)v28;
    v20 = sub_20C24D6A0((int **)&v26, (int **)&v25);
    v21 = *(_QWORD *)a2;
    v22 = *((_QWORD *)a2 + 1);
    sub_20C24F0CC((int **)a3, v26, v25, v20);
    *(_QWORD *)(a3 + 40) = v21;
    *(_QWORD *)(a3 + 48) = v22;
    v26 = (char *)&v28;
    sub_20C22D004((void ***)&v26);
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  for (result = (uint64_t)sub_20BFD265C(&v33); v35--; result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v34))
    ;
  return result;
}

void sub_20C24D4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20BEB24F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__ *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254988250);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_254988250);
    if ((_DWORD)v3)
    {
      qword_254988248 = (uint64_t)pxrInternal__aapl__pxrReserved__::Pcp_MakeIdentity(v3);
      __cxa_guard_release(&qword_254988250);
    }
  }
  return qword_254988248;
}

void sub_20C24D56C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988250);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C24D584(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath, pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>>::o"
            "perator->() [T = const std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__:"
            ":SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C24D5FC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrRe"
            "served__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath::Fas"
            "tLessThan>>::operator++() [T = const std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__"
            "pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_20C24D6A0(int **a1, int **a2)
{
  int *v4;
  int *v5;
  int *v6;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  char v9;
  int *v10;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v11;
  unint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  v5 = *a2;
  if (*a1 != v5)
  {
    while (1)
    {
      v6 = *a1;
      if (*a1 == v4)
      {
LABEL_8:
        NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
        if ((*(_QWORD *)NameToken & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 2)) & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_24;
        sub_20BFD6E54(&v24, v4);
        sub_20BFD6EA4((_DWORD *)&v24 + 1, v4 + 1);
        sub_20BFD6E54(&v23, v4 + 2);
        sub_20BFD6EA4((_DWORD *)&v23 + 1, v4 + 3);
        v9 = 0;
        while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v24)
             && !(v9 & 1 | !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23)))
        {
          v10 = *a1;
          if (*a1 == *a2)
          {
LABEL_17:
            v9 = 0;
          }
          else
          {
            while (v10 == v4 || *(_QWORD *)v10 != v24 || *((_QWORD *)v10 + 1) != v23)
            {
              v10 += 4;
              if (v10 == *a2)
                goto LABEL_17;
            }
            v9 = 1;
          }
          v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
          if ((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23) & 0xFFFFFFFFFFFFFFF8))
            break;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v21);
          sub_20BFD3EBC((int *)&v24, &v21);
          sub_20BFD3F10((int *)&v24 + 1, &v22);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, &v19);
          sub_20BFD3EBC((int *)&v23, &v19);
          sub_20BFD3F10((int *)&v23 + 1, &v20);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
          sub_20BFD265C(&v19);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
          sub_20BFD265C(&v21);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
        sub_20BFD265C(&v23);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        sub_20BFD265C(&v24);
        if ((v9 & 1) == 0)
        {
LABEL_24:
          v4 += 4;
          v5 = *a2;
          goto LABEL_25;
        }
        v5 = *a2;
      }
      else
      {
        while (*(_QWORD *)v4 != *(_QWORD *)v6 || *((_QWORD *)v4 + 1) != *((_QWORD *)v6 + 1))
        {
          v6 += 4;
          if (v6 == v4)
            goto LABEL_8;
        }
      }
      sub_20C2503D8(v4, v5 - 4);
      v5 = *a2 - 4;
      *a2 = v5;
LABEL_25:
      if (v4 == v5)
      {
        v4 = *a1;
        goto LABEL_28;
      }
    }
  }
  v5 = *a1;
LABEL_28:
  v12 = 126 - 2 * __clz(((char *)v5 - (char *)v4) >> 4);
  if (v5 == v4)
    v13 = 0;
  else
    v13 = v12;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C25041C((uint64_t)v4, v5, v13, 1);
  if (*a1 == *a2)
    return 0;
  v15 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v14);
  v16 = *a1;
  v17 = *(_QWORD *)*a1;
  if (v17 != *v15 || *((_QWORD *)v16 + 1) != v17)
    return 0;
  *a1 = v16 + 4;
  return 1;
}

void sub_20C24D988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18((uint64_t *)va1);
  sub_20BFD1A18((int *)va2);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsNull(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  return !*((_DWORD *)this + 8) && *((_BYTE *)this + 36) == 0;
}

_BYTE *pxrInternal__aapl__pxrReserved__::Pcp_MakeIdentity(pxrInternal__aapl__pxrReserved__ *this)
{
  _BYTE *v1;

  v1 = operator new(0x38uLL);
  sub_20C20116C((uint64_t)v1);
  v1[36] = 1;
  return v1;
}

void sub_20C24DA14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;
  _DWORD *v3;
  unint64_t v5;
  int v6;
  int v7;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)atomic_load(&qword_254988258);
  if (!v1)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(0x18uLL);
    *((_QWORD *)v1 + 2) = 0;
    *((_QWORD *)v1 + 1) = 0;
    *(_QWORD *)v1 = (char *)v1 + 8;
    v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v1);
    sub_20C028354(&v5, v3, v3);
    sub_20C251290((uint64_t **)v1, &v5, &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_20BFD265C(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
    sub_20BFD265C(&v5);
    while (!__ldaxr(&qword_254988258))
    {
      if (!__stlxr((unint64_t)v1, &qword_254988258))
        return (unint64_t)v1;
    }
    __clrex();
    sub_20BFE4CE8((uint64_t)v1, *((_QWORD **)v1 + 1));
    operator delete(v1);
    return atomic_load(&qword_254988258);
  }
  return (unint64_t)v1;
}

void sub_20C24DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v11 + 12));
  sub_20BFD265C(&a11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a10);
  sub_20BFD265C(&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  return !*((_DWORD *)this + 8)
      && *((_BYTE *)this + 36)
      && pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 40));
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentityPathMapping(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  return !*((_DWORD *)this + 8) && *((_BYTE *)this + 36) != 0;
}

__n128 pxrInternal__aapl__pxrReserved__::PcpMapFunction::Swap(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this, pxrInternal__aapl__pxrReserved__::PcpMapFunction *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v4;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v5;
  __n128 result;
  _DWORD v7[10];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20C201ECC(v7, (uint64_t)this);
  if (this != a2)
  {
    v4 = sub_20C2011B8(this);
    sub_20C201ECC(v4, (uint64_t)a2);
  }
  if (v7 != (_DWORD *)a2)
  {
    v5 = sub_20C2011B8(a2);
    sub_20C201ECC(v5, (uint64_t)v7);
  }
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v7);
  result = *(__n128 *)((char *)this + 40);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *(__n128 *)((char *)a2 + 40) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_20C24DC70((uint64_t *)a1, a2);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)(a1 + 40), (double *)(a2 + 40));
  return result;
}

uint64_t sub_20C24DC70(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _BOOL8 v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  v2 = *((unsigned int *)a1 + 8);
  if (__PAIR64__(*((unsigned __int8 *)a1 + 36), v2) != __PAIR64__(*(unsigned __int8 *)(a2 + 36), *(_DWORD *)(a2 + 32)))
    return 0;
  if ((int)v2 >= 3)
  {
    a1 = (uint64_t *)*a1;
    v3 = &a1[2 * v2];
  }
  else
  {
    if (!(_DWORD)v2)
      return 1;
    v3 = &a1[2 * (int)v2];
  }
  v5 = *(uint64_t ***)a2;
  if ((int)v2 < 3)
    v5 = (uint64_t **)a2;
  do
  {
    v6 = (uint64_t *)*a1;
    v7 = (uint64_t *)a1[1];
    a1 += 2;
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v4 = v6 == v8 && v7 == v9;
  }
  while (v4 && a1 != v3);
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator!=(uint64_t a1, uint64_t a2)
{
  return !sub_20C24DC70((uint64_t *)a1, a2)
      || !pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)(a1 + 40), (double *)(a2 + 40));
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  int v4;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v5;

  v4 = *((_DWORD *)this + 8);
  v5 = this;
  if (v4 >= 3)
    v5 = *(pxrInternal__aapl__pxrReserved__::PcpMapFunction **)this;
  return sub_20C24DD5C(a2, (uint64_t)v5, v4, *((_BYTE *)this + 36), 0, a3);
}

_DWORD *sub_20C24DD5C@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  unint64_t PathElementCount;
  unint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  uint64_t v19;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  _DWORD *v28;
  uint64_t v32;
  int v33;
  int v34;

  v7 = a2;
  if (a3 < 1)
  {
    v11 = -1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = -1;
    v12 = a2;
    v13 = a3;
    do
    {
      if (a5)
        v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 8);
      else
        v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v12;
      PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(v14);
      if (PathElementCount >= v10)
      {
        v16 = PathElementCount;
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a1, v14))
        {
          v10 = v16;
          v11 = v9;
        }
      }
      ++v9;
      v12 += 16;
    }
    while (v13 != v9);
  }
  if (v11 == -1 && (a4 & 1) == 0)
  {
    *(_QWORD *)a6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a6);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a6 + 1);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
  v18 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v34);
  if (v11 == -1)
  {
    v22 = a3;
    v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v18);
    sub_20C01A074(&v33, a1);
    sub_20C01A0C8(&v34, (_DWORD *)a1 + 1);
  }
  else
  {
    v19 = v7 + 16 * v11;
    if (a5)
      v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16 * v11);
    else
      v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 8);
    if (a5)
      v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 8);
    else
      v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16 * v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v32, a1, v21, v20, 0);
    v22 = a3;
    sub_20BFD3EBC(&v33, (int *)&v32);
    sub_20BFD3F10(&v34, (int *)&v32 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
    sub_20BFD265C(&v32);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v33))
      goto LABEL_34;
  }
  v23 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(v20);
  if (v22 >= 1)
  {
    v24 = v23;
    v25 = v11;
    v26 = v22;
    while (1)
    {
      if (v25)
      {
        v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a5 ? v7 : v7 + 8);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(v27) > v24
          && pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, v27))
        {
          break;
        }
      }
      --v25;
      v7 += 16;
      if (!--v26)
        goto LABEL_34;
    }
    *(_QWORD *)a6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a6 + 1);
    goto LABEL_35;
  }
LABEL_34:
  v28 = sub_20BFD38A4(a6, &v33);
  sub_20BFD38DC(v28 + 1, &v34);
LABEL_35:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  return sub_20BFD265C(&v33);
}

void sub_20C24DFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  int v4;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v5;

  v4 = *((_DWORD *)this + 8);
  v5 = this;
  if (v4 >= 3)
    v5 = *(pxrInternal__aapl__pxrReserved__::PcpMapFunction **)this;
  return sub_20C24DD5C(a2, (uint64_t)v5, v4, *((_BYTE *)this + 36), 1, a3);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_MapPathExpressionImpl(a1, 0, a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::_MapPathExpressionImpl(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD v7[3];
  void **v8[3];
  uint64_t *v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v16 = a2;
  v14 = a5;
  v15 = a4;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v10[0] = a1;
  v10[1] = &v16;
  v8[0] = (void **)&v11;
  v8[1] = (void **)v10;
  v8[2] = (void **)&v14;
  v9 = &v11;
  v7[0] = &v11;
  v7[1] = v10;
  v7[2] = &v15;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::Walk(a3, (uint64_t)&v9, (uint64_t)sub_20C24F350, (uint64_t)v8, sub_20C24F688, (uint64_t)v7, (void (*)(uint64_t, uint64_t))sub_20C24FD5C);
  if (v11 == v12)
  {
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  else
  {
    sub_20C00D1F0((_QWORD *)a6, v12 - 96);
  }
  v8[0] = (void **)&v11;
  sub_20C1504D4(v8);
}

void sub_20C24E0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C1504D4((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_MapPathExpressionImpl(a1, 1, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpMapFunction *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  uint64_t result;
  __int128 v8;
  uint64_t i;
  int *v10;
  int v11;
  unint64_t v12;
  const pxrInternal__aapl__pxrReserved__::PcpMapFunction *v13;
  int *v14;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v15;
  const pxrInternal__aapl__pxrReserved__::PcpMapFunction *v16;
  int v17;
  uint64_t v18;
  int *v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  _DWORD *v22;
  int *v23;
  pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  _DWORD *v31;
  int *v32;
  int v33;
  const pxrInternal__aapl__pxrReserved__::PcpMapFunction *v34;
  int *v35;
  pxrInternal__aapl__pxrReserved__::SdfPath *v37;
  pxrInternal__aapl__pxrReserved__::SdfPath *v38;
  int v39;
  const pxrInternal__aapl__pxrReserved__::PcpMapFunction *v40;
  pxrInternal__aapl__pxrReserved__::SdfPath *v41;
  _DWORD *v42;
  int *v43;
  char v45;
  char *v46;
  char *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v54;
  int v55;
  int v56;
  void **v57;
  uint64_t v58;
  int *v59;
  int *v60;
  uint64_t v61[3];
  uint64_t v62;
  _DWORD v63[2];
  _BYTE v64[64];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  sub_20BEB59B0((uint64_t)&v62, (uint64_t)"Pcp", (uint64_t)"PcpMapFunction");
  v54 = this;
  if (!*((_DWORD *)this + 8)
    && *((_BYTE *)this + 36)
    && pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 40)))
  {
    result = (uint64_t)sub_20C20123C((_DWORD *)a3, (uint64_t)a2);
    v8 = *(_OWORD *)((char *)a2 + 40);
    goto LABEL_52;
  }
  if (*((_DWORD *)a2 + 8))
    v6 = 1;
  else
    v6 = *((_BYTE *)a2 + 36) == 0;
  if (!v6
    && pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)a2 + 40)))
  {
    result = (uint64_t)sub_20C20123C((_DWORD *)a3, (uint64_t)this);
    v8 = *(_OWORD *)((char *)this + 40);
LABEL_52:
    *(_OWORD *)(a3 + 40) = v8;
    goto LABEL_89;
  }
  for (i = 0; i != 64; i += 16)
    sub_20C25013C(&v64[i]);
  memset(v61, 0, sizeof(v61));
  v10 = (int *)v64;
  v60 = (int *)v64;
  v11 = *((_DWORD *)a2 + 8);
  v12 = v11 + *((unsigned __int8 *)a2 + 36) + *((_DWORD *)v54 + 8) + *((unsigned __int8 *)v54 + 36);
  v53 = a3;
  if ((int)v12 >= 5)
  {
    sub_20C24E8B4(v61, v12);
    v10 = (int *)v61[0];
    v60 = (int *)v61[0];
    v11 = *((_DWORD *)a2 + 8);
  }
  v59 = v10;
  if (v11 >= 3)
    v13 = *(const pxrInternal__aapl__pxrReserved__::PcpMapFunction **)a2;
  else
    v13 = a2;
  v14 = v10;
  v15 = v54;
  if (v11)
  {
    v14 = v10;
    v16 = (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)v13 + 16 * v11);
    do
    {
      sub_20C0D9B58(&v57, v13);
      v17 = *((_DWORD *)v15 + 8);
      v18 = (uint64_t)v15;
      if (v17 >= 3)
        v18 = *(_QWORD *)v15;
      sub_20C24DD5C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, v18, v17, *((_BYTE *)v15 + 36), 0, &v55);
      sub_20BFD3EBC((int *)&v58, &v55);
      sub_20BFD3F10((int *)&v58 + 1, &v56);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
      sub_20BFD265C(&v55);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v58))
      {
        if (v10 == v14)
        {
          v19 = v10;
        }
        else
        {
          v19 = v10;
          while (*(void ***)v19 != v57 || *((_QWORD *)v19 + 1) != v58)
          {
            v19 += 4;
            if (v19 == v14)
            {
              v19 = v14;
              break;
            }
          }
        }
        if (v19 == v14)
        {
          sub_20C24E938(v14, (int *)&v57);
          v14 += 4;
          v15 = v54;
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
      sub_20BFD265C(&v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
      sub_20BFD265C(&v57);
      v13 = (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)v13 + 16);
    }
    while (v13 != v16);
  }
  v59 = v14;
  if (*((_BYTE *)a2 + 36))
  {
    v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C25013C(&v57);
    v22 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v21);
    sub_20C01A074((int *)&v57, v22);
    v23 = sub_20C01A0C8((int *)&v57 + 1, v22 + 1);
    v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v23);
    v25 = *((_DWORD *)v15 + 8);
    v26 = (uint64_t)v15;
    if (v25 >= 3)
      v26 = *(_QWORD *)v15;
    sub_20C24DD5C(v24, v26, v25, *((_BYTE *)v15 + 36), 0, &v55);
    sub_20BFD3EBC((int *)&v58, &v55);
    sub_20BFD3F10((int *)&v58 + 1, &v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
    sub_20BFD265C(&v55);
    v15 = v54;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v58))
    {
      if (v10 != v14)
      {
        while (*(void ***)v10 != v57 || *((_QWORD *)v10 + 1) != v58)
        {
          v10 += 4;
          if (v10 == v14)
          {
            v10 = v14;
            break;
          }
        }
      }
      if (v10 == v14)
      {
        v59 = v14 + 4;
        sub_20C24E938(v14, (int *)&v57);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_20BFD265C(&v58);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
    sub_20BFD265C(&v57);
  }
  v28 = *((unsigned int *)v15 + 8);
  if ((int)v28 >= 3)
  {
    v31 = *(_DWORD **)v15;
    v30 = *(_QWORD *)v15 + 16 * v28;
    v29 = v59;
LABEL_54:
    v32 = v60;
    do
    {
      sub_20C0D9B58(&v57, v31);
      v33 = *((_DWORD *)a2 + 8);
      if (v33 >= 3)
        v34 = *(const pxrInternal__aapl__pxrReserved__::PcpMapFunction **)a2;
      else
        v34 = a2;
      sub_20C24DD5C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v57, (uint64_t)v34, v33, *((_BYTE *)a2 + 36), 1, &v55);
      sub_20BFD3EBC((int *)&v57, &v55);
      sub_20BFD3F10((int *)&v57 + 1, &v56);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
      sub_20BFD265C(&v55);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v57))
      {
        if (v32 == v29)
        {
          v35 = v32;
        }
        else
        {
          v35 = v32;
          while (*(void ***)v35 != v57 || *((_QWORD *)v35 + 1) != v58)
          {
            v35 += 4;
            if (v35 == v29)
            {
              v35 = v29;
              break;
            }
          }
        }
        if (v35 == v29)
        {
          sub_20C24E938(v29, (int *)&v57);
          v29 += 4;
          v15 = v54;
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
      sub_20BFD265C(&v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
      sub_20BFD265C(&v57);
      v31 += 4;
    }
    while (v31 != (_DWORD *)v30);
    goto LABEL_71;
  }
  v29 = v59;
  if ((_DWORD)v28)
  {
    v30 = (uint64_t)v15 + 16 * (int)v28;
    v31 = v15;
    goto LABEL_54;
  }
LABEL_71:
  v59 = v29;
  if (*((_BYTE *)v15 + 36))
  {
    v37 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C25013C(&v57);
    v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v37);
    v39 = *((_DWORD *)a2 + 8);
    if (v39 >= 3)
      v40 = *(const pxrInternal__aapl__pxrReserved__::PcpMapFunction **)a2;
    else
      v40 = a2;
    sub_20C24DD5C(v38, (uint64_t)v40, v39, *((_BYTE *)a2 + 36), 1, &v55);
    sub_20BFD3EBC((int *)&v57, &v55);
    sub_20BFD3F10((int *)&v57 + 1, &v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
    v41 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v55);
    v42 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v41);
    sub_20C01A074((int *)&v58, v42);
    sub_20C01A0C8((int *)&v58 + 1, v42 + 1);
    v15 = v54;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v57))
    {
      v43 = v29;
      if (v60 != v29)
      {
        v43 = v60;
        while (*(void ***)v43 != v57 || *((_QWORD *)v43 + 1) != v58)
        {
          v43 += 4;
          if (v43 == v29)
          {
            v43 = v29;
            break;
          }
        }
      }
      if (v43 == v29)
      {
        v59 = v29 + 4;
        sub_20C24E938(v29, (int *)&v57);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_20BFD265C(&v58);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
    sub_20BFD265C(&v57);
  }
  v45 = sub_20C24D6A0(&v60, &v59);
  v47 = (char *)v59;
  v46 = (char *)v60;
  v48 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)v15 + 5, (double *)a2 + 5);
  v50 = v49;
  sub_20C24F0CC((int **)v53, v46, v47, v45);
  *(double *)(v53 + 40) = v48;
  *(_QWORD *)(v53 + 48) = v50;
  v57 = (void **)v61;
  sub_20C22D004(&v57);
  v51 = 16;
  do
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63[v51 + 1]);
    sub_20BFD265C(&v63[v51]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63[v51 - 1]);
    result = (uint64_t)sub_20BFD265C(&v63[v51 - 2]);
    v51 -= 4;
  }
  while (v51 * 4);
LABEL_89:
  while (v63[0]--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v62);
  return result;
}

void sub_20C24E7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t i;

  a12 = (void **)&a16;
  sub_20C22D004(&a12);
  for (i = 48; i != -16; i -= 16)
    sub_20C024A08(&a21 + i);
  sub_20BEB24F4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C24E8B4(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  _DWORD *v3;
  unint64_t v4;
  uint64_t i;

  v2 = result;
  v3 = (_DWORD *)result[1];
  v4 = ((uint64_t)v3 - *result) >> 4;
  if (a2 > v4)
    return (uint64_t *)sub_20C251370(result, a2 - v4);
  if (a2 < v4)
  {
    for (i = *result + 16 * a2; v3 != (_DWORD *)i; result = (uint64_t *)sub_20C22D088((uint64_t)(v2 + 2), v3))
      v3 -= 4;
    v2[1] = i;
  }
  return result;
}

int *sub_20C24E938(int *a1, int *a2)
{
  sub_20BFD3EBC(a1, a2);
  sub_20BFD3F10(a1 + 1, a2 + 1);
  sub_20BFD3EBC(a1 + 2, a2 + 2);
  sub_20BFD3F10(a1 + 3, a2 + 3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::ComposeOffset(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  sub_20C20123C((_DWORD *)a3, (uint64_t)this);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)((char *)this + 40);
  *(double *)(a3 + 40) = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)(a3 + 40), (double *)a2);
  *(_QWORD *)(a3 + 48) = v6;
}

void sub_20C24E9D4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  sub_20C2011B8(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetInverse(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v5;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v6;
  char *v7;
  char *v8;
  double Inverse;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char **v18;

  sub_20BEB59B0((uint64_t)&v16, (uint64_t)"Pcp", (uint64_t)"PcpMapFunction");
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_20C24EB18((uint64_t *)&v13, *((int *)this + 8));
  v4 = *((unsigned int *)this + 8);
  if ((int)v4 >= 3)
  {
    v6 = *(pxrInternal__aapl__pxrReserved__::PcpMapFunction **)this;
    v5 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(*(_QWORD *)this + 16 * v4);
  }
  else
  {
    if (!(_DWORD)v4)
      goto LABEL_6;
    v5 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 16 * (int)v4);
    v6 = this;
  }
  do
  {
    sub_20C22B148((uint64_t *)&v13, (_DWORD *)v6 + 2, v6);
    v6 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)v6 + 16);
  }
  while (v6 != v5);
LABEL_6:
  v7 = v13;
  v8 = v14;
  Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 40));
  v11 = v10;
  sub_20C24F0CC((int **)a2, v7, v8, *((_BYTE *)this + 36));
  *(double *)(a2 + 40) = Inverse;
  *(_QWORD *)(a2 + 48) = v11;
  v18 = &v13;
  sub_20C22D004((void ***)&v18);
  while (v17--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
}

void sub_20C24EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  sub_20C22D004(&a14);
  sub_20BEB24F4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void **sub_20C24EB18(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDEA2F0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    sub_20C22D4AC(a1, v7);
    return sub_20C22D648(v7);
  }
  return result;
}

void sub_20C24EB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C22D648((void **)va);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetSourceToTargetMap@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int *result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t **v8;
  unint64_t *v9;

  v4 = *((int *)this + 8);
  v5 = (unint64_t *)this;
  if ((int)v4 >= 3)
    v5 = *(unint64_t **)this;
  result = (int *)sub_20C251490((uint64_t)a2, v5, &v5[2 * v4]);
  if (*((_BYTE *)this + 36))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result);
    v9 = (unint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
    v8 = sub_20C246A40(a2, v9, (uint64_t)&unk_20CAC184C, (_DWORD **)&v9);
    sub_20C01A074((int *)v8 + 9, v7);
    return sub_20C01A0C8((int *)v8 + 10, (_DWORD *)v7 + 1);
  }
  return result;
}

void sub_20C24EC4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE4CE8(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  __int128 v8;
  std::string *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  const char *Text;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  const char *v17;
  const char *v18;
  char *v19;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  void **v25;
  std::string *v26;
  void *v27[2];
  std::string::size_type v28;
  uint64_t v29;
  _QWORD **v30;
  uint64_t v31;
  _QWORD *v32;
  void *__p[2];
  void *v34;
  std::string *v35;
  std::string *v36;
  unint64_t v37;
  std::string **v38;
  void **v39;
  void **v40;
  void **v41;
  unint64_t *v42;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 40)))
  {
    sub_20C23A5BC();
    v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3) + 1;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    if (0x5555555555555556 * ((uint64_t)(v37 - (_QWORD)v35) >> 3) > v4)
      v4 = 0x5555555555555556 * ((uint64_t)(v37 - (_QWORD)v35) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)v35) >> 3) >= 0x555555555555555)
      v5 = 0xAAAAAAAAAAAAAAALL;
    else
      v5 = v4;
    v42 = &v37;
    if (v5)
      v6 = (void **)sub_20BDE4FF4((uint64_t)&v37, v5);
    else
      v6 = 0;
    v7 = &v6[((char *)v36 - (char *)v35) >> 3];
    v38 = (std::string **)v6;
    v39 = v7;
    v41 = &v6[3 * v5];
    v8 = *(_OWORD *)__p;
    v7[2] = v34;
    *(_OWORD *)v7 = v8;
    __p[1] = 0;
    v34 = 0;
    __p[0] = 0;
    v40 = v7 + 3;
    sub_20BDF34C0((uint64_t *)&v35, &v38);
    v9 = v36;
    sub_20BDF3648((uint64_t)&v38);
    v36 = v9;
  }
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetSourceToTargetMap(this, (uint64_t **)__p);
  sub_20C251768(&v31, (_QWORD *)__p[0], &__p[1]);
  v29 = v31;
  v30 = &v32;
  while ((_QWORD **)v29 != v30)
  {
    v12 = sub_20C22F3EC(&v29, v10, v11);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v12 + 28));
    v16 = sub_20C22F3EC(&v29, v14, v15);
    v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v16 + 36));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s -> %s", v18, v19, Text, v17);
    v20 = v36;
    if ((unint64_t)v36 >= v37)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v37 - (_QWORD)v35) >> 3) > v22)
        v22 = 0x5555555555555556 * ((uint64_t)(v37 - (_QWORD)v35) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)v35) >> 3) >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v22;
      v42 = &v37;
      if (v23)
        v24 = (void **)sub_20BDE4FF4((uint64_t)&v37, v23);
      else
        v24 = 0;
      v25 = &v24[3 * v21];
      v38 = (std::string **)v24;
      v39 = v25;
      v41 = &v24[3 * v23];
      v25[2] = (void *)v28;
      *(_OWORD *)v25 = *(_OWORD *)v27;
      v28 = 0;
      *(_OWORD *)v27 = 0uLL;
      v40 = v25 + 3;
      sub_20BDF34C0((uint64_t *)&v35, &v38);
      v26 = v36;
      sub_20BDF3648((uint64_t)&v38);
      v36 = v26;
    }
    else
    {
      v36->__r_.__value_.__r.__words[2] = v28;
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)v27;
      v36 = v20 + 1;
    }
    sub_20C22F464(&v29);
  }
  sub_20BEE380C("\n", v35, v36, a2);
  sub_20BFE4CE8((uint64_t)&v31, v32);
  sub_20BFE4CE8((uint64_t)__p, (_QWORD *)__p[1]);
  v38 = &v35;
  sub_20BDE5038((void ***)&v38);
}

void sub_20C24EF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  sub_20BDF3648(v29 - 120);
  if (a28 < 0)
    operator delete(__p);
  __p = &a29;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::Hash(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  char v2;

  return sub_20C24F060((uint64_t)&v2, (uint64_t)this);
}

unint64_t sub_20C24F060(uint64_t a1, uint64_t a2)
{
  unint64_t Hash;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  sub_20C24CF88((uint64_t)&v5, (unsigned int *)a2);
  Hash = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash((int8x16_t *)(a2 + 40));
  if (v6)
    Hash += (v5 + Hash + (v5 + Hash) * (v5 + Hash)) >> 1;
  return bswap64(0x9E3779B97F4A7C55 * Hash);
}

int **sub_20C24F0CC(int **a1, char *a2, char *a3, char a4)
{
  int **v4;
  unint64_t v5;
  char *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;

  v4 = a1;
  v5 = (unint64_t)(a3 - a2) >> 4;
  *((_DWORD *)a1 + 8) = v5;
  *((_BYTE *)a1 + 36) = a4;
  if ((_DWORD)v5)
  {
    v7 = a2;
    if ((int)v5 > 2)
    {
      v9 = ((unint64_t)(a3 - a2) >> 4);
      v10 = 16 * v9;
      v11 = operator new[](16 * v9 + 16);
      *v11 = 16;
      v11[1] = v9;
      v12 = (uint64_t)(v11 + 2);
      v13 = v11 + 2;
      do
      {
        v13 = sub_20C25013C(v13) + 4;
        v10 -= 16;
      }
      while (v10);
      sub_20C24F1AC(v4, v12);
      if (v7 != a3)
      {
        v14 = *v4;
        do
        {
          sub_20C24F304(v14, v7);
          v7 += 16;
          v14 += 4;
        }
        while (v7 != a3);
      }
    }
    else if (a2 != a3)
    {
      do
      {
        v8 = sub_20C0D9B58(a1, v7);
        v7 += 16;
        a1 = (int **)(v8 + 4);
      }
      while (v7 != a3);
    }
  }
  return v4;
}

_QWORD *sub_20C24F1AC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52D3D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C24F1FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;

  __cxa_begin_catch(a1);
  sub_20C24F228((uint64_t)&a13, v13);
  __cxa_rethrow();
}

void sub_20C24F214(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C24F228(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 - 8);
    if (v3)
    {
      v4 = 16 * v3;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + v4 - 4));
        sub_20BFD265C((_DWORD *)(a2 + v4 - 8));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + v4 - 12));
        sub_20BFD265C((_DWORD *)(a2 + v4 - 16));
        v4 -= 16;
      }
      while (v4);
    }
    operator delete[]((void *)(a2 - 16));
  }
}

void sub_20C24F2A8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C24F2BC(uint64_t a1)
{
  sub_20C24F228(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_20C24F2C4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52D410))
    return a1 + 24;
  else
    return 0;
}

int *sub_20C24F304(int *a1, _DWORD *a2)
{
  sub_20C01A074(a1, a2);
  sub_20C01A0C8(a1 + 1, a2 + 1);
  sub_20C01A074(a1 + 2, a2 + 2);
  sub_20C01A0C8(a1 + 3, a2 + 3);
  return a1;
}

void sub_20C24F350(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a2, int a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  void **v15;
  __int128 v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void **v33;

  if ((_DWORD)a2)
  {
    if (a3 != 2)
      return;
    v5 = *(_QWORD *)(*a1 + 8);
    *(_OWORD *)v25 = *(_OWORD *)(v5 - 96);
    v26 = *(_QWORD *)(v5 - 80);
    *(_QWORD *)(v5 - 96) = 0;
    *(_QWORD *)(v5 - 88) = 0;
    *(_QWORD *)(v5 - 80) = 0;
    v27 = *(_OWORD *)(v5 - 72);
    v28 = *(_QWORD *)(v5 - 56);
    *(_QWORD *)(v5 - 72) = 0;
    *(_QWORD *)(v5 - 64) = 0;
    *(_QWORD *)(v5 - 56) = 0;
    v29 = *(_OWORD *)(v5 - 48);
    v30 = *(_QWORD *)(v5 - 32);
    *(_QWORD *)(v5 - 48) = 0;
    *(_QWORD *)(v5 - 40) = 0;
    *(_QWORD *)(v5 - 32) = 0;
    v6 = *(_OWORD *)(v5 - 24);
    v32 = *(_QWORD *)(v5 - 8);
    v31 = v6;
    *(_QWORD *)(v5 - 16) = 0;
    *(_QWORD *)(v5 - 8) = 0;
    *(_QWORD *)(v5 - 24) = 0;
    v7 = *a1;
    v8 = *(_QWORD *)(*a1 + 8) - 96;
    sub_20C14816C(*a1 + 16, v8);
    *(_QWORD *)(v7 + 8) = v8;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(a2, (_QWORD *)(*(_QWORD *)(*a1 + 8) - 96), (uint64_t)v25, (uint64_t)__p);
    v9 = *(_QWORD *)(*a1 + 8);
    v10 = *(void **)(v9 - 96);
    if (v10)
    {
      *(_QWORD *)(v9 - 88) = v10;
      operator delete(v10);
      *(_QWORD *)(v9 - 96) = 0;
      *(_QWORD *)(v9 - 88) = 0;
      *(_QWORD *)(v9 - 80) = 0;
    }
    *(_OWORD *)(v9 - 96) = *(_OWORD *)__p;
    *(_QWORD *)(v9 - 80) = v18;
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0;
    sub_20C00BC18((void **)(v9 - 72));
    *(_OWORD *)(v9 - 72) = v19;
    *(_QWORD *)(v9 - 56) = v20;
    v19 = 0uLL;
    v20 = 0;
    sub_20C00BCC0((void **)(v9 - 48));
    *(_OWORD *)(v9 - 48) = v21;
    *(_QWORD *)(v9 - 32) = v22;
    v21 = 0uLL;
    v22 = 0;
    v11 = (void **)(v9 - 24);
    if (*(char *)(v9 - 1) < 0)
      operator delete(*v11);
    v12 = v23;
    *(_QWORD *)(v9 - 8) = v24;
    *(_OWORD *)v11 = v12;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    v33 = (void **)&v21;
    sub_20C00E25C(&v33);
    v33 = (void **)&v19;
    sub_20C00D5A8(&v33);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    __p[0] = &v29;
    sub_20C00E25C((void ***)__p);
    __p[0] = &v27;
  }
  else
  {
    if (a3 != 1)
      return;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(*(_QWORD *)(*a1 + 8) - 96, (uint64_t)v25);
    v13 = *(_QWORD *)(*a1 + 8);
    v14 = *(void **)(v13 - 96);
    if (v14)
    {
      *(_QWORD *)(v13 - 88) = v14;
      operator delete(v14);
      *(_QWORD *)(v13 - 96) = 0;
      *(_QWORD *)(v13 - 88) = 0;
      *(_QWORD *)(v13 - 80) = 0;
    }
    *(_OWORD *)(v13 - 96) = *(_OWORD *)v25;
    *(_QWORD *)(v13 - 80) = v26;
    v25[0] = 0;
    v25[1] = 0;
    v26 = 0;
    sub_20C00BC18((void **)(v13 - 72));
    *(_OWORD *)(v13 - 72) = v27;
    *(_QWORD *)(v13 - 56) = v28;
    v27 = 0uLL;
    v28 = 0;
    sub_20C00BCC0((void **)(v13 - 48));
    *(_OWORD *)(v13 - 48) = v29;
    *(_QWORD *)(v13 - 32) = v30;
    v29 = 0uLL;
    v30 = 0;
    v15 = (void **)(v13 - 24);
    if (*(char *)(v13 - 1) < 0)
      operator delete(*v15);
    v16 = v31;
    *(_QWORD *)(v13 - 8) = v32;
    *(_OWORD *)v15 = v16;
    HIBYTE(v32) = 0;
    LOBYTE(v31) = 0;
    __p[0] = &v29;
    sub_20C00E25C((void ***)__p);
    __p[0] = &v27;
  }
  sub_20C00D5A8((void ***)__p);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_20C24F644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  sub_20C00E25C((void ***)&a9);
  sub_20C00D5A8((void ***)&a9);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_20C24F688(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  void **v38;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2))
  {
    v4 = *(unsigned __int8 ***)(a1 + 8);
    v5 = *v4;
    v6 = *((_DWORD *)*v4 + 8);
    v7 = (uint64_t)*v4;
    if (v6 >= 3)
      v7 = *(_QWORD *)v5;
    sub_20C24DD5C((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v7, v6, v5[36], *v4[1], &v28);
    v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    if ((v8 & 1) != 0)
    {
      v9 = *(uint64_t **)a1;
      sub_20BFD6E54(&v25, &v28);
      sub_20BFD6EA4((_DWORD *)&v25 + 1, &v29);
      if (*(char *)(a2 + 31) < 0)
      {
        sub_20BDDBFAC(&v26, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
      }
      else
      {
        v26 = *(_OWORD *)(a2 + 8);
        v27 = *(_QWORD *)(a2 + 24);
      }
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v25, (char **)v30);
      v17 = v9[1];
      if (v17 >= v9[2])
      {
        v19 = sub_20C1482F8(v9, (uint64_t)v30);
        v20 = SHIBYTE(v37);
        v9[1] = v19;
        if (v20 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_QWORD *)(v17 + 16) = 0;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_OWORD *)v17 = *(_OWORD *)v30;
        *(_QWORD *)(v17 + 16) = v31;
        v30[0] = 0;
        v30[1] = 0;
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = 0;
        *(_OWORD *)(v17 + 24) = v32;
        *(_QWORD *)(v17 + 40) = v33;
        *(_QWORD *)(v17 + 48) = 0;
        v31 = 0;
        v32 = 0uLL;
        v33 = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_QWORD *)(v17 + 64) = 0;
        *(_OWORD *)(v17 + 48) = v34;
        *(_QWORD *)(v17 + 64) = v35;
        v34 = 0uLL;
        v18 = *(_OWORD *)__p;
        *(_QWORD *)(v17 + 88) = v37;
        *(_OWORD *)(v17 + 72) = v18;
        v35 = 0;
        __p[0] = 0;
        __p[1] = 0;
        v37 = 0;
        v9[1] = v17 + 96;
      }
      v38 = (void **)&v34;
      sub_20C00E25C(&v38);
      v38 = (void **)&v32;
      sub_20C00D5A8(&v38);
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
      if (SHIBYTE(v27) < 0)
        operator delete((void *)v26);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v15 = **(uint64_t ***)(a1 + 16);
      if (v15)
      {
        v16 = v15[1];
        if (v16 >= v15[2])
        {
          v8 = sub_20C24FADC(v15, a2);
        }
        else
        {
          sub_20C24FBC8((uint64_t)(v15 + 2), v15[1], a2);
          v8 = v16 + 32;
          v15[1] = v16 + 32;
        }
        v15[1] = v8;
      }
      v21 = *(uint64_t **)a1;
      v22 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v8);
      v23 = v21[1];
      if (v23 >= v21[2])
      {
        v24 = sub_20C24FC58(v21, v22);
      }
      else
      {
        sub_20C00D1F0((_QWORD *)v21[1], v22);
        v24 = v23 + 96;
        v21[1] = v23 + 96;
      }
      v21[1] = v24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_20BFD265C(&v28);
  }
  else
  {
    v10 = *(uint64_t **)a1;
    sub_20C1449B4(a2, (char **)v30);
    v11 = v10[1];
    if (v11 >= v10[2])
    {
      v13 = sub_20C1482F8(v10, (uint64_t)v30);
      v14 = SHIBYTE(v37);
      v10[1] = v13;
      if (v14 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_OWORD *)v11 = *(_OWORD *)v30;
      *(_QWORD *)(v11 + 16) = v31;
      v30[0] = 0;
      v30[1] = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_OWORD *)(v11 + 24) = v32;
      *(_QWORD *)(v11 + 40) = v33;
      *(_QWORD *)(v11 + 48) = 0;
      v31 = 0;
      v32 = 0uLL;
      v33 = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_OWORD *)(v11 + 48) = v34;
      *(_QWORD *)(v11 + 64) = v35;
      v34 = 0uLL;
      v12 = *(_OWORD *)__p;
      *(_QWORD *)(v11 + 88) = v37;
      *(_OWORD *)(v11 + 72) = v12;
      v35 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v37 = 0;
      v10[1] = v11 + 96;
    }
    v25 = (void **)&v34;
    sub_20C00E25C(&v25);
    v25 = (void **)&v32;
    sub_20C00D5A8(&v25);
    if (v30[0])
    {
      v30[1] = v30[0];
      operator delete(v30[0]);
    }
  }
}

void sub_20C24F9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, int a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = v33;
  *(_QWORD *)(v35 + 8) = v34;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_20BFD265C(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C24FADC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C24FBC8((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  sub_20C15036C(a1, &v11);
  v9 = a1[1];
  sub_20C14FAC8(&v11);
  return v9;
}

void sub_20C24FBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C14FAC8((void **)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C24FBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  __int128 v6;

  sub_20BFD6E54((_DWORD *)a2, (_DWORD *)a3);
  sub_20BFD6EA4((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  result = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
    return sub_20BDDBFAC(result, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  v6 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)result = v6;
  return result;
}

void sub_20C24FC38(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C24FC58(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE90940(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[96 * v4];
  v16 = &v10[96 * v9];
  sub_20C00D1F0(v14, a2);
  v15 = v14 + 96;
  sub_20C14847C(a1, &v13);
  v11 = a1[1];
  sub_20C148628(&v13);
  return v11;
}

void sub_20C24FD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C148628((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C24FD5C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v19[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void **v33;

  v4 = *(unsigned __int8 ***)(a1 + 8);
  v5 = *v4;
  v6 = *((_DWORD *)*v4 + 8);
  v7 = (uint64_t)*v4;
  if (v6 >= 3)
    v7 = *(_QWORD *)v5;
  sub_20C24DD5C(a2, v7, v6, v5[36], *v4[1], &v31);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v31))
  {
    sub_20C00D7C4((uint64_t)&v27, (uint64_t)a2);
    sub_20C14A868((uint64_t)&v27, &v31);
    v8 = *(uint64_t **)a1;
    sub_20C1487C4((uint64_t)&v27, (char **)v19);
    v9 = v8[1];
    if (v9 >= v8[2])
    {
      v16 = sub_20C1482F8(v8, (uint64_t)v19);
      v17 = SHIBYTE(v26);
      v8[1] = v16;
      if (v17 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_OWORD *)v9 = *(_OWORD *)v19;
      *(_QWORD *)(v9 + 16) = v20;
      v19[0] = 0;
      v19[1] = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_OWORD *)(v9 + 24) = v21;
      *(_QWORD *)(v9 + 40) = v22;
      *(_QWORD *)(v9 + 48) = 0;
      v20 = 0;
      v21 = 0uLL;
      v22 = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      *(_OWORD *)(v9 + 48) = v23;
      *(_QWORD *)(v9 + 64) = v24;
      v23 = 0uLL;
      v10 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 88) = v26;
      *(_OWORD *)(v9 + 72) = v10;
      v24 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      v8[1] = v9 + 96;
    }
    v33 = (void **)&v23;
    sub_20C00E25C(&v33);
    v33 = (void **)&v21;
    sub_20C00D5A8(&v33);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    v19[0] = &v30;
    sub_20C00BD84((void ***)v19);
    v19[0] = &v29;
    sub_20BED2E10((void ***)v19);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
  }
  else
  {
    v11 = **(uint64_t ***)(a1 + 16);
    if (v11)
      v11 = (uint64_t *)sub_20C25002C(v11, (uint64_t)a2);
    v12 = *(uint64_t **)a1;
    v13 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v11);
    v14 = v12[1];
    if (v14 >= v12[2])
    {
      v15 = sub_20C24FC58(v12, v13);
    }
    else
    {
      sub_20C00D1F0((_QWORD *)v12[1], v13);
      v15 = v14 + 96;
      v12[1] = v14 + 96;
    }
    v12[1] = v15;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  return sub_20BFD265C(&v31);
}

void sub_20C24FF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  *(_QWORD *)(v29 - 24) = &a15;
  sub_20C00E25C((void ***)(v29 - 24));
  *(_QWORD *)(v29 - 24) = &a12;
  sub_20C00D5A8((void ***)(v29 - 24));
  if (a9)
  {
    a10 = (uint64_t)a9;
    operator delete(a9);
  }
  a9 = &a29;
  sub_20C00BD84((void ***)&a9);
  a9 = &a26;
  sub_20BED2E10((void ***)&a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a25);
  sub_20BFD265C(&a24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v29 - 28));
  sub_20BFD265C((_DWORD *)(v29 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C25002C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v10 + 1) >> 58)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 5;
    if (v11 >> 5 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v13 = 0x3FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20C00D6F0(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[64 * v10];
    v18 = &v14[64 * v13];
    sub_20C00D7C4((uint64_t)v16, a2);
    v17 = v16 + 64;
    sub_20C1503E0(a1, &v15);
    v9 = a1[1];
    result = (uint64_t)sub_20C1501F4(&v15);
  }
  else
  {
    result = sub_20C00D7C4(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v9;
  return result;
}

void sub_20C25011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C25013C(_DWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *(_QWORD *)a1 = 0;
  v2 = a1 + 3;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v3 + 1);
  *((_QWORD *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2);
  return a1;
}

_QWORD *sub_20C250194(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_20C250218(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_20C250218(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE90F0C(result, a4);
    result = sub_20C25029C((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C25027C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C22D004(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C25029C(uint64_t a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD v11[3];
  char v12;
  _DWORD *v13;
  _DWORD *v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C0D9B58(v4, (_DWORD *)v6 + 7);
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v4 = v14 + 4;
      v14 += 4;
      v6 = v8;
    }
    while (v8 != a3);
  }
  v12 = 1;
  sub_20C250354((uint64_t)v11);
  return v4;
}

uint64_t sub_20C250354(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C250388((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C250388(uint64_t *result)
{
  _DWORD **v1;
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_DWORD **)result[2];
  v3 = *v1;
  v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    v5 = *result;
    do
    {
      v3 -= 4;
      result = (uint64_t *)sub_20C22D088(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

int *sub_20C2503D8(int *a1, int *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1 + 2, a2 + 2);
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 3, a2 + 3);
}

uint64_t sub_20C25041C(uint64_t result, int *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  char v14;
  unint64_t *v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  int *v17;
  int *v18;
  int *v19;
  BOOL v20;
  unint64_t *v21;
  int v22;
  unint64_t *v23;
  pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  char v29;
  int *v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t *v35;
  int *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  int *v49;
  pxrInternal__aapl__pxrReserved__::SdfPath *v51;
  unint64_t *v52;
  pxrInternal__aapl__pxrReserved__::SdfPath *v53;
  pxrInternal__aapl__pxrReserved__::SdfPath *v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4);
  v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 12);
  v54 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 8);
  v9 = v7;
  v55 = a2;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = v10 >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_20C250E18(v8, v7);
        if ((_DWORD)result)
          return (uint64_t)sub_20C2503D8((int *)v7, (int *)v8);
        return result;
      case 3uLL:
        return (uint64_t)sub_20C250F54(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 2), v8);
      case 4uLL:
        return (uint64_t)sub_20C2511FC(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 4), v8);
      case 5uLL:
        return (uint64_t)sub_20C250E94(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 6), v8);
      default:
        if (v10 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != (unint64_t *)a2)
            {
              v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 2);
              if (v7 + 2 != (unint64_t *)a2)
              {
                v25 = 0;
                v26 = v7;
                do
                {
                  v27 = v26;
                  v26 = (unint64_t *)v24;
                  result = sub_20C250E18(v24, v27);
                  if ((_DWORD)result)
                  {
                    sub_20C0308C4(&v60, v26);
                    v28 = v25;
                    while (1)
                    {
                      sub_20C24E938((int *)((char *)v7 + v28 + 16), (int *)((char *)v7 + v28));
                      if (!v28)
                        break;
                      v29 = sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, (unint64_t *)((char *)v7 + v28 - 16));
                      v28 -= 16;
                      if ((v29 & 1) == 0)
                      {
                        v30 = (int *)((char *)v7 + v28 + 16);
                        goto LABEL_69;
                      }
                    }
                    v30 = (int *)v7;
LABEL_69:
                    sub_20C24E938(v30, (int *)&v60);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
                    sub_20BFD265C(&v61);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
                    result = (uint64_t)sub_20BFD265C(&v60);
                  }
                  v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v26 + 2);
                  v25 += 16;
                }
                while (v26 + 2 != (unint64_t *)a2);
              }
            }
          }
          else if (v7 != (unint64_t *)a2)
          {
            v51 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 2);
            if (v7 + 2 != (unint64_t *)a2)
            {
              do
              {
                v52 = (unint64_t *)v51;
                result = sub_20C250E18(v51, v7);
                if ((_DWORD)result)
                {
                  sub_20C0308C4(&v60, v52);
                  do
                  {
                    sub_20C24E938((int *)v7 + 4, (int *)v7);
                    v7 -= 2;
                  }
                  while ((sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v7) & 1) != 0);
                  sub_20C24E938((int *)v7 + 4, (int *)&v60);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
                  sub_20BFD265C(&v61);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
                  result = (uint64_t)sub_20BFD265C(&v60);
                }
                v51 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v52 + 2);
                v7 = v52;
              }
              while (v52 + 2 != (unint64_t *)a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != (unint64_t *)a2)
          {
            v31 = (v11 - 2) >> 1;
            v32 = v31;
            do
            {
              v33 = v32;
              if (v31 >= v32)
              {
                v34 = (2 * v32) | 1;
                v35 = &v7[2 * v34];
                if (2 * v32 + 2 < (uint64_t)v11
                  && sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[2 * v34], v35 + 2))
                {
                  v35 += 2;
                  v34 = 2 * v33 + 2;
                }
                v36 = (int *)&v7[2 * v33];
                if ((sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)v35, (unint64_t *)v36) & 1) == 0)
                {
                  sub_20C0308C4(&v60, &v7[2 * v33]);
                  do
                  {
                    v37 = (int *)v35;
                    sub_20C24E938(v36, (int *)v35);
                    if (v31 < v34)
                      break;
                    v38 = (2 * v34) | 1;
                    v35 = &v7[2 * v38];
                    v34 = 2 * v34 + 2;
                    if (v34 >= (uint64_t)v11)
                    {
                      v34 = v38;
                    }
                    else if (sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[2 * v38], v35 + 2))
                    {
                      v35 += 2;
                    }
                    else
                    {
                      v34 = v38;
                    }
                    v36 = v37;
                  }
                  while (!sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)v35, &v60));
                  sub_20C24E938(v37, (int *)&v60);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
                  sub_20BFD265C(&v61);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
                  sub_20BFD265C(&v60);
                }
              }
              v32 = v33 - 1;
            }
            while (v33);
            v39 = (unint64_t)v10 >> 4;
            v40 = v55;
            do
            {
              sub_20C0308C4(&v56, v7);
              v41 = 0;
              v42 = (int *)v7;
              do
              {
                v43 = &v42[4 * v41 + 4];
                v44 = (2 * v41) | 1;
                v45 = 2 * v41 + 2;
                if (v45 < v39
                  && sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42[4 * v41 + 4], (unint64_t *)&v42[4 * v41 + 8]))
                {
                  v43 += 4;
                  v44 = v45;
                }
                sub_20C24E938(v42, v43);
                v42 = v43;
                v41 = v44;
              }
              while (v44 <= (uint64_t)((unint64_t)(v39 - 2) >> 1));
              v40 -= 4;
              if (v43 == v40)
              {
                sub_20C24E938(v43, &v56);
              }
              else
              {
                sub_20C24E938(v43, v40);
                sub_20C24E938(v40, &v56);
                v46 = (char *)v43 - (char *)v7 + 16;
                if (v46 >= 17)
                {
                  v47 = (((unint64_t)v46 >> 4) - 2) >> 1;
                  v48 = (int *)&v7[2 * v47];
                  if (sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)v48, (unint64_t *)v43))
                  {
                    sub_20C0308C4(&v60, v43);
                    do
                    {
                      v49 = v48;
                      sub_20C24E938(v43, v48);
                      if (!v47)
                        break;
                      v47 = (v47 - 1) >> 1;
                      v48 = (int *)&v7[2 * v47];
                      v43 = v49;
                    }
                    while ((sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)v48, &v60) & 1) != 0);
                    sub_20C24E938(v49, (int *)&v60);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
                    sub_20BFD265C(&v61);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
                    sub_20BFD265C(&v60);
                  }
                }
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
              sub_20BFD265C(&v58);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
              result = (uint64_t)sub_20BFD265C(&v56);
            }
            while (v39-- > 2);
          }
          return result;
        }
        v12 = &v7[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          sub_20C250F54(&v7[2 * (v11 >> 1)], (pxrInternal__aapl__pxrReserved__::SdfPath *)v7, v8);
        }
        else
        {
          sub_20C250F54(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[2 * (v11 >> 1)], v8);
          sub_20C250F54(v7 + 2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 - 2), v54);
          sub_20C250F54(v7 + 4, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[2 * (v11 >> 1) + 2], v53);
          sub_20C250F54(v12 - 2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[2 * (v11 >> 1)], (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[2 * (v11 >> 1) + 2]);
          sub_20C2503D8((int *)v7, (int *)&v7[2 * (v11 >> 1)]);
        }
        --a3;
        a2 = v55;
        if ((a4 & 1) == 0 && (sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 - 2), v7) & 1) == 0)
        {
          sub_20C0308C4(&v60, v7);
          if ((sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, (unint64_t *)v8) & 1) != 0)
          {
            v9 = v7;
            do
              v9 += 2;
            while ((sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v9) & 1) == 0);
          }
          else
          {
            v21 = v7 + 2;
            do
            {
              v9 = v21;
              if (v21 >= (unint64_t *)v55)
                break;
              v22 = sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v21);
              v21 = v9 + 2;
            }
            while (!v22);
          }
          v23 = (unint64_t *)v55;
          if (v9 < (unint64_t *)v55)
          {
            v23 = (unint64_t *)v55;
            do
              v23 -= 2;
            while ((sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v23) & 1) != 0);
          }
          while (v9 < v23)
          {
            sub_20C2503D8((int *)v9, (int *)v23);
            do
              v9 += 2;
            while (!sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v9));
            do
              v23 -= 2;
            while ((sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v23) & 1) != 0);
          }
          if (v9 - 2 != v7)
            sub_20C24E938((int *)v7, (int *)v9 - 4);
          sub_20C24E938((int *)v9 - 4, (int *)&v60);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
          sub_20BFD265C(&v61);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
          result = (uint64_t)sub_20BFD265C(&v60);
          a4 = 0;
          continue;
        }
        sub_20C0308C4(&v60, v7);
        v13 = 0;
        do
        {
          v14 = sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[v13 + 2], &v60);
          v13 += 2;
        }
        while ((v14 & 1) != 0);
        v15 = &v7[v13];
        v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v55;
        if (v13 == 2)
        {
          v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v55;
          do
          {
            if (v15 >= (unint64_t *)v16)
              break;
            v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 - 16);
          }
          while ((sub_20C250E18(v16, &v60) & 1) == 0);
        }
        else
        {
          do
            v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 - 16);
          while (!sub_20C250E18(v16, &v60));
        }
        if (v15 >= (unint64_t *)v16)
        {
          v19 = (int *)(v15 - 2);
        }
        else
        {
          v17 = (int *)&v7[v13];
          v18 = (int *)v16;
          do
          {
            sub_20C2503D8(v17, v18);
            do
              v17 += 4;
            while ((sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)v17, &v60) & 1) != 0);
            do
              v18 -= 4;
            while (!sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)v18, &v60));
          }
          while (v17 < v18);
          v19 = v17 - 4;
        }
        if (v19 != (int *)v7)
          sub_20C24E938((int *)v7, v19);
        sub_20C24E938(v19, (int *)&v60);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
        sub_20BFD265C(&v61);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
        sub_20BFD265C(&v60);
        if (v15 < (unint64_t *)v16)
        {
LABEL_32:
          result = sub_20C25041C(v7, v19, a3, a4 & 1);
          a4 = 0;
          v9 = (unint64_t *)(v19 + 4);
          continue;
        }
        v20 = sub_20C25100C((int *)v7, v19);
        v9 = (unint64_t *)(v19 + 4);
        result = sub_20C25100C(v19 + 4, v55);
        if (!(_DWORD)result)
        {
          if (v20)
            continue;
          goto LABEL_32;
        }
        a2 = v19;
        if (!v20)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_20C250C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _DWORD *v9;
  va_list va;

  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v9);
  sub_20BFD265C(a5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a6);
  sub_20BFD265C((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C250E18(pxrInternal__aapl__pxrReserved__::SdfPath *a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _BOOL4 v14;

  v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 1);
  v7 = *a2;
  v8 = a2[1];
  if (*(_QWORD *)a1 == *a2 && v6 == v8)
    return 0;
  v10 = *v4;
  if (v5 == *v4 && v6 == v10)
    return 1;
  if (v7 == v10 && v8 == v10)
    return 0;
  v14 = v5 == v7 && v6 < v8;
  return v5 < v7 || v14;
}

int *sub_20C250E94(unint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  int *result;

  sub_20C2511FC(a1, a2, a3, a4);
  result = (int *)sub_20C250E18(a5, (unint64_t *)a4);
  if ((_DWORD)result)
  {
    sub_20C2503D8((int *)a4, (int *)a5);
    result = (int *)sub_20C250E18(a4, (unint64_t *)a3);
    if ((_DWORD)result)
    {
      sub_20C2503D8((int *)a3, (int *)a4);
      result = (int *)sub_20C250E18(a3, (unint64_t *)a2);
      if ((_DWORD)result)
      {
        sub_20C2503D8((int *)a2, (int *)a3);
        result = (int *)sub_20C250E18(a2, a1);
        if ((_DWORD)result)
          return sub_20C2503D8((int *)a1, (int *)a2);
      }
    }
  }
  return result;
}

int *sub_20C250F54(unint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v6;
  int *result;
  int *v8;

  v6 = sub_20C250E18(a2, a1);
  result = (int *)sub_20C250E18(a3, (unint64_t *)a2);
  if ((v6 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v8 = (int *)a1;
    }
    else
    {
      sub_20C2503D8((int *)a1, (int *)a2);
      result = (int *)sub_20C250E18(a3, (unint64_t *)a2);
      if (!(_DWORD)result)
        return result;
      v8 = (int *)a2;
    }
    return sub_20C2503D8(v8, (int *)a3);
  }
  else if ((_DWORD)result)
  {
    sub_20C2503D8((int *)a2, (int *)a3);
    result = (int *)sub_20C250E18(a2, a1);
    if ((_DWORD)result)
      return sub_20C2503D8((int *)a1, (int *)a2);
  }
  return result;
}

BOOL sub_20C25100C(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int *v6;
  unint64_t *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      if (sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4), (unint64_t *)a1))
        sub_20C2503D8(a1, v6);
      return 1;
    case 3:
      sub_20C250F54((unint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4));
      return 1;
    case 4:
      sub_20C2511FC((unint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4));
      return 1;
    case 5:
      sub_20C250E94((unint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 12), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4));
      return 1;
    default:
      v7 = (unint64_t *)(a1 + 8);
      sub_20C250F54((unint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 12);
      if (a1 + 12 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (sub_20C250E18(v8, v7))
    {
      sub_20C0308C4(&v14, v8);
      v11 = v9;
      while (1)
      {
        sub_20C24E938((int *)((char *)a1 + v11 + 48), (int *)((char *)a1 + v11 + 32));
        if (v11 == -32)
          break;
        v12 = sub_20C250E18((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, (unint64_t *)((char *)a1 + v11 + 16));
        v11 -= 16;
        if ((v12 & 1) == 0)
        {
          v13 = (int *)((char *)a1 + v11 + 48);
          goto LABEL_12;
        }
      }
      v13 = a1;
LABEL_12:
      sub_20C24E938(v13, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_20BFD265C(&v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      ++v10;
      sub_20BFD265C(&v14);
      if (v10 == 8)
        return (int *)((char *)v8 + 16) == a2;
    }
    v7 = (unint64_t *)v8;
    v9 += 16;
    v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 16);
    if (v8 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
      return 1;
  }
}

void sub_20C2511E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C024A08(&a9);
  _Unwind_Resume(a1);
}

int *sub_20C2511FC(unint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  int *result;

  sub_20C250F54(a1, a2, a3);
  result = (int *)sub_20C250E18(a4, (unint64_t *)a3);
  if ((_DWORD)result)
  {
    sub_20C2503D8((int *)a3, (int *)a4);
    result = (int *)sub_20C250E18(a3, (unint64_t *)a2);
    if ((_DWORD)result)
    {
      sub_20C2503D8((int *)a2, (int *)a3);
      result = (int *)sub_20C250E18(a2, a1);
      if ((_DWORD)result)
        return sub_20C2503D8((int *)a1, (int *)a2);
    }
  }
  return result;
}

uint64_t **sub_20C251290(uint64_t **a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = *(uint64_t *)((char *)v5 + 28);
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v13[1] = v6;
    sub_20C0308C4((_DWORD *)v11 + 7, a3);
    v14 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_20BFE4C64((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

void **sub_20C251370(uint64_t *a1, unint64_t a2)
{
  void *v4;
  uint64_t v5;
  void **result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void **v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18[5];

  v4 = a1 + 2;
  v5 = a1[2];
  result = (void **)a1[1];
  if (a2 <= (v5 - (uint64_t)result) >> 4)
  {
    if (a2)
    {
      v13 = 16 * a2;
      v14 = &result[2 * a2];
      do
      {
        result = (void **)(sub_20C25013C(result) + 4);
        v13 -= 16;
      }
      while (v13);
      result = v14;
    }
    a1[1] = (uint64_t)result;
  }
  else
  {
    v7 = (uint64_t)result - *a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      sub_20BDDF694();
    v9 = v7 >> 4;
    v10 = v5 - *a1;
    if (v10 >> 3 > v8)
      v8 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v8;
    v18[4] = v4;
    if (v11)
      v12 = (char *)sub_20BDEA2F0((uint64_t)v4, v11);
    else
      v12 = 0;
    v15 = &v12[16 * v9];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[16 * v11];
    v16 = 16 * a2;
    v17 = &v15[16 * a2];
    do
    {
      v15 = (char *)(sub_20C25013C(v15) + 4);
      v16 -= 16;
    }
    while (v16);
    v18[2] = v17;
    sub_20C22D4AC(a1, v18);
    return sub_20C22D648(v18);
  }
  return result;
}

void sub_20C25147C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C22D648((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C251490(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *v4;
  unint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C251510((uint64_t **)a1, v4, v6, v6);
      v6 += 2;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C2514F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE4CE8(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C251510(uint64_t **a1, _QWORD *a2, unint64_t *a3, _DWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (void **)sub_20C2515C0(a1, a2, &v13, &v12, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    sub_20C0D9B58((_DWORD *)v7 + 7, a4);
    v11 = 1;
    sub_20BDDE1B4(a1, v13, v8, v7);
    v10[0] = 0;
    sub_20BFE4C64((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C2515C0(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *(_QWORD *)((char *)a2 + 28), *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*(_QWORD *)((char *)v10 + 28) < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = *(_QWORD *)((char *)v16 + 28);
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *(_QWORD *)((char *)a4 + 28))
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = *(_QWORD *)((char *)v20 + 28);
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_20C251768(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C0E435C(a1, a2, a3);
  return a1;
}

void sub_20C25179C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE4CE8(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20C2517B4()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "PcpNamespaceEdits::EditPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D420, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpNamespaceEdits::EditInherit");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D420, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpNamespaceEdits::EditSpecializes");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D420, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpNamespaceEdits::EditReference");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D420, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpNamespaceEdits::EditPayload");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D420, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpNamespaceEdits::EditRelocate");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D420, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C2519B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PcpComputeNamespaceEdits(pxrInternal__aapl__pxrReserved__::PcpCache *a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::PcpCache *v15;
  uint64_t *v16;
  uint64_t *v17;
  pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  const char *v35;
  pxrInternal__aapl__pxrReserved__::SdfPath *v36;
  const char *v37;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v38;
  pxrInternal__aapl__pxrReserved__ *v39;
  const char *v40;
  char *v41;
  std::string *v42;
  const char *v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  char *v45;
  std::string *v46;
  const char *v47;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v48;
  uint64_t *v49;
  const char *v50;
  char *v51;
  void ***v52;
  char *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  pxrInternal__aapl__pxrReserved__::SdfPath *j;
  pxrInternal__aapl__pxrReserved__::SdfPath *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  const pxrInternal__aapl__pxrReserved__::SdfPath *k;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v69;
  std::string::size_type v70;
  const char *v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v80;
  pxrInternal__aapl__pxrReserved__::SdfPath *v81;
  std::string *v82;
  std::string *v83;
  char *v84;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v85;
  uint64_t *v86;
  int v87;
  std::string::size_type v88;
  const char *v89;
  std::string *v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::PcpCache *v92;
  pxrInternal__aapl__pxrReserved__::SdfPath *v93;
  pxrInternal__aapl__pxrReserved__::SdfPath *v94;
  _DWORD *v95;
  void **v96;
  void **v97;
  uint64_t *PrimIndex;
  char v99;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v100;
  std::string::size_type v101;
  std::string::size_type v102;
  uint64_t v103;
  uint64_t v104;
  std::string::size_type v105;
  uint64_t *LayerStack;
  uint64_t v107;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v110;
  char *Identifier;
  std::string *v112;
  const char *v113;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v114;
  uint64_t *v115;
  const char *v116;
  char *v117;
  void ***v118;
  char *v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t *v124;
  uint64_t v125;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v126;
  uint64_t *v127;
  __int128 *v128;
  unsigned int ArcType;
  std::string *v130;
  pxrInternal__aapl__pxrReserved__::SdfPath *v131;
  const char *v132;
  uint64_t *v133;
  _QWORD *v134;
  pxrInternal__aapl__pxrReserved__::SdfPath *v135;
  uint64_t *v136;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v137;
  uint64_t *v138;
  void ***v139;
  const char *v140;
  const char *v141;
  const char *v142;
  const char *v143;
  const char *v144;
  char *v145;
  _QWORD *v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  char v150;
  char v151;
  _BOOL4 HasPrefix;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t *v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t *v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  pxrInternal__aapl__pxrReserved__::SdfPath *v171;
  const char *v172;
  const char *v173;
  const char *v174;
  const char *v175;
  char *v176;
  std::string::size_type v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  char *v182;
  uint64_t v183;
  const char *v184;
  const char *v185;
  const char *v186;
  char *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  std::string::size_type v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  pxrInternal__aapl__pxrReserved__::PcpCache *v197;
  uint64_t v198;
  char *v199;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v200;
  uint64_t *v201;
  const char *v202;
  char *v203;
  __int128 *v204;
  std::string::size_type size;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t AllLayerStacksUsingLayer;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  void ***v216;
  uint64_t *v217;
  uint64_t v218;
  int HasPrimSpecs;
  _DWORD *v220;
  void **v221;
  void **v222;
  uint64_t *v223;
  char v224;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v225;
  std::string::size_type v226;
  std::string::size_type v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  std::string::size_type v231;
  _QWORD *v232;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v233;
  uint64_t *v234;
  const char *v235;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v236;
  uint64_t *v237;
  std::string *v238;
  const char *v239;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v240;
  uint64_t *v241;
  const char *v242;
  char *v243;
  void ***v244;
  char *v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t v254;
  char *v255;
  pxrInternal__aapl__pxrReserved__::SdfPath *v256;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t *v260;
  _OWORD *v261;
  _OWORD *v262;
  _QWORD *v263;
  int v264;
  _QWORD *v265;
  _QWORD *v266;
  BOOL v267;
  uint64_t v268;
  uint64_t v269;
  std::string::size_type v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  _QWORD *v282;
  unsigned int *v283;
  unsigned int *v284;
  unsigned int v285;
  unsigned int v286;
  std::string::size_type v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t *v291;
  uint64_t v292;
  _DWORD *v293;
  uint64_t *v294;
  uint64_t *v295;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v296;
  uint64_t *v297;
  __int128 *v298;
  const char *v299;
  const char *v300;
  const char *v301;
  char *v302;
  uint64_t v303;
  char *v304;
  _QWORD *v305;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v306;
  uint64_t *v307;
  uint64_t v308;
  char *v309;
  __int128 *v310;
  _QWORD *v311;
  const char *v312;
  uint64_t v313;
  char *v314;
  _QWORD *v315;
  const char *v316;
  const char *v317;
  char *v318;
  uint64_t v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  char *v324;
  _QWORD *v325;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v326;
  uint64_t *v327;
  uint64_t v328;
  char *v329;
  __int128 *v330;
  _QWORD *v331;
  uint64_t v332;
  char *v333;
  std::string *v334;
  _QWORD *v335;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v336;
  uint64_t *v337;
  uint64_t v338;
  char *v339;
  void ***v340;
  _QWORD *v341;
  const char *v342;
  uint64_t v343;
  char *v344;
  _QWORD *v345;
  const char *v346;
  uint64_t v347;
  char *v348;
  _QWORD *v349;
  const char *v350;
  const char *v351;
  char *v352;
  _QWORD *v353;
  unsigned int *v354;
  unsigned int v355;
  unsigned int v356;
  uint64_t v357;
  char *v358;
  _QWORD *v359;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v360;
  uint64_t *v361;
  uint64_t v362;
  char *v363;
  __int128 *v364;
  _QWORD *v365;
  uint64_t v366;
  char *v367;
  std::string *v368;
  _QWORD *v369;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v370;
  uint64_t *v371;
  uint64_t v372;
  char *v373;
  void ***v374;
  _QWORD *v375;
  const char *v376;
  uint64_t v377;
  char *v378;
  _QWORD *v379;
  const char *v380;
  uint64_t v381;
  char *v382;
  _QWORD *v383;
  const char *v384;
  const char *v385;
  char *v386;
  _QWORD *v387;
  unsigned int *v388;
  unsigned int v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t *v394;
  pxrInternal__aapl__pxrReserved__::PcpCache *v395;
  uint64_t v396;
  uint64_t v397;
  void ***v398;
  uint64_t *v401;
  const char *v402;
  pxrInternal__aapl__pxrReserved__::SdfPath *v403;
  const char *v404;
  char *v405;
  pxrInternal__aapl__pxrReserved__::SdfPath *v406;
  pxrInternal__aapl__pxrReserved__::SdfPath *v407;
  char *v408;
  uint64_t *v409;
  pxrInternal__aapl__pxrReserved__::SdfPath *v410;
  pxrInternal__aapl__pxrReserved__::SdfPath *v411;
  uint64_t v413;
  void ***v414;
  void ***v415;
  uint64_t *v416;
  _QWORD *v417;
  uint64_t v418;
  uint64_t *v419;
  _QWORD *v420[2];
  uint64_t *v421;
  _QWORD *v422[2];
  __int128 m;
  uint64_t v424;
  __int128 v425;
  uint64_t v426;
  uint64_t *v427;
  _QWORD *v428;
  uint64_t v429;
  uint64_t *v430;
  _QWORD *v431[2];
  uint64_t *v432;
  uint64_t *v433;
  uint64_t v434;
  int v435;
  int v436;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v437;
  _QWORD v438[3];
  _DWORD *v439;
  uint64_t v440;
  void **v441;
  __int128 v442;
  std::string v443;
  __int128 v444;
  __int128 v445;
  char v446;

  *(_QWORD *)(a6 + 64) = 0;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  memset(v438, 0, sizeof(v438));
  if (*a2 != a2[1])
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(a1, (uint64_t *)&v444);
    v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)&v444 + 1);
    if (*((_QWORD *)&v444 + 1))
    {
      if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)&v444 + 1) + 14))
        v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v444;
      else
        v7 = 0;
    }
    v437 = v7;
    sub_20BF1DD04((uint64_t *)&v437);
    v8 = *((_QWORD *)&v444 + 1);
    if (*((_QWORD *)&v444 + 1))
    {
      v9 = (unsigned int *)(*((_QWORD *)&v444 + 1) + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3, &v435);
    if (pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)a1, (unsigned int *)&v435))
    {
      if (*(_QWORD *)a3 != *(_QWORD *)a4)
      {
        v432 = 0;
        v433 = 0;
        v434 = 0;
        pxrInternal__aapl__pxrReserved__::PcpComposeSitePrimSites((uint64_t *)&v437, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (uint64_t *)&v432);
        v431[0] = 0;
        v431[1] = 0;
        v429 = 0;
        v430 = (uint64_t *)v431;
        v427 = (uint64_t *)&v428;
        v428 = 0;
        v13 = *a2;
        v12 = a2[1];
        v396 = (v12 - *a2) >> 3;
        if (v432 == v433)
        {
          if (v12 != v13)
          {
            v91 = 0;
            do
            {
              v408 = v91;
              v92 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * (_QWORD)v91);
              pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v92, a5, &v435, 47, 1, 1, 1, (uint64_t *)&v425);
              v93 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v425 + 1);
              v94 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v425;
              if ((_QWORD)v425 != *((_QWORD *)&v425 + 1))
              {
                v406 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v425 + 1);
                do
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v441);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v441 + 1);
                  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(v94, &v444);
                  sub_20BFD3EBC((int *)&v441, (int *)&v444);
                  sub_20BFD3F10((int *)&v441 + 1, (int *)&v444 + 1);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
                  v410 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v94 + 8);
                  while (1)
                  {
                    sub_20BFD265C(&v444);
                    *(_QWORD *)&v444 = 0;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v444);
                    v95 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v444 + 1);
                    v96 = v441;
                    v97 = (void **)v444;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v95);
                    sub_20BFD265C(&v444);
                    if (v96 == v97)
                    {
                      v99 = 0;
                      goto LABEL_125;
                    }
                    PrimIndex = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)v92, (unsigned int *)&v441);
                    if (PrimIndex)
                      break;
                    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v441, &v444);
                    sub_20BFD3EBC((int *)&v441, (int *)&v444);
                    sub_20BFD3F10((int *)&v441 + 1, (int *)&v444 + 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
                  }
                  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(PrimIndex, 6u, (uint64_t *)&v444);
                  v101 = *((_QWORD *)&v444 + 1);
                  v102 = v444;
                  v103 = v445;
                  if (v444 == v445)
                  {
                    v99 = 0;
                  }
                  else
                  {
                    v99 = 0;
                    v104 = *((_QWORD *)&v445 + 1) - 1;
                    do
                    {
                      v105 = v101;
                      v443.__r_.__value_.__r.__words[0] = v102;
                      v443.__r_.__value_.__l.__size_ = v101;
                      if (pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency((pxrInternal__aapl__pxrReserved__ *)&v443, v100))
                      {
                        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443);
                        v107 = sub_20C1FE500(LayerStack);
                        if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v107, a5))
                        {
                          Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443);
                          if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v410, Path))
                          {
                            sub_20C255D8C(v408, (uint64_t)v443.__r_.__value_.__l.__data_, v443.__r_.__value_.__l.__size_, &v430);
                            v99 = 1;
                          }
                        }
                      }
                      v101 = v105 + 1;
                    }
                    while (v102 != v103 || v104 != v105);
                  }
                  v93 = v406;
LABEL_125:
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v441 + 1);
                  sub_20BFD265C(&v441);
                  if ((v99 & 1) == 0)
                  {
                    *(_QWORD *)&v444 = "pcp/dependencies.h";
                    *((_QWORD *)&v444 + 1) = "Pcp_ForEachDependentNode";
                    *(_QWORD *)&v445 = 382;
                    *((_QWORD *)&v445 + 1) = "void pxrInternal__aapl__pxrReserved__::Pcp_ForEachDependentNode(const SdfPa"
                                             "th &, const LayerOrLayerStack &, const SdfPath &, const PcpCache &, const F"
                                             "N &) [FN = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/"
                                             "usd/pcp/namespaceEdits.cpp:508:32), LayerOrLayerStack = pxrInternal__aapl__"
                                             "pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>]";
                    v446 = 0;
                    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v410);
                    v110 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
                    Identifier = (char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v110);
                    pxrInternal__aapl__pxrReserved__::TfStringify(Identifier, (uint64_t)&v443);
                    if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v112 = &v443;
                    else
                      v112 = (std::string *)v443.__r_.__value_.__r.__words[0];
                    v113 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v94);
                    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v92, (uint64_t *)&m);
                    v114 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&m);
                    v115 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v114);
                    sub_20C1FE438(v115);
                    v118 = &v441;
                    if (v442 < 0)
                      v118 = (void ***)v441;
                    v119 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unable to find node that introduced dependency on site <%s>@%s@ for prim <%s> in %s", v116, v117, Text, v112, v113, v118);
                    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v444, "foundDep", v119);
                    if (SHIBYTE(v442) < 0)
                      operator delete(v441);
                    v120 = *((_QWORD *)&m + 1);
                    if (*((_QWORD *)&m + 1))
                    {
                      v121 = (unsigned int *)(*((_QWORD *)&m + 1) + 8);
                      do
                      {
                        v122 = __ldxr(v121);
                        v123 = v122 - 1;
                      }
                      while (__stlxr(v123, v121));
                      if (!v123)
                        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
                    }
                    if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v443.__r_.__value_.__l.__data_);
                  }
                  v94 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v94 + 72);
                }
                while (v94 != v93);
              }
              *(_QWORD *)&v444 = &v425;
              sub_20C2219C0((void ***)&v444);
              v91 = v408 + 1;
            }
            while (v408 + 1 != (char *)v396);
          }
        }
        else if (v12 != v13)
        {
          v14 = 0;
          v395 = a1;
          do
          {
            v405 = v14;
            v15 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * (_QWORD)v14);
            v16 = v432;
            v17 = v433;
            v401 = v433;
            while (v16 != v17)
            {
              v409 = v16;
              pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v15, v16, &v435, 47, 0, 0, 1, (uint64_t *)&v425);
              v18 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v425 + 1);
              v403 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v425 + 1);
              for (i = (pxrInternal__aapl__pxrReserved__::SdfPath *)v425;
                    i != v18;
                    i = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 72))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&m);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&m + 1);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(i, &v444);
                sub_20BFD3EBC((int *)&m, (int *)&v444);
                sub_20BFD3F10((int *)&m + 1, (int *)&v444 + 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
                v407 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 8);
                while (1)
                {
                  sub_20BFD265C(&v444);
                  *(_QWORD *)&v444 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v444);
                  v20 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v444 + 1);
                  v21 = m;
                  v22 = v444;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v20);
                  sub_20BFD265C(&v444);
                  if (v21 == v22)
                  {
                    v24 = 0;
                    goto LABEL_39;
                  }
                  v23 = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)v15, (unsigned int *)&m);
                  if (v23)
                    break;
                  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&m, &v444);
                  sub_20BFD3EBC((int *)&m, (int *)&v444);
                  sub_20BFD3F10((int *)&m + 1, (int *)&v444 + 1);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
                }
                pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v23, 6u, (uint64_t *)&v444);
                v26 = *((_QWORD *)&v444 + 1);
                v27 = (void **)v444;
                v28 = (void **)v445;
                if (v444 == v445)
                {
                  v29 = 0;
                }
                else
                {
                  v29 = 0;
                  v30 = *((_QWORD *)&v445 + 1) - 1;
                  do
                  {
                    v31 = v26;
                    v441 = v27;
                    *(_QWORD *)&v442 = v26;
                    if (pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency((pxrInternal__aapl__pxrReserved__ *)&v441, v25))
                    {
                      v32 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v441);
                      v33 = sub_20C1FE500(v32);
                      if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v33, v409))
                      {
                        v34 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v441);
                        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v407, v34))
                        {
                          if (sub_20C1FE3D8(5))
                          {
                            v35 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(i);
                            v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v441);
                            v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v36);
                            v39 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency((pxrInternal__aapl__pxrReserved__ *)&v441, v38);
                            pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(v39, &v443);
                            v42 = &v443;
                            if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                              v42 = (std::string *)v443.__r_.__value_.__r.__words[0];
                            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" found dep node: <%s> -> <%s> %s\n", v40, v41, v35, v37, v42);
                            if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v443.__r_.__value_.__l.__data_);
                          }
                          sub_20C255D8C(v405, (uint64_t)v441, v442, &v430);
                          v29 = 1;
                        }
                      }
                    }
                    v26 = v31 + 1;
                  }
                  while (v27 != v28 || v30 != v31);
                }
                v24 = v29;
                v18 = v403;
LABEL_39:
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&m + 1);
                sub_20BFD265C(&m);
                if ((v24 & 1) == 0)
                {
                  *(_QWORD *)&v444 = "pcp/dependencies.h";
                  *((_QWORD *)&v444 + 1) = "Pcp_ForEachDependentNode";
                  *(_QWORD *)&v445 = 382;
                  *((_QWORD *)&v445 + 1) = "void pxrInternal__aapl__pxrReserved__::Pcp_ForEachDependentNode(const SdfPath"
                                           " &, const LayerOrLayerStack &, const SdfPath &, const PcpCache &, const FN &)"
                                           " [FN = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/pc"
                                           "p/namespaceEdits.cpp:535:36), LayerOrLayerStack = pxrInternal__aapl__pxrReser"
                                           "ved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>]";
                  v446 = 0;
                  v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v407);
                  v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v409);
                  v45 = (char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v44);
                  pxrInternal__aapl__pxrReserved__::TfStringify(v45, (uint64_t)&v443);
                  if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v46 = &v443;
                  else
                    v46 = (std::string *)v443.__r_.__value_.__r.__words[0];
                  v47 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(i);
                  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v15, (uint64_t *)&m);
                  v48 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&m);
                  v49 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v48);
                  sub_20C1FE438(v49);
                  v52 = &v441;
                  if (v442 < 0)
                    v52 = (void ***)v441;
                  v53 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unable to find node that introduced dependency on site <%s>@%s@ for prim <%s> in %s", v50, v51, v43, v46, v47, v52);
                  pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v444, "foundDep", v53);
                  if (SHIBYTE(v442) < 0)
                    operator delete(v441);
                  v54 = *((_QWORD *)&m + 1);
                  if (*((_QWORD *)&m + 1))
                  {
                    v55 = (unsigned int *)(*((_QWORD *)&m + 1) + 8);
                    do
                    {
                      v56 = __ldxr(v55);
                      v57 = v56 - 1;
                    }
                    while (__stlxr(v57, v55));
                    if (!v57)
                      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
                  }
                  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v443.__r_.__value_.__l.__data_);
                }
              }
              *(_QWORD *)&v444 = &v425;
              sub_20C2219C0((void ***)&v444);
              v16 = v409 + 3;
              v17 = v401;
            }
            if (v15 == v395 && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
            {
              *(_OWORD *)&v443.__r_.__value_.__r.__words[1] = 0uLL;
              v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v443.__r_.__value_.__l.__size_;
              sub_20C2033F4((uint64_t *)&v441, (uint64_t *)&v437);
              pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v395, (uint64_t *)&v441, &v435, 38, 1, 0, 1, (uint64_t *)&v444);
              v58 = v442;
              if ((_QWORD)v442)
              {
                v59 = (unsigned int *)(v442 + 8);
                do
                {
                  v60 = __ldxr(v59);
                  v61 = v60 - 1;
                }
                while (__stlxr(v61, v59));
                if (!v61)
                  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
              }
              v63 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v444 + 1);
              for (j = (pxrInternal__aapl__pxrReserved__::SdfPath *)v444;
                    j != v63;
                    j = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)j + 72))
              {
                if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(j))
                  sub_20C0A7BE0((uint64_t **)&v443, j, j);
              }
              v441 = (void **)&v444;
              sub_20C2219C0(&v441);
              sub_20C2033F4((uint64_t *)&v441, (uint64_t *)&v437);
              pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v395, (uint64_t *)&v441, &v435, 38, 0, 0, 1, (uint64_t *)&v444);
              v64 = v442;
              if ((_QWORD)v442)
              {
                v65 = (unsigned int *)(v442 + 8);
                do
                {
                  v66 = __ldxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
              }
              v69 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v444 + 1);
              for (k = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v444;
                    k != v69;
                    k = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)k + 72))
              {
                sub_20C137B08((uint64_t **)&v443, k);
              }
              v441 = (void **)&v444;
              sub_20C2219C0(&v441);
              v70 = v443.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v443.__r_.__value_.__l.__data_ != &v443.__r_.__value_.__r.__words[1])
              {
                do
                {
                  v73 = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)v395, (unsigned int *)(v70 + 28));
                  if (v73
                    || (*(_QWORD *)&v444 = "pcp/namespaceEdits.cpp",
                        *((_QWORD *)&v444 + 1) = "PcpComputeNamespaceEdits",
                        *(_QWORD *)&v445 = 602,
                        *((_QWORD *)&v445 + 1) = "PcpNamespaceEdits pxrInternal__aapl__pxrReserved__::PcpComputeNamespace"
                                                 "Edits(const PcpCache *, const std::vector<PcpCache *> &, const SdfPath "
                                                 "&, const SdfPath &, const SdfLayerHandle &)",
                        v446 = 0,
                        v84 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Reported descendent dependency lacks a prim index", v71, v72), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v444, "index", v84) & 1) != 0))
                  {
                    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v73, 1u, (uint64_t *)&v444);
                    v74 = *((_QWORD *)&v444 + 1);
                    v75 = v444;
                    v76 = v445;
                    v77 = (_QWORD)v444 == (_QWORD)v445 && *((_QWORD *)&v444 + 1) == *((_QWORD *)&v445 + 1);
                    if (!v77)
                    {
                      v78 = *((_QWORD *)&v445 + 1) - 1;
                      do
                      {
                        v79 = v74;
                        *(_QWORD *)&v425 = v75;
                        *((_QWORD *)&v425 + 1) = v74;
                        v80 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v425);
                        if (*v80 == v437)
                        {
                          v81 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v425);
                          if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(v81) & 1) == 0
                            && (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v425) & 1) == 0)
                          {
                            v441 = (void **)v405;
                            v442 = v425;
                            sub_20C255C44(&v427, (unint64_t *)&v441, (uint64_t)&v441);
                          }
                        }
                        v74 = v79 + 1;
                      }
                      while (v75 != v76 || v78 != v79);
                    }
                  }
                  v82 = *(std::string **)(v70 + 8);
                  if (v82)
                  {
                    do
                    {
                      v83 = v82;
                      v82 = (std::string *)v82->__r_.__value_.__r.__words[0];
                    }
                    while (v82);
                  }
                  else
                  {
                    do
                    {
                      v83 = *(std::string **)(v70 + 16);
                      v77 = v83->__r_.__value_.__r.__words[0] == v70;
                      v70 = (std::string::size_type)v83;
                    }
                    while (!v77);
                  }
                  v70 = (std::string::size_type)v83;
                }
                while (v83 != (std::string *)&v443.__r_.__value_.__r.__words[1]);
              }
              sub_20BFD7C28((uint64_t)&v443, (_QWORD *)v443.__r_.__value_.__l.__size_);
            }
            v14 = v405 + 1;
          }
          while (v405 + 1 != (char *)v396);
        }
        *((_QWORD *)&v425 + 1) = 0;
        v426 = 0;
        *(_QWORD *)&v425 = (char *)&v425 + 8;
        v124 = v430;
        if (v430 != (uint64_t *)v431)
        {
          do
          {
            v125 = v124[4];
            m = *(_OWORD *)(v124 + 5);
            sub_20BFD6E54(&v416, a3);
            sub_20BFD6EA4((_DWORD *)&v416 + 1, (_DWORD *)a3 + 1);
            sub_20BFD6E54(&v414, a4);
            sub_20BFD6EA4((_DWORD *)&v414 + 1, (_DWORD *)a4 + 1);
            if (sub_20C1FE3D8(5))
            {
              pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * v125), (uint64_t *)&v421);
              v126 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&v421);
              v127 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v126);
              sub_20C1FE438(v127);
              if ((SBYTE7(v445) & 0x80u) == 0)
                v128 = &v444;
              else
                v128 = (__int128 *)v444;
              ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C52B6C8, ArcType, (uint64_t)&v443);
              if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v130 = &v443;
              else
                v130 = (std::string *)v443.__r_.__value_.__r.__words[0];
              v131 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              v132 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v131);
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&m);
              v419 = v133;
              v420[0] = v134;
              v135 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v419);
              v402 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v135);
              v404 = v132;
              v136 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              v137 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v136);
              v138 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v137);
              sub_20C1FE438(v138);
              if (v442 >= 0)
                v139 = &v441;
              else
                v139 = (void ***)v441;
              v140 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
              v141 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a4);
              v142 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v416);
              v143 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v414);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"\n processing node:\n  cache:           %s\n  node.type:       %s\n  node.path:       <%s>\n  node.rootPath:   <%s>\n  node.layerStack: %s\n  curPath:         <%s>\n  newPath:         <%s>\n  oldNodePath:     <%s>\n  newNodePath:     <%s>\n", v144, v145, v128, v130, v404, v402, v139, v140,
                v141,
                v142,
                v143);
              if (SHIBYTE(v442) < 0)
                operator delete(v441);
              if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v443.__r_.__value_.__l.__data_);
              if (SBYTE7(v445) < 0)
                operator delete((void *)v444);
              v146 = v422[0];
              if (v422[0])
              {
                v147 = (unsigned int *)(v422[0] + 1);
                do
                {
                  v148 = __ldxr(v147);
                  v149 = v148 - 1;
                }
                while (__stlxr(v149, v147));
                if (!v149)
                  (*(void (**)(_QWORD *))(*v146 + 8))(v146);
              }
            }
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m, (uint64_t)&v444);
            sub_20C255EDC((uint64_t **)&v425, &v444, (uint64_t)&v444);
            v151 = v150;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 3);
            sub_20BFD265C((_DWORD *)&v444 + 2);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v444);
            if ((v151 & 1) != 0)
            {
              HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v414, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v416);
              v153 = 24;
              if (HasPrefix)
              {
                v153 = 48;
                v154 = (_QWORD *)(a6 + 48);
              }
              else
              {
                v154 = (_QWORD *)(a6 + 24);
              }
              sub_20C2542F8(v154, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v154[1] - *(_QWORD *)(a6 + v153)) >> 3) + 1);
              v155 = v154[1];
              *(_QWORD *)(v155 - 56) = v125;
              *(_DWORD *)(v155 - 48) = 0;
              sub_20C01A074((int *)(v155 - 24), &v416);
              sub_20C01A0C8((int *)(v155 - 20), (_DWORD *)&v416 + 1);
              sub_20C01A074((int *)(v155 - 16), &v416);
              sub_20C01A0C8((int *)(v155 - 12), (_DWORD *)&v416 + 1);
              sub_20C01A074((int *)(v155 - 8), &v414);
              sub_20C01A0C8((int *)(v155 - 4), (_DWORD *)&v414 + 1);
              v156 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              sub_20C2033F4((uint64_t *)&v444, v156);
              v157 = *(unsigned int **)(v155 - 32);
              *(_OWORD *)(v155 - 40) = v444;
              *((_QWORD *)&v444 + 1) = 0;
              if (v157)
              {
                v158 = v157 + 2;
                do
                {
                  v159 = __ldxr(v158);
                  v160 = v159 - 1;
                }
                while (__stlxr(v160, v158));
                if (!v160)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v157 + 8))(v157);
                v161 = *((_QWORD *)&v444 + 1);
                *(_QWORD *)&v444 = 0;
                if (*((_QWORD *)&v444 + 1))
                {
                  v162 = (unsigned int *)(*((_QWORD *)&v444 + 1) + 8);
                  do
                  {
                    v163 = __ldxr(v162);
                    v164 = v163 - 1;
                  }
                  while (__stlxr(v164, v162));
                  if (!v164)
                    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
                }
              }
              v165 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              sub_20C2033F4((uint64_t *)&v444, v165);
              sub_20C254378((uint64_t *)a6, (uint64_t *)&v444, v125, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v416, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v414);
              v166 = *((_QWORD *)&v444 + 1);
              if (*((_QWORD *)&v444 + 1))
              {
                v167 = (unsigned int *)(*((_QWORD *)&v444 + 1) + 8);
                do
                {
                  v168 = __ldxr(v167);
                  v169 = v168 - 1;
                }
                while (__stlxr(v169, v167));
                if (!v169)
                  (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
              }
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m)
                 && v170 != -1)
            {
              if (sub_20C1FE3D8(5))
              {
                v171 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
                v172 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v171);
                v173 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v416);
                v174 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v414);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - traverse to parent of <%s>.  <%s> -> <%s>\n", v175, v176, v172, v173, v174);
              }
              v443.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              v443.__r_.__value_.__l.__size_ = v177;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443, (uint64_t)&v444);
              sub_20C255EDC((uint64_t **)&v425, &v444, (uint64_t)&v444);
              v179 = v178;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 3);
              sub_20BFD265C((_DWORD *)&v444 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v444);
              if (sub_20C254698((uint64_t *)((v179 << 63 >> 63) & a6), (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m, v125, (int *)&v416, (int *)&v414))
              {
                if (sub_20C1FE3D8(5))
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - done!  fixed direct arc.\n", v181, v182);
                break;
              }
              *(_QWORD *)&m = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              *((_QWORD *)&m + 1) = v180;
            }
            if ((!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m)
               || v183 == -1)
              && !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v414, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v416))
            {
              if (sub_20C1FE3D8(5))
              {
                v184 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v416);
                v185 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v414);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - adding cacheSite <%s> -> <%s>\n", v186, v187, v184, v185);
              }
              sub_20C254EAC((void **)a6, 1 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3));
              v188 = *(_QWORD *)(a6 + 8);
              *(_QWORD *)(v188 - 24) = v125;
              sub_20C01A074((int *)(v188 - 16), &v416);
              sub_20C01A0C8((int *)(v188 - 12), (_DWORD *)&v416 + 1);
              sub_20C01A074((int *)(v188 - 8), &v414);
              sub_20C01A0C8((int *)(v188 - 4), (_DWORD *)&v414 + 1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v414 + 1);
            sub_20BFD265C(&v414);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v416 + 1);
            sub_20BFD265C(&v416);
            v189 = (uint64_t *)v124[1];
            if (v189)
            {
              do
              {
                v190 = v189;
                v189 = (uint64_t *)*v189;
              }
              while (v189);
            }
            else
            {
              do
              {
                v190 = (uint64_t *)v124[2];
                v77 = *v190 == (_QWORD)v124;
                v124 = v190;
              }
              while (!v77);
            }
            v124 = v190;
          }
          while (v190 != (uint64_t *)v431);
        }
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4)
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
        {
          *((_QWORD *)&m + 1) = 0;
          v424 = 0;
          v422[1] = 0;
          *(_QWORD *)&m = (char *)&m + 8;
          v421 = (uint64_t *)v422;
          v422[0] = 0;
          v191 = v427;
          if (v427 != (uint64_t *)&v428)
          {
            do
            {
              v443.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v191 + 5));
              v443.__r_.__value_.__l.__size_ = v192;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443, (uint64_t)&v444);
              sub_20C255EDC(&v421, &v444, (uint64_t)&v444);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 3);
              sub_20BFD265C((_DWORD *)&v444 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v444);
              v193 = (uint64_t *)v191[1];
              if (v193)
              {
                do
                {
                  v194 = v193;
                  v193 = (uint64_t *)*v193;
                }
                while (v193);
              }
              else
              {
                do
                {
                  v194 = (uint64_t *)v191[2];
                  v77 = *v194 == (_QWORD)v191;
                  v191 = v194;
                }
                while (!v77);
              }
              v191 = v194;
            }
            while (v194 != (uint64_t *)&v428);
          }
          v195 = a2[1] - *a2;
          if (v195)
          {
            v196 = 0;
            v391 = v195 >> 3;
            do
            {
              v197 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * v196);
              if (sub_20C1FE3D8(5))
              {
                pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v197, (uint64_t *)&v443);
                v200 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&v443);
                v201 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v200);
                sub_20C1FE438(v201);
                v204 = &v444;
                if (SBYTE7(v445) < 0)
                  v204 = (__int128 *)v444;
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"- dep cache: %s\n", v202, v203, v204);
                if (SBYTE7(v445) < 0)
                  operator delete((void *)v444);
                size = v443.__r_.__value_.__l.__size_;
                if (v443.__r_.__value_.__l.__size_)
                {
                  v206 = (unsigned int *)(v443.__r_.__value_.__l.__size_ + 8);
                  do
                  {
                    v207 = __ldxr(v206);
                    v208 = v207 - 1;
                  }
                  while (__stlxr(v208, v206));
                  if (!v208)
                    (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
                }
              }
              v420[0] = 0;
              v420[1] = 0;
              v419 = (uint64_t *)v420;
              v209 = (uint64_t)v432;
              v210 = v433;
              if (v432 == v433)
              {
                v417 = 0;
                v418 = 0;
                v253 = (uint64_t *)&v417;
                v416 = (uint64_t *)&v417;
              }
              else
              {
                do
                {
                  AllLayerStacksUsingLayer = pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer((uint64_t)v197, v209);
                  v212 = *(uint64_t **)AllLayerStacksUsingLayer;
                  v213 = *(uint64_t **)(AllLayerStacksUsingLayer + 8);
                  while (v212 != v213)
                  {
                    sub_20C25657C(&v419, v420, (uint64_t)v212, v212);
                    v212 += 2;
                  }
                  v209 += 24;
                }
                while ((uint64_t *)v209 != v210);
                v214 = v419;
                v417 = 0;
                v418 = 0;
                v416 = (uint64_t *)&v417;
                v397 = v196;
                if (v419 == (uint64_t *)v420)
                {
                  v253 = (uint64_t *)&v417;
                }
                else
                {
                  do
                  {
                    v394 = v214;
                    v411 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v214 + 4);
                    pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v197, v214 + 4, &v435, 47, 1, 1, 1, (uint64_t *)&v414);
                    v215 = (uint64_t)v414;
                    v216 = v415;
                    if (v414 != v415)
                    {
                      v217 = v394 + 5;
                      v398 = v415;
                      do
                      {
                        v218 = *v217;
                        if (*v217)
                        {
                          if (*(_BYTE *)(sub_20BEB47BC(v217) + 14))
                            v218 = *(_QWORD *)v411;
                          else
                            v218 = 0;
                        }
                        *(_QWORD *)&v444 = v218;
                        sub_20BF1DD04((uint64_t *)&v444);
                        HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs((uint64_t *)&v444, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v215 + 8));
                        sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v444);
                        if (HasPrimSpecs)
                        {
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v441);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v441 + 1);
                          pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v215, &v444);
                          sub_20BFD3EBC((int *)&v441, (int *)&v444);
                          sub_20BFD3F10((int *)&v441 + 1, (int *)&v444 + 1);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
                          while (1)
                          {
                            sub_20BFD265C(&v444);
                            *(_QWORD *)&v444 = 0;
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v444);
                            v220 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v444 + 1);
                            v221 = v441;
                            v222 = (void **)v444;
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v220);
                            sub_20BFD265C(&v444);
                            if (v221 == v222)
                            {
                              v224 = 0;
                              goto LABEL_256;
                            }
                            v223 = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)v197, (unsigned int *)&v441);
                            if (v223)
                              break;
                            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v441, &v444);
                            sub_20BFD3EBC((int *)&v441, (int *)&v444);
                            sub_20BFD3F10((int *)&v441 + 1, (int *)&v444 + 1);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
                          }
                          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v223, 6u, (uint64_t *)&v444);
                          v226 = *((_QWORD *)&v444 + 1);
                          v227 = v444;
                          v228 = v445;
                          if (v444 == v445)
                          {
                            v229 = 0;
                          }
                          else
                          {
                            v229 = 0;
                            v230 = *((_QWORD *)&v445 + 1) - 1;
                            do
                            {
                              v231 = v226;
                              v443.__r_.__value_.__r.__words[0] = v227;
                              v443.__r_.__value_.__l.__size_ = v226;
                              if (pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency((pxrInternal__aapl__pxrReserved__ *)&v443, v225))
                              {
                                v232 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443);
                                if (sub_20C1020E4(v411, v232))
                                {
                                  v233 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443);
                                  if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v215 + 8), v233))
                                  {
                                    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v215)
                                      || *(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443) != *(_QWORD *)a3)
                                    {
                                      v439 = (_DWORD *)v215;
                                      v234 = sub_20C25668C(&v416, (pxrInternal__aapl__pxrReserved__::SdfPath *)v215, (uint64_t)&unk_20CAC184C, &v439);
                                      *(_OWORD *)(v234 + 5) = *(_OWORD *)&v443.__r_.__value_.__l.__data_;
                                    }
                                    v229 = 1;
                                  }
                                }
                              }
                              v226 = v231 + 1;
                            }
                            while (v227 != v228 || v230 != v231);
                          }
                          v224 = v229;
                          v196 = v397;
                          v216 = v398;
LABEL_256:
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v441 + 1);
                          sub_20BFD265C(&v441);
                          if ((v224 & 1) == 0)
                          {
                            *(_QWORD *)&v444 = "pcp/dependencies.h";
                            *((_QWORD *)&v444 + 1) = "Pcp_ForEachDependentNode";
                            *(_QWORD *)&v445 = 382;
                            *((_QWORD *)&v445 + 1) = "void pxrInternal__aapl__pxrReserved__::Pcp_ForEachDependentNode(con"
                                                     "st SdfPath &, const LayerOrLayerStack &, const SdfPath &, const Pcp"
                                                     "Cache &, const FN &) [FN = (lambda at /Library/Caches/com.apple.xbs"
                                                     "/Sources/USDLib/USD/pxr/usd/pcp/namespaceEdits.cpp:888:36), LayerOr"
                                                     "LayerStack = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInterna"
                                                     "l__aapl__pxrReserved__::PcpLayerStack>]";
                            v446 = 0;
                            v235 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v215 + 8));
                            v236 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)v411);
                            v237 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v236);
                            sub_20C1FE438(v237);
                            if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v238 = &v443;
                            else
                              v238 = (std::string *)v443.__r_.__value_.__r.__words[0];
                            v239 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v215);
                            pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v197, (uint64_t *)&v439);
                            v240 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&v439);
                            v241 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v240);
                            sub_20C1FE438(v241);
                            v244 = &v441;
                            if (v442 < 0)
                              v244 = (void ***)v441;
                            v245 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unable to find node that introduced dependency on site <%s>@%s@ for prim <%s> in %s", v242, v243, v235, v238, v239, v244);
                            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v444, "foundDep", v245);
                            if (SHIBYTE(v442) < 0)
                              operator delete(v441);
                            v246 = v440;
                            if (v440)
                            {
                              v247 = (unsigned int *)(v440 + 8);
                              do
                              {
                                v248 = __ldxr(v247);
                                v249 = v248 - 1;
                              }
                              while (__stlxr(v249, v247));
                              if (!v249)
                                (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
                            }
                            if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v443.__r_.__value_.__l.__data_);
                          }
                          v217 = v394 + 5;
                        }
                        v215 += 72;
                      }
                      while ((void ***)v215 != v216);
                    }
                    *(_QWORD *)&v444 = &v414;
                    sub_20C2219C0((void ***)&v444);
                    v250 = v394;
                    v251 = (uint64_t *)v394[1];
                    if (v251)
                    {
                      do
                      {
                        v252 = v251;
                        v251 = (uint64_t *)*v251;
                      }
                      while (v251);
                    }
                    else
                    {
                      do
                      {
                        v252 = (uint64_t *)v250[2];
                        v77 = *v252 == (_QWORD)v250;
                        v250 = v252;
                      }
                      while (!v77);
                    }
                    v214 = v252;
                  }
                  while (v252 != (uint64_t *)v420);
                  v253 = v416;
                }
              }
              *(_QWORD *)&v444 = v253;
              *((_QWORD *)&v444 + 1) = &v417;
              while ((_QWORD)v444 != *((_QWORD *)&v444 + 1))
              {
                *(_OWORD *)&v443.__r_.__value_.__l.__data_ = *(_OWORD *)(*sub_20C254F3C(&v444, v198, v199) + 40);
                v256 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_20C254F3C(&v444, v254, v255) + 32);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v256, &v439);
                if (v443.__r_.__value_.__r.__words[0] && v443.__r_.__value_.__l.__size_ != -1)
                {
                  do
                  {
                    v257 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443);
                    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v413, v256, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v439, v257, 1);
                    v258 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443);
                    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v441, v258, &v413);
                    v259 = (_QWORD *)*((_QWORD *)&m + 1);
                    v260 = (uint64_t *)&m + 1;
                    if (!*((_QWORD *)&m + 1))
                      goto LABEL_406;
                    v261 = (__int128 *)((char *)&m + 8);
                    do
                    {
                      v262 = v261;
                      v263 = v259 + 4;
                      v264 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(v259 + 4, &v441);
                      v265 = v259 + 1;
                      if (!v264)
                      {
                        v265 = v259;
                        v261 = v259;
                      }
                      v259 = (_QWORD *)*v265;
                    }
                    while (*v265);
                    v260 = (uint64_t *)&m + 1;
                    if (v261 == (__int128 *)((char *)&m + 8)
                      || (!v264 ? (v266 = v263) : (v266 = v262 + 2),
                          v267 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(v266, &v441),
                          v260 = (uint64_t *)v261,
                          !v267))
                    {
LABEL_406:
                      if (v260 == (uint64_t *)m)
                        goto LABEL_407;
                      v268 = *v260;
                      if (*v260)
                      {
                        do
                        {
                          v269 = v268;
                          v268 = *(_QWORD *)(v268 + 8);
                        }
                        while (v268);
                      }
                      else
                      {
                        do
                        {
                          v269 = v260[2];
                          v77 = *(_QWORD *)v269 == (_QWORD)v260;
                          v260 = (uint64_t *)v269;
                        }
                        while (v77);
                      }
                      if (v441 != *(void ***)(v269 + 32)
                        || !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v442, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v269 + 40)))
                      {
LABEL_407:
                        if (!sub_20C2567E0((uint64_t)&v421, &v441))
                        {
                          v414 = &v441;
                          sub_20C256848((uint64_t **)&m, &v441, (uint64_t)&unk_20CAC184C, (uint64_t *)&v414)[6] = v196;
                        }
                      }
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v442 + 1);
                    sub_20BFD265C(&v442);
                    sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v441);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v413 + 1);
                    sub_20BFD265C(&v413);
                    v443.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v443);
                    v443.__r_.__value_.__l.__size_ = v270;
                  }
                  while (v443.__r_.__value_.__r.__words[0] && v270 != -1);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v439 + 1);
                sub_20BFD265C(&v439);
                sub_20C254FB4(&v444);
              }
              sub_20C256618((uint64_t)&v416, v417);
              sub_20BFF29AC((uint64_t)&v419, v420[0]);
              ++v196;
            }
            while (v196 != v391);
          }
          *(_QWORD *)&v444 = m;
          *((_QWORD *)&v444 + 1) = (char *)&m + 8;
          while ((_QWORD)v444 != *((_QWORD *)&v444 + 1))
          {
            sub_20C2542F8((_QWORD *)(a6 + 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a6 + 32) - *(_QWORD *)(a6 + 24)) >> 3) + 1);
            v271 = *(_QWORD *)(a6 + 32);
            *(_QWORD *)(v271 - 56) = *(_QWORD *)(*sub_20C255058(&v444, v272, v273) + 48);
            *(_DWORD *)(v271 - 48) = 0;
            v276 = *sub_20C255058(&v444, v274, v275);
            sub_20C01A074((int *)(v271 - 24), (_DWORD *)(v276 + 40));
            sub_20C01A0C8((int *)(v271 - 20), (_DWORD *)(v276 + 44));
            v279 = *sub_20C255058(&v444, v277, v278);
            sub_20C01A074((int *)(v271 - 16), (_DWORD *)(v279 + 40));
            sub_20C01A0C8((int *)(v271 - 12), (_DWORD *)(v279 + 44));
            sub_20C01A074((int *)(v271 - 8), a4);
            sub_20C01A0C8((int *)(v271 - 4), (_DWORD *)a4 + 1);
            v282 = sub_20C255058(&v444, v280, v281);
            sub_20C2033F4((uint64_t *)&v443, (uint64_t *)(*v282 + 32));
            v283 = *(unsigned int **)(v271 - 32);
            *(_OWORD *)(v271 - 40) = *(_OWORD *)&v443.__r_.__value_.__l.__data_;
            v443.__r_.__value_.__l.__size_ = 0;
            if (v283)
            {
              v284 = v283 + 2;
              do
              {
                v285 = __ldxr(v284);
                v286 = v285 - 1;
              }
              while (__stlxr(v286, v284));
              if (!v286)
                (*(void (**)(unsigned int *))(*(_QWORD *)v283 + 8))(v283);
              v287 = v443.__r_.__value_.__l.__size_;
              v443.__r_.__value_.__r.__words[0] = 0;
              if (v443.__r_.__value_.__l.__size_)
              {
                v288 = (unsigned int *)(v443.__r_.__value_.__l.__size_ + 8);
                do
                {
                  v289 = __ldxr(v288);
                  v290 = v289 - 1;
                }
                while (__stlxr(v290, v288));
                if (!v290)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v287 + 8))(v287);
              }
            }
            sub_20C2550D0(&v444);
          }
          sub_20C255E60((uint64_t)&v421, v422[0]);
          sub_20C256500((uint64_t)&m, *((_QWORD **)&m + 1));
        }
        if (v429)
        {
          v291 = v427;
          if (v427 != (uint64_t *)&v428)
          {
            do
            {
              v292 = v291[4];
              v293 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v291 + 5));
              sub_20BFD6E54(&v444, v293);
              sub_20BFD6EA4((_DWORD *)&v444 + 1, v293 + 1);
              pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v443, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v444, a3, a4, 1);
              sub_20C254698((uint64_t *)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v291 + 5), v292, (int *)&v444, (int *)&v443);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v443.__r_.__value_.__r.__words + 1);
              sub_20BFD265C(&v443);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
              sub_20BFD265C(&v444);
              v294 = (uint64_t *)v291[1];
              if (v294)
              {
                do
                {
                  v295 = v294;
                  v294 = (uint64_t *)*v294;
                }
                while (v294);
              }
              else
              {
                do
                {
                  v295 = (uint64_t *)v291[2];
                  v77 = *v295 == (_QWORD)v291;
                  v291 = v295;
                }
                while (!v77);
              }
              v291 = v295;
            }
            while (v295 != (uint64_t *)&v428);
          }
        }
        if (sub_20C1FE3D8(5))
        {
          if (sub_20C1FE3D8(5))
          {
            v296 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)&v437);
            v297 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v296);
            sub_20C1FE438(v297);
            v298 = (SBYTE7(v445) & 0x80u) == 0 ? &v444 : (__int128 *)v444;
            v299 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
            v300 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a4);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpComputeNamespaceEdits():\n  cache:   %s\n  curPath: <%s>\n  newPath: <%s>\n", v301, v302, v298, v299, v300);
            if (SBYTE7(v445) < 0)
              operator delete((void *)v444);
          }
          *(_OWORD *)&v443.__r_.__value_.__l.__data_ = *(_OWORD *)a6;
          while (v443.__r_.__value_.__r.__words[0] != v443.__r_.__value_.__l.__size_)
          {
            if (sub_20C1FE3D8(5))
            {
              v305 = sub_20C255174(&v443, v303, v304);
              pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * *(_QWORD *)*v305), (uint64_t *)&v441);
              v306 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&v441);
              v307 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v306);
              sub_20C1FE438(v307);
              if ((SBYTE7(v445) & 0x80u) == 0)
                v310 = &v444;
              else
                v310 = (__int128 *)v444;
              v311 = sub_20C255174(&v443, v308, v309);
              v312 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v311 + 8));
              v315 = sub_20C255174(&v443, v313, v314);
              v316 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v315 + 16));
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" cacheSite:\n  cache:   %s\n  oldPath: <%s>\n  newPath: <%s>\n", v317, v318, v310, v312, v316);
              if (SBYTE7(v445) < 0)
                operator delete((void *)v444);
              v319 = v442;
              if ((_QWORD)v442)
              {
                v320 = (unsigned int *)(v442 + 8);
                do
                {
                  v321 = __ldxr(v320);
                  v322 = v321 - 1;
                }
                while (__stlxr(v322, v320));
                if (!v322)
                  (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
              }
            }
            sub_20C2551EC(&v443);
          }
          for (m = *(_OWORD *)(a6 + 24); (_QWORD)m != *((_QWORD *)&m + 1); sub_20C2552E0(&m))
          {
            if (sub_20C1FE3D8(5))
            {
              v325 = sub_20C255268(&m, v323, v324);
              pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * *(_QWORD *)*v325), (uint64_t *)&v421);
              v326 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&v421);
              v327 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v326);
              sub_20C1FE438(v327);
              if ((SBYTE7(v445) & 0x80u) == 0)
                v330 = &v444;
              else
                v330 = (__int128 *)v444;
              v331 = sub_20C255268(&m, v328, v329);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C52D420, *(unsigned int *)(*v331 + 8), (uint64_t)&v443);
              if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v334 = &v443;
              else
                v334 = (std::string *)v443.__r_.__value_.__r.__words[0];
              v335 = sub_20C255268(&m, v332, v333);
              v336 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)(*v335 + 16));
              v337 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v336);
              sub_20C1FE438(v337);
              if (v442 >= 0)
                v340 = &v441;
              else
                v340 = (void ***)v441;
              v341 = sub_20C255268(&m, v338, v339);
              v342 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v341 + 32));
              v345 = sub_20C255268(&m, v343, v344);
              v346 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v345 + 40));
              v349 = sub_20C255268(&m, v347, v348);
              v350 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v349 + 48));
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" layerStackSite:\n  cache:      %s\n  type:       %s\n  layerStack: %s\n  sitePath:   <%s>\n  oldPath:    <%s>\n  newPath:    <%s>\n", v351, v352, v330, v334, v340, v342, v346, v350);
              if (SHIBYTE(v442) < 0)
                operator delete(v441);
              if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v443.__r_.__value_.__l.__data_);
              if (SBYTE7(v445) < 0)
                operator delete((void *)v444);
              v353 = v422[0];
              if (v422[0])
              {
                v354 = (unsigned int *)(v422[0] + 1);
                do
                {
                  v355 = __ldxr(v354);
                  v356 = v355 - 1;
                }
                while (__stlxr(v356, v354));
                if (!v356)
                  (*(void (**)(_QWORD *))(*v353 + 8))(v353);
              }
            }
          }
          for (m = *(_OWORD *)(a6 + 48); (_QWORD)m != *((_QWORD *)&m + 1); sub_20C2552E0(&m))
          {
            if (sub_20C1FE3D8(5))
            {
              v359 = sub_20C255268(&m, v357, v358);
              pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * *(_QWORD *)*v359), (uint64_t *)&v421);
              v360 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&v421);
              v361 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v360);
              sub_20C1FE438(v361);
              if ((SBYTE7(v445) & 0x80u) == 0)
                v364 = &v444;
              else
                v364 = (__int128 *)v444;
              v365 = sub_20C255268(&m, v362, v363);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C52D420, *(unsigned int *)(*v365 + 8), (uint64_t)&v443);
              if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v368 = &v443;
              else
                v368 = (std::string *)v443.__r_.__value_.__r.__words[0];
              v369 = sub_20C255268(&m, v366, v367);
              v370 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)(*v369 + 16));
              v371 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v370);
              sub_20C1FE438(v371);
              if (v442 >= 0)
                v374 = &v441;
              else
                v374 = (void ***)v441;
              v375 = sub_20C255268(&m, v372, v373);
              v376 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v375 + 32));
              v379 = sub_20C255268(&m, v377, v378);
              v380 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v379 + 40));
              v383 = sub_20C255268(&m, v381, v382);
              v384 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v383 + 48));
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" invalidLayerStackSite:\n  cache:      %s\n  type:       %s\n  layerStack: %s\n  sitePath:   <%s>\n  oldPath:    <%s>\n  newPath:    <%s>\n", v385, v386, v364, v368, v374, v376, v380, v384);
              if (SHIBYTE(v442) < 0)
                operator delete(v441);
              if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v443.__r_.__value_.__l.__data_);
              if (SBYTE7(v445) < 0)
                operator delete((void *)v444);
              v387 = v422[0];
              if (v422[0])
              {
                v388 = (unsigned int *)(v422[0] + 1);
                do
                {
                  v389 = __ldxr(v388);
                  v390 = v389 - 1;
                }
                while (__stlxr(v390, v388));
                if (!v390)
                  (*(void (**)(_QWORD *))(*v387 + 8))(v387);
              }
            }
          }
        }
        sub_20C255E60((uint64_t)&v425, *((_QWORD **)&v425 + 1));
        sub_20BE6100C((uint64_t)&v427, v428);
        sub_20BE6100C((uint64_t)&v430, v431[0]);
        *(_QWORD *)&v444 = &v432;
        sub_20C255BC0((void ***)&v444);
      }
    }
    else
    {
      *(_QWORD *)&v444 = "pcp/namespaceEdits.cpp";
      *((_QWORD *)&v444 + 1) = "PcpComputeNamespaceEdits";
      *(_QWORD *)&v445 = 443;
      *((_QWORD *)&v445 + 1) = "PcpNamespaceEdits pxrInternal__aapl__pxrReserved__::PcpComputeNamespaceEdits(const PcpCac"
                               "he *, const std::vector<PcpCache *> &, const SdfPath &, const SdfPath &, const SdfLayerHandle &)";
      v446 = 0;
      v85 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)&v437);
      v86 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v85);
      sub_20C1FE438(v86);
      v87 = SHIBYTE(v443.__r_.__value_.__r.__words[2]);
      v88 = v443.__r_.__value_.__r.__words[0];
      v89 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
      v90 = &v443;
      if (v87 < 0)
        v90 = (std::string *)v88;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v444, 1, (pxrInternal__aapl__pxrReserved__ *)"No prim index computed for %s<%s>\n", (const char *)v90, v89);
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v436);
    sub_20BFD265C(&v435);
    sub_20C2012CC(&v437);
  }
  *(_QWORD *)&v444 = v438;
  sub_20BFD6F90((void ***)&v444);
}

void sub_20C253B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,_QWORD *a59,uint64_t a60,char a61,_QWORD *a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  sub_20BFD7C28(v64 - 176, *(_QWORD **)(v64 - 168));
  sub_20BE6100C((uint64_t)&a58, a59);
  sub_20BE6100C((uint64_t)&a61, a62);
  *(_QWORD *)(v64 - 200) = &a64;
  sub_20C255BC0((void ***)(v64 - 200));
  sub_20BFD1A18((_DWORD *)(v64 - 256));
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v64 - 248));
  *(_QWORD *)(v64 - 200) = v64 - 240;
  sub_20BFD6F90((void ***)(v64 - 200));
  sub_20C25535C(a30);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C2542F8(_QWORD *a1, unint64_t a2)
{
  _DWORD *result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = (_DWORD *)a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return sub_20C255814((uint64_t)a1, v6);
  if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (result != (_DWORD *)v7)
      result = (_DWORD *)sub_20C2556C8((uint64_t)(result - 14));
    a1[1] = v7;
  }
  return result;
}

uint64_t *sub_20C254378(uint64_t *result, uint64_t *a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  uint64_t *v9;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v12;
  uint64_t *Layers;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t v20;
  char *v21;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  unint64_t *p_shared_owners;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  unsigned int **v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t v32;
  _BOOL4 HasPrefix;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _DWORD *v39;
  void *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  _OWORD v48[3];
  __int128 v49;
  uint64_t v50;

  if (result)
  {
    v9 = result;
    v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a2);
    result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetPathsToPrimsWithRelocates(v10);
    v11 = result[1];
    v46 = *result;
    for (i = v11; v46 != i; result = sub_20BFED8DC(&v46))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a2);
      Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v12);
      v16 = *Layers;
      v17 = Layers[1];
      v44 = *Layers;
      v45 = v17;
      while (v16 != v17)
      {
        v18 = (uint64_t *)sub_20C21A438(&v44, v14, v15);
        v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v18);
        v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFED860(&v46, v20, v21);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v19, v22, &v43);
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v43) & 1) == 0)
        {
          v24 = sub_20C0B0CA4(&v43);
          if ((pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasRelocates(v24) & 1) != 0)
          {
            v25 = (unsigned int **)sub_20C0B0CA4(&v43);
            pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates(v25, &v41);
            memset(v48, 0, sizeof(v48));
            sub_20BFE47D4(&v41, v48);
            sub_20BFE48DC(&v41, (uint64_t **)&v49);
            *(_OWORD *)((char *)&v48[1] + 8) = v49;
            *((_QWORD *)&v48[2] + 1) = v50;
            if (sub_20BFE4958((uint64_t)v48, (uint64_t)&v48[1] + 8))
            {
LABEL_11:
              v30 = 0;
            }
            else
            {
              while (1)
              {
                v26 = sub_20BFE1008((uint64_t)v48);
                v27 = sub_20BFE49FC(*(uint64_t **)v26, *(_QWORD *)(v26 + 8), *(char **)(v26 + 16));
                if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v27, a4))
                {
                  break;
                }
                v28 = sub_20BFE1008((uint64_t)v48);
                v29 = sub_20BFE49FC(*(uint64_t **)v28, *(_QWORD *)(v28 + 8), *(char **)(v28 + 16));
                if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v29 + 8), a4))
                {
                  break;
                }
                sub_20BFE1080((uint64_t)v48);
                if (sub_20BFE4958((uint64_t)v48, (uint64_t)&v48[1] + 8))
                  goto LABEL_11;
              }
              v30 = 1;
            }
            v31 = v42;
            if (v42)
            {
              p_shared_owners = (unint64_t *)&v42->__shared_owners_;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            if (v30)
            {
              HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a5, a4);
              v34 = 3;
              if (HasPrefix)
              {
                v34 = 6;
                v35 = v9 + 6;
              }
              else
              {
                v35 = v9 + 3;
              }
              sub_20C2542F8(v35, 0x6DB6DB6DB6DB6DB7 * ((v35[1] - v9[v34]) >> 3) + 1);
              v36 = v35[1];
              *(_QWORD *)(v36 - 56) = a3;
              *(_DWORD *)(v36 - 48) = 5;
              v39 = (_DWORD *)sub_20BFED860(&v46, v37, v38);
              sub_20C01A074((int *)(v36 - 24), v39);
              sub_20C01A0C8((int *)(v36 - 20), v39 + 1);
              sub_20C01A074((int *)(v36 - 16), a4);
              sub_20C01A0C8((int *)(v36 - 12), (_DWORD *)a4 + 1);
              sub_20C01A074((int *)(v36 - 8), a5);
              sub_20C01A0C8((int *)(v36 - 4), (_DWORD *)a5 + 1);
              sub_20BF2D298(v36 - 40, (uint64_t)a2);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v40, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v43);
              break;
            }
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(p_shared_owners, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v43);
        sub_20C21A4B4(&v44);
        v16 = v44;
        v17 = v45;
      }
    }
  }
  return result;
}

void sub_20C254664(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C254698(uint64_t *a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v9;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v11;
  _QWORD *RelocatesTargetToSource;
  _QWORD *v13;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  uint64_t v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  int ArcType;
  _BOOL4 HasPrefix;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  const char *Text;
  const char *v46;
  const char *v47;
  char *v48;
  const char *v50;
  char *v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  __int128 v58;
  uint64_t v59;
  const char *v60;
  char v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ParentNode;
  uint64_t v70;
  int v71;
  int v72;
  _QWORD v73[2];

  sub_20BFD6E54(&v64, a4);
  sub_20BFD6EA4(&v65, a4 + 1);
  sub_20BFD6E54(&v62, a5);
  sub_20BFD6EA4(&v63, a5 + 1);
  sub_20C2553B0(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v73);
  sub_20C2553B0(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a5, &v71);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a4))
  {
    sub_20C01A074(a4, v73);
    sub_20C01A0C8(a4 + 1, (_DWORD *)v73 + 1);
    sub_20C01A074(a5, &v71);
    sub_20C01A0C8(a5 + 1, &v72);
    goto LABEL_20;
  }
  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
  v70 = v9;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
  sub_20C2033F4((uint64_t *)&v58, LayerStack);
  v11 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&v58);
  RelocatesTargetToSource = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesTargetToSource(v11);
  v13 = sub_20C14177C(RelocatesTargetToSource, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v73, 0, (uint64_t)&ParentNode);
  if (RelocatesTargetToSource + 1 != v13)
  {
    v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28);
    v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&ParentNode, (pxrInternal__aapl__pxrReserved__::SdfPath *)v73, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36), 1);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v68, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, v14, v15, 1);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v71))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, &v67);
      v56 = a3;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, &v66);
      v16 = v66;
      v17 = v67;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
      sub_20BFD265C(&v66);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
      sub_20BFD265C(&v67);
      if (v17 == v16)
      {
        a3 = v56;
        sub_20C254378(a1, (uint64_t *)&v58, v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&ParentNode, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
        if (*(_QWORD *)v14 == v73[0])
        {
          NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
          if ((*(_QWORD *)NameToken & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v14) & 0xFFFFFFFFFFFFFFF8))
          {
            v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a5);
            pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(v14, v19, (int *)&v67);
            sub_20BFD3EBC(&v71, (int *)&v67);
            sub_20BFD3F10(&v72, (int *)&v67 + 1);
            sub_20BFD1A18(&v67);
LABEL_11:
            sub_20C254378(a1, (uint64_t *)&v58, a3, v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v71);
LABEL_14:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v68 + 1);
            sub_20BFD265C(&v68);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
            sub_20BFD265C(&ParentNode);
            goto LABEL_15;
          }
        }
      }
      else
      {
        a3 = v56;
        sub_20C254378(a1, (uint64_t *)&v58, v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&ParentNode, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
      }
      sub_20C01A074(&v71, v73);
      sub_20C01A0C8(&v72, (_DWORD *)v73 + 1);
      goto LABEL_14;
    }
    v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v73;
    goto LABEL_11;
  }
  sub_20C254378(a1, (uint64_t *)&v58, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v73, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v71);
LABEL_15:
  sub_20C01A074(a4, v73);
  sub_20C01A0C8(a4 + 1, (_DWORD *)v73 + 1);
  sub_20C01A074(a5, &v71);
  sub_20C01A0C8(a5 + 1, &v72);
  v20 = *((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v21 = (unsigned int *)(*((_QWORD *)&v58 + 1) + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
  sub_20BFD265C(&v71);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v73 + 1);
  v24 = sub_20BFD265C(v73);
  sub_20BFD6E54(v24, a4);
  sub_20BFD6EA4((_DWORD *)v73 + 1, a4 + 1);
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2) == 3)
  {
    sub_20C01A074(a4, &v64);
    sub_20C01A0C8(a4 + 1, &v65);
    sub_20C01A074(a5, &v62);
    sub_20C01A0C8(a5 + 1, &v63);
    if (sub_20C1FE3D8(5))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - not final. skipping relocate\n", v25, v26);
    v27 = 0;
  }
  else if (*(_QWORD *)a4 == *(_QWORD *)a5)
  {
    if (sub_20C1FE3D8(5))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - final.  stopping at node where path is unaffected\n", v28, v29);
LABEL_27:
    v27 = 1;
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a4)
         && (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a2) & 1) == 0)
  {
    if (sub_20C1FE3D8(5))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - final.  direct arc fixup\n", v50, v51);
    ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2);
    v27 = 1;
    switch(ArcType)
    {
      case 1:
        goto LABEL_31;
      case 2:
        break;
      case 4:
        ArcType = 3;
        goto LABEL_31;
      case 5:
        ArcType = 4;
        goto LABEL_31;
      case 6:
        ArcType = 2;
        goto LABEL_31;
      default:
        *(_QWORD *)&v58 = "pcp/namespaceEdits.cpp";
        *((_QWORD *)&v58 + 1) = "_AddLayerStackSite";
        v59 = 381;
        v60 = "BOOL pxrInternal__aapl__pxrReserved__::_AddLayerStackSite(PcpNamespaceEdits *, const PcpNodeRef &, size_t,"
              " SdfPath *, SdfPath *)";
        v61 = 0;
        v52 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2);
        v55 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected arc type %d", v53, v54, v52);
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v58, "false", v55);
        goto LABEL_27;
    }
  }
  else
  {
    sub_20C01A074(&v64, a4);
    sub_20C01A0C8(&v65, a4 + 1);
    sub_20C01A074(&v62, a5);
    sub_20C01A0C8(&v63, a5 + 1);
    ArcType = 0;
    v27 = 0;
LABEL_31:
    if (a1)
    {
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      v32 = 3;
      if (HasPrefix)
      {
        v32 = 6;
        v33 = a1 + 6;
      }
      else
      {
        v33 = a1 + 3;
      }
      sub_20C2542F8(v33, 0x6DB6DB6DB6DB6DB7 * ((v33[1] - a1[v32]) >> 3) + 1);
      v34 = v33[1];
      *(_QWORD *)(v34 - 56) = a3;
      *(_DWORD *)(v34 - 48) = ArcType;
      sub_20C01A074((int *)(v34 - 24), v73);
      sub_20C01A0C8((int *)(v34 - 20), (_DWORD *)v73 + 1);
      sub_20C01A074((int *)(v34 - 16), &v64);
      sub_20C01A0C8((int *)(v34 - 12), &v65);
      sub_20C01A074((int *)(v34 - 8), &v62);
      sub_20C01A0C8((int *)(v34 - 4), &v63);
      ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
      v70 = v35;
      v36 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
      sub_20C2033F4((uint64_t *)&v58, v36);
      v37 = *(unsigned int **)(v34 - 32);
      *(_OWORD *)(v34 - 40) = v58;
      *((_QWORD *)&v58 + 1) = 0;
      if (v37)
      {
        v38 = v37 + 2;
        do
        {
          v39 = __ldxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
          (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
        v41 = *((_QWORD *)&v58 + 1);
        *(_QWORD *)&v58 = 0;
        if (*((_QWORD *)&v58 + 1))
        {
          v42 = (unsigned int *)(*((_QWORD *)&v58 + 1) + 8);
          do
          {
            v43 = __ldxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      if (sub_20C1FE3D8(5))
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v34 - 16));
        v46 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v34 - 8));
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - adding layer stack edit <%s> -> <%s>\n", v47, v48, Text, v46);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v73 + 1);
  sub_20BFD265C(v73);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
  sub_20BFD265C(&v62);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
  sub_20BFD265C(&v64);
  return v27;
}

void sub_20C254DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  sub_20BFD1A18((_DWORD *)(v13 - 96));
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18(va1);
  _Unwind_Resume(a1);
}

void **sub_20C254EAC(void **result, unint64_t a2)
{
  void **v2;
  char *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t i;

  v2 = result;
  v3 = (char *)result[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (_BYTE *)*result) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return sub_20C2560A8(result, v6);
  if (!v5)
  {
    for (i = (uint64_t)*result + 24 * a2; v3 != (char *)i; result = (void **)sub_20C2557D4((uint64_t)(v2 + 2), v3))
      v3 -= 24;
    v2[1] = (void *)i;
  }
  return result;
}

_QWORD *sub_20C254F3C(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, p"
            "xrInternal__aapl__pxrReserved__::PcpNodeRef>>::operator->() [T = std::map<pxrInternal__aapl__pxrReserved__::"
            "SdfPath, pxrInternal__aapl__pxrReserved__::PcpNodeRef>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C254FB4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, pxrInternal__aapl__pxrReserved__::PcpNodeRef>>::operator++() [T = std::map<pxrInternal__aapl__p"
            "xrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::PcpNodeRef>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

_QWORD *sub_20C255058(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::PcpLayerSt"
            "ackSite, unsigned long>>::operator->() [T = std::map<pxrInternal__aapl__pxrReserved__::PcpLayerStackSite, un"
            "signed long>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C2550D0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::PcpLayerStackSite, unsigned long>>::operator++() [T = std::map<pxrInternal__aapl__pxrReserved__::PcpLaye"
            "rStackSite, unsigned long>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

_QWORD *sub_20C255174(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::PcpName"
            "spaceEdits::CacheSite>>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNamespaceEdits::"
            "CacheSite>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C2551EC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::PcpNamespaceEdits::CacheSite>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNa"
            "mespaceEdits::CacheSite>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

_QWORD *sub_20C255268(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::PcpName"
            "spaceEdits::LayerStackSite>>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNamespaceEd"
            "its::LayerStackSite>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C2552E0(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::PcpNamespaceEdits::LayerStackSite>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::"
            "PcpNamespaceEdits::LayerStackSite>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 56;
  }
  return a1;
}

void **sub_20C25535C(void **a1)
{
  void **v3;

  v3 = a1 + 6;
  sub_20C255658(&v3);
  v3 = a1 + 3;
  sub_20C255658(&v3);
  v3 = a1;
  sub_20C255750(&v3);
  return a1;
}

_DWORD *sub_20C2553B0@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  _DWORD *v11;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v12;
  const char *v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v15;
  void **v16;
  uint64_t v17;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v20;
  const char *v21;
  char *v22;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v23;
  BOOL v24;
  uint64_t v26;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a1);
  v9 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v7, v8);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v9, a2, &v30);
  if (v30 == *(_QWORD *)a2)
  {
    v11 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v10);
    sub_20BFD6E54(&v27, v11);
    sub_20BFD6EA4((_DWORD *)&v27 + 1, v11 + 1);
    v12 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a1);
    v15 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v12, v13, v14);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, &v31);
    v16 = v31;
    v17 = (uint64_t)v27;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
    sub_20BFD265C(&v31);
    if (v16 == (void **)v17)
    {
      *(_QWORD *)a3 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      goto LABEL_13;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_20BFD265C(&v27);
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v30, (uint64_t *)&v27);
  v18 = v27;
  v19 = v28;
  if (v27 == v28)
  {
LABEL_11:
    sub_20BFD38A4(a3, &v30);
    sub_20BFD38DC(a3 + 1, (_DWORD *)&v30 + 1);
  }
  else
  {
    while (1)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a1);
      v23 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v20, v21, v22);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v23, v18, &v31);
      v24 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
      if (v24)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v30, v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, 1);
        sub_20BFD3EBC((int *)&v30, (int *)&v26);
        sub_20BFD3F10((int *)&v30 + 1, (int *)&v26 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
        sub_20BFD265C(&v26);
      }
      else
      {
        *(_QWORD *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
      sub_20BFD265C(&v31);
      if (!v24)
        break;
      v18 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 8);
      if (v18 == v19)
        goto LABEL_11;
    }
  }
  v31 = (void **)&v27;
  sub_20BFD6F90(&v31);
LABEL_13:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  return sub_20BFD265C(&v30);
}

void sub_20C2555F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C255658(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_20C2556C8(v4 - 56);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C2556C8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_20BFD265C((_DWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_20BFD265C((_DWORD *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_20C255750(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        sub_20C2557D4((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C2557D4(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 5);
  sub_20BFD265C(a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);
  return sub_20BFD265C(a2 + 2);
}

_DWORD *sub_20C255814(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
    return sub_20C255974((_DWORD *)a1, a2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *(_QWORD *)a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x492492492492492)
    sub_20BDDF694();
  v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *(_QWORD *)a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x249249249249249)
    v11 = 0x492492492492492;
  else
    v11 = v9;
  v20 = v4;
  if (v11)
    v12 = (char *)sub_20BE16B34(v4, v11);
  else
    v12 = 0;
  v14 = (uint64_t)&v12[56 * v8];
  v17[0] = v12;
  v17[1] = v14;
  v18 = v14;
  v19 = &v12[56 * v11];
  v15 = 56 * a2;
  v16 = v14 + 56 * a2;
  do
  {
    sub_20C255A80(v20, v14);
    v14 += 56;
    v15 -= 56;
  }
  while (v15);
  v18 = v16;
  sub_20C2559E4((uint64_t *)a1, v17);
  return (_DWORD *)sub_20C255B74((uint64_t)v17);
}

void sub_20C255954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C255B74((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C255974(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *((_QWORD *)result + 1);
  if (a2)
  {
    v4 = v3 + 56 * a2;
    v5 = 56 * a2;
    do
    {
      result = sub_20C255A80((uint64_t)(v2 + 4), v3);
      v3 += 56;
      v5 -= 56;
    }
    while (v5);
    v3 = v4;
  }
  *((_QWORD *)v2 + 1) = v3;
  return result;
}

void sub_20C2559DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_20C2559E4(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = (uint64_t *)*result;
  v4 = (uint64_t *)result[1];
  v6 = a2[1];
  if (v4 != (uint64_t *)*result)
  {
    do
    {
      v6 -= 56;
      v4 -= 7;
      result = (uint64_t *)sub_20C255AF4((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_DWORD *sub_20C255A80(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  v3 = (_DWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 32) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 36));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 44));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v3);
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 52));
}

_DWORD *sub_20C255AF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = *((_OWORD *)a3 + 1);
  a3[2] = 0;
  a3[3] = 0;
  sub_20BFD38A4((_DWORD *)(a2 + 32), (_DWORD *)a3 + 8);
  sub_20BFD38DC((_DWORD *)(a2 + 36), (_DWORD *)a3 + 9);
  sub_20BFD38A4((_DWORD *)(a2 + 40), (_DWORD *)a3 + 10);
  sub_20BFD38DC((_DWORD *)(a2 + 44), (_DWORD *)a3 + 11);
  sub_20BFD38A4((_DWORD *)(a2 + 48), (_DWORD *)a3 + 12);
  return sub_20BFD38DC((_DWORD *)(a2 + 52), (_DWORD *)a3 + 13);
}

uint64_t sub_20C255B74(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_20C2556C8(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C255BC0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        sub_20C2333F4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *sub_20C255C44(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_20C255CCC((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    sub_20BDDE1B4(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *sub_20C255CCC(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a3 + 1;
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *a3;
        v10 = v4[4];
        if (*a3 >= v10)
          break;
LABEL_6:
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_15;
      }
      if (v10 >= v9)
      {
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v7, v8 + 5))
          goto LABEL_6;
        v10 = v8[4];
        v9 = *a3;
      }
      if (v10 < v9 || v9 >= v10 && pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v8 + 5, v7))
      {
        v5 = v8 + 1;
        v4 = (_QWORD *)v8[1];
        if (v4)
          continue;
      }
      goto LABEL_15;
    }
  }
  v8 = (_QWORD *)(a1 + 8);
LABEL_15:
  *a2 = v8;
  return v5;
}

_OWORD *sub_20C255D8C(char *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t ParentNode;
  uint64_t v7;
  _OWORD *result;
  char *v9;
  __int128 v10;
  const char *v11;
  char v12;
  __int128 v13;

  ParentNode = a2;
  *(_QWORD *)&v13 = a2;
  *((_QWORD *)&v13 + 1) = a3;
  if (a2)
  {
    while (a3 != -1)
    {
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13) != 2)
      {
        a3 = *((_QWORD *)&v13 + 1);
        ParentNode = v13;
        break;
      }
      ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
      a3 = v7;
      *(_QWORD *)&v13 = ParentNode;
      *((_QWORD *)&v13 + 1) = v7;
      if (!ParentNode)
        break;
    }
  }
  if (ParentNode && a3 != -1
    || (v9 = "pcp/namespaceEdits.cpp",
        *(_QWORD *)&v10 = "InsertCacheNodePair",
        *((_QWORD *)&v10 + 1) = 485,
        v11 = "static void pxrInternal__aapl__pxrReserved__::PcpComputeNamespaceEdits(const PcpCache *, const std::vector"
              "<PcpCache *> &, const SdfPath &, const SdfPath &, const SdfLayerHandle &)::_CacheNodeHelper::InsertCacheNo"
              "dePair(size_t, PcpNodeRef, std::set<CacheNodePair> *)",
        v12 = 0,
        result = (_OWORD *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "node", 0),
        (_DWORD)result))
  {
    v9 = a1;
    v10 = v13;
    return sub_20C255C44(a4, (unint64_t *)&v9, (uint64_t)&v9);
  }
  return result;
}

void sub_20C255E60(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C255E60(a1, *a2);
    sub_20C255E60(a1, a2[1]);
    sub_20C255EA8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C255EA8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

uint64_t *sub_20C255EDC(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20C255F6C((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20C255FFC((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20C256064((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *sub_20C255F6C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_DWORD *sub_20C255FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v6[4] = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  sub_20BFD38A4((_DWORD *)v6 + 10, (_DWORD *)(a2 + 8));
  result = sub_20BFD38DC((_DWORD *)v6 + 11, (_DWORD *)(a2 + 12));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C256064(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C255EA8((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void **sub_20C2560A8(void **result, unint64_t a2)
{
  uint64_t *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18[5];

  v3 = (uint64_t *)result;
  v5 = (uint64_t)(result + 2);
  v4 = result[2];
  v6 = (uint64_t)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-v6] >> 3) >= a2)
  {
    if (a2)
    {
      v12 = v6 + 24 * a2;
      v13 = 24 * a2;
      do
      {
        result = (void **)sub_20C25628C(v5, v6);
        v6 += 24;
        v13 -= 24;
      }
      while (v13);
      v6 = v12;
    }
    v3[1] = v6;
  }
  else
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)*result) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*result) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v18[4] = result + 2;
    if (v10)
      v11 = (char *)sub_20BDE4FF4((uint64_t)(result + 2), v10);
    else
      v11 = 0;
    v14 = &v11[24 * v7];
    v18[0] = v11;
    v18[1] = v14;
    v18[3] = &v11[24 * v10];
    v15 = 3 * a2;
    v16 = &v14[24 * a2];
    v17 = 8 * v15;
    do
    {
      sub_20C25628C(v5, (uint64_t)v14);
      v14 += 24;
      v17 -= 24;
    }
    while (v17);
    v18[2] = v16;
    sub_20C256218(v3, v18);
    return sub_20C25648C(v18);
  }
  return result;
}

void sub_20C256204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C25648C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C256218(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2562F0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_DWORD *sub_20C25628C(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)(a2 + 16) = 0;
  v3 = (_DWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  v4 = (_DWORD *)(a2 + 12);
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v3);
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
}

uint64_t sub_20C2562F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 24;
      sub_20C2563A4(a1, v7 - 24, v9);
      v7 = *((_QWORD *)&v16 + 1) - 24;
      *((_QWORD *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C256408((uint64_t)v13);
  return v11;
}

_DWORD *sub_20C2563A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;

  v5 = (_DWORD *)(a3 + 12);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v6 = (_DWORD *)(a2 + 12);
  sub_20BFD38A4((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_20BFD38DC(v6, v5);
  sub_20BFD38A4((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  return sub_20BFD38DC((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
}

uint64_t sub_20C256408(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C25643C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C25643C(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD **)(result[2] + 8);
  v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C2557D4(v3, v1);
      v1 += 6;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C25648C(void **a1)
{
  sub_20C2564BC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C2564BC(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 24;
      result = sub_20C2557D4(v4, (_DWORD *)(v1 - 24));
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_20C256500(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C256500(a1, *a2);
    sub_20C256500(a1, a2[1]);
    sub_20C256548((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C256548(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

uint64_t *sub_20C25657C(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_20C203208(a1, a2, &v14, &v13, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_20BDDE1B4(a1, v14, v8, v7);
  }
  return v7;
}

void sub_20C256618(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C256618(a1, *a2);
    sub_20C256618(a1, a2[1]);
    sub_20C256660((_DWORD *)a2 + 8);
    operator delete(a2);
  }
}

_DWORD *sub_20C256660(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t *sub_20C25668C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C137858((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C256734((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C25679C((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *sub_20C256734@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  sub_20BFD6E54(v6 + 8, v7);
  result = sub_20BFD6EA4(v6 + 9, v7 + 1);
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = -1;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C25679C(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C256660(v2 + 8);
    operator delete(v2);
  }
}

uint64_t sub_20C2567E0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(a2, v2 + 4) & 1) == 0)
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(v2 + 4, a2))
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *sub_20C256848(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C255F6C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C2568F0((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C2569B0((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_20C2568F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C256958((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C256940(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C2569B0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C256958(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = (_DWORD *)(a2 + 12);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_20BF1DD04((uint64_t *)a1);
  sub_20BFD6E54((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_20BFD6EA4((_DWORD *)(a1 + 12), v4);
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_20C2569B0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C256548((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if (v2 < v3)
    return 1;
  if (v2 > v3)
    return 0;
  return *a1 < *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(_QWORD *)this + (*((_QWORD *)this + 1) << 6);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpNodeRef::InsertChildSubgraph(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildSubgraph(*a1, a1, a2, a3, a4);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpNodeRef::InsertChild(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **a1, uint64_t *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a4)
{
  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildNode(*a1, a1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **this)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(*this);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginRootNode(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  BOOL v10;

  result = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  v4 = **(_QWORD **)(result + 16);
  do
  {
    v5 = v3;
    v3 = *(unsigned __int16 *)(v4 + 48 * v3 + 26);
    if ((_DWORD)v3 == 0xFFFF)
      v6 = 0;
    else
      v6 = result;
    if ((_DWORD)v3 == 0xFFFF || v6 == 0)
      break;
    v8 = *(unsigned __int16 *)(v4 + 48 * v5 + 24);
    v9 = v8 == 0xFFFF ? 0 : result;
    v10 = v8 != 0xFFFF && v8 == (_DWORD)v3;
  }
  while (!v10 || v6 != v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  if (*(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 26) == 0xFFFF)
    return 0;
  else
    return *(_QWORD *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  if (*(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 24) == 0xFFFF)
    return 0;
  else
    return *(_QWORD *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 40);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 38);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 36);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return **(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 16;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return **(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(_BYTE *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 42) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSymmetry(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, int a2, char *a3)
{
  uint64_t result;
  unint64_t v6;
  int v7;

  result = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  if (((((*(_BYTE *)(**(_QWORD **)(result + 16) + 48 * v6 + 42) & 1) == 0) ^ a2) & 1) == 0)
  {
    result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)result, v6, a3);
    if (a2)
      v7 = 0x10000;
    else
      v7 = 0;
    *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFEFFFF | v7;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 41);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetPermission(unint64_t *a1, int a2, char *a3)
{
  unint64_t result;
  unint64_t v6;

  result = *a1;
  v6 = a1[1];
  if (*(unsigned __int8 *)(**(_QWORD **)(result + 16) + 48 * v6 + 41) != a2)
  {
    result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)result, v6, a3);
    *(_BYTE *)(result + 41) = a2;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return (*(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 42) >> 2) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return **(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 32) + 12 * *((_QWORD *)this + 1) + 10) >> 1) & 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetCulled(_QWORD *this, int a2)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;

  if (((((*(_BYTE *)(*(_QWORD *)(*this + 32) + 12 * this[1] + 10) & 2) == 0) ^ a2) & 1) == 0)
  {
    v2 = this;
    if (a2)
    {
      *(_BYTE *)(*this + 56) &= ~4u;
      v3 = 2;
    }
    else
    {
      v3 = 0;
    }
    this = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)this, a2 ^ 1u);
    v4 = *(_QWORD *)(*v2 + 32) + 12 * v2[1];
    *(_BYTE *)(v4 + 10) = *(_BYTE *)(v4 + 10) & 0xFD | v3;
  }
  return this;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, int a2)
{
  char CanContributeSpecs;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  unint64_t result;
  char *v6;
  _QWORD v7[4];
  char v8;

  if (a2)
  {
    CanContributeSpecs = pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(this);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)(*(_QWORD *)this + 32) + 12
                                                                                           * *((_QWORD *)this + 1));
    if ((CanContributeSpecs & 1) != 0)
    {
      result = 0;
      goto LABEL_7;
    }
  }
  else
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)(*(_QWORD *)this + 32) + 12
                                                                                           * *((_QWORD *)this + 1));
  }
  result = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(v4);
  if (result >= 0x10000)
  {
    v7[0] = "pcp/node.cpp";
    v7[1] = "_RecordRestrictionDepth";
    v7[2] = 217;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(_Restricted)";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v7, (pxrInternal__aapl__pxrReserved__ *)"Maximum restriction namespace depth exceeded", v6);
    result = 0xFFFFLL;
  }
LABEL_7:
  *((_WORD *)v4 + 4) = result;
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetRestricted(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, int a2, char *a3)
{
  unint64_t result;
  unint64_t v6;
  int v7;
  int v8;

  result = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  v7 = *(_DWORD *)(**(_QWORD **)(result + 16) + 48 * v6 + 40);
  if (((((v7 & 0x40000) == 0) ^ a2) & 1) == 0)
  {
    result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)result, v6, a3);
    if (a2)
      v8 = 0x40000;
    else
      v8 = 0;
    *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFBFFFF | v8;
  }
  if (a2 != (v7 & 0x40000u) >> 18)
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(this, a2 ^ 1u);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, int a2, char *a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned int v7;
  int v8;
  int v9;

  result = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(**(_QWORD **)(result + 16) + 48 * v6 + 42) & 2) != 0)
  {
    if ((a2 & 1) != 0)
      return result;
    v8 = 1;
LABEL_6:
    result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)result, v6, a3);
    if (a2)
      v9 = 0x20000;
    else
      v9 = 0;
    *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFDFFFF | v9;
    if (v8 != a2)
      return pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(this, a2 ^ 1u);
    return result;
  }
  v7 = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 12 * v6 + 10);
  if ((a2 & 1) != 0)
  {
    v8 = (v7 >> 1) & 1;
    goto LABEL_6;
  }
  if (a2 != (v7 & 2) >> 1)
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(this, a2 ^ 1u);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * v1 + 42) & 2) != 0)
    return 1;
  else
    return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 32) + 12 * v1 + 10) >> 1) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  v3 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * v2 + 40);
  if ((v3 & 0x20000) != 0 || (*(_BYTE *)(*(_QWORD *)(v1 + 32) + 12 * v2 + 10) & 2) != 0)
    return 0;
  if ((v3 & 0x40000) != 0)
    return (*(unsigned __int8 *)(v1 + 56) >> 3) & 1;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 32) + 12 * *((_QWORD *)this + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 32) + 12 * *((_QWORD *)this + 1) + 10) >> 2) & 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetIsDueToAncestor(_QWORD *this, int a2)
{
  uint64_t v2;
  char v3;

  if (a2)
    v3 = 4;
  else
    v3 = 0;
  v2 = *(_QWORD *)(*this + 32) + 12 * this[1];
  *(_BYTE *)(v2 + 10) = *(_BYTE *)(v2 + 10) & 0xFB | v3;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 32) + 12 * *((_QWORD *)this + 1) + 10) & 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(_QWORD *this, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*this + 32) + 12 * this[1];
  *(_BYTE *)(v2 + 10) = *(_BYTE *)(v2 + 10) & 0xFE | a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X0>, uint64_t a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(a2, **(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1), *(_QWORD *)(*(_QWORD *)this + 32) + 12 * *((_QWORD *)this + 1));
}

BOOL pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(_BYTE *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 40) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)this + 32) + 12 * *((_QWORD *)this + 1) + 8);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(_QWORD *this, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*this + 32) + 12 * this[1] + 8) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  v3 = *(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 24);
  if ((_DWORD)v3 == 0xFFFF)
    v2 = 0;
  if (v3 == 0xFFFF || v2 == 0)
    return 0;
  else
    return pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v2 + 32)+ 12* *(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this+ 16)+ 48 * *((_QWORD *)this + 1)+ 24)), a2)- *(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 38);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t PathElementCount;
  int v5;
  int v6;
  int v7;
  int v8;

  PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(this);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(this))
  {
    sub_20BFD6E54(&v7, this);
    sub_20BFD6EA4(&v8, (_DWORD *)this + 1);
    do
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7) & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v5);
        sub_20BFD3EBC(&v7, &v5);
        sub_20BFD3F10(&v8, &v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
        sub_20BFD265C(&v5);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v5);
      sub_20BFD3EBC(&v7, &v5);
      sub_20BFD3F10(&v8, &v6);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
      sub_20BFD265C(&v5);
      PathElementCount = (PathElementCount - 1);
    }
    while ((pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7) & 1) != 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_20BFD265C(&v7);
  }
  return PathElementCount;
}

void sub_20C2572A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X0>, int *a2@<X8>)
{
  _DWORD *v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  uint64_t result;
  int i;
  int v8;
  int v9;

  v4 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 12 * *((_QWORD *)this + 1));
  sub_20BFD6E54(a2, v4);
  sub_20BFD6EA4(a2 + 1, v4 + 1);
  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(this, v5);
  for (i = result; i; --i)
  {
    while (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v8);
      sub_20BFD3EBC(a2, &v8);
      sub_20BFD3F10(a2 + 1, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
      sub_20BFD265C(&v8);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v8);
    sub_20BFD3EBC(a2, &v8);
    sub_20BFD3F10(a2 + 1, &v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    result = (uint64_t)sub_20BFD265C(&v8);
  }
  return result;
}

void sub_20C2573C4(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetIntroPath@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X0>, int *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v6;
  _DWORD *v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  _DWORD *result;
  int i;
  int v12;
  int v13;

  v3 = *(_QWORD *)this;
  v4 = *(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 24);
  if ((_DWORD)v4 == 0xFFFF)
    v3 = 0;
  if (v4 == 0xFFFF || v3 == 0)
  {
    v6 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
    sub_20BFD6E54(a2, v6);
    return sub_20BFD6EA4(a2 + 1, v6 + 1);
  }
  else
  {
    v8 = (_DWORD *)(*(_QWORD *)(v3 + 32)
                  + 12
                  * *(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)this + 16) + 48 * *((_QWORD *)this + 1) + 24));
    sub_20BFD6E54(a2, v8);
    sub_20BFD6EA4(a2 + 1, v8 + 1);
    result = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(this, v9);
    for (i = (int)result; i; --i)
    {
      while (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v12);
        sub_20BFD3EBC(a2, &v12);
        sub_20BFD3F10(a2 + 1, &v13);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
        sub_20BFD265C(&v12);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v12);
      sub_20BFD3EBC(a2, &v12);
      sub_20BFD3F10(a2 + 1, &v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
      result = sub_20BFD265C(&v12);
    }
  }
  return result;
}

void sub_20C25753C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetChildrenRange@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *this;
  v3 = this[1];
  v4 = *(unsigned __int16 *)(**(_QWORD **)(*this + 16) + 48 * v3 + 28);
  *a2 = *this;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v2;
  a2[4] = v3;
  a2[5] = 0xFFFFLL;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator::PcpNodeRef_ChildrenIterator(_QWORD *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, char a3)
{
  uint64_t v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  if ((a3 & 1) != 0)
    v3 = 0xFFFFLL;
  else
    v3 = *(unsigned __int16 *)(**(_QWORD **)(*this + 16) + 48 * this[1] + 28);
  this[2] = v3;
  return this;
}

{
  uint64_t v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  if ((a3 & 1) != 0)
    v3 = 0xFFFFLL;
  else
    v3 = *(unsigned __int16 *)(**(_QWORD **)(*this + 16) + 48 * this[1] + 28);
  this[2] = v3;
  return this;
}

double pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator::PcpNodeRef_ChildrenIterator(pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator *this)
{
  double result;

  *(_QWORD *)this = 0;
  result = NAN;
  *(_OWORD *)((char *)this + 8) = xmmword_20CAC7C40;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  result = NAN;
  *(_OWORD *)((char *)this + 8) = xmmword_20CAC7C40;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator::increment(_QWORD *this)
{
  this[2] = *(unsigned __int16 *)(**(_QWORD **)(*this + 16) + 48 * this[2] + 34);
  return this;
}

double pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator::PcpNodeRef_ChildrenReverseIterator(pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator *this)
{
  double result;

  *(_QWORD *)this = 0;
  result = NAN;
  *(_OWORD *)((char *)this + 8) = xmmword_20CAC7C40;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  result = NAN;
  *(_OWORD *)((char *)this + 8) = xmmword_20CAC7C40;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator::PcpNodeRef_ChildrenReverseIterator(uint64_t *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  v2 = *((_QWORD *)a2 + 2);
  v3 = *this;
  if (v2 == 0xFFFF)
    v4 = (unsigned __int16 *)(**(_QWORD **)(v3 + 16) + 48 * this[1] + 30);
  else
    v4 = (unsigned __int16 *)(**(_QWORD **)(v3 + 16) + 48 * v2 + 32);
  this[2] = *v4;
  return this;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  v2 = *((_QWORD *)a2 + 2);
  v3 = *this;
  if (v2 == 0xFFFF)
    v4 = (unsigned __int16 *)(**(_QWORD **)(v3 + 16) + 48 * this[1] + 30);
  else
    v4 = (unsigned __int16 *)(**(_QWORD **)(v3 + 16) + 48 * v2 + 32);
  this[2] = *v4;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator::increment(_QWORD *this)
{
  this[2] = *(unsigned __int16 *)(**(_QWORD **)(*this + 16) + 48 * this[2] + 32);
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator::PcpNodeRef_ChildrenReverseIterator(_QWORD *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, char a3)
{
  uint64_t v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  if ((a3 & 1) != 0)
    v3 = 0xFFFFLL;
  else
    v3 = *(unsigned __int16 *)(**(_QWORD **)(*this + 16) + 48 * this[1] + 30);
  this[2] = v3;
  return this;
}

{
  uint64_t v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  if ((a3 & 1) != 0)
    v3 = 0xFFFFLL;
  else
    v3 = *(unsigned __int16 *)(**(_QWORD **)(*this + 16) + 48 * this[1] + 30);
  this[2] = v3;
  return this;
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRoot@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _DWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v9;
  const char *v10;
  char *v11;
  const char *v12;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v14;
  const char *v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v18;
  uint64_t v19;
  char *v20;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  const char *v22;
  char *v23;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v24;
  _BOOL4 v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  __int128 i;
  int v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  const char *v36;
  char v37;

  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a2, &v26);
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  v9 = MapToRoot;
  if (a3)
    *(_BYTE *)a3 = 0;
  if (!*MapToRoot)
  {
    *(_QWORD *)&v34 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v34 + 1) = "Pcp_TranslatePath";
    v35 = 50;
    v36 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Null map function");
    goto LABEL_10;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v26))
    goto LABEL_12;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26))
  {
    *(_QWORD *)&v34 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v34 + 1) = "Pcp_TranslatePath";
    v35 = 62;
    v36 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    v37 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> is not absolute.", Text);
    goto LABEL_10;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26))
  {
    *(_QWORD *)&v34 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v34 + 1) = "Pcp_TranslatePath";
    v35 = 67;
    v36 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    v37 = 0;
    v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> must not contain a variant selection.", v12);
LABEL_10:
    *(_QWORD *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
    goto LABEL_15;
  }
  v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v9, v10, v11);
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(v14))
  {
    v18 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v9, v15, v16);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, &v32);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v32))
    {
      v34 = 0uLL;
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v32, (uint64_t *)&v34);
      for (i = v34; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
      {
        v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v19, v20);
        v24 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v9, v22, v23);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v24, v21, &v29);
        v25 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
        if (v25)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, 1);
          sub_20BFD3EBC(&v32, (int *)&v28);
          sub_20BFD3F10(&v33, (int *)&v28 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
          sub_20BFD265C(&v28);
        }
        else
        {
          *(_QWORD *)a4 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_20BFD265C(&v29);
        if (!v25)
          goto LABEL_28;
      }
      if (a3)
        *(_BYTE *)a3 = 1;
      sub_20BFD38A4(a4, &v32);
      sub_20BFD38DC(a4 + 1, &v33);
LABEL_28:
      *(_QWORD *)&i = &v34;
      sub_20BFD6F90((void ***)&i);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      sub_20C019BD0(a4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_20BFD265C(&v32);
  }
  else
  {
LABEL_12:
    if (a3)
      *(_BYTE *)a3 = 1;
    sub_20BFD6E54(a4, &v26);
    sub_20BFD6EA4(a4 + 1, &v27);
  }
LABEL_15:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  return sub_20BFD265C(&v26);
}

void sub_20C257AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  a13 = (void **)&a18;
  sub_20BFD6F90(&a13);
  sub_20BFD1A18(&a16);
  sub_20BFD1A18(&a10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromRootToNode@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, int *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  _DWORD *result;
  _DWORD *Path;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;

  v17 = 0;
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  result = sub_20C257CAC(MapToRoot, a2, &v17, a4);
  if (v17)
  {
    Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
    sub_20BFD6E54(&v15, Path);
    sub_20BFD6EA4(&v16, Path + 1);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, 0);
    sub_20BFD3EBC(a4, (int *)&v12);
    sub_20BFD3F10(a4 + 1, (int *)&v12 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_20BFD265C(&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_20BFD265C(&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    result = sub_20BFD265C(&v15);
  }
  if (a3)
    *(_BYTE *)a3 = v17;
  return result;
}

void sub_20C257C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, int a13)
{
  _DWORD *v13;

  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&a13);
  sub_20BFD1A18(v13);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C257CAC@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _BYTE *a3@<X2>, _DWORD *a4@<X8>)
{
  const char *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v11;
  const char *v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v14;
  uint64_t v15;
  char *v16;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  const char *v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  int v24;
  __int128 i;
  int v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  const char *v30;
  char v31;

  if (a3)
    *a3 = 0;
  if (!*a1)
  {
    *(_QWORD *)&v28 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v28 + 1) = "Pcp_TranslatePath";
    v29 = 50;
    v30 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Null map function");
    goto LABEL_10;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
    goto LABEL_13;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    *(_QWORD *)&v28 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v28 + 1) = "Pcp_TranslatePath";
    v29 = 62;
    v30 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> is not absolute.");
    goto LABEL_10;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a2))
  {
    *(_QWORD *)&v28 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v28 + 1) = "Pcp_TranslatePath";
    v29 = 67;
    v30 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> must not contain a variant selection.");
LABEL_10:
    *(_QWORD *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  }
  v11 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a1, v8, v9);
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(v11))
  {
    v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a1, v12, v13);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v14, a2, &v26);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v26))
    {
      v28 = 0uLL;
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v26, (uint64_t *)&v28);
      for (i = v28; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
      {
        v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v15, v16);
        v20 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a1, v18, v19);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v20, v17, &v23);
        v21 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
        if (v21)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v22, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, 1);
          sub_20BFD3EBC(&v26, (int *)&v22);
          sub_20BFD3F10(&v27, (int *)&v22 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
          sub_20BFD265C(&v22);
        }
        else
        {
          *(_QWORD *)a4 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_20BFD265C(&v23);
        if (!v21)
          goto LABEL_28;
      }
      if (a3)
        *a3 = 1;
      sub_20BFD38A4(a4, &v26);
      sub_20BFD38DC(a4 + 1, &v27);
LABEL_28:
      *(_QWORD *)&i = &v28;
      sub_20BFD6F90((void ***)&i);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      sub_20C019BD0(a4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    return sub_20BFD265C(&v26);
  }
  else
  {
LABEL_13:
    if (a3)
      *a3 = 1;
    sub_20BFD6E54(a4, a2);
    return sub_20BFD6EA4(a4 + 1, (_DWORD *)a2 + 1);
  }
}

void sub_20C257FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  a13 = (void **)&a18;
  sub_20BFD6F90(&a13);
  sub_20BFD1A18(&a16);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslateTargetPathFromRootToNode@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _DWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;

  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  return sub_20C257CAC(MapToRoot, a2, a3, a4);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromRootToNodeUsingFunction@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpMapFunction *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v10;
  char *v11;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 i;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  char v23;

  if (a3)
    *(_BYTE *)a3 = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsNull(this))
  {
    *(_QWORD *)&v20 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v20 + 1) = "Pcp_TranslatePath";
    v21 = 50;
    v22 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Null map function");
LABEL_5:
    *(_QWORD *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
    goto LABEL_13;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    *(_QWORD *)&v20 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v20 + 1) = "Pcp_TranslatePath";
    v21 = 62;
    v22 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> is not absolute.");
    goto LABEL_5;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a2))
  {
    *(_QWORD *)&v20 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v20 + 1) = "Pcp_TranslatePath";
    v21 = 67;
    v22 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> must not contain a variant selection.");
    goto LABEL_5;
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(this, a2, &v18);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v18))
    {
      v20 = 0uLL;
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v18, (uint64_t *)&v20);
      for (i = v20; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
      {
        v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v10, v11);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(this, v12, &v15);
        v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
        if (v13)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, 1);
          sub_20BFD3EBC(&v18, (int *)&v14);
          sub_20BFD3F10(&v19, (int *)&v14 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
          sub_20BFD265C(&v14);
        }
        else
        {
          *(_QWORD *)a4 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        sub_20BFD265C(&v15);
        if (!v13)
          goto LABEL_28;
      }
      if (a3)
        *(_BYTE *)a3 = 1;
      sub_20BFD38A4(a4, &v18);
      sub_20BFD38DC(a4 + 1, &v19);
LABEL_28:
      *(_QWORD *)&i = &v20;
      sub_20BFD6F90((void ***)&i);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    return sub_20BFD265C(&v18);
  }
  else
  {
LABEL_13:
    if (a3)
      *(_BYTE *)a3 = 1;
    sub_20BFD6E54(a4, a2);
    return sub_20BFD6EA4(a4 + 1, (_DWORD *)a2 + 1);
  }
}

void sub_20C25838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  a13 = (void **)&a18;
  sub_20BFD6F90(&a13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a17);
  sub_20BFD265C(&a16);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRootUsingFunction@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpMapFunction *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _DWORD *a4@<X8>)
{
  const char *v8;
  const char *Text;
  uint64_t v11;
  char *v12;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 i;
  int v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  const char *v25;
  char v26;

  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a2, &v15);
  if (a3)
    *(_BYTE *)a3 = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsNull(this))
  {
    *(_QWORD *)&v23 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v23 + 1) = "Pcp_TranslatePath";
    v24 = 50;
    v25 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Null map function");
LABEL_5:
    *(_QWORD *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
    goto LABEL_15;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15))
    goto LABEL_12;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15))
  {
    *(_QWORD *)&v23 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v23 + 1) = "Pcp_TranslatePath";
    v24 = 62;
    v25 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    v26 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> is not absolute.", Text);
    goto LABEL_5;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15))
  {
    *(_QWORD *)&v23 = "pcp/pathTranslation.cpp";
    *((_QWORD *)&v23 + 1) = "Pcp_TranslatePath";
    v24 = 67;
    v25 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    v26 = 0;
    v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> must not contain a variant selection.", v8);
    goto LABEL_5;
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v21);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v21))
    {
      v23 = 0uLL;
      v24 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v21, (uint64_t *)&v23);
      for (i = v23; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
      {
        v13 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v11, v12);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(this, v13, &v18);
        v14 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        if (v14)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, 1);
          sub_20BFD3EBC(&v21, (int *)&v17);
          sub_20BFD3F10(&v22, (int *)&v17 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
          sub_20BFD265C(&v17);
        }
        else
        {
          *(_QWORD *)a4 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_20BFD265C(&v18);
        if (!v14)
          goto LABEL_28;
      }
      if (a3)
        *(_BYTE *)a3 = 1;
      sub_20BFD38A4(a4, &v21);
      sub_20BFD38DC(a4 + 1, &v22);
LABEL_28:
      *(_QWORD *)&i = &v23;
      sub_20BFD6F90((void ***)&i);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      sub_20C019BD0(a4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
  }
  else
  {
LABEL_12:
    if (a3)
      *(_BYTE *)a3 = 1;
    sub_20BFD6E54(a4, &v15);
    sub_20BFD6EA4(a4 + 1, &v16);
  }
LABEL_15:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C258738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  a13 = (void **)&a18;
  sub_20BFD6F90(&a13);
  sub_20BFD1A18(&a16);
  sub_20BFD1A18(&a10);
  _Unwind_Resume(a1);
}

void sub_20C2587A4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpIsNewDefaultStandinBehaviorEnabled(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
  if (!v1)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
    v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
  }
  return *v1;
}

double pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  double result;

  *((_QWORD *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v1;

  if (*(_QWORD *)this)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  if (!*(_QWORD *)this)
    return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(this);
  v1 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v1);
  v5[0] = v2;
  v5[1] = v3;
  return (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasSpecs(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_QWORD *)this || (*(_BYTE *)(sub_20C21137C((uint64_t *)this) + 56) & 8) == 0)
    return *((_QWORD *)this + 1) != *((_QWORD *)this + 2);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, &v10);
  v4 = v10;
  v3 = v11;
  v5 = v12;
  if (v10 == v12 && v11 == v13)
    return 0;
  v7 = v13 - 1;
  do
  {
    v8 = v3;
    v9[0] = v4;
    v9[1] = v3;
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v9);
    if ((_DWORD)result)
      break;
    v3 = v8 + 1;
  }
  while (v4 != v5 || v7 != v8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsUsd(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  if (*(_QWORD *)this)
    return (*(unsigned __int8 *)(sub_20C21137C((uint64_t *)this) + 56) >> 3) & 1;
  else
    return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *result;
  if (*result)
  {
    v6 = result;
    v7 = sub_20C21137C(result);
    result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(v7, a2);
    v4 = *v6;
    *a3 = *v6;
    a3[1] = (uint64_t)result;
  }
  else
  {
    *(_OWORD *)a3 = xmmword_20CAC7C50;
    v8 = -1;
  }
  a3[2] = v4;
  a3[3] = v8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasAnyPayloads(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v1;

  if (!*(_QWORD *)this)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)this);
  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::HasPayloads(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v1;

  if (!*(_QWORD *)this)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)this);
  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::IsInstanceable(v1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  void ***v4;
  char *v5;
  _QWORD **v6;
  char *v7;

  *((_QWORD *)this + 4) = 0;
  v4 = (void ***)((char *)this + 32);
  v5 = (char *)this + 8;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)this = *(_QWORD *)a2;
  sub_20BF1DD04((uint64_t *)a2);
  sub_20BF1D8F4((int)this, 0);
  if (this != a2)
    sub_20BE8B37C(v5, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v6 = (_QWORD **)*((_QWORD *)a2 + 4);
  if (v6)
  {
    v7 = (char *)operator new(0x18uLL);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    sub_20C20D4C4(v7, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
    sub_20BF1C150(v4, (void **)v7);
  }
  return this;
}

void sub_20C258AFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void ***v3;
  void *v4;
  void *v5;
  void *v7;

  v5 = v4;
  operator delete(v5);
  sub_20BF1C150(v3, 0);
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::Swap(uint64_t *this, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PrintStatistics(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_PrintPrimIndexStatistics(this, MEMORY[0x24BEDB318]);
}

pxrInternal__aapl__pxrReserved__::PcpNodeRef *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::DumpToDotGraph(pxrInternal__aapl__pxrReserved__ *a1, char *a2, const char *a3, uint64_t a4)
{
  if (a2[23] < 0)
    a2 = *(char **)a2;
  return pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph(a1, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeIteratorAtNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = sub_20C21137C((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexForNode(v4, a2);
  }
  return v2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeSubtreeRange@<X0>(uint64_t *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *this;
  if (*this)
  {
    v6 = this;
    v7 = sub_20C21137C(this);
    this = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForSubtreeRange(v7, a2);
    v4 = *v6;
    *a3 = *v6;
    a3[1] = (uint64_t)this;
  }
  else
  {
    *(_OWORD *)a3 = xmmword_20CAC7C50;
    v8 = -1;
  }
  a3[2] = v4;
  a3[3] = v8;
  return this;
}

double pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRange@<D0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  double result;
  uint64_t v9;
  unint64_t NodeIndexesForRange;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;

  if (!*a1)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a3);
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a3 + 2);
    return result;
  }
  if (a2 == 6)
  {
    v6 = (uint64_t)a1;
    v7 = 0;
  }
  else
  {
    v9 = sub_20C21137C(a1);
    NodeIndexesForRange = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(v9, a2);
    v12 = a1[1];
    v13 = a1[2] - v12;
    v7 = v13 >> 2;
    if (v13)
    {
      v14 = 0;
      if (v7 <= 1)
        v15 = 1;
      else
        v15 = v7;
      v16 = (unsigned __int16 *)(v12 + 4);
      while (1)
      {
        v17 = *(v16 - 2);
        if (NodeIndexesForRange <= v17 && v11 > v17)
          break;
        ++v14;
        v16 += 2;
        if (v15 == v14)
          goto LABEL_15;
      }
      if (v7 <= v14 + 1)
        v22 = v14 + 1;
      else
        v22 = v7;
      v23 = v14;
      while (++v23 < v7)
      {
        v24 = *v16;
        v16 += 2;
        if (v11 <= v24)
          goto LABEL_26;
      }
      v23 = v22;
LABEL_26:
      pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(&v26, (uint64_t)a1, v14);
      v20 = (uint64_t)a1;
      v19 = v23;
      goto LABEL_17;
    }
LABEL_15:
    v6 = (uint64_t)a1;
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(&v26, v6, v7);
  v19 = (a1[2] - a1[1]) >> 2;
  v20 = (uint64_t)a1;
LABEL_17:
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(&v25, v20, v19);
  v21 = v25;
  result = *(double *)&v26;
  *(_OWORD *)a3 = v26;
  *((_OWORD *)a3 + 1) = v21;
  return result;
}

double pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRangeForNode@<D0>(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t Node;
  uint64_t v7;
  double result;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(&v16, (uint64_t)this, 0);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(v15, (uint64_t)this, (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 2);
  while (!pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v16, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)v15))
  {
    Node = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode((uint64_t **)&v16);
    if (v7 == *((_QWORD *)a2 + 1) && *(_QWORD *)a2 == Node)
      break;
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v16);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v16, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)v15))
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a3);
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a3 + 2);
  }
  else
  {
    v14 = v16;
    do
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v14);
      if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v14, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)v15))
      {
        break;
      }
      v10 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode((uint64_t **)&v14);
    }
    while (v11 == *((_QWORD *)a2 + 1) && *(_QWORD *)a2 == v10);
    result = *(double *)&v16;
    v13 = v14;
    *(_OWORD *)a3 = v16;
    *((_OWORD *)a3 + 1) = v13;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeProvidingSpec(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t **v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  uint64_t NodeProvidingSpec;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (uint64_t **)sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v4, &v13);
  v5 = sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v5, &v12);
  NodeProvidingSpec = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeProvidingSpec(a1, &v13, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_20BFD265C(&v12);
  v7 = v14;
  if (v14)
  {
    v8 = (unsigned int *)(v14 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return NodeProvidingSpec;
}

void sub_20C258F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeProvidingSpec(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *LayerStack;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(a1, 6u, &v15);
  v6 = v15;
  v5 = v16;
  v7 = v17;
  if (v15 == v17 && v16 == v18)
    return 0;
  v9 = v18 - 1;
  while (1)
  {
    v10 = v5;
    v14[0] = v6;
    v14[1] = v5;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14))
    {
      if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14) == *a3)
      {
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14);
        v12 = sub_20C1FE500(LayerStack);
        if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v12, a2))
          break;
      }
    }
    v5 = v10 + 1;
    if (v6 == v7 && v9 == v10)
      return 0;
  }
  return v14[0];
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComposeAuthoredVariantSelections@<W0>(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BOOL8 result;
  uint64_t *SiteRef;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  _QWORD *v11;
  char HasField;
  char v13;
  uint64_t *v14;
  void **v15;
  uint64_t v16;
  uint64_t *LayerStack;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  const void ***v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  std::string __p;
  __int128 v33;
  uint64_t v34;
  const void ***v35;
  const void **v36[2];
  uint64_t *v37[2];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  std::type_info *v41;
  __int16 v42;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v4 = *((_QWORD *)v3 + 57);
  v39 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRange((uint64_t *)this, 6u, &v40);
  sub_20C209EB4((uint64_t)v37, &v40);
  while (1)
  {
    result = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)v37, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v38);
    if (result)
      break;
    SiteRef = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpPrimIterator::_GetSiteRef(v37);
    v10 = v9;
    v36[0] = 0;
    v36[1] = 0;
    v35 = v36;
    v11 = (_QWORD *)sub_20C0EEAF8(SiteRef);
    *((_QWORD *)&v40 + 1) = &v35;
    v41 = &stru_24C526848;
    v42 = 0;
    *(_QWORD *)&v40 = &unk_24C52BEE8;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v11, v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v39, (uint64_t (***)(_QWORD, uint64_t))&v40);
    if ((_BYTE)v42)
      v13 = 0;
    else
      v13 = HasField;
    if ((v13 & 1) != 0)
    {
      v14 = (uint64_t *)v35;
      if (v35 != v36)
      {
        while (1)
        {
          v15 = (void **)(v14 + 7);
          if (!pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(v14 + 7))
            goto LABEL_28;
          *(_QWORD *)&v40 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode(v37);
          *((_QWORD *)&v40 + 1) = v16;
          LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v40);
          v40 = 0uLL;
          v41 = 0;
          v18 = *(_QWORD *)(sub_20C1FE500(LayerStack) + 392);
          sub_20BDDC0E4(&__p, "variant");
          sub_20C1034E8(&v30, SiteRef);
          pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression((const std::string *)(v14 + 7), v18, &__p, (uint64_t)&v30, v10, 0, (char **)&v40, (uint64_t)&v33);
          if (*((char *)v14 + 79) < 0)
            operator delete(*v15);
          *(_OWORD *)v15 = v33;
          v14[9] = v34;
          HIBYTE(v34) = 0;
          LOBYTE(v33) = 0;
          v19 = v31;
          if (v31)
          {
            v20 = (unsigned int *)(v31 + 8);
            do
            {
              v21 = __ldxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((_QWORD)v40 == *((_QWORD *)&v40 + 1))
            break;
          v23 = sub_20BE10B80((uint64_t **)&v35, v14);
          sub_20BDDE3E4((uint64_t)(v14 + 4));
          operator delete(v14);
          *(_QWORD *)&v33 = &v40;
          sub_20BDE9EB0((void ***)&v33);
LABEL_33:
          v14 = v23;
          if (v23 == (uint64_t *)v36)
          {
            v26 = v35;
            goto LABEL_36;
          }
        }
        *(_QWORD *)&v33 = &v40;
        sub_20BDE9EB0((void ***)&v33);
LABEL_28:
        v24 = (uint64_t *)v14[1];
        if (v24)
        {
          do
          {
            v23 = v24;
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v23 = (uint64_t *)v14[2];
            v25 = *v23 == (_QWORD)v14;
            v14 = v23;
          }
          while (!v25);
        }
        goto LABEL_33;
      }
      v26 = v36;
LABEL_36:
      sub_20BDEBFE0(a2, (const void **)v26, v36);
    }
    sub_20BDE9D48((uint64_t)&v35, v36[0]);
    sub_20C204F34((uint64_t)v37);
  }
  if ((v39 & 7) != 0)
  {
    v27 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  return result;
}

void sub_20C259374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_20BDE9D48(a11, *(_QWORD **)(a11 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetSelectionAppliedForVariantSet(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  uint64_t v12;
  unsigned __int8 v13;
  size_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  void **p_s1;
  void *__s1;
  size_t __n;
  unsigned __int8 v21;
  __int128 __p;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(a1, 6u, &v25);
  v5 = v25;
  v6 = v26;
  v7 = v27;
  v8 = v28;
  if (v25 == v27 && v26 == v28)
  {
LABEL_29:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  while (1)
  {
    v24[0] = v5;
    v24[1] = v6;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v24);
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(Path))
      goto LABEL_24;
    v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v24);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(v11, (uint64_t)&__s1);
    v12 = v21;
    v13 = v21;
    if ((v21 & 0x80u) == 0)
      v14 = v21;
    else
      v14 = __n;
    v15 = a2[23];
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = *((_QWORD *)a2 + 1);
    if (v14 == v15)
      break;
LABEL_22:
    if (SHIBYTE(v23) < 0)
    {
      operator delete((void *)__p);
      if ((v21 & 0x80) == 0)
        goto LABEL_24;
    }
    else if ((v13 & 0x80) == 0)
    {
      goto LABEL_24;
    }
    operator delete(__s1);
LABEL_24:
    ++v6;
    if (v5 == v7 && v6 == v8)
      goto LABEL_29;
  }
  if (v16 >= 0)
    v17 = a2;
  else
    v17 = *(unsigned __int8 **)a2;
  if (((char)v21 & 0x80000000) == 0)
  {
    if (!v21)
      goto LABEL_30;
    p_s1 = &__s1;
    while (*(unsigned __int8 *)p_s1 == *v17)
    {
      p_s1 = (void **)((char *)p_s1 + 1);
      ++v17;
      if (!--v12)
        goto LABEL_30;
    }
    goto LABEL_22;
  }
  if (memcmp(__s1, v17, __n))
    goto LABEL_22;
LABEL_30:
  if (SHIBYTE(v23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a3, (void *)__p, *((unint64_t *)&__p + 1));
    if (SHIBYTE(v23) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)a3 = __p;
    *(_QWORD *)(a3 + 16) = v23;
  }
  if ((char)v21 < 0)
    operator delete(__s1);
}

void sub_20C2595D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIndexInputs::IsEquivalentTo(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  BOOL v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  __int128 *v17;
  __int128 *v18;
  unsigned __int8 v19;
  __int128 *v20;
  __int128 *v21;
  _BOOL8 result;
  int v23;
  char v24;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a2 + 8);
  if (v4 != v5)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_2549882D0);
    v7 = &qword_2549882B8;
    if ((v6 & 1) == 0)
    {
      v23 = __cxa_guard_acquire(&qword_2549882D0);
      v7 = &qword_2549882B8;
      if (v23)
      {
        qword_2549882C8 = 0;
        qword_2549882C0 = 0;
        qword_2549882B8 = (uint64_t)&qword_2549882C0;
        __cxa_atexit((void (*)(void *))sub_20C26D900, &qword_2549882B8, &dword_20BDBC000);
        __cxa_guard_release(&qword_2549882D0);
        v7 = &qword_2549882B8;
      }
    }
    if (!v4)
      v4 = &qword_2549882B8;
    if (v5)
      v7 = v5;
    if (v4[2] != v7[2])
      return 0;
    v10 = *v4;
    v8 = v4 + 1;
    v9 = (unsigned __int8 *)v10;
    if ((uint64_t *)v10 != v8)
    {
      v11 = (unsigned __int8 *)*v7;
      while ((sub_20C221224((uint64_t)&v24, v9 + 32, v11 + 32) & 1) != 0)
      {
        v12 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
        v13 = v9;
        if (v12)
        {
          do
          {
            v9 = v12;
            v12 = *(unsigned __int8 **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v9 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
            v14 = *(_QWORD *)v9 == (_QWORD)v13;
            v13 = v9;
          }
          while (!v14);
        }
        v15 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = *(unsigned __int8 **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
            v14 = *(_QWORD *)v16 == (_QWORD)v11;
            v11 = v16;
          }
          while (!v14);
        }
        v11 = v16;
        if (v9 == (unsigned __int8 *)v8)
          goto LABEL_22;
      }
      return 0;
    }
  }
LABEL_22:
  v17 = *(__int128 **)(a1 + 16);
  v18 = *(__int128 **)(a2 + 16);
  if (v17 == v18)
    return *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  v19 = atomic_load((unsigned __int8 *)&qword_254988300);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254988300))
  {
    xmmword_2549882D8 = 0u;
    unk_2549882E8 = 0u;
    dword_2549882F8 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_20C26D928, &xmmword_2549882D8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988300);
  }
  v20 = v17 ? v17 : &xmmword_2549882D8;
  v21 = v18 ? v18 : &xmmword_2549882D8;
  result = sub_20C26D92C((uint64_t)v20, v21);
  if (result)
    return *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  return result;
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndexOutputs::Append(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *inserted;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v8;
  int v9;
  int v10;
  uint64_t *Path;
  const char *Text;
  char *v13;
  _QWORD v15[4];
  char v16;
  __int128 v17;

  v17 = *(_OWORD *)(a3 + 8);
  inserted = pxrInternal__aapl__pxrReserved__::PcpNodeRef::InsertChildSubgraph((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v17, (uint64_t *)a2, a3, a4);
  if (inserted && v6 != -1)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)a2);
    if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::HasPayloads(v8))
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetHasPayloads(v17, 1);
    pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::AppendDependencyData((uint64_t *)(a1 + 72), (uint64_t **)(a2 + 72));
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AppendDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a2 + 80));
    sub_20C201A48((uint64_t *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
    sub_20C20DB9C((uint64_t *)(a1 + 40), *(_QWORD *)(a1 + 48), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 4);
    v9 = *(_DWORD *)(a2 + 64);
    if (v9)
    {
      v10 = *(_DWORD *)(a1 + 64);
      if (v10)
      {
        if (v9 != v10)
        {
          v15[0] = "pcp/primIndex.cpp";
          v15[1] = "Append";
          v15[2] = 448;
          v15[3] = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndexOutputs::Append(PcpPrimIndexOutputs &&, cons"
                   "t PcpArc &, PcpErrorBasePtr *)";
          v16 = 0;
          Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)Path);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v15, (pxrInternal__aapl__pxrReserved__ *)"Inconsistent payload states for primIndex <%s> -- parent=%d vs child=%d;"
                                                " taking parent=%d\n",
            v13,
            Text,
            *(unsigned int *)(a1 + 64),
            *(unsigned int *)(a2 + 64),
            *(unsigned int *)(a1 + 64));
        }
      }
      else
      {
        *(_DWORD *)(a1 + 64) = v9;
      }
    }
  }
  return inserted;
}

void sub_20C259950()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "Task::EvalNodeRelocations");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalImpliedRelocations");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeReferences");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodePayload");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeInherits");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalImpliedClasses");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeSpecializes");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalImpliedSpecializes");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 11, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeAncestralVariantSets");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 7, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeAncestralVariantAuthored");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeAncestralVariantFallback");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 9, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeAncestralVariantNoneFound");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 10, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeVariantSets");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 12, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeVariantAuthored");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 13, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeVariantFallback");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 14, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalNodeVariantNoneFound");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 15, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::EvalUnresolvedPrimPathError");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 16, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "Task::None");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D430, 17, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C259F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Pcp_RescanForSpecs(pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, int a3)
{
  int v4;
  uint64_t v6;
  char *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  char HasPrimSpecs;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t *v21;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v22;
  _QWORD *Layers;
  uint64_t v24;
  uint64_t v25;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  char v42;
  void *v43;
  char *v44;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  int v56[3];

  v4 = (int)a2;
  sub_20BEB59B0((uint64_t)&v54, (uint64_t)"Pcp", (uint64_t)"Pcp_RescanForSpecs");
  if (v4)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, (uint64_t *)&v48);
      v52 = v48;
      v53 = v49;
      v50 = v48;
      v51 = v49;
      while ((_QWORD)v50 != (_QWORD)v51 || *((_QWORD *)&v50 + 1) != *((_QWORD *)&v51 + 1))
      {
        v9 = sub_20C25A2D8(&v50, v6, v7);
        v10 = v9[1];
        *(_QWORD *)&v48 = *v9;
        *((_QWORD *)&v48 + 1) = v10;
        *(_QWORD *)&v46 = sub_20C25A358((uint64_t *)&v50, v11, v12);
        *((_QWORD *)&v46 + 1) = v13;
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v46);
        Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v46);
        HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v48, HasPrimSpecs);
        sub_20C25A3DC(&v50);
      }
    }
    goto LABEL_46;
  }
  v46 = 0uLL;
  v47 = 0;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, (uint64_t *)&v48);
  v52 = v48;
  v53 = v49;
  v50 = v48;
  v51 = v49;
  while ((_QWORD)v50 != (_QWORD)v51 || *((_QWORD *)&v50 + 1) != *((_QWORD *)&v51 + 1))
  {
    *(_QWORD *)&v48 = sub_20C25A358((uint64_t *)&v50, v17, v18);
    *((_QWORD *)&v48 + 1) = v20;
    if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v48) & 1) != 0
      || !pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v48))
    {
      v42 = 0;
      if (a3)
        goto LABEL_42;
    }
    else
    {
      v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v48);
      v22 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v21);
      Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v22);
      v24 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v48);
      v25 = Layers[1] - *Layers;
      if (v25)
      {
        v26 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v24;
        v27 = 0;
        v28 = 0;
        v29 = v25 >> 3;
        do
        {
          v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(*Layers + 8 * v27));
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v30, v26))
          {
            sub_20C2601A4(v56, *((unint64_t *)&v48 + 1), v27);
            v31 = v56[0];
            v32 = *((_QWORD *)&v46 + 1);
            if (*((_QWORD *)&v46 + 1) >= (unint64_t)v47)
            {
              v34 = (uint64_t)(*((_QWORD *)&v46 + 1) - v46) >> 2;
              if ((unint64_t)(v34 + 1) >> 62)
                sub_20BDDF694();
              v35 = (uint64_t)&v47[-v46] >> 1;
              if (v35 <= v34 + 1)
                v35 = v34 + 1;
              if ((unint64_t)&v47[-v46] >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              if (v36)
                v37 = (char *)sub_20BDE1330((uint64_t)&v47, v36);
              else
                v37 = 0;
              v38 = &v37[4 * v34];
              *(_DWORD *)v38 = v31;
              v33 = v38 + 4;
              v39 = (char *)*((_QWORD *)&v46 + 1);
              v40 = (char *)v46;
              if (*((_QWORD *)&v46 + 1) != (_QWORD)v46)
              {
                do
                {
                  v41 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *((_DWORD *)v38 - 1) = v41;
                  v38 -= 4;
                }
                while (v39 != v40);
                v39 = (char *)v46;
              }
              *(_QWORD *)&v46 = v38;
              *((_QWORD *)&v46 + 1) = v33;
              v47 = &v37[4 * v36];
              if (v39)
                operator delete(v39);
            }
            else
            {
              **((_DWORD **)&v46 + 1) = v56[0];
              v33 = (_DWORD *)(v32 + 4);
            }
            *((_QWORD *)&v46 + 1) = v33;
            v28 = 1;
          }
          ++v27;
        }
        while (v27 != v29);
      }
      else
      {
        v28 = 0;
      }
      v42 = v28;
      if (a3)
LABEL_42:
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v48, v42);
    }
    sub_20C25A3DC(&v50);
  }
  v43 = (void *)*((_QWORD *)this + 1);
  *(_OWORD *)((char *)this + 8) = v46;
  v44 = (char *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v47;
  *(_QWORD *)&v46 = v43;
  v47 = v44;
  if (v43)
  {
    *((_QWORD *)&v46 + 1) = v43;
    operator delete(v43);
  }
LABEL_46:
  while (v55--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v54);
}

void sub_20C25A27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  sub_20BEB24F4(v10 - 112);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C25A2D8(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;

  if (*result == result[2] && result[1] == result[3])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__::PcpNodeIt"
            "erator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>>::operator->() [T = std::pair<pxrInternal__aapl__"
            "pxrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C25A358(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v6[4];
  char v7;
  int v8;

  result = *a1;
  if (result == a1[2] && a1[1] == a1[3])
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator*";
    v6[2] = 271;
    v6[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__::PcpNodeIt"
            "erator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>>::operator*() [T = std::pair<pxrInternal__aapl__p"
            "xrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = false]";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C25A3D4()
{
  JUMPOUT(0x20C25A384);
}

_QWORD *sub_20C25A3DC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v5[4];
  char v6;

  v2 = a1[1];
  if (*a1 == a1[2] && v2 == a1[3])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator++";
    v5[2] = 250;
    v5[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserve"
            "d__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>>::operator++() [T = std::pair<pxrIn"
            "ternal__aapl__pxrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = false]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    a1[1] = v2 + 1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::_GetSourceArcs<(pxrInternal__aapl__pxrReserved__::PcpArcType)4>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(LayerStack, Path, (uint64_t)a3, a2, 0, 0);
}

void sub_20C25A4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C021740((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::_GetSourceArcs<(pxrInternal__aapl__pxrReserved__::PcpArcType)5>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
  pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(LayerStack, Path, a3, a2, 0, 0);
}

void sub_20C25A548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C021818((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, &v29);
  v2 = v29;
  v3 = v30;
  v4 = v31;
  v5 = v32;
  if (v29 == v31 && v30 == v32)
    return 0;
  while (1)
  {
    v28[0] = v2;
    v28[1] = v3;
    if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v28))
      goto LABEL_54;
    sub_20C26D9A4((uint64_t)v28, 4, &v43);
    if (v44 != v47 || v43 != v46)
    {
      v40 = 0;
      v41 = 0;
      v42 = 0;
      pxrInternal__aapl__pxrReserved__::_GetSourceArcs<(pxrInternal__aapl__pxrReserved__::PcpArcType)4>((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v28, &v40, &v38);
      if (v39 - v38 != v41 - v40)
      {
        v33 = (void **)"pcp/primIndex.cpp";
        v34 = "_NeedToRecomputeDueToAssetPathChange";
        v35 = 4618;
        v36 = "BOOL pxrInternal__aapl__pxrReserved__::_NeedToRecomputeDueToAssetPathChange(const PcpNodeRef &) [RefOrPayl"
              "oad = pxrInternal__aapl__pxrReserved__::PcpArcTypeReference]";
        v37 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v33, "sourceArcs.size() == sourceInfo.size()", 0);
      }
      v7 = v44;
      v8 = v45;
      if (v44 == v47 && v43 == v46)
      {
        v9 = 0;
      }
      else
      {
        v9 = 0;
        v10 = v44;
        do
        {
          ++v9;
          v10 = *(unsigned __int16 *)(v45 + 48 * v10 + 34);
        }
        while (v47 != v10 || v43 != v46);
      }
      v13 = v38;
      v12 = v39;
      if (v9 != 0x6DB6DB6DB6DB6DB7 * ((v39 - v38) >> 3))
      {
LABEL_57:
        v33 = (void **)&v38;
        sub_20C021740(&v33);
        goto LABEL_59;
      }
      if (v39 != v38)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = v13 + v14;
          if (*(char *)(v13 + v14 + 23) < 0)
          {
            if (*(_QWORD *)(v16 + 8))
            {
LABEL_26:
              if (sub_20C26DAB4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v43, v16))
                goto LABEL_57;
              v7 = v44;
              v8 = v45;
              v13 = v38;
              v12 = v39;
            }
          }
          else if (*(_BYTE *)(v13 + v14 + 23))
          {
            goto LABEL_26;
          }
          ++v15;
          v7 = *(unsigned __int16 *)(v8 + 48 * v7 + 34);
          v44 = v7;
          v14 += 56;
        }
        while (v15 < 0x6DB6DB6DB6DB6DB7 * ((v12 - v13) >> 3));
      }
      v33 = (void **)&v38;
      sub_20C021740(&v33);
      v33 = (void **)&v40;
      sub_20C266AD4(&v33);
    }
    sub_20C26D9A4((uint64_t)v28, 5, &v43);
    if (v44 == v47 && v43 == v46)
      goto LABEL_54;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    pxrInternal__aapl__pxrReserved__::_GetSourceArcs<(pxrInternal__aapl__pxrReserved__::PcpArcType)5>((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v28, &v40, &v38);
    if (0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 4) != 0x6DB6DB6DB6DB6DB7 * ((v41 - v40) >> 3))
    {
      v33 = (void **)"pcp/primIndex.cpp";
      v34 = "_NeedToRecomputeDueToAssetPathChange";
      v35 = 4618;
      v36 = "BOOL pxrInternal__aapl__pxrReserved__::_NeedToRecomputeDueToAssetPathChange(const PcpNodeRef &) [RefOrPayloa"
            "d = pxrInternal__aapl__pxrReserved__::PcpArcTypePayload]";
      v37 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v33, "sourceArcs.size() == sourceInfo.size()", 0);
    }
    v17 = v44;
    v18 = v45;
    if (v44 == v47 && v43 == v46)
    {
      v19 = 0;
    }
    else
    {
      v19 = 0;
      v20 = v44;
      do
      {
        ++v19;
        v20 = *(unsigned __int16 *)(v45 + 48 * v20 + 34);
      }
      while (v47 != v20 || v43 != v46);
    }
    v23 = v38;
    v22 = v39;
    if (v19 != 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 4))
      break;
    if (v39 != v38)
    {
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = v23 + v24;
        if (*(char *)(v23 + v24 + 23) < 0)
        {
          if (*(_QWORD *)(v26 + 8))
          {
LABEL_50:
            if (sub_20C26DAB4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v43, v26))
              goto LABEL_58;
            v17 = v44;
            v18 = v45;
            v23 = v38;
            v22 = v39;
          }
        }
        else if (*(_BYTE *)(v23 + v24 + 23))
        {
          goto LABEL_50;
        }
        ++v25;
        v17 = *(unsigned __int16 *)(v18 + 48 * v17 + 34);
        v44 = v17;
        v24 += 48;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 4));
    }
    v33 = (void **)&v38;
    sub_20C021818(&v33);
    v33 = (void **)&v40;
    sub_20C266AD4(&v33);
LABEL_54:
    ++v3;
    if (v2 == v4 && v3 == v5)
      return 0;
  }
LABEL_58:
  v33 = (void **)&v38;
  sub_20C021818(&v33);
LABEL_59:
  v33 = (void **)&v40;
  sub_20C266AD4(&v33);
  return 1;
}

void sub_20C25A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  a15 = (void **)&a20;
  sub_20C021818(&a15);
  a15 = (void **)&a23;
  sub_20C266AD4(&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *Resolver)
{
  pxrInternal__aapl__pxrReserved__ *IsAbsoluteRootOrPrimPath;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v11;
  uint64_t Identifier;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v23;
  uint64_t *Layers;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v28;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  void **v30;
  void **v31;
  uint64_t v32;
  const char *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  const char *Text;
  uint64_t v69;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v70;
  _BOOL4 IsInstanceable;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v72;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  void **v79[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v80;
  int v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  const char *v85;
  _BYTE v86[24];
  _BYTE v87[24];
  int v88;
  int v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  __int128 v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104[2];
  void **v105;
  _BYTE v106[48];
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  sub_20BEB59B0((uint64_t)&v77, (uint64_t)"Pcp", (uint64_t)"PcpComputePrimIndex");
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a1)
    && ((IsAbsoluteRootOrPrimPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a1),
         (IsAbsoluteRootOrPrimPath & 1) != 0)
     || (IsAbsoluteRootOrPrimPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a1),
         (IsAbsoluteRootOrPrimPath & 1) != 0)))
  {
    if (!Resolver)
      Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(IsAbsoluteRootOrPrimPath);
    v11 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a2);
    Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v11);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v106, (pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
    v13 = a2[1];
    if (v13)
    {
      if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
        v13 = *a2;
      else
        v13 = 0;
    }
    *(_QWORD *)&v83 = v13;
    sub_20BF1DD04((uint64_t *)&v83);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v74, &v83, a1);
    sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v83);
    sub_20C25B1D4((uint64_t)&v74, (uint64_t)&v74, 0, 1, 1u, 1, 0, a3, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a4);
    if (*(_BYTE *)(a3 + 96))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a4);
      sub_20C25F948(v14, v15, (char *)&v74, (uint64_t *)(a4 + 88));
    }
    if (!*(_BYTE *)(a3 + 97))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a4);
      v104[0] = v18;
      v104[1] = v16;
      if (!v18 || v16 == -1)
      {
        *(_QWORD *)&v83 = "pcp/primIndex.cpp";
        *((_QWORD *)&v83 + 1) = "_EnforcePermissions";
        v84 = 4435;
        v85 = "void pxrInternal__aapl__pxrReserved__::_EnforcePermissions(PcpPrimIndex *, PcpErrorVector *)";
        v86[0] = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v83, "rootNode", 0);
      }
      v101 = 0;
      v102 = 0;
      v103 = 0;
      sub_20C26C77C(v104, (unint64_t)&v101, v17);
      *(_QWORD *)&v100 = 0;
      *((_QWORD *)&v100 + 1) = -1;
      v96 = v102;
      v97 = v102;
      v98 = v101;
      v99 = v101;
      while (v97 != v99)
      {
        v95 = *(_OWORD *)sub_20C26C8DC((uint64_t)&v96, v19, v20);
        if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v95) & 1) != 0)
        {
          if (!(_QWORD)v100 || *((_QWORD *)&v100 + 1) == -1)
            goto LABEL_85;
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetRestricted((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v95, 1, v21);
          if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v95))
          {
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v95);
            v23 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v23);
            v91 = Layers[1];
            v92 = v91;
            v93 = *Layers;
            v94 = v93;
            while (v92 != v94)
            {
              v27 = (uint64_t *)sub_20C22F36C((uint64_t)&v91, v25, v26);
              v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v27);
              Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v95);
              if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v28, Path))
              {
                pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::New(&v90);
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v95);
                v79[0] = v30;
                v79[1] = v31;
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v79, (uint64_t)&v80);
                pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v83, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v80);
                v32 = v90;
                pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v90 + 16, (uint64_t)&v83);
                sub_20BFD3EBC((int *)(v32 + 96), &v88);
                sub_20BFD3F10((int *)(v32 + 100), &v89);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v89);
                sub_20BFD265C(&v88);
                pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v87);
                v105 = (void **)v86;
                sub_20BDE9EB0(&v105);
                v33 = v85;
                if (v85)
                {
                  v34 = (unsigned int *)(v85 + 8);
                  do
                  {
                    v35 = __ldxr(v34);
                    v36 = v35 - 1;
                  }
                  while (__stlxr(v36, v34));
                  if (!v36)
                    (*(void (**)(const char *))(*(_QWORD *)v33 + 8))(v33);
                }
                v37 = *((_QWORD *)&v83 + 1);
                if (*((_QWORD *)&v83 + 1))
                {
                  v38 = (unsigned int *)(*((_QWORD *)&v83 + 1) + 8);
                  do
                  {
                    v39 = __ldxr(v38);
                    v40 = v39 - 1;
                  }
                  while (__stlxr(v40, v38));
                  if (!v40)
                    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
                sub_20BFD265C(&v81);
                sub_20C2012CC(&v80);
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v95, (uint64_t)&v80);
                pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v83, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v80);
                v41 = v90;
                pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v90 + 104, (uint64_t)&v83);
                sub_20BFD3EBC((int *)(v41 + 184), &v88);
                sub_20BFD3F10((int *)(v41 + 188), &v89);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v89);
                sub_20BFD265C(&v88);
                pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v87);
                v79[0] = (void **)v86;
                sub_20BDE9EB0(v79);
                v42 = v85;
                if (v85)
                {
                  v43 = (unsigned int *)(v85 + 8);
                  do
                  {
                    v44 = __ldxr(v43);
                    v45 = v44 - 1;
                  }
                  while (__stlxr(v45, v43));
                  if (!v45)
                    (*(void (**)(const char *))(*(_QWORD *)v42 + 8))(v42);
                }
                v46 = *((_QWORD *)&v83 + 1);
                if (*((_QWORD *)&v83 + 1))
                {
                  v47 = (unsigned int *)(*((_QWORD *)&v83 + 1) + 8);
                  do
                  {
                    v48 = __ldxr(v47);
                    v49 = v48 - 1;
                  }
                  while (__stlxr(v49, v47));
                  if (!v49)
                    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
                sub_20BFD265C(&v81);
                sub_20C2012CC(&v80);
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v100, (uint64_t)&v80);
                pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v83, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v80);
                v50 = v90;
                pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v90 + 192, (uint64_t)&v83);
                sub_20BFD3EBC((int *)(v50 + 272), &v88);
                sub_20BFD3F10((int *)(v50 + 276), &v89);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v89);
                sub_20BFD265C(&v88);
                pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v87);
                v79[0] = (void **)v86;
                sub_20BDE9EB0(v79);
                v51 = v85;
                if (v85)
                {
                  v52 = (unsigned int *)(v85 + 8);
                  do
                  {
                    v53 = __ldxr(v52);
                    v54 = v53 - 1;
                  }
                  while (__stlxr(v54, v52));
                  if (!v54)
                    (*(void (**)(const char *))(*(_QWORD *)v51 + 8))(v51);
                }
                v55 = *((_QWORD *)&v83 + 1);
                if (*((_QWORD *)&v83 + 1))
                {
                  v56 = (unsigned int *)(*((_QWORD *)&v83 + 1) + 8);
                  do
                  {
                    v57 = __ldxr(v56);
                    v58 = v57 - 1;
                  }
                  while (__stlxr(v58, v56));
                  if (!v58)
                    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
                sub_20BFD265C(&v81);
                sub_20C2012CC(&v80);
                v83 = v90;
                if (*((_QWORD *)&v90 + 1))
                {
                  v59 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
                  do
                    v60 = __ldxr(v59);
                  while (__stxr(v60 + 1, v59));
                }
                sub_20C264D7C(&v83, a4, (char **)(a4 + 40));
                v61 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
                if (*((_QWORD *)&v83 + 1))
                {
                  v62 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                v64 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
                if (*((_QWORD *)&v90 + 1))
                {
                  v65 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                break;
              }
              sub_20C22F508((uint64_t)&v91);
            }
          }
          if (!(_QWORD)v100 || *((_QWORD *)&v100 + 1) == -1)
          {
LABEL_85:
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v95))
              v100 = v95;
          }
        }
        sub_20C26C95C((uint64_t)&v96);
      }
      if (v101)
      {
        v102 = v101;
        operator delete(v101);
      }
    }
    v69 = sub_20C21137C((uint64_t *)a4);
    IsInstanceable = pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexIsInstanceable((pxrInternal__aapl__pxrReserved__ *)a4, v70);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetIsInstanceable(v69, IsInstanceable);
    v72 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)a4);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::Finalize(v72);
    pxrInternal__aapl__pxrReserved__::Pcp_RescanForSpecs((pxrInternal__aapl__pxrReserved__ *)a4, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)*(unsigned __int8 *)(a3 + 97), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
    sub_20BFD265C(&v75);
    sub_20C2012CC(&v74);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v106);
  }
  else
  {
    *(_QWORD *)&v83 = "pcp/primIndex.cpp";
    *((_QWORD *)&v83 + 1) = "PcpComputePrimIndex";
    v84 = 5132;
    v85 = "void pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex(const SdfPath &, const PcpLayerStackPtr &, const Pc"
          "pPrimIndexInputs &, PcpPrimIndexOutputs *, ArResolver *)";
    v86[0] = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v83, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be an absolute path to a prim, a prim variant-selection, or the pseudo-root.", Text);
  }
  while (v78--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v77);
}

void sub_20C25B0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v6 = *(void **)(v4 - 200);
  if (v6)
  {
    *(_QWORD *)(v4 - 192) = v6;
    operator delete(v6);
  }
  sub_20C20ACC8((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v4 - 152));
  sub_20BEB24F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C25B1D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a9)
{
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v18;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  uint64_t *v22;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  char v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v26;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  uint64_t *LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  char HasPrimSpecs;
  uint64_t result;
  _BOOL4 IsEquivalentTo;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  pxrInternal__aapl__pxrReserved__::PcpCache *v42;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v43;
  int IsInstanceable;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v45;
  BOOL v46;
  std::string::size_type v47;
  const char *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  char *v51;
  uint64_t v52;
  char *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  uint64_t v56;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v57;
  const char *Text;
  const char *v59;
  char *v60;
  char *v61;
  void *v62;
  void *v63;
  const char *v64;
  const char *v65;
  char *v66;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  char *v71;
  void *v72;
  void *v73;
  uint64_t *v74;
  uint64_t *v75;
  __int128 v76;
  uint64_t v77;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  void **v86;
  __int128 v87;
  void **v88;
  uint64_t *v89;
  __int128 v90;
  void **v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t *v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  int *v111;
  int v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v118;
  uint64_t *v119;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v120;
  uint64_t IncrementalRelocatesTargetToSource;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  pxrInternal__aapl__pxrReserved__::SdfPath *v126;
  uint64_t v127;
  void *v128;
  char **v129;
  int ArcType;
  const char *v131;
  char *v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  const char *v136;
  const char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 *v144;
  __int128 *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v150;
  pxrInternal__aapl__pxrReserved__ **v151;
  pxrInternal__aapl__pxrReserved__ *v152;
  uint64_t v153;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v154;
  void **v155;
  uint64_t v156;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v157;
  const char *v158;
  std::string *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  const char *v164;
  void **v165;
  void *v166;
  std::string::size_type n;
  const char *v168;
  std::string::size_type size;
  uint64_t v171;
  void *v172;
  void *v173;
  __int128 *v174;
  void **v175;
  _DWORD *v176;
  void ***v177;
  void **v178;
  void **v179;
  char v180;
  int v181;
  std::string::size_type v182;
  unsigned int v183;
  uint64_t *v184;
  pxrInternal__aapl__pxrReserved__::SdfPath *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  __int128 *j;
  __int128 *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  pxrInternal__aapl__pxrReserved__ **v197;
  const char *v198;
  char *v199;
  uint64_t ParentNode;
  uint64_t v201;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v202;
  pxrInternal__aapl__pxrReserved__::SdfPath *v203;
  uint64_t v204;
  uint64_t v205;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v207;
  const char *v208;
  char *v209;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  void *v214;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v215;
  uint64_t **v216;
  uint64_t *v217;
  pxrInternal__aapl__pxrReserved__::SdfPath *v218;
  pxrInternal__aapl__pxrReserved__::SdfPath *v219;
  unint64_t SpecContributionRestrictedDepth;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v221;
  char v222;
  uint64_t *v223;
  pxrInternal__aapl__pxrReserved__::SdfPath *v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  __int128 *k;
  __int128 *v232;
  uint64_t *v233;
  pxrInternal__aapl__pxrReserved__::SdfPath *v234;
  void **v235;
  void *v236;
  std::string::size_type v237;
  const char *v238;
  BOOL v239;
  int *v240;
  unint64_t v241;
  int v242;
  uint64_t *v243;
  int v244;
  std::string::size_type v245;
  unsigned int v246;
  uint64_t *v247;
  int v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int v254;
  __int128 *m;
  __int128 *v256;
  const char *v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v263;
  uint64_t *v264;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v265;
  uint64_t *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int v272;
  void *v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  char *v278;
  uint64_t *v279;
  uint64_t v280;
  char *v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  int v296;
  int v297;
  pxrInternal__aapl__pxrReserved__ **v298;
  pxrInternal__aapl__pxrReserved__ *v299;
  const char *v300;
  const char *v301;
  pxrInternal__aapl__pxrReserved__ **v302;
  pxrInternal__aapl__pxrReserved__ *v303;
  __int128 *v304;
  std::string *v305;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v306;
  const char *v307;
  void **v308;
  uint64_t v309;
  std::string::size_type v310;
  __int128 *v311;
  uint64_t v312;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v313;
  const char *v314;
  char *v315;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  unsigned int v322;
  unsigned int v323;
  void *v324;
  unsigned int *v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int *v331;
  unsigned int v332;
  unsigned int v333;
  void *v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int v337;
  std::string::size_type v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t *v342;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  const char *v347;
  char *v348;
  uint64_t *v349;
  int v350;
  int v351;
  _BYTE *v353;
  std::string::size_type v354;
  const char *v355;
  int v356;
  uint64_t *v357;
  int SiblingNumAtOrigin;
  std::string::size_type v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int *v363;
  unsigned int v364;
  char *v365;
  uint64_t v366;
  unsigned int *v367;
  unsigned int *v368;
  unsigned int v369;
  unsigned int v370;
  int v371;
  __int128 v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  const char *v381;
  pxrInternal__aapl__pxrReserved__ **v382;
  pxrInternal__aapl__pxrReserved__::SdfPath *v383;
  pxrInternal__aapl__pxrReserved__::SdfPath *v384;
  BOOL v385;
  void *v386;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v387;
  uint64_t Identifier;
  unsigned int *v389;
  unsigned int *v390;
  unsigned int v391;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v392;
  uint64_t v393;
  char *v394;
  _QWORD *v395;
  uint64_t v396;
  char *v397;
  unsigned __int8 v398;
  uint64_t *v399;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  std::string::size_type v405;
  const void **v406;
  std::string *v407;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v408;
  uint64_t v409;
  unsigned int *v410;
  unsigned int v411;
  unint64_t *v412;
  _QWORD *v413;
  int v414;
  const char *v415;
  char *v416;
  __int128 v417;
  uint64_t v418;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v419;
  const char *v420;
  char *v421;
  _BOOL4 v422;
  void *v423;
  unsigned int *v424;
  unsigned int v425;
  unsigned int v426;
  const char *v427;
  uint64_t *v428;
  uint64_t v429;
  __int128 *v430;
  uint64_t v431;
  const char *v432;
  char *v433;
  std::string *v434;
  uint64_t *v435;
  uint64_t v436;
  __int128 *v437;
  uint64_t v438;
  const char *v439;
  char *v440;
  std::string *v441;
  const char *v442;
  const char *v443;
  char *v444;
  char *v445;
  uint64_t *v446;
  uint64_t v447;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v448;
  const char *v449;
  char *v450;
  std::string *v451;
  uint64_t *v452;
  uint64_t v453;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v454;
  const char *v455;
  char *v456;
  std::string *v457;
  uint64_t *v458;
  uint64_t v459;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v460;
  const char *v461;
  char *v462;
  std::string *v463;
  uint64_t *v464;
  uint64_t v465;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v466;
  const char *v467;
  char *v468;
  std::string *v469;
  uint64_t *v470;
  uint64_t v471;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v472;
  const char *v473;
  char *v474;
  std::string *v475;
  uint64_t *v476;
  uint64_t v477;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v478;
  const char *v479;
  char *v480;
  std::string *v481;
  uint64_t *v482;
  uint64_t v483;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v484;
  const char *v485;
  char *v486;
  std::string *v487;
  uint64_t *v488;
  uint64_t v489;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v490;
  const char *v491;
  char *v492;
  std::string *v493;
  uint64_t *v494;
  uint64_t v495;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v496;
  const char *v497;
  char *v498;
  std::string *v499;
  pxrInternal__aapl__pxrReserved__ **v500;
  pxrInternal__aapl__pxrReserved__ *v501;
  __int128 *v502;
  void *p_OriginNode;
  pxrInternal__aapl__pxrReserved__ **v504;
  pxrInternal__aapl__pxrReserved__ *v505;
  __int128 *v506;
  pxrInternal__aapl__pxrReserved__ **v507;
  pxrInternal__aapl__pxrReserved__::SdfPath *v508;
  pxrInternal__aapl__pxrReserved__ *v509;
  const char *v510;
  const char *v511;
  const char *v512;
  pxrInternal__aapl__pxrReserved__ **v513;
  pxrInternal__aapl__pxrReserved__ *v514;
  __int128 *v515;
  std::string *v516;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v517;
  const char *v518;
  void **v519;
  pxrInternal__aapl__pxrReserved__ **v520;
  pxrInternal__aapl__pxrReserved__ *v521;
  __int128 *v522;
  pxrInternal__aapl__pxrReserved__ **v523;
  pxrInternal__aapl__pxrReserved__ **v524;
  pxrInternal__aapl__pxrReserved__ *v525;
  pxrInternal__aapl__pxrReserved__::SdfPath *v526;
  const char *v527;
  const char *v528;
  uint64_t *v529;
  uint64_t v530;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v531;
  const char *v532;
  char *v533;
  std::string *v534;
  uint64_t *v535;
  uint64_t v536;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v537;
  int v538;
  std::string::size_type v539;
  const char *v540;
  const char *v541;
  char *v542;
  std::string *v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *Name;
  const char *v550;
  char *v551;
  uint64_t v552;
  _BYTE v554[24];
  __int128 v555;
  uint64_t v556;
  int v557;
  int v558[3];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v559;
  int v560;
  int v561;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v562;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v563;
  void *__s1[2];
  _BYTE v565[24];
  uint64_t v566;
  int v567[8];
  int v568;
  int v569;
  int v570;
  int v571;
  __int128 v572;
  std::string v573;
  void *OriginNode;
  uint64_t v575;
  unsigned __int8 v576;
  uint64_t *v577;
  char *v578[2];
  uint64_t v579;
  void **p_i;
  __int128 v581;
  __int128 i;
  _QWORD v583[2];
  std::string v584;
  const char *v585;
  char v586;
  void **v587;
  uint64_t v588;
  __int128 v589;
  uint64_t v590;
  std::string v591;
  const char *v592;
  uint64_t v593;
  std::string::size_type v594;
  uint64_t *v595;
  uint64_t *v596;
  void *__p;
  _BYTE v598[24];
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  char v602;
  _BYTE v603[56];
  __int128 v604;
  uint64_t v605;
  uint64_t v606;

  v606 = *MEMORY[0x24BDAC8D0];
  v16 = a9;
  if (a7)
    v16 = *(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(a7 + 48);
  v562 = 0;
  v563 = 0;
  if (sub_20C1FE3D8(2))
  {
    v562 = a9;
    v563 = v16;
    pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PushIndex(&v562, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)a1);
  }
  v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8))
    && (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8))
     || (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)) & 1) != 0))
  {
    goto LABEL_8;
  }
  v591.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/primIndex.cpp";
  v591.__r_.__value_.__l.__size_ = (std::string::size_type)"Pcp_BuildPrimIndex";
  v591.__r_.__value_.__r.__words[2] = 4998;
  v592 = "void pxrInternal__aapl__pxrReserved__::Pcp_BuildPrimIndex(const PcpLayerStackSite &, const PcpLayerStackSite &,"
         " int, BOOL, BOOL, BOOL, PcpPrimIndex_StackFrame *, const PcpPrimIndexInputs &, PcpPrimIndexOutputs *)";
  LOBYTE(v593) = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
  v61 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s", v59, v60, Text);
  result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v591, "site.path.IsAbsolutePath() && (site.path.IsAbsoluteRootOrPrimPath() || site.path.IsPrimVariantSelectionPath())", v61);
  if ((result & 1) != 0)
  {
LABEL_8:
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)*(unsigned __int8 *)(a8 + 97), (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v591);
      v26 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a9;
      *(_QWORD *)a9 = v591.__r_.__value_.__r.__words[0];
      sub_20BF1DD04((uint64_t *)&v591);
      sub_20BF1D8F4((int)a9, v26);
      sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v591);
      v27 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)a9);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v27);
      v591.__r_.__value_.__r.__words[0] = v28;
      v591.__r_.__value_.__l.__size_ = v29;
      LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v591);
      Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v591);
      HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v591, HasPrimSpecs);
      goto LABEL_763;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)*(unsigned __int8 *)(a8 + 97), (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v591);
      v18 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a9;
      *(_QWORD *)a9 = v591.__r_.__value_.__r.__words[0];
      sub_20BF1DD04((uint64_t *)&v591);
      sub_20BF1D8F4((int)a9, v18);
      sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v591);
      v19 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)a9);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v19);
      v591.__r_.__value_.__r.__words[0] = v20;
      v591.__r_.__value_.__l.__size_ = v21;
      v22 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v591);
      v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v591);
      v24 = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(v22, v23);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v591, v24);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v591, a6 ^ 1, v25);
LABEL_47:
      v559 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a2;
      sub_20BF1DD04((uint64_t *)&v559);
      sub_20BFD6E54(&v560, (_DWORD *)(a2 + 8));
      sub_20BFD6EA4(&v561, (_DWORD *)(a2 + 12));
      sub_20C2605B8((uint64_t)&v591, a8, (uint64_t)a9, (uint64_t)&v559, a3, a7, a4, a5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v561);
      sub_20BFD265C(&v560);
      sub_20C2012CC(&v559);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a9);
      __s1[0] = v72;
      __s1[1] = v73;
      sub_20C2609F0((uint64_t)&v591, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__s1, 0, 0, 0, 0, *((unsigned __int8 *)v592 + 97));
      while (2)
      {
        *(_OWORD *)v554 = 0x11uLL;
        *(_QWORD *)&v554[16] = -1;
        v556 = 0;
        v555 = 0uLL;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v557);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v558);
        v74 = v595;
        v75 = v596;
        if (v595 != v596)
        {
          if ((char *)v596 - (char *)v595 >= 57)
          {
            v76 = *(_OWORD *)v595;
            *(_QWORD *)v565 = v595[2];
            *(_OWORD *)__s1 = v76;
            v77 = v595[5];
            *(_OWORD *)&v565[8] = *(_OWORD *)(v595 + 3);
            v566 = v77;
            v595[4] = 0;
            v74[5] = 0;
            v74[3] = 0;
            v567[0] = *((_DWORD *)v74 + 12);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v74 + 12);
            v567[1] = *((_DWORD *)v74 + 13);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v74 + 13);
            v79 = 0;
            v80 = 0x6DB6DB6DB6DB6DB7 * (v75 - v74);
            v81 = v74;
            do
            {
              v82 = (uint64_t)&v81[7 * v79 + 7];
              v83 = 2 * v79;
              v79 = (2 * v79) | 1;
              v84 = v83 + 2;
              if (v83 + 2 < v80 && sub_20C2620CC((int *)v82, v82 + 56, v78))
              {
                v82 += 56;
                v79 = v84;
              }
              v85 = *(_OWORD *)v82;
              v81[2] = *(_QWORD *)(v82 + 16);
              *(_OWORD *)v81 = v85;
              v86 = (void **)(v81 + 3);
              if (*((char *)v81 + 47) < 0)
                operator delete(*v86);
              v87 = *(_OWORD *)(v82 + 24);
              v81[5] = *(_QWORD *)(v82 + 40);
              *(_OWORD *)v86 = v87;
              *(_BYTE *)(v82 + 47) = 0;
              *(_BYTE *)(v82 + 24) = 0;
              sub_20BFD3EBC((int *)v81 + 12, (int *)(v82 + 48));
              sub_20BFD3F10((int *)v81 + 13, (int *)(v82 + 52));
              v81 = (_QWORD *)v82;
            }
            while (v79 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
            v88 = (void **)(v82 + 24);
            v89 = v75 - 7;
            if ((uint64_t *)v82 == v75 - 7)
            {
              v95 = *(_OWORD *)__s1;
              *(_QWORD *)(v82 + 16) = *(_QWORD *)v565;
              *(_OWORD *)v82 = v95;
              if (*(char *)(v82 + 47) < 0)
                operator delete(*v88);
              v96 = *(_OWORD *)&v565[8];
              *(_QWORD *)(v82 + 40) = v566;
              *(_OWORD *)v88 = v96;
              HIBYTE(v566) = 0;
              v565[8] = 0;
              sub_20BFD3EBC((int *)(v82 + 48), v567);
              sub_20BFD3F10((int *)(v82 + 52), &v567[1]);
            }
            else
            {
              v90 = *(_OWORD *)v89;
              *(_QWORD *)(v82 + 16) = *(v75 - 5);
              *(_OWORD *)v82 = v90;
              if (*(char *)(v82 + 47) < 0)
                operator delete(*v88);
              v91 = (void **)(v75 - 4);
              v92 = *((_OWORD *)v75 - 2);
              *(_QWORD *)(v82 + 40) = *(v75 - 2);
              *(_OWORD *)v88 = v92;
              *((_BYTE *)v75 - 9) = 0;
              *((_BYTE *)v75 - 32) = 0;
              sub_20BFD3EBC((int *)(v82 + 48), (int *)v75 - 2);
              sub_20BFD3F10((int *)(v82 + 52), (int *)v75 - 1);
              v93 = *(_QWORD *)v565;
              *(_OWORD *)v89 = *(_OWORD *)__s1;
              *(v75 - 5) = v93;
              if (*((char *)v75 - 9) < 0)
                operator delete(*v91);
              v94 = *(_OWORD *)&v565[8];
              *(v75 - 2) = v566;
              *(_OWORD *)v91 = v94;
              HIBYTE(v566) = 0;
              v565[8] = 0;
              sub_20BFD3EBC((int *)v75 - 2, v567);
              sub_20BFD3F10((int *)v75 - 1, &v567[1]);
              sub_20C261ED4((uint64_t)v74, v82 + 56, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(0x6DB6DB6DB6DB6DB7* ((v82 + 56 - (uint64_t)v74) >> 3)));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v567[1]);
            sub_20BFD265C(v567);
            if (SHIBYTE(v566) < 0)
              operator delete(*(void **)&v565[8]);
            v75 = v596;
          }
          v97 = *(_OWORD *)(v75 - 7);
          *(_QWORD *)&v554[16] = *(v75 - 5);
          *(_OWORD *)v554 = v97;
          if (SHIBYTE(v556) < 0)
            operator delete((void *)v555);
          v98 = *((_OWORD *)v75 - 2);
          v556 = *(v75 - 2);
          v555 = v98;
          *((_BYTE *)v75 - 9) = 0;
          *((_BYTE *)v75 - 32) = 0;
          sub_20BFD3EBC(&v557, (int *)v75 - 2);
          sub_20BFD3F10(v558, (int *)v75 - 1);
          v99 = v596 - 7;
          sub_20C2609A8((uint64_t)(v596 - 7));
          v596 = v99;
          v100 = *(_DWORD *)v554;
          if (*(_DWORD *)v554 != 11 && *(_DWORD *)v554 != 5)
            goto LABEL_84;
          v101 = sub_20C261A2C((unsigned int *)v554);
          v102 = (unint64_t)__p;
          v103 = v599;
          v104 = (unint64_t)__p & v101;
          if ((*(__int16 *)(v599 + (((unint64_t)__p & v101) << 6) + 4) & 0x80000000) == 0)
          {
            LOWORD(v105) = 0;
            while (!sub_20C261AB0(v103 + (v104 << 6) + 8, (uint64_t)v554))
            {
              v105 = (__int16)(v105 + 1);
              v104 = (v104 + 1) & v102;
              if (v105 > *(__int16 *)(v103 + (v104 << 6) + 4))
                goto LABEL_83;
            }
            if (v104 != v600)
            {
              v106 = v103 + (v104 << 6);
              sub_20C260954(v106);
              --v601;
              v107 = v599;
              v108 = (v106 - v599) >> 6;
              v109 = (v108 + 1) & (unint64_t)__p;
              v110 = *(__int16 *)(v599 + (v109 << 6) + 4);
              if (v110 >= 1)
              {
                do
                {
                  v111 = (int *)(v107 + (v109 << 6));
                  v112 = *v111;
                  v113 = *((_QWORD *)v111 + 3);
                  v114 = v110 - 1;
                  v115 = v107 + (v108 << 6);
                  *(_OWORD *)(v115 + 8) = *(_OWORD *)(v111 + 2);
                  *(_QWORD *)(v115 + 24) = v113;
                  v116 = *((_QWORD *)v111 + 6);
                  *(_OWORD *)(v115 + 32) = *((_OWORD *)v111 + 2);
                  *(_QWORD *)(v115 + 48) = v116;
                  *((_QWORD *)v111 + 5) = 0;
                  *((_QWORD *)v111 + 6) = 0;
                  *((_QWORD *)v111 + 4) = 0;
                  sub_20BFD38A4((_DWORD *)(v115 + 56), v111 + 14);
                  sub_20BFD38DC((_DWORD *)(v115 + 60), v111 + 15);
                  *(_DWORD *)v115 = v112;
                  *(_WORD *)(v115 + 4) = v114;
                  sub_20C260954(v599 + (v109 << 6));
                  v107 = v599;
                  v108 = v109;
                  v109 = (unint64_t)__p & (v109 + 1);
                  v110 = *(__int16 *)(v599 + (v109 << 6) + 4);
                }
                while (v110 > 0);
              }
              v602 = 1;
            }
          }
        }
LABEL_83:
        v100 = *(_DWORD *)v554;
LABEL_84:
        v117 = 1;
        switch(v100)
        {
          case 0:
            if (sub_20C1FE3D8(2))
            {
              v452 = &v593;
              if (v594)
                v452 = (uint64_t *)(v594 + 48);
              v453 = *v452;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v604);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v604, v454);
              v457 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v457 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating relocations under %s", v455, v456, v457);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v573, v453, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v604 + 3);
              sub_20BFD265C((_DWORD *)&v604 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v604);
            }
            else
            {
              v573.__r_.__value_.__r.__words[0] = 0;
            }
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]) & 1) == 0
              && !pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], v118))
            {
              goto LABEL_429;
            }
            v119 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            v120 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v119);
            IncrementalRelocatesTargetToSource = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesTargetToSource(v120);
            v122 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            v123 = sub_20BFE4AF0(IncrementalRelocatesTargetToSource, v122);
            if ((_QWORD *)(IncrementalRelocatesTargetToSource + 8) == v123)
              goto LABEL_429;
            v126 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v123 + 36);
            if (sub_20C1FE3D8(2))
            {
              v507 = (pxrInternal__aapl__pxrReserved__ **)&v593;
              if (v594)
                v507 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
              v508 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v123 + 28);
              v509 = *v507;
              v510 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v508);
              v511 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v126);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v509, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"<%s> was relocated from source <%s>", v512, v510, v511);
            }
            *(_OWORD *)v567 = *(_OWORD *)&v554[8];
            v127 = **(_QWORD **)(*(_QWORD *)&v554[8] + 16);
            v128 = (void *)*(unsigned __int16 *)(v127 + 48 * *(_QWORD *)&v554[16] + 28);
            __s1[0] = *(void **)&v554[8];
            __s1[1] = v128;
            *(_QWORD *)v565 = v127;
            *(_QWORD *)&v565[8] = *(_QWORD *)&v554[8];
            *(_QWORD *)&v565[16] = 0xFFFFLL;
            v566 = v127;
            while (1)
            {
              if (__s1[1] == *(void **)&v565[16] && __s1[0] == *(void **)&v565[8])
              {
                pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v587);
                v259 = *(_QWORD *)&v554[8];
                v260 = *(_QWORD *)&v554[16];
                v261 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
                pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(__s1, v261, v126);
                *(_QWORD *)&v604 = sub_20C2623F4((uint64_t)&v591, 3u, v259, v260, &v554[8], __s1, (uint64_t *)&v587, 0, 256);
                *((_QWORD *)&v604 + 1) = v262;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__s1[1] + 1);
                sub_20BFD265C(&__s1[1]);
                sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__s1);
                if ((_QWORD)v604 && *((_QWORD *)&v604 + 1) != -1)
                {
                  memset(&v584, 0, sizeof(v584));
                  v264 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
                  v265 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
                  pxrInternal__aapl__pxrReserved__::PcpComposeSitePrimSites(v264, v265, (uint64_t *)&v584);
                  for (i = *(_OWORD *)&v584.__r_.__value_.__l.__data_; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C2624FC(&i))
                  {
                    pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::New(&v589);
                    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v554[8]);
                    v577 = v266;
                    v578[0] = v267;
                    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v577, (uint64_t)&p_i);
                    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__s1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&p_i);
                    v268 = v589;
                    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v589 + 16, (uint64_t)__s1);
                    sub_20BFD3EBC((int *)(v268 + 96), &v568);
                    sub_20BFD3F10((int *)(v268 + 100), &v569);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v569);
                    sub_20BFD265C(&v568);
                    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v567[2]);
                    OriginNode = &v565[16];
                    sub_20BDE9EB0((void ***)&OriginNode);
                    v269 = *(_QWORD *)&v565[8];
                    if (*(_QWORD *)&v565[8])
                    {
                      v270 = (unsigned int *)(*(_QWORD *)&v565[8] + 8);
                      do
                      {
                        v271 = __ldxr(v270);
                        v272 = v271 - 1;
                      }
                      while (__stlxr(v272, v270));
                      if (!v272)
                        (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
                    }
                    v273 = __s1[1];
                    if (__s1[1])
                    {
                      v274 = (unsigned int *)((char *)__s1[1] + 8);
                      do
                      {
                        v275 = __ldxr(v274);
                        v276 = v275 - 1;
                      }
                      while (__stlxr(v276, v274));
                      if (!v276)
                        (*(void (**)(void *))(*(_QWORD *)v273 + 8))(v273);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v581 + 1);
                    sub_20BFD265C(&v581);
                    sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&p_i);
                    v279 = sub_20C262484(&i, v277, v278);
                    sub_20BF2D298(v589 + 104, *v279);
                    v282 = sub_20C262484(&i, v280, v281);
                    v283 = *v282;
                    v284 = v589;
                    sub_20C01A074((int *)(v589 + 120), (_DWORD *)(*v282 + 16));
                    sub_20C01A0C8((int *)(v284 + 124), (_DWORD *)(v283 + 20));
                    *(_OWORD *)__s1 = v589;
                    if (*((_QWORD *)&v589 + 1))
                    {
                      v285 = (unint64_t *)(*((_QWORD *)&v589 + 1) + 8);
                      do
                        v286 = __ldxr(v285);
                      while (__stxr(v286 + 1, v285));
                    }
                    sub_20C264D7C((__int128 *)__s1, v593, (char **)(v593 + 40));
                    v287 = (std::__shared_weak_count *)__s1[1];
                    if (__s1[1])
                    {
                      v288 = (unint64_t *)((char *)__s1[1] + 8);
                      do
                        v289 = __ldaxr(v288);
                      while (__stlxr(v289 - 1, v288));
                      if (!v289)
                      {
                        ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                        std::__shared_weak_count::__release_weak(v287);
                      }
                    }
                    v290 = (std::__shared_weak_count *)*((_QWORD *)&v589 + 1);
                    if (*((_QWORD *)&v589 + 1))
                    {
                      v291 = (unint64_t *)(*((_QWORD *)&v589 + 1) + 8);
                      do
                        v292 = __ldaxr(v291);
                      while (__stlxr(v292 - 1, v291));
                      if (!v292)
                      {
                        ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                        std::__shared_weak_count::__release_weak(v290);
                      }
                    }
                  }
                  sub_20C262578(&v591, v604, *((char **)&v604 + 1));
                  __s1[0] = &v584;
                  sub_20C255BC0((void ***)__s1);
                }
                sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v587, v263);
LABEL_429:
                if (!v573.__r_.__value_.__r.__words[0])
                  goto LABEL_580;
                goto LABEL_430;
              }
              v129 = (char **)sub_20C20495C(__s1, v124, v125);
              ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v129);
              if (!ArcType)
                goto LABEL_97;
              if (ArcType == 2)
                goto LABEL_99;
              if (ArcType != 7)
              {
                sub_20C26232C((uint64_t)&v591, (uint64_t)*v129, v129[1]);
                if (sub_20C1FE3D8(2))
                {
                  v134 = &v593;
                  if (v594)
                    v134 = (uint64_t *)(v594 + 48);
                  v135 = *v134;
                  v136 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v126);
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Elided subtree that will be superceded by relocation source <%s>", v137, v138, v136);
                  pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(v135, (__int128 *)v129, &v584);
                  if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v584.__r_.__value_.__l.__data_);
                }
              }
              else
              {
LABEL_97:
                v584.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/primIndex.cpp";
                v584.__r_.__value_.__l.__size_ = (std::string::size_type)"_EvalNodeRelocations";
                v584.__r_.__value_.__r.__words[2] = 2627;
                v585 = "void pxrInternal__aapl__pxrReserved__::_EvalNodeRelocations(const PcpNodeRef &, Pcp_PrimIndexer *)";
                v586 = 0;
                v133 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected child node encountered", v131, v132);
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v584, "false", v133);
              }
LABEL_99:
              sub_20C2049E8(__s1);
            }
          case 1:
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]) != 3
              || (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]) & 1) != 0)
            {
              goto LABEL_581;
            }
            if (sub_20C1FE3D8(2))
            {
              v529 = &v593;
              if (v594)
                v529 = (uint64_t *)(v594 + 48);
              v530 = *v529;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v604);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v604, v531);
              v534 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v534 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating relocations implied by %s", v532, v533, v534);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&p_i, v530, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v604 + 3);
              sub_20BFD265C((_DWORD *)&v604 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v604);
            }
            else
            {
              p_i = 0;
            }
            *(_QWORD *)&v604 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            *((_QWORD *)&v604 + 1) = v204;
            if (!(_QWORD)v604)
              goto LABEL_557;
            if (v204 == -1)
              goto LABEL_557;
            *(_QWORD *)&i = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
            *((_QWORD *)&i + 1) = v205;
            if (!(_QWORD)i || v205 == -1)
              goto LABEL_557;
            MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
            v207 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            v210 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v208, v209);
            pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v210, v207, &v577);
            if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v577))
            {
              if (sub_20C1FE3D8(2))
              {
                v535 = &v593;
                if (v594)
                  v535 = (uint64_t *)(v594 + 48);
                v536 = *v535;
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v589);
                pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v589, v537);
                v538 = SHIBYTE(v584.__r_.__value_.__r.__words[2]);
                v539 = v584.__r_.__value_.__r.__words[0];
                v540 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v577);
                v543 = &v584;
                if (v538 < 0)
                  v543 = (std::string *)v539;
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Propagating relocate from %s to %s", v541, v542, v543, v540);
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&OriginNode, v536, &v554[8], __s1);
                if ((v565[7] & 0x80000000) != 0)
                  operator delete(__s1[0]);
                if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v584.__r_.__value_.__l.__data_);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v589 + 3);
                sub_20BFD265C((_DWORD *)&v589 + 2);
                sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v589);
              }
              else
              {
                OriginNode = 0;
              }
              *(_OWORD *)v567 = i;
              v213 = **(_QWORD **)(i + 16);
              v214 = (void *)*(unsigned __int16 *)(v213 + 48 * *((_QWORD *)&i + 1) + 28);
              __s1[0] = (void *)i;
              __s1[1] = v214;
              *(_QWORD *)v565 = v213;
              *(_QWORD *)&v565[8] = i;
              *(_QWORD *)&v565[16] = 0xFFFFLL;
              v566 = v213;
              while (__s1[1] != *(void **)&v565[16] || __s1[0] != *(void **)&v565[8])
              {
                v215 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(__s1, v211, v212);
                v216 = (uint64_t **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(v215);
                if (*v216 == v577 && pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v215) == 3)
                {
                  if (sub_20C1FE3D8(2))
                  {
                    v546 = &v593;
                    if (v594)
                      v546 = (uint64_t *)(v594 + 48);
                    v547 = *v546;
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Relocate already exists -- skipping", v420, v421);
                    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v589, v547, &v554[8], &v584);
                    if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v584.__r_.__value_.__l.__data_);
                  }
                  else
                  {
                    *(_QWORD *)&v589 = 0;
                  }
                  sub_20C26266C((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v589);
                  goto LABEL_554;
                }
                sub_20C2049E8(__s1);
              }
              v417 = i;
              v418 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
              pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(__s1, v418, &v577);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v584);
              sub_20C2623F4((uint64_t)&v591, 3u, v417, *((uint64_t *)&v417 + 1), &v554[8], __s1, (uint64_t *)&v584, 0, 0);
              sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v584, v419);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__s1[1] + 1);
              sub_20BFD265C(&__s1[1]);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__s1);
LABEL_554:
              if (OriginNode)
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&OriginNode);
              goto LABEL_556;
            }
            if (sub_20C1FE3D8(2))
            {
              v544 = &v593;
              if (v594)
                v544 = (uint64_t *)(v594 + 48);
              v545 = *v544;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No implied site for relocation source -- skipping", v415, v416);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v584, v545, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (v584.__r_.__value_.__r.__words[0])
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v584);
            }
LABEL_556:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v577 + 1);
            sub_20BFD265C(&v577);
LABEL_557:
            if (p_i)
              goto LABEL_547;
            goto LABEL_580;
          case 2:
            v589 = *(_OWORD *)&v554[8];
            if (sub_20C1FE3D8(2))
            {
              v458 = &v593;
              if (v594)
                v458 = (uint64_t *)(v594 + 48);
              v459 = *v458;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v589, (uint64_t)&v604);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v604, v460);
              v463 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v463 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating references at %s", v461, v462, v463);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v577, v459, &v589, __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v604 + 3);
              sub_20BFD265C((_DWORD *)&v604 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v604);
            }
            else
            {
              v577 = 0;
            }
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v589) & 1) != 0)
            {
              memset(&v584, 0, sizeof(v584));
              v604 = 0uLL;
              v605 = 0;
              *(_OWORD *)__s1 = 0u;
              *(_OWORD *)v565 = 0u;
              *(_DWORD *)&v565[16] = 1065353216;
              i = 0uLL;
              v583[0] = 0;
              v184 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v589);
              v185 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v589);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(v184, v185, (uint64_t)&v584, (uint64_t *)&v604, (uint64_t)__s1, (uint64_t)&i);
              if (*(_QWORD *)&v565[8])
              {
                v186 = v593;
                v187 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v589);
                sub_20C2033F4((uint64_t *)&p_i, v187);
                pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AddDependencies((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(v186 + 80), &p_i, (uint64_t *)__s1);
                v188 = v581;
                if ((_QWORD)v581)
                {
                  v189 = (unsigned int *)(v581 + 8);
                  do
                  {
                    v190 = __ldxr(v189);
                    v191 = v190 - 1;
                  }
                  while (__stlxr(v191, v189));
                  if (!v191)
                    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
                }
              }
              v193 = (__int128 *)*((_QWORD *)&i + 1);
              for (j = (__int128 *)i; j != v193; ++j)
                sub_20C264D7C(j, v593, (char **)(v593 + 40));
              sub_20C264E18((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v589, *((uint64_t *)&v589 + 1), (uint64_t)&v591, (uint64_t *)&v584, (uint64_t *)&v604);
              p_i = (void **)&i;
              sub_20BDE9EB0(&p_i);
              sub_20BEB3F28((uint64_t)__s1);
              __s1[0] = &v604;
              sub_20C266AD4((void ***)__s1);
              __s1[0] = &v584;
              sub_20C021740((void ***)__s1);
            }
            if (v577)
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v577);
            goto LABEL_580;
          case 3:
            if (sub_20C1FE3D8(2))
            {
              v488 = &v593;
              if (v594)
                v488 = (uint64_t *)(v594 + 48);
              v489 = *v488;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v604);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v604, v490);
              v493 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v493 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating payload for %s", v491, v492, v493);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&p_i, v489, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v604 + 3);
              sub_20BFD265C((_DWORD *)&v604 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v604);
            }
            else
            {
              p_i = 0;
            }
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]) & 1) == 0)
              goto LABEL_546;
            memset(&v584, 0, sizeof(v584));
            v604 = 0uLL;
            v605 = 0;
            *(_OWORD *)__s1 = 0u;
            *(_OWORD *)v565 = 0u;
            *(_DWORD *)&v565[16] = 1065353216;
            i = 0uLL;
            v583[0] = 0;
            v223 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            v224 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(v223, v224, (uint64_t *)&v584, (uint64_t *)&v604, (uint64_t)__s1, (uint64_t)&i);
            if (*(_QWORD *)&v565[8])
            {
              v225 = v593;
              v226 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              sub_20C2033F4((uint64_t *)&v589, v226);
              pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AddDependencies((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(v225 + 80), &v589, (uint64_t *)__s1);
              v227 = *((_QWORD *)&v589 + 1);
              if (*((_QWORD *)&v589 + 1))
              {
                v228 = (unsigned int *)(*((_QWORD *)&v589 + 1) + 8);
                do
                {
                  v229 = __ldxr(v228);
                  v230 = v229 - 1;
                }
                while (__stlxr(v230, v228));
                if (!v230)
                  (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
              }
            }
            v232 = (__int128 *)*((_QWORD *)&i + 1);
            for (k = (__int128 *)i; k != v232; ++k)
              sub_20C264D7C(k, v593, (char **)(v593 + 40));
            if (v584.__r_.__value_.__r.__words[0] == v584.__r_.__value_.__l.__size_)
              goto LABEL_545;
            if (sub_20C1FE3D8(2))
            {
              v524 = (pxrInternal__aapl__pxrReserved__ **)&v593;
              if (v594)
                v524 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
              v525 = *v524;
              v526 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              v527 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v526);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v525, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found payload for node %s", v528, v527);
            }
            v293 = sub_20C21137C((uint64_t *)v593);
            pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetHasPayloads(v293, 1);
            v294 = (_QWORD *)*((_QWORD *)v592 + 2);
            if (!v294)
            {
              if (sub_20C1FE3D8(2))
              {
                v382 = (pxrInternal__aapl__pxrReserved__ **)&v593;
                if (v594)
                  v382 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v382, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Payload was not included, skipping", v381);
              }
LABEL_545:
              *(_QWORD *)&v589 = &i;
              sub_20BDE9EB0((void ***)&v589);
              sub_20BEB3F28((uint64_t)__s1);
              __s1[0] = &v604;
              sub_20C266AD4((void ***)__s1);
              __s1[0] = &v584;
              sub_20C021818((void ***)__s1);
LABEL_546:
              if (p_i)
LABEL_547:
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&p_i);
              goto LABEL_580;
            }
            sub_20C266B58((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v591, (int *)&v577);
            if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v577))
              goto LABEL_543;
            v295 = *((_QWORD *)v592 + 7);
            if (v295)
            {
              v296 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v295 + 48))(v295, &v577);
              if (v296)
                v297 = 3;
              else
                v297 = 4;
              *(_DWORD *)(v593 + 64) = v297;
              if ((v296 & 1) == 0)
              {
LABEL_365:
                if (sub_20C1FE3D8(2))
                {
                  v298 = (pxrInternal__aapl__pxrReserved__ **)&v593;
                  if (v594)
                    v298 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
                  v299 = *v298;
                  v300 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v577);
                  pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v299, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Payload <%s> was not included, skipping", v301, v300);
                }
                goto LABEL_544;
              }
            }
            else
            {
              *(_QWORD *)&v589 = 0;
              BYTE8(v589) = 0;
              v412 = (unint64_t *)*((_QWORD *)v592 + 3);
              if (v412)
              {
                *(_QWORD *)&v589 = *((_QWORD *)v592 + 3);
                tbb::spin_rw_mutex_v3::internal_acquire_reader(v412);
              }
              v413 = sub_20C0E70D0(v294, (unsigned int *)&v577);
              if (v413)
                v414 = 1;
              else
                v414 = 2;
              *(_DWORD *)(v593 + 64) = v414;
              sub_20BEBF29C(&v589);
              if (!v413)
                goto LABEL_365;
            }
LABEL_543:
            sub_20C266CB0(*(unint64_t *)&v554[8], *(unint64_t *)&v554[16], (uint64_t)&v591, (uint64_t *)&v584, (uint64_t *)&v604);
LABEL_544:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v577 + 1);
            sub_20BFD265C(&v577);
            goto LABEL_545;
          case 4:
            v604 = *(_OWORD *)&v554[8];
            if (sub_20C1FE3D8(2))
            {
              v494 = &v593;
              if (v594)
                v494 = (uint64_t *)(v594 + 48);
              v495 = *v494;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604, (uint64_t)&i);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&i, v496);
              v499 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v499 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating inherits at %s", v497, v498, v499);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v589, v495, &v604, __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 3);
              sub_20BFD265C((_DWORD *)&i + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&i);
            }
            else
            {
              *(_QWORD *)&v589 = 0;
            }
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604) & 1) != 0)
            {
              __s1[0] = 0;
              __s1[1] = 0;
              *(_QWORD *)v565 = 0;
              v233 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
              v234 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits(v233, v234, (uint64_t *)__s1);
              sub_20C2688FC((const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v604, (uint64_t *)__s1, 1u, (uint64_t)&v591);
              v584.__r_.__value_.__r.__words[0] = (std::string::size_type)__s1;
              sub_20BFD6F90((void ***)&v584);
            }
            if ((_QWORD)v589)
              goto LABEL_216;
            goto LABEL_581;
          case 5:
            v604 = *(_OWORD *)&v554[8];
            if (sub_20C1FE3D8(2))
            {
              v464 = &v593;
              if (v594)
                v464 = (uint64_t *)(v594 + 48);
              v465 = *v464;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604, (uint64_t)&i);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&i, v466);
              v469 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v469 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating implied classes at %s", v467, v468, v469);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v589, v465, &v604, __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 3);
              sub_20BFD265C((_DWORD *)&i + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&i);
            }
            else
            {
              *(_QWORD *)&v589 = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604)
              && v194 != -1
              && !sub_20C26979C((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604)
              && sub_20C264CE8((uint64_t *)&v604, v195, v196))
            {
              v197 = (pxrInternal__aapl__pxrReserved__ **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity(v197, v198, v199, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)__s1);
              ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
              sub_20C2698A4(ParentNode, v201, v604, *((uint64_t *)&v604 + 1), (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)__s1, 1, (uint64_t)&v591);
              sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)__s1, v202);
            }
            if ((_QWORD)v589)
LABEL_216:
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v589);
            goto LABEL_581;
          case 6:
            if (sub_20C1FE3D8(2))
            {
              v476 = &v593;
              if (v594)
                v476 = (uint64_t *)(v594 + 48);
              v477 = *v476;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v604);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v604, v478);
              v481 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v481 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating specializes at %s", v479, v480, v481);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&i, v477, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v604 + 3);
              sub_20BFD265C((_DWORD *)&v604 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v604);
            }
            else
            {
              *(_QWORD *)&i = 0;
            }
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]) & 1) != 0)
            {
              __s1[0] = 0;
              __s1[1] = 0;
              *(_QWORD *)v565 = 0;
              v217 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              v218 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes(v217, v218, (uint64_t *)__s1);
              sub_20C2688FC((const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (uint64_t *)__s1, 6u, (uint64_t)&v591);
              v584.__r_.__value_.__r.__words[0] = (std::string::size_type)__s1;
              sub_20BFD6F90((void ***)&v584);
            }
            if ((_QWORD)i)
              goto LABEL_222;
            goto LABEL_581;
          case 7:
            if (sub_20C1FE3D8(2))
            {
              v482 = &v593;
              if (v594)
                v482 = (uint64_t *)(v594 + 48);
              v483 = *v482;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v604);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v604, v484);
              v487 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v487 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating ancestral variant sets at %s", v485, v486, v487);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&i, v483, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v604 + 3);
              sub_20BFD265C((_DWORD *)&v604 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v604);
            }
            else
            {
              *(_QWORD *)&i = 0;
            }
            v219 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v219, &v584);
            while (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v584))
            {
              SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              if (!SpecContributionRestrictedDepth
                || SpecContributionRestrictedDepth > pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)&v584))
              {
                if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v584) & 1) == 0)
                {
                  __s1[0] = "pcp/primIndex.cpp";
                  __s1[1] = "_EvalNodeAncestralVariantSets";
                  *(_QWORD *)v565 = 4278;
                  *(_QWORD *)&v565[8] = "void pxrInternal__aapl__pxrReserved__::_EvalNodeAncestralVariantSets(const PcpNo"
                                        "deRef &, Pcp_PrimIndexer *)";
                  v565[16] = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "path.IsPrimOrPrimVariantSelectionPath()", 0);
                }
                sub_20C26AB84((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (pxrInternal__aapl__pxrReserved__::SdfPath *)&v584, (uint64_t)&v591, 1);
                if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v584) & 1) != 0)
                  break;
              }
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v584, __s1);
              sub_20BFD3EBC((int *)&v584, (int *)__s1);
              sub_20BFD3F10((int *)v584.__r_.__value_.__r.__words + 1, (int *)__s1 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__s1 + 1);
              sub_20BFD265C(__s1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v584.__r_.__value_.__r.__words + 1);
            sub_20BFD265C(&v584);
            if ((_QWORD)i)
              goto LABEL_278;
            goto LABEL_580;
          case 8:
            goto LABEL_138;
          case 9:
            goto LABEL_105;
          case 11:
            if (sub_20C1FE3D8(2))
            {
              v446 = &v593;
              if (v594)
                v446 = (uint64_t *)(v594 + 48);
              v447 = *v446;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v604);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v604, v448);
              v451 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v451 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating implied specializes at %s", v449, v450, v451);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v573, v447, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v604 + 3);
              sub_20BFD265C((_DWORD *)&v604 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v604);
            }
            else
            {
              v573.__r_.__value_.__r.__words[0] = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8])
              && v143 != -1)
            {
              if (sub_20C26979C((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]))
              {
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]) != 6)
                {
                  __s1[0] = "pcp/primIndex.cpp";
                  __s1[1] = "_FindArcsToPropagateToOrigin";
                  *(_QWORD *)v565 = 3701;
                  *(_QWORD *)&v565[8] = "void pxrInternal__aapl__pxrReserved__::_FindArcsToPropagateToOrigin(const PcpNod"
                                        "eRef &, Pcp_PrimIndexer *)";
                  v565[16] = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "PcpIsSpecializeArc(node.GetArcType())", 0);
                }
                *(_OWORD *)__s1 = *(_OWORD *)&v554[8];
                *(_QWORD *)v565 = **(_QWORD **)(*(_QWORD *)&v554[8] + 16);
                __s1[1] = (void *)*(unsigned __int16 *)(*(_QWORD *)v565 + 48 * *(_QWORD *)&v554[16] + 28);
                *(_OWORD *)&v584.__r_.__value_.__l.__data_ = *(_OWORD *)&v554[8];
                v584.__r_.__value_.__r.__words[2] = **(_QWORD **)(*(_QWORD *)&v554[8] + 16);
                v584.__r_.__value_.__l.__size_ = 0xFFFFLL;
                sub_20C26A114((uint64_t)&v604, (uint64_t *)__s1, (uint64_t *)&v584);
                v145 = (__int128 *)*((_QWORD *)&v604 + 1);
                v144 = (__int128 *)v604;
                if ((_QWORD)v604 != *((_QWORD *)&v604 + 1))
                {
                  do
                  {
                    i = *v144;
                    if (sub_20C1FE3D8(2))
                    {
                      v151 = (pxrInternal__aapl__pxrReserved__ **)&v593;
                      if (v594)
                        v151 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
                      v152 = *v151;
                      *(_QWORD *)&v589 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
                      *((_QWORD *)&v589 + 1) = v153;
                      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i, (uint64_t)&p_i);
                      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)__s1, (pxrInternal__aapl__pxrReserved__ *)&p_i, v154);
                      if (v565[7] >= 0)
                        v155 = __s1;
                      else
                        v155 = (void **)__s1[0];
                      OriginNode = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
                      v575 = v156;
                      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&OriginNode, (uint64_t)&v577);
                      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v577, v157);
                      v159 = &v584;
                      if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v159 = (std::string *)v584.__r_.__value_.__r.__words[0];
                      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v152, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&i, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v589, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Propagating arcs under %s to specializes origin %s", v158, v155, v159);
                      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v584.__r_.__value_.__l.__data_);
                      sub_20C20ACC8((uint64_t)&v577);
                      if ((v565[7] & 0x80000000) != 0)
                        operator delete(__s1[0]);
                      sub_20C20ACC8((uint64_t)&p_i);
                    }
                    v146 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
                    v148 = v147;
                    v149 = i;
                    v150 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                    sub_20C26A55C(v146, v148, v149, *((uint64_t *)&v149 + 1), v150, &v554[8], (uint64_t)&v591);
                    ++v144;
                  }
                  while (v144 != v145);
                  v144 = (__int128 *)v604;
                }
                if (v144)
                {
                  *((_QWORD *)&v604 + 1) = v144;
                  operator delete(v144);
                }
              }
              else
              {
                sub_20C26A240(*(uint64_t *)&v554[8], *(uint64_t *)&v554[16], (uint64_t)&v591);
              }
            }
            if (v573.__r_.__value_.__r.__words[0])
LABEL_430:
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v573);
            goto LABEL_580;
          case 12:
            if (sub_20C1FE3D8(2))
            {
              v470 = &v593;
              if (v594)
                v470 = (uint64_t *)(v594 + 48);
              v471 = *v470;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v604);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v584, (pxrInternal__aapl__pxrReserved__ *)&v604, v472);
              v475 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v475 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating variant sets at %s", v473, v474, v475);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&i, v471, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v604 + 3);
              sub_20BFD265C((_DWORD *)&v604 + 2);
              sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v604);
            }
            else
            {
              *(_QWORD *)&i = 0;
            }
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]) & 1) != 0)
            {
              v203 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              sub_20C26AB84((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], v203, (uint64_t)&v591, 0);
            }
            if ((_QWORD)i)
LABEL_222:
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&i);
            goto LABEL_581;
          case 13:
            v117 = 0;
LABEL_138:
            v160 = *(unsigned int *)&v554[4];
            if (sub_20C1FE3D8(2))
            {
              v435 = &v593;
              if (v594)
                v435 = (uint64_t *)(v594 + 48);
              v436 = *v435;
              if (v556 >= 0)
                v437 = &v555;
              else
                v437 = (__int128 *)v555;
              v438 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              sub_20C26AE28(v438, (uint64_t)&v557, (uint64_t *)&v584);
              v441 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v441 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating authored selections for variant set %s at %s", v439, v440, v437, v441);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v579, v436, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
            }
            else
            {
              v579 = 0;
            }
            v161 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            if (v161
              && v161 <= pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)&v557))
            {
              goto LABEL_578;
            }
            v578[0] = 0;
            v578[1] = 0;
            v577 = (uint64_t *)v578;
            v162 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSetOptions(v162, &v557, (uint64_t)&v555, &v577);
            sub_20C26AEA0((const void **)&v555, (uint64_t)&v577, *((_QWORD *)v592 + 1), (uint64_t)&OriginNode);
            v163 = v576;
            if ((v576 & 0x80u) != 0)
              v163 = v575;
            if (v163 && sub_20C1FE3D8(2))
            {
              v500 = (pxrInternal__aapl__pxrReserved__ **)&v593;
              if (v594)
                v500 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
              v501 = *v500;
              v502 = &v555;
              if (v556 < 0)
                v502 = (__int128 *)v555;
              p_OriginNode = &OriginNode;
              if ((v576 & 0x80u) != 0)
                p_OriginNode = OriginNode;
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v501, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found fallback {%s=%s}", v164, v502, p_OriginNode);
            }
            memset(&v573, 0, sizeof(v573));
            *(_QWORD *)&v572 = 0;
            *((_QWORD *)&v572 + 1) = -1;
            pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v557, &v570);
            if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v570))
            {
              __s1[0] = "pcp/primIndex.cpp";
              __s1[1] = "_ComposeVariantSelection";
              *(_QWORD *)v565 = 3959;
              *(_QWORD *)&v565[8] = "void pxrInternal__aapl__pxrReserved__::_ComposeVariantSelection(const PcpNodeRef &, "
                                    "const SdfPath &, Pcp_PrimIndexer *, const std::string &, std::string *, PcpNodeRef *)";
              v565[16] = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "!pathInNode.IsEmpty()", 0);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v570))
            {
              __s1[0] = "pcp/primIndex.cpp";
              __s1[1] = "_ComposeVariantSelection";
              *(_QWORD *)v565 = 3961;
              *(_QWORD *)&v565[8] = "void pxrInternal__aapl__pxrReserved__::_ComposeVariantSelection(const PcpNodeRef &, "
                                    "const SdfPath &, Pcp_PrimIndexer *, const std::string &, std::string *, PcpNodeRef *)";
              v565[16] = 0;
              v442 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v570);
              v445 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s", v443, v444, v442);
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "!pathInNode.ContainsPrimVariantSelection()", v445);
            }
            if (v594)
            {
              __s1[0] = "pcp/primIndex.cpp";
              __s1[1] = "_ComposeVariantSelection";
              *(_QWORD *)v565 = 3973;
              *(_QWORD *)&v565[8] = "void pxrInternal__aapl__pxrReserved__::_ComposeVariantSelection(const PcpNodeRef &, "
                                    "const SdfPath &, Pcp_PrimIndexer *, const std::string &, std::string *, PcpNodeRef *)";
              v565[16] = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "!indexer->previousFrame", 0);
            }
            pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode((pxrInternal__aapl__pxrReserved__ *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v570, (uint64_t)&p_i);
            v165 = (void **)sub_20C26B3B0((uint64_t)&v591, &v581, &p_i);
            sub_20C26BAF8(v165);
            v166 = *v165;
            n = (std::string::size_type)v165[1];
            v168 = (const char *)**((_QWORD **)*v165 + 2);
            v584.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
            v584.__r_.__value_.__l.__size_ = (std::string::size_type)v166;
            v584.__r_.__value_.__r.__words[2] = n;
            v585 = v168;
            v586 = 0;
            sub_20C26B490((uint64_t)v165, (uint64_t)&v604);
            while (2)
            {
              if (v165 != (void **)v604 || n != v605)
              {
                size = v584.__r_.__value_.__l.__size_;
                goto LABEL_159;
              }
              size = v584.__r_.__value_.__l.__size_;
              if (v584.__r_.__value_.__l.__size_ == *((_QWORD *)&v604 + 1))
              {
                v235 = (void **)sub_20C26B3B0((uint64_t)&v591, &v581, &p_i);
                sub_20C26BAF8(v235);
                v236 = *v235;
                v237 = (std::string::size_type)v235[1];
                v238 = (const char *)**((_QWORD **)*v235 + 2);
                v584.__r_.__value_.__r.__words[0] = (std::string::size_type)v235;
                v584.__r_.__value_.__l.__size_ = (std::string::size_type)v236;
                v584.__r_.__value_.__r.__words[2] = v237;
                v585 = v238;
                v586 = 0;
                sub_20C26B490((uint64_t)v235, (uint64_t)&v604);
                while (1)
                {
                  v239 = v235 == (void **)v604 && v237 == v605;
                  if (v239 && v584.__r_.__value_.__l.__size_ == *((_QWORD *)&v604 + 1))
                    goto LABEL_382;
                  sub_20C26C498((uint64_t *)&v584, (uint64_t)&i);
                  v240 = (int *)v583[1];
                  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v583))
                    break;
                  v241 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                  if (v241
                    && v241 <= pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)v583))
                  {
                    goto LABEL_296;
                  }
                  v242 = v240[2];
                  if (v242 == 2)
                  {
                    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i) == 2)
                    {
                      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i, (int *)__s1);
                      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)__s1, (int *)&v589);
                      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v587, (pxrInternal__aapl__pxrReserved__::SdfPath *)v583, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v589, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__s1, 1);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v589 + 1);
                      sub_20BFD265C(&v589);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__s1 + 1);
                      sub_20BFD265C(__s1);
                    }
                    else
                    {
                      sub_20BFD6E54(&v587, v583);
                      sub_20BFD6EA4((_DWORD *)&v587 + 1, (_DWORD *)v583 + 1);
                    }
                    sub_20BFD3EBC(v240, (int *)&v587);
                    sub_20BFD3F10(v240 + 1, (int *)&v587 + 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v587 + 1);
                    sub_20BFD265C(&v587);
                    v243 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                    v242 = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasVariantSelections(v243, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v240) ^ 1;
                    v240[2] = v242;
                  }
                  if (v242 == 1)
                    goto LABEL_296;
                  *(_OWORD *)__s1 = 0u;
                  *(_OWORD *)v565 = 0u;
                  *(_DWORD *)&v565[16] = 1065353216;
                  v589 = 0uLL;
                  v590 = 0;
                  v247 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                  v248 = pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSelection(v247, (pxrInternal__aapl__pxrReserved__::SdfPath *)v240, (const void **)&v555, (uint64_t)&v573, (uint64_t)__s1, (uint64_t *)&v589);
                  if (*(_QWORD *)&v565[8])
                  {
                    v249 = v593;
                    v250 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                    sub_20C2033F4((uint64_t *)&v587, v250);
                    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AddDependencies((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(v249 + 80), &v587, (uint64_t *)__s1);
                    v251 = v588;
                    if (v588)
                    {
                      v252 = (unsigned int *)(v588 + 8);
                      do
                      {
                        v253 = __ldxr(v252);
                        v254 = v253 - 1;
                      }
                      while (__stlxr(v254, v252));
                      if (!v254)
                        (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
                    }
                  }
                  v256 = (__int128 *)*((_QWORD *)&v589 + 1);
                  for (m = (__int128 *)v589; m != v256; ++m)
                    sub_20C264D7C(m, v593, (char **)(v593 + 40));
                  v587 = (void **)&v589;
                  sub_20BDE9EB0(&v587);
                  sub_20BEB3F28((uint64_t)__s1);
                  if (v248)
                  {
                    v572 = i;
                    v244 = 1;
                  }
                  else
                  {
                    v244 = 0;
                  }
LABEL_297:
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v583 + 1);
                  sub_20BFD265C(v583);
                  if ((v244 | 4) != 4)
                  {
                    if (!sub_20C1FE3D8(2))
                      goto LABEL_382;
                    v302 = (pxrInternal__aapl__pxrReserved__ **)&v593;
                    if (v594)
                      v302 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
                    v303 = *v302;
                    if (v556 >= 0)
                      v304 = &v555;
                    else
                      v304 = (__int128 *)v555;
                    if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v305 = &v573;
                    else
                      v305 = (std::string *)v573.__r_.__value_.__r.__words[0];
                    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v572, (uint64_t)&v584);
                    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)__s1, (pxrInternal__aapl__pxrReserved__ *)&v584, v306);
                    v308 = __s1;
                    if (v565[7] < 0)
                      v308 = (void **)__s1[0];
                    pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v303, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v572, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found authored variant selection {%s=%s} at %s", v307, v304, v305, v308);
                    goto LABEL_715;
                  }
                  if (v586)
                  {
                    v245 = v584.__r_.__value_.__r.__words[2];
                  }
                  else
                  {
                    v245 = v584.__r_.__value_.__r.__words[2];
                    v246 = *(unsigned __int16 *)&v585[48 * v584.__r_.__value_.__r.__words[2] + 28];
                    if (v246 != 0xFFFF)
                      goto LABEL_305;
                  }
                  v237 = 0xFFFFLL;
                  if (v245 == 0xFFFF)
                    goto LABEL_306;
                  while (1)
                  {
                    v246 = *(unsigned __int16 *)&v585[48 * v245 + 34];
                    if (v246 != 0xFFFF)
                      break;
                    v245 = *(unsigned __int16 *)&v585[48 * v245 + 24];
                    v584.__r_.__value_.__r.__words[2] = v245;
                    v237 = 0xFFFFLL;
                    if (v245 == 0xFFFF)
                      goto LABEL_306;
                  }
LABEL_305:
                  v237 = v246;
                  v584.__r_.__value_.__r.__words[2] = v246;
LABEL_306:
                  v586 = 0;
                  v235 = (void **)v584.__r_.__value_.__r.__words[0];
                }
                v586 = 1;
LABEL_296:
                v244 = 4;
                goto LABEL_297;
              }
LABEL_159:
              *(_QWORD *)&i = size;
              *((_QWORD *)&i + 1) = n;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i) != 2)
                goto LABEL_186;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i, (int *)&v589);
              pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v589, (uint64_t)__s1);
              v171 = v565[7];
              if (v565[7] >= 0)
                v172 = (void *)v565[7];
              else
                v172 = __s1[1];
              v173 = (void *)HIBYTE(v556);
              if (v556 < 0)
                v173 = (void *)*((_QWORD *)&v555 + 1);
              if (v172 != v173)
                goto LABEL_179;
              if (v556 >= 0)
                v174 = &v555;
              else
                v174 = (__int128 *)v555;
              if ((v565[7] & 0x80) != 0)
              {
                if (memcmp(__s1[0], v174, (size_t)__s1[1]))
                  goto LABEL_179;
              }
              else if (v565[7])
              {
                v175 = __s1;
                while (*(unsigned __int8 *)v175 == *(unsigned __int8 *)v174)
                {
                  v175 = (void **)((char *)v175 + 1);
                  v174 = (__int128 *)((char *)v174 + 1);
                  if (!--v171)
                    goto LABEL_176;
                }
LABEL_179:
                v181 = 0;
                v180 = 1;
                goto LABEL_180;
              }
LABEL_176:
              v176 = (_DWORD *)sub_20C26C214((uint64_t)v584.__r_.__value_.__l.__data_, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v584.__r_.__value_.__r.__words[1], 1);
              if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v176))
              {
                v180 = 0;
                v181 = 1;
                v586 = 1;
                goto LABEL_180;
              }
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v589, &v587);
              v177 = (void ***)sub_20C26C214((uint64_t)v584.__r_.__value_.__l.__data_, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v584.__r_.__value_.__r.__words[1], 1);
              v178 = v587;
              v179 = *v177;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v587 + 1);
              sub_20BFD265C(&v587);
              if (v178 != v179)
                goto LABEL_179;
              std::string::operator=(&v573, (const std::string *)&v565[8]);
              v180 = 0;
              v181 = 0;
              v572 = i;
LABEL_180:
              if (SHIBYTE(v566) < 0)
                operator delete(*(void **)&v565[8]);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v589 + 1);
              sub_20BFD265C(&v589);
              if ((v180 & 1) != 0 || v181)
              {
LABEL_186:
                if (v586)
                {
                  v182 = v584.__r_.__value_.__r.__words[2];
                  goto LABEL_189;
                }
                v182 = v584.__r_.__value_.__r.__words[2];
                v183 = *(unsigned __int16 *)&v585[48 * v584.__r_.__value_.__r.__words[2] + 28];
                if (v183 == 0xFFFF)
                {
LABEL_189:
                  for (n = 0xFFFFLL; v182 != 0xFFFF; n = 0xFFFFLL)
                  {
                    v183 = *(unsigned __int16 *)&v585[48 * v182 + 34];
                    if (v183 != 0xFFFF)
                      goto LABEL_193;
                    v182 = *(unsigned __int16 *)&v585[48 * v182 + 24];
                    v584.__r_.__value_.__r.__words[2] = v182;
                  }
                }
                else
                {
LABEL_193:
                  n = v183;
                  v584.__r_.__value_.__r.__words[2] = v183;
                }
                v586 = 0;
                v165 = (void **)v584.__r_.__value_.__r.__words[0];
                continue;
              }
              break;
            }
            if (sub_20C1FE3D8(2))
            {
              v513 = (pxrInternal__aapl__pxrReserved__ **)&v593;
              if (v594)
                v513 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
              v514 = *v513;
              if (v556 >= 0)
                v515 = &v555;
              else
                v515 = (__int128 *)v555;
              if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v516 = &v573;
              else
                v516 = (std::string *)v573.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v572, (uint64_t)&v584);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)__s1, (pxrInternal__aapl__pxrReserved__ *)&v584, v517);
              v519 = __s1;
              if (v565[7] < 0)
                v519 = (void **)__s1[0];
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v514, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v572, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found prior variant selection {%s=%s} at %s", v518, v515, v516, v519);
LABEL_715:
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              sub_20C20ACC8((uint64_t)&v584);
            }
LABEL_382:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_i + 1);
            sub_20BFD265C(&p_i);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v571);
            sub_20BFD265C(&v570);
            v309 = v576;
            if ((v576 & 0x80u) != 0)
              v309 = v575;
            if (!v309)
              goto LABEL_442;
            v310 = HIBYTE(v573.__r_.__value_.__r.__words[2]);
            if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v310 = v573.__r_.__value_.__l.__size_;
            if (!v310)
              goto LABEL_567;
            if (SHIBYTE(v556) < 0)
            {
              if (*((_QWORD *)&v555 + 1) != 7)
                goto LABEL_442;
              v311 = (__int128 *)v555;
            }
            else
            {
              v311 = &v555;
              if (SHIBYTE(v556) != 7)
                goto LABEL_442;
            }
            v350 = *(_DWORD *)v311;
            v351 = *(_DWORD *)((char *)v311 + 3);
            if (v350 != 1851880563 || v351 != 1852400750)
              goto LABEL_442;
            v353 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
            if (!v353)
            {
              pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
              v353 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
            }
            if (*v353)
              goto LABEL_442;
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v572) == 2)
            {
              v383 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v572);
              if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v383))
              {
                v384 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v572);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(v384, (uint64_t)__s1);
                v385 = sub_20BF772F0((unsigned __int8 *)__s1, (unsigned __int8 *)&v555);
                if (SHIBYTE(v566) < 0)
                  operator delete(*(void **)&v565[8]);
                if ((v565[7] & 0x80000000) != 0)
                  operator delete(__s1[0]);
                if (v385)
                  goto LABEL_442;
              }
            }
            *(_OWORD *)__s1 = v572;
            if ((_QWORD)v572 && __s1[1] != (void *)-1)
            {
              do
              {
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__s1) == 5)
                  goto LABEL_567;
                __s1[0] = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__s1);
                __s1[1] = v386;
              }
              while (__s1[0] && v386 != (void *)-1);
            }
            v387 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)&v591);
            Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v387);
            v389 = *(unsigned int **)(Identifier + 8);
            __s1[0] = *(void **)Identifier;
            __s1[1] = v389;
            if (v389)
            {
              v390 = v389 + 2;
              do
                v391 = __ldxr(v390);
              while (__stxr(v391 + 1, v390));
            }
            v392 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)&v591);
            *(_OWORD *)&v584.__r_.__value_.__l.__data_ = *(_OWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v392);
            while (1)
            {
              if (v584.__r_.__value_.__r.__words[0] == v584.__r_.__value_.__l.__size_
                || (v395 = (_QWORD *)sub_20C21A438((uint64_t *)&v584, v393, v394), sub_20C1020E4(__s1, v395)))
              {
                v422 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v572) != 0;
                goto LABEL_561;
              }
              v398 = atomic_load((unsigned __int8 *)&qword_2549882B0);
              if ((v398 & 1) == 0 && __cxa_guard_acquire(&qword_2549882B0))
              {
                v408 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v408)
                  v408 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                v409 = *((_QWORD *)v408 + 57);
                qword_2549882A8 = v409;
                if ((v409 & 7) != 0)
                {
                  v410 = (unsigned int *)(v409 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v411 = __ldxr(v410);
                  while (__stxr(v411 + 2, v410));
                  if ((v411 & 1) == 0)
                    qword_2549882A8 &= 0xFFFFFFFFFFFFFFF8;
                }
                __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_2549882A8, &dword_20BDBC000);
                __cxa_guard_release(&qword_2549882B0);
              }
              v399 = (uint64_t *)sub_20C21A438((uint64_t *)&v584, v396, v397);
              v400 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v399);
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v400, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v591.__r_.__value_.__r.__words[1], (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_2549882A8, (pxrInternal__aapl__pxrReserved__::VtValue *)&v604);
              if (!sub_20C0302AC((pxrInternal__aapl__pxrReserved__::VtValue *)&v604))
                goto LABEL_526;
              v401 = (BYTE8(v604) & 4) != 0
                   ? (*(uint64_t (**)(__int128 *))((*((_QWORD *)&v604 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v604)
                   : v604;
              v402 = sub_20BDEEBA4(v401, (const void **)&v555);
              if (v401 + 8 == v402)
                goto LABEL_526;
              v403 = *(unsigned __int8 *)(v402 + 79);
              if ((v403 & 0x80u) == 0)
                v404 = *(unsigned __int8 *)(v402 + 79);
              else
                v404 = *(_QWORD *)(v402 + 64);
              v405 = HIBYTE(v573.__r_.__value_.__r.__words[2]);
              if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v405 = v573.__r_.__value_.__l.__size_;
              if (v404 != v405)
                goto LABEL_526;
              v406 = (const void **)(v402 + 56);
              v407 = (v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v573
                   : (std::string *)v573.__r_.__value_.__r.__words[0];
              if ((v403 & 0x80) != 0)
                break;
              if (!*(_BYTE *)(v402 + 79))
                goto LABEL_560;
              while (*(unsigned __int8 *)v406 == v407->__r_.__value_.__s.__data_[0])
              {
                v406 = (const void **)((char *)v406 + 1);
                v407 = (std::string *)((char *)v407 + 1);
                if (!--v403)
                  goto LABEL_560;
              }
LABEL_526:
              sub_20BF4C2D8((uint64_t)&v604);
              sub_20C21A4B4(&v584);
            }
            if (memcmp(*v406, v407, *(_QWORD *)(v402 + 64)))
              goto LABEL_526;
LABEL_560:
            sub_20BF4C2D8((uint64_t)&v604);
            v422 = 0;
LABEL_561:
            v423 = __s1[1];
            if (__s1[1])
            {
              v424 = (unsigned int *)((char *)__s1[1] + 8);
              do
              {
                v425 = __ldxr(v424);
                v426 = v425 - 1;
              }
              while (__stlxr(v426, v424));
              if (!v426)
                (*(void (**)(void *))(*(_QWORD *)v423 + 8))(v423);
            }
            if (v422)
            {
LABEL_567:
              if (sub_20C1FE3D8(2))
              {
                v523 = (pxrInternal__aapl__pxrReserved__ **)&v593;
                if (v594)
                  v523 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v523, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Deferring to variant fallback", v427);
              }
              if (v117)
                v356 = 9;
              else
                v356 = 14;
LABEL_571:
              sub_20C26AF5C((uint64_t)__s1, v356, &v554[8], &v557, (uint64_t)&v555, v160);
              sub_20C261350((uint64_t)&v591, (uint64_t)__s1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v567[1]);
              sub_20BFD265C(v567);
              if (SHIBYTE(v566) < 0)
                operator delete(*(void **)&v565[8]);
              goto LABEL_573;
            }
LABEL_442:
            v354 = HIBYTE(v573.__r_.__value_.__r.__words[2]);
            if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v354 = v573.__r_.__value_.__l.__size_;
            if (!v354)
            {
              if (sub_20C1FE3D8(2))
              {
                v520 = (pxrInternal__aapl__pxrReserved__ **)&v593;
                if (v594)
                  v520 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
                v521 = *v520;
                v522 = &v555;
                if (v556 < 0)
                  v522 = (__int128 *)v555;
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v521, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"No variant selection found for set '%s'", v355, v522);
              }
              if (v117)
                v356 = 10;
              else
                v356 = 15;
              goto LABEL_571;
            }
            if (v117)
              sub_20C26B018((uint64_t)&v591, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v557, (uint64_t)&v555, v160, (uint64_t)&v573);
            else
              sub_20C26B228((uint64_t)&v591, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v555, v160, (uint64_t)&v573);
LABEL_573:
            if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v573.__r_.__value_.__l.__data_);
            if ((char)v576 < 0)
              operator delete(OriginNode);
            sub_20BDECAB8((uint64_t)&v577, v578[0]);
LABEL_578:
            if (v579)
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v579);
LABEL_580:
            LOBYTE(v117) = 1;
LABEL_581:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v558);
            sub_20BFD265C(&v557);
            if (SHIBYTE(v556) < 0)
            {
              operator delete((void *)v555);
              if ((v117 & 1) == 0)
              {
LABEL_760:
                if (v603[40])
                  sub_20C26B538((uint64_t)v603);
                __s1[0] = v598;
                sub_20C2608C0((void ***)__s1);
                sub_20C260698((void **)&v595);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v591.__r_.__value_.__r.__words[1] + 1);
                sub_20BFD265C(&v591.__r_.__value_.__r.__words[1]);
                result = (uint64_t)sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v591);
                goto LABEL_763;
              }
            }
            else if ((v117 & 1) == 0)
            {
              goto LABEL_760;
            }
            continue;
          case 14:
            v117 = 0;
LABEL_105:
            v139 = *(unsigned int *)&v554[4];
            if (sub_20C1FE3D8(2))
            {
              v428 = &v593;
              if (v594)
                v428 = (uint64_t *)(v594 + 48);
              v429 = *v428;
              if (v556 >= 0)
                v430 = &v555;
              else
                v430 = (__int128 *)v555;
              v431 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              sub_20C26AE28(v431, (uint64_t)&v557, (uint64_t *)&v584);
              v434 = &v584;
              if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v434 = (std::string *)v584.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating fallback selections for variant set %s s at %s", v432, v433, v430, v434);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&i, v429, &v554[8], __s1);
              if ((v565[7] & 0x80000000) != 0)
                operator delete(__s1[0]);
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v584.__r_.__value_.__l.__data_);
            }
            else
            {
              *(_QWORD *)&i = 0;
            }
            v140 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            if (!v140
              || v140 > pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)&v557))
            {
              *(_OWORD *)&v584.__r_.__value_.__r.__words[1] = 0uLL;
              v584.__r_.__value_.__r.__words[0] = (std::string::size_type)&v584.__r_.__value_.__l.__size_;
              v141 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSetOptions(v141, &v557, (uint64_t)&v555, (uint64_t **)&v584);
              sub_20C26AEA0((const void **)&v555, (uint64_t)&v584, *((_QWORD *)v592 + 1), (uint64_t)&v604);
              v142 = HIBYTE(v605);
              if (v605 < 0)
                v142 = *((_QWORD *)&v604 + 1);
              if (v142)
              {
                if (v117)
                  sub_20C26B018((uint64_t)&v591, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v557, (uint64_t)&v555, v139, (uint64_t)&v604);
                else
                  sub_20C26B228((uint64_t)&v591, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (uint64_t)&v555, v139, (uint64_t)&v604);
              }
              else
              {
                if (sub_20C1FE3D8(2))
                {
                  v504 = (pxrInternal__aapl__pxrReserved__ **)&v593;
                  if (v594)
                    v504 = (pxrInternal__aapl__pxrReserved__ **)(v594 + 48);
                  v505 = *v504;
                  v506 = &v555;
                  if (v556 < 0)
                    v506 = (__int128 *)v555;
                  pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v505, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v554[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"No variant fallback found for set '%s'", v257, v506);
                }
                if (v117)
                  v258 = 10;
                else
                  v258 = 15;
                sub_20C26AF5C((uint64_t)__s1, v258, &v554[8], &v557, (uint64_t)&v555, v139);
                sub_20C261350((uint64_t)&v591, (uint64_t)__s1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v567[1]);
                sub_20BFD265C(v567);
                if (SHIBYTE(v566) < 0)
                  operator delete(*(void **)&v565[8]);
              }
              if (SHIBYTE(v605) < 0)
                operator delete((void *)v604);
              sub_20BDECAB8((uint64_t)&v584, (char *)v584.__r_.__value_.__l.__size_);
            }
            if ((_QWORD)i)
LABEL_278:
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&i);
            goto LABEL_580;
          case 16:
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], (int *)&v577);
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8], v221))v222 = sub_20C26C67C((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            else
              v222 = sub_20C26C5DC((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            if ((v222 & 1) != 0)
              goto LABEL_479;
            *(_QWORD *)&v604 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            *((_QWORD *)&v604 + 1) = v312;
            v313 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            v316 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v313, v314, v315);
            pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v316, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v577, &OriginNode);
            pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::New(&i);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v554[8]);
            *(_QWORD *)&v589 = v317;
            *((_QWORD *)&v589 + 1) = v318;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v589, (uint64_t)&v584);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__s1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v584);
            v319 = i;
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(i + 16, (uint64_t)__s1);
            sub_20BFD3EBC((int *)(v319 + 96), &v568);
            sub_20BFD3F10((int *)(v319 + 100), &v569);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v569);
            sub_20BFD265C(&v568);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v567[2]);
            p_i = (void **)&v565[16];
            sub_20BDE9EB0(&p_i);
            v320 = *(_QWORD *)&v565[8];
            if (*(_QWORD *)&v565[8])
            {
              v321 = (unsigned int *)(*(_QWORD *)&v565[8] + 8);
              do
              {
                v322 = __ldxr(v321);
                v323 = v322 - 1;
              }
              while (__stlxr(v323, v321));
              if (!v323)
                (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
            }
            v324 = __s1[1];
            if (__s1[1])
            {
              v325 = (unsigned int *)((char *)__s1[1] + 8);
              do
              {
                v326 = __ldxr(v325);
                v327 = v326 - 1;
              }
              while (__stlxr(v327, v325));
              if (!v327)
                (*(void (**)(void *))(*(_QWORD *)v324 + 8))(v324);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v584.__r_.__value_.__r.__words[1] + 1);
            sub_20BFD265C(&v584.__r_.__value_.__r.__words[1]);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v584);
            v328 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
            sub_20C2033F4((uint64_t *)&v584, v328);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(__s1, &v584, &OriginNode);
            v329 = i;
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(i + 104, (uint64_t)__s1);
            sub_20BFD3EBC((int *)(v329 + 184), &v568);
            sub_20BFD3F10((int *)(v329 + 188), &v569);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v569);
            sub_20BFD265C(&v568);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v567[2]);
            *(_QWORD *)&v589 = &v565[16];
            sub_20BDE9EB0((void ***)&v589);
            v330 = *(_QWORD *)&v565[8];
            if (*(_QWORD *)&v565[8])
            {
              v331 = (unsigned int *)(*(_QWORD *)&v565[8] + 8);
              do
              {
                v332 = __ldxr(v331);
                v333 = v332 - 1;
              }
              while (__stlxr(v333, v331));
              if (!v333)
                (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
            }
            v334 = __s1[1];
            if (__s1[1])
            {
              v335 = (unsigned int *)((char *)__s1[1] + 8);
              do
              {
                v336 = __ldxr(v335);
                v337 = v336 - 1;
              }
              while (__stlxr(v337, v335));
              if (!v337)
                (*(void (**)(void *))(*(_QWORD *)v334 + 8))(v334);
            }
            v338 = v584.__r_.__value_.__l.__size_;
            if (v584.__r_.__value_.__l.__size_)
            {
              v339 = (unsigned int *)(v584.__r_.__value_.__l.__size_ + 8);
              do
              {
                v340 = __ldxr(v339);
                v341 = v340 - 1;
              }
              while (__stlxr(v341, v339));
              if (!v341)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v338 + 8))(v338);
            }
            v342 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            v343 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v342);
            v344 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v343);
            sub_20BF2D298(i + 208, v344);
            v345 = i;
            sub_20C01A074((int *)(i + 224), &v577);
            sub_20C01A0C8((int *)(v345 + 228), (_DWORD *)&v577 + 1);
            memset(&v584, 0, sizeof(v584));
            v346 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            if (v346 == 4)
            {
              __s1[0] = 0;
              __s1[1] = 0;
              *(_QWORD *)v565 = 0;
              v357 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(v357, (pxrInternal__aapl__pxrReserved__::SdfPath *)&OriginNode, (uint64_t)__s1, (uint64_t *)&v584, 0, 0);
              *(_QWORD *)&v589 = __s1;
              sub_20C021740((void ***)&v589);
            }
            else
            {
              if (v346 != 5)
              {
                __s1[0] = "pcp/primIndex.cpp";
                __s1[1] = "operator()";
                *(_QWORD *)v565 = 2471;
                *(_QWORD *)&v565[8] = "auto pxrInternal__aapl__pxrReserved__::_EvalUnresolvedPrimPathError(const PcpNodeR"
                                      "ef &, Pcp_PrimIndexer *)::(anonymous class)::operator()() const";
                v565[16] = 0;
                v365 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected arc type", v347, v348);
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "false", v365);
                goto LABEL_459;
              }
              __s1[0] = 0;
              __s1[1] = 0;
              *(_QWORD *)v565 = 0;
              v349 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v604);
              pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(v349, (pxrInternal__aapl__pxrReserved__::SdfPath *)&OriginNode, (uint64_t *)__s1, (uint64_t *)&v584, 0, 0);
              *(_QWORD *)&v589 = __s1;
              sub_20C021818((void ***)&v589);
            }
            SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
            v359 = v584.__r_.__value_.__r.__words[0];
            if (0x6DB6DB6DB6DB6DB7
               * ((uint64_t)(v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0]) >> 3) > (unint64_t)SiblingNumAtOrigin)
            {
LABEL_454:
              v360 = (uint64_t *)(v359 + 56 * SiblingNumAtOrigin);
              v361 = *v360;
              v362 = v360[1];
              if (v362)
              {
                v363 = (unsigned int *)(v362 + 8);
                do
                  v364 = __ldxr(v363);
                while (__stxr(v364 + 1, v363));
              }
LABEL_460:
              __s1[0] = &v584;
              sub_20C266AD4((void ***)__s1);
              v366 = i;
              v367 = *(unsigned int **)(i + 200);
              *(_QWORD *)(i + 192) = v361;
              *(_QWORD *)(v366 + 200) = v362;
              if (v367)
              {
                v368 = v367 + 2;
                do
                {
                  v369 = __ldxr(v368);
                  v370 = v369 - 1;
                }
                while (__stlxr(v370, v368));
                if (!v370)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v367 + 8))(v367);
              }
              v371 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v554[8]);
              v372 = i;
              *(_DWORD *)(i + 232) = v371;
              *(_OWORD *)__s1 = v372;
              if (*((_QWORD *)&v372 + 1))
              {
                v373 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
                do
                  v374 = __ldxr(v373);
                while (__stxr(v374 + 1, v373));
              }
              sub_20C264D7C((__int128 *)__s1, v593, (char **)(v593 + 40));
              v375 = (std::__shared_weak_count *)__s1[1];
              if (__s1[1])
              {
                v376 = (unint64_t *)((char *)__s1[1] + 8);
                do
                  v377 = __ldaxr(v376);
                while (__stlxr(v377 - 1, v376));
                if (!v377)
                {
                  ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                  std::__shared_weak_count::__release_weak(v375);
                }
              }
              v378 = (std::__shared_weak_count *)*((_QWORD *)&i + 1);
              if (*((_QWORD *)&i + 1))
              {
                v379 = (unint64_t *)(*((_QWORD *)&i + 1) + 8);
                do
                  v380 = __ldaxr(v379);
                while (__stlxr(v380 - 1, v379));
                if (!v380)
                {
                  ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                  std::__shared_weak_count::__release_weak(v378);
                }
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&OriginNode + 1);
              sub_20BFD265C(&OriginNode);
LABEL_479:
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v577 + 1);
              sub_20BFD265C(&v577);
              goto LABEL_580;
            }
            __s1[0] = "pcp/primIndex.cpp";
            __s1[1] = "operator()";
            *(_QWORD *)v565 = 2478;
            *(_QWORD *)&v565[8] = "auto pxrInternal__aapl__pxrReserved__::_EvalUnresolvedPrimPathError(const PcpNodeRef &"
                                  ", Pcp_PrimIndexer *)::(anonymous class)::operator()() const";
            v565[16] = 0;
            if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "arcNum < srcInfo.size()", 0))
            {
              v359 = v584.__r_.__value_.__r.__words[0];
              goto LABEL_454;
            }
LABEL_459:
            v362 = 0;
            v361 = 0;
            goto LABEL_460;
          case 17:
            LOBYTE(v117) = 0;
            goto LABEL_581;
          default:
            goto LABEL_581;
        }
      }
    }
    if (a7 || !(_DWORD)a4)
      goto LABEL_34;
    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)a8, (uint64_t *)__s1);
    if (sub_20C1020E4(__s1, (_QWORD *)a1))
    {
      pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(*(pxrInternal__aapl__pxrReserved__::PcpCache **)a8, (uint64_t)&v591);
      IsEquivalentTo = pxrInternal__aapl__pxrReserved__::PcpPrimIndexInputs::IsEquivalentTo((uint64_t)&v591, a8);
      if ((v598[15] & 0x80000000) != 0)
        operator delete(__p);
      v35 = v596;
      if (v596 == &v593)
      {
        v36 = 4;
        v35 = &v593;
        goto LABEL_22;
      }
      if (v596)
      {
        v36 = 5;
LABEL_22:
        (*(void (**)(void))(*v35 + 8 * v36))();
      }
    }
    else
    {
      IsEquivalentTo = 0;
    }
    v37 = __s1[1];
    if (__s1[1])
    {
      v38 = (unsigned int *)((char *)__s1[1] + 8);
      do
      {
        v39 = __ldxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
        (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
    }
    if (IsEquivalentTo)
    {
      v41 = *(uint64_t **)(a8 + 64);
      if (!v41)
      {
        v42 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)a8;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), &v591);
        v41 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexWithCompatibleInputs(v42, &v591, a8, (char *)a9 + 40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v591.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&v591);
      }
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New(v41, &v591);
      v43 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a9;
      *(_QWORD *)a9 = v591.__r_.__value_.__r.__words[0];
      sub_20BF1DD04((uint64_t *)&v591);
      sub_20BF1D8F4((int)a9, v43);
      sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v591);
      IsInstanceable = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v41);
      if (sub_20C1FE3D8(2))
      {
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a9);
        __s1[0] = v62;
        __s1[1] = v63;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v17, v554);
        v64 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v554);
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Retrieved index for <%s> from cache", v65, v66, v64);
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate((uint64_t)a9, (__int128 *)__s1, &v591);
        if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v591.__r_.__value_.__l.__data_);
        sub_20BFD1A18(v554);
        if ((IsInstanceable & 1) == 0)
          goto LABEL_44;
      }
      else if (!IsInstanceable)
      {
        goto LABEL_44;
      }
      goto LABEL_35;
    }
LABEL_34:
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), __s1);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v591, a1, __s1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__s1 + 1);
    sub_20BFD265C(__s1);
    sub_20C25B1D4(&v591, &v591, (a3 + 1), a4, a5, 1, a7, a8, a9);
    v46 = pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexIsInstanceable(a9, v45);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v591.__r_.__value_.__r.__words[1] + 1);
    sub_20BFD265C(&v591.__r_.__value_.__r.__words[1]);
    sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v591);
    if (!v46)
    {
LABEL_44:
      v67 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_20C21137C((uint64_t *)a9);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::AppendChildNameToAllSites(v67, v17);
      v68 = sub_20C21137C((uint64_t *)a9);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetHasPayloads(v68, 0);
      *((_DWORD *)a9 + 16) = 0;
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a9);
      __s1[0] = v69;
      __s1[1] = v70;
      sub_20C260348((unint64_t)v69, (uint64_t)v70, a8, 1);
      if ((a6 & 1) == 0)
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__s1, 1, v71);
      if (sub_20C1FE3D8(2))
      {
        v548 = (uint64_t)a9;
        if (a7)
          v548 = *(_QWORD *)(a7 + 48);
        Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v17);
        if (*((char *)Name + 23) >= 0)
          v552 = (uint64_t)Name;
        else
          v552 = *Name;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Adjusted ancestral index for %s", v550, v551, v552);
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(v548, (__int128 *)__s1, &v591);
        if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v591.__r_.__value_.__l.__data_);
      }
      goto LABEL_47;
    }
LABEL_35:
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a9);
    v48 = (const char *)v47;
    v50 = v49;
    v591.__r_.__value_.__r.__words[0] = v47;
    v591.__r_.__value_.__l.__size_ = v49;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v591, 1, v51);
    v595 = (uint64_t *)v48;
    v596 = (uint64_t *)v50;
    v54 = **((_QWORD **)v48 + 2);
    v55 = *(unsigned __int16 *)(v54 + 48 * v50 + 28);
    v591.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    v591.__r_.__value_.__l.__size_ = v55;
    v591.__r_.__value_.__r.__words[2] = v54;
    v592 = v48;
    v56 = 0xFFFFLL;
    v593 = 0xFFFFLL;
    v594 = v54;
    while (v55 != v56 || v591.__r_.__value_.__l.__data_ != v592)
    {
      v57 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(&v591, v52, v53);
      sub_20C2604C8(v57, (uint64_t)__s1, 0);
      sub_20C2049E8(&v591);
      v55 = v591.__r_.__value_.__l.__size_;
      v56 = v593;
    }
    goto LABEL_44;
  }
LABEL_763:
  if (v562)
    return pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PopIndex(&v562);
  return result;
}

void sub_20C25EE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a61)
{
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  sub_20BFD1A18(&a51);
  sub_20C260310(&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_20C25F948(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  uint64_t v15;
  char *v16;
  uint64_t OriginNode;
  uint64_t v18;
  uint64_t v19;
  uint64_t ParentNode;
  uint64_t v21;
  uint64_t v22;
  char IsRootPrimPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  int v36;

  *(_QWORD *)&v28 = a1;
  *((_QWORD *)&v28 + 1) = a2;
  *(_QWORD *)&v34 = a1;
  *((_QWORD *)&v34 + 1) = a2;
  v6 = **(_QWORD **)(a1 + 16);
  v7 = *(unsigned __int16 *)(v6 + 48 * a2 + 28);
  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = v7;
  v30 = v6;
  v31 = a1;
  v8 = 0xFFFFLL;
  v32 = 0xFFFFLL;
  v33 = v6;
  while (v7 != v8 || (_QWORD)v29 != v31)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v29, a2, a3);
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v9) != 6)
    {
      v12 = sub_20C20495C(&v29, v10, v11);
      sub_20C25F948(*v12, v12[1], a3, a4);
    }
    sub_20C2049E8(&v29);
    v7 = *((_QWORD *)&v29 + 1);
    v8 = v32;
  }
  if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28) & 1) != 0)
    goto LABEL_8;
  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
  if ((result & 1) == 0)
  {
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28, v14);
    if ((_DWORD)result)
    {
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
      if ((result & 1) == 0)
      {
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28) != 1
          || *(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28) != *(_QWORD *)a3)
        {
          goto LABEL_20;
        }
        OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
        v19 = v18;
        ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
        if (v19 == v21 && OriginNode == ParentNode)
        {
          v29 = v28;
        }
        else
        {
          *(_QWORD *)&v29 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
          *((_QWORD *)&v29 + 1) = v22;
        }
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29, &v35);
        IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
        result = (uint64_t)sub_20BFD265C(&v35);
        if ((IsRootPrimPath & 1) != 0)
        {
LABEL_20:
          v34 = v28;
          v24 = **(_QWORD **)(v28 + 16);
          v25 = *(unsigned __int16 *)(v24 + 48 * *((_QWORD *)&v28 + 1) + 28);
          *(_QWORD *)&v29 = v28;
          *((_QWORD *)&v29 + 1) = v25;
          v30 = v24;
          v31 = v28;
          v26 = 0xFFFFLL;
          v32 = 0xFFFFLL;
          v33 = v24;
          while (v25 != v26 || (_QWORD)v29 != v31)
          {
            v27 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(&v29, v15, v16);
            result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(v27);
            if (!(_DWORD)result)
              return result;
            sub_20C2049E8(&v29);
            v25 = *((_QWORD *)&v29 + 1);
            v26 = v32;
          }
          if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28)
            || (result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28),
                (result & 1) == 0))
          {
LABEL_8:
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetCulled(&v28, 1);
            return (uint64_t)pxrInternal__aapl__pxrReserved__::Pcp_AddCulledDependency((pxrInternal__aapl__pxrReserved__ *)&v28, a4);
          }
        }
      }
    }
  }
  return result;
}

void sub_20C25FB6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v1 + 4));
  sub_20BFD265C((_DWORD *)(v2 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComputePrimChildNames(uint64_t *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (*a1)
  {
    sub_20C25FE2C((uint64_t)&v23, *a2, a2[1], 0);
    if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1))
    {
      v6 = *a1;
      if (*a1)
        LODWORD(v6) = (*(unsigned __int8 *)(sub_20C21137C(a1) + 56) >> 3) & 1;
      v25 = a1;
      v26 = v6;
      v27 = a2;
      v28 = &v23;
      v29 = a3;
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1);
      v36 = v9;
      v37 = v7;
      v10 = **(_QWORD **)(v9 + 16);
      v11 = *(unsigned __int16 *)(v10 + 48 * v7 + 30);
      v30 = (void **)v9;
      v31 = v11;
      v32 = v10;
      v33 = (void **)v9;
      v12 = 0xFFFFLL;
      v34 = 0xFFFFLL;
      v35 = v10;
      while (v11 != v12 || v30 != v33)
      {
        v13 = sub_20C20ACFC(&v30, v7, v8);
        sub_20C26C9DC(v13, (uint64_t *)&v25, 0);
        sub_20C20AD88(&v30);
        v11 = v31;
        v12 = v34;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1);
      v30 = v14;
      v31 = v15;
      if (*a1)
        v16 = (*(unsigned __int8 *)(sub_20C21137C(a1) + 56) >> 3) & 1;
      else
        v16 = 0;
      sub_20C25FEA8((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v30, v16, (uint64_t *)a2, &v23, a3);
    }
    if (!a3[6])
      goto LABEL_33;
    v17 = *a2;
    v18 = a2[1];
    if (*a2 == v18)
      goto LABEL_31;
    v19 = a2[1];
    while (a3[4] + 16 * a3[5] == sub_20C26D308(a3, v17, bswap64(0x9E3779B97F4A7C55 * (*v17 & 0xFFFFFFFFFFFFFFF8))))
    {
      if (++v17 == v18)
        goto LABEL_32;
    }
    if (v17 == v18)
      goto LABEL_32;
    v20 = v17 + 1;
    if (v17 + 1 == v18)
    {
LABEL_31:
      v19 = v17;
    }
    else
    {
      v19 = v17;
      do
      {
        if (a3[4] + 16 * a3[5] == sub_20C26D308(a3, v20, bswap64(0x9E3779B97F4A7C55 * (*v20 & 0xFFFFFFFFFFFFFFF8))))
        {
          if (v20 != v19)
          {
            if ((*v19 & 7) != 0)
            {
              v21 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
              do
                v22 = __ldxr(v21);
              while (__stlxr(v22 - 2, v21));
            }
            *v19 = *v20;
            *v20 = 0;
          }
          ++v19;
        }
        ++v20;
      }
      while (v20 != v18);
    }
LABEL_32:
    sub_20C117D14((uint64_t)a2, v19, a2[1]);
LABEL_33:
    v30 = (void **)&v24;
    sub_20C2207E4(&v30);
  }
}

void sub_20C25FDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 72) = &a10;
  sub_20C2207E4((void ***)(v10 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_20C25FE2C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;

  v7 = sub_20C2205D4(a1, a4, 0.0, 0.5);
  sub_20C234554(v7, a2, a3);
  return a1;
}

void sub_20C25FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 8);
  sub_20C2207E4(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C25FEA8(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if ((result & 1) == 0)
  {
    v13 = *((_QWORD *)a1 + 1);
    v24 = *(_QWORD *)a1;
    v25 = v13;
    v14 = **(_QWORD **)(v24 + 16);
    v15 = *(unsigned __int16 *)(v14 + 48 * v13 + 30);
    v18 = v24;
    v19 = v15;
    v20 = v14;
    v21 = v24;
    v16 = 0xFFFFLL;
    v22 = 0xFFFFLL;
    v23 = v14;
    while (v15 != v16 || v18 != v21)
    {
      v17 = sub_20C20ACFC(&v18, v11, v12);
      sub_20C25FEA8(v17, a2, a3, a4, a5);
      sub_20C20AD88(&v18);
      v15 = v19;
      v16 = v22;
    }
    return sub_20C26CAF8(a1, a2, a3, a4, a5);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComputePrimPropertyNames(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a1, uint64_t **a2)
{
  void **v4;
  void **v5;
  uint64_t v6;
  void **v7[2];
  int v8;
  uint64_t v9;

  if (*(_QWORD *)a1)
  {
    sub_20C2205D4((uint64_t)&v8, 0, 0.0, 0.5);
    sub_20C234554((uint64_t)&v8, *a2, a2[1]);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a1);
    v7[0] = v4;
    v7[1] = v5;
    if (*(_QWORD *)a1)
      v6 = (*(unsigned __int8 *)(sub_20C21137C((uint64_t *)a1) + 56) >> 3) & 1;
    else
      v6 = 0;
    sub_20C260050((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7, v6, (void **)a2, &v8);
    v7[0] = (void **)&v9;
    sub_20C2207E4(v7);
  }
}

void sub_20C26002C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a10 = (void **)&a13;
  sub_20C2207E4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C260050(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, void **a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v17;
  uint64_t *Layers;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v20;
  char *v21;
  const pxrInternal__aapl__pxrReserved__::TfToken *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if ((result & 1) == 0)
  {
    v11 = *((_QWORD *)a1 + 1);
    v31 = *(_QWORD *)a1;
    v32 = v11;
    v12 = **(_QWORD **)(v31 + 16);
    v13 = *(unsigned __int16 *)(v12 + 48 * v11 + 30);
    v25 = v31;
    v26 = v13;
    v27 = v12;
    v28 = v31;
    v14 = 0xFFFFLL;
    v29 = 0xFFFFLL;
    v30 = v12;
    while (v13 != v14 || v25 != v28)
    {
      v15 = sub_20C20ACFC(&v25, v9, v10);
      sub_20C260050(v15, a2, a3, a4);
      sub_20C20AD88(&v25);
      v13 = v26;
      v14 = v29;
    }
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a1);
    if ((result & 1) != 0)
    {
      LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
      v17 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
      Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v17);
      Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v20)
        v20 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      v21 = (char *)v20 + 40;
      if ((a2 & 1) != 0)
      {
        v22 = 0;
      }
      else
      {
        v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v23)
        {
          v24 = v21;
          v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          v21 = v24;
        }
        v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v23 + 272);
      }
      return (uint64_t)pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, Path, v21, a3, a4, v22);
    }
  }
  return result;
}

_WORD *sub_20C2601A4(_WORD *a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  char v10;

  *a1 = a2;
  a1[1] = a3;
  if (a2 >= 0x10000)
  {
    v6 = "pcp/types.h";
    v7 = "Pcp_CompressedSdSite";
    v8 = 181;
    v9 = "pxrInternal__aapl__pxrReserved__::Pcp_CompressedSdSite::Pcp_CompressedSdSite(size_t, size_t)";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v6, "nodeIndex_ < (size_t(1) << 16)", 0);
  }
  if (a3 >= 0x10000)
  {
    v6 = "pcp/types.h";
    v7 = "Pcp_CompressedSdSite";
    v8 = 182;
    v9 = "pxrInternal__aapl__pxrReserved__::Pcp_CompressedSdSite::Pcp_CompressedSdSite(size_t, size_t)";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v6, "layerIndex_ < (size_t(1) << 16)", 0);
  }
  return a1;
}

uint64_t sub_20C260268(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_20BFD265C((_DWORD *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C2602AC(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 192))
    sub_20C26B538(a1 + 152);
  v3 = (void **)(a1 + 80);
  sub_20C2608C0(&v3);
  sub_20C260698((void **)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

const pxrInternal__aapl__pxrReserved__::PcpPrimIndex **sub_20C260310(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex **this)
{
  if (*this)
    pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PopIndex(this);
  return this;
}

uint64_t sub_20C260348(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t *LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  char HasPrimSpecs;
  uint64_t *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  int v14;
  char *v15;
  uint64_t *v16;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  int HasSymmetry;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v32 = a1;
  v33 = a2;
  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
  if ((_DWORD)result)
  {
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
    Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
    HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v32, HasPrimSpecs);
  }
  if (!*(_BYTE *)(a3 + 97))
  {
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
    if ((result & 1) == 0)
    {
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
      if ((_DWORD)result)
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32))
        {
          v12 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
          v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
          v14 = pxrInternal__aapl__pxrReserved__::PcpComposeSitePermission(v12, v13);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetPermission(&v32, v14, v15);
        }
        result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
        if ((result & 1) == 0)
        {
          v16 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
          v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
          HasSymmetry = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasSymmetry(v16, v17);
          result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32, HasSymmetry, v19);
        }
      }
    }
  }
  v30 = v32;
  v31 = v33;
  v20 = **(_QWORD **)(v32 + 16);
  v21 = *(unsigned __int16 *)(v20 + 48 * v33 + 28);
  v24 = v32;
  v25 = v21;
  v26 = v20;
  v27 = v32;
  v22 = 0xFFFFLL;
  v28 = 0xFFFFLL;
  v29 = v20;
  while (v21 != v22 || v24 != v27)
  {
    v23 = sub_20C20495C(&v24, v7, v8);
    sub_20C260348(*v23, v23[1], a3, 0);
    result = (uint64_t)sub_20C2049E8(&v24);
    v21 = v25;
    v22 = v28;
  }
  if ((a4 & 1) == 0)
    return (uint64_t)pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetIsDueToAncestor(&v32, 1);
  return result;
}

uint64_t sub_20C2604C8(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if ((result & 1) != 0)
    return result;
  if ((a3 & 1) != 0)
  {
    v7 = 1;
    goto LABEL_6;
  }
  v7 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1) ^ 1;
  if ((v7 & 1) != 0)
  {
LABEL_6:
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
    v16 = *(_OWORD *)a1;
    if ((_DWORD)result)
      return result;
    goto LABEL_8;
  }
  v16 = *(_OWORD *)a1;
LABEL_8:
  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v16, 1, v8);
  v11 = *((_QWORD *)a1 + 1);
  v21 = *(_QWORD *)a1;
  v22 = v11;
  v12 = **(_QWORD **)(v21 + 16);
  v13 = *(unsigned __int16 *)(v12 + 48 * v11 + 28);
  *(_QWORD *)&v16 = v21;
  *((_QWORD *)&v16 + 1) = v13;
  v17 = v12;
  v18 = v21;
  v14 = 0xFFFFLL;
  v19 = 0xFFFFLL;
  v20 = v12;
  while (v13 != v14 || (_QWORD)v16 != v18)
  {
    v15 = sub_20C20495C(&v16, v9, v10);
    sub_20C2604C8(v15, a2, v7);
    result = (uint64_t)sub_20C2049E8(&v16);
    v13 = *((_QWORD *)&v16 + 1);
    v14 = v19;
  }
  return result;
}

uint64_t sub_20C2605B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, char a7, char a8)
{
  _DWORD *v16;
  _DWORD *v17;

  v16 = (_DWORD *)(a4 + 12);
  *(_QWORD *)a1 = *(_QWORD *)a4;
  v17 = (_DWORD *)(a1 + 12);
  sub_20BF1DD04((uint64_t *)a1);
  sub_20BFD6E54((_DWORD *)(a1 + 8), (_DWORD *)(a4 + 8));
  sub_20BFD6EA4(v17, v16);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20C2606F8(a1 + 72, 0, 0.0, 0.5);
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = a7;
  *(_BYTE *)(a1 + 201) = a8;
  return a1;
}

void sub_20C26067C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  sub_20C260698(v2);
  sub_20C20ACC8(v1);
  _Unwind_Resume(a1);
}

void **sub_20C260698(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 56;
        sub_20C2609A8(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20C2606F8(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  unsigned __int8 v11;
  unint64_t v12;
  float v13;
  std::logic_error *exception;
  uint64_t v16[2];
  char v17;

  v16[0] = a2;
  sub_20BED1408((unint64_t *)a1, v16);
  v7 = v16[0];
  if ((unint64_t)v16[0] >> 58)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v16[1] = a1 + 8;
  v17 = 0;
  if (v7)
  {
    v8 = (int *)operator new(v7 << 6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[16 * v7];
    *(_QWORD *)(a1 + 24) = v9;
    v10 = v8;
    do
    {
      *v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((_BYTE *)v10 + 6) = 0;
      v10 += 16;
    }
    while (v10 != v9);
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_2549882A0);
    if ((v11 & 1) != 0)
    {
      v8 = &dword_254988260;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_2549882A0))
      {
        dword_254988260 = 0;
        word_254988264 = -1;
        byte_254988266 = 1;
        __cxa_atexit((void (*)(void *))sub_20C260930, &dword_254988260, &dword_20BDBC000);
        __cxa_guard_release(&qword_2549882A0);
      }
      v8 = &dword_254988260;
    }
  }
  v12 = v16[0];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v12)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 58) = 1;
  v13 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v13;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v13 * (float)v12);
  return a1;
}

void sub_20C26089C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_20C2608C0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_20C260954(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C260930(uint64_t a1)
{
  sub_20C260954(a1);
  return a1;
}

void sub_20C260954(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
    sub_20BFD265C((_DWORD *)(a1 + 56));
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    *(_WORD *)(a1 + 4) = -1;
  }
}

void sub_20C2609A8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_20BFD265C((_DWORD *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_20C2609F0(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v21;
  uint64_t Layers;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v23;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  unsigned int HasField;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v33;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v34;
  BOOL v36;
  pxrInternal__aapl__pxrReserved__::SdfPath *v37;
  pxrInternal__aapl__pxrReserved__::SdfPath *v38;
  unint64_t SpecContributionRestrictedDepth;
  unint64_t i;
  uint64_t *v41;
  BOOL IsAbsoluteRootPath;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v48;
  uint64_t v49;
  char v50;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v51;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  void *__p;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  int v61;
  int v62;

  v14 = *((_QWORD *)a2 + 1);
  v60[0] = *(_QWORD *)a2;
  v60[1] = v14;
  v15 = **(_QWORD **)(v60[0] + 16);
  v16 = *(unsigned __int16 *)(v15 + 48 * v14 + 28);
  v55 = v60[0];
  *(_QWORD *)&v56 = v16;
  *((_QWORD *)&v56 + 1) = v15;
  __p = (void *)v60[0];
  v17 = 0xFFFFLL;
  v58 = 0xFFFFLL;
  v59 = v15;
  while (v16 != v17 || (void *)v55 != __p)
  {
    v18 = sub_20C20495C(&v55, (uint64_t)a2, a3);
    sub_20C2609F0(a1, v18, a3, a4, a5, a6, a7);
    sub_20C2049E8(&v55);
    v16 = v56;
    v17 = v58;
  }
  v51 = a2;
  v54 = a1;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a2)
    && pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a2)
    && (Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a2),
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2),
        v21 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack),
        Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v21),
        v24 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)Layers,
        v23 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)(Layers + 8),
        *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)Layers != v23))
  {
    v25 = 0;
    v52 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)(Layers + 8);
    do
    {
      v26 = *v24;
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(*v24, Path))
      {
        v27 = v25;
        v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v28)
          v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v28 + 192), 0);
        v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v30)
          v30 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v25 = v27 | HasField;
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v30 + 472), 0))v25 |= 2uLL;
        v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v31)
          v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v31 + 280), 0))v25 |= 4uLL;
        v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v23 = v52;
        if (!v32)
          v32 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v32 + 240), 0))v25 |= 8uLL;
        v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v33)
          v33 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v33 + 304), 0))v25 |= 0x10uLL;
      }
      ++v24;
    }
    while (v24 != v23);
  }
  else
  {
    LOBYTE(v25) = 0;
  }
  v34 = v51;
  if ((a5 & 1) != 0
    && (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v51) == 4
     || pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v51) == 5))
  {
    v55 = 16;
    v56 = *(_OWORD *)v51;
    v58 = 0;
    v59 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_20C261350(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_20BFD265C(v60);
    if (SHIBYTE(v59) < 0)
      operator delete(__p);
  }
  v36 = (v25 & 2) == 0 || *(_BYTE *)(v54 + 201) == 0;
  if (!(_DWORD)a4)
  {
    v53 = v25;
    if (v36)
      goto LABEL_47;
    v55 = 12;
    v56 = *(_OWORD *)v51;
    v58 = 0;
    v59 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_20C261350(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_20BFD265C(v60);
    if (SHIBYTE(v59) < 0)
    {
      operator delete(__p);
      if (!(_DWORD)a6)
        goto LABEL_66;
    }
    else
    {
LABEL_47:
      if (!(_DWORD)a6)
        goto LABEL_66;
    }
    v37 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(v51);
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath(v37))
    {
      v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(v51);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v38, &v55);
      SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth(v51);
      if (SpecContributionRestrictedDepth)
      {
        for (i = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55);
              i >= SpecContributionRestrictedDepth;
              --i)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55))
            break;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &v61);
          sub_20BFD3EBC((int *)&v55, &v61);
          sub_20BFD3F10((int *)&v55 + 1, &v62);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
          sub_20BFD265C(&v61);
        }
      }
      v41 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(v51);
      while (1)
      {
        IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55);
        if (IsAbsoluteRootPath)
          break;
        v43 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v41);
        v44 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v43);
        v46 = *(uint64_t **)v44;
        v45 = *(uint64_t **)(v44 + 8);
        while (v46 != v45)
        {
          v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v46);
          v48 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v48)
            v48 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v48 + 472), 0) & 1) != 0)goto LABEL_62;
          ++v46;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &v61);
        sub_20BFD3EBC((int *)&v55, &v61);
        sub_20BFD3F10((int *)&v55 + 1, &v62);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
        sub_20BFD265C(&v61);
      }
LABEL_62:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
      sub_20BFD265C(&v55);
      v34 = v51;
      if (!IsAbsoluteRootPath)
      {
        v55 = 7;
        v56 = *(_OWORD *)v51;
        v58 = 0;
        v59 = 0;
        __p = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
        sub_20C261350(v54, (uint64_t)&v55);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
        sub_20BFD265C(v60);
        if (SHIBYTE(v59) < 0)
          operator delete(__p);
      }
    }
LABEL_66:
    if ((a3 & 1) != 0)
    {
      v49 = v54;
      if ((a7 & 1) != 0)
        return;
      goto LABEL_84;
    }
    v50 = v53;
    v49 = v54;
    if ((v53 & 0x10) == 0)
      goto LABEL_71;
    v55 = 6;
    v56 = *(_OWORD *)v34;
    v58 = 0;
    v59 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_20C261350(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_20BFD265C(v60);
    v50 = v53;
    if (SHIBYTE(v59) < 0)
    {
      operator delete(__p);
      if ((v53 & 1) == 0)
        goto LABEL_75;
    }
    else
    {
LABEL_71:
      if ((v50 & 1) == 0)
        goto LABEL_75;
    }
    v55 = 4;
    v56 = *(_OWORD *)v34;
    v58 = 0;
    v59 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_20C261350(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_20BFD265C(v60);
    v50 = v53;
    if (SHIBYTE(v59) < 0)
      operator delete(__p);
    if ((v50 & 8) == 0)
      goto LABEL_77;
LABEL_75:
    v55 = 3;
    v56 = *(_OWORD *)v34;
    v58 = 0;
    v59 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_20C261350(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_20BFD265C(v60);
    v50 = v53;
    if (SHIBYTE(v59) < 0)
    {
      operator delete(__p);
      if ((v53 & 4) != 0)
      {
LABEL_78:
        v55 = 2;
        v56 = *(_OWORD *)v34;
        v58 = 0;
        v59 = 0;
        __p = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
        sub_20C261350(v54, (uint64_t)&v55);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
        sub_20BFD265C(v60);
        if (SHIBYTE(v59) < 0)
          operator delete(__p);
      }
    }
    else
    {
LABEL_77:
      if ((v50 & 4) != 0)
        goto LABEL_78;
    }
    if ((a7 & 1) != 0)
      return;
    v55 = 0;
    v56 = *(_OWORD *)v34;
    v58 = 0;
    v59 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_20C261350(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_20BFD265C(v60);
    if (SHIBYTE(v59) < 0)
      operator delete(__p);
LABEL_84:
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v34) != 3)
      return;
    v55 = 1;
    v56 = *(_OWORD *)v34;
    v58 = 0;
    v59 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_20C261350(v49, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    goto LABEL_86;
  }
  if (v36)
    return;
  v55 = 12;
  v56 = *(_OWORD *)v51;
  v58 = 0;
  v59 = 0;
  __p = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
  sub_20C261350(v54, (uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
LABEL_86:
  sub_20BFD265C(v60);
  if (SHIBYTE(v59) < 0)
    operator delete(__p);
}

void sub_20C2612B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C260268((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C261350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  _BYTE *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 i;
  __int16 *v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 __p;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  __int16 v58;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = (uint64_t *)(a1 + 48);
  if (v4 == *(_QWORD *)(a1 + 56) && (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 64) - v4) >> 3)) <= 7)
  {
    *((_QWORD *)&__p + 1) = a1 + 64;
    *(_QWORD *)&v51 = operator new(0x1C0uLL);
    *((_QWORD *)&v51 + 1) = v51;
    v52 = (char *)v51;
    *(_QWORD *)&__p = v51 + 448;
    sub_20C261900(v5, &v51);
    sub_20C2619E0((uint64_t)&v51);
  }
  if (*(_DWORD *)a2 != 11 && *(_DWORD *)a2 != 5)
    goto LABEL_49;
  v7 = sub_20C261A2C((unsigned int *)a2);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = v8 & v7;
  if (*(__int16 *)(v9 + ((v8 & v7) << 6) + 4) < 0)
  {
    LOWORD(v11) = 0;
LABEL_15:
    if (*(_BYTE *)(a1 + 144) || (v12 = *(_QWORD *)(a1 + 120), v12 >= *(_QWORD *)(a1 + 128)))
    {
      v21 = sub_20BED1164((_QWORD *)(a1 + 72));
      sub_20C261C18((uint64_t *)(a1 + 72), v21);
      *(_BYTE *)(a1 + 144) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 145))
        goto LABEL_32;
      *(_BYTE *)(a1 + 145) = 0;
      v13 = *(float *)(a1 + 136);
      if (v13 == 0.0)
        goto LABEL_32;
      v14 = *(_QWORD *)(a1 + 112);
      v15 = 0.0;
      v16 = (float)v12;
      if (v14)
        v15 = (float)v12 / (float)v14;
      if (v15 >= v13)
        goto LABEL_32;
      v17 = *(float *)(a1 + 140);
      v18 = vcvtps_u32_f32((float)(v12 + 1) / v17);
      v19 = vcvtps_u32_f32(v16 / v17);
      if (v19 <= v18)
        v20 = v18;
      else
        v20 = v19;
      sub_20C261C18((uint64_t *)(a1 + 72), v20);
    }
    v22 = *(_QWORD *)(a1 + 72);
    v9 = *(_QWORD *)(a1 + 104);
    v10 = v22 & v7;
    if (*(__int16 *)(v9 + ((v22 & v7) << 6) + 4) < 0)
    {
      LOWORD(v11) = 0;
    }
    else
    {
      LOWORD(v11) = 0;
      do
      {
        v11 = (__int16)(v11 + 1);
        v10 = (v10 + 1) & v22;
      }
      while (v11 <= *(__int16 *)(v9 + (v10 << 6) + 4));
    }
LABEL_32:
    v23 = v9 + (v10 << 6);
    v24 = (__int128 *)(a2 + 24);
    if (*(__int16 *)(v23 + 4) == -1)
    {
      v25 = *(_OWORD *)a2;
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)(v23 + 8) = v25;
      v26 = (_BYTE *)(v23 + 32);
      if (*(char *)(a2 + 47) < 0)
      {
        sub_20BDDBFAC(v26, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
      }
      else
      {
        v27 = *v24;
        *(_QWORD *)(v23 + 48) = *(_QWORD *)(a2 + 40);
        *(_OWORD *)v26 = v27;
      }
      v39 = v9 + (v10 << 6);
      sub_20BFD6E54((_DWORD *)(v39 + 56), (_DWORD *)(a2 + 48));
      sub_20BFD6EA4((_DWORD *)(v39 + 60), (_DWORD *)(a2 + 52));
      *(_DWORD *)v23 = v7;
      *(_WORD *)(v23 + 4) = v11;
    }
    else
    {
      v51 = *(_OWORD *)a2;
      v52 = *(char **)(a2 + 16);
      if (*(char *)(a2 + 47) < 0)
      {
        sub_20BDDBFAC(&__p, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
      }
      else
      {
        __p = *v24;
        v54 = *(_QWORD *)(a2 + 40);
      }
      sub_20BFD6E54(&v55, (_DWORD *)(a2 + 48));
      sub_20BFD6EA4(&v56, (_DWORD *)(a2 + 52));
      v58 = v11;
      v57 = v7;
      sub_20C261E24((int *)(*(_QWORD *)(a1 + 104) + (v10 << 6)), &v58, &v57, (int *)&v51);
      v28 = *(_QWORD *)(a1 + 72);
      v29 = v28 & (v10 + 1);
      v30 = ++v58;
      v31 = *(_QWORD *)(a1 + 104);
      v32 = v31 + (v29 << 6);
      v34 = (__int16 *)(v32 + 4);
      for (i = *(_WORD *)(v32 + 4); (unsigned __int16)i != 0xFFFF; i = *(_WORD *)(v32 + 4))
      {
        if (v30 > i)
        {
          if (v30 >= 4096)
            *(_BYTE *)(a1 + 144) = 1;
          sub_20C261E24((int *)v32, &v58, &v57, (int *)&v51);
          v28 = *(_QWORD *)(a1 + 72);
          v30 = v58;
          v31 = *(_QWORD *)(a1 + 104);
        }
        v29 = v28 & (v29 + 1);
        v58 = ++v30;
        v32 = v31 + (v29 << 6);
        v34 = (__int16 *)(v32 + 4);
      }
      v35 = v57;
      v36 = v31 + (v29 << 6);
      v37 = v52;
      *(_OWORD *)(v36 + 8) = v51;
      *(_QWORD *)(v36 + 24) = v37;
      v38 = v54;
      *(_OWORD *)(v36 + 32) = __p;
      *(_QWORD *)(v36 + 48) = v38;
      v54 = 0;
      __p = 0uLL;
      sub_20BFD38A4((_DWORD *)(v36 + 56), &v55);
      sub_20BFD38DC((_DWORD *)(v36 + 60), &v56);
      *(_DWORD *)v32 = v35;
      *v34 = v30;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
      sub_20BFD265C(&v55);
      if (SHIBYTE(v54) < 0)
        operator delete((void *)__p);
    }
    ++*(_QWORD *)(a1 + 120);
LABEL_49:
    v40 = *(_QWORD *)(a1 + 64);
    v41 = *(_QWORD *)(a1 + 56);
    if (v41 >= v40)
    {
      v45 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v41 - *v5) >> 3);
      if ((unint64_t)(v45 + 1) > 0x492492492492492)
        sub_20BDDF694();
      v46 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v40 - *v5) >> 3);
      v47 = 2 * v46;
      if (2 * v46 <= v45 + 1)
        v47 = v45 + 1;
      if (v46 >= 0x249249249249249)
        v48 = 0x492492492492492;
      else
        v48 = v47;
      *((_QWORD *)&__p + 1) = a1 + 64;
      if (v48)
      {
        if (v48 > 0x492492492492492)
          sub_20BDDF5B4();
        v49 = (char *)operator new(56 * v48);
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[56 * v45];
      *(_QWORD *)&v51 = v49;
      *((_QWORD *)&v51 + 1) = v50;
      *(_QWORD *)&__p = &v49[56 * v48];
      *(_OWORD *)v50 = *(_OWORD *)a2;
      *((_QWORD *)v50 + 2) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)(v50 + 24) = *(_OWORD *)(a2 + 24);
      *((_QWORD *)v50 + 5) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      sub_20BFD38A4((_DWORD *)v50 + 12, (_DWORD *)(a2 + 48));
      sub_20BFD38DC((_DWORD *)v50 + 13, (_DWORD *)(a2 + 52));
      v52 = v50 + 56;
      sub_20C261900(v5, &v51);
      v44 = *(_QWORD *)(a1 + 56);
      sub_20C2619E0((uint64_t)&v51);
    }
    else
    {
      v42 = *(_OWORD *)a2;
      *(_QWORD *)(v41 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v41 = v42;
      v43 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(v41 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(v41 + 24) = v43;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      sub_20BFD38A4((_DWORD *)(v41 + 48), (_DWORD *)(a2 + 48));
      sub_20BFD38DC((_DWORD *)(v41 + 52), (_DWORD *)(a2 + 52));
      v44 = v41 + 56;
    }
    *(_QWORD *)(a1 + 56) = v44;
    sub_20C261ED4(*(_QWORD *)(a1 + 48), v44, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(0x6DB6DB6DB6DB6DB7 * ((v44 - *(_QWORD *)(a1 + 48)) >> 3)));
    return;
  }
  LOWORD(v11) = 0;
  while (!sub_20C261AB0(v9 + (v10 << 6) + 8, a2))
  {
    v11 = (__int16)(v11 + 1);
    v10 = (v10 + 1) & v8;
    if (v11 > *(__int16 *)(v9 + (v10 << 6) + 4))
      goto LABEL_15;
  }
}

uint64_t *sub_20C261900(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = v4 + v7;
      v10 = *(_OWORD *)(v4 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(v4 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v10;
      v11 = *(_OWORD *)(v4 + v7 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(v4 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v11;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      sub_20BFD38A4((_DWORD *)(v6 + v7 - 8), (_DWORD *)(v4 + v7 - 8));
      result = (uint64_t *)sub_20BFD38DC((_DWORD *)(v6 + v7 - 4), (_DWORD *)(v4 + v7 - 4));
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v12 = *v3;
  *v3 = v6;
  a2[1] = v12;
  v13 = v3[1];
  v3[1] = a2[2];
  a2[2] = v13;
  v14 = v3[2];
  v3[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2619E0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_20C2609A8(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t sub_20C261A2C(unsigned int *a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t UniqueIdentifier;
  unint64_t v6;
  char v7;

  v2 = a1 + 12;
  v3 = *a1;
  v7 = 1;
  UniqueIdentifier = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a1 + 2));
  v6 = UniqueIdentifier
     + ((unint64_t)(UniqueIdentifier + v3 + (UniqueIdentifier + v3) * (UniqueIdentifier + v3)) >> 1);
  sub_20C261BA4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v6, (int *)a1 + 1, (uint64_t)(a1 + 6), v2);
  return bswap64(0x9E3779B97F4A7C55 * v6);
}

BOOL sub_20C261AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;

  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
  {
    return 0;
  }
  v4 = *(unsigned __int8 *)(a1 + 47);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 47);
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a2 + 47);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 32);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 24);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 24);
  else
    v9 = *(unsigned __int8 **)(a2 + 24);
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(_QWORD *)(a1 + 32)))
      return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
    return 0;
  }
  if (*(_BYTE *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
    }
    return 0;
  }
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
}

uint64_t sub_20C261BA4(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, int *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  int v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  char *v9;

  v6 = *a2;
  if (*((_BYTE *)this + 8))
    v6 += (unint64_t)(*(_QWORD *)this + v6 + (*(_QWORD *)this + v6) * (*(_QWORD *)this + v6)) >> 1;
  else
    *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = v6;
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = (pxrInternal__aapl__pxrReserved__ *)a3;
  else
    v8 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  if (v7 >= 0)
    v9 = (char *)*(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(char **)(a3 + 8);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(this, v8, v9);
  return sub_20BFD84AC((uint64_t)this, a4);
}

__n128 sub_20C261C18(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  int64x2_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __n128 result;
  uint64_t v24;
  int64x2_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int16 v32;
  int64x2_t *v33;

  sub_20C2606F8((uint64_t)&v24, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  v3 = v27;
  v4 = (unsigned int *)a1[1];
  v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    v17 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  v6 = (unint64_t)(v27 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1)
      goto LABEL_13;
    if (v6)
      v7 = sub_20C261A2C(v4 + 2);
    else
      v7 = *v4;
    v8 = 0;
    v9 = v24;
    v10 = v24 & v7;
    v32 = 0;
    LODWORD(v33) = v7;
    while (1)
    {
      v11 = *((_QWORD *)&v26 + 1) + (v10 << 6);
      v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8)
        goto LABEL_11;
      if (v12 == -1)
        break;
      sub_20C261E24((int *)(*((_QWORD *)&v26 + 1) + (v10 << 6)), &v32, (int *)&v33, (int *)v4 + 2);
      v8 = v32;
      v9 = v24;
LABEL_11:
      v32 = ++v8;
      v10 = v9 & (v10 + 1);
    }
    v13 = (int)v33;
    v14 = *((_QWORD *)&v26 + 1) + (v10 << 6);
    v15 = *((_QWORD *)v4 + 3);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v4 + 2);
    *(_QWORD *)(v14 + 24) = v15;
    v16 = *((_QWORD *)v4 + 6);
    *(_OWORD *)(v14 + 32) = *((_OWORD *)v4 + 2);
    *(_QWORD *)(v14 + 48) = v16;
    *((_QWORD *)v4 + 5) = 0;
    *((_QWORD *)v4 + 6) = 0;
    *((_QWORD *)v4 + 4) = 0;
    sub_20BFD38A4((_DWORD *)(v14 + 56), v4 + 14);
    sub_20BFD38DC((_DWORD *)(v14 + 60), v4 + 15);
    *(_DWORD *)v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 16;
  }
  while (v4 != v5);
  v17 = *(int64x2_t *)(a1 + 1);
  v3 = v27;
LABEL_16:
  v18 = v24;
  v24 = *a1;
  *a1 = v18;
  v19 = v25;
  v25 = v17;
  *(int64x2_t *)(a1 + 1) = v19;
  v20 = v26;
  v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v20;
  v21 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  v27 = v21;
  v22 = v28;
  v28 = a1[7];
  a1[7] = v22;
  *(_QWORD *)&v20 = v29;
  v29 = a1[8];
  a1[8] = v20;
  LOBYTE(v22) = v30;
  v30 = *((_BYTE *)a1 + 72);
  *((_BYTE *)a1 + 72) = v22;
  LOBYTE(v22) = v31;
  v31 = *((_BYTE *)a1 + 73);
  *((_BYTE *)a1 + 73) = v22;
  v33 = &v25;
  sub_20C2608C0((void ***)&v33);
  return result;
}

void sub_20C261E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)&a10;
  sub_20C2608C0(&a20);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C261E24(int *a1, __int16 *a2, int *a3, int *a4)
{
  int v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _DWORD *result;
  __int16 v13;
  int v14;

  v7 = *a4;
  *a4 = a1[2];
  a1[2] = v7;
  v8 = *(_OWORD *)(a4 + 2);
  *(_OWORD *)(a4 + 2) = *((_OWORD *)a1 + 1);
  *((_OWORD *)a1 + 1) = v8;
  v9 = *((_QWORD *)a4 + 5);
  v10 = *(_OWORD *)(a4 + 6);
  v11 = *((_QWORD *)a1 + 6);
  *(_OWORD *)(a4 + 6) = *((_OWORD *)a1 + 2);
  *((_QWORD *)a4 + 5) = v11;
  *((_OWORD *)a1 + 2) = v10;
  *((_QWORD *)a1 + 6) = v9;
  LODWORD(v9) = a4[1];
  a4[1] = a1[3];
  a1[3] = v9;
  result = sub_20C200970(a4 + 12, a1 + 14);
  v13 = *a2;
  *a2 = *((_WORD *)a1 + 2);
  *((_WORD *)a1 + 2) = v13;
  v14 = *a1;
  *a1 = *a3;
  *a3 = v14;
  return result;
}

void sub_20C261ED4(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 *v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  int v23;
  int v24[3];

  if ((uint64_t)a3 >= 2)
  {
    v5 = ((unint64_t)a3 - 2) >> 1;
    v6 = (__int128 *)(a1 + 56 * v5);
    v7 = (__int128 *)(a2 - 56);
    if (sub_20C2620CC((int *)v6, a2 - 56, a3))
    {
      v8 = *v7;
      v20 = *((_QWORD *)v7 + 2);
      v19 = v8;
      v9 = *(_OWORD *)(a2 - 32);
      v22 = *(_QWORD *)(a2 - 16);
      *(_OWORD *)__p = v9;
      *(_QWORD *)(a2 - 32) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      v10 = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = 0;
      v23 = v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 8));
      v24[0] = *(_DWORD *)(a2 - 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 4));
      do
      {
        v11 = v6;
        v12 = *v6;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
        *v7 = v12;
        v13 = (void **)v7 + 3;
        if (*((char *)v7 + 47) < 0)
          operator delete(*v13);
        v14 = *(__int128 *)((char *)v11 + 24);
        *((_QWORD *)v7 + 5) = *((_QWORD *)v11 + 5);
        *(_OWORD *)v13 = v14;
        *((_BYTE *)v11 + 47) = 0;
        *((_BYTE *)v11 + 24) = 0;
        sub_20BFD3EBC((int *)v7 + 12, (int *)v11 + 12);
        sub_20BFD3F10((int *)v7 + 13, (int *)v11 + 13);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (__int128 *)(a1 + 56 * v5);
        v7 = v11;
      }
      while (sub_20C2620CC((int *)v6, (uint64_t)&v19, v15));
      v16 = (void **)v11 + 3;
      v17 = v19;
      *((_QWORD *)v11 + 2) = v20;
      *v11 = v17;
      if (*((char *)v11 + 47) < 0)
        operator delete(*v16);
      v18 = *(_OWORD *)__p;
      *((_QWORD *)v11 + 5) = v22;
      *(_OWORD *)v16 = v18;
      HIBYTE(v22) = 0;
      LOBYTE(__p[0]) = 0;
      sub_20BFD3EBC((int *)v11 + 12, &v23);
      sub_20BFD3F10((int *)v11 + 13, v24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v24);
      sub_20BFD265C(&v23);
      if (SHIBYTE(v22) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_20C2620B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C260268((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C2620CC(int *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  int v3;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **v4;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v5;
  _BOOL8 result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int *v11;
  int *v12;
  char v13;

  v3 = *a1;
  if (*a1 != *(_DWORD *)a2)
    return v3 > *(_DWORD *)a2;
  switch(v3)
  {
    case 3:
      v4 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)(a1 + 2);
      v5 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a2 + 8);
      goto LABEL_9;
    case 5:
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<((_QWORD *)a1 + 1, (_QWORD *)(a2 + 8));
      break;
    case 8:
    case 9:
    case 13:
    case 14:
      if (*((_QWORD *)a1 + 2) == *(_QWORD *)(a2 + 16) && *((_QWORD *)a1 + 1) == *(_QWORD *)(a2 + 8))
      {
        v10 = a1 + 12;
        v11 = a1 + 1;
        v7 = (_QWORD *)(a2 + 48);
        v8 = a2 + 4;
        result = sub_20C2621F4((uint64_t)&v13, (uint64_t)&v7, (uint64_t)&v10);
      }
      else
      {
        v4 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)(a1 + 2);
        v5 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a2 + 8);
LABEL_9:
        result = pxrInternal__aapl__pxrReserved__::PcpCompareNodeStrength(v4, v5, a3) == 1;
      }
      break;
    case 10:
    case 15:
      v10 = a1 + 2;
      v11 = a1 + 12;
      v12 = a1 + 1;
      v7 = (_QWORD *)(a2 + 8);
      v8 = a2 + 48;
      v9 = a2 + 4;
      result = sub_20C26225C((uint64_t)&v13, &v7, &v10);
      break;
    default:
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<((_QWORD *)(a2 + 8), (_QWORD *)a1 + 1);
      break;
  }
  return result;
}

BOOL sub_20C2621F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_20BFD758C(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a2, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)a3) & 1) != 0)return 1;
  if ((sub_20BFD758C(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a3, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)a2) & 1) != 0)return 0;
  return **(_DWORD **)(a2 + 8) < **(_DWORD **)(a3 + 8);
}

BOOL sub_20C26225C(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  char v6;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(*a2, *a3))
    return 1;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(*a3, *a2))
    return 0;
  return sub_20C2622C4((uint64_t)&v6, (uint64_t)a2, (uint64_t)a3);
}

BOOL sub_20C2622C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_20BFD758C(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 8)) & 1) != 0)return 1;
  if ((sub_20BFD758C(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8)) & 1) != 0)return 0;
  return **(_DWORD **)(a2 + 16) < **(_DWORD **)(a3 + 16);
}

_QWORD *sub_20C26232C(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;

  v19 = a2;
  v20 = a3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 96))
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetCulled(&v19, 1);
  else
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v19, 1, a3);
  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(&v19, 1);
  v17 = v19;
  v18 = v20;
  v7 = **(_QWORD **)(v19 + 16);
  v8 = *(unsigned __int16 *)(v7 + 48 * (_QWORD)v20 + 28);
  v11 = v19;
  v12 = v8;
  v13 = v7;
  v14 = v19;
  v9 = 0xFFFFLL;
  v15 = 0xFFFFLL;
  v16 = v7;
  while (v8 != v9 || v11 != v14)
  {
    v10 = sub_20C20495C(&v11, v5, v6);
    sub_20C26232C(a1, *v10, v10[1]);
    result = sub_20C2049E8(&v11);
    v8 = v12;
    v9 = v15;
  }
  return result;
}

uint64_t sub_20C2623F4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__ *Path;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  unsigned int NonVariantPathElementCount;
  uint64_t v19;
  uint64_t v20;

  v19 = a3;
  v20 = a4;
  Path = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v19);
  NonVariantPathElementCount = pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount(Path, v16);
  return sub_20C2626A4(a1, a2, v19, v20, a5, a6, a7, a8, NonVariantPathElementCount, a9 & 0xFFFFFFFFFFLL);
}

_QWORD *sub_20C262484(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfSite"
            ">>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSite>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C2624FC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfSite>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSite>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

_QWORD *sub_20C262578(_QWORD *result, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  uint64_t IncrementalRelocatesSourceToTarget;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v3 = (uint64_t)result;
  v18 = a2;
  v19 = a3;
  v4 = **(_QWORD **)(a2 + 16);
  v5 = *(unsigned __int16 *)(v4 + 48 * (_QWORD)a3 + 28);
  v12 = a2;
  v13 = v5;
  v14 = v4;
  v15 = a2;
  v6 = 0xFFFFLL;
  v16 = 0xFFFFLL;
  v17 = v4;
  while (v5 != v6 || v12 != v15)
  {
    v7 = sub_20C20495C(&v12, a2, a3);
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7) != 3)
    {
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7)
        || (LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7),
            v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack),
            IncrementalRelocatesSourceToTarget = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesSourceToTarget(v9),
            Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7),
            (_QWORD *)(IncrementalRelocatesSourceToTarget + 8) == sub_20BFE4AF0(IncrementalRelocatesSourceToTarget, Path)))
      {
        sub_20C262578(v3, *v7, v7[1]);
      }
      else
      {
        sub_20C26232C(v3, *v7, (char *)v7[1]);
      }
    }
    result = sub_20C2049E8(&v12);
    v5 = v13;
    v6 = v16;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *sub_20C26266C(pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *this)
{
  if (*(_QWORD *)this)
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope(this);
  return this;
}

uint64_t sub_20C2626A4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6, uint64_t *a7, uint64_t a8, unsigned int a9, unint64_t a10)
{
  const char *v12;
  char *v13;
  const char *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int *v41;
  BOOL v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  void *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v78;
  char v79;
  uint64_t v80;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v81;
  uint64_t RelocatesSourceToTarget;
  uint64_t v83;
  _QWORD *v84;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  char v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t *LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v100;
  char HasPrimSpecs;
  int v102;
  char *v103;
  int HasSymmetry;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  void *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  _BOOL8 v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  void *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  void *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  void *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  __int128 v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  pxrInternal__aapl__pxrReserved__::SdfPath *v156;
  char *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v167;
  _BYTE *v168;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v169;
  const char *v170;
  char *v171;
  void **v172;
  uint64_t v173;
  pxrInternal__aapl__pxrReserved__ **v174;
  pxrInternal__aapl__pxrReserved__ *v175;
  BOOL v176;
  int v177;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v178;
  const char *v179;
  const char *v180;
  const char *v181;
  const char *v182;
  const char *v183;
  const char *v184;
  const char *v185;
  uint64_t v186;
  pxrInternal__aapl__pxrReserved__ **v187;
  pxrInternal__aapl__pxrReserved__ *v188;
  int v189;
  void **v190;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v191;
  const char *v192;
  void **v193;
  __int128 *v194;
  char *v195;
  uint64_t v196;
  const char *v197;
  char *v198;
  void *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  const char *v203;
  char *v204;
  __int128 *v205;
  uint64_t v206;
  pxrInternal__aapl__pxrReserved__ **v207;
  _OWORD *v208;
  uint64_t v210;
  void *v215;
  uint64_t v216;
  char v217;
  std::string v218;
  void *__p[2];
  __int128 v220;
  __int128 v221;
  __int128 v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD v226[3];
  __int128 v227;
  _BYTE v228[24];
  __int128 v229;
  pxrInternal__aapl__pxrReserved__ *v230;
  unint64_t v231;
  __int128 v232;
  void *v233;
  int v234;
  int v235;
  char v236;
  _BYTE v237[16];
  void *v238[2];
  char v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  int v243;
  int v244;
  uint64_t v245;
  _BYTE v246[24];
  _BYTE v247[24];
  int v248;
  int v249[3];
  void **v250;

  *(_QWORD *)&v241 = a3;
  *((_QWORD *)&v241 + 1) = a4;
  if (sub_20C1FE3D8(2))
  {
    v162 = *(_QWORD *)(a1 + 40);
    if (v162)
      v163 = (uint64_t *)(v162 + 48);
    else
      v163 = (uint64_t *)(a1 + 32);
    v164 = *v163;
    v165 = a2;
    v166 = &v242;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, v165, (uint64_t)&v242);
    if (v244 < 0)
      v166 = (__int128 *)v242;
    v168 = v228;
    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v228, (pxrInternal__aapl__pxrReserved__ *)a6, v167);
    if (v228[23] < 0)
      v168 = *(_BYTE **)v228;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v241, (uint64_t)&v233);
    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v238, (pxrInternal__aapl__pxrReserved__ *)&v233, v169);
    if (v239 >= 0)
      v172 = v238;
    else
      v172 = (void **)v238[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Adding new %s arc to %s from %s", v170, v171, v166, v168, v172);
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v240, v164, &v241, __p);
    if (SBYTE7(v220) < 0)
      operator delete(__p[0]);
    if (v239 < 0)
      operator delete(v238[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v235);
    sub_20BFD265C(&v234);
    sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v233);
    if ((v228[23] & 0x80000000) != 0)
      operator delete(*(void **)v228);
    if (SHIBYTE(v244) < 0)
      operator delete((void *)v242);
  }
  else
  {
    v240 = 0;
  }
  v15 = a10;
  v208 = a5;
  if (sub_20C1FE3D8(2))
  {
    v173 = *(_QWORD *)(a1 + 40);
    v174 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 32);
    if (v173)
      v174 = (pxrInternal__aapl__pxrReserved__ **)(v173 + 48);
    v175 = *v174;
    if (*a5)
      v176 = a5[1] == -1;
    else
      v176 = 1;
    v177 = !v176;
    if (v176)
    {
      v179 = "<None>";
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a5, (uint64_t)v237);
      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v238, (pxrInternal__aapl__pxrReserved__ *)v237, v178);
      if (v239 >= 0)
        v179 = (const char *)v238;
      else
        v179 = (const char *)v238[0];
      v173 = *(_QWORD *)(a1 + 40);
    }
    if ((a10 & 1) != 0)
      v180 = "true";
    else
      v180 = "false";
    if ((a10 & 0x100) != 0)
      v181 = "true";
    else
      v181 = "false";
    if ((a10 & 0x10000) != 0)
      v182 = "true";
    else
      v182 = "false";
    if (v173)
    {
      if (*(_BYTE *)(v173 + 56))
        v183 = "true";
      else
        v183 = "false";
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" (prev. frame: %s)", v12, v13, v183);
      if (v236 >= 0)
        v184 = (const char *)&v233;
      else
        v184 = (const char *)v233;
    }
    else
    {
      v184 = "";
    }
    if ((a10 & 0x1000000) != 0)
      v185 = "true";
    else
      v185 = "false";
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v175, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v241, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"origin: %s\narcSiblingNum: %d\nnamespaceDepth: %d\ndirectNodeShouldContributeSpecs: %s\nincludeAncestralOpinions: %s\nskipDuplicateNodes: %s%s\nskipImpliedSpecializesCompletedNodes: %s\n\n", v14, v179, a8, a9, v180, v181, v182, v184, v185);
    v15 = a10;
    a5 = v208;
    if (v173 && v236 < 0)
      operator delete(v233);
    if (v177)
    {
      if (v239 < 0)
        operator delete(v238[0]);
      sub_20C20ACC8((uint64_t)v237);
    }
  }
  if (!*a7)
  {
    __p[0] = "pcp/primIndex.cpp";
    __p[1] = "_AddArc";
    *(_QWORD *)&v220 = 1608;
    *((_QWORD *)&v220 + 1) = "PcpNodeRef pxrInternal__aapl__pxrReserved__::_AddArc(Pcp_PrimIndexer *, const PcpArcType, P"
                             "cpNodeRef, const PcpNodeRef &, const PcpLayerStackSite &, const PcpMapExpression &, int, int, _ArcOptions)";
    LOBYTE(v221) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!mapExpr.IsNull()", 0) & 1) == 0)
      goto LABEL_142;
  }
  v16 = *(_QWORD *)(a1 + 40);
  v210 = a1 + 40;
  switch(a2)
  {
    case 6u:
      goto LABEL_8;
    case 2u:
LABEL_22:
      v232 = 0uLL;
      goto LABEL_110;
    case 1u:
LABEL_8:
      if (v241 != *(_OWORD *)a5)
      {
        *(_OWORD *)__p = v241;
        *(_QWORD *)&v220 = v16;
        while (__p[0])
        {
          if (__p[1] == (void *)-1
            || (v17 = sub_20C264678((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p), v17 != 6) && v17 != 1
            || v241 == *(_OWORD *)a5)
          {
            if (__p[0])
              v18 = __p[1] == (void *)-1;
            else
              v18 = 1;
            if (!v18 && sub_20C264678((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p) == 3)
              goto LABEL_22;
            goto LABEL_23;
          }
          sub_20C2646C4((uint64_t *)__p);
        }
      }
      break;
  }
LABEL_23:
  v218.__r_.__value_.__r.__words[0] = *(_QWORD *)a6;
  sub_20BF1DD04((uint64_t *)&v218);
  sub_20BFD6E54(&v218.__r_.__value_.__r.__words[1], a6 + 2);
  sub_20BFD6EA4((_DWORD *)&v218.__r_.__value_.__r.__words[1] + 1, a6 + 3);
  *(_OWORD *)__p = v241;
  *(_QWORD *)&v220 = v16;
  if (!(_QWORD)v241 || __p[1] == (void *)-1)
  {
LABEL_46:
    v232 = 0uLL;
  }
  else
  {
    v19 = v16;
    while (1)
    {
      v242 = *(_OWORD *)__p;
      if (__p[0] && __p[1] != (void *)-1)
        break;
LABEL_39:
      if (v19)
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)__p);
        *(_QWORD *)&v242 = v23;
        *((_QWORD *)&v242 + 1) = v24;
        Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v242);
        if (*(_QWORD *)Path == v218.__r_.__value_.__l.__size_)
        {
          sub_20BFD6E54(&v242, (_DWORD *)(v19 + 16));
          sub_20BFD6EA4((_DWORD *)&v242 + 1, (_DWORD *)(v19 + 20));
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v242, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 16), Path, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v218.__r_.__value_.__r.__words[1], 1);
        }
        sub_20C01A074((int *)&v218.__r_.__value_.__r.__words[1], &v242);
        sub_20C01A0C8((int *)&v218.__r_.__value_.__r.__words[1] + 1, (_DWORD *)&v242 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v242 + 1);
        sub_20BFD265C(&v242);
        if ((_QWORD)v220)
        {
          *(_OWORD *)__p = *(_OWORD *)(v220 + 24);
          v19 = *(_QWORD *)v220;
          *(_QWORD *)&v220 = *(_QWORD *)v220;
          if (__p[0])
          {
            if (__p[1] != (void *)-1)
              continue;
          }
        }
      }
      goto LABEL_46;
    }
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v242, (uint64_t)v228);
      v21 = *(_QWORD *)v228 == v218.__r_.__value_.__r.__words[0]
         && (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v228[8], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v218.__r_.__value_.__r.__words[1])|| pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v218.__r_.__value_.__r.__words[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v228[8]));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v228[12]);
      sub_20BFD265C(&v228[8]);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v228);
      if (v21)
        break;
      *(_QWORD *)&v242 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v242);
      *((_QWORD *)&v242 + 1) = v22;
      if (!(_QWORD)v242 || v22 == -1)
      {
        v19 = v220;
        goto LABEL_39;
      }
    }
    pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::New(&v232);
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p);
    *(_OWORD *)v228 = v241;
    *(_QWORD *)&v228[16] = v16;
    while (*(_QWORD *)v228 && *(_QWORD *)&v228[8] != -1)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v228, (uint64_t)&v215);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v242, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v215);
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)__p, (uint64_t)&v242);
      sub_20BFD3EBC((int *)&v225, &v248);
      sub_20BFD3F10((int *)&v225 + 1, v249);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v249);
      sub_20BFD265C(&v248);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v247);
      *(_QWORD *)&v227 = v246;
      sub_20BDE9EB0((void ***)&v227);
      v27 = v245;
      if (v245)
      {
        v28 = (unsigned int *)(v245 + 8);
        do
        {
          v29 = __ldxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      v31 = *((_QWORD *)&v242 + 1);
      if (*((_QWORD *)&v242 + 1))
      {
        v32 = (unsigned int *)(*((_QWORD *)&v242 + 1) + 8);
        do
        {
          v33 = __ldxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v216 + 1);
      sub_20BFD265C(&v216);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v215);
      LODWORD(v226[0]) = sub_20C264678((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v228);
      v35 = v232;
      v36 = *(_QWORD *)(v232 + 112);
      if (v36 >= *(_QWORD *)(v232 + 120))
      {
        v37 = sub_20C2647C8((uint64_t *)(v232 + 104), (uint64_t)__p);
      }
      else
      {
        sub_20C240DF8(*(_QWORD *)(v232 + 112), (uint64_t)__p);
        *(_DWORD *)(v36 + 88) = v226[0];
        v37 = v36 + 96;
        *(_QWORD *)(v35 + 112) = v36 + 96;
      }
      *(_QWORD *)(v35 + 112) = v37;
      sub_20C2646C4((uint64_t *)v228);
    }
    v38 = v232;
    v40 = *(int **)(v232 + 104);
    v39 = *(int **)(v232 + 112);
    v41 = v39 - 24;
    v42 = v40 != v39 && v41 > v40;
    v15 = a10;
    if (v42)
    {
      do
      {
        sub_20C264B0C(v40, v41);
        v40 += 24;
        v41 -= 24;
      }
      while (v40 < v41);
      v38 = v232;
      v40 = *(int **)(v232 + 104);
    }
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v38 + 16, (uint64_t)v40);
    sub_20C01A074((int *)(v38 + 96), v40 + 20);
    sub_20C01A0C8((int *)(v38 + 100), v40 + 21);
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v242, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)a6);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)__p, (uint64_t)&v242);
    sub_20BFD3EBC((int *)&v225, &v248);
    sub_20BFD3F10((int *)&v225 + 1, v249);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v249);
    sub_20BFD265C(&v248);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v247);
    *(_QWORD *)v228 = v246;
    sub_20BDE9EB0((void ***)v228);
    v43 = v245;
    if (v245)
    {
      v44 = (unsigned int *)(v245 + 8);
      do
      {
        v45 = __ldxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
    v47 = *((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v48 = (unsigned int *)(*((_QWORD *)&v242 + 1) + 8);
      do
      {
        v49 = __ldxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    }
    LODWORD(v226[0]) = a2;
    v51 = v232;
    v52 = *(_QWORD *)(v232 + 112);
    if (v52 >= *(_QWORD *)(v232 + 120))
    {
      v53 = sub_20C2647C8((uint64_t *)(v232 + 104), (uint64_t)__p);
    }
    else
    {
      sub_20C240DF8(*(_QWORD *)(v232 + 112), (uint64_t)__p);
      *(_DWORD *)(v52 + 88) = v226[0];
      v53 = v52 + 96;
      *(_QWORD *)(v51 + 112) = v52 + 96;
    }
    *(_QWORD *)(v51 + 112) = v53;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v225 + 1);
    sub_20BFD265C(&v225);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v222 + 8));
    *(_QWORD *)&v242 = &v221;
    sub_20BDE9EB0((void ***)&v242);
    v54 = *((_QWORD *)&v220 + 1);
    if (*((_QWORD *)&v220 + 1))
    {
      v55 = (unsigned int *)(*((_QWORD *)&v220 + 1) + 8);
      do
      {
        v56 = __ldxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    }
    v58 = __p[1];
    if (__p[1])
    {
      v59 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v60 = __ldxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
        (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v218.__r_.__value_.__r.__words[1] + 1);
  sub_20BFD265C(&v218.__r_.__value_.__r.__words[1]);
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v218);
  if ((_QWORD)v232)
  {
    *(_OWORD *)__p = v232;
    if (*((_QWORD *)&v232 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    sub_20C264D7C((__int128 *)__p, *(_QWORD *)(a1 + 32), (char **)(*(_QWORD *)(a1 + 32) + 40));
    v64 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v65 = (unint64_t *)((char *)__p[1] + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
    if (*((_QWORD *)&v232 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
LABEL_142:
    v91 = 0;
    goto LABEL_243;
  }
LABEL_110:
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (*(_QWORD *)v210)
  {
    if (HIWORD(v15) & 1 | *(unsigned __int8 *)(*(_QWORD *)v210 + 56))
    {
LABEL_117:
      __p[0] = *(void **)a6;
      sub_20BF1DD04((uint64_t *)__p);
      sub_20BFD6E54(&__p[1], a6 + 2);
      sub_20BFD6EA4((_DWORD *)&__p[1] + 1, a6 + 3);
      v73 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v241;
      if ((_QWORD)v241 && *((_QWORD *)&v241 + 1) != -1)
      {
        v74 = (_QWORD *)(a1 + 40);
        while (1)
        {
          v74 = (_QWORD *)*v74;
          if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeUsingSite((uint64_t)v73, (uint64_t *)__p))
          {
            if (v75 != -1)
              break;
          }
          if (v74)
          {
            pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v73);
            *(_QWORD *)&v242 = v76;
            *((_QWORD *)&v242 + 1) = v77;
            v78 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v242);
            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v242, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v74 + 2), v78, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p[1], 1);
            sub_20BFD3EBC((int *)&__p[1], (int *)&v242);
            sub_20BFD3F10((int *)&__p[1] + 1, (int *)&v242 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v242 + 1);
            sub_20BFD265C(&v242);
            v73 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v74[3];
            if (v73)
            {
              if (v74[4] != -1)
                continue;
            }
          }
          goto LABEL_125;
        }
        if (sub_20C1FE3D8(2))
        {
          v206 = *(_QWORD *)(a1 + 40);
          if (v206)
            v207 = (pxrInternal__aapl__pxrReserved__ **)(v206 + 48);
          else
            v207 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 32);
          pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v207, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v241, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Skipping because duplicate node exists.", v90);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
        sub_20BFD265C(&__p[1]);
        sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
        goto LABEL_142;
      }
LABEL_125:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
      LOWORD(v15) = a10;
      sub_20BFD265C(&__p[1]);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
      v79 = 1;
      if ((a10 & 1) == 0)
        goto LABEL_126;
LABEL_129:
      if ((v15 & 0x100) != 0)
      {
        v81 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)a6);
        RelocatesSourceToTarget = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesSourceToTarget(v81);
        v83 = RelocatesSourceToTarget + 8;
        v84 = *(_QWORD **)(RelocatesSourceToTarget + 8);
        if (v84)
        {
          v85 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a6 + 2);
          v86 = RelocatesSourceToTarget + 8;
          do
          {
            v87 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v84 + 28), v85);
            v88 = v84 + 1;
            if (!v87)
            {
              v88 = v84;
              v86 = (uint64_t)v84;
            }
            v84 = (_QWORD *)*v88;
          }
          while (*v88);
          if (v86 == v83)
          {
            v89 = a10;
          }
          else if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v86 + 28), v85))
          {
            v89 = 0;
          }
          else
          {
            v89 = a10;
          }
        }
        else
        {
          v89 = v15;
        }
        v80 = v89 & 1;
      }
      else
      {
        v80 = 1;
      }
      goto LABEL_146;
    }
  }
  else if ((v15 & 0x10000) != 0)
  {
    goto LABEL_117;
  }
  v79 = 0;
  if ((v15 & 1) != 0)
    goto LABEL_129;
LABEL_126:
  v80 = 0;
LABEL_146:
  *(_QWORD *)&v228[8] = 0;
  *(_QWORD *)&v228[16] = -1;
  *(_QWORD *)&v229 = 0;
  *((_QWORD *)&v229 + 1) = -1;
  v230 = 0;
  v231 = 0;
  *(_DWORD *)v228 = a2;
  sub_20C211C28(&v230, a7);
  *(_OWORD *)&v228[8] = v241;
  v229 = *v208;
  v231 = __PAIR64__(a9, a8);
  *(_QWORD *)&v232 = 0;
  *((_QWORD *)&v232 + 1) = -1;
  v227 = 0uLL;
  if ((a10 & 0x100) != 0)
  {
    if (sub_20C1FE3D8(2))
    {
      v186 = *(_QWORD *)(a1 + 40);
      if (v186)
        v187 = (pxrInternal__aapl__pxrReserved__ **)(v186 + 48);
      else
        v187 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 32);
      v188 = *v187;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, a2, (uint64_t)__p);
      v189 = SBYTE7(v220);
      v190 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v242, (pxrInternal__aapl__pxrReserved__ *)a6, v191);
      v193 = __p;
      if (v189 < 0)
        v193 = v190;
      if (v244 >= 0)
        v194 = &v242;
      else
        v194 = (__int128 *)v242;
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v188, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v241, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Need to build index for %s source at %s to pick up ancestral opinions", v192, v193, v194);
      if (SHIBYTE(v244) < 0)
        operator delete((void *)v242);
      if (SBYTE7(v220) < 0)
        operator delete(__p[0]);
    }
    v92 = *(_QWORD *)(a1 + 40);
    v93 = (uint64_t *)(a1 + 32);
    v94 = (uint64_t *)(v92 + 48);
    if (!v92)
      v94 = (uint64_t *)(a1 + 32);
    sub_20C264C60((uint64_t)&v242, (uint64_t)a6, &v241, (uint64_t)v228, v92, *v94, v79);
    v224 = 0;
    *(_OWORD *)__p = 0u;
    v220 = 0u;
    v221 = 0u;
    v222 = 0u;
    v223 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(&v225);
    memset(v226, 0, sizeof(v226));
    sub_20C25B1D4(a6, a1, *(unsigned int *)(a1 + 16), 0, 0, v80, &v242, *(_QWORD *)(a1 + 24), __p);
    *(_QWORD *)&v232 = pxrInternal__aapl__pxrReserved__::PcpPrimIndexOutputs::Append(*v93, (uint64_t)__p, (uint64_t)v228, (uint64_t)&v227);
    *((_QWORD *)&v232 + 1) = v95;
    if ((_QWORD)v232 && v95 != -1 && sub_20C1FE3D8(2))
    {
      if (*(_QWORD *)v210)
        v93 = (uint64_t *)(*(_QWORD *)v210 + 48);
      v196 = *v93;
      sub_20C264098((uint64_t *)a6);
      if (v217 >= 0)
        v199 = &v215;
      else
        v199 = v215;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Added subtree for site %s to graph", v197, v198, v199);
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(v196, &v232, &v218);
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v218.__r_.__value_.__l.__data_);
      if (v217 < 0)
        operator delete(v215);
    }
    v218.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
    sub_20C2034B0((void ***)&v218);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)&v225);
    v96 = v224;
    v224 = 0;
    if (v96)
      sub_20C201118((uint64_t)&v224, v96);
    v218.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221 + 8;
    sub_20BDE9EB0((void ***)&v218);
    sub_20BF1C150((void ***)&v221, 0);
    if (__p[1])
    {
      *(void **)&v220 = __p[1];
      operator delete(__p[1]);
    }
    sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v244);
    sub_20BFD265C(&v243);
    sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v242 + 1);
  }
  else
  {
    *(_QWORD *)&v232 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::InsertChild((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v241, (uint64_t *)a6, (uint64_t)v228, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)&v227);
    *((_QWORD *)&v232 + 1) = v97;
    if ((_QWORD)v232 && v97 != (char *)-1)
    {
      if ((v80 & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232, 1, v98);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(&v232, 1);
      }
      LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232);
      v100 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232);
      HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, v100);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v232, HasPrimSpecs);
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232) & 1) == 0
        && pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232)
        && !*(_BYTE *)(*(_QWORD *)(a1 + 24) + 97))
      {
        v102 = pxrInternal__aapl__pxrReserved__::PcpComposeSitePermission((uint64_t *)a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a6 + 2));
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetPermission((unint64_t *)&v232, v102, v103);
        HasSymmetry = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasSymmetry((uint64_t *)a6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a6 + 2));
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232, HasSymmetry, v105);
      }
      if (sub_20C1FE3D8(2))
      {
        v200 = *(_QWORD *)(a1 + 40);
        if (v200)
          v201 = (uint64_t *)(v200 + 48);
        else
          v201 = (uint64_t *)(a1 + 32);
        v202 = *v201;
        sub_20C264098((uint64_t *)a6);
        if (v244 >= 0)
          v205 = &v242;
        else
          v205 = (__int128 *)v242;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Added new node for site %s to graph", v203, v204, v205);
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(v202, &v232, (const std::string *)__p);
        if (SBYTE7(v220) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v244) < 0)
          operator delete((void *)v242);
      }
    }
  }
  if ((_QWORD)v227)
  {
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)a1);
    v106 = v227;
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v227 + 16, (uint64_t)__p);
    sub_20BFD3EBC((int *)(v106 + 96), (int *)&v225);
    sub_20BFD3F10((int *)(v106 + 100), (int *)&v225 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v225 + 1);
    sub_20BFD265C(&v225);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v222 + 8));
    *(_QWORD *)&v242 = &v221;
    sub_20BDE9EB0((void ***)&v242);
    v107 = *((_QWORD *)&v220 + 1);
    if (*((_QWORD *)&v220 + 1))
    {
      v108 = (unsigned int *)(*((_QWORD *)&v220 + 1) + 8);
      do
      {
        v109 = __ldxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
        (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
    }
    v111 = __p[1];
    if (__p[1])
    {
      v112 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v113 = __ldxr(v112);
        v114 = v113 - 1;
      }
      while (__stlxr(v114, v112));
      if (!v114)
        (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
    }
    sub_20C264D7C(&v227, *(_QWORD *)(a1 + 32), (char **)(*(_QWORD *)(a1 + 32) + 40));
  }
  if (!(_QWORD)v232 || *((_QWORD *)&v232 + 1) == -1)
  {
    if (!(_QWORD)v227)
    {
      __p[0] = "pcp/primIndex.cpp";
      __p[1] = "_AddArc";
      *(_QWORD *)&v220 = 1814;
      *((_QWORD *)&v220 + 1) = "PcpNodeRef pxrInternal__aapl__pxrReserved__::_AddArc(Pcp_PrimIndexer *, const PcpArcType,"
                               " PcpNodeRef, const PcpNodeRef &, const PcpLayerStackSite &, const PcpMapExpression &, int"
                               ", int, _ArcOptions)";
      LOBYTE(v221) = 0;
      v195 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Failed to create a node, but did not specify the error.", v97, v98);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "newNodeError", v195);
    }
    v91 = 0;
  }
  else
  {
    v116 = (a10 & 0x100) != 0 && *(_BYTE *)(a1 + 201) != 0;
    sub_20C2641A0(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232, (char *)(BYTE4(a10) & 1 | ((a10 & 0x100) >> 8)), (a10 >> 24) & 1, v116);
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232) == 1)
    {
      pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::New(&v242);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v241);
      v215 = v117;
      v216 = v118;
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v215, (uint64_t)&v218);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v218);
      v119 = v242;
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v242 + 16, (uint64_t)__p);
      sub_20BFD3EBC((int *)(v119 + 96), (int *)&v225);
      sub_20BFD3F10((int *)(v119 + 100), (int *)&v225 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v225 + 1);
      sub_20BFD265C(&v225);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v222 + 8));
      v250 = (void **)&v221;
      sub_20BDE9EB0(&v250);
      v120 = *((_QWORD *)&v220 + 1);
      if (*((_QWORD *)&v220 + 1))
      {
        v121 = (unsigned int *)(*((_QWORD *)&v220 + 1) + 8);
        do
        {
          v122 = __ldxr(v121);
          v123 = v122 - 1;
        }
        while (__stlxr(v123, v121));
        if (!v123)
          (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
      }
      v124 = __p[1];
      if (__p[1])
      {
        v125 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v126 = __ldxr(v125);
          v127 = v126 - 1;
        }
        while (__stlxr(v127, v125));
        if (!v127)
          (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v218.__r_.__value_.__r.__words[1] + 1);
      sub_20BFD265C(&v218.__r_.__value_.__r.__words[1]);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v218);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v241, (uint64_t)&v218);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v218);
      v128 = v242;
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v242 + 104, (uint64_t)__p);
      sub_20BFD3EBC((int *)(v128 + 184), (int *)&v225);
      sub_20BFD3F10((int *)(v128 + 188), (int *)&v225 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v225 + 1);
      sub_20BFD265C(&v225);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v222 + 8));
      v215 = &v221;
      sub_20BDE9EB0((void ***)&v215);
      v129 = *((_QWORD *)&v220 + 1);
      if (*((_QWORD *)&v220 + 1))
      {
        v130 = (unsigned int *)(*((_QWORD *)&v220 + 1) + 8);
        do
        {
          v131 = __ldxr(v130);
          v132 = v131 - 1;
        }
        while (__stlxr(v132, v130));
        if (!v132)
          (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
      }
      v133 = __p[1];
      if (__p[1])
      {
        v134 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v135 = __ldxr(v134);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v134));
        if (!v136)
          (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v218.__r_.__value_.__r.__words[1] + 1);
      sub_20BFD265C(&v218.__r_.__value_.__r.__words[1]);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v218);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232, (uint64_t)&v218);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v218);
      v137 = v242;
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v242 + 192, (uint64_t)__p);
      sub_20BFD3EBC((int *)(v137 + 272), (int *)&v225);
      sub_20BFD3F10((int *)(v137 + 276), (int *)&v225 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v225 + 1);
      sub_20BFD265C(&v225);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v222 + 8));
      v215 = &v221;
      sub_20BDE9EB0((void ***)&v215);
      v138 = *((_QWORD *)&v220 + 1);
      if (*((_QWORD *)&v220 + 1))
      {
        v139 = (unsigned int *)(*((_QWORD *)&v220 + 1) + 8);
        do
        {
          v140 = __ldxr(v139);
          v141 = v140 - 1;
        }
        while (__stlxr(v141, v139));
        if (!v141)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
      }
      v142 = __p[1];
      if (__p[1])
      {
        v143 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v144 = __ldxr(v143);
          v145 = v144 - 1;
        }
        while (__stlxr(v145, v143));
        if (!v145)
          (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v218.__r_.__value_.__r.__words[1] + 1);
      sub_20BFD265C(&v218.__r_.__value_.__r.__words[1]);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v218);
      v146 = v242;
      *(_DWORD *)(v242 + 280) = a2;
      *(_OWORD *)__p = v146;
      if (*((_QWORD *)&v146 + 1))
      {
        v147 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
        do
          v148 = __ldxr(v147);
        while (__stxr(v148 + 1, v147));
      }
      sub_20C264D7C((__int128 *)__p, *(_QWORD *)(a1 + 32), (char **)(*(_QWORD *)(a1 + 32) + 40));
      v150 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v151 = (unint64_t *)((char *)__p[1] + 8);
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      sub_20C2645E4(v232, *((uint64_t *)&v232 + 1), v149);
      v153 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
      if (*((_QWORD *)&v242 + 1))
      {
        v154 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
    }
    v156 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v232);
    if (*(_QWORD *)v156 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v156))
      sub_20C2645E4(v232, *((uint64_t *)&v232 + 1), v157);
    v91 = v232;
  }
  v158 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
  if (*((_QWORD *)&v227 + 1))
  {
    v159 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  sub_20C211C74(&v230, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v97);
LABEL_243:
  if (v240)
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v240);
  return v91;
}

void sub_20C263D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  pxrInternal__aapl__pxrReserved__ **v52;
  uint64_t v53;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v55;

  if (a40 < 0)
    operator delete(__p);
  if (*(char *)(v53 - 169) < 0)
    operator delete(*(void **)(v53 - 192));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a52);
  sub_20C211C74(v52, v55);
  sub_20C26266C((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)(v53 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_20C264098(uint64_t *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C26414C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C264160(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  return a1;
}

void sub_20C2641A0(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, char *a3, uint64_t a4, uint64_t a5)
{
  int ArcType;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  BOOL HasPrefix;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ParentNode;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v34;
  int v35;
  int v36;
  __int128 v37;
  _BYTE v38[24];
  void *__p;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  if ((a4 & 1) != 0)
    goto LABEL_49;
  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (ArcType != 6 && ArcType != 1)
  {
    if (!sub_20C264CE8((uint64_t *)this, v11, v12))
      goto LABEL_25;
    *(_QWORD *)v38 = 5;
    *(_OWORD *)&v38[8] = *(_OWORD *)this;
    v40 = 0;
    v41 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v42);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v42 + 1);
    sub_20C261350(a1, (uint64_t)v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v42 + 1);
    goto LABEL_23;
  }
  v13 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (v13 != 1 && v13 != 6)
  {
    *(_QWORD *)v38 = "pcp/primIndex.cpp";
    *(_QWORD *)&v38[8] = "_FindStartingNodeForImpliedClasses";
    *(_QWORD *)&v38[16] = 589;
    __p = "PcpNodeRef pxrInternal__aapl__pxrReserved__::_FindStartingNodeForImpliedClasses(const PcpNodeRef &)";
    LOBYTE(v40) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v38, "PcpIsClassBasedArc(n.GetArcType())", 0);
  }
  v37 = *(_OWORD *)this;
  while (1)
  {
    v14 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v37);
    if (v14 != 6 && v14 != 1)
      break;
    pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy((pxrInternal__aapl__pxrReserved__ *)&v37, (uint64_t)v38);
    v37 = *(_OWORD *)v38;
    v16 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38);
    if (v16 == 6 || v16 == 1)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38, &v35);
      Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v38[16]);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(Path, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_20BFD265C(&v35);
      if (HasPrefix)
        break;
    }
  }
  if ((_QWORD)v37)
    v19 = *((_QWORD *)&v37 + 1) == -1;
  else
    v19 = 1;
  if (!v19)
  {
    *(_QWORD *)v38 = 5;
    *(_OWORD *)&v38[8] = v37;
    v40 = 0;
    v41 = 0;
    __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v42);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v42 + 1);
    sub_20C261350(a1, (uint64_t)v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v42 + 1);
LABEL_23:
    sub_20BFD265C(v42);
    if (SHIBYTE(v41) < 0)
      operator delete(__p);
  }
LABEL_25:
  if (*(_BYTE *)(a1 + 200))
  {
    *(_OWORD *)v38 = *(_OWORD *)this;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)v38);
    v23 = v20;
    v24 = v21;
    if (*(_QWORD *)&v38[8] == v21 && *(_QWORD *)v38 == v20)
      goto LABEL_41;
    v25 = 0;
    v26 = -1;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38) == 6)
      {
        v25 = *(_QWORD *)v38;
        v26 = *(_QWORD *)&v38[8];
      }
      ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38);
      *(_QWORD *)v38 = ParentNode;
      *(_QWORD *)&v38[8] = v21;
    }
    while (v21 != v24 || ParentNode != v23);
    if (!v25 || v26 == -1)
    {
LABEL_41:
      v30 = *((_QWORD *)this + 1);
      v42[0] = *(_QWORD *)this;
      v42[1] = v30;
      v31 = **(_QWORD **)(v42[0] + 16);
      v32 = *(unsigned __int16 *)(v31 + 48 * v30 + 28);
      *(_QWORD *)v38 = v42[0];
      *(_QWORD *)&v38[8] = v32;
      *(_QWORD *)&v38[16] = v31;
      __p = (void *)v42[0];
      v33 = 0xFFFFLL;
      v40 = 0xFFFFLL;
      v41 = v31;
      while (v32 != v33 || *(void **)v38 != __p)
      {
        v34 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(v38, v21, v22);
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v34) == 6)
        {
          *(_QWORD *)v38 = 11;
          *(_OWORD *)&v38[8] = *(_OWORD *)this;
          v40 = 0;
          v41 = 0;
          __p = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v42);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v42 + 1);
          sub_20C261350(a1, (uint64_t)v38);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v42 + 1);
          goto LABEL_47;
        }
        sub_20C2049E8(v38);
        v32 = *(_QWORD *)&v38[8];
        v33 = v40;
      }
    }
    else
    {
      *(_QWORD *)v38 = 11;
      *(_QWORD *)&v38[8] = v25;
      *(_QWORD *)&v38[16] = v26;
      v40 = 0;
      v41 = 0;
      __p = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v42 + 1);
      sub_20C261350(a1, (uint64_t)v38);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v42 + 1);
LABEL_47:
      sub_20BFD265C(v42);
      if (SHIBYTE(v41) < 0)
        operator delete(__p);
    }
  }
LABEL_49:
  sub_20C2609F0(a1, this, a3, a4, *(_QWORD *)(a1 + 40) == 0, a5, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 97));
}

void sub_20C2645A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C260268((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2645E4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18, 1, a3);
  v16 = v18;
  v17 = v19;
  v6 = **(_QWORD **)(v18 + 16);
  v7 = *(unsigned __int16 *)(v6 + 48 * v19 + 28);
  v10 = v18;
  v11 = v7;
  v12 = v6;
  v13 = v18;
  v8 = 0xFFFFLL;
  v14 = 0xFFFFLL;
  v15 = v6;
  while (v7 != v8 || v10 != v13)
  {
    v9 = sub_20C20495C(&v10, v4, v5);
    sub_20C2645E4(*v9, v9[1]);
    result = (uint64_t)sub_20C2049E8(&v10);
    v7 = v11;
    v8 = v14;
  }
  return result;
}

uint64_t sub_20C264678(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  uint64_t v3;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1))
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1);
  v3 = *((_QWORD *)a1 + 2);
  if (v3)
    return **(unsigned int **)(v3 + 40);
  else
    return 0;
}

uint64_t sub_20C2646C4(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
    *a1 = result;
    a1[1] = v3;
  }
  else
  {
    v4 = a1[2];
    if (v4)
    {
      *(_OWORD *)a1 = *(_OWORD *)(v4 + 24);
      a1[2] = *(_QWORD *)v4;
    }
    else
    {
      *a1 = 0;
      a1[1] = -1;
    }
  }
  return result;
}

uint64_t sub_20C26471C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v11;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 84));
  sub_20BFD265C((_DWORD *)(a1 + 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  v11 = (void **)(a1 + 32);
  sub_20BDE9EB0(&v11);
  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_20C2647C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE90940(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[96 * v4];
  v15 = (uint64_t)v14;
  v16 = &v10[96 * v9];
  sub_20C240DF8((uint64_t)v14, a2);
  *((_DWORD *)v14 + 22) = *(_DWORD *)(a2 + 88);
  v15 += 96;
  sub_20C2648DC(a1, &v13);
  v11 = a1[1];
  sub_20C264A98(&v13);
  return v11;
}

void sub_20C2648C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C264A98((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2648DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C264950((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C264950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      sub_20C240DF8(v7 - 96, v9 - 96);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      v9 -= 96;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C264A14((uint64_t)v12);
  return v10;
}

void sub_20C264A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C264A14((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C264A14(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C264A48((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C264A48(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C23C8BC(v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C264A98(void **a1)
{
  sub_20C264AC8((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20C264AC8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 96;
      result = sub_20C23C8BC(v4, v1 - 96);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C264B0C(int *a1, int *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  void **v20;

  sub_20C240B80((uint64_t)v12, (uint64_t)a1);
  v19 = a1[22];
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)a1, (uint64_t)a2);
  sub_20BFD3EBC(a1 + 20, a2 + 20);
  sub_20BFD3F10(a1 + 21, a2 + 21);
  a1[22] = a2[22];
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)a2, (uint64_t)v12);
  sub_20BFD3EBC(a2 + 20, &v17);
  sub_20BFD3F10(a2 + 21, &v18);
  a2[22] = v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v16);
  v20 = (void **)&v15;
  sub_20BDE9EB0(&v20);
  v4 = v14;
  if (v14)
  {
    v5 = (unsigned int *)(v14 + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  result = v13;
  if (v13)
  {
    v9 = (unsigned int *)(v13 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C264C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C26471C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C264C60(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _DWORD *v13;

  *(_QWORD *)a1 = a5;
  v13 = (_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  sub_20BF1DD04((uint64_t *)(a1 + 8));
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 8));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), v13);
  *(_OWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a6;
  *(_BYTE *)(a1 + 56) = a7;
  return a1;
}

uint64_t sub_20C264CE8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v7;
  int ArcType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1[1];
  v17 = *a1;
  v18 = v3;
  v4 = **(_QWORD **)(v17 + 16);
  v5 = *(unsigned __int16 *)(v4 + 48 * v3 + 28);
  v11 = v17;
  v12 = v5;
  v13 = v4;
  v14 = v17;
  v6 = 0xFFFFLL;
  v15 = 0xFFFFLL;
  v16 = v4;
  while (v5 != v6 || v11 != v14)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(&v11, a2, a3);
    ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v7);
    if (ArcType == 1 || ArcType == 6)
      return 1;
    sub_20C2049E8(&v11);
    v5 = v12;
    v6 = v15;
  }
  return 0;
}

__int128 *sub_20C264D7C(__int128 *result, uint64_t a2, char **a3)
{
  __int128 *v4;
  int v5;
  char *i;
  void **v7;
  void ***v8;
  void **v9;
  void **v10;

  v4 = result;
  v5 = *(_DWORD *)(*(_QWORD *)result + 8);
  if ((v5 - 2) <= 2)
  {
    for (i = *a3; i != a3[1]; i += 16)
    {
      if (*(_DWORD *)(*(_QWORD *)i + 8) == v5)
        return result;
    }
  }
  sub_20BDEA72C(a3, result);
  v9 = *(void ***)(a2 + 32);
  v8 = (void ***)(a2 + 32);
  v7 = v9;
  if (!v9)
  {
    v10 = (void **)operator new(0x18uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = 0;
    sub_20BF1C150(v8, v10);
    v7 = *v8;
  }
  return (__int128 *)sub_20BDEA72C((char **)v7, v4);
}

void sub_20C264E18(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  std::string::size_type v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  std::string::size_type v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *Path;
  std::string::size_type v56;
  std::string::size_type v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  const std::string *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  uint64_t *v101;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v102;
  uint64_t *v103;
  uint64_t v104;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v105;
  uint64_t *v106;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v107;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v108;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v110;
  uint64_t Identifier;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  std::string::size_type v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v122;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v123;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v124;
  double TimeCodesPerSecond;
  double v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  void **v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *Instance;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  __int128 *v164;
  __int128 v165;
  unint64_t *v166;
  _QWORD *v167;
  _QWORD *v168;
  void **v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  std::string::size_type v185;
  std::string::size_type v186;
  std::string::size_type v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int v195;
  std::string::size_type v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int v204;
  pxrInternal__aapl__pxrReserved__::SdfPath *v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  pxrInternal__aapl__pxrReserved__::SdfPath *v212;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v213;
  std::string::size_type v214;
  __int128 v215;
  unint64_t *v216;
  unint64_t v217;
  __int128 *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  _DWORD *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  void ***v226;
  const char *v227;
  char *v228;
  std::string::size_type v229;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v230;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v231;
  int IsRootPrimPath;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v233;
  uint64_t v234;
  uint64_t v235;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v236;
  uint64_t v237;
  pxrInternal__aapl__pxrReserved__ **v238;
  uint64_t v239;
  _QWORD *v240;
  pxrInternal__aapl__pxrReserved__ *v241;
  const char *Text;
  const char *v243;
  unint64_t v244;
  uint64_t *v248;
  std::string v249;
  void **v250[2];
  unint64_t v251;
  __int128 v252;
  uint64_t v253;
  __int128 v254;
  std::string __str;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v256;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v257;
  __int128 v258;
  unint64_t v259;
  uint64_t v260;
  _BYTE v261[24];
  _BYTE v262[24];
  int v263;
  int v264[3];
  __int128 v265;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v266;
  uint64_t v267;
  void **v268;

  v266 = a1;
  v267 = a2;
  v5 = *a4;
  if (a4[1] != *a4)
  {
    v6 = 0;
    v248 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v7 = v5 + 56 * v6;
      v8 = *a5;
      v265 = *(_OWORD *)(v7 + 32);
      if (sub_20C1FE3D8(2))
      {
        v237 = *(_QWORD *)(a3 + 40);
        v238 = (pxrInternal__aapl__pxrReserved__ **)v248;
        if (v237)
          v238 = (pxrInternal__aapl__pxrReserved__ **)(v237 + 48);
        v239 = v8 + 56 * v6;
        v240 = (_QWORD *)(v239 + 32);
        if (*(char *)(v239 + 55) < 0)
          v240 = (_QWORD *)*v240;
        v241 = *v238;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 56 * v6 + 24));
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v241, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v266, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found %s to @%s@<%s>", v243, "reference", v240, Text);
      }
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 56 * v6 + 24);
      v10 = (uint64_t *)(v8 + 56 * v6);
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v9)
        || pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v9)
        && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v9)
        && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(v9))
      {
        v41 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::New(&__str);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v266);
        v249.__r_.__value_.__r.__words[0] = v11;
        v249.__r_.__value_.__l.__size_ = v12;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v249, (uint64_t)&v252);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v252);
        v13 = __str.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 16, (uint64_t)&v258);
        sub_20BFD3EBC((int *)(v13 + 96), &v263);
        sub_20BFD3F10((int *)(v13 + 100), v264);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
        sub_20BFD265C(&v263);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
        *(_QWORD *)&v254 = v261;
        sub_20BDE9EB0((void ***)&v254);
        v14 = v260;
        if (v260)
        {
          v15 = (unsigned int *)(v260 + 8);
          do
          {
            v16 = __ldxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v18 = *((_QWORD *)&v258 + 1);
        if (*((_QWORD *)&v258 + 1))
        {
          v19 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
          do
          {
            v20 = __ldxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v252 + 3);
        sub_20BFD265C((_DWORD *)&v252 + 2);
        sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v252);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266, (uint64_t)&v252);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v252);
        v22 = __str.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 104, (uint64_t)&v258);
        sub_20BFD3EBC((int *)(v22 + 184), &v263);
        sub_20BFD3F10((int *)(v22 + 188), v264);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
        sub_20BFD265C(&v263);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
        v249.__r_.__value_.__r.__words[0] = (std::string::size_type)v261;
        sub_20BDE9EB0((void ***)&v249);
        v23 = v260;
        if (v260)
        {
          v24 = (unsigned int *)(v260 + 8);
          do
          {
            v25 = __ldxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        v27 = *((_QWORD *)&v258 + 1);
        if (*((_QWORD *)&v258 + 1))
        {
          v28 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
          do
          {
            v29 = __ldxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v252 + 3);
        sub_20BFD265C((_DWORD *)&v252 + 2);
        sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v252);
        v31 = __str.__r_.__value_.__r.__words[0];
        sub_20C01A074((int *)(__str.__r_.__value_.__r.__words[0] + 192), v9);
        sub_20C01A0C8((int *)(v31 + 196), (_DWORD *)(v5 + 56 * v6 + 28));
        sub_20BF2D298(__str.__r_.__value_.__r.__words[0] + 200, v8 + 56 * v6);
        v32 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 216) = 4;
        v258 = v32;
        if (*((_QWORD *)&v32 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        sub_20C264D7C(&v258, *v248, (char **)(*v248 + 40));
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
        if (*((_QWORD *)&v258 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v39 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v41 = 1;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v265))
      {
        *(_QWORD *)&v258 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v265);
        *((_QWORD *)&v258 + 1) = v42;
        if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v258))
          break;
      }
      pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::New(&__str);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v266);
      v249.__r_.__value_.__r.__words[0] = v44;
      v249.__r_.__value_.__l.__size_ = v45;
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v249, (uint64_t)&v252);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v252);
      v46 = __str.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 16, (uint64_t)&v258);
      sub_20BFD3EBC((int *)(v46 + 96), &v263);
      sub_20BFD3F10((int *)(v46 + 100), v264);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
      sub_20BFD265C(&v263);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
      *(_QWORD *)&v254 = v261;
      sub_20BDE9EB0((void ***)&v254);
      v47 = v260;
      if (v260)
      {
        v48 = (unsigned int *)(v260 + 8);
        do
        {
          v49 = __ldxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      }
      v51 = *((_QWORD *)&v258 + 1);
      if (*((_QWORD *)&v258 + 1))
      {
        v52 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
        do
        {
          v53 = __ldxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v252 + 3);
      sub_20BFD265C((_DWORD *)&v252 + 2);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v252);
      sub_20BF2D298(__str.__r_.__value_.__r.__words[0] + 104, v8 + 56 * v6);
      Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266);
      v56 = __str.__r_.__value_.__r.__words[0];
      sub_20C01A074((int *)(__str.__r_.__value_.__r.__words[0] + 120), Path);
      sub_20C01A0C8((int *)(v56 + 124), Path + 1);
      std::string::operator=((std::string *)(__str.__r_.__value_.__r.__words[0] + 128), (const std::string *)(v8 + 56 * v6 + 32));
      v57 = __str.__r_.__value_.__r.__words[0];
      sub_20C01A074((int *)(__str.__r_.__value_.__r.__words[0] + 152), v9);
      sub_20C01A0C8((int *)(v57 + 156), (_DWORD *)(v5 + 56 * v6 + 28));
      v58 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_OWORD *)(__str.__r_.__value_.__r.__words[0] + 160) = v265;
      *(_DWORD *)(v58 + 176) = 4;
      v258 = v58;
      if (*((_QWORD *)&v58 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      sub_20C264D7C(&v258, *v248, (char **)(*v248 + 40));
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
      v10 = (uint64_t *)(v8 + 56 * v6);
      if (*((_QWORD *)&v258 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v258, 0.0, 1.0);
      v265 = v258;
      v64 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v65 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          if ((v41 & 1) != 0)
            goto LABEL_262;
          goto LABEL_70;
        }
      }
      if ((v41 & 1) == 0)
        goto LABEL_70;
LABEL_262:
      ++v6;
      v5 = *a4;
      if (v6 >= 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 3))
        return;
    }
    *(_QWORD *)&v265 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)(v8 + 56 * v6 + 16), (double *)&v265);
    *((_QWORD *)&v265 + 1) = v43;
    if ((v41 & 1) != 0)
      goto LABEL_262;
LABEL_70:
    v256 = 0;
    v257 = 0;
    if (*(char *)(v7 + 23) < 0)
    {
      v67 = *(_QWORD *)(v7 + 8);
      if (v67)
      {
LABEL_72:
        memset(&__str, 0, sizeof(__str));
        v68 = (const std::string *)(v8 + 56 * v6 + 32);
        if (pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(**(_QWORD **)(a3 + 24), v10, (uint64_t)v68, (__int128 *)&__str))
        {
          pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::New(&v252);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v266);
          *(_QWORD *)&v254 = v69;
          *((_QWORD *)&v254 + 1) = v70;
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v254, (uint64_t)&v249);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v249);
          v71 = v252;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v252 + 16, (uint64_t)&v258);
          sub_20BFD3EBC((int *)(v71 + 96), &v263);
          sub_20BFD3F10((int *)(v71 + 100), v264);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
          sub_20BFD265C(&v263);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
          v250[0] = (void **)v261;
          sub_20BDE9EB0(v250);
          v72 = v260;
          if (v260)
          {
            v73 = (unsigned int *)(v260 + 8);
            do
            {
              v74 = __ldxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
              (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
          }
          v76 = *((_QWORD *)&v258 + 1);
          if (*((_QWORD *)&v258 + 1))
          {
            v77 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
            do
            {
              v78 = __ldxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v249.__r_.__value_.__r.__words[1] + 1);
          sub_20BFD265C(&v249.__r_.__value_.__r.__words[1]);
          sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v249);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266, (uint64_t)&v249);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v249);
          v80 = v252;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v252 + 104, (uint64_t)&v258);
          sub_20BFD3EBC((int *)(v80 + 184), &v263);
          sub_20BFD3F10((int *)(v80 + 188), v264);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
          sub_20BFD265C(&v263);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
          *(_QWORD *)&v254 = v261;
          sub_20BDE9EB0((void ***)&v254);
          v81 = v260;
          if (v260)
          {
            v82 = (unsigned int *)(v260 + 8);
            do
            {
              v83 = __ldxr(v82);
              v84 = v83 - 1;
            }
            while (__stlxr(v84, v82));
            if (!v84)
              (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
          }
          v85 = *((_QWORD *)&v258 + 1);
          if (*((_QWORD *)&v258 + 1))
          {
            v86 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
            do
            {
              v87 = __ldxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
              (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
          }
          v89 = (uint64_t)v10;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v249.__r_.__value_.__r.__words[1] + 1);
          sub_20BFD265C(&v249.__r_.__value_.__r.__words[1]);
          sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v249);
          v90 = v252;
          sub_20C01A074((int *)(v252 + 192), v9);
          sub_20C01A0C8((int *)(v90 + 196), (_DWORD *)(v5 + 56 * v6 + 28));
          std::string::operator=((std::string *)(v252 + 200), v68);
          v10 = (uint64_t *)v89;
          std::string::operator=((std::string *)(v252 + 224), &__str);
          v91 = v252;
          *(_DWORD *)(v252 + 264) = 4;
          sub_20BF2D298(v91 + 248, v89);
          v258 = v252;
          if (*((_QWORD *)&v252 + 1))
          {
            v92 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          sub_20C264D7C(&v258, *v248, (char **)(*v248 + 40));
          v94 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
          if (*((_QWORD *)&v258 + 1))
          {
            v95 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          v97 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
          if (*((_QWORD *)&v252 + 1))
          {
            v98 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v100 = 4;
        }
        else
        {
          *((_QWORD *)&v252 + 1) = 0;
          v253 = 0;
          *(_QWORD *)&v252 = (char *)&v252 + 8;
          pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(v5 + 56 * v6, *(_QWORD *)(a3 + 24) + 72, (uint64_t **)&v252);
          pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v251);
          pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(v5 + 56 * v6, &v252, &v258);
          v108 = v257;
          v257 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v258;
          *(_QWORD *)&v258 = 0;
          sub_20BF1D8F4((int)&v257, v108);
          sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v258);
          if (v257)
          {
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266);
            v110 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v110);
            sub_20C1034E8((uint64_t *)&v249, (uint64_t *)&v257);
            v254 = 0uLL;
            v112 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266);
            v113 = sub_20C1FE500(v112);
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(&v258, &v249, &v254, Identifier + 32, *(_QWORD *)(v113 + 392));
            v114 = *((_QWORD *)&v254 + 1);
            if (*((_QWORD *)&v254 + 1))
            {
              v115 = (unsigned int *)(*((_QWORD *)&v254 + 1) + 8);
              do
              {
                v116 = __ldxr(v115);
                v117 = v116 - 1;
              }
              while (__stlxr(v117, v115));
              if (!v117)
                (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
            }
            v118 = v249.__r_.__value_.__l.__size_;
            if (v249.__r_.__value_.__l.__size_)
            {
              v119 = (unsigned int *)(v249.__r_.__value_.__l.__size_ + 8);
              do
              {
                v120 = __ldxr(v119);
                v121 = v120 - 1;
              }
              while (__stlxr(v121, v119));
              if (!v121)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v118 + 8))(v118);
            }
            pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(**(_QWORD **)(a3 + 24), (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)&v258, (uint64_t *)(*(_QWORD *)(a3 + 32) + 40), (uint64_t *)&v249);
            v122 = v256;
            v256 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v249.__r_.__value_.__r.__words[0];
            v249.__r_.__value_.__r.__words[0] = 0;
            sub_20BF1D8F4((int)&v256, v122);
            v123 = sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v249);
            if ((pxrInternal__aapl__pxrReserved__::PcpIsTimeScalingForLayerTimeCodesPerSecondDisabled((pxrInternal__aapl__pxrReserved__ *)v123) & 1) == 0)
            {
              v124 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v10);
              TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v124);
              v126 = *(double *)(sub_20C1FE500((uint64_t *)&v256) + 168);
              if (TimeCodesPerSecond != v126)
                *((double *)&v265 + 1) = TimeCodesPerSecond * *((double *)&v265 + 1) / v126;
            }
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
            v249.__r_.__value_.__r.__words[0] = (std::string::size_type)v261;
            sub_20BDE9EB0((void ***)&v249);
            v127 = v260;
            if (v260)
            {
              v128 = (unsigned int *)(v260 + 8);
              do
              {
                v129 = __ldxr(v128);
                v130 = v129 - 1;
              }
              while (__stlxr(v130, v128));
              if (!v130)
                (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
            }
            v131 = *((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v132 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
              do
              {
                v133 = __ldxr(v132);
                v134 = v133 - 1;
              }
              while (__stlxr(v134, v132));
              if (!v134)
                (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
            }
            v100 = 0;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::New(&v254);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v266);
            v250[0] = v135;
            v250[1] = v136;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v250, (uint64_t)&v249);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v249);
            v137 = v254;
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v254 + 16, (uint64_t)&v258);
            sub_20BFD3EBC((int *)(v137 + 96), &v263);
            sub_20BFD3F10((int *)(v137 + 100), v264);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
            sub_20BFD265C(&v263);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
            v268 = (void **)v261;
            sub_20BDE9EB0(&v268);
            v138 = v260;
            if (v260)
            {
              v139 = (unsigned int *)(v260 + 8);
              do
              {
                v140 = __ldxr(v139);
                v141 = v140 - 1;
              }
              while (__stlxr(v141, v139));
              if (!v141)
                (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
            }
            v142 = *((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v143 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
              do
              {
                v144 = __ldxr(v143);
                v145 = v144 - 1;
              }
              while (__stlxr(v145, v143));
              if (!v145)
                (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v249.__r_.__value_.__r.__words[1] + 1);
            sub_20BFD265C(&v249.__r_.__value_.__r.__words[1]);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v249);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266, (uint64_t)&v249);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v249);
            v146 = v254;
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v254 + 104, (uint64_t)&v258);
            sub_20BFD3EBC((int *)(v146 + 184), &v263);
            sub_20BFD3F10((int *)(v146 + 188), v264);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
            sub_20BFD265C(&v263);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
            v250[0] = (void **)v261;
            sub_20BDE9EB0(v250);
            v147 = v260;
            if (v260)
            {
              v148 = (unsigned int *)(v260 + 8);
              do
              {
                v149 = __ldxr(v148);
                v150 = v149 - 1;
              }
              while (__stlxr(v150, v148));
              if (!v150)
                (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
            }
            v151 = *((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v152 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
              do
              {
                v153 = __ldxr(v152);
                v154 = v153 - 1;
              }
              while (__stlxr(v154, v152));
              if (!v154)
                (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
            }
            v155 = (uint64_t)v10;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v249.__r_.__value_.__r.__words[1] + 1);
            sub_20BFD265C(&v249.__r_.__value_.__r.__words[1]);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v249);
            v156 = v254;
            sub_20C01A074((int *)(v254 + 192), v9);
            sub_20C01A0C8((int *)(v156 + 196), (_DWORD *)(v5 + 56 * v6 + 28));
            std::string::operator=((std::string *)(v254 + 200), v68);
            v10 = (uint64_t *)v155;
            std::string::operator=((std::string *)(v254 + 224), (const std::string *)(v5 + 56 * v6));
            v157 = v254;
            *(_DWORD *)(v254 + 264) = 4;
            sub_20BF2D298(v157 + 248, v155);
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!Instance)
              Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            v159 = v251;
            v160 = atomic_load(Instance + 18);
            if (v159 < v160
              && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v251, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
            {
              v258 = 0uLL;
              v259 = 0;
              v161 = sub_20BEC5244(&v251, 0);
              v162 = sub_20BEDAF68();
              if (v161 != (_QWORD *)v162)
              {
                v163 = *((_QWORD *)&v258 + 1);
                do
                {
                  v164 = (__int128 *)(v161 + 7);
                  if (v163 >= v259)
                  {
                    v163 = sub_20BE4EE50((uint64_t *)&v258, v164);
                  }
                  else
                  {
                    if (*((char *)v161 + 79) < 0)
                    {
                      sub_20BDDBFAC((_BYTE *)v163, (void *)v161[7], v161[8]);
                    }
                    else
                    {
                      v165 = *v164;
                      *(_QWORD *)(v163 + 16) = v161[9];
                      *(_OWORD *)v163 = v165;
                    }
                    v163 += 24;
                  }
                  *((_QWORD *)&v258 + 1) = v163;
                  v161 = (_QWORD *)v161[1];
                }
                while (v161 != (_QWORD *)v162);
              }
              v166 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
              if (!v166)
                v166 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
              v167 = sub_20BEC5244(&v251, 0);
              LOBYTE(v250[0]) = 0;
              v168 = (_QWORD *)sub_20BEB5B80(v166 + 19, v250);
              if (v168 != v167)
                pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v166, v167, v168);
              sub_20BEE380C("; ", (std::string *)v258, *((std::string **)&v258 + 1), &v249);
              v169 = (void **)(v254 + 272);
              if (*(char *)(v254 + 295) < 0)
                operator delete(*v169);
              *(std::string *)v169 = v249;
              v249.__r_.__value_.__r.__words[0] = (std::string::size_type)&v258;
              sub_20BDE5038((void ***)&v249);
            }
            v258 = v254;
            if (*((_QWORD *)&v254 + 1))
            {
              v170 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
              do
                v171 = __ldxr(v170);
              while (__stxr(v171 + 1, v170));
            }
            sub_20C264D7C(&v258, *v248, (char **)(*v248 + 40));
            v172 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v173 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              if (!v174)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
              }
            }
            v175 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
            if (*((_QWORD *)&v254 + 1))
            {
              v176 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            v100 = 4;
          }
          pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v251);
          sub_20BDE9D48((uint64_t)&v252, *((_QWORD **)&v252 + 1));
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if (!v100)
            goto LABEL_199;
        }
        else if (!v100)
        {
LABEL_199:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v250);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v250 + 1);
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v9))
            goto LABEL_206;
          v178 = sub_20C1034E8((uint64_t *)&v258, (uint64_t *)&v257);
          v179 = (uint64_t)v10;
          sub_20C266830(v178, &__str);
          sub_20BFD3EBC((int *)v250, (int *)&__str);
          sub_20BFD3F10((int *)v250 + 1, (int *)__str.__r_.__value_.__r.__words + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
          sub_20BFD265C(&__str);
          v180 = *((_QWORD *)&v258 + 1);
          if (*((_QWORD *)&v258 + 1))
          {
            v181 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
            do
            {
              v182 = __ldxr(v181);
              v183 = v182 - 1;
            }
            while (__stlxr(v183, v181));
            if (!v183)
              (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v250))
          {
LABEL_206:
            v184 = 1;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::New(&__str);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v266);
            v249.__r_.__value_.__r.__words[0] = v185;
            v249.__r_.__value_.__l.__size_ = v186;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v249, (uint64_t)&v252);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v252);
            v187 = __str.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 16, (uint64_t)&v258);
            sub_20BFD3EBC((int *)(v187 + 96), &v263);
            sub_20BFD3F10((int *)(v187 + 100), v264);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
            sub_20BFD265C(&v263);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
            *(_QWORD *)&v254 = v261;
            sub_20BDE9EB0((void ***)&v254);
            v188 = v260;
            if (v260)
            {
              v189 = (unsigned int *)(v260 + 8);
              do
              {
                v190 = __ldxr(v189);
                v191 = v190 - 1;
              }
              while (__stlxr(v191, v189));
              if (!v191)
                (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
            }
            v192 = *((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v193 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
              do
              {
                v194 = __ldxr(v193);
                v195 = v194 - 1;
              }
              while (__stlxr(v195, v193));
              if (!v195)
                (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v252 + 3);
            sub_20BFD265C((_DWORD *)&v252 + 2);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v252);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266, (uint64_t)&v252);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v258, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v252);
            v196 = __str.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 104, (uint64_t)&v258);
            sub_20BFD3EBC((int *)(v196 + 184), &v263);
            sub_20BFD3F10((int *)(v196 + 188), v264);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v264);
            sub_20BFD265C(&v263);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v262);
            v249.__r_.__value_.__r.__words[0] = (std::string::size_type)v261;
            sub_20BDE9EB0((void ***)&v249);
            v197 = v260;
            if (v260)
            {
              v198 = (unsigned int *)(v260 + 8);
              do
              {
                v199 = __ldxr(v198);
                v200 = v199 - 1;
              }
              while (__stlxr(v200, v198));
              if (!v200)
                (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
            }
            v201 = *((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v202 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
              do
              {
                v203 = __ldxr(v202);
                v204 = v203 - 1;
              }
              while (__stlxr(v204, v202));
              if (!v204)
                (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v252 + 3);
            sub_20BFD265C((_DWORD *)&v252 + 2);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v252);
            sub_20C1034E8((uint64_t *)&v258, (uint64_t *)&v257);
            v205 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(__str.__r_.__value_.__r.__words[0] + 216);
            *(_OWORD *)(__str.__r_.__value_.__r.__words[0] + 208) = v258;
            *((_QWORD *)&v258 + 1) = 0;
            if (v205)
            {
              v206 = (unsigned int *)((char *)v205 + 8);
              do
              {
                v207 = __ldxr(v206);
                v208 = v207 - 1;
              }
              while (__stlxr(v208, v206));
              if (!v208)
                (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v205 + 8))(v205);
              v205 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v258 + 1);
              *(_QWORD *)&v258 = 0;
              if (*((_QWORD *)&v258 + 1))
              {
                v209 = (unsigned int *)(*((_QWORD *)&v258 + 1) + 8);
                do
                {
                  v210 = __ldxr(v209);
                  v211 = v210 - 1;
                }
                while (__stlxr(v211, v209));
                if (!v211)
                  v205 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v205 + 8))(v205);
              }
            }
            v212 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(v205);
            v213 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v213)
              v213 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v212, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v213 + 96), &v258);
            v214 = __str.__r_.__value_.__r.__words[0];
            sub_20BFD3EBC((int *)(__str.__r_.__value_.__r.__words[0] + 224), (int *)&v258);
            sub_20BFD3F10((int *)(v214 + 228), (int *)&v258 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v258 + 1);
            sub_20BFD265C(&v258);
            sub_20BF2D298(__str.__r_.__value_.__r.__words[0] + 192, v179);
            v215 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 232) = 4;
            v258 = v215;
            if (*((_QWORD *)&v215 + 1))
            {
              v216 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
              do
                v217 = __ldxr(v216);
              while (__stxr(v217 + 1, v216));
            }
            v218 = sub_20C264D7C(&v258, *v248, (char **)(*v248 + 40));
            v219 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v220 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
              do
                v221 = __ldaxr(v220);
              while (__stlxr(v221 - 1, v220));
              if (!v221)
              {
                ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                std::__shared_weak_count::__release_weak(v219);
              }
            }
            v222 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v218);
            sub_20C01A074((int *)v250, v222);
            sub_20C01A0C8((int *)v250 + 1, v222 + 1);
            v223 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
            {
              v224 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
              do
                v225 = __ldaxr(v224);
              while (__stlxr(v225 - 1, v224));
              if (!v225)
              {
                ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                std::__shared_weak_count::__release_weak(v223);
              }
            }
            v184 = 0;
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v250))
            v226 = v250;
          else
            v226 = (void ***)(v5 + 56 * v6 + 24);
          sub_20C2668F8((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266, v226, *(_QWORD *)(a3 + 24), (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v265, (pxrInternal__aapl__pxrReserved__ **)&__str);
          if (!v67)
          {
            pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity((pxrInternal__aapl__pxrReserved__ **)&__str, v227, v228, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)&v252);
            v229 = v252;
            *(_QWORD *)&v252 = 0;
            *(_QWORD *)&v258 = __str.__r_.__value_.__r.__words[0];
            __str.__r_.__value_.__r.__words[0] = v229;
            sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v258, v230);
            sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v252, v231);
          }
          IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v226);
          v233 = v266;
          v234 = v267;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v258, &v256, v226);
          v235 = 256;
          if (IsRootPrimPath)
            v235 = 0;
          v244 = v184 | v244 & 0xFFFFFF0000000000 | v235;
          sub_20C2623F4(a3, 4u, (uint64_t)v233, v234, &v266, &v258, (uint64_t *)&__str, v6, v244);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v258 + 3);
          sub_20BFD265C((_DWORD *)&v258 + 2);
          sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v258);
          sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&__str, v236);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v250 + 1);
          sub_20BFD265C(v250);
        }
        sub_20C2012CC(&v256);
        sub_20C103234(&v257);
        goto LABEL_262;
      }
    }
    else
    {
      v67 = *(unsigned __int8 *)(v7 + 23);
      if (*(_BYTE *)(v7 + 23))
        goto LABEL_72;
    }
    v101 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266);
    v102 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v101);
    v103 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v102);
    v104 = v103[1];
    if (v104)
    {
      if (*(_BYTE *)(sub_20BEB47BC(v103 + 1) + 14))
        v104 = *v103;
      else
        v104 = 0;
    }
    *(_QWORD *)&v258 = v104;
    sub_20BF1DD04((uint64_t *)&v258);
    v105 = v257;
    v257 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v258;
    *(_QWORD *)&v258 = 0;
    sub_20BF1D8F4((int)&v257, v105);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v258);
    v106 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v266);
    v107 = v256;
    v256 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v106;
    sub_20BF1DD04(v106);
    sub_20BF1D8F4((int)&v256, v107);
    goto LABEL_199;
  }
}

void sub_20C266494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,_QWORD *a39,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  a29 = v48 - 240;
  sub_20BDE5038((void ***)&a29);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a41);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a34);
  sub_20BDE9D48((uint64_t)&a36, a39);
  if (a48 < 0)
    operator delete(__p);
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v48 - 256));
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v48 - 248));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C266830@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v3;
  pxrInternal__aapl__pxrReserved__::TfToken *DefaultPrim;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::SdfPath *IsValidIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  _DWORD *result;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFCF650(a1);
  DefaultPrim = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(v3, (unsigned int **)&v11);
  if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(DefaultPrim);
  IsValidIdentifier = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString);
  if ((_DWORD)IsValidIdentifier)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsValidIdentifier);
    result = pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  }
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  return result;
}

_DWORD *sub_20C2668F8@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X1>, _DWORD *a2@<X0>, uint64_t a3@<X2>, pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a4@<X3>, pxrInternal__aapl__pxrReserved__ **a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t **v11;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v16;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v17;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v18;
  pxrInternal__aapl__pxrReserved__ *v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  uint64_t *v22;
  _QWORD *v23[2];
  int v24;
  int v25;
  _DWORD *v26[8];

  v26[7] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(Path, &v24);
  v23[0] = 0;
  v23[1] = 0;
  v22 = (uint64_t *)v23;
  v26[0] = a2;
  v11 = sub_20C246A40(&v22, (unint64_t *)a2, (uint64_t)&unk_20CAC184C, v26);
  sub_20C01A074((int *)v11 + 9, &v24);
  sub_20C01A0C8((int *)v11 + 10, &v25);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(&v22, a4, (uint64_t)v26);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v26, a5);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v26);
  if (!*(_BYTE *)(a3 + 97))
  {
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetExpressionForRelocatesAtPath((uint64_t *)&v20, v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)&v20, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)a5, v14, &v21);
    v15 = v21;
    v21 = 0;
    v26[0] = *a5;
    *a5 = v15;
    sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)v26, v16);
    sub_20C211C74(&v21, v17);
    sub_20C211C74(&v20, v18);
  }
  sub_20BFE4CE8((uint64_t)&v22, v23[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  return sub_20BFD265C(&v24);
}

void sub_20C266A68(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__ *a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, int a14)
{
  pxrInternal__aapl__pxrReserved__ **v14;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v16;

  sub_20C211C74(&a9, a2);
  sub_20C211C74(v14, v16);
  sub_20BFE4CE8((uint64_t)&a11, a12);
  sub_20BFD1A18(&a14);
  _Unwind_Resume(a1);
}

void sub_20C266AD4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20C232030((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_20C266B58@<W0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X1>, uint64_t a2@<X0>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const char *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v10;
  _QWORD *v11;
  _BOOL8 result;
  const char *v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v16;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v17;
  const char *v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v20;
  int v21;
  int v22;

  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(Path, &v21);
  v10 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v8, v9);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  v11 = (_QWORD *)(a2 + 40);
  while (1)
  {
    v11 = (_QWORD *)*v11;
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3);
    if (!v11 || !result)
      break;
    v16 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11[5] + 40), v13, v14);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v21);
    sub_20BFD3EBC(a3, &v21);
    sub_20BFD3F10(a3 + 1, &v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    v17 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v11 + 3));
    v20 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v17, v18, v19);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v21);
    sub_20BFD3EBC(a3, &v21);
    sub_20BFD3F10(a3 + 1, &v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
  }
  return result;
}

void sub_20C266C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C266CB0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  std::string::size_type v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  std::string::size_type v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  void *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *Path;
  std::string::size_type v56;
  std::string::size_type v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  const std::string *v68;
  uint64_t *v69;
  _QWORD *v70;
  std::string::size_type v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  void *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  std::string::size_type v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  void *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  std::string::size_type v90;
  std::string::size_type v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  uint64_t *v101;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v102;
  uint64_t v103;
  void *v104;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v105;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v106;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v107;
  uint64_t (*v108)(uint64_t *);
  char v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  __n128 v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v117;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v119;
  uint64_t Identifier;
  uint64_t *v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  std::string::size_type v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v131;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v132;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v133;
  double TimeCodesPerSecond;
  double v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  void *v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  void **v144;
  uint64_t v145;
  pxrInternal__aapl__pxrReserved__ *v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  void *v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  pxrInternal__aapl__pxrReserved__ *v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  void *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  pxrInternal__aapl__pxrReserved__ *v165;
  pxrInternal__aapl__pxrReserved__ *v166;
  unint64_t *Instance;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  char *v172;
  __int128 *v173;
  __int128 v174;
  unint64_t *v175;
  _QWORD *v176;
  _QWORD *v177;
  void **v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  void *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  std::string::size_type v193;
  std::string::size_type v194;
  std::string::size_type v195;
  uint64_t v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int v199;
  void *v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  std::string::size_type v204;
  uint64_t v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  void *v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  pxrInternal__aapl__pxrReserved__::SdfPath *v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int v219;
  pxrInternal__aapl__pxrReserved__::SdfPath *v220;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v221;
  std::string::size_type v222;
  __int128 v223;
  unint64_t *v224;
  unint64_t v225;
  __int128 *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  _DWORD *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void ***v234;
  const char *v235;
  char *v236;
  pxrInternal__aapl__pxrReserved__ *v237;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v238;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v239;
  int IsRootPrimPath;
  __n128 v241;
  uint64_t v242;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v243;
  uint64_t v244;
  pxrInternal__aapl__pxrReserved__ **v245;
  uint64_t v246;
  _QWORD *v247;
  pxrInternal__aapl__pxrReserved__ *v248;
  const char *Text;
  const char *v250;
  unint64_t v251;
  uint64_t *v255;
  unint64_t v256;
  uint64_t *v257;
  _QWORD *v258[2];
  std::string __str;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v260;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v261;
  void *__p[2];
  unint64_t v263;
  uint64_t v264;
  _BYTE v265[24];
  _BYTE v266[24];
  int v267;
  int v268[3];
  __int128 v269;
  __n128 v270;
  pxrInternal__aapl__pxrReserved__ *v271;
  _QWORD *v272[2];
  std::string v273;
  void **v274;
  uint64_t v275;
  void **v276[5];

  v276[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v270.n128_u64[0] = a1;
  v270.n128_u64[1] = a2;
  v5 = *a4;
  if (a4[1] != *a4)
  {
    v6 = 0;
    v255 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v7 = v5 + 48 * v6;
      v8 = *a5;
      v269 = *(_OWORD *)(v7 + 32);
      if (sub_20C1FE3D8(2))
      {
        v244 = *(_QWORD *)(a3 + 40);
        v245 = (pxrInternal__aapl__pxrReserved__ **)v255;
        if (v244)
          v245 = (pxrInternal__aapl__pxrReserved__ **)(v244 + 48);
        v246 = v8 + 56 * v6;
        v247 = (_QWORD *)(v246 + 32);
        if (*(char *)(v246 + 55) < 0)
          v247 = (_QWORD *)*v247;
        v248 = *v245;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 48 * v6 + 24));
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v248, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v270, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found %s to @%s@<%s>", v250, "payload", v247, Text);
      }
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 48 * v6 + 24);
      v10 = (uint64_t *)(v8 + 56 * v6);
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v9)
        || pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v9)
        && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v9)
        && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(v9))
      {
        v41 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::New(&v273);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v270);
        __str.__r_.__value_.__r.__words[0] = v11;
        __str.__r_.__value_.__l.__size_ = v12;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__str, (uint64_t)&v271);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v271);
        v13 = v273.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v273.__r_.__value_.__r.__words[0] + 16, (uint64_t)__p);
        sub_20BFD3EBC((int *)(v13 + 96), &v267);
        sub_20BFD3F10((int *)(v13 + 100), v268);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
        sub_20BFD265C(&v267);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
        v257 = (uint64_t *)v265;
        sub_20BDE9EB0((void ***)&v257);
        v14 = v264;
        if (v264)
        {
          v15 = (unsigned int *)(v264 + 8);
          do
          {
            v16 = __ldxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v18 = __p[1];
        if (__p[1])
        {
          v19 = (unsigned int *)((char *)__p[1] + 8);
          do
          {
            v20 = __ldxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
            (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v272 + 1);
        sub_20BFD265C(v272);
        sub_20C2012CC(&v271);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270, (uint64_t)&v271);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v271);
        v22 = v273.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v273.__r_.__value_.__r.__words[0] + 104, (uint64_t)__p);
        sub_20BFD3EBC((int *)(v22 + 184), &v267);
        sub_20BFD3F10((int *)(v22 + 188), v268);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
        sub_20BFD265C(&v267);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
        sub_20BDE9EB0((void ***)&__str);
        v23 = v264;
        if (v264)
        {
          v24 = (unsigned int *)(v264 + 8);
          do
          {
            v25 = __ldxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        v27 = __p[1];
        if (__p[1])
        {
          v28 = (unsigned int *)((char *)__p[1] + 8);
          do
          {
            v29 = __ldxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v272 + 1);
        sub_20BFD265C(v272);
        sub_20C2012CC(&v271);
        v31 = v273.__r_.__value_.__r.__words[0];
        sub_20C01A074((int *)(v273.__r_.__value_.__r.__words[0] + 192), v9);
        sub_20C01A0C8((int *)(v31 + 196), (_DWORD *)(v5 + 48 * v6 + 28));
        sub_20BF2D298(v273.__r_.__value_.__r.__words[0] + 200, v8 + 56 * v6);
        v32 = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
        *(_DWORD *)(v273.__r_.__value_.__r.__words[0] + 216) = 5;
        *(_OWORD *)__p = v32;
        if (*((_QWORD *)&v32 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        sub_20C264D7C((__int128 *)__p, *v255, (char **)(*v255 + 40));
        v35 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v36 = (unint64_t *)((char *)__p[1] + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        size = (std::__shared_weak_count *)v273.__r_.__value_.__l.__size_;
        if (v273.__r_.__value_.__l.__size_)
        {
          v39 = (unint64_t *)(v273.__r_.__value_.__l.__size_ + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v41 = 1;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v269))
      {
        __p[0] = COERCE_VOID_(pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v269));
        __p[1] = v42;
        if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)__p))
          break;
      }
      pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::New(&v273);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v270);
      __str.__r_.__value_.__r.__words[0] = v44;
      __str.__r_.__value_.__l.__size_ = v45;
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__str, (uint64_t)&v271);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v271);
      v46 = v273.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v273.__r_.__value_.__r.__words[0] + 16, (uint64_t)__p);
      sub_20BFD3EBC((int *)(v46 + 96), &v267);
      sub_20BFD3F10((int *)(v46 + 100), v268);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
      sub_20BFD265C(&v267);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
      v257 = (uint64_t *)v265;
      sub_20BDE9EB0((void ***)&v257);
      v47 = v264;
      if (v264)
      {
        v48 = (unsigned int *)(v264 + 8);
        do
        {
          v49 = __ldxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      }
      v51 = __p[1];
      if (__p[1])
      {
        v52 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v53 = __ldxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
          (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v272 + 1);
      sub_20BFD265C(v272);
      sub_20C2012CC(&v271);
      sub_20BF2D298(v273.__r_.__value_.__r.__words[0] + 104, v8 + 56 * v6);
      Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270);
      v56 = v273.__r_.__value_.__r.__words[0];
      sub_20C01A074((int *)(v273.__r_.__value_.__r.__words[0] + 120), Path);
      sub_20C01A0C8((int *)(v56 + 124), Path + 1);
      std::string::operator=((std::string *)(v273.__r_.__value_.__r.__words[0] + 128), (const std::string *)(v8 + 56 * v6 + 32));
      v57 = v273.__r_.__value_.__r.__words[0];
      sub_20C01A074((int *)(v273.__r_.__value_.__r.__words[0] + 152), v9);
      sub_20C01A0C8((int *)(v57 + 156), (_DWORD *)(v5 + 48 * v6 + 28));
      v58 = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
      *(_OWORD *)(v273.__r_.__value_.__r.__words[0] + 160) = v269;
      *(_DWORD *)(v58 + 176) = 5;
      *(_OWORD *)__p = v58;
      if (*((_QWORD *)&v58 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      sub_20C264D7C((__int128 *)__p, *v255, (char **)(*v255 + 40));
      v61 = (std::__shared_weak_count *)__p[1];
      v10 = (uint64_t *)(v8 + 56 * v6);
      if (__p[1])
      {
        v62 = (unint64_t *)((char *)__p[1] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, 0.0, 1.0);
      v269 = *(_OWORD *)__p;
      v64 = (std::__shared_weak_count *)v273.__r_.__value_.__l.__size_;
      if (v273.__r_.__value_.__l.__size_)
      {
        v65 = (unint64_t *)(v273.__r_.__value_.__l.__size_ + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          if ((v41 & 1) != 0)
            goto LABEL_276;
          goto LABEL_70;
        }
      }
      if ((v41 & 1) == 0)
        goto LABEL_70;
LABEL_276:
      ++v6;
      v5 = *a4;
      if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4))
        return;
    }
    *(_QWORD *)&v269 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)(v8 + 56 * v6 + 16), (double *)&v269);
    *((_QWORD *)&v269 + 1) = v43;
    if ((v41 & 1) != 0)
      goto LABEL_276;
LABEL_70:
    v260 = 0;
    v261 = 0;
    if (*(char *)(v7 + 23) < 0)
    {
      v67 = *(_QWORD *)(v7 + 8);
      if (v67)
      {
LABEL_72:
        memset(&__str, 0, sizeof(__str));
        v68 = (const std::string *)(v8 + 56 * v6 + 32);
        if (pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(**(_QWORD **)(a3 + 24), v10, (uint64_t)v68, (__int128 *)&__str))
        {
          pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::New(&v273);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v270);
          v257 = v69;
          v258[0] = v70;
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v257, (uint64_t)&v271);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v271);
          v71 = v273.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v273.__r_.__value_.__r.__words[0] + 16, (uint64_t)__p);
          sub_20BFD3EBC((int *)(v71 + 96), &v267);
          sub_20BFD3F10((int *)(v71 + 100), v268);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
          sub_20BFD265C(&v267);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
          v274 = (void **)v265;
          sub_20BDE9EB0(&v274);
          v72 = v264;
          if (v264)
          {
            v73 = (unsigned int *)(v264 + 8);
            do
            {
              v74 = __ldxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
              (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
          }
          v76 = __p[1];
          if (__p[1])
          {
            v77 = (unsigned int *)((char *)__p[1] + 8);
            do
            {
              v78 = __ldxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v272 + 1);
          sub_20BFD265C(v272);
          sub_20C2012CC(&v271);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270, (uint64_t)&v271);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v271);
          v80 = v273.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v273.__r_.__value_.__r.__words[0] + 104, (uint64_t)__p);
          sub_20BFD3EBC((int *)(v80 + 184), &v267);
          sub_20BFD3F10((int *)(v80 + 188), v268);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
          sub_20BFD265C(&v267);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
          v257 = (uint64_t *)v265;
          sub_20BDE9EB0((void ***)&v257);
          v81 = v264;
          if (v264)
          {
            v82 = (unsigned int *)(v264 + 8);
            do
            {
              v83 = __ldxr(v82);
              v84 = v83 - 1;
            }
            while (__stlxr(v84, v82));
            if (!v84)
              (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
          }
          v85 = __p[1];
          if (__p[1])
          {
            v86 = (unsigned int *)((char *)__p[1] + 8);
            do
            {
              v87 = __ldxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
              (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
          }
          v89 = (uint64_t)v10;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v272 + 1);
          sub_20BFD265C(v272);
          sub_20C2012CC(&v271);
          v90 = v273.__r_.__value_.__r.__words[0];
          sub_20C01A074((int *)(v273.__r_.__value_.__r.__words[0] + 192), v9);
          sub_20C01A0C8((int *)(v90 + 196), (_DWORD *)(v5 + 48 * v6 + 28));
          std::string::operator=((std::string *)(v273.__r_.__value_.__r.__words[0] + 200), v68);
          v10 = (uint64_t *)v89;
          std::string::operator=((std::string *)(v273.__r_.__value_.__r.__words[0] + 224), &__str);
          v91 = v273.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v273.__r_.__value_.__r.__words[0] + 264) = 5;
          sub_20BF2D298(v91 + 248, v89);
          *(_OWORD *)__p = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
          if (v273.__r_.__value_.__l.__size_)
          {
            v92 = (unint64_t *)(v273.__r_.__value_.__l.__size_ + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          sub_20C264D7C((__int128 *)__p, *v255, (char **)(*v255 + 40));
          v94 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v95 = (unint64_t *)((char *)__p[1] + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          v97 = (std::__shared_weak_count *)v273.__r_.__value_.__l.__size_;
          if (v273.__r_.__value_.__l.__size_)
          {
            v98 = (unint64_t *)(v273.__r_.__value_.__l.__size_ + 8);
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v100 = 4;
        }
        else
        {
          v258[0] = 0;
          v258[1] = 0;
          v257 = (uint64_t *)v258;
          pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(v5 + 48 * v6, (uint64_t)__p);
          pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)__p, *(_QWORD *)(a3 + 24) + 72, (uint64_t *)&v274);
          if (SHIBYTE(v263) < 0)
            operator delete(__p[0]);
          v108 = sub_20C0E9DAC(&v274);
          v110 = v275;
          if (v109 & 1 | (unint64_t)v108 && v275)
          {
            if (*(_BYTE *)(sub_20BEB47BC(&v275) + 14))
            {
              if (v274)
              {
                if (v111)
                {
                  v112 = (uint64_t)v111;
                  *(_OWORD *)&v273.__r_.__value_.__r.__words[1] = 0uLL;
                  v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273.__r_.__value_.__l.__size_;
                  v272[0] = 0;
                  v272[1] = 0;
                  v271 = (pxrInternal__aapl__pxrReserved__ *)v272;
                  v113 = pxrInternal__aapl__pxrReserved__::Pcp_CreateDynamicFileFormatContext(&v270, *(_QWORD *)(a3 + 40), (unint64_t)&v273, (unint64_t)&v271, (__n128 *)__p);
                  v276[1] = 0;
                  (*(void (**)(uint64_t, unint64_t, void **, uint64_t **, void ***, __n128))(*(_QWORD *)v112 + 16))(v112, v5 + 48 * v6, __p, &v257, v276, v113);
                  pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::AddDependencyContext((uint64_t *)(*v255 + 72), v112, v276, (uint64_t)&v273, (uint64_t)&v271);
                  sub_20BF4C2D8((uint64_t)v276);
                  sub_20BF2B200((uint64_t)&v271, v272[0]);
                  sub_20BF2B200((uint64_t)&v273, (_QWORD *)v273.__r_.__value_.__l.__size_);
                }
              }
            }
            v110 = v275;
          }
          if (v110)
          {
            v114 = (unsigned int *)(v110 + 8);
            do
            {
              v115 = __ldxr(v114);
              v116 = v115 - 1;
            }
            while (__stlxr(v116, v114));
            if (!v116)
              (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
          }
          pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(v5 + 48 * v6, *(_QWORD *)(a3 + 24) + 72, &v257);
          pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v256);
          pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(v5 + 48 * v6, &v257, __p);
          v117 = v261;
          v261 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p[0];
          __p[0] = 0;
          sub_20BF1D8F4((int)&v261, v117);
          sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
          if (v261)
          {
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270);
            v119 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v119);
            sub_20C1034E8((uint64_t *)&v273, (uint64_t *)&v261);
            v271 = 0;
            v272[0] = 0;
            v121 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270);
            v122 = sub_20C1FE500(v121);
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(__p, &v273, &v271, Identifier + 32, *(_QWORD *)(v122 + 392));
            v123 = v272[0];
            if (v272[0])
            {
              v124 = (unsigned int *)(v272[0] + 1);
              do
              {
                v125 = __ldxr(v124);
                v126 = v125 - 1;
              }
              while (__stlxr(v126, v124));
              if (!v126)
                (*(void (**)(_QWORD *))(*v123 + 8))(v123);
            }
            v127 = v273.__r_.__value_.__l.__size_;
            if (v273.__r_.__value_.__l.__size_)
            {
              v128 = (unsigned int *)(v273.__r_.__value_.__l.__size_ + 8);
              do
              {
                v129 = __ldxr(v128);
                v130 = v129 - 1;
              }
              while (__stlxr(v130, v128));
              if (!v130)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v127 + 8))(v127);
            }
            pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(**(_QWORD **)(a3 + 24), (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)__p, (uint64_t *)(*(_QWORD *)(a3 + 32) + 40), (uint64_t *)&v273);
            v131 = v260;
            v260 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v273.__r_.__value_.__r.__words[0];
            v273.__r_.__value_.__r.__words[0] = 0;
            sub_20BF1D8F4((int)&v260, v131);
            v132 = sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v273);
            if ((pxrInternal__aapl__pxrReserved__::PcpIsTimeScalingForLayerTimeCodesPerSecondDisabled((pxrInternal__aapl__pxrReserved__ *)v132) & 1) == 0)
            {
              v133 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v10);
              TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v133);
              v135 = *(double *)(sub_20C1FE500((uint64_t *)&v260) + 168);
              if (TimeCodesPerSecond != v135)
                *((double *)&v269 + 1) = TimeCodesPerSecond * *((double *)&v269 + 1) / v135;
            }
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
            v273.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
            sub_20BDE9EB0((void ***)&v273);
            v136 = v264;
            if (v264)
            {
              v137 = (unsigned int *)(v264 + 8);
              do
              {
                v138 = __ldxr(v137);
                v139 = v138 - 1;
              }
              while (__stlxr(v139, v137));
              if (!v139)
                (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
            }
            v140 = __p[1];
            if (__p[1])
            {
              v141 = (unsigned int *)((char *)__p[1] + 8);
              do
              {
                v142 = __ldxr(v141);
                v143 = v142 - 1;
              }
              while (__stlxr(v143, v141));
              if (!v143)
                (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
            }
            v100 = 0;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::New(&v271);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v270);
            v274 = v144;
            v275 = v145;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v274, (uint64_t)&v273);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v273);
            v146 = v271;
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)v271 + 16, (uint64_t)__p);
            sub_20BFD3EBC((int *)v146 + 24, &v267);
            sub_20BFD3F10((int *)v146 + 25, v268);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
            sub_20BFD265C(&v267);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
            v276[0] = (void **)v265;
            sub_20BDE9EB0(v276);
            v147 = v264;
            if (v264)
            {
              v148 = (unsigned int *)(v264 + 8);
              do
              {
                v149 = __ldxr(v148);
                v150 = v149 - 1;
              }
              while (__stlxr(v150, v148));
              if (!v150)
                (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
            }
            v151 = __p[1];
            if (__p[1])
            {
              v152 = (unsigned int *)((char *)__p[1] + 8);
              do
              {
                v153 = __ldxr(v152);
                v154 = v153 - 1;
              }
              while (__stlxr(v154, v152));
              if (!v154)
                (*(void (**)(void *))(*(_QWORD *)v151 + 8))(v151);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v273.__r_.__value_.__r.__words[1] + 1);
            sub_20BFD265C(&v273.__r_.__value_.__r.__words[1]);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v273);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270, (uint64_t)&v273);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v273);
            v155 = v271;
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)v271 + 104, (uint64_t)__p);
            sub_20BFD3EBC((int *)v155 + 46, &v267);
            sub_20BFD3F10((int *)v155 + 47, v268);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
            sub_20BFD265C(&v267);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
            v274 = (void **)v265;
            sub_20BDE9EB0(&v274);
            v156 = v264;
            if (v264)
            {
              v157 = (unsigned int *)(v264 + 8);
              do
              {
                v158 = __ldxr(v157);
                v159 = v158 - 1;
              }
              while (__stlxr(v159, v157));
              if (!v159)
                (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
            }
            v160 = __p[1];
            if (__p[1])
            {
              v161 = (unsigned int *)((char *)__p[1] + 8);
              do
              {
                v162 = __ldxr(v161);
                v163 = v162 - 1;
              }
              while (__stlxr(v163, v161));
              if (!v163)
                (*(void (**)(void *))(*(_QWORD *)v160 + 8))(v160);
            }
            v164 = (uint64_t)v10;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v273.__r_.__value_.__r.__words[1] + 1);
            sub_20BFD265C(&v273.__r_.__value_.__r.__words[1]);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v273);
            v165 = v271;
            sub_20C01A074((int *)v271 + 48, v9);
            sub_20C01A0C8((int *)v165 + 49, (_DWORD *)(v5 + 48 * v6 + 28));
            std::string::operator=((std::string *)((char *)v271 + 200), v68);
            v10 = (uint64_t *)v164;
            std::string::operator=((std::string *)((char *)v271 + 224), (const std::string *)(v5 + 48 * v6));
            v166 = v271;
            *((_DWORD *)v271 + 66) = 5;
            sub_20BF2D298((uint64_t)v166 + 248, v164);
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!Instance)
              Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            v168 = v256;
            v169 = atomic_load(Instance + 18);
            if (v168 < v169
              && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v256, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
            {
              __p[0] = 0;
              __p[1] = 0;
              v263 = 0;
              v170 = sub_20BEC5244(&v256, 0);
              v171 = sub_20BEDAF68();
              if (v170 != (_QWORD *)v171)
              {
                v172 = (char *)__p[1];
                do
                {
                  v173 = (__int128 *)(v170 + 7);
                  if ((unint64_t)v172 >= v263)
                  {
                    v172 = (char *)sub_20BE4EE50((uint64_t *)__p, v173);
                  }
                  else
                  {
                    if (*((char *)v170 + 79) < 0)
                    {
                      sub_20BDDBFAC(v172, (void *)v170[7], v170[8]);
                    }
                    else
                    {
                      v174 = *v173;
                      *((_QWORD *)v172 + 2) = v170[9];
                      *(_OWORD *)v172 = v174;
                    }
                    v172 += 24;
                  }
                  __p[1] = v172;
                  v170 = (_QWORD *)v170[1];
                }
                while (v170 != (_QWORD *)v171);
              }
              v175 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
              if (!v175)
                v175 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
              v176 = sub_20BEC5244(&v256, 0);
              LOBYTE(v274) = 0;
              v177 = (_QWORD *)sub_20BEB5B80(v175 + 19, &v274);
              if (v177 != v176)
                pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v175, v176, v177);
              sub_20BEE380C("; ", (std::string *)__p[0], (std::string *)__p[1], &v273);
              v178 = (void **)((char *)v271 + 272);
              if (*((char *)v271 + 295) < 0)
                operator delete(*v178);
              *(std::string *)v178 = v273;
              v273.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              sub_20BDE5038((void ***)&v273);
            }
            __p[0] = v271;
            __p[1] = v272[0];
            if (v272[0])
            {
              v179 = v272[0] + 1;
              do
                v180 = __ldxr(v179);
              while (__stxr(v180 + 1, v179));
            }
            sub_20C264D7C((__int128 *)__p, *v255, (char **)(*v255 + 40));
            v181 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v182 = (unint64_t *)((char *)__p[1] + 8);
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 - 1, v182));
              if (!v183)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
            v184 = (std::__shared_weak_count *)v272[0];
            if (v272[0])
            {
              v185 = v272[0] + 1;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            v100 = 4;
          }
          pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v256);
          sub_20BDE9D48((uint64_t)&v257, v258[0]);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if (!v100)
            goto LABEL_213;
        }
        else if (!v100)
        {
LABEL_213:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v274);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v274 + 1);
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v9))
            goto LABEL_220;
          sub_20C1034E8((uint64_t *)__p, (uint64_t *)&v261);
          v187 = (uint64_t)v10;
          sub_20C266830((uint64_t *)__p, &v273);
          sub_20BFD3EBC((int *)&v274, (int *)&v273);
          sub_20BFD3F10((int *)&v274 + 1, (int *)v273.__r_.__value_.__r.__words + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v273.__r_.__value_.__r.__words + 1);
          sub_20BFD265C(&v273);
          v188 = __p[1];
          if (__p[1])
          {
            v189 = (unsigned int *)((char *)__p[1] + 8);
            do
            {
              v190 = __ldxr(v189);
              v191 = v190 - 1;
            }
            while (__stlxr(v191, v189));
            if (!v191)
              (*(void (**)(void *))(*(_QWORD *)v188 + 8))(v188);
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v274))
          {
LABEL_220:
            v192 = 1;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::New(&v273);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v270);
            __str.__r_.__value_.__r.__words[0] = v193;
            __str.__r_.__value_.__l.__size_ = v194;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__str, (uint64_t)&v271);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v271);
            v195 = v273.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v273.__r_.__value_.__r.__words[0] + 16, (uint64_t)__p);
            sub_20BFD3EBC((int *)(v195 + 96), &v267);
            sub_20BFD3F10((int *)(v195 + 100), v268);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
            sub_20BFD265C(&v267);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
            v257 = (uint64_t *)v265;
            sub_20BDE9EB0((void ***)&v257);
            v196 = v264;
            if (v264)
            {
              v197 = (unsigned int *)(v264 + 8);
              do
              {
                v198 = __ldxr(v197);
                v199 = v198 - 1;
              }
              while (__stlxr(v199, v197));
              if (!v199)
                (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
            }
            v200 = __p[1];
            if (__p[1])
            {
              v201 = (unsigned int *)((char *)__p[1] + 8);
              do
              {
                v202 = __ldxr(v201);
                v203 = v202 - 1;
              }
              while (__stlxr(v203, v201));
              if (!v203)
                (*(void (**)(void *))(*(_QWORD *)v200 + 8))(v200);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v272 + 1);
            sub_20BFD265C(v272);
            sub_20C2012CC(&v271);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270, (uint64_t)&v271);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v271);
            v204 = v273.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v273.__r_.__value_.__r.__words[0] + 104, (uint64_t)__p);
            sub_20BFD3EBC((int *)(v204 + 184), &v267);
            sub_20BFD3F10((int *)(v204 + 188), v268);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v268);
            sub_20BFD265C(&v267);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v266);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
            sub_20BDE9EB0((void ***)&__str);
            v205 = v264;
            if (v264)
            {
              v206 = (unsigned int *)(v264 + 8);
              do
              {
                v207 = __ldxr(v206);
                v208 = v207 - 1;
              }
              while (__stlxr(v208, v206));
              if (!v208)
                (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
            }
            v209 = __p[1];
            if (__p[1])
            {
              v210 = (unsigned int *)((char *)__p[1] + 8);
              do
              {
                v211 = __ldxr(v210);
                v212 = v211 - 1;
              }
              while (__stlxr(v212, v210));
              if (!v212)
                (*(void (**)(void *))(*(_QWORD *)v209 + 8))(v209);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v272 + 1);
            sub_20BFD265C(v272);
            sub_20C2012CC(&v271);
            sub_20C1034E8((uint64_t *)__p, (uint64_t *)&v261);
            v213 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(v273.__r_.__value_.__r.__words[0] + 216);
            *(_OWORD *)(v273.__r_.__value_.__r.__words[0] + 208) = *(_OWORD *)__p;
            __p[1] = 0;
            if (v213)
            {
              v214 = (unsigned int *)((char *)v213 + 8);
              do
              {
                v215 = __ldxr(v214);
                v216 = v215 - 1;
              }
              while (__stlxr(v216, v214));
              if (!v216)
                (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v213 + 8))(v213);
              v213 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p[1];
              __p[0] = 0;
              if (__p[1])
              {
                v217 = (unsigned int *)((char *)__p[1] + 8);
                do
                {
                  v218 = __ldxr(v217);
                  v219 = v218 - 1;
                }
                while (__stlxr(v219, v217));
                if (!v219)
                  v213 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v213 + 8))(v213);
              }
            }
            v220 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(v213);
            v221 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v221)
              v221 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v220, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v221 + 96), __p);
            v222 = v273.__r_.__value_.__r.__words[0];
            sub_20BFD3EBC((int *)(v273.__r_.__value_.__r.__words[0] + 224), (int *)__p);
            sub_20BFD3F10((int *)(v222 + 228), (int *)__p + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
            sub_20BFD265C(__p);
            sub_20BF2D298(v273.__r_.__value_.__r.__words[0] + 192, v187);
            v223 = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
            *(_DWORD *)(v273.__r_.__value_.__r.__words[0] + 232) = 5;
            *(_OWORD *)__p = v223;
            if (*((_QWORD *)&v223 + 1))
            {
              v224 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
              do
                v225 = __ldxr(v224);
              while (__stxr(v225 + 1, v224));
            }
            v226 = sub_20C264D7C((__int128 *)__p, *v255, (char **)(*v255 + 40));
            v227 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v228 = (unint64_t *)((char *)__p[1] + 8);
              do
                v229 = __ldaxr(v228);
              while (__stlxr(v229 - 1, v228));
              if (!v229)
              {
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
              }
            }
            v230 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v226);
            sub_20C01A074((int *)&v274, v230);
            sub_20C01A0C8((int *)&v274 + 1, v230 + 1);
            v231 = (std::__shared_weak_count *)v273.__r_.__value_.__l.__size_;
            if (v273.__r_.__value_.__l.__size_)
            {
              v232 = (unint64_t *)(v273.__r_.__value_.__l.__size_ + 8);
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                std::__shared_weak_count::__release_weak(v231);
              }
            }
            v192 = 0;
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v274))
            v234 = &v274;
          else
            v234 = (void ***)(v5 + 48 * v6 + 24);
          sub_20C2668F8((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270, v234, *(_QWORD *)(a3 + 24), (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v269, (pxrInternal__aapl__pxrReserved__ **)&v273);
          if (!v67)
          {
            pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity((pxrInternal__aapl__pxrReserved__ **)&v273, v235, v236, &v271);
            v237 = v271;
            v271 = 0;
            __p[0] = v273.__r_.__value_.__l.__data_;
            v273.__r_.__value_.__r.__words[0] = (std::string::size_type)v237;
            sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)__p, v238);
            sub_20C211C74(&v271, v239);
          }
          IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v234);
          v241 = v270;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(__p, &v260, v234);
          v242 = 256;
          if (IsRootPrimPath)
            v242 = 0;
          v251 = v192 | v251 & 0xFFFFFF0000000000 | v242;
          sub_20C2623F4(a3, 5u, v241.n128_i64[0], v241.n128_i64[1], &v270, __p, (uint64_t *)&v273, v6, v251);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
          sub_20BFD265C(&__p[1]);
          sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
          sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v273, v243);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v274 + 1);
          sub_20BFD265C(&v274);
        }
        sub_20C2012CC(&v260);
        sub_20C103234(&v261);
        goto LABEL_276;
      }
    }
    else
    {
      v67 = *(unsigned __int8 *)(v7 + 23);
      if (*(_BYTE *)(v7 + 23))
        goto LABEL_72;
    }
    v101 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270);
    v102 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v101);
    v103 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v102);
    v104 = *(void **)(v103 + 8);
    if (v104)
    {
      if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(v103 + 8)) + 14))
        v104 = *(void **)v103;
      else
        v104 = 0;
    }
    __p[0] = v104;
    sub_20BF1DD04((uint64_t *)__p);
    v105 = v261;
    v261 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p[0];
    __p[0] = 0;
    sub_20BF1D8F4((int)&v261, v105);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    v106 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v270);
    v107 = v260;
    v260 = *v106;
    sub_20BF1DD04((uint64_t *)v106);
    sub_20BF1D8F4((int)&v260, v107);
    goto LABEL_213;
  }
}

void sub_20C2684CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36,_QWORD *a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a45,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  *(_QWORD *)(v52 - 176) = &a47;
  sub_20BDE5038((void ***)(v52 - 176));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v52 - 200));
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a32);
  sub_20BDE9D48((uint64_t)&a34, a37);
  if (a44 < 0)
    operator delete(__p);
  sub_20C2012CC(&a45);
  sub_20C103234(&a46);
  _Unwind_Resume(a1);
}

void sub_20C2688FC(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  _DWORD *v10;
  void **v11;
  void **v12;
  pxrInternal__aapl__pxrReserved__ *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__ *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__ *v31;
  unint64_t *v32;
  pxrInternal__aapl__pxrReserved__ *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v45;
  uint64_t v46;
  uint64_t v47;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v48;
  uint64_t v49;
  pxrInternal__aapl__pxrReserved__ **v50;
  int v51;
  const char *Text;
  const char *v53;
  void **v54;
  void **v55;
  pxrInternal__aapl__pxrReserved__ *v56;
  uint64_t v57;
  uint64_t *v58;
  void **v59[2];
  pxrInternal__aapl__pxrReserved__ *v60;
  int v61;
  int v62;
  void *__p[2];
  char v64;
  uint64_t v65;
  _BYTE v66[24];
  _BYTE v67[24];
  int v68;
  int v69;
  pxrInternal__aapl__pxrReserved__ *v70;
  std::__shared_weak_count *v71;
  void **v72;

  v4 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v57 = a3;
    v58 = (uint64_t *)(a4 + 32);
    do
    {
      v10 = (_DWORD *)(v4 + 8 * v9);
      if (sub_20C1FE3D8(2))
      {
        v49 = *(_QWORD *)(a4 + 40);
        v50 = (pxrInternal__aapl__pxrReserved__ **)v58;
        if (v49)
          v50 = (pxrInternal__aapl__pxrReserved__ **)(v49 + 48);
        v56 = *v50;
        pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, v57, (uint64_t)__p);
        v51 = v64;
        v55 = (void **)__p[0];
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 8 * v9));
        v54 = __p;
        if (v51 < 0)
          v54 = v55;
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v56, a1, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found %s to <%s>", v53, v54, Text);
        if (v64 < 0)
          operator delete(__p[0]);
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v4 + 8 * v9))
        && (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 8 * v9))
         || pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 8 * v9))))
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::New(&v70);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a1);
        v59[0] = v11;
        v59[1] = v12;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v59, (uint64_t)&v60);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v60);
        v13 = v70;
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)v70 + 16, (uint64_t)__p);
        sub_20BFD3EBC((int *)v13 + 24, &v68);
        sub_20BFD3F10((int *)v13 + 25, &v69);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
        sub_20BFD265C(&v68);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v67);
        v72 = (void **)v66;
        sub_20BDE9EB0(&v72);
        v14 = v65;
        if (v65)
        {
          v15 = (unsigned int *)(v65 + 8);
          do
          {
            v16 = __ldxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v18 = __p[1];
        if (__p[1])
        {
          v19 = (unsigned int *)((char *)__p[1] + 8);
          do
          {
            v20 = __ldxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
            (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
        sub_20BFD265C(&v61);
        sub_20C2012CC(&v60);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a1, (uint64_t)&v60);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v60);
        v22 = v70;
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)v70 + 104, (uint64_t)__p);
        sub_20BFD3EBC((int *)v22 + 46, &v68);
        sub_20BFD3F10((int *)v22 + 47, &v69);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
        sub_20BFD265C(&v68);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v67);
        v59[0] = (void **)v66;
        sub_20BDE9EB0(v59);
        v23 = v65;
        if (v65)
        {
          v24 = (unsigned int *)(v65 + 8);
          do
          {
            v25 = __ldxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        v27 = __p[1];
        if (__p[1])
        {
          v28 = (unsigned int *)((char *)__p[1] + 8);
          do
          {
            v29 = __ldxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
        sub_20BFD265C(&v61);
        sub_20C2012CC(&v60);
        v31 = v70;
        sub_20C01A074((int *)v70 + 48, (_DWORD *)(v4 + 8 * v9));
        sub_20C01A0C8((int *)v31 + 49, (_DWORD *)(v4 + 8 * v9 + 4));
        v33 = v70;
        v32 = (unint64_t *)v71;
        *((_DWORD *)v70 + 54) = a3;
        __p[0] = v33;
        __p[1] = v32;
        if (v32)
        {
          v34 = v32 + 1;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        sub_20C264D7C((__int128 *)__p, *v58, (char **)(*v58 + 40));
        v36 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v37 = (unint64_t *)((char *)__p[1] + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v39 = v71;
        if (v71)
        {
          p_shared_owners = (unint64_t *)&v71->__shared_owners_;
          do
            v41 = __ldaxr(p_shared_owners);
          while (__stlxr(v41 - 1, p_shared_owners));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      else
      {
        v42 = *(_QWORD *)(a4 + 24);
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, 0.0, 1.0);
        sub_20C2668F8(a1, v10, v42, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)__p, &v60);
        pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity(&v60, v43, v44, &v70);
        sub_20C211C74(&v60, v45);
        v46 = *(_QWORD *)a1;
        v47 = *((_QWORD *)a1 + 1);
        pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite((pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)__p);
        sub_20C268E38(a3, v46, v47, v46, v47, &v70, v9, (pxrInternal__aapl__pxrReserved__ *)__p, a4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
        sub_20BFD265C(&__p[1]);
        sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
        sub_20C211C74(&v70, v48);
      }
      ++v9;
      v4 = *a2;
    }
    while (v9 < (a2[1] - *a2) >> 3);
  }
}

void sub_20C268D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C268E38(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a6, uint64_t a7, pxrInternal__aapl__pxrReserved__ *a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const char *v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v16;
  const char *v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  int DepthBelowIntroduction;
  uint64_t v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__ **v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  int v29;
  __int128 *v30;
  const char *v31;
  const char *v32;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v33;
  const char *v34;
  _QWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void **v43;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v44;
  const char *v45;
  char *v46;
  void *p_p;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__ **v49;
  pxrInternal__aapl__pxrReserved__ *v50;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v51;
  __int128 *v52;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v53;
  const char *v54;
  BOOL v55;
  void **v56;
  uint64_t v57;
  pxrInternal__aapl__pxrReserved__ **v58;
  pxrInternal__aapl__pxrReserved__ *v59;
  const char *Text;
  const char *v61;
  uint64_t v62;
  pxrInternal__aapl__pxrReserved__ **v63;
  uint64_t v64;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v65;
  int v66;
  int v67;
  void *__p;
  int v69;
  int v70;
  char v71;
  void *v72[2];
  char v73;
  uint64_t v74;
  _QWORD v75[2];
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  const char *v85;
  char v86;

  *(_QWORD *)&v76 = a2;
  *((_QWORD *)&v76 + 1) = a3;
  v75[0] = a4;
  v75[1] = a5;
  if (sub_20C1FE3D8(2))
  {
    v40 = *(_QWORD *)(a9 + 40);
    if (v40)
      v41 = (uint64_t *)(v40 + 48);
    else
      v41 = (uint64_t *)(a9 + 32);
    v42 = *v41;
    v43 = v72;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, a1, (uint64_t)v72);
    if (v73 < 0)
      v43 = (void **)v72[0];
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v76, (uint64_t)&v65);
    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)&v65, v44);
    if (v71 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Preparing to add %s arc to %s", v45, v46, v43, p_p);
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v74, v42, &v76, &v83);
    if (SHIBYTE(v84) < 0)
      operator delete((void *)v83);
    if (v71 < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
    sub_20BFD265C(&v66);
    sub_20C2012CC(&v65);
    if (v73 < 0)
      operator delete(v72[0]);
  }
  else
  {
    v74 = 0;
  }
  if (sub_20C1FE3D8(2))
  {
    v48 = *(_QWORD *)(a9 + 40);
    if (v48)
      v49 = (pxrInternal__aapl__pxrReserved__ **)(v48 + 48);
    else
      v49 = (pxrInternal__aapl__pxrReserved__ **)(a9 + 32);
    v50 = *v49;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v75, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v83, (pxrInternal__aapl__pxrReserved__ *)&__p, v51);
    if (v84 >= 0)
      v52 = &v83;
    else
      v52 = (__int128 *)v83;
    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite((pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v65);
    v55 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(a8, &v65);
    if (v55)
    {
      v56 = (void **)"<none>";
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v72, a8, v53);
      if (v73 >= 0)
        v56 = v72;
      else
        v56 = (void **)v72[0];
    }
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v50, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v76, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"origin: %s\ninheritArcNum: %d\nignoreIfSameAsSite: %s\n", v54, v52, a7, v56);
    if (!v55 && v73 < 0)
      operator delete(v72[0]);
    sub_20C20ACC8((uint64_t)&v65);
    if (SHIBYTE(v84) < 0)
      operator delete((void *)v83);
    sub_20C20ACC8((uint64_t)&__p);
  }
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v76);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(Path) & 1) != 0)
  {
    sub_20BFD6E54(&v65, Path);
    sub_20BFD6EA4((_DWORD *)&v65 + 1, (_DWORD *)Path + 1);
    while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v65)
         && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v65) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v65, &v83);
      sub_20BFD3EBC((int *)&v65, (int *)&v83);
      sub_20BFD3F10((int *)&v65 + 1, (int *)&v83 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
      sub_20BFD265C(&v83);
    }
    LODWORD(__p) = (_DWORD)v65;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v65);
    HIDWORD(__p) = HIDWORD(v65);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)&v65 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
    sub_20BFD265C(&v65);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&__p))
    {
      *(_QWORD *)&v83 = "pcp/primIndex.cpp";
      *((_QWORD *)&v83 + 1) = "_DetermineInheritPath";
      v84 = 2891;
      v85 = "SdfPath pxrInternal__aapl__pxrReserved__::_DetermineInheritPath(const SdfPath &, const PcpMapExpression &)";
      v86 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v83, "!varPath.IsEmpty()", 0);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(Path, &v81);
    v19 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a6, v17, v18);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v81, &v83);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v79);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v64, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v83, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
    sub_20BFD265C(&v79);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
    sub_20BFD265C(&v83);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
    sub_20BFD265C(&v81);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
  }
  else
  {
    v16 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a6, v14, v15);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v16, Path, &v64);
  }
  v20 = *(_QWORD *)(a9 + 40);
  v83 = v76;
  v84 = v20;
  v21 = sub_20C264678((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v83);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v64))
  {
    if (sub_20C1FE3D8(2))
    {
      v57 = *(_QWORD *)(a9 + 40);
      if (v57)
        v58 = (pxrInternal__aapl__pxrReserved__ **)(v57 + 48);
      else
        v58 = (pxrInternal__aapl__pxrReserved__ **)(a9 + 32);
      v59 = *v58;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v59, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v76, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Inheriting from path <%s>", v61, Text);
    }
    LayerStack = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v76);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&__p, LayerStack, &v64);
    DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v75, v23);
    v77 = sub_20C269618((uint64_t *)&v76, v21, (char *)&__p, a1, a6, DepthBelowIntroduction);
    v78 = v25;
    if (!v77 || v25 == -1)
    {
      v35 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v76);
      if (v64 == *v35 || pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&__p, a8))
      {
        v36 = 0;
        v37 = 0;
      }
      else
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64))
          v37 = 0;
        else
          v37 = 256;
        v36 = 1;
      }
      v77 = sub_20C2623F4(a9, a1, v76, *((uint64_t *)&v76 + 1), v75, &__p, (uint64_t *)a6, a7, v37 | (v36 << 16) | v36);
      v78 = v38;
    }
    else if (sub_20C1FE3D8(2))
    {
      v26 = *(_QWORD *)(a9 + 40);
      v27 = (pxrInternal__aapl__pxrReserved__ **)(v26 ? v26 + 48 : a9 + 32);
      v28 = *v27;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, a1, (uint64_t)&v83);
      v29 = SHIBYTE(v84);
      v30 = (__int128 *)v83;
      v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      v33 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v29 >= 0 ? &v83 : v30);
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v28, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v76, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v77, v33, v32, "A %s arc to <%s> already exists. Skipping.", v31);
      if (SHIBYTE(v84) < 0)
        operator delete((void *)v83);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v70);
    sub_20BFD265C(&v69);
    sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
  }
  else
  {
    if (sub_20C1FE3D8(2))
    {
      v62 = *(_QWORD *)(a9 + 40);
      if (v62)
        v63 = (pxrInternal__aapl__pxrReserved__ **)(v62 + 48);
      else
        v63 = (pxrInternal__aapl__pxrReserved__ **)(a9 + 32);
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v63, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v76, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"No appropriate site for inheriting opinions", v34);
    }
    v77 = 0;
    v78 = -1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (v74)
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v74);
  return v77;
}

void sub_20C26947C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  sub_20C20ACC8((uint64_t)&a19);
  sub_20BFD1A18(&a13);
  sub_20C26266C((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20C269618(uint64_t *a1, uint64_t a2, char *a3, int a4, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a5, int a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v15;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v16;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v18;
  char *v19;
  void *v20;
  const char *v21;
  char *v22;
  void *v23;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  BOOL v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *OriginNode;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v10 = a2;
  v11 = a1[1];
  v35 = *a1;
  v36 = v11;
  v12 = **(_QWORD **)(v35 + 16);
  v13 = *(unsigned __int16 *)(v12 + 48 * v11 + 28);
  v29 = v35;
  v30 = v13;
  v31 = v12;
  v32 = v35;
  v14 = 0xFFFFLL;
  v33 = 0xFFFFLL;
  v34 = v12;
  while (v13 != v14 || v29 != v32)
  {
    v15 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(&v29, a2, a3);
    v16 = v15;
    if (v10 == 3)
    {
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v15) == a4)
      {
        MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v16);
        v20 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v18, v19);
        v23 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a5, v21, v22);
        if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==((uint64_t)v20, (uint64_t)v23))
        {
          OriginNode = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(v16);
          v28 = v24;
          if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&OriginNode, v24) == a6)return *(_QWORD *)v16;
        }
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(v15, (uint64_t)&OriginNode);
      v25 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&OriginNode, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
      sub_20BFD265C(&v28);
      sub_20C2012CC(&OriginNode);
      if (v25)
        return *(_QWORD *)v16;
    }
    sub_20C2049E8(&v29);
    v13 = v30;
    v14 = v33;
  }
  return 0;
}

void sub_20C269788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C20ACC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C26979C(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  uint64_t ParentNode;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD v10[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  int v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  int v15;
  int v16;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) != 6)
    return 0;
  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
  v4 = v3;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a1);
  if (v4 != v6 || ParentNode != v5)
    return 0;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a1, (uint64_t)&v14);
  v10[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a1);
  v10[1] = v7;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v10, (uint64_t)&v11);
  v8 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v14, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  sub_20C2012CC(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  sub_20C2012CC(&v14);
  return v8;
}

void sub_20C269880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20C20ACC8((uint64_t)va);
  sub_20C20ACC8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20C2698A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::PcpMapExpression *a5, uint64_t a6, uint64_t a7)
{
  pxrInternal__aapl__pxrReserved__ **MapToParent;
  const char *v11;
  char *v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v14;
  uint64_t ParentNode;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v19;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v20;
  int ArcType;
  int v22;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  int DepthBelowIntroduction;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v25;
  const char *v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__ **v28;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression *v29;
  _DWORD *v30;
  pxrInternal__aapl__pxrReserved__ *v31;
  char *v32;
  char *v33;
  const char *v34;
  char *v35;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v36;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v37;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v38;
  const char *v39;
  char *v40;
  char *v41;
  char *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v45;
  uint64_t OriginNode;
  uint64_t v47;
  char *v48;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v49;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v50;
  const char *v51;
  char *v52;
  void *v53;
  const char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  const char *v59;
  BOOL v60;
  unsigned int v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t SiblingNumAtOrigin;
  uint64_t v66;
  const pxrInternal__aapl__pxrReserved__::PcpMapExpression *v67;
  char *v68;
  char *v69;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v70;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v71;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v72;
  uint64_t v73;
  pxrInternal__aapl__pxrReserved__ **v74;
  pxrInternal__aapl__pxrReserved__ *v75;
  unsigned int v76;
  std::string *v77;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v78;
  __int128 *v79;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v80;
  const char *v81;
  void **v82;
  uint64_t v83;
  pxrInternal__aapl__pxrReserved__ **v84;
  pxrInternal__aapl__pxrReserved__ *v85;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v86;
  const char *v87;
  std::string *v88;
  uint64_t v89;
  pxrInternal__aapl__pxrReserved__ **v90;
  pxrInternal__aapl__pxrReserved__ *v91;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v92;
  const char *v93;
  std::string *v94;
  uint64_t v95;
  pxrInternal__aapl__pxrReserved__ **v96;
  uint64_t v97;
  std::string v98;
  __int128 __p;
  std::string::size_type v100;
  __int128 v101;
  pxrInternal__aapl__pxrReserved__ *v102[2];
  void *v103[2];
  char v104;
  pxrInternal__aapl__pxrReserved__ *v105[2];
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v106;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  *(_QWORD *)&v109 = a1;
  *((_QWORD *)&v109 + 1) = a2;
  *(_QWORD *)&v108 = a3;
  *((_QWORD *)&v108 + 1) = a4;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109) == 3)
  {
    MapToParent = (pxrInternal__aapl__pxrReserved__ **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity(MapToParent, v11, v12, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)&v98);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)&v98, a5, v13, &v110);
    sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v98, v14);
    ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109);
    sub_20C2698A4(ParentNode, v16, v108, *((_QWORD *)&v108 + 1), &v110, a6, a7);
    v98.__r_.__value_.__r.__words[0] = 5;
    *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = v109;
    v100 = 0;
    __p = 0uLL;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v101);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v101 + 1);
    sub_20C261350(a7, (uint64_t)&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
    sub_20BFD265C(&v101);
    if (SHIBYTE(v100) < 0)
      operator delete((void *)__p);
    sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v110, v17);
  }
  else
  {
    v97 = a7;
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v108;
    v98.__r_.__value_.__r.__words[2] = **(_QWORD **)(v108 + 16);
    v98.__r_.__value_.__l.__size_ = *(unsigned __int16 *)(v98.__r_.__value_.__r.__words[2]
                                                        + 48 * *((_QWORD *)&v108 + 1)
                                                        + 28);
    v110 = v108;
    v18 = **(_QWORD **)(v108 + 16);
    *((_QWORD *)&v110 + 1) = 0xFFFFLL;
    v111 = v18;
    sub_20C26A114((uint64_t)&v106, (uint64_t *)&v98, (uint64_t *)&v110);
    v20 = v106;
    v19 = v107;
    if (v106 != v107)
    {
      do
      {
        ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v20);
        if (ArcType == 1 || ArcType == 6)
        {
          if (sub_20C1FE3D8(2))
          {
            v73 = *(_QWORD *)(v97 + 40);
            v74 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
            if (v73)
              v74 = (pxrInternal__aapl__pxrReserved__ **)(v73 + 48);
            v75 = *v74;
            v76 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v20);
            pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, v76, (uint64_t)&v98);
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = &v98;
            else
              v77 = (std::string *)v98.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(v20, (uint64_t)v105);
            pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v110, (pxrInternal__aapl__pxrReserved__ *)v105, v78);
            if (v111 >= 0)
              v79 = &v110;
            else
              v79 = (__int128 *)v110;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (uint64_t)v102);
            pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v103, (pxrInternal__aapl__pxrReserved__ *)v102, v80);
            v82 = v103;
            if (v104 < 0)
              v82 = (void **)v103[0];
            pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v75, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Attempting to propagate %s of %s to %s.", v81, v77, v79, v82);
            if (v104 < 0)
              operator delete(v103[0]);
            sub_20C20ACC8((uint64_t)v102);
            if (SHIBYTE(v111) < 0)
              operator delete((void *)v110);
            sub_20C20ACC8((uint64_t)v105);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v98.__r_.__value_.__l.__data_);
          }
          if ((_DWORD)a6
            && ((v22 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v108),
                 v22 == 6)
             || v22 == 1)
            && (DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v108, v23), DepthBelowIntroduction == pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(v20, v25)))
          {
            if (sub_20C1FE3D8(2))
            {
              v27 = *(_QWORD *)(v97 + 40);
              v28 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
              if (v27)
                v28 = (pxrInternal__aapl__pxrReserved__ **)(v27 + 48);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v28, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Skipping ancestral class", v26);
            }
          }
          else
          {
            v29 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v20);
            v30 = *(_DWORD **)a5;
            if (*(_QWORD *)a5
              && !*v30
              && pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(v30 + 6)))
            {
              v31 = *(pxrInternal__aapl__pxrReserved__ **)v29;
              v105[0] = v31;
              if (v31)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref((uint64_t)v31);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::Inverse(a5, v103);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(v29, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v103, v32, &v110);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(a5, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)&v110, v33, &v98);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity((pxrInternal__aapl__pxrReserved__ **)&v98, v34, v35, v105);
              sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v98, v36);
              sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v110, v37);
              sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)v103, v38);
            }
            if (sub_20C1FE3D8(2))
            {
              v83 = *(_QWORD *)(v97 + 40);
              v84 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
              if (v83)
                v84 = (pxrInternal__aapl__pxrReserved__ **)(v83 + 48);
              v85 = *v84;
              v86 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)a5, v39, v40);
              pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v86, &v98);
              v88 = &v98;
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v88 = (std::string *)v98.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v85, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Transfer function:\n%s", v87, v88);
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v98.__r_.__value_.__l.__data_);
            }
            if (sub_20C1FE3D8(2))
            {
              v89 = *(_QWORD *)(v97 + 40);
              v90 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
              if (v89)
                v90 = (pxrInternal__aapl__pxrReserved__ **)(v89 + 48);
              v91 = *v90;
              v92 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v105, v41, v42);
              pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v92, &v98);
              v94 = &v98;
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v94 = (std::string *)v98.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v91, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Implied class:\n%s", v93, v94);
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v98.__r_.__value_.__l.__data_);
            }
            *(_QWORD *)&v110 = 0;
            *((_QWORD *)&v110 + 1) = -1;
            v101 = v109;
            v43 = **(_QWORD **)(v109 + 16);
            v44 = *(unsigned __int16 *)(v43 + 48 * *((_QWORD *)&v109 + 1) + 28);
            v98.__r_.__value_.__r.__words[0] = v109;
            v98.__r_.__value_.__l.__size_ = v44;
            v98.__r_.__value_.__r.__words[2] = v43;
            *(_QWORD *)&__p = v109;
            *((_QWORD *)&__p + 1) = 0xFFFFLL;
            v100 = v43;
            while (*(_OWORD *)&v98.__r_.__value_.__l.__data_ != __p)
            {
              v45 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v98, (uint64_t)v41, v42);
              OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(v45);
              if (v47 == *((_QWORD *)v20 + 1) && *(_QWORD *)v20 == OriginNode)
              {
                v49 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v98, v47, v48);
                v50 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v49);
                v53 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v50, v51, v52);
                v56 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v105, v54, v55);
                if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==((uint64_t)v53, (uint64_t)v56))
                {
                  v110 = *(_OWORD *)sub_20C20495C(&v98, v57, v58);
                  if (sub_20C1FE3D8(2))
                  {
                    v95 = *(_QWORD *)(v97 + 40);
                    v96 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
                    if (v95)
                      v96 = (pxrInternal__aapl__pxrReserved__ **)(v95 + 48);
                    pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v96, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v110, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found previously added implied inherit node", v59);
                  }
                  break;
                }
              }
              sub_20C2049E8(&v98);
            }
            if ((_QWORD)v110)
              v60 = *((_QWORD *)&v110 + 1) == -1;
            else
              v60 = 1;
            if (!v60)
              goto LABEL_79;
            v61 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v20);
            v62 = v109;
            v64 = *(_QWORD *)v20;
            v63 = *((_QWORD *)v20 + 1);
            SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(v20);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(v20, (uint64_t)&v98);
            *(_QWORD *)&v110 = sub_20C268E38(v61, v62, *((uint64_t *)&v62 + 1), v64, v63, v105, SiblingNumAtOrigin, (pxrInternal__aapl__pxrReserved__ *)&v98, v97);
            *((_QWORD *)&v110 + 1) = v66;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98.__r_.__value_.__r.__words[1] + 1);
            sub_20BFD265C(&v98.__r_.__value_.__r.__words[1]);
            sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v98);
            if ((_QWORD)v110)
            {
              if (*((_QWORD *)&v110 + 1) != -1)
              {
LABEL_79:
                if (sub_20C264CE8((uint64_t *)v20, (uint64_t)v41, v42))
                {
                  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Inverse((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v105, v103);
                  v67 = (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v20);
                  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(a5, v67, v68, v102);
                  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v103, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v102, v69, &v98);
                  sub_20C211C74(v102, v70);
                  sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)v103, v71);
                  sub_20C2698A4(v110, *((_QWORD *)&v110 + 1), *(_QWORD *)v20, *((_QWORD *)v20 + 1), &v98, 0, v97);
                  sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)&v98, v72);
                }
              }
            }
            sub_20C211C74(v105, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v41);
          }
        }
        v20 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)((char *)v20 + 16);
      }
      while (v20 != v19);
      v20 = v106;
    }
    if (v20)
    {
      v107 = v20;
      operator delete(v20);
    }
  }
}

void sub_20C269F9C(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,pxrInternal__aapl__pxrReserved__ *a36)
{
  uint64_t v36;
  void *v38;

  if (a22 < 0)
    operator delete(__p);
  sub_20C211C74(&a36, a2);
  v38 = *(void **)(v36 - 168);
  if (v38)
  {
    *(_QWORD *)(v36 - 160) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C26A114(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *a2;
  v6 = a2[1];
  v7 = *a3;
  v8 = a3[1];
  if (v6 != v8 || v5 != v7)
  {
    v4 = 0;
    do
    {
      ++v4;
      v6 = *(unsigned __int16 *)(a2[2] + 48 * v6 + 34);
    }
    while (v8 != v6 || v5 != v7);
  }
  v14 = *(_OWORD *)a2;
  v15 = a2[2];
  v12 = *(_OWORD *)a3;
  v13 = a3[2];
  sub_20C26A1B0((char *)a1, (uint64_t *)&v14, (uint64_t *)&v12, v4);
  return a1;
}

char *sub_20C26A1B0(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = *a2;
    v8 = a2[1];
    v9 = *a3;
    v10 = a3[1];
    v11 = (_QWORD *)*((_QWORD *)v6 + 1);
    if (v8 != v10 || v7 != v9)
    {
      v13 = a2[2];
      do
      {
        *v11 = v7;
        v11[1] = v8;
        v11 += 2;
        v8 = *(unsigned __int16 *)(v13 + 48 * v8 + 34);
      }
      while (v10 != v8 || v7 != v9);
    }
    *((_QWORD *)v6 + 1) = v11;
  }
  return result;
}

void sub_20C26A224(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C26A240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ParentNode;
  uint64_t v5;
  uint64_t v6;
  uint64_t OriginNode;
  uint64_t v8;
  BOOL v10;
  int IsInert;
  __int16 SpecContributionRestrictedDepth;
  char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__ **v31;
  pxrInternal__aapl__pxrReserved__ *v32;
  uint64_t v33;
  uint64_t v34;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v35;
  const char *v36;
  __int128 *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  *(_QWORD *)&v41 = a1;
  *((_QWORD *)&v41 + 1) = a2;
  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
  v6 = v5;
  v40[0] = ParentNode;
  v40[1] = v5;
  OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
  if (v6 == v8 && ParentNode == OriginNode)
    goto LABEL_7;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v40) != 3)
    goto LABEL_7;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v40, (uint64_t)&v44);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41, (uint64_t)&v42);
  v10 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v44, &v42);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 3);
  sub_20BFD265C((_DWORD *)&v42 + 2);
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v42);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 3);
  sub_20BFD265C((_DWORD *)&v44 + 2);
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v44);
  if (!v10)
  {
LABEL_7:
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41) == 6)
    {
      if (sub_20C1FE3D8(2))
      {
        v30 = *(_QWORD *)(a3 + 40);
        if (v30)
          v31 = (pxrInternal__aapl__pxrReserved__ **)(v30 + 48);
        else
          v31 = (pxrInternal__aapl__pxrReserved__ **)(a3 + 32);
        v32 = *v31;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v41);
        *(_QWORD *)&v42 = v33;
        *((_QWORD *)&v42 + 1) = v34;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41, (uint64_t)&v38);
        pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v44, (pxrInternal__aapl__pxrReserved__ *)&v38, v35);
        if (v45 >= 0)
          v37 = &v44;
        else
          v37 = (__int128 *)v44;
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v32, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v41, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v42, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Propagating specializes arc %s to root", v36, v37);
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        sub_20C20ACC8((uint64_t)&v38);
      }
      IsInert = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
      SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
      if (IsInert)
      {
        v14 = SpecContributionRestrictedDepth;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41, 0, v13);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v41);
        v16 = v15;
        v18 = v17;
        v19 = v41;
        MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
        sub_20C26AA48(v16, v18, v19, *((uint64_t *)&v19 + 1), MapToRoot, &v41, a3);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(&v41, v14);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v41);
        v22 = v21;
        v24 = v23;
        v25 = v41;
        v26 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
        sub_20C26AA48(v22, v24, v25, *((uint64_t *)&v25 + 1), v26, &v41, a3);
      }
    }
    v44 = v41;
    v45 = **(_QWORD **)(v41 + 16);
    *((_QWORD *)&v44 + 1) = *(unsigned __int16 *)(v45 + 48 * *((_QWORD *)&v41 + 1) + 28);
    v42 = v41;
    v27 = **(_QWORD **)(v41 + 16);
    *((_QWORD *)&v42 + 1) = 0xFFFFLL;
    v43 = v27;
    sub_20C26A114((uint64_t)&v38, (uint64_t *)&v44, (uint64_t *)&v42);
    v28 = v38;
    v29 = v39;
    if (v38 != v39)
    {
      do
      {
        sub_20C26A240(*v28, v28[1], a3);
        v28 += 2;
      }
      while (v28 != v29);
      v28 = v38;
    }
    if (v28)
    {
      v39 = v28;
      operator delete(v28);
    }
  }
}

void sub_20C26A4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 - 57) < 0)
    operator delete(*(void **)(v17 - 80));
  sub_20C20ACC8((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_20C26A55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t MapToParent;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  __int128 v23;
  uint64_t v24;

  sub_20C26A688(a1, a2, a3, a4, 0, 1, a5, a6, (uint64_t)&v20, a7);
  v11 = v20;
  v12 = v21;
  if (v20)
    v13 = v21 == -1;
  else
    v13 = 1;
  if (!v13)
  {
    *(_QWORD *)&v23 = a3;
    v24 = **(_QWORD **)(a3 + 16);
    *((_QWORD *)&v23 + 1) = *(unsigned __int16 *)(v24 + 48 * a4 + 28);
    v22[0] = a3;
    v22[1] = 0xFFFFLL;
    v22[2] = v24;
    sub_20C26A114((uint64_t)&v18, (uint64_t *)&v23, v22);
    v14 = v18;
    v15 = v19;
    if (v18 != v19)
    {
      do
      {
        v23 = *v14;
        v16 = v23;
        MapToParent = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23);
        sub_20C26A55C(v11, v12, v16, *((_QWORD *)&v16 + 1), MapToParent, a6, a7);
        ++v14;
      }
      while (v14 != v15);
      v14 = v18;
    }
    if (v14)
    {
      v19 = v14;
      operator delete(v14);
    }
  }
}

void sub_20C26A66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20C26A688@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t ParentNode;
  uint64_t v18;
  uint64_t ArcType;
  int v21;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  int DepthBelowIntroduction;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t i;
  uint64_t v29;
  char *v30;
  unsigned int v32;
  _BOOL4 v33;
  int IsInert;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t SiblingNumAtOrigin;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t SpecContributionRestrictedDepth;
  int v45;
  char *v46;
  int HasSymmetry;
  char *v48;
  int Permission;
  char *v50;
  int IsRestricted;
  char *v52;
  char *v53;
  pxrInternal__aapl__pxrReserved__ *Path;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v55;
  unsigned int NonVariantPathElementCount;
  uint64_t *v57;
  double result;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v59;
  int v60;
  int v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;

  v64 = a1;
  v65 = a2;
  *(_QWORD *)&v63 = a3;
  *((_QWORD *)&v63 + 1) = a4;
  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  if (v18 == a2 && a1 == ParentNode)
  {
    v27 = 0;
    v62 = v63;
    goto LABEL_41;
  }
  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v64);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63, (uint64_t)&v66);
  v21 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63, v22);
  v24 = sub_20C269618(&v64, ArcType, (char *)&v66, v21, a7, DepthBelowIntroduction);
  v26 = v25;
  *(_QWORD *)&v62 = v24;
  *((_QWORD *)&v62 + 1) = v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 3);
  sub_20BFD265C((_DWORD *)&v66 + 2);
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v66);
  if (v24 && v26 != -1)
  {
    v27 = 0;
    goto LABEL_37;
  }
  if (sub_20C26A9E0((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63))
  {
    for (i = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
          ;
          i = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v66))
    {
      *(_QWORD *)&v66 = i;
      *((_QWORD *)&v66 + 1) = v29;
      if (!i || v29 == -1)
        break;
      if (v29 == a8[1] && *a8 == i)
      {
        v27 = 0;
        if (v24)
          goto LABEL_36;
        goto LABEL_40;
      }
    }
  }
  if (v63 == *(_OWORD *)a8)
  {
    Path = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v64);
    NonVariantPathElementCount = pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount(Path, v55);
  }
  else
  {
    NonVariantPathElementCount = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  }
  v32 = NonVariantPathElementCount;
  if (v63 == *(_OWORD *)a8)
  {
    v57 = (uint64_t *)&v63;
  }
  else
  {
    v33 = sub_20C26A9E0((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
    v57 = &v64;
    if (v33)
      v57 = (uint64_t *)&v63;
  }
  v66 = *(_OWORD *)v57;
  IsInert = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  v35 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  v36 = v64;
  v37 = v65;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63, (uint64_t)&v59);
  SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  v39 = 0x100000000;
  if (!a6)
    v39 = 0;
  v40 = 0x1000000;
  if (!a5)
    v40 = 0;
  v41 = sub_20C2626A4(a10, v35, v36, v37, &v66, &v59, (uint64_t *)a7, SiblingNumAtOrigin, v32, v39 | v40 | IsInert ^ 1u);
  v26 = v42;
  *(_QWORD *)&v62 = v41;
  *((_QWORD *)&v62 + 1) = v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
  sub_20BFD265C(&v60);
  sub_20C2012CC(&v59);
  if (v41)
    v43 = v26 == -1;
  else
    v43 = 1;
  v27 = !v43;
  if (!v41)
  {
LABEL_40:
    sub_20C2645E4(v63, *((uint64_t *)&v63 + 1), v30);
    goto LABEL_41;
  }
LABEL_36:
  if (v26 == -1)
    goto LABEL_40;
LABEL_37:
  SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62);
  v45 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62, v45, v46);
  HasSymmetry = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62, HasSymmetry, v48);
  Permission = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetPermission((unint64_t *)&v62, Permission, v50);
  IsRestricted = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetRestricted((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62, IsRestricted, v52);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63, 1, v53);
  if (SpecContributionRestrictedDepth)
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(&v63, SpecContributionRestrictedDepth);
LABEL_41:
  result = *(double *)&v62;
  *(_OWORD *)a9 = v62;
  *(_BYTE *)(a9 + 16) = v27;
  return result;
}

void sub_20C26A9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C20ACC8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C26A9E0(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  int ArcType;
  uint64_t ParentNode;
  uint64_t v4;
  uint64_t v5;
  uint64_t OriginNode;
  uint64_t v7;

  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1);
  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
  v5 = v4;
  OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a1);
  if (ArcType != 6 && ArcType != 1)
    return 0;
  return v5 != v7 || ParentNode != OriginNode;
}

void sub_20C26AA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t MapToParent;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  __int128 v23;
  uint64_t v24;

  sub_20C26A688(a1, a2, a3, a4, 1, 0, a5, a6, (uint64_t)&v20, a7);
  v11 = v20;
  v12 = v21;
  if (v20)
    v13 = v21 == -1;
  else
    v13 = 1;
  if (!v13)
  {
    *(_QWORD *)&v23 = a3;
    v24 = **(_QWORD **)(a3 + 16);
    *((_QWORD *)&v23 + 1) = *(unsigned __int16 *)(v24 + 48 * a4 + 28);
    v22[0] = a3;
    v22[1] = 0xFFFFLL;
    v22[2] = v24;
    sub_20C26A114((uint64_t)&v18, (uint64_t *)&v23, v22);
    v14 = v18;
    v15 = v19;
    if (v18 != v19)
    {
      do
      {
        v23 = *v14;
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23) != 6)
        {
          v16 = v23;
          MapToParent = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23);
          sub_20C26AA48(v11, v12, v16, *((_QWORD *)&v16 + 1), MapToParent, a6, a7);
        }
        ++v14;
      }
      while (v14 != v15);
      v14 = v18;
    }
    if (v14)
    {
      v19 = v14;
      operator delete(v14);
    }
  }
}

void sub_20C26AB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C26AB84(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, int a4)
{
  uint64_t *LayerStack;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__ **v15;
  int v16;
  uint64_t v17;
  uint64_t *Path;
  const char *v19;
  const char *v20;
  const char *Text;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  int v27;
  void **v30;
  __int128 v31;
  __int128 __p;
  uint64_t v33;
  int v34;
  int v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = 0;
  v39 = 0;
  v40 = 0;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSets(LayerStack, a2, &v38);
  if (v38 != v39)
  {
    v7 = a4 ? 8 : 13;
    v27 = v7;
    if ((int)(-1431655765 * ((v39 - v38) >> 3)) >= 1)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0xFFFFFFF800000008 * ((v39 - v38) >> 3);
      do
      {
        v11 = v38;
        v12 = (uint64_t *)(v38 + v9);
        if (sub_20C1FE3D8(2))
        {
          v14 = *(_QWORD *)(a3 + 40);
          v15 = (pxrInternal__aapl__pxrReserved__ **)(a3 + 32);
          if (v14)
            v15 = (pxrInternal__aapl__pxrReserved__ **)(v14 + 48);
          v16 = *(char *)(v11 + v9 + 23);
          v17 = v11 + v9;
          if (v16 < 0)
            v17 = *v12;
          v26 = *v15;
          Path = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
          v20 = "";
          v24 = *(_QWORD *)a2;
          v25 = *Path;
          if (*Path != *(_QWORD *)a2)
          {
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" at <%s>", v22, v23, Text);
            v20 = (const char *)&v36;
            if (v37 < 0)
              v20 = (const char *)v36;
          }
          pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v26, a1, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found variant set %s%s", v19, v17, v20);
          if (v25 != v24 && v37 < 0)
            operator delete(v36);
        }
        v30 = (void **)__PAIR64__(v8, v27);
        v31 = *(_OWORD *)a1;
        v13 = v12[2];
        __p = *(_OWORD *)v12;
        v33 = v13;
        v12[1] = 0;
        v12[2] = 0;
        *v12 = 0;
        sub_20BFD6E54(&v34, a2);
        sub_20BFD6EA4(&v35, (_DWORD *)a2 + 1);
        sub_20C261350(a3, (uint64_t)&v30);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
        sub_20BFD265C(&v34);
        if (SHIBYTE(v33) < 0)
          operator delete((void *)__p);
        v9 += 24;
        ++v8;
      }
      while (v10 != v9);
    }
  }
  v30 = (void **)&v38;
  sub_20BDE5038(&v30);
}

void sub_20C26ADCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a12 != a11 && a31 < 0)
    operator delete(__p);
  a19 = v31 - 112;
  sub_20BDE5038((void ***)&a19);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C26AE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v4;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6;
  int v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v6, a1, a2);
  pxrInternal__aapl__pxrReserved__::Pcp_FormatSite(a3, (pxrInternal__aapl__pxrReserved__ *)&v6, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  return sub_20C2012CC(&v6);
}

void sub_20C26AE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C20ACC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C26AEA0@<X0>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;

  result = (_QWORD *)sub_20BDEEBA4(a3, a1);
  if ((_QWORD *)(a3 + 8) == result || (v8 = (__int128 *)result[7], v9 = (__int128 *)result[8], v8 == v9))
  {
LABEL_5:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    while (1)
    {
      result = (_QWORD *)sub_20BDEEBA4(a2, (const void **)v8);
      if ((_QWORD *)(a2 + 8) != result)
        break;
      v8 = (__int128 *)((char *)v8 + 24);
      if (v8 == v9)
        goto LABEL_5;
    }
    if (*((char *)v8 + 23) < 0)
    {
      return sub_20BDDBFAC((_BYTE *)a4, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v10 = *v8;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)a4 = v10;
    }
  }
  return result;
}

uint64_t sub_20C26AF5C(uint64_t a1, int a2, _OWORD *a3, _DWORD *a4, uint64_t a5, int a6)
{
  void *__p[2];
  uint64_t v13;

  if (*(char *)(a5 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v13 = *(_QWORD *)(a5 + 16);
  }
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a6;
  *(_OWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 40) = v13;
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  sub_20BFD6E54((_DWORD *)(a1 + 48), a4);
  sub_20BFD6EA4((_DWORD *)(a1 + 52), a4 + 1);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  return a1;
}

_DWORD *sub_20C26B018(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  unsigned int NonVariantPathElementCount;
  unint64_t v15;
  int ArcType;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t LayerStack;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v24;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v25;
  pxrInternal__aapl__pxrReserved__ *v27;
  uint64_t v28;
  __int128 v29;

  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(a3, a4, a6, &v29);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v28, Path, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
  sub_20BFD265C(&v29);
  NonVariantPathElementCount = pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount(a3, v13);
  v29 = *(_OWORD *)this;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29))
  {
LABEL_11:
    v15 = 257;
  }
  else
  {
    v15 = 65793;
    while (1)
    {
      ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29);
      v18 = ArcType == 6 || ArcType == 1;
      if (v18
        && !pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29, v17)&& !pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29))
      {
        break;
      }
      *(_QWORD *)&v29 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29);
      *((_QWORD *)&v29 + 1) = v19;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29))
        goto LABEL_11;
    }
  }
  v20 = *(_QWORD *)this;
  v21 = *((_QWORD *)this + 1);
  LayerStack = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v29, LayerStack, &v28);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v27);
  v23 = sub_20C2626A4(a1, 2u, v20, v21, this, &v29, (uint64_t *)&v27, a5, NonVariantPathElementCount, v15);
  v25 = v24;
  sub_20C211C74(&v27, v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 3);
  sub_20BFD265C((_DWORD *)&v29 + 2);
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v29);
  if (v23 && v25 != (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)-1)
    sub_20C26C530(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  return sub_20BFD265C(&v28);
}

void sub_20C26B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C26B228(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t LayerStack;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v14;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v15;
  pxrInternal__aapl__pxrReserved__ *v17;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v18;
  int v19;
  int v20;
  int v21;
  int v22;

  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v18);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v19, a3, a5, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  sub_20C2012CC(&v18);
  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 1);
  LayerStack = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v18, LayerStack, &v21);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v17);
  v13 = sub_20C2623F4(a1, 2u, v10, v11, this, &v18, (uint64_t *)&v17, a4, 1);
  v15 = v14;
  sub_20C211C74(&v17, v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  sub_20C2012CC(&v18);
  if (v13 && v15 != (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)-1)
    sub_20C26C530(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  return sub_20BFD265C(&v21);
}

void sub_20C26B35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C26B3B0(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  _OWORD *v5;
  _QWORD *v6;
  __int128 v8;
  int v9;
  int v10;
  _QWORD v11[2];
  __int128 *v12;

  v5 = (_OWORD *)(a1 + 152);
  if (!*(_BYTE *)(a1 + 192))
  {
    *v5 = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_DWORD *)(a1 + 184) = 1065353216;
    *(_BYTE *)(a1 + 192) = 1;
  }
  v8 = *a2;
  sub_20BFD6E54(&v9, a3);
  sub_20BFD6EA4(&v10, a3 + 1);
  v11[1] = a3;
  v12 = &v8;
  v11[0] = a2;
  v6 = sub_20C26B6AC((uint64_t)v5, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v8, (uint64_t)&unk_20CAC184C, (uint64_t *)&v12, (uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  return v6 + 5;
}

void sub_20C26B47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C26B504((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_20C26B490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;

  result = sub_20C26BAF8((void **)a1);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  for (i = 0xFFFFLL; v6 != 0xFFFF; i = 0xFFFFLL)
  {
    i = *(unsigned __int16 *)(v7 + 48 * v6 + 34);
    if (i != 0xFFFF)
      break;
    v6 = *(unsigned __int16 *)(v7 + 48 * v6 + 24);
  }
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = i;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

uint64_t sub_20C26B504(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_20C26B538(uint64_t a1)
{
  void *v2;

  sub_20C26B570(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C26B570(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C26B5AC((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C26B5AC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 40);
  sub_20C26B5F4(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  return sub_20BFD265C((_DWORD *)(a1 + 16));
}

void sub_20C26B5F4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        sub_20C26B678((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C26B678(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 16));
  sub_20BFD265C((_DWORD *)(a2 + 12));
  return sub_20BFD8AF4(a2);
}

_QWORD *sub_20C26B6AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t UniqueIdentifier;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[3];

  UniqueIdentifier = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(this);
  v11 = *((unsigned int *)this + 4);
  v12 = v11 + UniqueIdentifier + (v11 + UniqueIdentifier) * (v11 + UniqueIdentifier);
  v13 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)this + 5)+ ((*((unsigned int *)this + 5)+ v11+ (v12 >> 1)+ (*((unsigned int *)this + 5) + v11 + (v12 >> 1)) * (*((unsigned int *)this + 5) + v11 + (v12 >> 1))) >> 1)));
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v5 = v13;
      if (v13 >= v14)
        v5 = v13 % v14;
    }
    else
    {
      v5 = v13 & (v14 - 1);
    }
    v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v16)
    {
      v17 = (_QWORD *)*v16;
      if (*v16)
      {
        do
        {
          v18 = v17[1];
          if (v18 == v13)
          {
            if (v17[3] == *((_QWORD *)this + 1) && v17[2] == *(_QWORD *)this && v17[4] == *((_QWORD *)this + 2))
              return v17;
          }
          else
          {
            if (v15.u32[0] > 1uLL)
            {
              if (v18 >= v14)
                v18 %= v14;
            }
            else
            {
              v18 &= v14 - 1;
            }
            if (v18 != v5)
              break;
          }
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
    }
  }
  sub_20C26B974(a1, v13, a4, a5, (uint64_t)v28);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v14 || (float)(v20 * (float)v14) < v19)
  {
    v21 = 1;
    if (v14 >= 3)
      v21 = (v14 & (v14 - 1)) != 0;
    v22 = v21 | (2 * v14);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v5 = v13 % v14;
      else
        v5 = v13;
    }
    else
    {
      v5 = (v14 - 1) & v13;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v26 >= v14)
          v26 %= v14;
      }
      else
      {
        v26 &= v14 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v17 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C26C1D0((uint64_t)v28, 0);
  return v17;
}

void sub_20C26B95C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C26C1D0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C26B974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0x50uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C26B9F0((uint64_t)(v10 + 2), *a3, *(_OWORD **)a4, *(_DWORD **)(a4 + 8));
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C26B9D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C26C1D0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C26B9F0(uint64_t a1, uint64_t a2, _OWORD *a3, _DWORD *a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_20BFD38A4((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  sub_20C26BA80(a1 + 24, a3, a4);
  return a1;
}

void sub_20C26BA60(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C26BA80(uint64_t a1, _OWORD *a2, _DWORD *a3)
{
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_20C26BAF8((void **)a1);
  sub_20C26BBD8(*(_QWORD *)(a1 + 16) + 24 * *(_QWORD *)(a1 + 8), a3);
  return a1;
}

void sub_20C26BAE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C26B5F4((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20C26BAF8(void **result)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  _QWORD v7[4];
  char v8;

  v1 = *result;
  v2 = (_QWORD *)*((_QWORD *)*result + 2);
  v3 = result + 2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)result[3] - (_BYTE *)result[2]) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 4) < v4)
  {
    v6 = result;
    v7[0] = "pcp/traversalCache.h";
    v7[1] = "_ResizeForGraph";
    v7[2] = 182;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_TraversalCache<pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexer:"
            ":_VariantSelectionInfo>::_ResizeForGraph() [Data = pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexer::_Varia"
            "ntSelectionInfo]";
    v8 = 0;
    result = (void **)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "graph->_GetNumNodes() >= _cache.size()", 0);
    v2 = (_QWORD *)v1[2];
    v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v6[3] - (_BYTE *)v6[2]) >> 3);
  }
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 4);
  if (v5 > v4)
    return sub_20C26BC3C(v3, v5);
  return result;
}

uint64_t sub_20C26BBD8(uint64_t a1, _DWORD *a2)
{
  int *v3;
  _DWORD *v4;

  v3 = (int *)(a1 + 4);
  v4 = a2 + 1;
  if (*(_BYTE *)(a1 + 8))
  {
    sub_20C01A074((int *)a1, a2);
    sub_20C01A0C8(v3, v4);
  }
  else
  {
    sub_20BFD6E54((_DWORD *)a1, a2);
    sub_20BFD6EA4(v3, v4);
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

void **sub_20C26BC3C(void **result, unint64_t a2)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t i;

  v2 = result;
  v3 = (uint64_t)result[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)*result) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return sub_20C26BCCC((uint64_t)result, v6);
  if (!v5)
  {
    for (i = (uint64_t)*result + 24 * a2; v3 != i; result = (void **)sub_20C26B678((uint64_t)(v2 + 2), v3))
      v3 -= 24;
    v2[1] = (void *)i;
  }
  return result;
}

void **sub_20C26BCCC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
    return (void **)sub_20C26BDEC((_DWORD *)a1, a2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(_QWORD *)a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v9;
  v18 = v4;
  if (v11)
    v12 = (char *)sub_20BDE4FF4(v4, v11);
  else
    v12 = 0;
  v14 = v12;
  v15 = &v12[24 * v8];
  v16 = v15;
  v17 = &v12[24 * v11];
  sub_20C26BE68(&v14, a2);
  sub_20C26BEF4((uint64_t *)a1, &v14);
  return sub_20C26C15C(&v14);
}

void sub_20C26BDD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C26C15C((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C26BDEC(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v2 = result;
  v3 = *((_QWORD *)result + 1);
  if (a2)
  {
    v4 = (_DWORD *)(v3 + 24 * a2);
    v5 = (_DWORD *)(v3 + 16);
    do
    {
      *((_QWORD *)v5 - 2) = 0;
      *((_QWORD *)v5 - 1) = 0;
      *(_QWORD *)v5 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v5 - 1);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v5);
      v5[1] = 2;
      v6 = v5 + 2;
      v5 += 6;
    }
    while (v6 != v4);
  }
  else
  {
    v4 = (_DWORD *)*((_QWORD *)result + 1);
  }
  *((_QWORD *)v2 + 1) = v4;
  return result;
}

_DWORD *sub_20C26BE68(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (a2)
  {
    v4 = (_DWORD *)(v3 + 24 * a2);
    v5 = (_DWORD *)(v3 + 12);
    do
    {
      *(_QWORD *)(v5 - 1) = 0;
      *(_QWORD *)(v5 - 3) = 0;
      *(_QWORD *)(v5 + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v5);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v5 + 1);
      v5[2] = 2;
      v6 = v5 + 3;
      v5 += 6;
    }
    while (v6 != v4);
  }
  else
  {
    v4 = (_DWORD *)*((_QWORD *)result + 2);
  }
  *((_QWORD *)v2 + 2) = v4;
  return result;
}

uint64_t sub_20C26BEF4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C26BF68((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C26BF68(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _DWORD *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 6;
      sub_20C26C01C(a1, (_DWORD *)(v7 - 24), v9);
      v7 = *((_QWORD *)&v16 + 1) - 24;
      *((_QWORD *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C26C0D8((uint64_t)v13);
  return v11;
}

_DWORD *sub_20C26C01C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  sub_20C26C068((uint64_t)a2, (uint64_t)a3);
  sub_20BFD38A4(a2 + 3, a3 + 3);
  result = sub_20BFD38DC(a2 + 4, a3 + 4);
  a2[5] = a3[5];
  return result;
}

uint64_t sub_20C26C068(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  sub_20C26C098((_DWORD *)a1, a2);
  return a1;
}

_DWORD *sub_20C26C098(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;

  if (*(_BYTE *)(a2 + 8))
  {
    v3 = result;
    v4 = sub_20BFD38A4(result, (_DWORD *)a2);
    result = sub_20BFD38DC(v4 + 1, (_DWORD *)(a2 + 4));
    *((_BYTE *)v3 + 8) = 1;
  }
  return result;
}

uint64_t sub_20C26C0D8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C26C10C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C26C10C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C26B678(v3, v1);
      v1 += 24;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C26C15C(void **a1)
{
  sub_20C26C18C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20C26C18C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 24;
      result = sub_20C26B678(v4, v1 - 24);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_20C26C1D0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C26B5AC((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C26C214(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, int a3)
{
  int v7;
  int v8;
  _QWORD v9[4];
  char v10;

  if (*((_QWORD *)a2 + 1) >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3))
  {
    v9[0] = "pcp/traversalCache.h";
    v9[1] = "_GetEntry";
    v9[2] = 212;
    v9[3] = "_Entry &pxrInternal__aapl__pxrReserved__::Pcp_TraversalCache<pxrInternal__aapl__pxrReserved__::Pcp_PrimIndex"
            "er::_VariantSelectionInfo>::_GetEntry(const PcpNodeRef &, BOOL) [Data = pxrInternal__aapl__pxrReserved__::Pc"
            "p_PrimIndexer::_VariantSelectionInfo]";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "node._GetNodeIndex() < _cache.size()", 0);
    if (!a3)
      return *(_QWORD *)(a1 + 16) + 24 * *((_QWORD *)a2 + 1);
    goto LABEL_3;
  }
  if (a3)
  {
LABEL_3:
    sub_20C26C2EC(a1, a2, &v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_20BFD265C(&v7);
  }
  return *(_QWORD *)(a1 + 16) + 24 * *((_QWORD *)a2 + 1);
}

_DWORD *sub_20C26C2EC@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v10;
  char *v11;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v12;
  uint64_t v14;
  _QWORD v15[2];

  v4 = *(_QWORD *)(a1 + 16) + 24 * *((_QWORD *)a2 + 1);
  if (!*(_BYTE *)(v4 + 8))
  {
    v15[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
    v15[1] = v7;
    v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)(a1 + 16) + 24 * v7);
    if (!*((_BYTE *)v8 + 8))
    {
      sub_20C26C2EC(&v14, a1, v15);
      sub_20C26C434((uint64_t)v8, (int *)&v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
      sub_20BFD265C(&v14);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v8))
    {
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a2);
      v12 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v10, v11);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v12, v8, &v14);
    }
    else
    {
      v14 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v14 + 1);
    }
    sub_20C26C434(v4, (int *)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
    sub_20BFD265C(&v14);
  }
  sub_20BFD6E54(a3, (_DWORD *)v4);
  return sub_20BFD6EA4(a3 + 1, (_DWORD *)(v4 + 4));
}

void sub_20C26C414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C26C434(uint64_t a1, int *a2)
{
  int *v3;
  int *v4;

  v3 = (int *)(a1 + 4);
  v4 = a2 + 1;
  if (*(_BYTE *)(a1 + 8))
  {
    sub_20BFD3EBC((int *)a1, a2);
    sub_20BFD3F10(v3, v4);
  }
  else
  {
    sub_20BFD38A4((_DWORD *)a1, a2);
    sub_20BFD38DC(v3, v4);
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

_DWORD *sub_20C26C498@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  _DWORD *result;

  v4 = (_DWORD *)sub_20C26C214(*a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a1 + 1), 1);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 1);
  sub_20BFD6E54((_DWORD *)(a2 + 16), v4);
  result = sub_20BFD6EA4((_DWORD *)(a2 + 20), v4 + 1);
  *(_QWORD *)(a2 + 24) = v4 + 3;
  return result;
}

uint64_t sub_20C26C4FC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C26C530(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v4;

  v1 = *(_DWORD **)(a1 + 48);
  v2 = *(_DWORD **)(a1 + 56);
  if (v1 != v2)
  {
    v4 = (uint64_t)(v1 + 14);
    while ((*v1 - 9) >= 2)
    {
      if ((*v1 - 14) <= 1)
      {
        *v1 = 13;
LABEL_7:
        sub_20C261ED4(*(_QWORD *)(a1 + 48), v4, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(0x6DB6DB6DB6DB6DB7* ((v4 - *(_QWORD *)(a1 + 48)) >> 3)));
      }
      v1 += 14;
      v4 += 56;
      if (v1 == v2)
        return;
    }
    *v1 = 8;
    goto LABEL_7;
  }
}

uint64_t sub_20C26C5DC(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1) & 1) != 0)
    return 1;
  v5 = *((_QWORD *)a1 + 1);
  v16 = *(_QWORD *)a1;
  v17 = v5;
  v6 = **(_QWORD **)(v16 + 16);
  v7 = *(unsigned __int16 *)(v6 + 48 * v5 + 28);
  v10 = v16;
  v11 = v7;
  v12 = v6;
  v13 = v16;
  v8 = 0xFFFFLL;
  v14 = 0xFFFFLL;
  v15 = v6;
  while (v7 != v8 || v10 != v13)
  {
    v9 = sub_20C20495C(&v10, v2, v3);
    if ((sub_20C26C5DC(v9) & 1) != 0)
      return 1;
    sub_20C2049E8(&v10);
    v7 = v11;
    v8 = v14;
  }
  return 0;
}

uint64_t sub_20C26C67C(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  uint64_t *LayerStack;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(a1, (int *)&v11);
  LOBYTE(LayerStack) = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if ((LayerStack & 1) != 0)
    return 1;
  v6 = *((_QWORD *)a1 + 1);
  v17 = *(_QWORD *)a1;
  v18 = v6;
  v7 = **(_QWORD **)(v17 + 16);
  v8 = *(unsigned __int16 *)(v7 + 48 * v6 + 28);
  v11 = v17;
  v12 = v8;
  v13 = v7;
  v14 = v17;
  v9 = 0xFFFFLL;
  v15 = 0xFFFFLL;
  v16 = v7;
  while (v8 != v9 || v11 != v14)
  {
    v10 = sub_20C20495C(&v11, v3, v4);
    if ((sub_20C26C67C(v10) & 1) != 0)
      return 1;
    sub_20C2049E8(&v11);
    v8 = v12;
    v9 = v15;
  }
  return 0;
}

void sub_20C26C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v9 + 4));
  sub_20BFD265C(&a9);
  _Unwind_Resume(a1);
}

void sub_20C26C77C(uint64_t *a1, unint64_t a2, char *a3)
{
  void **v3;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = (void **)a2;
  v5 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *(_QWORD *)a2) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_20BDDF694();
    v11 = v6 - *(_QWORD *)a2;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      a2 = 0xFFFFFFFFFFFFFFFLL;
    else
      a2 = v10;
    if (a2)
      v12 = (char *)sub_20BDEA2F0(v5, a2);
    else
      v12 = 0;
    v13 = &v12[16 * v9];
    v14 = &v12[16 * a2];
    *(_OWORD *)v13 = *(_OWORD *)a1;
    v8 = v13 + 16;
    v16 = (char *)*v3;
    v15 = (char *)v3[1];
    if (v15 != *v3)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = (char *)*v3;
    }
    *v3 = v13;
    v3[1] = v8;
    v3[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v7 = *(_OWORD *)a1;
    v8 = v7 + 1;
  }
  v3[1] = v8;
  v17 = a1[1];
  v28 = *a1;
  v29 = v17;
  v18 = **(_QWORD **)(v28 + 16);
  v19 = *(unsigned __int16 *)(v18 + 48 * v17 + 28);
  v22 = v28;
  v23 = v19;
  v24 = v18;
  v25 = v28;
  v20 = 0xFFFFLL;
  v26 = 0xFFFFLL;
  v27 = v18;
  while (v19 != v20 || v22 != v25)
  {
    v21 = sub_20C20495C(&v22, a2, a3);
    sub_20C26C77C(v21, v3);
    sub_20C2049E8(&v22);
    v19 = v23;
    v20 = v26;
  }
}

uint64_t sub_20C26C8DC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD v5[4];
  char v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == *(_QWORD *)(a1 + 24))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::PcpNode"
            "Ref>, true>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNodeRef>, Reverse = true]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return v3 - 16;
}

void sub_20C26C954()
{
  JUMPOUT(0x20C26C8FCLL);
}

uint64_t sub_20C26C95C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::PcpNodeRef>, true>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNodeRef>, Reverse = true]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2 - 16;
  }
  return a1;
}

uint64_t *sub_20C26C9DC(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t *result;
  uint64_t v7;
  int IsDueToAncestor;
  uint64_t v9;
  char *v10;
  int HasSpecs;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
  if ((result & 1) != 0)
    return result;
  if ((a3 & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    IsDueToAncestor = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
    v7 = IsDueToAncestor ^ 1u;
    if ((IsDueToAncestor & 1) != 0)
    {
      HasSpecs = 0;
      goto LABEL_7;
    }
  }
  HasSpecs = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
LABEL_7:
  v12 = a1[1];
  v23 = *a1;
  v24 = v12;
  v13 = **(_QWORD **)(v23 + 16);
  v14 = *(unsigned __int16 *)(v13 + 48 * v12 + 30);
  v17 = v23;
  v18 = v14;
  v19 = v13;
  v20 = v23;
  v15 = 0xFFFFLL;
  v21 = 0xFFFFLL;
  v22 = v13;
  while (v14 != v15 || v17 != v20)
  {
    v16 = sub_20C20ACFC(&v17, v9, v10);
    sub_20C26C9DC(v16, a2, v7);
    sub_20C20AD88(&v17);
    v14 = v18;
    v15 = v21;
  }
  return sub_20C26CAC4(a2, *a1, a1[1], HasSpecs);
}

uint64_t *sub_20C26CAC4(uint64_t *result, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  if (a4)
    return sub_20C26CAF8((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v4, *((_BYTE *)result + 8), (uint64_t *)result[2], (uint64_t *)result[3], (uint64_t *)result[4]);
  return result;
}

uint64_t *sub_20C26CAF8(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  uint64_t IncrementalRelocatesSourceToTarget;
  uint64_t Path;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  uint64_t *v29;
  uint64_t *v30;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v35;
  uint64_t IncrementalRelocatesTargetToSource;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v41;
  _QWORD *v42;
  int v43;
  _QWORD *v44;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t *v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *result;
  uint64_t *v80;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v81;
  uint64_t *Layers;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v83;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v84;
  char *v85;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v86;
  __int128 i;
  __int128 v89;
  unint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  _QWORD *v98[2];

  if ((a2 & 1) == 0)
  {
    v98[0] = 0;
    v98[1] = 0;
    v97 = (uint64_t *)v98;
    v95 = 0;
    v96 = 0;
    v93 = 0;
    v94 = (uint64_t *)&v95;
    v91 = (uint64_t *)&v92;
    v92 = 0;
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
    IncrementalRelocatesSourceToTarget = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesSourceToTarget(v9);
    Path = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
    v14 = *(_QWORD **)(IncrementalRelocatesSourceToTarget + 8);
    v12 = (_QWORD *)(IncrementalRelocatesSourceToTarget + 8);
    v13 = v14;
    v15 = a3;
    if (v14)
    {
      v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)Path;
      v17 = v12;
      do
      {
        v18 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), v16);
        v19 = v13 + 1;
        if (!v18)
        {
          v19 = v13;
          v17 = v13;
        }
        v13 = (_QWORD *)*v19;
      }
      while (*v19);
      if (v17 != v12)
      {
        do
        {
          v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28), v20))break;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28), &v89);
          v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          v22 = v89;
          v23 = *v21;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
          sub_20BFD265C(&v89);
          v24 = v22 == v23;
          a3 = v15;
          if (v24)
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 36), &v89);
            v25 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
            v26 = v89;
            v27 = *v25;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
            sub_20BFD265C(&v89);
            if (v26 == v27)
            {
              NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 36));
              a3 = v15;
              *(_QWORD *)&v89 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
              v29 = sub_20C26D274(&v91, (uint64_t *)v89, (uint64_t)&unk_20CAC184C, (uint64_t **)&v89);
              sub_20BF32220(v29 + 5, NameToken);
            }
            else
            {
              v30 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
              a3 = v15;
              sub_20C0D7FB4(&v94, v30, v30);
            }
            v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
            sub_20C231504(a5, v31, (uint64_t *)v31);
          }
          v32 = (_QWORD *)v17[1];
          if (v32)
          {
            do
            {
              v33 = v32;
              v32 = (_QWORD *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v17[2];
              v24 = *v33 == (_QWORD)v17;
              v17 = v33;
            }
            while (!v24);
          }
          v17 = v33;
        }
        while (v33 != v12);
      }
    }
    v34 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    v35 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v34);
    IncrementalRelocatesTargetToSource = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesTargetToSource(v35);
    v37 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
    v40 = *(_QWORD **)(IncrementalRelocatesTargetToSource + 8);
    v38 = (_QWORD *)(IncrementalRelocatesTargetToSource + 8);
    v39 = v40;
    if (v40)
    {
      v41 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v37;
      v42 = v38;
      do
      {
        v43 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v39 + 28), v41);
        v44 = v39 + 1;
        if (!v43)
        {
          v44 = v39;
          v42 = v39;
        }
        v39 = (_QWORD *)*v44;
      }
      while (*v44);
      if (v42 != v38)
      {
        do
        {
          v45 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28), v45))break;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28), &v89);
          v46 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          v47 = v89;
          v48 = *v46;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
          sub_20BFD265C(&v89);
          v24 = v47 == v48;
          a3 = v15;
          if (v24)
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 36), &v89);
            v49 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
            v50 = v89;
            v51 = *v49;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
            sub_20BFD265C(&v89);
            v24 = v50 == v51;
            a3 = v15;
            if (!v24)
            {
              v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28));
              if (a4[4] + 16 * a4[5] == sub_20C26D308(a4, v52, bswap64(0x9E3779B97F4A7C55 * (*(_QWORD *)v52 & 0xFFFFFFFFFFFFFFF8))))
              {
                v53 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28));
                sub_20C0D7FB4(&v97, v53, v53);
              }
            }
          }
          v54 = (_QWORD *)v42[1];
          if (v54)
          {
            do
            {
              v55 = v54;
              v54 = (_QWORD *)*v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              v55 = (_QWORD *)v42[2];
              v24 = *v55 == (_QWORD)v42;
              v42 = v55;
            }
            while (!v24);
          }
          v42 = v55;
        }
        while (v55 != v38);
      }
    }
    if (v93 | v96)
    {
      v89 = 0uLL;
      v90 = 0;
      sub_20BFC9A6C((char **)&v89, (a3[1] - *a3) >> 3);
      for (i = *(_OWORD *)a3; ; sub_20C023C08(&i))
      {
        if ((_QWORD)i == *((_QWORD *)&i + 1))
        {
          v77 = *(_OWORD *)a3;
          *(_OWORD *)a3 = v89;
          v89 = v77;
          v78 = a3[2];
          a3[2] = v90;
          v90 = v78;
          *(_QWORD *)&i = &v89;
          sub_20BEEB2B8((void ***)&i);
          goto LABEL_63;
        }
        v58 = (uint64_t *)sub_20C023B14((uint64_t *)&i, v56, v57);
        v61 = sub_20C0D8030((uint64_t)&v91, v58);
        if (&v92 == v61)
          break;
        v62 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v59, v60);
        sub_20C26D36C((uint64_t)a4, v62, bswap64(0x9E3779B97F4A7C55 * (*v62 & 0xFFFFFFFFFFFFFFF8)));
        v63 = v61 + 5;
        sub_20C231504(a4, v63, v63);
        if ((v64 & 1) == 0)
          continue;
        v65 = (_QWORD *)*((_QWORD *)&v89 + 1);
        if (*((_QWORD *)&v89 + 1) < v90)
        {
          v66 = *v63;
          **((_QWORD **)&v89 + 1) = *v63;
          if ((v66 & 7) != 0)
          {
            v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 2, v67));
            goto LABEL_56;
          }
          goto LABEL_58;
        }
        v73 = sub_20BFCA068((char **)&v89, v63);
LABEL_60:
        *((_QWORD *)&v89 + 1) = v73;
LABEL_61:
        ;
      }
      v69 = (uint64_t *)sub_20C023B14((uint64_t *)&i, v59, v60);
      if (&v95 != sub_20C0D8030((uint64_t)&v94, v69))
      {
        v72 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v70, v71);
        sub_20C26D36C((uint64_t)a4, v72, bswap64(0x9E3779B97F4A7C55 * (*v72 & 0xFFFFFFFFFFFFFFF8)));
        goto LABEL_61;
      }
      v74 = (uint64_t *)sub_20C023B14((uint64_t *)&i, v70, v71);
      v65 = (_QWORD *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1) >= v90)
      {
        v73 = sub_20BFCA068((char **)&v89, v74);
        goto LABEL_60;
      }
      v75 = *v74;
      **((_QWORD **)&v89 + 1) = *v74;
      if ((v75 & 7) != 0)
      {
        v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v76);
        while (__stxr(v68 + 2, v76));
LABEL_56:
        if ((v68 & 1) == 0)
          *v65 &= 0xFFFFFFFFFFFFFFF8;
      }
LABEL_58:
      v73 = (char *)(v65 + 1);
      goto LABEL_60;
    }
LABEL_63:
    sub_20C26D21C(a3, (_QWORD *)a3[1], v97, v98);
    sub_20C26D774((uint64_t)a4, v97, v98);
    sub_20C26D880((uint64_t)&v91, v92);
    sub_20BF2B200((uint64_t)&v94, v95);
    sub_20BF2B200((uint64_t)&v97, v98[0]);
  }
  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(this);
  if ((_DWORD)result)
  {
    v80 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    v81 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v80);
    Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v81);
    v83 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
    v84 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v84)
      v84 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v85 = (char *)v84 + 32;
    v86 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v86)
      v86 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, v83, v85, (void **)a3, (int *)a4, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v86 + 216));
  }
  return result;
}

void sub_20C26D158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,_QWORD *a22)
{
  uint64_t v22;

  a13 = (void **)&a15;
  sub_20BEEB2B8(&a13);
  sub_20C26D880((uint64_t)&a18, a19);
  sub_20BF2B200((uint64_t)&a21, a22);
  sub_20BF2B200(v22 - 104, *(_QWORD **)(v22 - 96));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C26D21C(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_20C26D4AC(a1, a2, a3, a4, v4);
}

uint64_t *sub_20C26D274(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C128FA8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_20C26D308(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = a1[4];
  v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 16 * v4 + 4) < 0)
  {
LABEL_5:
    v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while ((*(_QWORD *)(v3 + 16 * v4 + 8) & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v5 = (__int16)(v5 + 1);
      v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 16 * v4 + 4))
        goto LABEL_5;
    }
  }
  return v3 + 16 * v4;
}

uint64_t sub_20C26D36C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_20C26D308((_QWORD *)a1, a2, a3);
  if (*(_QWORD *)(a1 + 32) + 16 * *(_QWORD *)(a1 + 40) == v4)
    return 0;
  sub_20C26D3B8((uint64_t *)a1, v4);
  result = 1;
  *(_BYTE *)(a1 + 73) = 1;
  return result;
}

uint64_t *sub_20C26D3B8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  if (*(__int16 *)(a2 + 4) != -1)
  {
    v2 = *(_QWORD *)(a2 + 8);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    *(_WORD *)(a2 + 4) = -1;
  }
  --result[6];
  v5 = result[4];
  v6 = (a2 - v5) >> 4;
  v7 = *result;
  v8 = (v6 + 1) & *result;
  v9 = *(__int16 *)(v5 + 16 * v8 + 4);
  if (v9 >= 1)
  {
    do
    {
      v10 = (int *)(v5 + 16 * v8);
      v11 = v5 + 16 * v6;
      v12 = *v10;
      *(_QWORD *)(v11 + 8) = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *(_DWORD *)v11 = v12;
      *(_WORD *)(v11 + 4) = v9 - 1;
      v5 = result[4];
      v13 = v5 + 16 * v8;
      v15 = *(__int16 *)(v13 + 4);
      v14 = (_WORD *)(v13 + 4);
      if (v15 != -1)
      {
        v16 = *(_QWORD *)(v5 + 16 * v8 + 8);
        if ((v16 & 7) != 0)
        {
          v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
          v7 = *result;
          v5 = result[4];
        }
        *v14 = -1;
      }
      v6 = v8;
      v8 = v7 & (v8 + 1);
      v9 = *(__int16 *)(v5 + 16 * v8 + 4);
    }
    while (v9 > 0);
  }
  return result;
}

_QWORD *sub_20C26D4AC(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  char v26;

  v5 = a2;
  if (a5 >= 1)
  {
    v10 = (uint64_t)(a1 + 2);
    v9 = a1[2];
    v11 = a1[1];
    if (a5 <= (uint64_t)(v9 - v11) >> 3)
    {
      v21 = a3;
      sub_20BE754A0(&v21, a5);
      v19 = a1[1] - (_QWORD)v5;
      if (v19 >> 3 >= a5
        || (v21 = a3,
            sub_20BE754A0(&v21, v19 >> 3),
            a1[1] = (uint64_t)sub_20C1EFF80(v10, v21, a4, (_QWORD *)a1[1]),
            v19 >= 1))
      {
        sub_20C0D8194((uint64_t)a1, v5, v11, (uint64_t)&v5[a5]);
        sub_20C26D6EC((uint64_t)&v26, a3, v21, v5);
      }
    }
    else
    {
      v12 = *a1;
      v13 = a5 + ((uint64_t)(v11 - *a1) >> 3);
      if (v13 >> 61)
        sub_20BDDF694();
      v14 = ((uint64_t)a2 - v12) >> 3;
      v15 = v9 - v12;
      if (v15 >> 2 > v13)
        v13 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      v25 = a1 + 2;
      if (v16)
        v17 = sub_20BDDF6A8((uint64_t)(a1 + 2), v16);
      else
        v17 = 0;
      v21 = v17;
      v22 = &v17[v14];
      v23 = v22;
      v24 = &v17[v16];
      sub_20C26D664((uint64_t)&v21, a3, a5);
      v5 = (_QWORD *)sub_20C0D81DC(a1, &v21, v5);
      sub_20BF1EE98((uint64_t)&v21);
    }
  }
  return v5;
}

void sub_20C26D644(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C26D664(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = *(_QWORD **)(result + 16);
  if (a3)
  {
    v4 = &v3[a3];
    do
    {
      v5 = a2[4];
      *v3 = v5;
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 2, v6));
        if ((v7 & 1) == 0)
          *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      v8 = (_QWORD *)a2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)a2[2];
          v10 = *v9 == (_QWORD)a2;
          a2 = v9;
        }
        while (!v10);
      }
      ++v3;
      a2 = v9;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *(_QWORD *)(result + 16) = v3;
  return result;
}

_QWORD *sub_20C26D6EC(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_20BF32220(a4, v5 + 4);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      ++a4;
      v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

void sub_20C26D774(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = v6;
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v6 = v8 + 1;
      v7 = v10;
    }
    while (v10 != a3);
    v12 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 56) - v12 <= v8)
    {
      v13 = *(float *)(a1 + 68);
      v14 = vcvtps_u32_f32((float)(v12 + v6) / v13);
      v15 = vcvtps_u32_f32((float)v12 / v13);
      if (v15 <= v14)
        v16 = v14;
      else
        v16 = v15;
      sub_20C2317F0(a1, v16);
    }
    if (v4 != a3)
    {
      do
      {
        sub_20C231504((uint64_t *)a1, v4 + 4, v4 + 4);
        v17 = (_QWORD *)v4[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v4[2];
            v11 = *v18 == (_QWORD)v4;
            v4 = v18;
          }
          while (!v11);
        }
        v4 = v18;
      }
      while (v18 != a3);
    }
  }
}

void sub_20C26D880(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (a2)
  {
    sub_20C26D880(a1, *a2);
    sub_20C26D880(a1, a2[1]);
    v4 = a2[5];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    v7 = a2[4];
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    operator delete(a2);
  }
}

uint64_t sub_20C26D900(uint64_t a1)
{
  sub_20C220ECC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

BOOL sub_20C26D92C(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  _BOOL8 v4;
  _QWORD *v5;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (unsigned int *)(a1 + 16);
  do
  {
    v3 = *(unsigned int **)v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = sub_20C0E70D0(a2, v3 + 4);
    if (!v5)
      break;
  }
  while (*((_QWORD *)v3 + 2) == v5[2]);
  return v4;
}

uint64_t sub_20C26D9A4@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)result;
  v6 = **(_QWORD **)(*(_QWORD *)result + 16);
  v7 = *(unsigned __int16 *)(v6 + 48 * *(_QWORD *)(result + 8) + 28);
  *a3 = *(_QWORD *)result;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v5;
  v8 = 0xFFFFLL;
  a3[4] = 0xFFFFLL;
  a3[5] = v6;
  while (1)
  {
    if (v7 == v8)
    {
      v9 = *a3;
      if (*a3 == a3[3])
        break;
    }
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a3);
    if ((_DWORD)result == a2)
    {
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a3);
      if ((result & 1) == 0)
      {
        v9 = a3[3];
        v8 = a3[4];
        break;
      }
    }
    v7 = *(unsigned __int16 *)(a3[2] + 48 * a3[1] + 34);
    a3[1] = v7;
    v8 = a3[4];
  }
  *(_OWORD *)(a3 + 3) = *(_OWORD *)a3;
  a3[5] = a3[2];
  if (a3[4] != v8 || a3[3] != v9)
  {
    do
    {
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a3 + 3));
      if ((_DWORD)result != a2)
        break;
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a3 + 3));
      if ((result & 1) != 0)
        break;
      v11 = a3[3];
      v12 = *(unsigned __int16 *)(a3[5] + 48 * a3[4] + 34);
      a3[4] = v12;
    }
    while (v8 != v12 || v11 != v9);
  }
  return result;
}

BOOL sub_20C26DAB4(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v4;
  uint64_t Identifier;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t *);
  char v10;
  _BOOL8 v11;
  const char *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  _QWORD **v22;
  _QWORD *v23[2];
  void *v24[2];
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v26;

  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v4);
  v6 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(Identifier + 8);
  if (v6)
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(Identifier + 8)) + 14))
      v6 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)Identifier;
    else
      v6 = 0;
  }
  v26 = v6;
  sub_20BF1DD04((uint64_t *)&v26);
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v22 = v23;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v26);
  v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(v8, v24, &v22) & 1) != 0
    || (v17 = "pcp/primIndex.cpp",
        v18 = "_ComputedAssetPathWouldCreateDifferentNode",
        v19 = 4569,
        v20 = "BOOL pxrInternal__aapl__pxrReserved__::_ComputedAssetPathWouldCreateDifferentNode(const PcpNodeRef &, cons"
              "t std::string &)",
        v21 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "SdfLayer::SplitIdentifier( nodeRootLayer->GetIdentifier(), &oldAssetPath, &oldArgs)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find(a2, (uint64_t)&v22, (uint64_t *)&v17);
    v9 = sub_20BFD2F78(&v17);
    if (v10 & 1 | (unint64_t)v9)
      v11 = !sub_20C1020E4(&v17, &v26);
    else
      v11 = 1;
    v12 = v18;
    if (v18)
    {
      v13 = (unsigned int *)(v18 + 8);
      do
      {
        v14 = __ldxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(const char *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    v11 = 1;
  }
  sub_20BDE9D48((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  sub_20C103234(&v26);
  return v11;
}

void sub_20C26DC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  uint64_t v15;

  sub_20BDE9D48((uint64_t)&a14, a15);
  if (*(char *)(v15 - 25) < 0)
    operator delete(*(void **)(v15 - 48));
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v15 - 24));
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this)
{
  return *(_QWORD *)this == *((_QWORD *)this + 1);
}

pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this, const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a2)
{
  void ***v4;
  _QWORD **v5;
  char *v6;
  void ***v7;
  void **v8;

  v4 = (void ***)((char *)this + 24);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (this != a2)
    sub_20C270490((uint64_t)this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v5 = (_QWORD **)*((_QWORD *)a2 + 3);
  if (v5)
  {
    v6 = (char *)operator new(0x18uLL);
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    sub_20C20D4C4(v6, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
    v7 = v4;
    v8 = (void **)v6;
  }
  else
  {
    v7 = v4;
    v8 = 0;
  }
  sub_20BF1C150(v7, v8);
  return this;
}

void sub_20C26DD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void ***v10;
  void *v11;

  operator delete(v11);
  sub_20BF1C150(v10, 0);
  sub_20C21DAE8((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::Swap(uint64_t *this, pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

double pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetPropertyRange@<D0>(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL IsRootNode;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a2)
  {
    v5 = *((_QWORD *)this + 1);
    if (v5 == *(_QWORD *)this)
    {
      v6 = 0;
      v9 = *((_QWORD *)this + 1);
    }
    else
    {
      v6 = 0;
      v7 = 8;
      v5 = *(_QWORD *)this;
      do
      {
        IsRootNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v5 + v7));
        v5 = *(_QWORD *)this;
        v9 = *((_QWORD *)this + 1);
        if (IsRootNode)
          break;
        ++v6;
        v7 += 24;
      }
      while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v9 - v5) >> 3));
    }
    v12 = v6;
    if (v6 < 0xAAAAAAAAAAAAAAABLL * ((v9 - v5) >> 3))
    {
      v13 = 24 * v6 + 8;
      v12 = v6;
      do
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v5 + v13)))
          break;
        ++v12;
        v5 = *(_QWORD *)this;
        v13 += 24;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
    }
    if (v6 == v12)
      v14 = 0;
    else
      v14 = v6;
    if (v6 == v12)
      v15 = 0;
    else
      v15 = v12;
    pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(&v19, (uint64_t)this, v14);
    v11 = this;
    v10 = v15;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(&v19, (uint64_t)this, 0);
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
    v11 = this;
  }
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(&v18, (uint64_t)v11, v10);
  v17 = v18;
  result = *(double *)&v19;
  *a3 = v19;
  a3[1] = v17;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetNumLocalSpecs(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 8;
  do
  {
    v4 += pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v1 + v5));
    ++v3;
    v1 = *(_QWORD *)this;
    v5 += 24;
  }
  while (v3 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  return v4;
}

void pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::_AddPropertySpecIfPermitted(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, __int128 *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  int SpecType;
  uint64_t **v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  const std::string *Identifier;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  unsigned int *v42;
  unsigned int v43;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v44;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v45;
  unsigned int *v46;
  __int128 v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  char *v51;
  uint64_t *v52;

  if (*a4)
  {
    pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::New(&v48);
    v7 = v48;
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v48 + 16, a1 + 8);
    sub_20C01A074((int *)(v7 + 96), (_DWORD *)(a1 + 88));
    sub_20C01A0C8((int *)(v7 + 100), (_DWORD *)(a1 + 92));
    v8 = sub_20BFE6874(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8, &v46);
    v9 = v48;
    sub_20BFD3EBC((int *)(v48 + 104), (int *)&v46);
    sub_20BFD3F10((int *)(v9 + 108), (int *)&v46 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    v10 = sub_20BFE6874(a2);
    SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v10);
    *(_DWORD *)(v48 + 112) = SpecType;
    v12 = (uint64_t **)sub_20BFE6874(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v12, (uint64_t *)&v46);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v46);
    Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
    std::string::operator=((std::string *)(v48 + 120), Identifier);
    v15 = v47;
    if ((_QWORD)v47)
    {
      v16 = (unsigned int *)(v47 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    v46 = (unsigned int *)v48;
    *(_QWORD *)&v47 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    sub_20C26E438((char ***)a1, (__int128 *)&v46);
    v21 = (std::__shared_weak_count *)v47;
    if ((_QWORD)v47)
    {
      v22 = (unint64_t *)(v47 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v49;
    if (v49)
    {
      v25 = (unint64_t *)&v49->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v29 = *a2;
    v46 = (unsigned int *)v29;
    if (v29)
    {
      do
        v30 = __ldaxr((unsigned int *)v29);
      while (__stlxr(v30 + 1, (unsigned int *)v29));
    }
    v47 = *a3;
    v31 = a5[2];
    v32 = a5[1];
    if (v32 >= v31)
    {
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *a5) >> 3);
      v37 = v36 + 1;
      if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *a5) >> 3);
      if (2 * v38 > v37)
        v37 = 2 * v38;
      if (v38 >= 0x555555555555555)
        v39 = 0xAAAAAAAAAAAAAAALL;
      else
        v39 = v37;
      v52 = a5 + 2;
      if (v39)
        v40 = (char *)sub_20BDE4FF4((uint64_t)(a5 + 2), v39);
      else
        v40 = 0;
      v41 = (std::__shared_weak_count *)&v40[24 * v36];
      v48 = (uint64_t)v40;
      v49 = v41;
      v50 = v41;
      v51 = &v40[24 * v39];
      v42 = v46;
      v41->__vftable = (std::__shared_weak_count_vtbl *)v46;
      if (v42)
      {
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
        v41 = v50;
      }
      *(_OWORD *)&v40[24 * v36 + 8] = v47;
      v50 = v41 + 1;
      sub_20C2706EC(a5, &v48);
      v35 = a5[1];
      sub_20C27077C((uint64_t)&v48);
    }
    else
    {
      v33 = v46;
      *(_QWORD *)v32 = v46;
      if (v33)
      {
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 + 1, v33));
      }
      *(_OWORD *)(v32 + 8) = v47;
      v35 = v32 + 24;
    }
    a5[1] = v35;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v46);
    v44 = sub_20BFE6874(a2);
    v45 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v45)
      v45 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    a4[1] = sub_20C26E37C(v44, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v45 + 248), a4 + 1);
  }
}

void sub_20C26E2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v13;

  sub_20C27077C((uint64_t)&a12);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C26E37C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unsigned int *a3)
{
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  if (v7 && (sub_20C188D88((pxrInternal__aapl__pxrReserved__::VtValue *)v6) & 1) != 0)
  {
    if ((v7 & 4) != 0)
      a3 = (unsigned int *)(*(uint64_t (**)(_BYTE *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      a3 = (unsigned int *)v6;
  }
  v4 = *a3;
  sub_20BF4C2D8((uint64_t)v6);
  return v4;
}

void sub_20C26E41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C26E438(char ***a1, __int128 *a2)
{
  void **v4;
  void ***v5;
  void **v6;

  sub_20BDEA72C(a1[12], a2);
  v5 = (void ***)(*a1 + 3);
  v4 = *v5;
  if (!*v5)
  {
    v6 = (void **)operator new(0x18uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    sub_20BF1C150(v5, v6);
    v4 = (void **)(*a1)[3];
  }
  return sub_20BDEA72C((char **)v4, a2);
}

__n128 pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherPropertySpecs(__int128 **this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, char a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v13;
  uint64_t Layers;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Node;
  uint64_t v21;
  uint64_t *SiteRef;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  void *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  __n128 result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 11));
  v37 = 0uLL;
  v38 = 0;
  if ((a3 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)&v31);
    v8 = *((_QWORD *)&v31 + 1);
    v7 = v31;
    v9 = v32;
    if ((_QWORD)v31 != (_QWORD)v32 || *((_QWORD *)&v31 + 1) != *((_QWORD *)&v32 + 1))
    {
      do
      {
        *(_QWORD *)&v29 = v7;
        *((_QWORD *)&v29 + 1) = v8;
        if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29) & 1) != 0)
        {
          Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29);
          LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29);
          v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
          Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
          v15 = *(uint64_t **)Layers;
          v16 = *(uint64_t **)(Layers + 8);
          while (v15 != v16)
          {
            sub_20C26E774((uint64_t)this, v15, Path, NameToken, 1, (unint64_t **)&v39);
            if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v39) & 1) == 0)
              sub_20C26EC28((uint64_t *)&v37, (unsigned int **)&v39, &v29);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v39);
            ++v15;
          }
        }
        ++v8;
      }
      while (__PAIR128__(v8, v7) != v9);
    }
  }
  else
  {
    v40 = 0;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRange((uint64_t *)a2, 6u, &v29);
    sub_20C2707C8(&v31);
    v18 = 0;
    v35 = v29;
    v36 = v30;
    v31 = v30;
    v32 = v30;
    v33 = v29;
    v34 = v29;
    v19 = -1;
    while (1)
    {
      v29 = v32;
      v39 = v34;
      if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v29, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v39))
      {
        break;
      }
      v29 = v32;
      pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v29);
      Node = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode((uint64_t **)&v29);
      *(_QWORD *)&v39 = Node;
      *((_QWORD *)&v39 + 1) = v21;
      if (v21 != v19 || v18 != Node)
      {
        LODWORD(v40) = HIDWORD(v40);
        v18 = Node;
        v19 = v21;
      }
      v29 = v32;
      pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v29);
      SiteRef = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpPrimIterator::_GetSiteRef((uint64_t **)&v29);
      sub_20C26E774((uint64_t)this, SiteRef, v23, NameToken, 0, (unint64_t **)&v29);
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29) & 1) == 0)
        pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::_AddPropertySpecIfPermitted((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29, &v39, &v40, (uint64_t *)&v37);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v24, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
      sub_20C26EB94((uint64_t)&v31);
    }
    sub_20C270804((unsigned int **)v37, *((unsigned int ***)&v37 + 1));
  }
  v25 = *this;
  v26 = **this;
  *v25 = v37;
  v37 = v26;
  v27 = *((_QWORD *)v25 + 2);
  *((_QWORD *)v25 + 2) = v38;
  v38 = v27;
  *(_QWORD *)&v31 = &v37;
  sub_20C21DAE8((void ***)&v31);
  return result;
}

void sub_20C26E714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  *(_QWORD *)(v25 - 88) = &a25;
  sub_20C21DAE8((void ***)(v25 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_20C26E774@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, char a5@<W4>, unint64_t **a6@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  unint64_t *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  int SpecType;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t **v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v23;
  const std::string *Identifier;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v29;
  uint64_t v30;
  uint64_t **v31;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v32;
  const std::string *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t v47;
  unsigned int v48;
  __int128 v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  int v53;
  int v54;

  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v12, a3);
  if ((result & 1) == 0)
  {
    *a6 = 0;
    return result;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v53);
  v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53) & 1) != 0)
  {
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&v52, v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v52))
    {
      v17 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v52);
      SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v17);
      v19 = SpecType;
      v20 = *(_DWORD *)(a1 + 124);
      if (v20)
      {
        if (v20 != SpecType)
        {
          pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::New(&v50);
          v21 = v50;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v50 + 16, a1 + 8);
          sub_20C01A074((int *)(v21 + 96), (_DWORD *)(a1 + 88));
          sub_20C01A0C8((int *)(v21 + 100), (_DWORD *)(a1 + 92));
          v22 = (uint64_t **)sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v22, (uint64_t *)&v49);
          v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v49);
          Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v23);
          std::string::operator=((std::string *)(v50 + 104), Identifier);
          v25 = *((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1))
          {
            v26 = (unsigned int *)(*((_QWORD *)&v49 + 1) + 8);
            do
            {
              v27 = __ldxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          }
          v29 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, &v49);
          v30 = v50;
          sub_20BFD3EBC((int *)(v50 + 128), (int *)&v49);
          sub_20BFD3F10((int *)(v30 + 132), (int *)&v49 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
          sub_20BFD265C(&v49);
          *(_DWORD *)(v50 + 168) = *(_DWORD *)(a1 + 124);
          v31 = (uint64_t **)sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v52);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v31, (uint64_t *)&v49);
          v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v49);
          v33 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v32);
          std::string::operator=((std::string *)(v50 + 136), v33);
          v34 = *((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1))
          {
            v35 = (unsigned int *)(*((_QWORD *)&v49 + 1) + 8);
            do
            {
              v36 = __ldxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
              (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          }
          v38 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v52);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v38, &v49);
          v39 = v50;
          sub_20BFD3EBC((int *)(v50 + 160), (int *)&v49);
          sub_20BFD3F10((int *)(v39 + 164), (int *)&v49 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
          sub_20BFD265C(&v49);
          v41 = v50;
          v40 = v51;
          *(_DWORD *)(v50 + 172) = v19;
          *(_QWORD *)&v49 = v41;
          *((_QWORD *)&v49 + 1) = v40;
          if (v40)
          {
            p_shared_owners = (unint64_t *)&v40->__shared_owners_;
            do
              v43 = __ldxr(p_shared_owners);
            while (__stxr(v43 + 1, p_shared_owners));
          }
          sub_20C26E438((char ***)a1, &v49);
          v44 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1))
          {
            v16 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
            do
              v45 = __ldaxr(v16);
            while (__stlxr(v45 - 1, v16));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          *a6 = 0;
          v46 = v51;
          if (v51)
          {
            v16 = (unint64_t *)&v51->__shared_owners_;
            do
              v47 = __ldaxr(v16);
            while (__stlxr(v47 - 1, v16));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          goto LABEL_38;
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)(a1 + 104), (unsigned int **)&v52);
        *(_DWORD *)(a1 + 124) = v19;
      }
      if ((a5 & 1) != 0 || v19 != 1 || (sub_20C26FBC8(a1, (uint64_t **)&v52) & 1) != 0)
      {
        v16 = v52;
        *a6 = v52;
        if (v16)
        {
          do
            v48 = __ldaxr((unsigned int *)v16);
          while (__stlxr(v48 + 1, (unsigned int *)v16));
        }
        goto LABEL_38;
      }
    }
    *a6 = 0;
LABEL_38:
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v52);
    goto LABEL_39;
  }
  *a6 = 0;
LABEL_39:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
  return (uint64_t)sub_20BFD265C(&v53);
}

void sub_20C26EAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, int a15)
{
  void *v16;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a13);
  sub_20BFD1A18(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C26EB94(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator *v2;
  __int128 v4;
  uint64_t v5;
  const char *v6;
  char v7;
  __int128 v8;

  v2 = (pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 48);
  if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v4, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v8))
  {
    *(_QWORD *)&v4 = "tf/iterator.h";
    *((_QWORD *)&v4 + 1) = "operator++";
    v5 = 250;
    v6 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__"
         "::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>, true>::operator++() [T = std::pair<pxrIn"
         "ternal__aapl__pxrReserved__::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>, Reverse = true]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement(v2);
  }
  return a1;
}

uint64_t sub_20C26EC28(uint64_t *a1, unsigned int **a2, _OWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD v22[2];
  unsigned int **v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    v25 = v6;
    if (v16)
      v17 = (char *)sub_20BDE4FF4(v6, v16);
    else
      v17 = 0;
    v18 = (unsigned int **)&v17[24 * v13];
    v22[0] = v17;
    v22[1] = v18;
    v23 = v18;
    v24 = &v17[24 * v16];
    v19 = *a2;
    *v18 = *a2;
    if (v19)
    {
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      v18 = v23;
    }
    *(_OWORD *)&v17[24 * v13 + 8] = *a3;
    v23 = v18 + 3;
    sub_20C2706EC(a1, v22);
    v12 = a1[1];
    sub_20C27077C((uint64_t)v22);
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)v9 = *a2;
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    *(_OWORD *)(v9 + 8) = *a3;
    v12 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v12;
  return v12 - 24;
}

void sub_20C26ED78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C27077C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherRelationalAttributeSpecs(int64x2_t **this, const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t Node;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  int64x2_t v41;
  const char *v42;
  void *v43;
  int64x2_t *v44;
  int64x2_t v45;
  uint64_t v46;
  __n128 result;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v48;
  _BYTE v49[24];
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v51;
  int v52;
  int v53;
  __int128 v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  int64x2_t v59;
  _QWORD v60[2];
  _BYTE v61[24];
  const char *v62;
  _QWORD *v63;

  v48 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(this + 11);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 11)) & 1) == 0)
  {
    *(_QWORD *)v61 = "pcp/propertyIndex.cpp";
    *(_QWORD *)&v61[8] = "GatherRelationalAttributeSpecs";
    *(_QWORD *)&v61[16] = 397;
    v62 = "void pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherRelationalAttributeSpecs(const PcpPropertyIndex &, BOOL)";
    LOBYTE(v63) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v61, "relAttrPath.IsRelationalAttributePath()", 0);
  }
  v59 = 0uLL;
  v60[0] = 0;
  v58 = 0;
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetPropertyRange(a2, 0, &v56);
  v7 = *((_QWORD *)&v57 + 1);
  v6 = v57;
  v54[1] = v57;
  v55 = v57;
  v8 = v56;
  while (1)
  {
    *(_QWORD *)v61 = v6;
    *(_QWORD *)&v61[8] = v7;
    *(_OWORD *)v49 = v8;
    if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v61, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v49))
    {
      break;
    }
    *(_OWORD *)v61 = v55;
    pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v61);
    *(_QWORD *)&v54[0] = pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::GetNode((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v61);
    *((_QWORD *)&v54[0] + 1) = v9;
    pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromRootToNode((pxrInternal__aapl__pxrReserved__ *)v54, v48, 0, &v52);
    while (1)
    {
      *(_OWORD *)v61 = v55;
      *(_OWORD *)v49 = v8;
      if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v61, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v49))
      {
        break;
      }
      *(_OWORD *)v61 = v55;
      pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v61);
      Node = pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::GetNode((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v61);
      if (__PAIR128__(v11, Node) != v54[0])
        break;
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v52))
      {
        *(_OWORD *)v61 = v55;
        pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v61);
        v12 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::dereference((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v61);
        v51 = v12;
        if (v12)
        {
          do
            v13 = __ldaxr((unsigned int *)v12);
          while (__stlxr(v13 + 1, (unsigned int *)v12));
        }
        v14 = (uint64_t **)sub_20BFE6874(&v51);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, (uint64_t *)v61);
        sub_20C26F2AC((uint64_t)this, (uint64_t *)v61, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, &v50);
        v15 = *(_QWORD *)&v61[8];
        if (*(_QWORD *)&v61[8])
        {
          v16 = (unsigned int *)(*(_QWORD *)&v61[8] + 8);
          do
          {
            v17 = __ldxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v50) & 1) == 0)
        {
          if (a3)
          {
            v20 = (unsigned int *)v50;
            *(_QWORD *)v49 = v50;
            if (v50)
            {
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 + 1, v20));
            }
            *(_OWORD *)&v49[8] = v54[0];
            v22 = v59.i64[1];
            if (v59.i64[1] >= v60[0])
            {
              v26 = 0xAAAAAAAAAAAAAAABLL * ((v59.i64[1] - v59.i64[0]) >> 3);
              v27 = v26 + 1;
              if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              if (0x5555555555555556 * ((v60[0] - v59.i64[0]) >> 3) > v27)
                v27 = 0x5555555555555556 * ((v60[0] - v59.i64[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v60[0] - v59.i64[0]) >> 3) >= 0x555555555555555)
                v28 = 0xAAAAAAAAAAAAAAALL;
              else
                v28 = v27;
              v63 = v60;
              if (v28)
                v29 = (char *)sub_20BDE4FF4((uint64_t)v60, v28);
              else
                v29 = 0;
              v30 = &v29[24 * v26];
              *(_QWORD *)v61 = v29;
              *(_QWORD *)&v61[8] = v30;
              *(_QWORD *)&v61[16] = v30;
              v62 = &v29[24 * v28];
              v31 = *(unsigned int **)v49;
              *(_QWORD *)v30 = *(_QWORD *)v49;
              if (v31)
              {
                do
                  v32 = __ldaxr(v31);
                while (__stlxr(v32 + 1, v31));
                v30 = *(char **)&v61[16];
              }
              *(_OWORD *)&v29[24 * v26 + 8] = *(_OWORD *)&v49[8];
              v25 = v30 + 24;
              *(_QWORD *)&v61[16] = v30 + 24;
              v33 = v59.i64[1];
              v34 = v59.i64[0];
              v35 = *(_QWORD *)&v61[8];
              if (v59.i64[1] == v59.i64[0])
              {
                v41 = vdupq_n_s64(v59.u64[1]);
              }
              else
              {
                v36 = v59.i64[1];
                v37 = *(_QWORD *)&v61[8];
                do
                {
                  v39 = *(unsigned int **)(v36 - 24);
                  v36 -= 24;
                  v38 = v39;
                  *(_QWORD *)(v37 - 24) = v39;
                  v37 -= 24;
                  if (v39)
                  {
                    do
                      v40 = __ldaxr(v38);
                    while (__stlxr(v40 + 1, v38));
                  }
                  *(_OWORD *)(v35 - 16) = *(_OWORD *)(v33 - 16);
                  v33 = v36;
                  v35 = v37;
                }
                while (v36 != v34);
                v41 = v59;
                v25 = *(_QWORD **)&v61[16];
                v35 = v37;
              }
              v59.i64[0] = v35;
              v59.i64[1] = (uint64_t)v25;
              *(int64x2_t *)&v61[8] = v41;
              v42 = (const char *)v60[0];
              v60[0] = v62;
              v62 = v42;
              *(_QWORD *)v61 = v41.i64[0];
              sub_20C27077C((uint64_t)v61);
            }
            else
            {
              v23 = *(unsigned int **)v49;
              *(_QWORD *)v59.i64[1] = *(_QWORD *)v49;
              if (v23)
              {
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 + 1, v23));
              }
              *(_OWORD *)(v22 + 8) = *(_OWORD *)&v49[8];
              v25 = (_QWORD *)(v22 + 24);
            }
            v59.i64[1] = (uint64_t)v25;
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v22, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v49);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::_AddPropertySpecIfPermitted((uint64_t)this, &v50, v54, &v58, v59.i64);
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v19, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v50);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v43, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v51);
      }
      pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v55);
    }
    LODWORD(v58) = HIDWORD(v58);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    sub_20BFD265C(&v52);
    v7 = *((_QWORD *)&v55 + 1);
    v6 = v55;
  }
  sub_20C270804((unsigned int **)v59.i64[0], (unsigned int **)v59.i64[1]);
  v44 = *this;
  v45 = **this;
  *v44 = v59;
  v59 = v45;
  v46 = v44[1].i64[0];
  v44[1].i64[0] = v60[0];
  v60[0] = v46;
  *(_QWORD *)v61 = &v59;
  sub_20C21DAE8((void ***)v61);
  return result;
}

void sub_20C26F1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  a24 = (void **)&a29;
  sub_20C21DAE8(&a24);
  _Unwind_Resume(a1);
}

void sub_20C26F2AC(uint64_t a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _QWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath((uint64_t *)&v12, v7, a3);
  v8 = (unsigned int *)v12;
  v13 = v12;
  if (v12)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v13) & 1) != 0)
    goto LABEL_10;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104)))
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)(a1 + 104), (unsigned int **)&v13);
  if (!sub_20C26FBC8(a1, &v13))
  {
LABEL_10:
    *a4 = 0;
  }
  else
  {
    v10 = (unsigned int *)v13;
    *a4 = v13;
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
}

void sub_20C26F37C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t a3, uint64_t *a4)
{
  const char *v8;
  uint64_t *v9;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *LayerStackIdentifier;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  const char *Text;
  const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  void **v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  void **v70;

  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a1) & 1) != 0
    || (v48 = (void **)"pcp/propertyIndex.cpp",
        v49 = "PcpBuildPropertyIndex",
        v50 = 456,
        v51 = "void pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(const SdfPath &, PcpCache *, PcpPropertyIndex"
              " *, PcpErrorVector *)",
        LOBYTE(v52) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v48, "propertyPath.IsPropertyPath()", 0) & 1) != 0))
  {
    if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v68);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68, &v48);
        sub_20BFD3EBC(&v68, (int *)&v48);
        sub_20BFD3F10(&v69, (int *)&v48 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
        sub_20BFD265C(&v48);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68))
      {
        v9 = pxrInternal__aapl__pxrReserved__::PcpCache::ComputePrimIndex(a2, (unsigned int *)&v68, a4);
        pxrInternal__aapl__pxrReserved__::PcpBuildPrimPropertyIndex(a1, a2, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v9, (__int128 *)a3, (uint64_t)a4);
      }
      else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68))
      {
        LayerStackIdentifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v61, LayerStackIdentifier, a1);
        sub_20C240DF8((uint64_t)v41, (uint64_t)v61);
        v48 = (void **)a3;
        sub_20C240DF8((uint64_t)&v49, (uint64_t)v41);
        v57 = a4;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
        sub_20BFD265C(&v46);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v45);
        *(_QWORD *)&v39 = &v44;
        sub_20BDE9EB0((void ***)&v39);
        v11 = v43;
        if (v43)
        {
          v12 = (unsigned int *)(v43 + 8);
          do
          {
            v13 = __ldxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        v15 = v42;
        if (v42)
        {
          v16 = (unsigned int *)(v42 + 8);
          do
          {
            v17 = __ldxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        if (pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(a2))
        {
          v39 = 0u;
          v40 = 0u;
          pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(&v68, a2, &v39, a4);
          pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherRelationalAttributeSpecs((int64x2_t **)&v48, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)&v39, 1);
          sub_20BF1C150((void ***)&v40 + 1, 0);
          v70 = (void **)&v39;
          sub_20C21DAE8(&v70);
        }
        else
        {
          v20 = (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex((int)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
          pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherRelationalAttributeSpecs((int64x2_t **)&v48, v20, 0);
        }
        v21 = v59;
        if ((v59 & 7) != 0)
        {
          v21 = (unsigned int *)((unint64_t)v59 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v58);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
        sub_20BFD265C(&v55);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v54);
        *(_QWORD *)&v39 = &v53;
        sub_20BDE9EB0((void ***)&v39);
        v23 = v52;
        if (v52)
        {
          v24 = (unsigned int *)(v52 + 8);
          do
          {
            v25 = __ldxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        v27 = v50;
        if (v50)
        {
          v28 = (unsigned int *)(v50 + 8);
          do
          {
            v29 = __ldxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
        sub_20BFD265C(&v66);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v65);
        v48 = (void **)&v64;
        sub_20BDE9EB0(&v48);
        v31 = v63;
        if (v63)
        {
          v32 = (unsigned int *)(v63 + 8);
          do
          {
            v33 = __ldxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        }
        v35 = v62;
        if (v62)
        {
          v36 = (unsigned int *)(v62 + 8);
          do
          {
            v37 = __ldxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        }
      }
      else
      {
        v48 = (void **)"pcp/propertyIndex.cpp";
        v49 = "PcpBuildPropertyIndex";
        v50 = 507;
        v51 = "void pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(const SdfPath &, PcpCache *, PcpPropertyIndex"
              " *, PcpErrorVector *)";
        LOBYTE(v52) = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Error, the property <%s> is owned by something that is not a prim or a relationship.", Text);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
      sub_20BFD265C(&v68);
    }
    else
    {
      v48 = (void **)"pcp/propertyIndex.cpp";
      v49 = "PcpBuildPropertyIndex";
      v50 = 461;
      v51 = "void pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(const SdfPath &, PcpCache *, PcpPropertyIndex *"
            ", PcpErrorVector *)";
      LOBYTE(v52) = 0;
      v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot build property index for %s with a non-empty property stack.", v8);
    }
  }
}

void sub_20C26F7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  sub_20C26FAF4((uint64_t)&a26);
  sub_20C218F6C(v26 - 168);
  sub_20BFD1A18((_DWORD *)(v26 - 80));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpBuildPrimPropertyIndex(const pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3, __int128 *a4, uint64_t a5)
{
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *LayerStackIdentifier;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char IsUsd;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t result;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[8];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  void **v64;

  LayerStackIdentifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(this);
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v57, LayerStackIdentifier, a1);
  sub_20C240DF8((uint64_t)v38, (uint64_t)v57);
  v45 = a4;
  sub_20C240DF8((uint64_t)&v46, (uint64_t)v38);
  v53 = a5;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
  sub_20BFD265C(&v43);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v42);
  v64 = (void **)&v41;
  sub_20BDE9EB0(&v64);
  v11 = v40;
  if (v40)
  {
    v12 = (unsigned int *)(v40 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v15 = v39;
  if (v39)
  {
    v16 = (unsigned int *)(v39 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  IsUsd = pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(this);
  pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherPropertySpecs(&v45, a3, IsUsd);
  v20 = v55;
  if ((v55 & 7) != 0)
  {
    v20 = (unsigned int *)((unint64_t)v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
  sub_20BFD265C(&v51);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v50);
  v64 = (void **)&v49;
  sub_20BDE9EB0(&v64);
  v22 = v48;
  if (v48)
  {
    v23 = (unsigned int *)(v48 + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v26 = v47;
  if (v47)
  {
    v27 = (unsigned int *)(v47 + 8);
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
  sub_20BFD265C(&v62);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v61);
  v45 = (__int128 *)&v60;
  sub_20BDE9EB0((void ***)&v45);
  v30 = v59;
  if (v59)
  {
    v31 = (unsigned int *)(v59 + 8);
    do
    {
      v32 = __ldxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  result = v58;
  if (v58)
  {
    v35 = (unsigned int *)(v58 + 8);
    do
    {
      v36 = __ldxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C26FAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20C218F6C((uint64_t)va);
  sub_20C218F6C(v2 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20C26FAF4(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void **v13;

  v2 = *(_QWORD *)(a1 + 112);
  if ((v2 & 7) != 0)
  {
    v2 &= 0xFFFFFFFFFFFFFFF8;
    do
      v3 = __ldxr((unsigned int *)v2);
    while (__stlxr(v3 - 2, (unsigned int *)v2));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 92));
  sub_20BFD265C((_DWORD *)(a1 + 88));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 64));
  v13 = (void **)(a1 + 40);
  sub_20BDE9EB0(&v13);
  v4 = *(unsigned int **)(a1 + 32);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  v8 = *(unsigned int **)(a1 + 16);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sub_20C26FBC8(uint64_t a1, uint64_t **this)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  const std::string *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  uint64_t **v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  const std::string *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t **v53;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v54;
  const std::string *Identifier;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v60;
  uint64_t v61;
  uint64_t **v62;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v63;
  const std::string *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v69;
  uint64_t v70;
  __int128 v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v84 = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, (uint64_t *)&v85);
    if (*((_QWORD *)&v85 + 1))
    {
      v5 = *(_BYTE *)(sub_20BEB47BC((uint64_t *)&v85 + 1) + 14) == 0;
      v6 = *((_QWORD *)&v85 + 1);
      if (v5)
        v7 = 0;
      else
        v7 = v85;
      if (*((_QWORD *)&v85 + 1))
      {
        v8 = (unsigned int *)(*((_QWORD *)&v85 + 1) + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    else
    {
      v7 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v82);
    v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v11)
      v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v12 = (uint64_t *)(v7 + 112);
    v13 = sub_20C0A683C(v12);
    (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v13 + 136))(&v85, v13, &v82, (uint64_t)v11 + 448);
    if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v85))
    {
      if ((BYTE8(v85) & 4) != 0)
        v14 = (__int128 *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v85);
      else
        v14 = &v85;
      v15 = *(_QWORD *)v14;
      if ((*(_QWORD *)v14 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          v15 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      v15 = 0;
    }
    sub_20BF4C2D8((uint64_t)&v85);
    if ((v84 & 7) != 0)
    {
      v18 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    v84 = v15;
    v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20)
      v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v83 = 0;
    v21 = sub_20C0A683C(v12);
    (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v21 + 136))(&v85, v21, &v82, (uint64_t)v20 + 464);
    if (sub_20C030CF4((pxrInternal__aapl__pxrReserved__::VtValue *)&v85))
    {
      if ((BYTE8(v85) & 4) != 0)
        v22 = (__int128 *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v85);
      else
        v22 = &v85;
    }
    else
    {
      v22 = (__int128 *)&v83;
    }
    v4 = *(_DWORD *)v22;
    sub_20BF4C2D8((uint64_t)&v85);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
    sub_20BFD265C(&v82);
  }
  v23 = *(_QWORD *)(a1 + 112);
  if (!v23)
  {
    sub_20BF32220((_QWORD *)(a1 + 112), &v84);
    *(_DWORD *)(a1 + 120) = v4;
LABEL_85:
    result = 1;
    goto LABEL_86;
  }
  if ((v23 & 0xFFFFFFFFFFFFFFF8) == (v84 & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a1 + 120) != v4)
    {
      pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::New(&v85);
      v52 = v85;
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v85 + 16, a1 + 8);
      sub_20C01A074((int *)(v52 + 96), (_DWORD *)(a1 + 88));
      sub_20C01A0C8((int *)(v52 + 100), (_DWORD *)(a1 + 92));
      v53 = (uint64_t **)sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v53, (uint64_t *)&v82);
      v54 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v82);
      Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v54);
      std::string::operator=((std::string *)(v85 + 104), Identifier);
      v56 = *((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v57 = (unsigned int *)(*((_QWORD *)&v82 + 1) + 8);
        do
        {
          v58 = __ldxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      }
      v60 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v60, &v82);
      v61 = v85;
      sub_20BFD3EBC((int *)(v85 + 128), (int *)&v82);
      sub_20BFD3F10((int *)(v61 + 132), (int *)&v82 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
      sub_20BFD265C(&v82);
      *(_DWORD *)(v85 + 168) = *(_DWORD *)(a1 + 120);
      v62 = (uint64_t **)sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v62, (uint64_t *)&v82);
      v63 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v82);
      v64 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v63);
      std::string::operator=((std::string *)(v85 + 136), v64);
      v65 = *((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v66 = (unsigned int *)(*((_QWORD *)&v82 + 1) + 8);
        do
        {
          v67 = __ldxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      }
      v69 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v69, &v82);
      v70 = v85;
      sub_20BFD3EBC((int *)(v85 + 160), (int *)&v82);
      sub_20BFD3F10((int *)(v70 + 164), (int *)&v82 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
      sub_20BFD265C(&v82);
      v71 = v85;
      *(_DWORD *)(v85 + 172) = v4;
      v82 = v71;
      if (*((_QWORD *)&v71 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      sub_20C26E438((char ***)a1, &v82);
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
    }
    goto LABEL_85;
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::New(&v85);
  v24 = v85;
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v85 + 16, a1 + 8);
  sub_20C01A074((int *)(v24 + 96), (_DWORD *)(a1 + 88));
  sub_20C01A0C8((int *)(v24 + 100), (_DWORD *)(a1 + 92));
  v25 = (uint64_t **)sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v25, (uint64_t *)&v82);
  v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v82);
  v27 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v26);
  std::string::operator=((std::string *)(v85 + 104), v27);
  v28 = *((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v29 = (unsigned int *)(*((_QWORD *)&v82 + 1) + 8);
    do
    {
      v30 = __ldxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  v32 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &v82);
  v33 = v85;
  sub_20BFD3EBC((int *)(v85 + 128), (int *)&v82);
  sub_20BFD3F10((int *)(v33 + 132), (int *)&v82 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
  sub_20BFD265C(&v82);
  sub_20BF32220((_QWORD *)(v85 + 168), (_QWORD *)(a1 + 112));
  v34 = (uint64_t **)sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v34, (uint64_t *)&v82);
  v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v82);
  v36 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v35);
  std::string::operator=((std::string *)(v85 + 136), v36);
  v37 = *((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v38 = (unsigned int *)(*((_QWORD *)&v82 + 1) + 8);
    do
    {
      v39 = __ldxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  v41 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v41, &v82);
  v42 = v85;
  sub_20BFD3EBC((int *)(v85 + 160), (int *)&v82);
  sub_20BFD3F10((int *)(v42 + 164), (int *)&v82 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
  sub_20BFD265C(&v82);
  sub_20BF32220((_QWORD *)(v85 + 176), &v84);
  v82 = v85;
  if (*((_QWORD *)&v85 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  sub_20C26E438((char ***)a1, &v82);
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  result = 0;
LABEL_86:
  if ((v84 & 7) != 0)
  {
    v80 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
    do
      v81 = __ldxr(v80);
    while (__stlxr(v81 - 2, v80));
  }
  return result;
}

void sub_20C2702C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v14;
  unsigned int v15;

  sub_20BFD1A18(&a10);
  if ((a13 & 7) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(a1);
}

char *sub_20C270490(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  char *result;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void *v18;
  char *v19;
  char *v20;

  v6 = a2;
  v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20C270628((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = sub_20BDE4FA4((_QWORD *)a1, v10);
    v12 = *(_QWORD *)(a1 + 8);
    while (v6 != a3)
    {
      v13 = *(unsigned int **)v6;
      *(_QWORD *)v12 = *(_QWORD *)v6;
      if (v13)
      {
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
      }
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v6 + 8);
      v6 += 24;
      v12 += 24;
    }
LABEL_19:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v15 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3);
    result = (char *)sub_20C270684(a2, v15, (uint64_t)v8);
    v12 = *(_QWORD *)(a1 + 8);
    while (v15 != a3)
    {
      v16 = *(unsigned int **)v15;
      *(_QWORD *)v12 = *(_QWORD *)v15;
      if (v16)
      {
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
      }
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v15 + 8);
      v15 += 24;
      v12 += 24;
    }
    goto LABEL_19;
  }
  sub_20C270684(a2, a3, (uint64_t)v8);
  v20 = v19;
  result = *(char **)(a1 + 8);
  if (result != v19)
  {
    do
      result = (char *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v18, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(result - 24));
    while (result != v20);
  }
  *(_QWORD *)(a1 + 8) = v20;
  return result;
}

void sub_20C270628(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        v3 = (char *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v3 - 24));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C270684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)a3, (unsigned int **)v4);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v4 + 8);
    a3 += 24;
    v4 += 24;
  }
  while (v4 != v5);
  return v5;
}

uint64_t *sub_20C2706EC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v6 = a2[1];
  }
  else
  {
    v5 = result[1];
    v6 = a2[1];
    do
    {
      v8 = *(unsigned int **)(v5 - 24);
      v5 -= 24;
      v7 = v8;
      *(_QWORD *)(v6 - 24) = v8;
      v6 -= 24;
      if (v8)
      {
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 + 1, v7));
      }
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      v3 = v5;
      v4 = v6;
    }
    while (v5 != v2);
  }
  a2[1] = v6;
  v10 = *result;
  *result = v6;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C27077C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20C2707C8(_QWORD *a1)
{
  _QWORD *v2;

  v2 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a1);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(v2 + 2);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a1 + 4);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a1 + 6);
  return a1;
}

unsigned int **sub_20C270804(unsigned int **result, unsigned int **a2)
{
  unint64_t v2;
  unsigned int **v3;

  v3 = result;
  if (result != a2)
  {
    v2 = (unint64_t)(a2 - 3);
    if (a2 - 3 > result)
    {
      do
      {
        result = (unsigned int **)sub_20C27085C(&v3, (uint64_t *)&v2);
        v2 -= 24;
        v3 += 3;
      }
      while ((unint64_t)v3 < v2);
    }
  }
  return result;
}

void *sub_20C27085C(unsigned int ***a1, uint64_t *a2)
{
  unsigned int **v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  __int128 v8;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v7 = v4;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v8 = *(_OWORD *)(v2 + 1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, (unsigned int **)v3);
  *(_OWORD *)(v2 + 1) = *(_OWORD *)(v3 + 8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v3, &v7);
  *(_OWORD *)(v3 + 8) = v8;
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(&v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
}

void sub_20C2708E4(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpSite *pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(pxrInternal__aapl__pxrReserved__::PcpSite *this)
{
  uint64_t v2;

  v2 = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(this);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v2 + 80));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 21);
  return this;
}

pxrInternal__aapl__pxrReserved__::PcpSite *pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(pxrInternal__aapl__pxrReserved__::PcpSite *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  sub_20BFB73DC((char *)this + 32, *((_QWORD **)a2 + 4), *((_QWORD **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  v12 = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 8) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  sub_20BFD6E54((_DWORD *)this + 20, a3);
  sub_20BFD6EA4((_DWORD *)this + 21, (_DWORD *)a3 + 1);
  return this;
}

void sub_20C270A0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
    sub_20C96B4E8(v4);
  sub_20C96B82C(v2);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  uint64_t Identifier;

  v6 = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(a1);
  sub_20BFD6E54((_DWORD *)(v6 + 80), a3);
  sub_20BFD6EA4((_DWORD *)a1 + 21, a3 + 1);
  v7 = sub_20C20BDB4(a2);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a2);
    Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v9);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)a1, Identifier);
  }
  return a1;
}

void sub_20C270AAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;

  sub_20BFD1A18(v2);
  sub_20C20D09C(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v11[2];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  memset(v12, 0, sizeof(v12));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v11);
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(a1, a2, &v13, v12, v11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v11);
  v11[0] = (void **)v12;
  sub_20BDE9EB0(v11);
  v6 = v14;
  if (v14)
  {
    v7 = (unsigned int *)(v14 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  sub_20BFD6E54((_DWORD *)(a1 + 80), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 84), a3 + 1);
  return a1;
}

void sub_20C270B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  a10 = (void **)&a12;
  sub_20BDE9EB0(&a10);
  v17 = a16;
  if (a16)
  {
    v18 = (unsigned int *)(a16 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpSite *pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(pxrInternal__aapl__pxrReserved__::PcpSite *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v5;
  uint64_t Identifier;

  v4 = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(this);
  sub_20BFD6E54((_DWORD *)(v4 + 80), (_DWORD *)a2 + 2);
  sub_20BFD6EA4((_DWORD *)this + 21, (_DWORD *)a2 + 3);
  if (*(_QWORD *)a2)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)a2);
    Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v5);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)this, Identifier);
  }
  return this;
}

void sub_20C270C54(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;

  sub_20BFD1A18(v2);
  sub_20C20D09C(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpSite::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==(a1, a2);
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpSite::operator<(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator<(a1, a2) & 1) != 0)
    return 1;
  result = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==(a1, a2);
  if ((_DWORD)result)
    return sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 80), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 80));
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpSite::Hash::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  sub_20C270F4C((uint64_t)&v3, a2, (unsigned int *)(a2 + 80));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *this)
{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  v2 = (_DWORD *)((char *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2);
  return this;
}

{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  v2 = (_DWORD *)((char *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2);
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  _DWORD *v5;

  *(_QWORD *)a1 = *a2;
  v5 = (_DWORD *)(a1 + 12);
  sub_20BF1DD04((uint64_t *)a1);
  sub_20BFD6E54((_DWORD *)(a1 + 8), a3);
  sub_20BFD6EA4(v5, a3 + 1);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 1;
  if (*a1 == *a2)
    return sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 1), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 1));
  return 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::Hash::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  sub_20C15ABAC((uint64_t)&v3, (uint64_t *)a2, (unsigned int *)(a2 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_20C270F4C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 72);
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20BFD84AC(a1, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  uint64_t ParentNode;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int ArcType;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v31;
  const std::string::value_type *v32;
  char *v33;
  int NamespaceDepth;
  int v35;
  uint64_t OriginNode;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int SiblingNumAtOrigin;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  _BOOL4 v60;
  const char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  _QWORD *LayerStack;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  _BOOL4 v88;
  _BOOL4 v89;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  unint64_t v99;
  __int128 v100;
  unint64_t v101;
  __int128 v102;
  uint64_t v103;
  const char *v104;
  char v105;

  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  v7 = v6;
  v8 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
  if (v7 != v9 || ParentNode != v8)
  {
    *(_QWORD *)&v102 = "pcp/strengthOrdering.cpp";
    *((_QWORD *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    v103 = 111;
    v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    v105 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v102, 1, (pxrInternal__aapl__pxrReserved__ *)"Nodes are not siblings");
    return 0;
  }
  if (*((_QWORD *)this + 1) == *((_QWORD *)a2 + 1) && *(_QWORD *)this == *(_QWORD *)a2)
    return 0;
  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (ArcType < (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2))
    return 0xFFFFFFFFLL;
  v13 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (v13 > (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2))
    return 1;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this) != 6)
  {
    NamespaceDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(this);
    if (NamespaceDepth > (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2))
      return 0xFFFFFFFFLL;
    v35 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(this);
    if (v35 < (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2))
      return 1;
    OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
    v38 = v37;
    *(_QWORD *)&v100 = OriginNode;
    *((_QWORD *)&v100 + 1) = v37;
    v39 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
    *(_QWORD *)&v98 = v39;
    *((_QWORD *)&v98 + 1) = v40;
    if (v38 == v40 && OriginNode == v39)
    {
LABEL_52:
      SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(this);
      if (SiblingNumAtOrigin >= (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(a2))
      {
        v42 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(this);
        return v42 > (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(a2);
      }
      return 0xFFFFFFFFLL;
    }
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    *(_QWORD *)&v102 = v64;
    *((_QWORD *)&v102 + 1) = v65;
    v66 = sub_20C271800((uint64_t *)&v102, &v100, (uint64_t)&v98);
    if (v66 < 0)
      return 0xFFFFFFFFLL;
    if (v66)
      return 1;
    *(_QWORD *)&v102 = "pcp/strengthOrdering.cpp";
    *((_QWORD *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    v103 = 311;
    v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    v105 = 0;
    v33 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Did not find either origin", v67, v68);
    v32 = "false";
LABEL_69:
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, v32, v33);
    goto LABEL_52;
  }
  sub_20C271788(this, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v100);
  sub_20C271788(a2, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v98);
  v102 = v100;
  v14 = v100;
  if ((_QWORD)v100)
  {
    v15 = *((_QWORD *)&v102 + 1);
    while (v15 != -1)
    {
      if (v15 == *((_QWORD *)&v98 + 1) && v14 == (_QWORD)v98)
        goto LABEL_31;
      v14 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v102);
      *(_QWORD *)&v102 = v14;
      *((_QWORD *)&v102 + 1) = v15;
      if (!v14)
        break;
    }
  }
  v102 = v98;
  v17 = v98;
  if ((_QWORD)v98)
  {
    v18 = *((_QWORD *)&v102 + 1);
    while (v18 != -1)
    {
      if (v18 == *((_QWORD *)&v100 + 1) && v17 == (_QWORD)v100)
        goto LABEL_31;
      v17 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v102);
      *(_QWORD *)&v102 = v17;
      *((_QWORD *)&v102 + 1) = v18;
      if (!v17)
        break;
    }
  }
  v20 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(this);
  if (v20 > (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2))
    return 0xFFFFFFFFLL;
  v21 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(this);
  if (v21 < (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2))
    return 1;
LABEL_31:
  v96 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
  v97 = v22;
  v94 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
  v95 = v23;
  v24 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  v27 = v97 == v25 && v96 == v24;
  v28 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
  v31 = v95 == v29 && v94 == v28;
  if (v97 == v95 && v96 == v94)
  {
    if (v27 || v31)
    {
      if (v27 && v31)
        goto LABEL_52;
      *(_QWORD *)&v102 = "pcp/strengthOrdering.cpp";
      *((_QWORD *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
      v103 = 185;
      v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
      v105 = 0;
      v32 = "aIsAuthoredArc && bIsAuthoredArc";
      v33 = 0;
      goto LABEL_69;
    }
    v49 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
    v51 = v50;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    if (v51 != v53
      || v49 != v52
      || (v54 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2),
          v56 = v55,
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2),
          v56 != v58)
      || v54 != v57)
    {
      *(_QWORD *)&v102 = "pcp/strengthOrdering.cpp";
      *((_QWORD *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
      v103 = 170;
      v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
      v105 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, "a.GetParentNode() == a.GetRootNode() && b.GetParentNode() == b.GetRootNode()", 0);
    }
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v102);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v96, (uint64_t)v93);
    v59 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v102, v93);
    sub_20C20ACC8((uint64_t)v93);
    sub_20C20ACC8((uint64_t)&v102);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a2, (uint64_t)&v102);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v94, (uint64_t)v93);
    v60 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v102, v93);
    sub_20C20ACC8((uint64_t)v93);
    sub_20C20ACC8((uint64_t)&v102);
    if (!v59 && v60)
      return 0xFFFFFFFFLL;
    if (v59 && !v60)
      return 1;
    *(_QWORD *)&v102 = "pcp/strengthOrdering.cpp";
    *((_QWORD *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    v103 = 181;
    v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    v105 = 0;
    v63 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Did not find copied specialize node.", v61, v62);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, "false", v63);
    return 0;
  }
  if (v100 != v98)
  {
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    *(_QWORD *)&v102 = v43;
    *((_QWORD *)&v102 + 1) = v44;
    v11 = sub_20C271800((uint64_t *)&v102, &v100, (uint64_t)&v98);
    if ((_DWORD)v11)
      return v11;
    *(_QWORD *)&v102 = "pcp/strengthOrdering.cpp";
    *((_QWORD *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    v103 = 194;
    v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    v105 = 0;
    v47 = "Did not find either origin root";
LABEL_58:
    v48 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)v47, v45, v46);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, "result != 0", v48);
    return v11;
  }
  v69 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  v71 = v70;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
  if (v71 != v73
    || v69 != v72
    || (v74 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2),
        v76 = v75,
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2),
        v76 != v78)
    || v74 != v77)
  {
    *(_QWORD *)&v102 = "pcp/strengthOrdering.cpp";
    *((_QWORD *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    v103 = 204;
    v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    v105 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, "a.GetParentNode() == a.GetRootNode() && b.GetParentNode() == b.GetRootNode()", 0);
    if (v27)
      goto LABEL_75;
LABEL_78:
    v79 = sub_20C2718E8((pxrInternal__aapl__pxrReserved__ *)&v96);
    goto LABEL_79;
  }
  if (!v27)
    goto LABEL_78;
LABEL_75:
  v79 = 0;
LABEL_79:
  if (v31)
    v80 = 0;
  else
    v80 = sub_20C2718E8((pxrInternal__aapl__pxrReserved__ *)&v94);
  if (v79 < v80)
    return 0xFFFFFFFFLL;
  if (v80 < v79)
    return 1;
  if (v101 > v99)
    return 0xFFFFFFFFLL;
  if (v99 > v101)
    return 1;
  LayerStack = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
  *(_QWORD *)&v102 = v82;
  *((_QWORD *)&v102 + 1) = v83;
  if (*LayerStack != *(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v102))
    goto LABEL_103;
  v84 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2);
  v93[0] = v85;
  v93[1] = v86;
  v87 = *v84 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v93)
     || v27;
  if (v87 || v31)
    goto LABEL_103;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v102);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v96, (uint64_t)v93);
  v88 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v102, v93);
  sub_20C20ACC8((uint64_t)v93);
  sub_20C20ACC8((uint64_t)&v102);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a2, (uint64_t)&v102);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v94, (uint64_t)v93);
  v89 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v102, v93);
  sub_20C20ACC8((uint64_t)v93);
  sub_20C20ACC8((uint64_t)&v102);
  v11 = v88 || !v89 ? 1 : 0xFFFFFFFFLL;
  if (v88 ? v89 : !v89)
  {
LABEL_103:
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    *(_QWORD *)&v102 = v91;
    *((_QWORD *)&v102 + 1) = v92;
    v11 = sub_20C271800((uint64_t *)&v102, &v96, (uint64_t)&v94);
    if (!(_DWORD)v11)
    {
      *(_QWORD *)&v102 = "pcp/strengthOrdering.cpp";
      *((_QWORD *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
      v103 = 285;
      v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
      v105 = 0;
      v47 = "Did not find either origin";
      goto LABEL_58;
    }
  }
  return v11;
}

void sub_20C27174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_20C20ACC8((uint64_t)&a9);
  sub_20C20ACC8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20C271788@<X0>(_OWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *i;
  uint64_t OriginNode;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a2 = *a1;
  *((_QWORD *)a2 + 2) = 0;
  for (i = a2; ; i = a2)
  {
    OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(i);
    v6 = v5;
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
    if (v6 == v8 && OriginNode == result)
      break;
    *(_QWORD *)a2 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
    *((_QWORD *)a2 + 1) = v9;
    ++*((_QWORD *)a2 + 2);
  }
  return result;
}

uint64_t sub_20C271800(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a1[1];
  if (v5 == a2[1] && *a1 == *a2)
    return 0xFFFFFFFFLL;
  if (v5 == *(_QWORD *)(a3 + 8))
  {
    v6 = *a1;
    if (*a1 == *(_QWORD *)a3)
      return 1;
  }
  else
  {
    v6 = *a1;
  }
  v18 = v6;
  v19 = v5;
  v8 = **(_QWORD **)(v6 + 16);
  v9 = *(unsigned __int16 *)(v8 + 48 * v5 + 28);
  v12 = v6;
  v13 = v9;
  v14 = v8;
  v15 = v6;
  v10 = 0xFFFFLL;
  v16 = 0xFFFFLL;
  v17 = v8;
  while (v9 != v10 || v12 != v15)
  {
    v11 = sub_20C20495C(&v12, (uint64_t)a2, (char *)a3);
    result = sub_20C271800(v11, a2, a3);
    if ((_DWORD)result)
      return result;
    sub_20C2049E8(&v12);
    v9 = v13;
    v10 = v16;
  }
  return 0;
}

uint64_t sub_20C2718E8(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 i;

  pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy(a1, (uint64_t)&v3);
  for (i = v3;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i) == 3;
        *((_QWORD *)&i + 1) = v1)
  {
    *(_QWORD *)&i = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
  }
  return pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCompareNodeStrength(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v12;
  uint64_t v13;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v14;
  void *__p[3];
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(this);
  v6 = v5;
  v8 = v7;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2);
  if (v8 != v10 || v6 != v9)
  {
    v17 = "pcp/strengthOrdering.cpp";
    v18 = "PcpCompareNodeStrength";
    v19 = 383;
    v20 = "int pxrInternal__aapl__pxrReserved__::PcpCompareNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Nodes are not part of the same prim index");
    return 0;
  }
  v11 = (uint64_t)this[1];
  if (v11 == *((_QWORD *)a2 + 1))
  {
    v12 = *this;
    if (*this == *(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2)
      return 0;
  }
  else
  {
    v12 = *this;
  }
  sub_20C271A74((uint64_t)v12, v11, &v17);
  sub_20C271A74(*(_QWORD *)a2, *((_QWORD *)a2 + 1), __p);
  v13 = sub_20C271BD0((pxrInternal__aapl__pxrReserved__ **)&v17, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef **)__p, v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v17)
  {
    v18 = (const char *)v17;
    operator delete(v17);
  }
  return v13;
}

void sub_20C271A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C271A74@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;

  *(_QWORD *)&v18 = result;
  *((_QWORD *)&v18 + 1) = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (result && a2 != -1)
  {
    v4 = (uint64_t)(a3 + 2);
    do
    {
      v6 = a3[1];
      v5 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v5)
      {
        v8 = ((char *)v6 - (_BYTE *)*a3) >> 4;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60)
          sub_20BDDF694();
        v10 = v5 - (_QWORD)*a3;
        if (v10 >> 3 > v9)
          v9 = v10 >> 3;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
          v11 = 0xFFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = (char *)sub_20BDEA2F0(v4, v11);
        else
          v12 = 0;
        v13 = &v12[16 * v8];
        *(_OWORD *)v13 = v18;
        v15 = (char *)*a3;
        v14 = (char *)a3[1];
        v16 = v13;
        if (v14 != *a3)
        {
          do
          {
            *((_OWORD *)v16 - 1) = *((_OWORD *)v14 - 1);
            v16 -= 16;
            v14 -= 16;
          }
          while (v14 != v15);
          v14 = (char *)*a3;
        }
        v7 = v13 + 16;
        *a3 = v16;
        a3[1] = v13 + 16;
        a3[2] = &v12[16 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v6 = v18;
        v7 = v6 + 1;
      }
      a3[1] = v7;
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18);
      *(_QWORD *)&v18 = result;
      *((_QWORD *)&v18 + 1) = v17;
    }
    while (result && v17 != -1);
  }
  return result;
}

void sub_20C271BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C271BD0(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::PcpNodeRef **a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v5;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  v5 = a2[1];
  v6 = *a2;
  v7 = a1[1];
  v8 = *a1;
  if (v5 - *a2 < (unint64_t)(v7 - *a1))
    return -sub_20C271BD0(a2, a1);
  while (v7 != v8)
  {
    v10 = *((_QWORD *)v7 - 2);
    v11 = *((_QWORD *)v7 - 1);
    v7 = (pxrInternal__aapl__pxrReserved__ *)((char *)v7 - 16);
    v12 = *((_QWORD *)v5 - 2);
    v13 = *((_QWORD *)v5 - 1);
    v5 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)((char *)v5 - 16);
    if (v11 != v13 || v10 != v12)
    {
      if ((const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)((char *)v5 + 16) == v6)
      {
        v17 = "pcp/strengthOrdering.cpp";
        v18 = "_CompareNodeStrength";
        v19 = 373;
        v20 = "int pxrInternal__aapl__pxrReserved__::_CompareNodeStrength(const PcpNodeRef &, const PcpNodeRefVector &, c"
              "onst PcpNodeRef &, const PcpNodeRefVector &)";
        v21 = 0;
        v15 = v5;
        v16 = v7;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "nodesUnderCommonParent.first != aNodes.rend() && nodesUnderCommonParent.second != bNodes.rend()", 0);
        v5 = v15;
        v7 = v16;
      }
      return pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(v7, v5, a3);
    }
  }
  if (v5 == v6)
  {
    v17 = "pcp/strengthOrdering.cpp";
    v18 = "_CompareNodeStrength";
    v19 = 367;
    v20 = "int pxrInternal__aapl__pxrReserved__::_CompareNodeStrength(const PcpNodeRef &, const PcpNodeRefVector &, const"
          " PcpNodeRef &, const PcpNodeRefVector &)";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "nodesUnderCommonParent.second != bNodes.rend()", 0);
  }
  return 0xFFFFFFFFLL;
}

void pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this, int a3, int a4, _QWORD *a5, char a6, uint64_t a7, __int128 *a8, _QWORD *a9, uint64_t *a10)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  const pxrInternal__aapl__pxrReserved__::TfToken *v19;
  char v20;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *i;
  _DWORD *v28;
  uint64_t Node;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  const char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  const char *Text;
  const char *v40;
  char *v41;
  const char *v42;
  char *v43;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  const char *v61;
  char v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (a3 != 1 && a3 != 8)
  {
    *(_QWORD *)&v46 = "pcp/targetIndex.cpp";
    *((_QWORD *)&v46 + 1) = "PcpBuildFilteredTargetIndex";
    *(_QWORD *)&v47 = 457;
    *((_QWORD *)&v47 + 1) = "void pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(const PcpSite &, const Pc"
                            "pPropertyIndex &, const SdfSpecType, const BOOL, const SdfSpecHandle &, const BOOL, PcpCache"
                            " *, PcpTargetIndex *, SdfPathVector *, PcpErrorVector *)";
    LOBYTE(v48) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v46, 1, (pxrInternal__aapl__pxrReserved__ *)"relOrAttrType msut be either SdfSpecTypeRelationship or SdfSpecTypeAttribute");
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetPropertyRange(this, a4, &v56);
    v16 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::dereference((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v56);
    v17 = sub_20BFE6874(v16);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v17) == a3)
      goto LABEL_5;
    *(_QWORD *)&v46 = "pcp/targetIndex.cpp";
    *((_QWORD *)&v46 + 1) = "PcpBuildFilteredTargetIndex";
    *(_QWORD *)&v47 = 477;
    *((_QWORD *)&v47 + 1) = "void pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(const PcpSite &, const Pc"
                            "pPropertyIndex &, const SdfSpecType, const BOOL, const SdfSpecHandle &, const BOOL, PcpCache"
                            " *, PcpTargetIndex *, SdfPathVector *, PcpErrorVector *)";
    LOBYTE(v48) = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 80));
    v42 = "a relationship";
    if (a3 == 1)
      v42 = "an attribute";
    v43 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"<%s> is not %s", v40, v41, Text, v42);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v46, "(*propertyRange.first)->GetSpecType() == relOrAttrType", v43) & 1) != 0)
    {
LABEL_5:
      v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (a3 == 1)
      {
        if (!v18)
          v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v18 + 56);
      }
      else
      {
        if (!v18)
          v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v18 + 424);
      }
      v54 = 0uLL;
      v55 = 0;
      v52 = 0uLL;
      v53 = 0;
      sub_20C273924(&v46);
      v20 = 0;
      v50 = v56;
      v51 = v57;
      v46 = v57;
      v47 = v57;
      v48 = v56;
      v49 = v56;
      while (1)
      {
        v58 = v49;
        v59 = v47;
        if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v59, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v58)|| (v21 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C272234((uint64_t)&v46), v22 = v21, (a6 & 1) == 0)&& pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(v21, a5))
        {
LABEL_43:
          sub_20C20DB9C(a10, a10[1], (uint64_t *)v52, *((uint64_t **)&v52 + 1), (uint64_t)(*((_QWORD *)&v52 + 1) - v52) >> 4);
          v35 = *a8;
          *a8 = v54;
          v54 = v35;
          v36 = *((_QWORD *)a8 + 2);
          *((_QWORD *)a8 + 2) = v55;
          v55 = v36;
          v37 = *(__int128 *)((char *)a8 + 24);
          *(__int128 *)((char *)a8 + 24) = v52;
          v52 = v37;
          v38 = *((_QWORD *)a8 + 5);
          *((_QWORD *)a8 + 5) = v53;
          v53 = v38;
          *((_BYTE *)a8 + 48) = v20 & 1;
          *(_QWORD *)&v46 = &v52;
          sub_20BDE9EB0((void ***)&v46);
          *(_QWORD *)&v46 = &v54;
          sub_20BFD6F90((void ***)&v46);
          return;
        }
        v23 = sub_20BFE6874(v22);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v23, v19, (pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        if (v64)
        {
          if ((sub_20BFD6B4C((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
            break;
          *(_QWORD *)&v59 = "pcp/targetIndex.cpp";
          *((_QWORD *)&v59 + 1) = "PcpBuildFilteredTargetIndex";
          v60 = 498;
          v61 = "void pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(const PcpSite &, const PcpPropertyInd"
                "ex &, const SdfSpecType, const BOOL, const SdfSpecHandle &, const BOOL, PcpCache *, PcpTargetIndex *, Sd"
                "fPathVector *, PcpErrorVector *)";
          v62 = 0;
          if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v59, "pathValue.IsHolding<SdfPathListOp>()", 0) & 1) != 0)break;
        }
LABEL_38:
        sub_20BF4C2D8((uint64_t)&v63);
        sub_20C273398((uint64_t)&v46);
      }
      if ((v64 & 4) != 0)
        v24 = (_BYTE *)(*(uint64_t (**)(_BYTE **))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(&v63);
      else
        v24 = v63;
      if (!pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::HasKeys((uint64_t)v24))
      {
LABEL_37:
        if (pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(v22, a5))
        {
          sub_20BF4C2D8((uint64_t)&v63);
          goto LABEL_43;
        }
        goto LABEL_38;
      }
      if (*v24)
      {
        v25 = *((_QWORD *)&v52 + 1);
        v26 = v52;
        while (v25 != v26)
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v25 - 16));
        *((_QWORD *)&v52 + 1) = v26;
        if (a9)
        {
          v28 = (_DWORD *)*a9;
          for (i = (_DWORD *)a9[1]; i != v28; sub_20BFD6F64((uint64_t)(a9 + 2), i))
            i -= 2;
          a9[1] = v28;
        }
      }
      v58 = v47;
      pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v58);
      Node = pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::GetNode((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v58);
      v31 = v30;
      v32 = operator new(0x58uLL);
      *v32 = &unk_24C52D450;
      v32[1] = sub_20C2722D4;
      v32[2] = a1;
      v32[3] = Node;
      v32[4] = v31;
      v32[5] = v22;
      *((_DWORD *)v32 + 12) = a3;
      v32[7] = a7;
      v32[8] = a9;
      v32[9] = &v52;
      v32[10] = a10;
      v61 = (const char *)v32;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations((uint64_t)v24, (uint64_t *)&v54, (uint64_t)&v59);
      v33 = v61;
      if (v61 == (const char *)&v59)
      {
        v33 = (const char *)&v59;
        v34 = 4;
      }
      else
      {
        if (!v61)
        {
LABEL_36:
          v20 = 1;
          goto LABEL_37;
        }
        v34 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
      goto LABEL_36;
    }
  }
}

void sub_20C272198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_20BF4C2D8(v33 - 112);
  a17 = (void **)&a29;
  sub_20BDE9EB0(&a17);
  a17 = (void **)&a33;
  sub_20BFD6F90(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C272234(uint64_t a1)
{
  __int128 *v1;
  char *v2;
  __int128 v4;
  uint64_t v5;
  const char *v6;
  char v7;
  int v8;
  __int128 v9;

  v1 = (__int128 *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 48);
  if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v4, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v9))
  {
    *(_QWORD *)&v4 = "tf/iterator.h";
    *((_QWORD *)&v4 + 1) = "operator*";
    v5 = 271;
    v6 = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::pair<pxrInternal__aapl__pxrReserved__::PcpPro"
         "pertyIterator, pxrInternal__aapl__pxrReserved__::PcpPropertyIterator>, true>::operator*() [T = const std::pair<"
         "pxrInternal__aapl__pxrReserved__::PcpPropertyIterator, pxrInternal__aapl__pxrReserved__::PcpPropertyIterator>, Reverse = true]";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  v4 = *v1;
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v4);
  return pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::dereference((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v4);
}

_DWORD *sub_20C2722D4@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X2>, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X3>, int a3@<W0>, uint64_t a4@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a5@<X4>, int a6@<W5>, pxrInternal__aapl__pxrReserved__::PcpCache *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, pxrInternal__aapl__pxrReserved__::PcpCache *a11)
{
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL HasPrefix;
  uint64_t *v24;
  uint64_t *LayerStack;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v48;
  uint64_t v49;
  int ArcType;
  uint64_t v51;
  uint64_t **v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  __int128 v79;
  int64x2_t v80;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v88;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char **v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v99;
  uint64_t v100;
  uint64_t **v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v114;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v115;
  uint64_t v116;
  uint64_t **v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v135;
  uint64_t v136;
  uint64_t **v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  _QWORD *v161;
  _QWORD *v162;
  char *v163;
  __int128 v164;
  int64x2_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *p_shared_owners;
  unint64_t v169;
  int v170;
  void **v171;
  const char *Text;
  const char *v173;
  char *v174;
  void **v175;
  char *v176;
  char **v177;
  int v178;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v179;
  __int128 v180;
  __int128 v181;
  pxrInternal__aapl__pxrReserved__::PcpCache *v182[2];
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  void *__p[2];
  char v189;
  __int128 v190;
  uint64_t v191;
  const char *v192;
  char v193;
  __int128 v194;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  _BYTE v202[32];
  _QWORD v203[3];
  _QWORD *v204;
  void *v205;
  char v206;
  char v207;
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  v187 = 0;
  pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRoot(this, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v187, &v186);
  v20 = a10;
  if (a3 == 2)
  {
    if (v187
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v186))
    {
      if (a8)
      {
        v21 = a8[1];
        if (v21 >= a8[2])
        {
          v22 = sub_20BFD7890(a8, &v186);
        }
        else
        {
          sub_20BFD6E54((_DWORD *)a8[1], &v186);
          sub_20BFD6EA4((_DWORD *)(v21 + 4), (_DWORD *)&v186 + 1);
          v22 = v21 + 8;
        }
        a8[1] = v22;
      }
      v82 = *(_QWORD *)a10;
      v81 = *(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)(a10 + 8);
      if (*(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)a10 != v81)
      {
        do
        {
          v83 = v186;
          v84 = -v82;
          while (1)
          {
            if (*(_QWORD *)v82)
            {
              if (v85)
              {
                if (v85[18] == v83)
                  break;
              }
            }
            v82 += 16;
            v84 -= 16;
            if ((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v82 == v81)
              goto LABEL_111;
          }
          v82 = -v84;
          if ((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(16 - v84) == v81)
          {
            v88 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)-v84;
          }
          else
          {
            v86 = v20;
            v87 = v82;
            do
            {
              v88 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v87 + 16);
              sub_20BDE82DC(v87, (__int128 *)(v87 + 16));
              v89 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v87 + 32);
              v87 += 16;
            }
            while (v89 != v81);
            v20 = v86;
            v81 = *(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)(v86 + 8);
          }
          while (v81 != v88)
          {
            v81 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)v81 - 16);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v81);
          }
          *(_QWORD *)(v20 + 8) = v88;
          v81 = v88;
        }
        while (v88 != (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v82);
      }
      goto LABEL_111;
    }
    goto LABEL_31;
  }
  if (v187)
  {
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v186))
    {
LABEL_31:
      *(_BYTE *)a9 = 0;
      *(_BYTE *)(a9 + 8) = 0;
      goto LABEL_112;
    }
    if (!a7)
    {
LABEL_111:
      sub_20BFD6E54((_DWORD *)a9, &v186);
      sub_20BFD6EA4((_DWORD *)(a9 + 4), (_DWORD *)&v186 + 1);
      *(_BYTE *)(a9 + 8) = 1;
      goto LABEL_112;
    }
    v178 = a6;
    v179 = a5;
    v182[0] = a7;
    v182[1] = a11;
    sub_20BFD6E54(&v183, &v186);
    sub_20BFD6EA4(&v184, (_DWORD *)&v186 + 1);
    v185 = 0;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this) == 1)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(this, (int *)v202);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v202);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v202[4]);
      sub_20BFD265C(v202);
      if (!HasPrefix)
      {
        v24 = (uint64_t *)sub_20C273604((uint64_t)v182);
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
        sub_20C2033F4((uint64_t *)&v190, LayerStack);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(this, (int *)&v195);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v24, 6u, (uint64_t *)v202);
        v26 = *(char **)&v202[8];
        v27 = *(void **)v202;
        v28 = *(void **)&v202[16];
        if (*(_OWORD *)v202 != *(_OWORD *)&v202[16])
        {
          v29 = *(_QWORD *)&v202[24] - 1;
          while (1)
          {
            v30 = v26;
            __p[0] = v27;
            __p[1] = v26;
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p) == 1)
            {
              v31 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
              if (sub_20C1020E4(&v190, v31))
              {
                Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
                if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(Path, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v195))
                {
                  break;
                }
              }
            }
            v26 = v30 + 1;
            if (v27 == v28 && (char *)v29 == v30)
              goto LABEL_19;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
          sub_20BFD265C(&v195);
          v129 = *((_QWORD *)&v190 + 1);
          if (*((_QWORD *)&v190 + 1))
          {
            v130 = (unsigned int *)(*((_QWORD *)&v190 + 1) + 8);
            do
            {
              v131 = __ldxr(v130);
              v132 = v131 - 1;
            }
            while (__stlxr(v132, v130));
            if (!v132)
              (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
          }
          pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::New(&v190);
          v133 = v190;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v190 + 16, a4);
          sub_20C01A074((int *)(v133 + 96), (_DWORD *)(a4 + 80));
          sub_20C01A0C8((int *)(v133 + 100), (_DWORD *)(a4 + 84));
          v134 = v190;
          sub_20C01A074((int *)(v190 + 104), a2);
          sub_20C01A0C8((int *)(v134 + 108), (_DWORD *)a2 + 1);
          v135 = sub_20BFE6874(v179);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v135, v202);
          v136 = v190;
          sub_20BFD3EBC((int *)(v190 + 112), (int *)v202);
          sub_20BFD3F10((int *)(v136 + 116), (int *)&v202[4]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v202[4]);
          sub_20BFD265C(v202);
          *(_DWORD *)(v190 + 120) = v178;
          v137 = (uint64_t **)sub_20BFE6874(v179);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v137, (uint64_t *)v202);
          v138 = *(unsigned int **)(v190 + 136);
          *(_OWORD *)(v190 + 128) = *(_OWORD *)v202;
          *(_QWORD *)&v202[8] = 0;
          if (v138)
          {
            v139 = v138 + 2;
            do
            {
              v140 = __ldxr(v139);
              v141 = v140 - 1;
            }
            while (__stlxr(v141, v139));
            if (!v141)
              (*(void (**)(unsigned int *))(*(_QWORD *)v138 + 8))(v138);
            v142 = *(_QWORD *)&v202[8];
            *(_QWORD *)v202 = 0;
            if (*(_QWORD *)&v202[8])
            {
              v143 = (unsigned int *)(*(_QWORD *)&v202[8] + 8);
              do
              {
                v144 = __ldxr(v143);
                v145 = v144 - 1;
              }
              while (__stlxr(v145, v143));
              if (!v145)
                (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
            }
          }
          v146 = v190;
          sub_20C01A074((int *)(v190 + 144), &v186);
          sub_20C01A0C8((int *)(v146 + 148), (_DWORD *)&v186 + 1);
          v147 = v190;
          *(_OWORD *)__p = v190;
          v148 = *((_QWORD *)&v190 + 1);
          if (*((_QWORD *)&v190 + 1))
          {
            v149 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
            do
              v150 = __ldxr(v149);
            while (__stxr(v150 + 1, v149));
          }
          v151 = *(_QWORD *)(a10 + 16);
          v152 = *(_QWORD **)(a10 + 8);
          if ((unint64_t)v152 >= v151)
          {
            v180 = v147;
            v154 = ((uint64_t)v152 - *(_QWORD *)a10) >> 4;
            if ((unint64_t)(v154 + 1) >> 60)
              sub_20BDDF694();
            v155 = v151 - *(_QWORD *)a10;
            v156 = v155 >> 3;
            if (v155 >> 3 <= (unint64_t)(v154 + 1))
              v156 = v154 + 1;
            if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0)
              v157 = 0xFFFFFFFFFFFFFFFLL;
            else
              v157 = v156;
            v203[0] = a10 + 16;
            v158 = (char *)sub_20BDEA2F0(a10 + 16, v157);
            v160 = &v158[16 * v154];
            *(_OWORD *)v160 = v180;
            v162 = *(_QWORD **)a10;
            v161 = *(_QWORD **)(a10 + 8);
            if (v161 == *(_QWORD **)a10)
            {
              v165 = vdupq_n_s64((unint64_t)v161);
              v163 = &v158[16 * v154];
            }
            else
            {
              v163 = &v158[16 * v154];
              do
              {
                v164 = *((_OWORD *)v161 - 1);
                v161 -= 2;
                *((_OWORD *)v163 - 1) = v164;
                v163 -= 16;
                *v161 = 0;
                v161[1] = 0;
              }
              while (v161 != v162);
              v165 = *(int64x2_t *)a10;
            }
            v153 = v160 + 16;
            *(_QWORD *)a10 = v163;
            *(_QWORD *)(a10 + 8) = v160 + 16;
            *(int64x2_t *)&v202[8] = v165;
            v166 = *(_QWORD *)(a10 + 16);
            *(_QWORD *)(a10 + 16) = &v158[16 * v159];
            *(_QWORD *)&v202[24] = v166;
            *(_QWORD *)v202 = v165.i64[0];
            sub_20BDEA324((uint64_t)v202);
          }
          else
          {
            *v152 = v147;
            v152[1] = v148;
            v153 = v152 + 2;
          }
          *(_QWORD *)(a10 + 8) = v153;
          v167 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
          *(_BYTE *)a9 = 0;
          *(_BYTE *)(a9 + 8) = 0;
          if (v167)
          {
            p_shared_owners = (unint64_t *)&v167->__shared_owners_;
            do
              v169 = __ldaxr(p_shared_owners);
            while (__stlxr(v169 - 1, p_shared_owners));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          goto LABEL_127;
        }
LABEL_19:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
        sub_20BFD265C(&v195);
        v33 = *((_QWORD *)&v190 + 1);
        v20 = a10;
        if (*((_QWORD *)&v190 + 1))
        {
          v34 = (unsigned int *)(*((_QWORD *)&v190 + 1) + 8);
          do
          {
            v35 = __ldxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        }
      }
    }
    if ((pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(a7) & 1) != 0)
    {
LABEL_110:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v184);
      sub_20BFD265C(&v183);
      goto LABEL_111;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v186, &v200);
    v37 = (uint64_t *)sub_20C273604((uint64_t)v182);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v198);
    v38 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v195, v38, &v198);
    v177 = (char **)v20;
    *(_QWORD *)&v194 = 0;
    *((_QWORD *)&v194 + 1) = -1;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v37, 6u, (uint64_t *)v202);
    v39 = *(_QWORD *)&v202[8];
    v40 = *(_QWORD *)v202;
    v41 = *(_QWORD *)&v202[16];
    if (*(_OWORD *)v202 != *(_OWORD *)&v202[16])
    {
      v42 = *(_QWORD *)&v202[24] - 1;
      while (1)
      {
        v43 = v39;
        *(_QWORD *)&v190 = v40;
        *((_QWORD *)&v190 + 1) = v39;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v190, (uint64_t)__p);
        v44 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(__p, &v195);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
        sub_20BFD265C(&__p[1]);
        sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
        if (v44)
          break;
        v39 = v43 + 1;
        if (v40 == v41 && v42 == v43)
          goto LABEL_85;
      }
      v194 = v190;
      if ((_QWORD)v190)
      {
        if (*((_QWORD *)&v194 + 1) != -1)
        {
          v94 = v177;
          v95 = sub_20C27368C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v186, (uint64_t *)&v194);
LABEL_94:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v197);
          sub_20BFD265C(&v196);
          sub_20C2012CC(&v195);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v199);
          sub_20BFD265C(&v198);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v201);
          sub_20BFD265C(&v200);
          if (v95 == 2)
          {
            pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::New(v202);
            sub_20C273488(*(_QWORD *)v202 + 16, a4);
            v114 = *(_QWORD *)v202;
            sub_20C01A074((int *)(*(_QWORD *)v202 + 104), a2);
            sub_20C01A0C8((int *)(v114 + 108), (_DWORD *)a2 + 1);
            v115 = sub_20BFE6874(v179);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v115, &v190);
            v116 = *(_QWORD *)v202;
            sub_20BFD3EBC((int *)(*(_QWORD *)v202 + 112), (int *)&v190);
            sub_20BFD3F10((int *)(v116 + 116), (int *)&v190 + 1);
            sub_20BFD1A18(&v190);
            *(_DWORD *)(*(_QWORD *)v202 + 120) = v178;
            v117 = (uint64_t **)sub_20BFE6874(v179);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v117, (uint64_t *)&v190);
            v118 = *(unsigned int **)(*(_QWORD *)v202 + 136);
            *(_OWORD *)(*(_QWORD *)v202 + 128) = v190;
            *((_QWORD *)&v190 + 1) = 0;
            if (v118)
            {
              v119 = v118 + 2;
              do
              {
                v120 = __ldxr(v119);
                v121 = v120 - 1;
              }
              while (__stlxr(v121, v119));
              if (!v121)
                (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
              v122 = *((_QWORD *)&v190 + 1);
              *(_QWORD *)&v190 = 0;
              if (*((_QWORD *)&v190 + 1))
              {
                v123 = (unsigned int *)(*((_QWORD *)&v190 + 1) + 8);
                do
                {
                  v124 = __ldxr(v123);
                  v125 = v124 - 1;
                }
                while (__stlxr(v125, v123));
                if (!v125)
                  (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
              }
            }
            v126 = *(_QWORD *)v202;
            sub_20C01A074((int *)(*(_QWORD *)v202 + 144), &v186);
            sub_20C01A0C8((int *)(v126 + 148), (_DWORD *)&v186 + 1);
            v190 = *(_OWORD *)v202;
            if (*(_QWORD *)&v202[8])
            {
              v127 = (unint64_t *)(*(_QWORD *)&v202[8] + 8);
              do
                v128 = __ldxr(v127);
              while (__stxr(v128 + 1, v127));
            }
            goto LABEL_126;
          }
          if (v95 == 1)
          {
            pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::New(v202);
            sub_20C273488(*(_QWORD *)v202 + 16, a4);
            v98 = *(_QWORD *)v202;
            sub_20C01A074((int *)(*(_QWORD *)v202 + 104), a2);
            sub_20C01A0C8((int *)(v98 + 108), (_DWORD *)a2 + 1);
            v99 = sub_20BFE6874(v179);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v99, &v190);
            v100 = *(_QWORD *)v202;
            sub_20BFD3EBC((int *)(*(_QWORD *)v202 + 112), (int *)&v190);
            sub_20BFD3F10((int *)(v100 + 116), (int *)&v190 + 1);
            sub_20BFD1A18(&v190);
            *(_DWORD *)(*(_QWORD *)v202 + 120) = v178;
            v101 = (uint64_t **)sub_20BFE6874(v179);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v101, (uint64_t *)&v190);
            v102 = *(unsigned int **)(*(_QWORD *)v202 + 136);
            *(_OWORD *)(*(_QWORD *)v202 + 128) = v190;
            *((_QWORD *)&v190 + 1) = 0;
            if (v102)
            {
              v103 = v102 + 2;
              do
              {
                v104 = __ldxr(v103);
                v105 = v104 - 1;
              }
              while (__stlxr(v105, v103));
              if (!v105)
                (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 8))(v102);
              v106 = *((_QWORD *)&v190 + 1);
              *(_QWORD *)&v190 = 0;
              if (*((_QWORD *)&v190 + 1))
              {
                v107 = (unsigned int *)(*((_QWORD *)&v190 + 1) + 8);
                do
                {
                  v108 = __ldxr(v107);
                  v109 = v108 - 1;
                }
                while (__stlxr(v109, v107));
                if (!v109)
                  (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
              }
            }
            v110 = *(_QWORD *)v202;
            sub_20C01A074((int *)(*(_QWORD *)v202 + 144), &v186);
            sub_20C01A0C8((int *)(v110 + 148), (_DWORD *)&v186 + 1);
            v190 = *(_OWORD *)v202;
            if (*(_QWORD *)&v202[8])
            {
              v111 = (unint64_t *)(*(_QWORD *)&v202[8] + 8);
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
LABEL_126:
            sub_20C2734C8(v94, (uint64_t)&v190);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v190);
            *(_BYTE *)a9 = 0;
            *(_BYTE *)(a9 + 8) = 0;
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v202);
LABEL_127:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v184);
            sub_20BFD265C(&v183);
            goto LABEL_112;
          }
          goto LABEL_110;
        }
      }
    }
LABEL_85:
    pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(v182[0], (uint64_t)v202);
    v94 = v177;
    if (!v207)
    {
      *(_QWORD *)&v190 = "pcp/targetIndex.cpp";
      *((_QWORD *)&v190 + 1) = "_TargetIsPermitted";
      v191 = 286;
      v192 = "Pcp_PathTranslationError pxrInternal__aapl__pxrReserved__::_TargetIsPermitted(const SdfPath &, const SdfPat"
             "h &, const PcpNodeRef &, Pcp_TargetIndexContext &)";
      v193 = 0;
      sub_20C264098((uint64_t *)&v195);
      v170 = v189;
      v171 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v200);
      v175 = __p;
      if (v170 < 0)
        v175 = v171;
      v176 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Could not find expected node for site %s in prim index for <%s>", v173, v174, v175, Text);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v190, "context.GetCache()->GetPrimIndexInputs().cull", v176);
      if (v189 < 0)
        operator delete(__p[0]);
      v94 = v177;
    }
    if (v206 < 0)
      operator delete(v205);
    v96 = v204;
    if (v204 == v203)
    {
      v97 = 4;
      v96 = v203;
    }
    else
    {
      if (!v204)
      {
LABEL_93:
        v95 = 0;
        goto LABEL_94;
      }
      v97 = 5;
    }
    (*(void (**)(void))(*v96 + 8 * v97))();
    goto LABEL_93;
  }
  v45 = a6;
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::New(&v190);
  v46 = v190;
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v190 + 16, a4);
  sub_20C01A074((int *)(v46 + 96), (_DWORD *)(a4 + 80));
  sub_20C01A0C8((int *)(v46 + 100), (_DWORD *)(a4 + 84));
  v47 = v190;
  sub_20C01A074((int *)(v190 + 104), a2);
  sub_20C01A0C8((int *)(v47 + 108), (_DWORD *)a2 + 1);
  v48 = sub_20BFE6874(a5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v48, v202);
  v49 = v190;
  sub_20BFD3EBC((int *)(v190 + 112), (int *)v202);
  sub_20BFD3F10((int *)(v49 + 116), (int *)&v202[4]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v202[4]);
  sub_20BFD265C(v202);
  *(_DWORD *)(v190 + 120) = v45;
  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  *(_DWORD *)(v190 + 152) = ArcType;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetIntroPath(this, (int *)v202);
  v51 = v190;
  sub_20BFD3EBC((int *)(v190 + 156), (int *)v202);
  sub_20BFD3F10((int *)(v51 + 160), (int *)&v202[4]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v202[4]);
  sub_20BFD265C(v202);
  v52 = (uint64_t **)sub_20BFE6874(a5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v52, (uint64_t *)v202);
  v53 = *(unsigned int **)(v190 + 136);
  *(_OWORD *)(v190 + 128) = *(_OWORD *)v202;
  *(_QWORD *)&v202[8] = 0;
  if (v53)
  {
    v54 = v53 + 2;
    do
    {
      v55 = __ldxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
      (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
    v57 = *(_QWORD *)&v202[8];
    *(_QWORD *)v202 = 0;
    if (*(_QWORD *)&v202[8])
    {
      v58 = (unsigned int *)(*(_QWORD *)&v202[8] + 8);
      do
      {
        v59 = __ldxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    }
  }
  *(_QWORD *)v202 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v202);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v202[4]);
  v61 = v190;
  sub_20BFD3EBC((int *)(v190 + 144), (int *)v202);
  sub_20BFD3F10((int *)(v61 + 148), (int *)&v202[4]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v202[4]);
  sub_20BFD265C(v202);
  v62 = v190;
  *(_OWORD *)v182 = v190;
  v63 = *((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = *(_QWORD *)(a10 + 16);
  v67 = *(_QWORD **)(a10 + 8);
  if ((unint64_t)v67 >= v66)
  {
    v181 = v62;
    v69 = ((uint64_t)v67 - *(_QWORD *)a10) >> 4;
    if ((unint64_t)(v69 + 1) >> 60)
      sub_20BDDF694();
    v70 = v66 - *(_QWORD *)a10;
    v71 = v70 >> 3;
    if (v70 >> 3 <= (unint64_t)(v69 + 1))
      v71 = v69 + 1;
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
      v72 = 0xFFFFFFFFFFFFFFFLL;
    else
      v72 = v71;
    v203[0] = a10 + 16;
    v73 = (char *)sub_20BDEA2F0(a10 + 16, v72);
    v75 = &v73[16 * v69];
    *(_OWORD *)v75 = v181;
    v77 = *(_QWORD **)a10;
    v76 = *(_QWORD **)(a10 + 8);
    if (v76 == *(_QWORD **)a10)
    {
      v80 = vdupq_n_s64((unint64_t)v76);
      v78 = &v73[16 * v69];
    }
    else
    {
      v78 = &v73[16 * v69];
      do
      {
        v79 = *((_OWORD *)v76 - 1);
        v76 -= 2;
        *((_OWORD *)v78 - 1) = v79;
        v78 -= 16;
        *v76 = 0;
        v76[1] = 0;
      }
      while (v76 != v77);
      v80 = *(int64x2_t *)a10;
    }
    v68 = v75 + 16;
    *(_QWORD *)a10 = v78;
    *(_QWORD *)(a10 + 8) = v75 + 16;
    *(int64x2_t *)&v202[8] = v80;
    v90 = *(_QWORD *)(a10 + 16);
    *(_QWORD *)(a10 + 16) = &v73[16 * v74];
    *(_QWORD *)&v202[24] = v90;
    *(_QWORD *)v202 = v80.i64[0];
    sub_20BDEA324((uint64_t)v202);
  }
  else
  {
    *v67 = v62;
    v67[1] = v63;
    v68 = v67 + 2;
  }
  *(_QWORD *)(a10 + 8) = v68;
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 8) = 0;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
LABEL_112:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v186 + 1);
  return sub_20BFD265C(&v186);
}

void sub_20C2731A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_20C218AA8(v40 - 208);
  sub_20C20ACC8((uint64_t)&a40);
  sub_20BFD1A18((_DWORD *)(v40 - 224));
  sub_20BFD1A18((_DWORD *)(v40 - 216));
  sub_20C2735D0((uint64_t)&a19);
  sub_20BFD1A18(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_20C273398(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *v2;
  __int128 v4;
  uint64_t v5;
  const char *v6;
  char v7;
  __int128 v8;

  v2 = (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 48);
  if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v4, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v8))
  {
    *(_QWORD *)&v4 = "tf/iterator.h";
    *((_QWORD *)&v4 + 1) = "operator++";
    v5 = 250;
    v6 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::pair<pxrInternal__aapl__pxrRese"
         "rved__::PcpPropertyIterator, pxrInternal__aapl__pxrReserved__::PcpPropertyIterator>, true>::operator++() [T = c"
         "onst std::pair<pxrInternal__aapl__pxrReserved__::PcpPropertyIterator, pxrInternal__aapl__pxrReserved__::PcpProp"
         "ertyIterator>, Reverse = true]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpBuildTargetIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a2, int a3, __int128 *a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = 0;
  pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(a1, a2, a3, 0, &v5, 0, 0, a4, 0, a5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
}

void sub_20C273474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C273488(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(a1, a2);
  sub_20C01A074((int *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_20C01A0C8((int *)(a1 + 84), (_DWORD *)(a2 + 84));
  return a1;
}

uint64_t sub_20C2734C8(char **a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_20BDDF694();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v25 = result;
    v13 = (char *)sub_20BDEA2F0(result, v12);
    v15 = &v13[16 * v9];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v16);
      v18 = &v13[16 * v9];
    }
    else
    {
      v18 = &v13[16 * v9];
      do
      {
        v19 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v18 - 1) = v19;
        v18 -= 16;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
      }
      while (v16 != v17);
      v20 = *(int64x2_t *)a1;
    }
    v8 = v15 + 16;
    *a1 = v18;
    a1[1] = v15 + 16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = &v13[16 * v14];
    v24 = v21;
    v22 = v20.i64[0];
    result = sub_20BDEA324((uint64_t)&v22);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = v7 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  a1[1] = v8;
  return result;
}

uint64_t sub_20C2735D0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_20C273604(uint64_t a1)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::PcpCache *v3;
  unsigned int v4;
  int v5;

  result = *(_QWORD *)(a1 + 24);
  if (!result)
  {
    v3 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)a1;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), &v4);
    *(_QWORD *)(a1 + 24) = pxrInternal__aapl__pxrReserved__::PcpCache::ComputePrimIndex(v3, &v4, *(uint64_t **)(a1 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
    sub_20BFD265C(&v4);
    return *(_QWORD *)(a1 + 24);
  }
  return result;
}

void sub_20C273678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27368C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  int IsPropertyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v12;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v14;
  BOOL IsPrimPath;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  void *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v25;
  int v26;
  int v27;
  uint64_t v28[3];
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a1);
  v8 = a2[1];
  v37 = *a2;
  v38 = v8;
  v9 = **(_QWORD **)(v37 + 16);
  v10 = *(unsigned __int16 *)(v9 + 48 * v8 + 28);
  v31 = v37;
  v32 = v10;
  v33 = v9;
  v34 = v37;
  v11 = 0xFFFFLL;
  v35 = 0xFFFFLL;
  v36 = v9;
  while (v10 != v11 || v31 != v34)
  {
    v12 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(&v31, v5, v6);
    if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted(v12) & 1) != 0
      || pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission(v12) == 1)
    {
      return 1;
    }
    pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromRootToNode(v12, a1, 0, &v29);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v29))
    {
      if (IsPropertyPath)
      {
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(v12);
        v14 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
        *(_OWORD *)v28 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v14);
        while (v28[0] != v28[1])
        {
          sub_20BFD6E54(&v26, &v29);
          sub_20BFD6EA4(&v27, &v30);
          while (1)
          {
            IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
            if (IsPrimPath)
              break;
            if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26))
            {
              v18 = (uint64_t *)sub_20C21A438(v28, v16, v17);
              v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v18);
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&v25, v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
              if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v25) & 1) == 0)
              {
                v21 = sub_20BFE6874(&v25);
                if (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(v21) == 1)
                {
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
                  v2 = 1;
                  break;
                }
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, &v25);
            sub_20BFD3EBC(&v26, (int *)&v25);
            sub_20BFD3F10(&v27, (int *)&v25 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
            sub_20BFD265C(&v25);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
          sub_20BFD265C(&v26);
          if (!IsPrimPath)
            goto LABEL_21;
          sub_20C21A4B4(v28);
        }
      }
      v23 = sub_20C27368C(a1, v12);
      v22 = v23 != 0;
      if (v23)
        v2 = v23;
      else
        v2 = v2;
    }
    else
    {
      v2 = 2;
LABEL_21:
      v22 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_20BFD265C(&v29);
    if (v22)
      return v2;
    sub_20C2049E8(&v31);
    v10 = v32;
    v11 = v35;
  }
  return 0;
}

void sub_20C2738D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C273924(_QWORD *a1)
{
  _QWORD *v2;

  v2 = pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(a1);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(v2 + 2);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(a1 + 4);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(a1 + 6);
  return a1;
}

__n128 sub_20C273968(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &unk_24C52D450;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2739C4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &unk_24C52D450;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_20C273A08(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *(_QWORD *)(a1 + 16), a1 + 24, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
}

uint64_t sub_20C273A50(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52D4C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C273A8C()
{
  return &unk_24C52D4C0;
}

void sub_20C273A98()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "PcpArcTypeRoot");
  sub_20BDDC0E4(__p, "root");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B6C8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpArcTypeInherit");
  sub_20BDDC0E4(__p, "inherit");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B6C8, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpArcTypeRelocate");
  sub_20BDDC0E4(__p, "relocate");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B6C8, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpArcTypeVariant");
  sub_20BDDC0E4(__p, "variant");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B6C8, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpArcTypeReference");
  sub_20BDDC0E4(__p, "reference");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B6C8, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpArcTypePayload");
  sub_20BDDC0E4(__p, "payload");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B6C8, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpArcTypeSpecialize");
  sub_20BDDC0E4(__p, "specialize");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B6C8, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeRoot");
  sub_20BDDC0E4(__p, "root");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeInherit");
  sub_20BDDC0E4(__p, "inherit");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeVariant");
  sub_20BDDC0E4(__p, "variant");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeReference");
  sub_20BDDC0E4(__p, "reference");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypePayload");
  sub_20BDDC0E4(__p, "payload");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeSpecialize");
  sub_20BDDC0E4(__p, "specialize");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeAll");
  sub_20BDDC0E4(__p, "all");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeWeakerThanRoot");
  sub_20BDDC0E4(__p, "weaker than root");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 7, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeStrongerThanPayload");
  sub_20BDDC0E4(__p, "stronger than payload");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpRangeTypeInvalid");
  sub_20BDDC0E4(__p, "invalid");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52D4D8, 9, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C274090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::usd_initialize(const void ***a1)
{
  unint64_t v1;
  uint64_t v2[3];
  uint64_t **v3;
  uint64_t *v4;

  sub_20C104818(v2, a1);
  v1 = atomic_load(&qword_254988308);
  if (v1 != -1)
  {
    v4 = v2;
    v3 = &v4;
    std::__call_once(&qword_254988308, &v3, (void (__cdecl *)(void *))sub_20C2741E8);
  }
  sub_20BDECAB8((uint64_t)v2, (char *)v2[1]);
}

void sub_20C2741BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20BDECAB8((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::USDInitializeConfiguration::AddEntitlement(uint64_t **a1, const void **a2)
{
  return sub_20BE74FC0(a1, a2, (uint64_t)a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::USDInitializeConfiguration::GetEntitlements@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return sub_20C104818(a2, this);
}

void sub_20C2741E8(const void *****a1)
{
  const void ***v1;
  uint64_t has_internal_content;
  pxrInternal__aapl__pxrReserved__ *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  size_t v10;
  std::__fs::filesystem::path *v11;
  void **v12;
  size_t v13;
  std::__fs::filesystem::path *v14;
  void **v15;
  std::__fs::filesystem::path *v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  std::string::size_type v26;
  __int128 v27;
  char *v28;
  pxrInternal__aapl__pxrReserved__ *v29;
  pxrInternal__aapl__pxrReserved__ *v30;
  const char *v31;
  uint64_t *v32;
  pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *v35;
  std::string __p;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  std::__fs::filesystem::path v43;
  std::__fs::filesystem::path v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  std::string v49;
  std::__fs::filesystem::path v50;
  char *v51;
  unint64_t *v52;

  v1 = **a1;
  has_internal_content = os_variant_has_internal_content();
  if ((has_internal_content & 1) == 0)
    has_internal_content = unsetenv("TF_DEBUG");
  v3 = tbb::internal::DoOneTimeInitializations((tbb::internal *)has_internal_content);
  pxrInternal__aapl__pxrReserved__::__usdlibInitFailure = (int)v3;
  if (!(_DWORD)v3)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254988318);
    if ((v4 & 1) == 0)
    {
      v3 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_254988318);
      if ((_DWORD)v3)
      {
        v35 = (pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)operator new(8uLL);
        pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::Tf_RegistryInit(v35, "usd");
        qword_254988310 = (uint64_t)v35;
        __cxa_guard_release(&qword_254988318);
      }
    }
    pxrInternal__aapl__pxrReserved__::Work_InitializeThreading(v3);
    v5 = sub_20C104818((uint64_t *)&v50, v1);
    pxrInternal__aapl__pxrReserved__::Plug_SetAdditionalEntitlements(v5);
    sub_20BDECAB8((uint64_t)&v50, (char *)v50.__pn_.__r_.__value_.__l.__size_);
    memset(&v49, 0, sizeof(v49));
    v6 = dyld_image_path_containing_address();
    dyld_image_header_containing_address();
    v7 = macho_dylib_install_name();
    v8 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6)), "URLByResolvingSymlinksInPath");
    v9 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v7)), "URLByResolvingSymlinksInPath");
    sub_20BDDC0E4(v47, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "URLByDeletingLastPathComponent"), "path"), "cStringUsingEncoding:", 4));
    sub_20BDDC0E4(v45, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "URLByDeletingLastPathComponent"), "path"), "cStringUsingEncoding:", 4));
    if ((v48 & 0x80u) == 0)
      v10 = v48;
    else
      v10 = (size_t)v47[1];
    v11 = &v50;
    sub_20BDF6BDC((uint64_t)&v50, v10 + 5);
    if ((v50.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::__fs::filesystem::path *)v50.__pn_.__r_.__value_.__r.__words[0];
    if (v10)
    {
      if ((v48 & 0x80u) == 0)
        v12 = v47;
      else
        v12 = (void **)v47[0];
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, "/usd/");
    v44 = v50;
    if ((v46 & 0x80u) == 0)
      v13 = v46;
    else
      v13 = (size_t)v45[1];
    v14 = &v50;
    sub_20BDF6BDC((uint64_t)&v50, v13 + 5);
    if ((v50.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::__fs::filesystem::path *)v50.__pn_.__r_.__value_.__r.__words[0];
    if (v13)
    {
      if ((v46 & 0x80u) == 0)
        v15 = v45;
      else
        v15 = (void **)v45[0];
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, "/usd/");
    v43 = v50;
    std::__fs::filesystem::__status(&v44, 0);
    if (v50.__pn_.__r_.__value_.__s.__data_[0] && v50.__pn_.__r_.__value_.__s.__data_[0] != 255)
    {
      v16 = &v44;
    }
    else
    {
      std::__fs::filesystem::__status(&v43, 0);
      if (!v50.__pn_.__r_.__value_.__s.__data_[0] || v50.__pn_.__r_.__value_.__s.__data_[0] == 255)
      {
LABEL_32:
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v49.__r_.__value_.__l.__size_)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v37 = 0;
            v38 = 0;
            v39 = 0;
            sub_20BDDBFAC(&__p, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
            v18 = v41;
            v19 = v42;
            if ((unint64_t)v41 < v42)
            {
              v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *((_QWORD *)v41 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *v18 = v20;
              v41 = (char *)v18 + 24;
LABEL_50:
              pxrInternal__aapl__pxrReserved__::Plug_SetPaths((uint64_t)&v40, (uint64_t)&v37, 1);
              v30 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::aapl_vt_castRegistry_init(v29);
              if (&qword_25473E1E8 < &qword_2547408E8)
              {
                v32 = &qword_25473E1E8;
                do
                {
                  pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::Add((pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)*v32, (const char *)v32[1], (void (*)(void *, void *))v32[2], v31);
                  v32 += 3;
                }
                while (v32 < &qword_2547408E8);
              }
              pxrInternal__aapl__pxrReserved__::__usdlib_internal_mtlx_intialize(v30);
              if (!atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance))
                pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
              if (!atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance))
                pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
              v50.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
              sub_20BDE5038((void ***)&v50);
              v50.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
              sub_20BDE5038((void ***)&v50);
              goto LABEL_58;
            }
            v17 = v40;
LABEL_39:
            v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v17) >> 3);
            v22 = v21 + 1;
            if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v17) >> 3);
            if (2 * v23 > v22)
              v22 = 2 * v23;
            if (v23 >= 0x555555555555555)
              v24 = 0xAAAAAAAAAAAAAAALL;
            else
              v24 = v22;
            v52 = &v42;
            if (v24)
              v25 = (char *)sub_20BDE4FF4((uint64_t)&v42, v24);
            else
              v25 = 0;
            v26 = (std::string::size_type)&v25[24 * v21];
            v50.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
            v50.__pn_.__r_.__value_.__l.__size_ = v26;
            v51 = &v25[24 * v24];
            v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v26 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v26 = v27;
            memset(&__p, 0, sizeof(__p));
            v50.__pn_.__r_.__value_.__r.__words[2] = v26 + 24;
            sub_20BDF34C0(&v40, &v50);
            v28 = v41;
            sub_20BDF3648((uint64_t)&v50);
            v41 = v28;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_50;
          }
        }
        else if (*((_BYTE *)&v49.__r_.__value_.__s + 23))
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          __p = v49;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          goto LABEL_39;
        }
LABEL_58:
        if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__pn_.__r_.__value_.__l.__data_);
        if ((char)v46 < 0)
          operator delete(v45[0]);
        if ((char)v48 < 0)
          operator delete(v47[0]);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        return;
      }
      v16 = &v43;
    }
    std::string::operator=(&v49, &v16->__pn_);
    goto LABEL_32;
  }
}

void sub_20C274774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;

  operator delete(v41);
  __cxa_guard_abort(&qword_254988318);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<BOOL>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C274F18(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C274F18(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleIbEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2749D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(a3, a2, (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 88), 1);
}

double pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, double a2)
{
  double v2;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  _QWORD v13[4];
  char v14;
  unint64_t v15;
  unint64_t v16;

  v2 = a2;
  v15 = 0;
  v16 = 0;
  if (sub_20C27D420(*((double ***)this + 15), &v16, &v15, a2))
  {
    v4 = (uint64_t *)*((_QWORD *)this + 15);
    v6 = v15;
    v5 = v16;
    v7 = *v4;
    v8 = (double *)(*v4 + 24 * v16);
    if (*(_BYTE *)(*v4 + 24 * v15 + 16))
    {
      v9 = v15 + 1;
      if (v15 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v4[1] - v7) >> 3))
      {
        v13[0] = "usd/clip.cpp";
        v13[1] = "_TranslateTimeToInternal";
        v13[2] = 647;
        v13[3] = "Usd_Clip::InternalTime pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal(ExternalTime) const";
        v14 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "i2 + 1 < times->size()", 0);
        v4 = (uint64_t *)*((_QWORD *)this + 15);
      }
      v10 = *(double *)(*v4 + 24 * v9);
      v11 = *v8;
      if (*v8 != v10 && v11 != v2)
        goto LABEL_12;
    }
    else
    {
      v11 = *v8;
      v10 = *(double *)(v7 + 24 * v15);
      if (*v8 != v10 && v11 != v2)
      {
LABEL_12:
        if (v10 == v2)
          return *(double *)(v7 + 24 * v6 + 8);
        else
          return *(double *)(v7 + 24 * v5 + 8)
               + (v2 - v11) * ((*(double *)(v7 + 24 * v6 + 8) - *(double *)(v7 + 24 * v5 + 8)) / (v10 - v11));
      }
    }
    return *(double *)(v7 + 24 * v5 + 8);
  }
  return v2;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t (*v5)(uint64_t *);
  char v6;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  uint64_t Identifier;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  char *v11;
  _QWORD *v12;
  const char *v13;
  char *v14;
  unint64_t v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  std::string __p;
  const char *v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 136))
  {
    *a2 = *((_QWORD *)this + 26);
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20BF1DD04(a2);
  }
  else
  {
    v27 = 0;
    v5 = sub_20BFD2F78((_QWORD *)this + 3);
    if (v6 & 1 | (unint64_t)v5
      || (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/clip.cpp",
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetLayerForClip",
          __p.__r_.__value_.__r.__words[2] = 743,
          v29 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip() const",
          v30 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "sourceLayer", 0) & 1) != 0))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)this);
      Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v7);
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&__p, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
      v24 = 0;
      v25 = 0;
      v23 = &v24;
      pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer((uint64_t *)this + 3, (uint64_t)this + 40, &v23, &v26);
      v10 = v26;
      v9 = v27;
      v26 = 0;
      v27 = v10;
      sub_20BF1D8F4((int)&v27, v9);
      sub_20C103234(&v26);
      sub_20BDE9D48((uint64_t)&v23, v24);
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&__p);
    }
    if (!v27)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/clip.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetLayerForClip";
      __p.__r_.__value_.__r.__words[2] = 757;
      v29 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip() const";
      v30 = 0;
      v12 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v12 = (_QWORD *)*v12;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Unable to open clip layer @%s@", v11, v12);
      v15 = *(_QWORD *)(sub_20C27E260() + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v15)
      {
        v16 = (pxrInternal__aapl__pxrReserved__ *)(v15 + 16);
        if (*(char *)(v15 + 39) < 0)
          v16 = *(pxrInternal__aapl__pxrReserved__ **)v16;
      }
      else
      {
        v16 = (pxrInternal__aapl__pxrReserved__ *)"";
      }
      v17 = (pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
      if (!v17)
        v17 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
      v18 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf(v16, v13, v14, v19);
      v24 = 0;
      v25 = 0;
      v23 = &v24;
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v23, (uint64_t *)&v26);
      v21 = v26;
      v20 = v27;
      v26 = 0;
      v27 = v21;
      sub_20BF1D8F4((int)&v27, v20);
      sub_20C103234(&v26);
      sub_20BDE9D48((uint64_t)&v23, v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::mutex::lock((std::mutex *)((char *)this + 144));
    v22 = *((_QWORD *)this + 26);
    if (!v22)
    {
      *((_QWORD *)this + 26) = v27;
      sub_20BF1DD04((uint64_t *)&v27);
      sub_20BF1D8F4((_DWORD)this + 208, 0);
      *((_BYTE *)this + 136) = 1;
      v22 = *((_QWORD *)this + 26);
    }
    *a2 = v22;
    sub_20BF1DD04(a2);
    std::mutex::unlock((std::mutex *)((char *)this + 144));
    return sub_20C103234(&v27);
  }
}

void sub_20C274E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, int a15, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20C103234(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20C274F18(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = MEMORY[0x24BEDB770];
  v6 = 0;
  v5[0] = &unk_24C52B6E8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2750D4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2750D4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayIbEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2750AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2750D4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DCA8;
  v6 = 0;
  v5[0] = &unk_24C52D530;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<unsigned char>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C275290(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C275290(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleIhEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C275268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C275290(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = MEMORY[0x24BEDB790];
  v6 = 0;
  v5[0] = &unk_24C52D568;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27544C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27544C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayIhEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C275424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27544C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DCD8;
  v6 = 0;
  v5[0] = &unk_24C52D5A0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<int>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C275608(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C275608(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleIiEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2755E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C275608(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = MEMORY[0x24BEDB798];
  v6 = 0;
  v5[0] = off_24C5420E8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2757C4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2757C4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayIiEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27579C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2757C4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DD20;
  v6 = 0;
  v5[0] = &unk_24C52D5F0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<unsigned int>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C275980(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C275980(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleIjEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C275958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C275980(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = MEMORY[0x24BEDB7A0];
  v6 = 0;
  v5[0] = &unk_24C52D628;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C275B3C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C275B3C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayIjEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C275B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C275B3C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DD38;
  v6 = 0;
  v5[0] = &unk_24C52D660;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C275CF8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C275CF8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleIxEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C275CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C275CF8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = MEMORY[0x24BEDB7D0];
  v6 = 0;
  v5[0] = &unk_24C52D698;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C275EB4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C275EB4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayIxEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C275E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C275EB4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DD50;
  v6 = 0;
  v5[0] = &unk_24C52D6D0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<unsigned long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C276070(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C276070(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleIyEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C276048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C276070(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = MEMORY[0x24BEDB7D8];
  v6 = 0;
  v5[0] = &unk_24C52D708;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27622C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27622C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayIyEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C276204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27622C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DD68;
  v6 = 0;
  v5[0] = &unk_24C52D740;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2763E8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2763E8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_8pxr_half4halfEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2763C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2763E8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51BF30;
  v6 = 0;
  v5[0] = &unk_24C52D778;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2765A4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2765A4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_8pxr_half4halfEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27657C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2765A4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DDB0;
  v6 = 0;
  v5[0] = &unk_24C52D7B0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<float>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C276760(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C276760(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleIfEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C276738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C276760(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = MEMORY[0x24BEDB788];
  v6 = 0;
  v5[0] = &unk_24C52D7E8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27691C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27691C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayIfEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2768F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27691C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DD98;
  v6 = 0;
  v5[0] = &unk_24C52D820;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<double>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C276AD8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C276AD8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleIdEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C276AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C276AD8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = MEMORY[0x24BEDB780];
  v6 = 0;
  v5[0] = &unk_24C52D858;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C276C94(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C276C94(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayIdEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C276C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C276C94(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DD80;
  v6 = 0;
  v5[0] = &unk_24C52D890;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double *a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  if ((sub_20C276E68(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (uint64_t)a4, v9) & 1) != 0
    || (v19 = 0.0,
        v20 = 0.0,
        v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17),
        (pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) != 0)&& ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C276E68(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (uint64_t)a4, v13)), (v15 & 1) != 0))
  {
    *a4 = a5 - v9 + *a4;
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_11SdfTimeCodeEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C276E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C276E68(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C525368;
  v6 = 0;
  v5[0] = &unk_24C52D8C8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  double v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  char v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v21;
  uint64_t v22;
  double v23;
  double v24;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v22, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v21);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v21);
  if ((sub_20C277068(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, (uint64_t)a4, v9) & 1) != 0
    || (v23 = 0.0,
        v24 = 0.0,
        v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v21),
        (pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, v9, &v24, &v23) & 1) != 0)&& ((v17 = v24, vabdd_f64(v24, v23) >= 0.000001)? (v19 = (**a3)(a3, &v21, &v22, v9, v24)): (v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v21), v19 = sub_20C277068(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, (uint64_t)a4, v17)), (v19 & 1) != 0))
  {
    if (*(_QWORD *)a4)
    {
      v13 = 0;
      v14 = a5 - v9;
      do
      {
        sub_20C00783C(a4, v11, v12);
        *(double *)(*((_QWORD *)a4 + 4) + 8 * v13) = v14 + *(double *)(*((_QWORD *)a4 + 4) + 8 * v13);
        ++v13;
      }
      while (v13 < *(_QWORD *)a4);
    }
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  sub_20C103234(&v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
  sub_20BFD265C(&v22);
  return v15;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_11SdfTimeCodeEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27703C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C277068(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C525430;
  v6 = 0;
  v5[0] = &unk_24C52D900;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<std::string>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C277224(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C277224(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2771FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C277224(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C516910;
  v6 = 0;
  v5[0] = &unk_24C52D278;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2773E0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2773E0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2773B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2773E0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DDC8;
  v6 = 0;
  v5[0] = &unk_24C52D938;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27759C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27759C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7TfTokenEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C277574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27759C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51BCE0;
  v6 = 0;
  v5[0] = &unk_24C5286B0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C277758(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C277758(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7TfTokenEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C277730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C277758(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DDE0;
  v6 = 0;
  v5[0] = &unk_24C52D970;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C277914(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C277914(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_12SdfAssetPathEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2778EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C277914(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C524DB0;
  v6 = 0;
  v5[0] = &unk_24C52D9A8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C277AD0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C277AD0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_12SdfAssetPathEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C277AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C277AD0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C524DC0;
  v6 = 0;
  v5[0] = &unk_24C52D9E0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C277C8C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C277C8C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_14SdfOpaqueValueEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C277C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C277C8C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C524D80;
  v6 = 0;
  v5[0] = &unk_24C52DA18;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C277E48(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C277E48(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_14SdfOpaqueValueEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C277E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C277E48(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C5257E0;
  v6 = 0;
  v5[0] = &unk_24C52DA50;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C278004(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C278004(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_17SdfPathExpressionEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C277FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C278004(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C524DD8;
  v6 = 0;
  v5[0] = &unk_24C52DA88;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2781C0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2781C0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_17SdfPathExpressionEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C278198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2781C0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C524DE8;
  v6 = 0;
  v5[0] = &unk_24C52DAC0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27837C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27837C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_10GfMatrix2dEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C278354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27837C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51BF90;
  v6 = 0;
  v5[0] = &unk_24C52DAF8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C278538(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C278538(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_10GfMatrix2dEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C278510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C278538(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DB28;
  v6 = 0;
  v5[0] = &unk_24C52DB30;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2786F4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2786F4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_10GfMatrix3dEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2786CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2786F4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51BFC0;
  v6 = 0;
  v5[0] = &unk_24C52DB68;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2788B0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2788B0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_10GfMatrix3dEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C278888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2788B0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DB10;
  v6 = 0;
  v5[0] = &unk_24C52DBA0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C278A6C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C278A6C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_10GfMatrix4dEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C278A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C278A6C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51BFE0;
  v6 = 0;
  v5[0] = &unk_24C52DBD8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C278C28(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C278C28(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_10GfMatrix4dEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C278C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C278C28(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DAF8;
  v6 = 0;
  v5[0] = &unk_24C52DC10;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C278DE4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C278DE4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfQuathEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C278DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C278DE4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C030;
  v6 = 0;
  v5[0] = &unk_24C52DC48;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C278FA0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C278FA0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfQuathEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C278F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C278FA0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DC00;
  v6 = 0;
  v5[0] = &unk_24C52DC80;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27915C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27915C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfQuatfEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C279134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27915C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C020;
  v6 = 0;
  v5[0] = &unk_24C52DCB8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C279318(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C279318(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfQuatfEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2792F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C279318(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DC18;
  v6 = 0;
  v5[0] = &unk_24C52DCF0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C2794D4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C2794D4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfQuatdEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2794AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2794D4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C010;
  v6 = 0;
  v5[0] = &unk_24C52DD28;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C279690(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C279690(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfQuatdEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C279668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C279690(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DC30;
  v6 = 0;
  v5[0] = &unk_24C52DD60;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27984C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27984C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec2iEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C279824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27984C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C140;
  v6 = 0;
  v5[0] = &unk_24C52DD98;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C279A08(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C279A08(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec2iEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C2799E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C279A08(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51D9C0;
  v6 = 0;
  v5[0] = &unk_24C52DDD0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C279BC4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C279BC4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec2hEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C279B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C279BC4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C130;
  v6 = 0;
  v5[0] = &unk_24C52DE08;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C279D80(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C279D80(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec2hEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C279D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C279D80(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DA08;
  v6 = 0;
  v5[0] = &unk_24C52DE40;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C279F3C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C279F3C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec2fEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C279F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C279F3C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C120;
  v6 = 0;
  v5[0] = &unk_24C52DE78;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27A0F8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27A0F8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec2fEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27A0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27A0F8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DA50;
  v6 = 0;
  v5[0] = &unk_24C52DEB0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27A2B4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27A2B4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec2dEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27A28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27A2B4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C110;
  v6 = 0;
  v5[0] = &unk_24C52DEE8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27A470(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27A470(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec2dEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27A448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27A470(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DA98;
  v6 = 0;
  v5[0] = &unk_24C52DF20;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27A62C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27A62C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec3iEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27A604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27A62C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C180;
  v6 = 0;
  v5[0] = &unk_24C52DF58;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27A7E8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27A7E8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec3iEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27A7C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27A7E8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51D9A8;
  v6 = 0;
  v5[0] = &unk_24C52DF90;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27A9A4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27A9A4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec3hEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27A97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27A9A4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C170;
  v6 = 0;
  v5[0] = &unk_24C52DFC8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27AB60(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27AB60(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec3hEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27AB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27AB60(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51D9F0;
  v6 = 0;
  v5[0] = &unk_24C52E000;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27AD1C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27AD1C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec3fEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27ACF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27AD1C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C160;
  v6 = 0;
  v5[0] = &unk_24C52E038;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27AED8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27AED8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec3fEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27AEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27AED8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DA38;
  v6 = 0;
  v5[0] = &unk_24C52E070;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27B094(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27B094(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec3dEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27B06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27B094(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C150;
  v6 = 0;
  v5[0] = &unk_24C52E0A8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27B250(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27B250(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec3dEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27B228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27B250(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DA80;
  v6 = 0;
  v5[0] = &unk_24C52E0E0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27B40C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27B40C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec4iEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27B3E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27B40C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &unk_24C51C1C0;
  v6 = 0;
  v5[0] = &unk_24C52E118;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27B5C8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27B5C8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec4iEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27B5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27B5C8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51D990;
  v6 = 0;
  v5[0] = &unk_24C52E150;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27B784(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27B784(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec4hEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27B75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27B784(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C1B0;
  v6 = 0;
  v5[0] = &unk_24C52E188;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27B940(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27B940(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec4hEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27B918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27B940(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51D9D8;
  v6 = 0;
  v5[0] = &unk_24C52E1C0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27BAFC(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27BAFC(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec4fEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27BAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27BAFC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C1A0;
  v6 = 0;
  v5[0] = &unk_24C52E1F8;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27BCB8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27BCB8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec4fEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27BC90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27BCB8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DA20;
  v6 = 0;
  v5[0] = &unk_24C52E230;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27BE74(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27BE74(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7GfVec4dEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27BE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27BE74(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51C190;
  v6 = 0;
  v5[0] = &unk_24C52E268;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  double v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  double v19;
  double v20;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
  v11 = 1;
  if ((sub_20C27C030(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    v19 = 0.0;
    v20 = 0.0;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v17), v15 = sub_20C27C030(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      v11 = 0;
    }
  }
  sub_20C103234(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtArrayINS_7GfVec4dEEEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27C008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27C030(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  uint64_t result;
  _QWORD v5[3];
  __int16 v6;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
  v5[2] = &stru_24C51DA68;
  v6 = 0;
  v5[0] = &unk_24C52E2A0;
  v5[1] = a3;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, (uint64_t)a2, (uint64_t)v5, a4);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataValue>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  double v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v28, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v27);
  v10 = sub_20C0EEAF8((uint64_t *)&v27);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, (uint64_t)&v28, a4, v9) & 1) != 0)
    goto LABEL_2;
  *(_QWORD *)&v32 = 0;
  *(_QWORD *)&v29 = 0;
  v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v27);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, v9, (double *)&v32, (double *)&v29))goto LABEL_21;
  v23 = *(double *)&v32;
  if (vabdd_f64(*(double *)&v32, *(double *)&v29) < 0.000001)
  {
    v24 = sub_20C0EEAF8((uint64_t *)&v27);
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v24, (uint64_t)&v28, a4, v23)
      && (!a4 || !*(_BYTE *)(a4 + 24)))
    {
      goto LABEL_2;
    }
LABEL_21:
    v25 = 0;
    goto LABEL_22;
  }
  if (((**a3)(a3, &v27, &v28, v9, *(double *)&v32) & 1) == 0)
    goto LABEL_21;
LABEL_2:
  v11 = (const char *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (!strcmp((const char *)(0x800000020CACA312 & 0x7FFFFFFFFFFFFFFFLL), v11))
  {
    **(double **)(a4 + 8) = a5 - v9 + **(double **)(a4 + 8);
  }
  else if (!strcmp((const char *)(0x800000020CACA2D2 & 0x7FFFFFFFFFFFFFFFLL), v11))
  {
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    v12 = *(_QWORD *)(a4 + 8);
    v13 = *(_OWORD *)(v12 + 16);
    v32 = *(_OWORD *)v12;
    v33 = v13;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    v34 = *(_QWORD *)(v12 + 32);
    *(_QWORD *)(v12 + 32) = 0;
    if ((__int128 *)v12 != &v29)
    {
      sub_20BF5618C(v12);
      v14 = v30;
      *(_OWORD *)v12 = v29;
      *(_OWORD *)(v12 + 16) = v14;
      v29 = 0u;
      v30 = 0u;
      *(_QWORD *)(v12 + 32) = v31;
      v31 = 0;
    }
    sub_20BF5618C((uint64_t)&v29);
    v29 = v32;
    v30 = v33;
    v32 = 0u;
    v33 = 0u;
    v31 = v34;
    v34 = 0;
    sub_20BF5618C((uint64_t)&v32);
    if ((_QWORD)v29)
    {
      v17 = 0;
      v18 = a5 - v9;
      do
      {
        sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29, v15, v16);
        *(double *)(v31 + 8 * v17) = v18 + *(double *)(v31 + 8 * v17);
        ++v17;
      }
      while (v17 < (unint64_t)v29);
    }
    v19 = *(_QWORD *)(a4 + 8);
    v20 = *(_OWORD *)(v19 + 16);
    v32 = *(_OWORD *)v19;
    v33 = v20;
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    v34 = *(_QWORD *)(v19 + 32);
    *(_QWORD *)(v19 + 32) = 0;
    if ((__int128 *)v19 != &v29)
    {
      sub_20BF5618C(v19);
      v21 = v30;
      *(_OWORD *)v19 = v29;
      *(_OWORD *)(v19 + 16) = v21;
      v29 = 0u;
      v30 = 0u;
      *(_QWORD *)(v19 + 32) = v31;
      v31 = 0;
    }
    sub_20BF5618C((uint64_t)&v29);
    v29 = v32;
    v30 = v33;
    v32 = 0u;
    v33 = 0u;
    v31 = v34;
    v34 = 0;
    sub_20BF5618C((uint64_t)&v32);
    sub_20BF5618C((uint64_t)&v29);
  }
  v25 = 1;
LABEL_22:
  sub_20C103234(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_20BFD265C(&v28);
  return v25;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_20SdfAbstractDataValueEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27C38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, int a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_20BF5618C((uint64_t)&a18);
  sub_20BF5618C((uint64_t)&a12);
  sub_20C103234(&a9);
  sub_20BFD1A18(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), pxrInternal__aapl__pxrReserved__::VtValue *a4, double a5)
{
  double v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  double *v11;
  double v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  double v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v34;
  uint64_t v35;
  double v36;
  double v37[9];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v35, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v34);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v34);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, v9, a4) & 1) != 0)goto LABEL_2;
  v36 = 0.0;
  v37[0] = 0.0;
  v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v34);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, v9, v37, &v36))goto LABEL_17;
  v14 = v37[0];
  if (vabdd_f64(v37[0], v36) >= 0.000001)
  {
    if (((**a3)(a3, &v34, &v35, v9, v37[0]) & 1) == 0)
      goto LABEL_17;
    goto LABEL_2;
  }
  v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v34);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, v14, a4))
  {
LABEL_17:
    v32 = 0;
    goto LABEL_18;
  }
  if (a4 && sub_20C0AA3E8(a4))
  {
    *((_QWORD *)&v38 + 1) = 0;
    sub_20BF4B5D8(a4, &v38);
    sub_20BF4C2D8((uint64_t)&v38);
    goto LABEL_17;
  }
LABEL_2:
  if (sub_20C1D0F74(a4))
  {
    v11 = (double *)sub_20C1D1088(a4);
    v12 = *v11;
    *v11 = 0.0;
    *(double *)sub_20C1D1088(a4) = a5 - v9 + v12;
  }
  else if (sub_20C1D1114(a4))
  {
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    v16 = sub_20C1D1258(a4);
    v19 = *(_QWORD *)(v16 + 32);
    v20 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    v40 = v19;
    v21 = *(_OWORD *)v16;
    *(_OWORD *)v16 = v38;
    v22 = *(_QWORD *)(v16 + 16);
    v23 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 16) = v20;
    v38 = v21;
    *(_QWORD *)(v16 + 24) = *((_QWORD *)&v39 + 1);
    *(_QWORD *)&v39 = v22;
    *((_QWORD *)&v39 + 1) = v23;
    if ((_QWORD)v21)
    {
      v24 = 0;
      v25 = a5 - v9;
      do
      {
        sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38, v17, v18);
        *(double *)(v40 + 8 * v24) = v25 + *(double *)(v40 + 8 * v24);
        ++v24;
      }
      while (v24 < (unint64_t)v38);
    }
    v26 = sub_20C1D1258(a4);
    v27 = *(_QWORD *)(v26 + 32);
    v28 = v39;
    *(_QWORD *)(v26 + 32) = v40;
    v40 = v27;
    v29 = *(_OWORD *)v26;
    *(_OWORD *)v26 = v38;
    v30 = *(_QWORD *)(v26 + 16);
    v31 = *(_QWORD *)(v26 + 24);
    *(_OWORD *)(v26 + 16) = __PAIR128__(*((unint64_t *)&v39 + 1), v28);
    v38 = v29;
    *(_QWORD *)&v39 = v30;
    *((_QWORD *)&v39 + 1) = v31;
    sub_20BF5618C((uint64_t)&v38);
  }
  v32 = 1;
LABEL_18:
  sub_20C103234(&v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
  sub_20BFD265C(&v35);
  return v32;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8Usd_Clip15QueryTimeSampleINS_7VtValueEEEbRKNS_7SdfPathEdPNS_20Usd_InterpolatorBaseEPT_(a1, this, a3, a4, a5);
}

void sub_20C27C69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdIsClipRelatedField(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v3;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v4;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3)
    v3 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v4)
    v4 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  return (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFF8);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdGetClipRelatedFields@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3)
    v3 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v4 = (unsigned int *)*((_QWORD *)v3 + 1);
  v21 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v21 = v5;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v7)
    v7 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = (unsigned int *)*((_QWORD *)v7 + 2);
  v22 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v22 = v9;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x10uLL);
  v12 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 2;
  do
  {
    v13 = (&v21)[v12];
    *result = v13;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if ((v15 & 1) == 0)
        *result &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v12;
    ++result;
  }
  while (v12 != 2);
  v16 = (unsigned int **)&v23;
  a1[1] = result;
  do
  {
    v18 = (uint64_t)*--v16;
    v17 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
  }
  while (v16 != &v21);
  return result;
}

void sub_20C27C908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a12 & 7) != 0)
  {
    v12 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(exception_object);
}

void sub_20C27CB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  double v30;

  if (v30 != -1.79769313e308 && a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Usd_Clip *pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(pxrInternal__aapl__pxrReserved__::Usd_Clip *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 23);
  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 18) = 850045863;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  return this;
}

void sub_20C27CC4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 32);
  if (v4)
    sub_20C96B36C(v4);
  sub_20C96BA98(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(uint64_t a1, uint64_t *a2, _DWORD *a3, unint64_t a4, __int128 *a5, _DWORD *a6, _QWORD *a7, double a8, double a9, double a10)
{
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v23;
  _QWORD *Layers;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v25;
  _QWORD *v26;
  __int128 v27;
  _BYTE *v28;
  __int128 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v33;
  uint64_t (*v34)(uint64_t *);
  char v35;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v36;
  uint64_t Identifier;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v38;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD **v45;
  _QWORD *v46[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v47;
  unsigned int *v48;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v49;
  _QWORD v50[4];
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = *a2;
  v20 = a2[1];
  *(_QWORD *)(a1 + 8) = v20;
  if (v20)
  {
    v21 = (unsigned int *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v23 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a2);
  Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v23);
  if (a4 < (uint64_t)(Layers[1] - *Layers) >> 3
    || (v50[0] = "usd/clip.cpp",
        v50[1] = "Usd_Clip",
        v50[2] = 109,
        v50[3] = "pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(const PcpLayerStackPtr &, const SdfPath &, size_t,"
                 " const SdfAssetPath &, const SdfPath &, ExternalTime, ExternalTime, ExternalTime, const std::shared_ptr"
                 "<TimeMappings> &)",
        v51 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v50, "clipSourceLayerIndex < clipSourceLayerStack->GetLayers().size()", 0)))
  {
    v25 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a2);
    v26 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v25);
    sub_20C1034E8((uint64_t *)(a1 + 24), (uint64_t *)(*v26 + 8 * a4));
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 40), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v27 = *a5;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 40) = v27;
  }
  v28 = (_BYTE *)(a1 + 64);
  if (*((char *)a5 + 47) < 0)
  {
    sub_20BDDBFAC(v28, *((void **)a5 + 3), *((_QWORD *)a5 + 4));
  }
  else
  {
    v29 = *(__int128 *)((char *)a5 + 24);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a5 + 5);
    *(_OWORD *)v28 = v29;
  }
  sub_20BFD6E54((_DWORD *)(a1 + 88), a6);
  sub_20BFD6EA4((_DWORD *)(a1 + 92), a6 + 1);
  *(_QWORD *)(a1 + 120) = *a7;
  *(double *)(a1 + 96) = a8;
  *(double *)(a1 + 104) = a9;
  *(double *)(a1 + 112) = a10;
  v30 = a7[1];
  *(_QWORD *)(a1 + 128) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *(_QWORD *)(a1 + 144) = 850045863;
  *(_OWORD *)(a1 + 152) = 0u;
  v33 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 208);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  v34 = sub_20BFD2F78((_QWORD *)(a1 + 24));
  if (v35 & 1 | (unint64_t)v34)
  {
    v36 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)a1);
    Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v36);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v50, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
    v46[0] = 0;
    v46[1] = 0;
    v45 = v46;
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer((uint64_t *)(a1 + 24), a1 + 40, (uint64_t)&v45, (uint64_t *)&v47);
    v38 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v48;
    if (v48)
    {
      if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)&v48) + 14))
        v38 = v47;
      else
        v38 = 0;
    }
    v49 = v38;
    sub_20BF1DD04((uint64_t *)&v49);
    v39 = *v33;
    *v33 = v49;
    v49 = 0;
    sub_20BF1D8F4(a1 + 208, v39);
    sub_20C103234(&v49);
    v40 = (uint64_t)v48;
    if (v48)
    {
      v41 = v48 + 2;
      do
      {
        v42 = __ldxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    sub_20BDE9D48((uint64_t)&v45, v46[0]);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v50);
  }
  *(_BYTE *)(a1 + 136) = *(_QWORD *)(a1 + 208) != 0;
  return a1;
}

void sub_20C27CFA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  void **v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  v5 = *(unsigned int **)(v1 + 32);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  sub_20BFD1A18(v2);
  v9 = *(unsigned int **)(v1 + 8);
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetBracketingTimeSamplesForPathFromClipLayer(double ***this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  double v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t BracketingTimeSamplesForPath;
  unint64_t v13;
  unint64_t v14;
  double **v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  double *v30;
  double *v31;
  double **v32;
  unint64_t v33;
  uint64_t v35;
  double *v36;
  unsigned __int8 *v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v44;
  double *v45;
  double v46;
  unint64_t v48;
  unint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v53;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)this, (uint64_t *)&v53);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v52, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 11), 1);
  v10 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)this, a3);
  v50 = 0.0;
  v51 = 0.0;
  v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v53);
  BracketingTimeSamplesForPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, v10, &v51, &v50);
  if ((BracketingTimeSamplesForPath & 1) != 0)
  {
    v48 = 0;
    v49 = 0;
    if (!sub_20C27D420(this[15], &v49, &v48, a3))
    {
      *a4 = v51;
      v29 = v50;
LABEL_65:
      *a5 = v29;
      goto LABEL_66;
    }
    v13 = v48;
    v14 = v49;
    v15 = this[15];
    v16 = 0.0;
    if (((v49 | v48) & 0x80000000) != 0)
    {
      v22 = 1;
    }
    else
    {
      v17 = v48;
      v18 = v49;
      v19 = (uint64_t)&(*v15)[3 * v49 + 2];
      v20 = &(*v15)[3 * v48 + 1];
      v21 = (unsigned __int8 *)v19;
      v22 = 1;
      while (1)
      {
        v23 = *v21;
        v21 -= 24;
        if (!v23)
        {
          v24 = *v20;
          v25 = *(double *)(v19 - 8);
          v26 = *v20 >= v25 ? *(double *)(v19 - 8) : *v20;
          v27 = v25 >= v24 ? *(double *)(v19 - 8) : *v20;
          v28 = v26 > v51 || v51 > v27;
          if (!v28)
            break;
        }
        v28 = v18-- < 1;
        if (!v28)
        {
          v20 -= 3;
          v19 = (uint64_t)v21;
          v28 = v17-- <= 0;
          if (!v28)
            continue;
        }
        goto LABEL_23;
      }
      if (v25 == v24)
      {
        v16 = *(double *)(v19 - 16);
        if (v51 == v50 && v16 != a3 && *(v20 - 1) == a3)
        {
          v22 = 0;
          v16 = *(v20 - 1);
        }
        else
        {
          v22 = 0;
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal((uint64_t)this, v51, v18, v17);
        v16 = v46;
        v22 = 0;
        v15 = this[15];
      }
    }
LABEL_23:
    v32 = v15;
    v30 = *v15;
    v31 = v32[1];
    v33 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
    if (v14 < v33 && v13 < v33)
    {
      v35 = (uint64_t)&v30[3 * v14 + 2];
      v36 = &v30[3 * v13 + 1];
      v37 = (unsigned __int8 *)v35;
      while (1)
      {
        v38 = *v37;
        v37 += 24;
        if (!v38)
        {
          v39 = *v36;
          v40 = *(double *)(v35 - 8);
          v41 = *v36 >= v40 ? *(double *)(v35 - 8) : *v36;
          v42 = v40 >= v39 ? *(double *)(v35 - 8) : *v36;
          if (v41 <= v50 && v50 <= v42)
            break;
        }
        if (++v14 < v33)
        {
          ++v13;
          v36 += 3;
          v35 = (uint64_t)v37;
          if (v13 < v33)
            continue;
        }
        goto LABEL_42;
      }
      if (v40 == v39)
      {
        if (v51 != v50 || (v29 = *(double *)(v35 - 16), v29 != a3))
          v29 = *(v36 - 1);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal((uint64_t)this, v50, v14, v13);
      }
      if (v22)
        v16 = v29;
      goto LABEL_64;
    }
LABEL_42:
    if ((v22 & 1) == 0)
    {
      v29 = v16;
LABEL_64:
      *a4 = v16;
      goto LABEL_65;
    }
    v44 = v30[1];
    v45 = v30;
    if (v51 >= v44)
    {
      if (v51 <= *(v31 - 2))
        goto LABEL_47;
      v45 = v31 - 3;
    }
    v16 = *v45;
LABEL_47:
    if (v50 >= v44)
    {
      v29 = 0.0;
      if (v50 > *(v31 - 2))
        v29 = *(v31 - 3);
    }
    else
    {
      v29 = *v30;
    }
    goto LABEL_64;
  }
LABEL_66:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
  sub_20BFD265C(&v52);
  sub_20C103234(&v53);
  return BracketingTimeSamplesForPath;
}

void sub_20C27D3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C27D420(double **a1, unint64_t *a2, unint64_t *a3, double a4)
{
  double *v4;
  double *v5;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
    return v4 != v5;
  v9 = *a1;
  v10 = a1[1];
  if (*v4 >= a4)
  {
    *a2 = 0;
    v19 = 1;
  }
  else
  {
    v11 = v5 - v4;
    if (*(v5 - 3) > a4)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * v11;
      v13 = *a1;
      do
      {
        v14 = v12 >> 1;
        v15 = &v13[3 * (v12 >> 1)];
        v17 = *v15;
        v16 = v15 + 3;
        v12 += ~(v12 >> 1);
        if (v17 < a4)
          v13 = v16;
        else
          v12 = v14;
      }
      while (v12);
      v18 = 0xAAAAAAAAAAAAAAABLL * (v13 - v4);
      *a3 = v18;
      *a2 = v18 - 1;
      v19 = *a3;
      goto LABEL_13;
    }
    v20 = 0xAAAAAAAAAAAAAAABLL * v11;
    *a2 = v20 - 2;
    v19 = v20 - 1;
  }
  *a3 = v19;
LABEL_13:
  v21 = *a2;
  if (*a2 >= v19)
  {
    v24 = "usd/clip.cpp";
    v25 = "_GetBracketingTimeSegment";
    v26 = 166;
    v27 = "BOOL pxrInternal__aapl__pxrReserved__::_GetBracketingTimeSegment(const Usd_Clip::TimeMappings &, Usd_Clip::Ext"
          "ernalTime, size_t *, size_t *)";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "*m1 < *m2", 0);
    v21 = *a2;
    v9 = *a1;
    v10 = a1[1];
  }
  v22 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
  if (v21 >= v22)
  {
    v24 = "usd/clip.cpp";
    v25 = "_GetBracketingTimeSegment";
    v26 = 167;
    v27 = "BOOL pxrInternal__aapl__pxrReserved__::_GetBracketingTimeSegment(const Usd_Clip::TimeMappings &, Usd_Clip::Ext"
          "ernalTime, size_t *, size_t *)";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "0 <= *m1 && *m1 < times.size()", 0);
    v22 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  }
  if (*a3 >= v22)
  {
    v24 = "usd/clip.cpp";
    v25 = "_GetBracketingTimeSegment";
    v26 = 168;
    v27 = "BOOL pxrInternal__aapl__pxrReserved__::_GetBracketingTimeSegment(const Usd_Clip::TimeMappings &, Usd_Clip::Ext"
          "ernalTime, size_t *, size_t *)";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "0 <= *m2 && *m2 < times.size()", 0);
  }
  return v4 != v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::GetBracketingTimeSamplesForPath(double ***this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  double *v9;
  int BracketingTimeSamplesForPathFromClipLayer;
  unint64_t v11;
  double **v12;
  double *v13;
  double *v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  double *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double *v31;
  double *v32;
  double *v33;
  unint64_t v34;
  double *v35;
  unint64_t v36;
  double *v37;
  double v38;
  double *v39;
  _OWORD v41[2];
  uint64_t v42;

  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v9 = (double *)v41;
  BracketingTimeSamplesForPathFromClipLayer = pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetBracketingTimeSamplesForPathFromClipLayer(this, a2, a3, (double *)v41, (double *)v41 + 1);
  v11 = 2;
  if (!BracketingTimeSamplesForPathFromClipLayer)
    v11 = 0;
  v12 = this[15];
  v13 = *v12;
  v14 = v12[1];
  if (v13 != v14)
  {
    v15 = v11 | 1;
    v16 = *v13;
    if (*v13 >= a3 || (v16 = *(v14 - 3), v16 <= a3))
    {
      *((double *)v41 + v15) = v16;
    }
    else
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * (v14 - v13);
      v18 = v13;
      do
      {
        v19 = v17 >> 1;
        v20 = &v18[3 * (v17 >> 1)];
        v22 = *v20;
        v21 = v20 + 3;
        v17 += ~(v17 >> 1);
        if (v22 < a3)
          v18 = v21;
        else
          v17 = v19;
      }
      while (v17);
      v16 = *v18;
      *((double *)v41 + v15) = *v18;
      if (v16 != a3)
        v16 = *(v18 - 3);
    }
    *(double *)&v41[v11 / 2] = v16;
  }
  if (v13 == v14)
    v23 = v11;
  else
    v23 = v11 + 2;
  v24 = 8 * v23;
  v25 = *((double *)this + 13);
  *((_QWORD *)v41 + v23) = this[12];
  v26 = (double *)((char *)v41 + ((8 * v23) | 8));
  while (v25 <= *v9 && *((double *)this + 14) > *v9)
  {
    ++v9;
    v24 -= 8;
    if (v9 == v26)
      goto LABEL_32;
  }
  if (v9 != v26)
  {
    if (v9 + 1 == v26)
    {
      v26 = v9;
    }
    else
    {
      v27 = 1;
      v26 = v9;
      do
      {
        v28 = v9[v27];
        if (*((double *)this + 13) <= v28 && *((double *)this + 14) > v28)
          *v26++ = v28;
        ++v27;
        v24 -= 8;
      }
      while (v24);
    }
  }
LABEL_32:
  v29 = ((char *)v26 - (char *)v41) >> 3;
  if (v29)
  {
    if (v29 == 1)
    {
      v30 = *(double *)v41;
      goto LABEL_47;
    }
    v31 = (double *)v41 + v29;
    std::__sort<std::__less<double,double> &,double *>();
    v32 = sub_20C27E94C((double *)v41, v31);
    if (v41 != (_OWORD *)v32)
    {
      v30 = *(double *)v41;
      if (*(double *)v41 < a3)
      {
        v30 = *(v32 - 1);
        if (v30 > a3)
        {
          v33 = (double *)v41;
          v34 = ((char *)v32 - (char *)v41) >> 3;
          do
          {
            v35 = v33;
            v36 = v34 >> 1;
            v37 = &v35[v34 >> 1];
            v38 = *v37;
            v34 += ~(v34 >> 1);
            if (*v37 < a3)
            {
              v33 = v37 + 1;
            }
            else
            {
              v34 = v36;
              v33 = v35;
            }
          }
          while (v34);
          v30 = *v33;
          *a5 = *v33;
          if (v30 != a3)
          {
            v39 = v35 - 1;
            if (v38 < a3)
              v39 = v37;
            v30 = *v39;
          }
          goto LABEL_48;
        }
      }
LABEL_47:
      *a5 = v30;
LABEL_48:
      *a4 = v30;
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2;
  _BYTE v4[8];
  _QWORD *v5;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::ListTimeSamplesForPath(this, a2, (uint64_t)v4);
  v2 = v6;
  sub_20BE6100C((uint64_t)v4, v5);
  return v2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_Clip::ListTimeSamplesForPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  double **v5;
  double *v6;
  double *v7;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_ListTimeSamplesForPathFromClipLayer((uint64_t)this, a2, a3);
  v5 = (double **)*((_QWORD *)this + 15);
  v6 = *v5;
  v7 = v5[1];
  while (v6 != v7)
  {
    if (*((double *)this + 13) <= *v6 && *v6 < *((double *)this + 14))
      sub_20C6CC72C((uint64_t **)a3, v6, (uint64_t *)v6);
    v6 += 3;
  }
  return sub_20C6CC72C((uint64_t **)a3, (double *)this + 12, (uint64_t *)this + 12);
}

void sub_20C27D970(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_Clip::_ListTimeSamplesForPathFromClipLayer(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  BOOL v17;
  unint64_t v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v25;
  BOOL v26;
  double v27;
  double v28;
  _QWORD *v29;
  _QWORD **v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t **v40;
  double v41;
  __int128 v42;
  double v43;
  BOOL v44;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v45;
  BOOL v46;
  double v47;
  char v48;
  _QWORD **v49;
  _QWORD *v50;
  uint64_t v51;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v45);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v45);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v42, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath((uint64_t *)&v49, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
  sub_20BFD265C(&v42);
  sub_20C103234(&v45);
  v7 = *(uint64_t **)(a1 + 120);
  if (*v7 == v7[1])
  {
    v31 = (uint64_t *)(a3 + 8);
    sub_20BE6100C(a3, *(_QWORD **)(a3 + 8));
    v32 = v50;
    *(_QWORD *)a3 = v49;
    *(_QWORD *)(a3 + 8) = v32;
    v33 = v51;
    *(_QWORD *)(a3 + 16) = v51;
    if (v33)
    {
      v32[2] = v31;
      v49 = &v50;
      v50 = 0;
      v51 = 0;
      v34 = *(uint64_t **)a3;
    }
    else
    {
      *(_QWORD *)a3 = v31;
      v34 = (uint64_t *)(a3 + 8);
    }
    v35 = (uint64_t *)(a3 + 8);
    if (v32)
    {
      v35 = (uint64_t *)(a3 + 8);
      do
      {
        v36 = v32 + 1;
        if (*((double *)v32 + 4) >= *(double *)(a1 + 104))
        {
          v36 = v32;
          v35 = v32;
        }
        v32 = (_QWORD *)*v36;
      }
      while (*v36);
    }
    sub_20C27E9B0((uint64_t **)a3, v34, v35);
    v37 = *v31;
    v38 = (uint64_t *)(a3 + 8);
    if (*v31)
    {
      v38 = (uint64_t *)(a3 + 8);
      do
      {
        v39 = (uint64_t *)(v37 + 8);
        if (*(double *)(v37 + 32) >= *(double *)(a1 + 112))
        {
          v39 = (uint64_t *)v37;
          v38 = (uint64_t *)v37;
        }
        v37 = *v39;
      }
      while (*v39);
    }
    sub_20C27E9B0((uint64_t **)a3, v38, (uint64_t *)(a3 + 8));
  }
  else
  {
    v40 = (uint64_t **)a3;
    v8 = *(double *)(a1 + 112);
    v45 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 104);
    v46 = fabs(*(double *)&v45) != INFINITY;
    v47 = v8;
    v48 = 0;
    v9 = (uint64_t)v49;
    if (v49 != &v50)
    {
      v10 = *v7;
      do
      {
        if (v7[1] - v10 != 24)
        {
          v11 = 0;
          v12 = 0;
          v13 = *(double *)(v9 + 32);
          do
          {
            v14 = (double *)(v10 + v11);
            v15 = (double *)(v10 + v11 + 24);
            v16 = *v15;
            *(_QWORD *)&v42 = *(_QWORD *)(v10 + v11);
            BYTE8(v42) = fabs(*(double *)&v42) != INFINITY;
            v43 = v16;
            v44 = fabs(v16) != INFINITY;
            v17 = sub_20BF06DF4(&v42, (uint64_t)&v45);
            v18 = v12 + 1;
            if (*(_BYTE *)(v10 + v11 + 16))
              v19 = 0;
            else
              v19 = v17;
            if (v19)
            {
              v20 = *(double *)(v10 + v11 + 32);
              v21 = *(double *)(v10 + v11 + 8);
              v22 = v20 >= v21 ? *(double *)(v10 + v11 + 8) : *(double *)(v10 + v11 + 32);
              if (v22 <= v13)
              {
                v23 = v21 >= v20 ? *(double *)(v10 + v11 + 8) : *(double *)(v10 + v11 + 32);
                if (v13 <= v23)
                {
                  if (v21 == v20)
                  {
                    v24 = *v14;
                    v25 = v45;
                    if (*(double *)&v45 < *v14 || (*(double *)&v45 == *v14 ? (v26 = !v46) : (v26 = 1), !v26))
                    {
                      if (v47 > v24 || v47 == v24 && v48)
                      {
                        sub_20C6CC72C(v40, (double *)(v10 + v11), (uint64_t *)(v10 + v11));
                        v25 = v45;
                      }
                    }
                    v27 = *v15;
                    if ((*(double *)&v25 < *v15 || *(double *)&v25 == *v15 && v46) && (v47 > v27 || v47 == v27 && v48))
                      sub_20C6CC72C(v40, (double *)(v10 + v11 + 24), (uint64_t *)(v10 + v11 + 24));
                  }
                  else
                  {
                    v41 = 0.0;
                    pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal(a1, v13, v12, v12 + 1);
                    v41 = v28;
                    if ((*(double *)&v45 < v28 || *(double *)&v45 == v28 && v46) && (v47 > v28 || v47 == v28 && v48))
                      sub_20C6CC72C(v40, &v41, (uint64_t *)&v41);
                  }
                }
              }
            }
            v7 = *(uint64_t **)(a1 + 120);
            v10 = *v7;
            v11 += 24;
            ++v12;
          }
          while (v18 < 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3) - 1);
        }
        v29 = *(_QWORD **)(v9 + 8);
        if (v29)
        {
          do
          {
            v30 = (_QWORD **)v29;
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = *(_QWORD ***)(v9 + 16);
            v26 = *v30 == (_QWORD *)v9;
            v9 = (uint64_t)v30;
          }
          while (!v26);
        }
        v9 = (uint64_t)v30;
      }
      while (v30 != &v50);
    }
  }
  sub_20BE6100C((uint64_t)&v49, v50);
}

void sub_20C27DD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_20BE6100C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal(uint64_t this, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  char v11;

  v5 = this;
  v6 = **(_QWORD **)(this + 120);
  if (*(_BYTE *)(v6 + 24 * a3 + 16))
  {
    v7 = "usd/clip.cpp";
    v8 = "_TranslateTimeToExternal";
    v9 = 689;
    v10 = "Usd_Clip::ExternalTime pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal(InternalTime, size"
          "_t, size_t) const";
    v11 = 0;
    this = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v7, "!m1.isJumpDiscontinuity", 0);
  }
  if (*(_BYTE *)(v6 + 24 * a4 + 16))
  {
    if (a4 + 1 >= 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 120) + 8) - **(_QWORD **)(v5 + 120)) >> 3))
    {
      v7 = "usd/clip.cpp";
      v8 = "_TranslateTimeToExternal";
      v9 = 713;
      v10 = "Usd_Clip::ExternalTime pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal(InternalTime, si"
            "ze_t, size_t) const";
      v11 = 0;
      return pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v7, "i2 + 1 < times->size()", 0);
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::HasField(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t HasField;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v10);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v9, a2, (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 88), 1);
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_20BFD265C(&v9);
  sub_20C103234(&v10);
  return HasField;
}

void sub_20C27E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::HasAuthoredTimeSamples(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t NumTimeSamplesForPath;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v8);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v7, a2, (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 88), 1);
  NumTimeSamplesForPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  sub_20BFD265C(&v7);
  sub_20C103234(&v8);
  return NumTimeSamplesForPath != 0;
}

void sub_20C27E0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::IsBlocked(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  uint64_t v6;
  double v7;
  unsigned int TimeSample;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  _QWORD v12[3];
  __int16 v13;

  v12[2] = &stru_24C527B78;
  v13 = 0;
  v12[0] = &unk_24C52D4F8;
  v12[1] = 0;
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v11);
  v6 = sub_20C0EEAF8((uint64_t *)&v11);
  v7 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal(this, a3);
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v6, (uint64_t)a2, (uint64_t)v12, v7);
  if ((_BYTE)v13)
    v9 = TimeSample;
  else
    v9 = 0;
  sub_20C103234(&v11);
  return v9;
}

void sub_20C27E194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_Clip::GetPropertyAtPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v9);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v9);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v8, a2, (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 88), 1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(a3, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_20BFD265C(&v8);
  return sub_20C103234(&v9);
}

void sub_20C27E238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

unint64_t sub_20C27E260()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  const char *v24;
  void **v25;
  char v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_254988320);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "dummy_clip", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "dummy_clip.%s", v24);
    v3 = *(unsigned int **)v0;
    v27 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v27 = v4;
    }
    v6 = (unsigned int *)*v2;
    v28 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v28 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v25 = (void **)(v0 + 16);
    v26 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v27)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v29;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v27);
    while (!__ldaxr(&qword_254988320))
    {
      if (!__stlxr((unint64_t)v0, &qword_254988320))
        return (unint64_t)v0;
    }
    __clrex();
    v25 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v25);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_254988320);
  }
  return (unint64_t)v0;
}

void sub_20C27E470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  uint64_t Identifier;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  const char *v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  const char *v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v14);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v14);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v3);
  v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C27E260();
  if ((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  if (*((char *)EmptyString + 23) >= 0)
    v7 = (const char *)EmptyString;
  else
    v7 = (const char *)*EmptyString;
  v8 = *(char *)(Identifier + 23);
  if (v8 >= 0)
    v9 = *(unsigned __int8 *)(Identifier + 23);
  else
    v9 = *(_QWORD *)(Identifier + 8);
  v10 = strlen(v7);
  if (v9 >= v10
    && ((v11 = v10, v8 >= 0) ? (v12 = (const char *)Identifier) : (v12 = *(const char **)Identifier),
        !strncmp(v12, v7, v11)))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    sub_20C1034E8(a2, (uint64_t *)&v14);
  }
  return sub_20C103234(&v14);
}

void sub_20C27E5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen@<X0>(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **this@<X0>, uint64_t *a2@<X8>)
{
  if (*((_BYTE *)this + 136))
    return pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer((pxrInternal__aapl__pxrReserved__::Usd_Clip *)this, a2);
  *a2 = 0;
  a2[1] = 0;
  return this;
}

pxrInternal__aapl__pxrReserved__::UsdTokensType *sub_20C27E60C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdTokensType *result;
  void *v4;

  result = sub_20C27E654();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C27E694((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdTokensType *sub_20C27E654()
{
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::UsdTokensType::UsdTokensType(v0);
  return v0;
}

void sub_20C27E680(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27E694(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  void **v62;

  v62 = (void **)(a1 + 160);
  sub_20BEEB2B8(&v62);
  v2 = *(_QWORD *)(a1 + 152);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 144);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 136);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 128);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 120);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 112);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 104);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 96);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 88);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 80);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 72);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 64);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 56);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 48);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 40);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 32);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 24);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 16);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 8);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v59 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
  return a1;
}

double *sub_20C27E94C(double *a1, double *a2)
{
  double *result;
  double *v4;
  double v5;
  double v6;
  double *v7;
  double v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = *v4;
      if (v5 != *v4)
      {
        v7[1] = v8;
        ++v7;
        v5 = v8;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

uint64_t *sub_20C27E9B0(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = sub_20BE10B80(a1, v4);
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t sub_20C27EA0C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t result;

  if (sub_20C0AA3E8(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    goto LABEL_4;
  }
  result = sub_20C0AA3E8(a2);
  if ((_DWORD)result)
  {
LABEL_4:
    result = 1;
    *(_BYTE *)(a1 + 24) = 1;
    return result;
  }
  *(_BYTE *)(a1 + 25) = 1;
  return result;
}

uint64_t sub_20C27EA74(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C0AA3E8(a2))
  {
    sub_20C27EAC8(a2);
LABEL_3:
    result = 1;
    *(_BYTE *)(a1 + 24) = 1;
    return result;
  }
  result = sub_20C0AA3E8(a2);
  if ((_DWORD)result)
    goto LABEL_3;
  *(_BYTE *)(a1 + 25) = 1;
  return result;
}

_QWORD *sub_20C27EAC8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  BOOL v4;

  result = sub_20C27EB10(a1);
  v3 = a1[1];
  if (v3)
    v4 = (a1[1] & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

_QWORD *sub_20C27EB10(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *sub_20C27EB9C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C27EBE4();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType::~UsdUsdaFileFormatTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *sub_20C27EBE4()
{
  pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType::UsdUsdaFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C27EC10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27EC24(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C07FEB8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C27ED6C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27ECA4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C07FEB8(a2))
  {
    sub_20C27EE24(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C27ED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27ED6C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C27EE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27EE24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C07FF98(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C27EEBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27EED4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20BFECAA0(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_BYTE **)(a1 + 8) = *(_BYTE *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27EF54(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20BFECAA0(a2))
  {
    **(_BYTE **)(a1 + 8) = sub_20C27EFB8(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27EFB8(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C1CFFB0(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

uint64_t sub_20C27F00C(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF65A7C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C27F154(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27F08C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF65A7C(a2))
  {
    sub_20C27F20C(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C27F138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27F154(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C27F1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27F20C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF65ECC(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C27F2A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27F2BC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20BFB2CEC(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27F33C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20BFB2CEC(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_20C27F3A0(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27F3A0(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C1D00F8(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

uint64_t sub_20C27F3F4(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF64C0C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C03150C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27F474(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF64C0C(a2))
  {
    sub_20C27F53C(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C27F520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27F53C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF654AC(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C27F5D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27F5EC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C1D02C8(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27F66C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C1D02C8(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_20C27F6D0(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27F6D0(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C1D0300(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

uint64_t sub_20C27F724(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF6374C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C032F5C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27F7A4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF6374C(a2))
  {
    sub_20C27F86C(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C27F850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27F86C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF649DC(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C27F904(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27F91C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C0495EC(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27F99C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C0495EC(a2))
  {
    **(_QWORD **)(a1 + 8) = sub_20C27FA00(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27FA00(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C1D0580(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

uint64_t sub_20C27FA54(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C032314((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C03234C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27FAD4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C032314(a2))
  {
    sub_20C27FB9C(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C27FB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27FB9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C080408(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C27FC34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27FC4C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C1D0800(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27FCCC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C1D0800(a2))
  {
    **(_QWORD **)(a1 + 8) = sub_20C27FD30(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27FD30(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C1D0838(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

uint64_t sub_20C27FD84(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C033AF4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C033B2C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27FE04(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C033AF4(a2))
  {
    sub_20C27FECC(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C27FEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27FECC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D0990(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C27FF64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C27FF7C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C1D0B64(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_WORD **)(a1 + 8) = *(_WORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C27FFFC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C1D0B64(a2))
  {
    **(_WORD **)(a1 + 8) = sub_20C280060(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C280060(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(unsigned __int16 *)sub_20C1D0B9C(a1);
  v3 = a1[1];
  if (v3)
    v4 = (a1[1] & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(_QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v2;
}

uint64_t sub_20C2800B0(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF560D4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C2801F8(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C280130(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF560D4(a2))
  {
    sub_20C2802B0(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C2801DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2801F8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C280294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2802B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF575B4(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C280348(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C280360(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20BF7B9F8(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2803E0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20BF7B9F8(a2))
  {
    **(float **)(a1 + 8) = sub_20BF7BA70(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C280444(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF565F0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20BF9B1F8(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2804C4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF565F0(a2))
  {
    sub_20BF9BCFC(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C280570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28058C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20BF78EEC(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28060C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20BF78EEC(a2))
  {
    **(double **)(a1 + 8) = sub_20BF7B1C4(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C280670(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF57C2C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20BF985B0(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2806F0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF57C2C(a2))
  {
    sub_20BF99110(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C28079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2807B8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C1D0F74(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C280838(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C1D0F74(a2))
  {
    **(double **)(a1 + 8) = sub_20C28089C(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

double sub_20C28089C(_QWORD *a1)
{
  double *v2;
  double v3;
  uint64_t v4;
  BOOL v5;

  v2 = (double *)sub_20C1D1088(a1);
  v3 = *v2;
  *v2 = 0.0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

uint64_t sub_20C2808F8(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C1D1114((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C280A40(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C280978(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C1D1114(a2))
  {
    sub_20C280AF8(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C280A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C280A40(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C280ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C280AF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D1258(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C280B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C280BA8(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BFED418((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C0346C4(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C280C28(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BFED418(a2))
  {
    sub_20C280CF0(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20C008280((_QWORD *)v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20C008280(&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C280CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C008280(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C280CF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C080874(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C280D88(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C008280(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C280DA0(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BFED450((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C034C28(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C280E20(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BFED450(a2))
  {
    sub_20C280EE8(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20C00918C((_QWORD *)v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20C00918C(&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C280ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00918C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C280EE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D18FC(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C280F80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C00918C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C280F98(uint64_t a1, const std::string **a2)
{
  const std::string *v4;
  const std::string *v5;
  std::string *v6;
  uint64_t result;

  if (sub_20BFED488((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                + 168))(a2);
    else
      v5 = *a2;
    v6 = *(std::string **)(a1 + 8);
    std::string::operator=(v6, v5);
    std::string::operator=(v6 + 1, v5 + 1);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28102C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  int v8;
  __int128 v9;
  uint64_t result;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if (sub_20BFED488(a2))
  {
    sub_20C281110((uint64_t)a2, (uint64_t)__p);
    v4 = *(_QWORD *)(a1 + 8);
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    v5 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 16) = v12;
    *(_OWORD *)v4 = v5;
    HIBYTE(v12) = 0;
    LOBYTE(__p[0]) = 0;
    v6 = (void **)(v4 + 24);
    if (*(char *)(v4 + 47) < 0)
    {
      operator delete(*v6);
      v8 = SHIBYTE(v12);
      v9 = v13;
      *(_QWORD *)(v4 + 40) = v14;
      *(_OWORD *)v6 = v9;
      HIBYTE(v14) = 0;
      LOBYTE(v13) = 0;
      if (v8 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v7 = v13;
      *(_QWORD *)(v4 + 40) = v14;
      *(_OWORD *)v6 = v7;
    }
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

__int128 *sub_20C281110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)a2);
  result = sub_20C1D1C98((__int128 **)a1);
  v5 = *((_QWORD *)result + 2);
  v6 = *result;
  v7 = *(_QWORD *)(a2 + 16);
  *result = *(_OWORD *)a2;
  *((_QWORD *)result + 2) = v7;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v8 = *((_QWORD *)result + 5);
  v9 = *(__int128 *)((char *)result + 24);
  v10 = *(_QWORD *)(a2 + 40);
  *(__int128 *)((char *)result + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)result + 5) = v10;
  *(_OWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 40) = v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 && (*(_QWORD *)(a1 + 8) & 3) != 3)
    result = (__int128 *)(*(uint64_t (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_20C2811B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE930F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2811C4(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BFED500((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C28130C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C281244(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BFED500(a2))
  {
    sub_20C2813C4(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20C00A724((_QWORD *)v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20C00A724(&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C2812F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00A724(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28130C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20C00A724((_QWORD *)a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20C00A724(&v9);
  }
  return a1;
}

void sub_20C2813A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00A724(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2813C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D1DF4(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C28145C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C00A724(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C281474(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t result;

  if (sub_20BFEA778(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2814E4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20BFEA778(a2))
  {
    sub_20C281540(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

_QWORD *sub_20C281540(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  BOOL v4;

  result = sub_20C1D2060(a1);
  v3 = a1[1];
  if (v3)
    v4 = (a1[1] & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

uint64_t sub_20C281588(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C1D20EC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C2816D0(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C281608(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C1D20EC(a2))
  {
    sub_20C281788(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C2816B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2816D0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C28176C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C281788@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D2230(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C281820(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C281838(uint64_t a1, const std::string **a2)
{
  const std::string *v4;
  const std::string *v5;
  std::string *v6;
  uint64_t result;

  if (sub_20BFEFCF0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                + 168))(a2);
    else
      v5 = *a2;
    v6 = *(std::string **)(a1 + 8);
    if (v6 != v5)
    {
      sub_20BE8B37C((char *)v6, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_, (uint64_t)(v5->__r_.__value_.__l.__size_ - v5->__r_.__value_.__r.__words[0]) >> 2);
      sub_20C147074((uint64_t)&v6[1], (uint64_t)v5[1].__r_.__value_.__l.__data_, v5[1].__r_.__value_.__l.__size_, (uint64_t)(v5[1].__r_.__value_.__l.__size_ - v5[1].__r_.__value_.__r.__words[0]) >> 5);
      sub_20C14723C((uint64_t)&v6[2], (uint64_t)v5[2].__r_.__value_.__l.__data_, v5[2].__r_.__value_.__l.__size_, (uint64_t)(v5[2].__r_.__value_.__l.__size_ - v5[2].__r_.__value_.__r.__words[0]) >> 6);
    }
    std::string::operator=(v6 + 3, v5 + 3);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C281904(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void **v6;
  __int128 v7;
  uint64_t result;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void **v17;

  if (sub_20BFEFCF0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C281A48(a2, __p);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(void **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(v4 + 8) = v5;
      operator delete(v5);
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    *(_OWORD *)v4 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 16) = v10;
    __p[0] = 0;
    __p[1] = 0;
    v10 = 0;
    sub_20C00BC18((void **)(v4 + 24));
    *(_OWORD *)(v4 + 24) = v11;
    *(_QWORD *)(v4 + 40) = v12;
    v11 = 0uLL;
    v12 = 0;
    sub_20C00BCC0((void **)(v4 + 48));
    *(_OWORD *)(v4 + 48) = v13;
    *(_QWORD *)(v4 + 64) = v14;
    v13 = 0uLL;
    v14 = 0;
    v6 = (void **)(v4 + 72);
    if (*(char *)(v4 + 95) < 0)
      operator delete(*v6);
    v7 = v15;
    *(_QWORD *)(v4 + 88) = v16;
    *(_OWORD *)v6 = v7;
    HIBYTE(v16) = 0;
    LOBYTE(v15) = 0;
    v17 = (void **)&v13;
    sub_20C00E25C(&v17);
    v17 = (void **)&v11;
    sub_20C00D5A8(&v17);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C281A48(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t v4;
  BOOL v5;

  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v3.n128_f64[0] = sub_20C1D25C4(a1, (uint64_t)a2);
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t *, __n128))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1, v3);
  a1[1] = 0;
}

void sub_20C281AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00BBB0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C281ABC(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BFEFDCC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C281C04(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C281B3C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BFEFDCC(a2))
  {
    sub_20C281CBC(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20C00E910((_QWORD *)v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20C00E910(&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C281BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E910(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C281C04(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20C00E910((_QWORD *)a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20C00E910(&v9);
  }
  return a1;
}

void sub_20C281CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E910(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C281CBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1939F0(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C281D54(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C00E910(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C281D6C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t result;

  if (sub_20BFA8B44(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v5 = *(_OWORD **)a2;
    v6 = *(_OWORD **)(a1 + 8);
    v7 = v5[1];
    *v6 = *v5;
    v6[1] = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C281DEC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (sub_20BFA8B44(a2))
  {
    v4 = sub_20BFA8BCC((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(double *)v5 = v4;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 24) = v8;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C281E54(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C1D2A38((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C281F9C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C281ED4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C1D2A38(a2))
  {
    sub_20C282054(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C281F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C281F9C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C282038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282054@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D2B3C(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C2820EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282104(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;

  if (sub_20BFAB53C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    v6 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v7 = *(_OWORD *)(v5 + 16);
    v8 = *(_OWORD *)(v5 + 32);
    v9 = *(_OWORD *)(v5 + 48);
    *(_QWORD *)(v6 + 64) = *(_QWORD *)(v5 + 64);
    *(_OWORD *)(v6 + 32) = v8;
    *(_OWORD *)(v6 + 48) = v9;
    *(_OWORD *)(v6 + 16) = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28219C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  _OWORD v9[4];
  uint64_t v10;

  if (sub_20BFAB53C(a2))
  {
    sub_20BFAB5E8(a2, (uint64_t)v9);
    v4 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)v4 = v9[0];
    v5 = v9[1];
    v6 = v9[2];
    v7 = v9[3];
    *(_QWORD *)(v4 + 64) = v10;
    *(_OWORD *)(v4 + 32) = v6;
    *(_OWORD *)(v4 + 48) = v7;
    *(_OWORD *)(v4 + 16) = v5;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28222C(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C1D2EA4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C282374(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2822AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C1D2EA4(a2))
  {
    sub_20C28242C(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C282358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282374(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C282410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28242C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D2FA8(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C2824C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2824DC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;

  if (sub_20BFADE60(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(a2);
    else
      v5 = *(__int128 **)a2;
    v6 = *(_OWORD **)(a1 + 8);
    v7 = *v5;
    v8 = v5[1];
    v9 = v5[3];
    v6[2] = v5[2];
    v6[3] = v9;
    *v6 = v7;
    v6[1] = v8;
    v10 = v5[4];
    v11 = v5[5];
    v12 = v5[7];
    v6[6] = v5[6];
    v6[7] = v12;
    v6[4] = v10;
    v6[5] = v11;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C282574(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  __int128 v12[8];

  if (sub_20BFADE60(a2))
  {
    sub_20BFADF0C((uint64_t)a2, v12);
    v4 = *(__int128 **)(a1 + 8);
    v5 = v12[0];
    v6 = v12[1];
    v7 = v12[3];
    v4[2] = v12[2];
    v4[3] = v7;
    *v4 = v5;
    v4[1] = v6;
    v8 = v12[4];
    v9 = v12[5];
    v10 = v12[7];
    v4[6] = v12[6];
    v4[7] = v10;
    v4[4] = v8;
    v4[5] = v9;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C282600(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5FDC8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C282748(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C282680(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5FDC8(a2))
  {
    sub_20C282800(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C28272C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282748(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C2827E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282800@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF60354(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C282898(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2828B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C1D33A8(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C282930(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C1D33A8(a2))
  {
    **(_QWORD **)(a1 + 8) = sub_20C282994(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C282994(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *sub_20C1D347C(a1);
  v3 = a1[1];
  if (v3)
    v4 = (a1[1] & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(_QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v2;
}

uint64_t sub_20C2829E4(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF611B8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C282B2C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C282A64(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF611B8(a2))
  {
    sub_20C282BE4(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C282B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282B2C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C282BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282BE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF62668(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C282C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282C94(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t result;

  if (sub_20BFB08AC(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v5 = *(_OWORD **)a2;
    *(_OWORD *)*(_QWORD *)(a1 + 8) = *v5;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C282D14(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  float v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  if (sub_20BFB08AC(a2))
  {
    v4 = sub_20C282D7C((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(float *)v5 = v4;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 12) = v8;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

float sub_20C282D7C(uint64_t a1)
{
  float v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(float *)sub_20C1D368C((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

uint64_t sub_20C282DEC(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF61604((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C282F34(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C282E6C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF61604(a2))
  {
    sub_20C282FEC(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C282F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282F34(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C282FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C282FEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF61B7C(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C283084(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28309C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t result;

  if (sub_20BFAF48C(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v5 = *(_OWORD **)a2;
    v6 = *(_OWORD **)(a1 + 8);
    v7 = v5[1];
    *v6 = *v5;
    v6[1] = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28311C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (sub_20BFAF48C(a2))
  {
    v4 = sub_20C283184((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(double *)v5 = v4;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 24) = v8;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

double sub_20C283184(uint64_t a1)
{
  double v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(double *)sub_20C1D38A0((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

uint64_t sub_20C2831F4(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF62CAC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C28333C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283274(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF62CAC(a2))
  {
    sub_20C2833F4(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C283320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28333C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C2833D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2833F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF63224(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C28348C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2834A4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C1D3B24(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283524(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C1D3B24(a2))
  {
    **(_QWORD **)(a1 + 8) = sub_20C283588(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283588(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *sub_20C1D3B5C(a1);
  v3 = a1[1];
  if (v3)
    v4 = (a1[1] & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(_QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v2;
}

uint64_t sub_20C2835D8(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C1D3BE8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C283720(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283658(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C1D3BE8(a2))
  {
    sub_20C2837D8(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C283704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C283720(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C2837BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2837D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D3CEC(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C283870(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C283888(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C1D3EC0(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283908(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C1D3EC0(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_20C28396C(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28396C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(unsigned int *)sub_20C1D3EF8(a1);
  v3 = a1[1];
  if (v3)
    v4 = (a1[1] & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(_QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v2;
}

uint64_t sub_20C2839BC(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5865C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C283B04(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283A3C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5865C(a2))
  {
    sub_20C283BBC(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C283AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C283B04(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C283BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C283BBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF59A28(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C283C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C283C6C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20BF9F188(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283CEC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  float v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  if (sub_20BF9F188(a2))
  {
    v4 = sub_20BF9F20C(a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(float *)v5 = v4;
    *(_DWORD *)(v5 + 4) = v6;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283D50(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF58AAC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C283E98(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C283DD0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF58AAC(a2))
  {
    sub_20C283F50(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C283E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C283E98(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C283F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C283F50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF58FD4(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C283FE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284000(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t result;

  if (sub_20BF9D818(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v5 = *(_OWORD **)a2;
    *(_OWORD *)*(_QWORD *)(a1 + 8) = *v5;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284080(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (sub_20BF9D818(a2))
  {
    v4 = sub_20BF9D89C((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(double *)v5 = v4;
    *(_QWORD *)(v5 + 8) = v6;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2840E4(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5A0F8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C28422C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284164(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5A0F8(a2))
  {
    sub_20C2842E4(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C284210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28422C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C2842C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2842E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF5A620(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C28437C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284394(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (sub_20C1D440C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)v5;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(v5 + 8);
    *(_QWORD *)v6 = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28441C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  if (sub_20C1D440C(a2))
  {
    v4 = sub_20C284484((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v5 = v4;
    *(_DWORD *)(v5 + 8) = v6;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)sub_20C1D453C((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

uint64_t sub_20C2844E4(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C1D45CC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C28462C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284564(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C1D45CC(a2))
  {
    sub_20C2846E4(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C284610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28462C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C2846C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2846E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D46D0(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C28477C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284794(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v2 = (uint64_t)a2;
  if (sub_20C1D48C0(a2))
  {
    v4 = *(_QWORD *)(v2 + 8);
    if ((v4 & 4) != 0)
      v2 = (*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_DWORD *)v2;
    *(_WORD *)(v5 + 4) = *(_WORD *)(v2 + 4);
    *(_DWORD *)v5 = v6;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28481C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (sub_20C1D48C0(a2))
  {
    v4 = sub_20C284888(a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v5 = v4;
    *(_WORD *)(v5 + 4) = WORD2(v4);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

unint64_t sub_20C284888(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C1D48F8(a1);
  v3 = *(unsigned int *)v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

uint64_t sub_20C2848E0(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5AC4C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C284A28(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284960(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5AC4C(a2))
  {
    sub_20C284AE0(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C284A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284A28(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C284AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284AE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF5C0C4(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C284B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284B90(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (sub_20BFA2E0C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)v5;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(v5 + 8);
    *(_QWORD *)v6 = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284C18(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  float v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;

  if (sub_20BFA2E0C(a2))
  {
    v4 = sub_20BFA2E94((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(float *)v5 = v4;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(v5 + 8) = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284C80(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5B118((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C284DC8(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284D00(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5B118(a2))
  {
    sub_20C284E80(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C284DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284DC8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C284E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284E80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF5B5F4(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C284F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C284F30(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t result;

  if (sub_20BFA0FB4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
    *(_OWORD *)v6 = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C284FB8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (sub_20BFA0FB4(a2))
  {
    v4 = sub_20BFA103C((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(double *)v5 = v4;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285020(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5C88C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C285168(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2850A0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5C88C(a2))
  {
    sub_20C285220(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C28514C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C285168(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C285204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C285220@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF5CD68(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C2852B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2852D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t result;

  if (sub_20C1D4F30(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v5 = *(_OWORD **)a2;
    *(_OWORD *)*(_QWORD *)(a1 + 8) = *v5;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285350(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;

  if (sub_20C1D4F30(a2))
  {
    v4 = sub_20C2853B4((uint64_t)a2);
    v5 = *(uint64_t **)(a1 + 8);
    *v5 = v4;
    v5[1] = v6;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2853B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)sub_20C1D5058((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

uint64_t sub_20C285410(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20C1D50E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C285558(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285490(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20C1D50E8(a2))
  {
    sub_20C285610(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C28553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C285558(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C2855F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C285610@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20C1D51EC(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C2856A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2856C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C1D53BC(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285740(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C1D53BC(a2))
  {
    **(_QWORD **)(a1 + 8) = sub_20C2857A4(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2857A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *sub_20C1D53F4(a1);
  v3 = a1[1];
  if (v3)
    v4 = (a1[1] & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(_QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v2;
}

uint64_t sub_20C2857F4(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5D2EC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C28593C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285874(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5D2EC(a2))
  {
    sub_20C2859F4(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C285920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28593C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C2859D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2859F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF5E774(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C285A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C285AA4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t result;

  if (sub_20BFA6978(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v5 = *(_OWORD **)a2;
    *(_OWORD *)*(_QWORD *)(a1 + 8) = *v5;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285B24(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  float v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  if (sub_20BFA6978(a2))
  {
    v4 = sub_20BFA6A00((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(float *)v5 = v4;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 12) = v8;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285B8C(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5D738((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C285CD4(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285C0C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5D738(a2))
  {
    sub_20C285D8C(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C285CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C285CD4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C285D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C285D8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF5DCA4(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C285E24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C285E3C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t result;

  if (sub_20BFA4BCC(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v5 = *(_OWORD **)a2;
    v6 = *(_OWORD **)(a1 + 8);
    v7 = v5[1];
    *v6 = *v5;
    v6[1] = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285EBC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (sub_20BFA4BCC(a2))
  {
    v4 = sub_20BFA4C54((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(double *)v5 = v4;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 24) = v8;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285F24(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;

  if (sub_20BF5EDE8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C28606C(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C285FA4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (sub_20BF5EDE8(a2))
  {
    sub_20C286124(a2, (uint64_t)&v7);
    v4 = *(_QWORD *)(a1 + 8);
    if ((__int128 *)v4 != &v7)
    {
      sub_20BF5618C(v4);
      v5 = v8;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      v7 = 0u;
      v8 = 0u;
      *(_QWORD *)(v4 + 32) = v9;
      v9 = 0;
    }
    sub_20BF5618C((uint64_t)&v7);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_20C286050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28606C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C286108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C286124@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF5F354(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C2861BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::ConcurrentPopulationContext(pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *this, pxrInternal__aapl__pxrReserved__::Usd_ClipCache *a2)
{
  char *v3;
  _QWORD v5[4];
  char v6;
  int v7;

  *(_QWORD *)this = a2;
  sub_20C2879AC((pthread_mutex_t *)((char *)this + 8));
  if (*(_QWORD *)(*(_QWORD *)this + 40))
  {
    v5[0] = "usd/clipCache.cpp";
    v5[1] = "ConcurrentPopulationContext";
    v5[2] = 54;
    v5[3] = "pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::ConcurrentPopulationContext(Usd_ClipCache &)";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v3, "!_cache._concurrentPopulationContext");
  }
  *(_QWORD *)(*(_QWORD *)this + 40) = this;
  return this;
}

void sub_20C28626C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_destroy(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::~ConcurrentPopulationContext(pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *this)
{
  *(_QWORD *)(*(_QWORD *)this + 40) = 0;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat *pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::Lifeboat(pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat *this, pxrInternal__aapl__pxrReserved__::Usd_ClipCache *a2)
{
  _OWORD *v4;
  char *v5;
  _QWORD v7[4];
  char v8;
  int v9;

  *(_QWORD *)this = a2;
  v4 = operator new(0x40uLL);
  *((_QWORD *)this + 1) = v4;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 14) = 1065353216;
  if (*((_QWORD *)a2 + 6))
  {
    v7[0] = "usd/clipCache.cpp";
    v7[1] = "Lifeboat";
    v7[2] = 107;
    v7[3] = "pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::Lifeboat(Usd_ClipCache &)";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v5, "!_cache._lifeboat");
  }
  *((_QWORD *)a2 + 6) = this;
  return this;
}

void sub_20C286378(_Unwind_Exception *exception_object)
{
  void ***v1;
  void **v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_20C287A40((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::~Lifeboat(void ***this)
{
  _QWORD *v1;
  void **v2;
  void **v3;

  (*this)[6] = 0;
  v3 = this[1];
  v1 = this + 1;
  v2 = v3;
  *v1 = 0;
  if (v3)
    sub_20C287A40((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  void **v2;
  void **v3;

  (*this)[6] = 0;
  v3 = this[1];
  v1 = this + 1;
  v2 = v3;
  *v1 = 0;
  if (v3)
    sub_20C287A40((uint64_t)v1, v2);
}

double pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Usd_ClipCache(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::_ComputeClipsFromPrimIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3, char **a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  _BOOL4 v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  const char *Text;
  const char *v17;
  char *v18;
  __int128 *v19;
  uint64_t *String;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char **v31;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *__p;
  char v39;
  void **v40;
  std::string v41;
  int v42;
  int v43;
  _QWORD v44[5];
  uint64_t v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = 0;
  v47 = 0;
  v48 = 0;
  memset(v45, 0, sizeof(v45));
  pxrInternal__aapl__pxrReserved__::Usd_ComputeClipSetDefinitionsForPrimIndex(a3, &v46, v45);
  sub_20BE0ECB0(a4, 0xF0F0F0F0F0F0F0F1 * ((v47 - v46) >> 4));
  v31 = a4;
  v6 = v46;
  if (v47 != v46)
  {
    v7 = 0;
    do
    {
      v8 = v6 + 272 * v7;
      v9 = (std::string *)(v45[0] + 24 * v7);
      if (*(_BYTE *)(v8 + 96) || !*(_QWORD *)(a1 + 48))
      {
        v10 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v40 + 1);
        memset(&v41, 0, sizeof(v41));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v42);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v43);
        memset(v44, 0, sizeof(v44));
        sub_20C01A074((int *)&v40, a2);
        sub_20C01A0C8((int *)&v40 + 1, (_DWORD *)a2 + 1);
        std::string::operator=(&v41, v9);
        v11 = v6 + 272 * v7;
        if (*(_BYTE *)(v11 + 128))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v36, v11 + 104);
          sub_20BFD3EBC(&v42, (int *)&v36);
          sub_20BFD3F10(&v43, (int *)&v36 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
          sub_20BFD265C(&v36);
        }
        if (*(_BYTE *)(v8 + 40))
          sub_20C28130C((uint64_t)v44, (__int128 *)v8);
        v12 = sub_20C287EB4((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), (unsigned int *)&v40);
        v10 = v12 != 0;
        if (v12)
        {
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v36, v12 + 12);
          sub_20C286904(v8 + 48, &v36);
          if (v39 < 0)
            operator delete(__p);
          if (SHIBYTE(v37) < 0)
            operator delete((void *)v36);
        }
        sub_20C00A724(v44);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
        sub_20BFD265C(&v42);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
        sub_20BFD265C(&v40);
      }
      v36 = 0uLL;
      v37 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_ClipSet::New((__int128 *)v9, v8, (uint64_t)&v36, &v35);
      v13 = HIBYTE(v37);
      if (v37 < 0)
        v13 = *((_QWORD *)&v36 + 1);
      if (v13)
      {
        if ((_QWORD)v35)
        {
          if (sub_20C286E00(2))
          {
            v14 = SHIBYTE(v37);
            v15 = (__int128 *)v36;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            v19 = &v36;
            if (v14 < 0)
              v19 = v15;
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s (on prim <%s>)\n", v17, v18, v19, Text);
          }
        }
        else
        {
          v40 = (void **)"usd/clipCache.cpp";
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)"_CreateClipSetFromDefinition";
          v41.__r_.__value_.__l.__size_ = 143;
          v41.__r_.__value_.__r.__words[2] = (std::string::size_type)"Usd_ClipSetRefPtr pxrInternal__aapl__pxrReserved__:"
                                                                     ":_CreateClipSetFromDefinition(const SdfPath &, cons"
                                                                     "t std::string &, const Usd_ClipSetDefinition &)";
          LOBYTE(v42) = 0;
          String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
          if (*((char *)String + 23) >= 0)
            v22 = (uint64_t)String;
          else
            v22 = *String;
          v23 = (uint64_t)&v36;
          if (v37 < 0)
            v23 = v36;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v40, (pxrInternal__aapl__pxrReserved__ *)"Invalid clips specified for prim <%s>: %s", v21, v22, v23);
        }
      }
      if (SHIBYTE(v37) < 0)
        operator delete((void *)v36);
      if ((_QWORD)v35 && *(_QWORD *)(v35 + 88) != *(_QWORD *)(v35 + 96))
      {
        if (v10)
        {
          pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer(*(pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v35 + 72), &v33);
          v24 = v34;
          if (v34)
          {
            v25 = (unsigned int *)(v34 + 8);
            do
            {
              v26 = __ldxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          }
        }
        sub_20BDEA72C(v31, &v35);
      }
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      ++v7;
      v6 = v46;
    }
    while (v7 < 0xF0F0F0F0F0F0F0F1 * ((v47 - v46) >> 4));
  }
  v40 = (void **)v45;
  sub_20BDE5038(&v40);
  v40 = (void **)&v46;
  sub_20C287D04(&v40);
}

void sub_20C28685C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  a29 = v29 - 136;
  sub_20BDE5038((void ***)&a29);
  a29 = v29 - 112;
  sub_20C287D04((void ***)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20C286904(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    v5 = (void **)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      operator delete(*v5);
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
    *((_BYTE *)a2 + 47) = 0;
    *((_BYTE *)a2 + 24) = 0;
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v7;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v8 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v8;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

_DWORD *sub_20C2869C8(uint64_t a1)
{
  sub_20C00A724((_QWORD *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipCache::PopulateClipsForPrim(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3)
{
  __int128 v6;
  uint64_t v7;
  void **v8;
  uint64_t **v9;
  BOOL IsAbsoluteRootPath;
  char v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t *String;
  const char *v16;
  char *v17;
  uint64_t v18;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void **v29;

  sub_20BEB59B0((uint64_t)&v27, (uint64_t)"Usd", (uint64_t)"Usd_ClipCache::PopulateClipsForPrim");
  v25 = 0uLL;
  v26 = 0;
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::_ComputeClipsFromPrimIndex((uint64_t)this, a2, a3, (char **)&v25);
  v6 = v25;
  if ((_QWORD)v25 != *((_QWORD *)&v25 + 1))
  {
    v29 = 0;
    v7 = *((_QWORD *)this + 5);
    if (v7)
    {
      v8 = (void **)(v7 + 8);
      sub_20C2879E4((pthread_mutex_t *)(v7 + 8));
      v29 = v8;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v24);
    v9 = 0;
    while (1)
    {
      IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
      v11 = v9 || IsAbsoluteRootPath;
      if ((v11 & 1) != 0)
        break;
      v12 = sub_20C200D44(this, (unsigned int *)&v24);
      if (v12)
        v9 = (uint64_t **)(v12 + 1);
      else
        v9 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v23);
      sub_20BFD3EBC((int *)&v24, (int *)&v23);
      sub_20BFD3F10((int *)&v24 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v23);
      while (v23 != v24)
      {
        v13 = sub_20C286D34((uint64_t)this, &v23);
        if (v13 != (char *)v9)
          sub_20C24A6B0((uint64_t)v13, *v9, v9[1], ((char *)v9[1] - (char *)*v9) >> 4);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, &v21);
        sub_20BFD3EBC((int *)&v23, &v21);
        sub_20BFD3F10((int *)&v23 + 1, &v22);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
        sub_20BFD265C(&v21);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
      sub_20C20DB9C((uint64_t *)&v25, *((uint64_t *)&v25 + 1), *v9, v9[1], ((char *)v9[1] - (char *)*v9) >> 4);
    }
    v14 = sub_20C286D34((uint64_t)this, a2);
    sub_20BE10AE4((void **)v14);
    *(_OWORD *)v14 = v25;
    *((_QWORD *)v14 + 2) = v26;
    v25 = 0uLL;
    v26 = 0;
    if (sub_20C286E00(2))
    {
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
      if (*((char *)String + 23) >= 0)
        v18 = (uint64_t)String;
      else
        v18 = *String;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Populated clips for prim <%s>\n", v16, v17, v18);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_20BFD265C(&v24);
    sub_20C287A0C((pthread_mutex_t **)&v29);
  }
  v29 = (void **)&v25;
  sub_20BDE9EB0(&v29);
  while (v28--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v27);
  return (_QWORD)v6 != *((_QWORD *)&v6 + 1);
}

void sub_20C286CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  sub_20BFD1A18(&a12);
  sub_20C287A0C((pthread_mutex_t **)&a19);
  a19 = (void **)&a14;
  sub_20BDE9EB0(&a19);
  sub_20BEB24F4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

char *sub_20C286D34(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  _QWORD v6[3];
  unsigned int v7;
  int v8;
  _QWORD v9[3];
  void **v10;

  sub_20BFD6E54(&v7, a2);
  sub_20BFD6EA4(&v8, a2 + 1);
  memset(v9, 0, sizeof(v9));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C288184(a1, &v7);
  v10 = (void **)v9;
  sub_20BDE9EB0(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  v10 = (void **)v6;
  sub_20BDE9EB0(&v10);
  return (char *)v4 + 8;
}

void sub_20C286DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  sub_20C287C38((uint64_t)&a12);
  *(_QWORD *)(v12 - 40) = &a9;
  sub_20BDE9EB0((void ***)(v12 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_20C286E00(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20C287C80();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20C287C80();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_24C52E2C8[a1]);
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void **sub_20C286E60(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20BDE9EB0(&v3);
  return a1;
}

pthread_mutex_t **pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetUsedLayers@<X0>(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v9;
  uint64_t (*v10)(uint64_t *);
  char v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***v16;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***v17;
  uint64_t (*v18)(uint64_t *);
  char v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  pthread_mutex_t *v28;

  v28 = 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = (pthread_mutex_t *)(v4 + 8);
    sub_20C2879E4((pthread_mutex_t *)(v4 + 8));
    v28 = v5;
  }
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v6 = sub_20C2870AC(this);
  while (1)
  {
    v27 = v6;
    if (!v6)
      break;
    v7 = v6[1];
    v8 = v6[2];
    if (v7 != v8)
    {
      do
      {
        v9 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(*(_QWORD *)v7 + 72);
        if (v9)
        {
          pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen(v9, &v25);
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        v10 = sub_20BFD2F78(&v25);
        if (v11 & 1 | (unint64_t)v10)
          sub_20BFF2A18((uint64_t **)a2, (uint64_t)&v25, &v25);
        v12 = v26;
        if (v26)
        {
          v13 = (unsigned int *)(v26 + 8);
          do
          {
            v14 = __ldxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v16 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ****)(*(_QWORD *)v7 + 88);
        v17 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ****)(*(_QWORD *)v7 + 96);
        while (v16 != v17)
        {
          pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen(*v16, &v25);
          v18 = sub_20BFD2F78(&v25);
          if (v19 & 1 | (unint64_t)v18)
            sub_20BFF2A18((uint64_t **)a2, (uint64_t)&v25, &v25);
          v20 = v26;
          if (v26)
          {
            v21 = (unsigned int *)(v26 + 8);
            do
            {
              v22 = __ldxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          }
          v16 += 2;
        }
        v7 += 16;
      }
      while (v7 != v8);
      v6 = v27;
    }
    v6 = (_QWORD *)v6[5];
    if (!v6)
      v6 = (_QWORD *)sub_20C200DAC((uint64_t)&v27);
  }
  return sub_20C287A0C(&v28);
}

void sub_20C287020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C287A0C((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2870AC(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  unsigned int *v2;

  if (!*((_QWORD *)a1 + 3))
    return 0;
  v2 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  return sub_20C200D44(a1, v2);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Reload(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *i;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***v8;
  uint64_t (*v9)(uint64_t *);
  char v10;
  char v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t (*v17)(uint64_t *);
  char v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  void *__p;
  uint64_t v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  int v38;
  __int128 v39;
  __int128 v40;
  int v41;
  _BYTE v42[8];

  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v42);
  v39 = 0u;
  v40 = 0u;
  v41 = 1065353216;
  v2 = sub_20C2870AC(this);
  while (1)
  {
    *(_QWORD *)&v37[0] = v2;
    if (!v2)
      break;
    v3 = (_QWORD *)v2[1];
    v4 = (_QWORD *)v2[2];
    if (v3 != v4)
    {
      do
      {
        sub_20C2887D8((uint64_t)&v39, v3, v3);
        v3 += 2;
      }
      while (v3 != v4);
      v2 = *(_QWORD **)&v37[0];
    }
    v2 = (_QWORD *)v2[5];
    if (!v2)
      v2 = (_QWORD *)sub_20C200DAC((uint64_t)v37);
  }
  memset(v37, 0, sizeof(v37));
  v38 = 1065353216;
  for (i = (_QWORD *)v40; i; i = (_QWORD *)*i)
  {
    v6 = i[2];
    v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ****)(v6 + 88);
    v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ****)(v6 + 96);
    if (v7 != v8)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen(*v7, (uint64_t *)&__p);
        v9 = sub_20BFD2F78(&__p);
        if (v10 & 1 | (unint64_t)v9)
        {
          sub_20BEB5370((uint64_t)v37, (uint64_t)&__p, &__p);
          if ((v11 & 1) != 0)
          {
            v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&__p);
            pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(v12, 0);
          }
        }
        v13 = v32;
        if (v32)
        {
          v14 = (unsigned int *)(v32 + 8);
          do
          {
            v15 = __ldxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v7 += 2;
      }
      while (v7 != v8);
      v6 = i[2];
    }
    pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen(*(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v6 + 72), &v35);
    v17 = sub_20BFD2F78(&v35);
    if (v18 & 1 | (unint64_t)v17)
    {
      if (pxrInternal__aapl__pxrReserved__::Usd_IsAutoGeneratedClipManifest(&v35))
      {
        v19 = i[2];
        __p = 0;
        v32 = 0;
        v33 = 0;
        pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest((pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(v19 + 88), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 64), (uint64_t *)&__p, 0, (uint64_t *)&v34);
        if (SHIBYTE(v33) < 0)
          operator delete(__p);
        v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v35);
        sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v34);
        pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(v20, (uint64_t *)&__p);
        v21 = v32;
        if (v32)
        {
          v22 = (unsigned int *)(v32 + 8);
          do
          {
            v23 = __ldxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        }
        sub_20C103234(&v34);
      }
      else
      {
        v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v35);
        pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(v25, 0);
      }
    }
    v26 = v36;
    if (v36)
    {
      v27 = (unsigned int *)(v36 + 8);
      do
      {
        v28 = __ldxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
  }
  sub_20BEB3E90((uint64_t)v37);
  sub_20C288764((uint64_t)&v39);
  return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v42);
}

void sub_20C287344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  sub_20C288764(v18 - 80);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v18 - 40));
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  pthread_mutex_t *v8;

  v8 = 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = (pthread_mutex_t *)(v4 + 8);
    sub_20C2879E4((pthread_mutex_t *)(v4 + 8));
    v8 = v5;
  }
  v6 = sub_20C2874B8(this, a2);
  sub_20C287A0C(&v8);
  return v6;
}

void sub_20C2874A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C287A0C((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C2874B8(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v2;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  int v12;
  int v13;
  uint64_t v14;

  sub_20BFD6E54(&v14, a2);
  for (i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD6EA4((_DWORD *)&v14 + 1, a2 + 1);
        ;
        i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v12))
  {
    v6 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(i);
    v7 = v14;
    v8 = *v6;
    if (v14 == *v6)
      break;
    v9 = sub_20C200D44(a1, (unsigned int *)&v14);
    if (v9)
    {
      v2 = v9 + 1;
      break;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v12);
    sub_20BFD3EBC((int *)&v14, &v12);
    sub_20BFD3F10((int *)&v14 + 1, &v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_20BFD265C(&v14);
  if (v7 == v8)
  {
    v10 = atomic_load((unsigned __int8 *)&qword_25473C808);
    if ((v10 & 1) != 0)
    {
      return &qword_25473C7F0;
    }
    else
    {
      v2 = &qword_25473C7F0;
      if (__cxa_guard_acquire(&qword_25473C808))
      {
        qword_25473C7F0 = 0;
        *(_QWORD *)algn_25473C7F8 = 0;
        qword_25473C800 = 0;
        __cxa_atexit((void (*)(void *))sub_20C286E60, &qword_25473C7F0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25473C808);
      }
    }
  }
  return v2;
}

void sub_20C2875F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipCache::InvalidateClipsForPrim(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache *v3;
  unint64_t v4;
  unint64_t v5;
  const std::string **i;
  const std::string **v7;
  uint64_t (*v8)(uint64_t *);
  char v9;
  const std::string *v10;
  std::string::pointer data;
  char *v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  const std::string *Identifier;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v23;
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache *v24;
  char *v25;
  std::string __p;
  int v27;
  int v28;
  unint64_t v29[5];
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char **v33;

  if (!*((_QWORD *)this + 6))
  {
    v25 = "usd/clipCache.cpp";
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"InvalidateClipsForPrim";
    __p.__r_.__value_.__l.__size_ = 372;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)"void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Inv"
                                                               "alidateClipsForPrim(const SdfPath &)";
    LOBYTE(v27) = 0;
    LODWORD(v29[0]) = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v25, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_lifeboat");
  }
  v3 = this;
  __p.__r_.__value_.__r.__words[0] = 0;
  v25 = (char *)sub_20C200D44(this, (unsigned int *)a2);
  v4 = sub_20C200DAC((uint64_t)&v25);
  v5 = (unint64_t)v25;
  v32 = (unint64_t)v25;
  v23 = v4;
  if (v25 != (char *)v4)
  {
    v24 = v3;
    do
    {
      sub_20C20DB9C(*(uint64_t **)(*((_QWORD *)v3 + 6) + 8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 6) + 8) + 8), *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 4);
      v7 = *(const std::string ***)(v5 + 8);
      for (i = *(const std::string ***)(v5 + 16); v7 != i; v7 += 2)
      {
        pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*v7)[3].__r_.__value_.__l.__data_, &v30);
        v8 = sub_20BFD2F78(&v30);
        if (v9 & 1 | (unint64_t)v8 && pxrInternal__aapl__pxrReserved__::Usd_IsAutoGeneratedClipManifest(&v30))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v25);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v25 + 1);
          memset(&__p, 0, sizeof(__p));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
          memset(v29, 0, sizeof(v29));
          sub_20C01A074((int *)&v25, (_DWORD *)v5);
          sub_20C01A0C8((int *)&v25 + 1, (_DWORD *)(v5 + 4));
          std::string::operator=(&__p, *v7);
          v10 = *v7;
          sub_20C01A074(&v27, &(*v7)[2].__r_.__value_.__r.__words[2]);
          sub_20C01A0C8(&v28, (_DWORD *)&v10[2].__r_.__value_.__r.__words[2] + 1);
          sub_20C1FCD48(v29, (uint64_t)((*v7)[4].__r_.__value_.__r.__words[0] - (*v7)[3].__r_.__value_.__r.__words[2]) >> 4);
          v12 = (char *)(*v7)[3].__r_.__value_.__r.__words[2];
          data = (*v7)[4].__r_.__value_.__l.__data_;
          while (v12 != data)
          {
            sub_20C288B54((uint64_t)v29, (__int128 *)(*(_QWORD *)v12 + 40));
            v12 += 16;
          }
          v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v30);
          Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
          v15 = *(_QWORD *)(*((_QWORD *)v24 + 6) + 8) + 24;
          v33 = &v25;
          v16 = (std::string *)sub_20C288D34(v15, (unsigned int *)&v25, (uint64_t)&unk_20CAC184C, (uint64_t *)&v33);
          std::string::operator=(v16 + 4, Identifier);
          sub_20C00A724(v29);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
          sub_20BFD265C(&v27);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
          sub_20BFD265C(&v25);
        }
        v17 = v31;
        if (v31)
        {
          v18 = (unsigned int *)(v31 + 8);
          do
          {
            v19 = __ldxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v5 = *(_QWORD *)(v32 + 40);
      if (!v5)
        v5 = sub_20C200DAC((uint64_t)&v32);
      v32 = v5;
      v3 = v24;
    }
    while (v5 != v23);
  }
  return sub_20C287964(v3, (unsigned int *)a2);
}

BOOL sub_20C287964(pxrInternal__aapl__pxrReserved__::SdfPath *a1, unsigned int *a2)
{
  _QWORD *v3;
  _QWORD *v5;

  v3 = sub_20C200D44(a1, a2);
  v5 = v3;
  if (v3)
    sub_20C289148(a1, (uint64_t *)&v5);
  return v3 != 0;
}

pthread_mutex_t *sub_20C2879AC(pthread_mutex_t *a1)
{
  tbb::internal *v2;
  const char *v3;

  v2 = (tbb::internal *)pthread_mutex_init(a1, 0);
  if ((_DWORD)v2)
    tbb::internal::handle_perror(v2, "mutex: pthread_mutex_init failed", v3);
  return a1;
}

tbb::internal *sub_20C2879E4(pthread_mutex_t *a1)
{
  tbb::internal *result;
  const char *v2;

  result = (tbb::internal *)pthread_mutex_lock(a1);
  if ((_DWORD)result)
    tbb::internal::handle_perror(result, "mutex: pthread_mutex_lock failed", v2);
  return result;
}

pthread_mutex_t **sub_20C287A0C(pthread_mutex_t **a1)
{
  pthread_mutex_t *v2;

  v2 = *a1;
  if (v2)
  {
    pthread_mutex_unlock(v2);
    *a1 = 0;
  }
  return a1;
}

void sub_20C287A40(uint64_t a1, void **a2)
{
  void **v3;

  if (a2)
  {
    sub_20C287A84((uint64_t)(a2 + 3));
    v3 = a2;
    sub_20BDE9EB0(&v3);
    operator delete(a2);
  }
}

uint64_t sub_20C287A84(uint64_t a1)
{
  void *v2;

  sub_20C287ABC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C287ABC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C287AF8((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C287AF8(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  sub_20C00A724((_QWORD *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::~Usd_ClipCache(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this)
{
  void *v2;

  sub_20C287B98((uint64_t *)this);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void sub_20C287B98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  void **v9;

  v2 = a1[1] - *a1;
  if (v2)
  {
    v3 = 0;
    v4 = v2 >> 3;
    do
    {
      v5 = *a1;
      v6 = *(_QWORD *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          v7 = *(_QWORD *)(v6 + 32);
          v9 = (void **)(v6 + 8);
          sub_20BDE9EB0(&v9);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          v8 = sub_20BFD265C((_DWORD *)v6);
          operator delete(v8);
          v6 = v7;
        }
        while (v7);
        v5 = *a1;
      }
      *(_QWORD *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

_DWORD *sub_20C287C38(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  sub_20BDE9EB0(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C287C80()
{
  unsigned __int8 v0;
  _DWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C818);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C818))
  {
    v2 = operator new(0x44uLL);
    v2[16] = 0;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    qword_25473C810 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473C818);
  }
  return qword_25473C810;
}

void sub_20C287CEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473C818);
  _Unwind_Resume(a1);
}

void sub_20C287D04(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_20C287D74(v4 - 272);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C287D74(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 260));
  sub_20BFD265C((_DWORD *)(a1 + 256));
  v2 = *(unsigned int **)(a1 + 248);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_20C287E04(a1 + 184);
  sub_20C287E04(a1 + 136);
  if (*(_BYTE *)(a1 + 128) && *(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  sub_20C287E38(a1 + 48);
  return sub_20C287E80(a1);
}

uint64_t sub_20C287E04(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    sub_20BF5618C(a1);
  return a1;
}

uint64_t sub_20C287E38(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20C287E80(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    sub_20C00A724((_QWORD *)a1);
  return a1;
}

_QWORD *sub_20C287EB4(_QWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD v14[4];
  _QWORD v15[4];
  char v16;

  v4 = sub_20C287FEC((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        v15[0] = v11 + 2;
        v15[1] = v11 + 3;
        v15[2] = v11 + 6;
        v15[3] = v11 + 7;
        v14[0] = a2;
        v14[1] = a2 + 2;
        v14[2] = a2 + 8;
        v14[3] = a2 + 10;
        if ((sub_20C288124((uint64_t)&v16, (uint64_t)v15, (uint64_t)v14) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_20C287FEC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;

  v2 = *a2;
  v3 = a2[1];
  v6 = 1;
  v5 = v3 + ((unint64_t)(v3 + v2 + (v3 + v2) * (v3 + v2)) >> 1);
  sub_20C288054((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, (pxrInternal__aapl__pxrReserved__ *)(a2 + 2), a2 + 8, (uint64_t *)a2 + 5);
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

unint64_t sub_20C288054(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2, unsigned int *a3, uint64_t *a4)
{
  char *v7;
  char *v8;

  v7 = (char *)*((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v8 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v8);
  sub_20BFD84AC((uint64_t)a1, a3);
  return sub_20C2880B0((unint64_t)a1, a4);
}

unint64_t sub_20C2880B0(unint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  pxrInternal__aapl__pxrReserved__ *v6;

  v2 = result;
  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  v4 = *a2;
  if (*a2)
  {
    v5 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    do
    {
      --v4;
      v6 = (pxrInternal__aapl__pxrReserved__ *)((char *)v5 + 48);
      result = sub_20C00A538(v2, v5);
      v5 = v6;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20C288124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  if ((sub_20C00CA54((uint64_t)&v6, a2, a3) & 1) != 0 && **(_QWORD **)(a2 + 16) == **(_QWORD **)(a3 + 16))
    return sub_20C00A5B4(*(uint64_t **)(a2 + 24), *(_QWORD *)(a3 + 24));
  else
    return 0;
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C288184(uint64_t a1, unsigned int *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5[2];
  unsigned int *v6;

  v6 = a2;
  result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2882F8(a1, a2, (uint64_t *)&v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_20C2881D0(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_20C2881D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  int v9;
  int v10;
  _QWORD v11[3];
  int v12;
  int v13;
  void **v14;

  v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v12);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12))
  {
    sub_20BFD6E54(&v9, &v12);
    sub_20BFD6EA4(&v10, &v13);
    memset(v11, 0, sizeof(v11));
    memset(v8, 0, sizeof(v8));
    v4 = sub_20C288184(a1, &v9);
    v14 = (void **)v11;
    sub_20BDE9EB0(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    v14 = (void **)v8;
    sub_20BDE9EB0(&v14);
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
      v6 = v5 | 1;
    else
      v6 = v4;
    *((_QWORD *)v3 + 6) = v6;
    *(_QWORD *)(v4 + 40) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_20BFD265C(&v12);
}

void sub_20C2882C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20C287C38((uint64_t)va1);
  *(_QWORD *)(v2 - 56) = va;
  sub_20BDE9EB0((void ***)(v2 - 56));
  sub_20BFD1A18((int *)va2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2882F8(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    sub_20C288438((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    v9 = (_QWORD *)*v7;
    while (*v9 != *(_QWORD *)a2)
    {
      v9 = (_QWORD *)v9[4];
      if (!v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 24) > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
    {
      sub_20C288438((void **)a1);
      v7 = (_QWORD *)(*(_QWORD *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(_QWORD *)(a1 + 32)));
      v8 = (_QWORD *)*v7;
    }
    v9 = operator new(0x38uLL);
    sub_20C288660((uint64_t)v9, *a3);
    v9[5] = 0;
    v9[6] = 0;
    v9[4] = v8;
    *v7 = v9;
    ++*(_QWORD *)(a1 + 24);
  }
  return v9;
}

void sub_20C288424(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C288438(void **a1)
{
  char *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  _BOOL4 v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v17;
  void *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;

  sub_20BEB59B0((uint64_t)&v21, (uint64_t)"Sdf", (uint64_t)"SdfPathTable::_Grow");
  v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v3 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>>::_Grow() [MappedType = std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>]", 0, v2);
    v5 = v4 != 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v19 = v4;
  v20 = v5;
  v6 = (2 * (_QWORD)a1[4]) | 1;
  if (v6 <= 7)
    v6 = 7;
  a1[4] = (void *)v6;
  sub_20C2885EC(&v17, v6 + 1);
  v7 = a1[1];
  if (v7 != *a1)
  {
    v8 = 0;
    v9 = (v7 - (_BYTE *)*a1) >> 3;
    do
    {
      v10 = (unsigned int *)*((_QWORD *)*a1 + v8);
      if (v10)
      {
        v11 = (unint64_t)a1[4];
        do
        {
          v12 = (unsigned int *)*((_QWORD *)v10 + 4);
          v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          v14 = v17;
          *((_QWORD *)v10 + 4) = *(_QWORD *)(v17 + 8 * v13);
          *(_QWORD *)(v14 + 8 * v13) = v10;
          v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  v15 = a1[2];
  a1[2] = v18;
  *(_QWORD *)&v17 = v7;
  v18 = v15;
  if (v7)
  {
    *((_QWORD *)&v17 + 1) = v7;
    operator delete(v7);
  }
  v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_20C2885C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2885EC(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C288644(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C288660(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20C2886C4((char *)(a1 + 8), *(_QWORD **)(a2 + 8), *(_QWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
  return a1;
}

void sub_20C2886B0(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

char *sub_20C2886C4(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C288750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BDE9EB0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C288764(uint64_t a1)
{
  void *v2;

  sub_20C28879C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C28879C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_20C2887D8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v28[2];
  char v29;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x20uLL);
  v28[0] = (uint64_t)v15;
  v28[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9)
          v26 %= v9;
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v12 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C288A7C(v28, 0);
  return v12;
}

void sub_20C288A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C288A7C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C288A7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 16));
    operator delete((void *)v2);
  }
}

char *sub_20C288AC0(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20C288B38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C288B54(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  char v20;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_21;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6 = atomic_load((unint64_t *)(v5 - 16));
      if (v6 != 1)
        goto LABEL_21;
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
      {
        if (*(_QWORD *)(a1 + 24))
          v8 = (uint64_t *)a1;
        else
          v8 = (uint64_t *)(v7 - 8);
        v5 = *v8;
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v7 = 0;
    }
    if (v4 != v5)
    {
      v9 = v7 + 48 * v4;
      if (*((char *)a2 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)(v7 + 48 * v4), *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v10 = *a2;
        *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v9 = v10;
      }
      v11 = (_BYTE *)(v7 + 48 * v4 + 24);
      if (*((char *)a2 + 47) < 0)
      {
        sub_20BDDBFAC(v11, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
      }
      else
      {
        v12 = *(__int128 *)((char *)a2 + 24);
        *(_QWORD *)(v7 + 48 * v4 + 40) = *((_QWORD *)a2 + 5);
        *(_OWORD *)v11 = v12;
      }
      goto LABEL_19;
    }
LABEL_21:
    v13 = *(_QWORD *)(a1 + 32);
    v14 = 1;
    do
    {
      v15 = v14;
      v14 *= 2;
    }
    while (v15 < v4 + 1);
    v16 = sub_20C00AA30(a1, v15);
    v17 = 3 * v4;
    sub_20C00ABDC(v13, v13 + 16 * v17, (uint64_t)v16);
    sub_20C288AC0((char *)&v16[2 * v17], a2);
    sub_20C00A724((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = v16;
LABEL_19:
    ++*(_QWORD *)a1;
    return;
  }
  v19[0] = "vt/array.h";
  v19[1] = "emplace_back";
  v19[2] = 433;
  v19[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::emplace_back("
           "Args &&...) [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath, Args = <const pxrInternal__aapl__pxrReser"
           "ved__::SdfAssetPath &>]";
  v20 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v18 = 4;
    else
      v18 = 3;
  }
  else
  {
    v18 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v18);
}

void sub_20C288D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C288D34(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[4];
  _QWORD v27[4];
  char v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_20C287FEC(a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            v27[0] = v15 + 2;
            v27[1] = v15 + 3;
            v27[2] = v15 + 6;
            v27[3] = v15 + 7;
            v26[0] = a2;
            v26[1] = a2 + 2;
            v26[2] = a2 + 8;
            v26[3] = a2 + 10;
            if ((sub_20C288124((uint64_t)&v28, (uint64_t)v27, (uint64_t)v26) & 1) != 0)
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_20C289004(a1, v10, a4, (uint64_t)v27);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v27[0] = *v23;
    *v23 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v27[0];
    }
  }
  v15 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*v8;
  sub_20C289104((uint64_t)v27, 0);
  return v15;
}

void sub_20C288FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20C289104((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C289004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x78uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C289070((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C289058(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C289104(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C289070(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = sub_20BFD38A4((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD38DC(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 32), (_DWORD *)(a2 + 32));
  sub_20BFD38DC((_DWORD *)(a1 + 36), (_DWORD *)(a2 + 36));
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_20C289104(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C287AF8((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20C289148(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_20C289184(a1, *a2);
  sub_20C2891C4(a1, v3);
  sub_20C28925C(a1, (unsigned int *)v3);
}

void sub_20C289184(_QWORD *a1, uint64_t a2)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    sub_20C289310(a1, *(_QWORD *)(a2 + 40));
    sub_20C28925C(a1, v2);
  }
}

_QWORD *sub_20C2891C4(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *result;
  _QWORD *v5;
  unsigned int v6;
  int v7;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(_QWORD *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    v5 = sub_20C200D44(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_20BFD265C(&v6);
    return (_QWORD *)sub_20C200FE8((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_20C289248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C28925C(_QWORD *a1, unsigned int *a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  _DWORD *v7;
  void **v8;

  v3 = a2 + 1;
  v4 = (_QWORD *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    v5 = v4;
    v6 = (unsigned int *)*v4;
    v4 = (_QWORD *)(*v4 + 32);
  }
  while (v6 != a2);
  --a1[3];
  *v5 = *((_QWORD *)a2 + 4);
  v8 = (void **)(a2 + 2);
  sub_20BDE9EB0(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  v7 = sub_20BFD265C(a2);
  operator delete(v7);
}

void sub_20C289310(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  ((void (*)(void))sub_20C289184)();
  v4 = *(_QWORD *)(a2 + 48);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      v7 = *(_QWORD *)(v5 + 48);
      if ((v7 & 7) != 0)
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      else
        v8 = 0;
      sub_20C289184(a1, v5);
      sub_20C28925C(a1, (unsigned int *)v5);
      v5 = v8;
    }
    while (v8);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_IsAutoGeneratedClipManifest(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  char **Identifier;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *EmptyString;
  char *v8;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v2);
  if (result)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    Identifier = (char **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
    v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C2893F8();
    if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    if (*((char *)EmptyString + 23) >= 0)
      v8 = (char *)EmptyString;
    else
      v8 = (char *)*EmptyString;
    return pxrInternal__aapl__pxrReserved__::TfStringContains(Identifier, v8);
  }
  return result;
}

unint64_t sub_20C2893F8()
{
  char *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  v0 = (char *)atomic_load(&qword_254988328);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "generated_manifest", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *((_QWORD *)v0 + 1) = v5;
    *((_QWORD *)v0 + 2) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *((_QWORD *)v0 + 3) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v0 + 2) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *((_QWORD *)v0 + 2) = v6;
    }
    while (!__ldaxr(&qword_254988328))
    {
      if (!__stlxr((unint64_t)v0, &qword_254988328))
        return (unint64_t)v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    sub_20BEEB2B8(&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    operator delete(v0);
    return atomic_load(&qword_254988328);
  }
  return (unint64_t)v0;
}

void sub_20C289540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  sub_20BEEB2B8(&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(pxrInternal__aapl__pxrReserved__::Usd_Clip ***a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v10;
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v11;
  uint64_t (*v12)(uint64_t *);
  char v13;
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void **p_p;
  int v30;
  __int128 v31;
  void *__p;
  char *v33;
  char *v34;
  std::string::size_type v35[3];

  memset(v35, 0, sizeof(v35));
  sub_20C138740((uint64_t *)v35, ((char *)a1[1] - (char *)*a1) >> 4);
  v30 = a4;
  __p = 0;
  v33 = 0;
  v34 = 0;
  sub_20BE69DCC(&__p, ((char *)a1[1] - (char *)*a1) >> 4);
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer(*v10, (uint64_t *)&v31);
      v12 = sub_20BFD2F78(&v31);
      if (v13 & 1 | (unint64_t)v12)
      {
        sub_20C138848((uint64_t *)v35, &v31);
        v14 = *v10;
        v15 = v33;
        if (v33 >= v34)
        {
          v17 = (char *)__p;
          v18 = (v33 - (_BYTE *)__p) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            sub_20BDDF694();
          v20 = v34 - (_BYTE *)__p;
          if ((v34 - (_BYTE *)__p) >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)sub_20BDDF6A8((uint64_t)&v34, v21);
            v17 = (char *)__p;
            v15 = v33;
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[8 * v18];
          *(_QWORD *)v23 = *((_QWORD *)v14 + 12);
          v16 = v23 + 8;
          while (v15 != v17)
          {
            v24 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *((_QWORD *)v23 - 1) = v24;
            v23 -= 8;
          }
          __p = v23;
          v33 = v16;
          v34 = &v22[8 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_QWORD *)v33 = *((_QWORD *)v14 + 12);
          v16 = v15 + 8;
        }
        v33 = v16;
      }
      v25 = *((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v26 = (unsigned int *)(*((_QWORD *)&v31 + 1) + 8);
        do
        {
          v27 = __ldxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  if (v30)
    p_p = &__p;
  else
    p_p = 0;
  pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(a2, v35, a3, (uint64_t)p_p, a5);
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
  __p = v35;
  sub_20BEB4844((void ***)&__p);
}

void sub_20C2897A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, uint64_t a15, char a16)
{
  __p = &a16;
  sub_20BEB4844((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, std::string::size_type *a2@<X0>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  const char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t *);
  const char *Text;
  pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *v15;
  unint64_t v16;
  const char *v17;
  std::string::size_type v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  double *size;
  double *v31;
  double v32;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[8];
  uint64_t v39;
  char **v40;
  char *v41;
  std::type_info *v42;
  std::string __p;
  std::string *p_p;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v39 = a4;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/clipSet.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Usd_GenerateClipManifest";
    __p.__r_.__value_.__r.__words[2] = 92;
    p_p = (std::string *)"SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(const SdfLayerHandleV"
                         "ector &, const SdfPath &, const std::string &, const std::vector<double> *)";
    v45 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"<%s> must be a prim path", Text);
    goto LABEL_15;
  }
  v11 = (_QWORD *)*a2;
  v12 = (_QWORD *)a2[1];
  while (1)
  {
    if (v11 == v12)
    {
      if (*((char *)a3 + 23) < 0)
        a3 = (uint64_t *)*a3;
      v15 = (pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
      if (!v15)
        v15 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
      v16 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
      if (v16)
      {
        v17 = (const char *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0)
          v17 = *(const char **)v17;
      }
      else
      {
        v17 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s.%s", v9, v10, a3, v17);
      v41 = 0;
      v42 = 0;
      v40 = &v41;
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v40, a5);
      sub_20BDE9D48((uint64_t)&v40, v41);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v38);
      v18 = *a2;
      v19 = (uint64_t *)a2[1];
      if ((uint64_t *)*a2 != v19)
      {
        v20 = (uint64_t *)*a2;
        while (1)
        {
          v21 = sub_20BFCF650(v20);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C52E360;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)a5;
          __p.__r_.__value_.__r.__words[2] = v18;
          p_p = &__p;
          pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(v21, this, (uint64_t)&__p);
          v22 = p_p;
          if (p_p == &__p)
            break;
          if (p_p)
          {
            v23 = 5;
LABEL_25:
            (*(void (**)(void))(v22->__r_.__value_.__r.__words[0] + 8 * v23))();
          }
          v20 += 2;
          v18 += 16;
          if (v20 == v19)
            goto LABEL_27;
        }
        v22 = &__p;
        v23 = 4;
        goto LABEL_25;
      }
LABEL_27:
      if (!v39)
      {
LABEL_41:
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v38);
        return;
      }
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v24 = sub_20C0EEAF8(a5);
      v25 = (std::string *)operator new(0x20uLL);
      v25->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C52E418;
      v25->__r_.__value_.__l.__size_ = (std::string::size_type)a2;
      v25->__r_.__value_.__r.__words[2] = (std::string::size_type)&v39;
      v25[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      p_p = v25;
      pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(v24, this, (uint64_t)&__p);
      v26 = p_p;
      if (p_p == &__p)
      {
        v27 = 4;
        v26 = &__p;
      }
      else
      {
        if (!p_p)
        {
LABEL_33:
          v28 = v35;
          for (i = v36; v28 != i; v28 += 32)
          {
            sub_20C28BABC((uint64_t)&__p, v28);
            v31 = (double *)__p.__r_.__value_.__r.__words[2];
            size = (double *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[2])
            {
              do
              {
                v32 = *size;
                v33 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a5);
                v41 = &v34;
                v42 = &stru_24C527B78;
                v40 = (char **)&unk_24C52E498;
                pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (uint64_t)&v40, v32);
                ++size;
              }
              while (size != v31);
              size = (double *)__p.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)size;
              operator delete(size);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
            sub_20BFD265C(&__p);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
          sub_20C28C734((void ***)&__p);
          goto LABEL_41;
        }
        v27 = 5;
      }
      (*(void (**)(void))(v26->__r_.__value_.__r.__words[0] + 8 * v27))();
      goto LABEL_33;
    }
    v13 = sub_20BFD2F78(v11);
    if (!(v9 & 1 | (unint64_t)v13))
      break;
    v11 += 2;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/clipSet.cpp";
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Usd_GenerateClipManifest";
  __p.__r_.__value_.__r.__words[2] = 99;
  p_p = (std::string *)"SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(const SdfLayerHandleVec"
                       "tor &, const SdfPath &, const std::string &, const std::vector<double> *)";
  v45 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clip layer");
LABEL_15:
  *a5 = 0;
}

void sub_20C289BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char **a27)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v27;
  char **v28;
  char **p_p;
  uint64_t v31;

  p_p = a27;
  if (a27 == v28)
  {
    v31 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))&(*p_p)[8 * v31])();
LABEL_6:
  __p = &a13;
  sub_20C28C734((void ***)&__p);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a16);
  sub_20C103234(v27);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C289CC4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipSet::New(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t i;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  uint64_t **v25;
  const char *v26;
  char *v27;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v28;
  unint64_t v29;
  const char *v30;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v31;
  unint64_t v32;
  const char *v33;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v34;
  unint64_t v35;
  const char *v36;
  char v37;
  char *v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  double *v42;
  const char *v43;
  char *v44;
  int v45;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v46;
  unint64_t v47;
  const char *v48;
  uint64_t **v49;
  uint64_t v50;
  double v51;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v52;
  unint64_t v53;
  const char *v54;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v55;
  unint64_t v56;
  const char *v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  int v67;

  if (!*(_BYTE *)(a2 + 40) || !*(_BYTE *)(a2 + 128) || !*(_BYTE *)(a2 + 176))
    goto LABEL_53;
  v7 = *(unsigned __int8 *)(a2 + 127);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 112);
  if (!v7)
  {
    v28 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v28)
      v28 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    v29 = *((_QWORD *)v28 + 4) & 0xFFFFFFFFFFFFFFF8;
    if (v29)
    {
      v30 = (const char *)(v29 + 16);
      if (*(char *)(v29 + 39) < 0)
        v30 = *(const char **)v30;
    }
    else
    {
      v30 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No clip prim path specified in '%s'", (const char *)a2, (char *)a3, v30);
LABEL_50:
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v60;
    *(_QWORD *)(a3 + 16) = v61;
    goto LABEL_53;
  }
  v9 = *(unsigned __int8 *)(a2 + 224);
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v11 = (_BYTE *)(*(_QWORD *)(a2 + 32) + 23);
    for (i = 48 * v10; i; i -= 48)
    {
      if ((char)*v11 < 0)
      {
        if (!*(_QWORD *)(v11 - 15))
        {
LABEL_34:
          v31 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v31)
            v31 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          v32 = *((_QWORD *)v31 + 1) & 0xFFFFFFFFFFFFFFF8;
          if (v32)
          {
            v33 = (const char *)(v32 + 16);
            if (*(char *)(v32 + 39) < 0)
              v33 = *(const char **)v33;
          }
          else
          {
            v33 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Empty clip asset path in '%s'", (const char *)a2, (char *)a3, v33);
          goto LABEL_50;
        }
      }
      else if (!*v11)
      {
        goto LABEL_34;
      }
      v11 += 48;
    }
  }
  v13 = a2 + 104;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString((__int128 *)(a2 + 104), a3))
    goto LABEL_53;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v66, a2 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v14)
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v66))
  {
    v17 = *(_QWORD *)(a2 + 136);
    if (v17)
    {
      v18 = *(double **)(a2 + 168);
      v19 = (double)v10;
      v20 = 16 * v17;
      v21 = v18 + 1;
      v22 = v20;
      do
      {
        v23 = *v21;
        if (*v21 < 0.0 || v23 >= v19)
        {
          v46 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v46)
            v46 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          v47 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
          if (v47)
          {
            v48 = (const char *)(v47 + 16);
            if (*(char *)(v47 + 39) < 0)
              v48 = *(const char **)v48;
          }
          else
          {
            v48 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid clip index %d in '%s'", v15, v16, v19, (int)v23, v48);
          goto LABEL_56;
        }
        v21 += 2;
        v22 -= 16;
      }
      while (v22);
      v64 = 0;
      v65 = 0;
      v63 = (uint64_t *)&v64;
      while (1)
      {
        v60 = *(_OWORD *)v18;
        v25 = sub_20C28BBA8(&v63, (double *)&v60, (uint64_t)&v60);
        if (!(_BYTE)v26)
          break;
        v18 += 2;
        v20 -= 16;
        if (!v20)
          goto LABEL_64;
      }
      v49 = v25;
      v50 = *(_QWORD *)v18;
      v51 = v18[1];
      v52 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v52)
        v52 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      v53 = *(_QWORD *)v52 & 0xFFFFFFFFFFFFFFF8;
      if (v53)
      {
        v54 = (const char *)(v53 + 16);
        if (*(char *)(v53 + 39) < 0)
          v54 = *(const char **)v54;
      }
      else
      {
        v54 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Clip %d cannot be active at time %.3f in '%s' because clip %d was already specified as active at this time.", v26, v27, (int)v51, v50, v54, *((unsigned int *)v49 + 10));
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v37 = 0;
      *(_OWORD *)a3 = v60;
      *(_QWORD *)(a3 + 16) = v61;
      goto LABEL_96;
    }
    v64 = 0;
    v65 = 0;
    v63 = (uint64_t *)&v64;
LABEL_64:
    if (v9)
    {
      v60 = 0u;
      v61 = 0u;
      v62 = 1065353216;
      v39 = *(_QWORD *)(a2 + 184);
      if (v39)
      {
        v40 = *(double **)(a2 + 216);
        v41 = 16 * v39;
        while (1)
        {
          LODWORD(v58) = 0;
          v42 = sub_20C28BC68((uint64_t)&v60, v40, v40, &v58);
          v45 = *((_DWORD *)v42 + 6);
          *((_DWORD *)v42 + 6) = v45 + 1;
          if (v45 >= 2)
            break;
          v40 += 2;
          v41 -= 16;
          if (!v41)
            goto LABEL_69;
        }
        v55 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v55)
          v55 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v56 = *((_QWORD *)v55 + 10) & 0xFFFFFFFFFFFFFFF8;
        if (v56)
        {
          v57 = (const char *)(v56 + 16);
          if (*(char *)(v56 + 39) < 0)
            v57 = *(const char **)v57;
        }
        else
        {
          v57 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot have more than two entries in '%s' with the same stage time (%.3f).", v43, v44, v57, *(_QWORD *)v40);
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        *(_OWORD *)a3 = v58;
        *(_QWORD *)(a3 + 16) = v59;
        sub_20BEB3FA4((uint64_t)&v60);
        v37 = 0;
        goto LABEL_96;
      }
LABEL_69:
      sub_20BEB3FA4((uint64_t)&v60);
    }
    v37 = 1;
LABEL_96:
    sub_20BE6100C((uint64_t)&v63, v64);
    goto LABEL_59;
  }
  if (*(char *)(a2 + 127) < 0)
    v13 = *(_QWORD *)(a2 + 104);
  v34 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v34)
    v34 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  v35 = *((_QWORD *)v34 + 4) & 0xFFFFFFFFFFFFFFF8;
  if (v35)
  {
    v36 = (const char *)(v35 + 16);
    if (*(char *)(v35 + 39) < 0)
      v36 = *(const char **)v36;
  }
  else
  {
    v36 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Path '%s' in '%s' must be an absolute path to a prim", v15, v16, v13, v36);
LABEL_56:
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  v37 = 0;
  *(_OWORD *)a3 = v60;
  *(_QWORD *)(a3 + 16) = v61;
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
  sub_20BFD265C(&v66);
  if ((v37 & 1) == 0)
  {
LABEL_53:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  if (!*(_BYTE *)(a2 + 96))
    MEMORY[0x212B929D0](a3, "No clip manifest specified. Performance may be improved if a manifest is specified.");
  v38 = (char *)operator new(0x78uLL);
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipSet(v38, a1, a2);
  sub_20C28CED0(a4, (uint64_t)v38);
}

void sub_20C28A24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  sub_20BEB3FA4((uint64_t)&a17);
  sub_20BE6100C((uint64_t)&a23, a24);
  sub_20BFD1A18((_DWORD *)(v24 - 88));
  _Unwind_Resume(a1);
}

const char *pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipSet(char *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  _QWORD *Layers;
  char *v11;
  uint64_t v12;
  double *v13;
  unsigned int v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  double v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __n128 *v44;
  __n128 *v45;
  pxrInternal__aapl__pxrReserved__::SdfPath *v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  __n128 **v52;
  char *v53;
  unint64_t v54;
  double *v55;
  double v56;
  double v57;
  uint64_t **v58;
  uint64_t **v59;
  uint64_t **v60;
  double v61;
  uint64_t *v62;
  uint64_t **v63;
  BOOL v64;
  double v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  pxrInternal__aapl__pxrReserved__::TfToken *v70;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v72;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v73;
  uint64_t Identifier;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v89;
  uint64_t v90;
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v91;
  char **v92;
  pxrInternal__aapl__pxrReserved__::SdfPath *v93;
  const char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v98;
  int v99[2];
  const char *v100;
  uint64_t v101;
  const char *v102;
  char v103;
  __int128 v104;
  std::string v105;
  __int128 __p;
  uint64_t v107;
  _BYTE v108[24];
  _BYTE v109[24];
  uint64_t v110;
  uint64_t **v111;
  uint64_t *v112;
  uint64_t v113;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_QWORD *)__dst + 3) = *(_QWORD *)(a3 + 240);
  v6 = *(_QWORD *)(a3 + 248);
  *((_QWORD *)__dst + 4) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)__dst + 10, (_DWORD *)(a3 + 256));
  sub_20BFD6EA4((_DWORD *)__dst + 11, (_DWORD *)(a3 + 260));
  v94 = __dst;
  v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)(a3 + 240));
  Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v9);
  sub_20C1034E8((uint64_t *)__dst + 6, (uint64_t *)(*Layers + 8 * *(_QWORD *)(a3 + 264)));
  v89 = a3 + 256;
  v90 = a3 + 240;
  v93 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(__dst + 64);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(__dst + 64, a3 + 104);
  *(_OWORD *)(__dst + 72) = 0u;
  v11 = __dst + 72;
  *((_OWORD *)v11 + 1) = 0u;
  v91 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)v11;
  v92 = (char **)(v11 + 16);
  *(_OWORD *)(v11 + 25) = 0u;
  v112 = 0;
  v113 = 0;
  v111 = &v112;
  v12 = *(_QWORD *)(a3 + 136);
  if (v12)
  {
    v13 = *(double **)(a3 + 168);
    v95 = (uint64_t *)&v13[2 * v12];
    while (1)
    {
      if (!*(_BYTE *)(a3 + 40))
      {
        *(_QWORD *)&v104 = "usd/clipSet.cpp";
        *((_QWORD *)&v104 + 1) = "Usd_ClipSet";
        v105.__r_.__value_.__r.__words[0] = 361;
        v105.__r_.__value_.__l.__size_ = (std::string::size_type)"pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_Clip"
                                                                 "Set(const std::string &, const Usd_ClipSetDefinition &)";
        v105.__r_.__value_.__s.__data_[16] = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 3, (pxrInternal__aapl__pxrReserved__ *)"Clip asset paths array is not allocated.");
        v50 = v94;
        goto LABEL_126;
      }
      v14 = (int)v13[1];
      if ((v14 & 0x80000000) != 0 || *(_QWORD *)a3 <= (unint64_t)v14)
        break;
      v15 = *v13;
      v16 = *(_QWORD *)(a3 + 32);
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v108[8]);
      *(double *)v108 = v15;
      std::string::operator=((std::string *)&v108[8], (const std::string *)(v16 + 48 * v14));
      std::string::operator=((std::string *)&v109[8], (const std::string *)(v16 + 48 * v14 + 24));
      *(_QWORD *)&v104 = *(_QWORD *)v108;
      *((_QWORD *)&v104 + 1) = *(_QWORD *)v108;
      if ((v109[7] & 0x80000000) != 0)
      {
        sub_20BDDBFAC(&v105, *(void **)&v108[8], *(unint64_t *)&v108[16]);
      }
      else
      {
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v108[8];
        v105.__r_.__value_.__r.__words[2] = *(_QWORD *)v109;
      }
      if (SHIBYTE(v110) < 0)
      {
        sub_20BDDBFAC(&__p, *(void **)&v109[8], *(unint64_t *)&v109[16]);
      }
      else
      {
        __p = *(_OWORD *)&v109[8];
        v107 = v110;
      }
      v17 = v112;
      v18 = v104;
      v19 = &v112;
      v20 = &v112;
      if (v112)
      {
        while (1)
        {
          while (1)
          {
            v20 = (uint64_t **)v17;
            v21 = *((double *)v17 + 4);
            if (*(double *)&v104 >= v21)
              break;
            v17 = (uint64_t *)*v17;
            v19 = v20;
            if (!*v20)
              goto LABEL_25;
          }
          if (v21 >= *(double *)&v104)
            break;
          v17 = (uint64_t *)v17[1];
          if (!v17)
          {
            v19 = v20 + 1;
            goto LABEL_25;
          }
        }
        *(_QWORD *)v99 = "usd/clipSet.cpp";
        v100 = "Usd_ClipSet";
        v101 = 378;
        v102 = "pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipSet(const std::string &, const Usd_ClipSetDefinition &)";
        v103 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v99, "startTimeToClip.insert( std::make_pair(entry.startTime, entry)).second", 0);
      }
      else
      {
LABEL_25:
        v22 = (char *)operator new(0x60uLL);
        v23 = *((_QWORD *)&v104 + 1);
        *((_QWORD *)v22 + 4) = v18;
        *((_QWORD *)v22 + 5) = v23;
        *((_OWORD *)v22 + 3) = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
        *((_QWORD *)v22 + 8) = *((_QWORD *)&v105.__r_.__value_.__l + 2);
        memset(&v105, 0, sizeof(v105));
        *(_OWORD *)(v22 + 72) = __p;
        *((_QWORD *)v22 + 11) = v107;
        __p = 0uLL;
        v107 = 0;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = v20;
        *v19 = (uint64_t *)v22;
        if (*v111)
        {
          v111 = (uint64_t **)*v111;
          v22 = (char *)*v19;
        }
        sub_20BDDE208(v112, (uint64_t *)v22);
        ++v113;
      }
      if (SHIBYTE(v107) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110) < 0)
        operator delete(*(void **)&v109[8]);
      if ((v109[7] & 0x80000000) != 0)
        operator delete(*(void **)&v108[8]);
      v13 += 2;
      if (v13 == (double *)v95)
        goto LABEL_38;
    }
    *(_QWORD *)&v104 = "usd/clipSet.cpp";
    *((_QWORD *)&v104 + 1) = "Usd_ClipSet";
    v105.__r_.__value_.__r.__words[0] = 366;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)"pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipSet("
                                                             "const std::string &, const Usd_ClipSetDefinition &)";
    v105.__r_.__value_.__s.__data_[16] = 0;
    v50 = v94;
    v51 = v94;
    if (v94[23] < 0)
      v51 = *(const char **)v94;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 3, (pxrInternal__aapl__pxrReserved__ *)"Clipset <%s> has a bad clip index", v51);
  }
  else
  {
LABEL_38:
    v24 = operator new(0x18uLL);
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    sub_20C28D0D8(v99, (uint64_t)v24);
    if (*(_BYTE *)(a3 + 224))
    {
      v26 = *(_QWORD *)(a3 + 184);
      if (v26)
      {
        v27 = *(uint64_t **)(a3 + 216);
        v28 = &v27[2 * v26];
        do
        {
          v30 = *v27;
          v29 = v27[1];
          v31 = *(void ***)v99;
          v32 = *(_QWORD *)(*(_QWORD *)v99 + 8);
          v33 = *(_QWORD *)(*(_QWORD *)v99 + 16);
          if (v32 >= v33)
          {
            v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - **(_QWORD **)v99) >> 3);
            v36 = v35 + 1;
            if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - **(_QWORD **)v99) >> 3);
            if (2 * v37 > v36)
              v36 = 2 * v37;
            if (v37 >= 0x555555555555555)
              v38 = 0xAAAAAAAAAAAAAAALL;
            else
              v38 = v36;
            if (v38)
              v39 = (char *)sub_20BDE4FF4(*(_QWORD *)v99 + 16, v38);
            else
              v39 = 0;
            v40 = &v39[24 * v35];
            *(_QWORD *)v40 = v30;
            *((_QWORD *)v40 + 1) = v29;
            v40[16] = 0;
            v42 = (char *)*v31;
            v41 = (char *)v31[1];
            v43 = v40;
            if (v41 != *v31)
            {
              do
              {
                v25 = *(__n128 *)(v41 - 24);
                *(v43 - 8) = *(v41 - 8);
                *(__n128 *)(v43 - 24) = v25;
                v43 -= 24;
                v41 -= 24;
              }
              while (v41 != v42);
              v41 = (char *)*v31;
            }
            v34 = v40 + 24;
            *v31 = v43;
            v31[1] = v40 + 24;
            v31[2] = &v39[24 * v38];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *(_QWORD *)v32 = v30;
            *(_QWORD *)(v32 + 8) = v29;
            v34 = (char *)(v32 + 24);
            *(_BYTE *)(v32 + 16) = 0;
          }
          v31[1] = v34;
          v27 += 2;
        }
        while (v27 != v28);
      }
    }
    v44 = **(__n128 ***)v99;
    v45 = *(__n128 **)(*(_QWORD *)v99 + 8);
    v46 = v93;
    if (**(__n128 ***)v99 != v45)
    {
      if ((char *)v45 - (char *)v44 < 3073)
      {
        v47 = 0;
        v49 = 0;
      }
      else
      {
        v47 = (__n128 *)sub_20C28D1E0(0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
        v49 = v48;
      }
      sub_20C28D248(v44, v45, (uint64_t)v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3), v47, v49, v25);
      if (v47)
        operator delete(v47);
      v52 = *(__n128 ***)v99;
      v53 = **(char ***)v99;
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v99 + 8) - **(_QWORD **)v99) >> 3) - 1;
      v46 = v93;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v99 + 8) - **(_QWORD **)v99) >> 3) != 1)
      {
        v55 = (double *)(v53 + 24);
        v56 = *(double *)v53;
        do
        {
          v57 = *v55;
          if (v56 == *v55)
          {
            *(v55 - 3) = v56 + -0.0000000044408921;
            *((_BYTE *)v55 - 8) = 1;
          }
          v55 += 3;
          v56 = v57;
          --v54;
        }
        while (v54);
      }
      sub_20C28AE78((uint64_t)v52, v53, (unint64_t)v53);
      sub_20C28AE78(*(uint64_t *)v99, *(char **)(*(_QWORD *)v99 + 8), *(_QWORD *)(*(_QWORD *)v99 + 8) - 24);
    }
    v58 = v111;
    if (v111 != &v112)
    {
      v59 = v111;
      do
      {
        v60 = v59;
        if (v59 == v58)
          v61 = -1.79769313e308;
        else
          v61 = *((double *)v59 + 4);
        v62 = v59[1];
        v63 = v59;
        if (v62)
        {
          do
          {
            v59 = (uint64_t **)v62;
            v62 = (uint64_t *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            v59 = (uint64_t **)v63[2];
            v64 = *v59 == (uint64_t *)v63;
            v63 = v59;
          }
          while (!v64);
        }
        if (v59 == &v112)
          v65 = 1.79769313e308;
        else
          v65 = *((double *)v59 + 4);
        v66 = operator new(0xD8uLL);
        pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(v66, v90, v89, *(_QWORD *)(a3 + 264), v60 + 6, v46, v99, *((double *)v60 + 5), v61, v65);
        sub_20C28DF64(&v104, (uint64_t)v66);
        sub_20BDEA72C(v92, &v104);
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
      }
      while (v59 != &v112);
    }
    v50 = v94;
    if (*(_BYTE *)(a3 + 233))
      *((_BYTE *)v94 + 112) = *(_BYTE *)(a3 + 232);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v104);
    v98 = 0;
    if (*(_BYTE *)(a3 + 96))
    {
      std::string::operator=((std::string *)&v104, (const std::string *)(a3 + 48));
      std::string::operator=((std::string *)&v105.__r_.__value_.__r.__words[1], (const std::string *)(a3 + 72));
    }
    else
    {
      v70 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C2893F8();
      if ((*(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v70);
      pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest((pxrInternal__aapl__pxrReserved__::Usd_Clip ***)v92, v46, EmptyString, 0, (uint64_t *)v108);
      v72 = v98;
      v98 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v108;
      *(_QWORD *)v108 = 0;
      sub_20BF1D8F4((int)&v98, v72);
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v108);
      v73 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v98);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v73);
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v108, Identifier);
      if (v105.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v104);
      v104 = *(_OWORD *)v108;
      v105.__r_.__value_.__r.__words[0] = *(_QWORD *)&v108[16];
      v108[23] = 0;
      v108[0] = 0;
      if (SBYTE7(__p) < 0)
      {
        operator delete((void *)v105.__r_.__value_.__l.__size_);
        *(_OWORD *)&v105.__r_.__value_.__r.__words[1] = *(_OWORD *)v109;
        *(_QWORD *)&__p = *(_QWORD *)&v109[16];
        v109[23] = 0;
        v109[0] = 0;
        if ((v108[23] & 0x80000000) != 0)
          operator delete(*(void **)v108);
      }
      else
      {
        *(_OWORD *)&v105.__r_.__value_.__r.__words[1] = *(_OWORD *)v109;
        *(_QWORD *)&__p = *(_QWORD *)&v109[16];
      }
    }
    v75 = operator new(0xD8uLL);
    v76 = *(_QWORD *)(a3 + 264);
    v77 = operator new(0x30uLL);
    v77[2] = 0;
    *v77 = &unk_24C52E648;
    v77[1] = 0;
    v77[4] = 0;
    v77[5] = 0;
    v77[3] = 0;
    *(_QWORD *)v108 = v77 + 3;
    *(_QWORD *)&v108[8] = v77;
    pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(v75, v90, v89, v76, &v104, v46, v108, -1.79769313e308, -1.79769313e308, 1.79769313e308);
    sub_20C28B13C(v91, (uint64_t)v75);
    v78 = *(std::__shared_weak_count **)&v108[8];
    if (*(_QWORD *)&v108[8])
    {
      v79 = (unint64_t *)(*(_QWORD *)&v108[8] + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    if (v98)
    {
      pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer(*v91, &v96);
      v81 = v97;
      if (v97)
      {
        v82 = (unsigned int *)(v97 + 8);
        do
        {
          v83 = __ldxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
          (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
      }
    }
    sub_20C103234(&v98);
    if (SBYTE7(__p) < 0)
      operator delete((void *)v105.__r_.__value_.__l.__size_);
    if (v105.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v104);
    v85 = (std::__shared_weak_count *)v100;
    if (v100)
    {
      v86 = (unint64_t *)(v100 + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
LABEL_126:
  sub_20C28D080((char *)v112);
  return v50;
}

void sub_20C28AC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a14, uint64_t a15, _DWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;

  sub_20C28D080(*(char **)(v37 - 128));
  a30 = a15;
  sub_20BDE9EB0((void ***)&a30);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a14);
  sub_20BFD1A18(a16);
  v39 = *(unsigned int **)(a17 + 56);
  if (v39)
  {
    v40 = v39 + 2;
    do
    {
      v41 = __ldxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
  }
  sub_20BFD1A18(a11);
  v43 = *(unsigned int **)(a17 + 32);
  if (v43)
  {
    v44 = v43 + 2;
    do
    {
      v45 = __ldxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
  }
  if (*(char *)(a17 + 23) < 0)
    operator delete(*(void **)a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28AE38(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

char *sub_20C28AE78(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v15 = __src - v13;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v13) >> 3);
    if (2 * v17 > v14)
      v14 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v14;
    v33 = a1 + 16;
    if (v18)
      v19 = (char *)sub_20BDE4FF4(a1 + 16, v18);
    else
      v19 = 0;
    v22 = &v19[24 * v16];
    __p = v19;
    v30 = v22;
    v31 = v22;
    v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v24 = 1;
        else
          v24 = 2 * v16;
        v25 = (char *)sub_20BDE4FF4(v8, v24);
        v22 = &v25[24 * (v24 >> 2)];
        __p = v25;
        v30 = v22;
        v32 = &v25[24 * v26];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v23 = v16 + 2;
        if (v16 >= -1)
          v23 = v16 + 1;
        v22 -= 24 * (v23 >> 1);
        v30 = v22;
      }
    }
    v27 = *(_OWORD *)v3;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v22 = v27;
    v31 = v22 + 24;
    v4 = (char *)sub_20C28DE84((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30)
      v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v21 = *(_OWORD *)a3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 24;
  }
  else
  {
    v9 = __src + 24;
    v10 = v6 - 24;
    v11 = *(_QWORD *)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v11 = v12;
      v11 += 24;
      v10 += 24;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(v9, __src, v6 - v9 - 7);
    if ((unint64_t)v4 <= v3)
      v3 += 24 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_OWORD *)v3;
    v4[16] = *(_BYTE *)(v3 + 16);
    *(_OWORD *)v4 = v20;
  }
  return v4;
}

void sub_20C28B0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C28B13C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C28DF64(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_Clip **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v5;

  if (*(_BYTE *)(a1 + 112)
    && ((v5 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)(a1 + 72),
         (pxrInternal__aapl__pxrReserved__::Usd_Clip::IsBlocked(*(pxrInternal__aapl__pxrReserved__::Usd_Clip **)(a1 + 72), a3, *((double *)*a2 + 12)) & 1) != 0)|| !pxrInternal__aapl__pxrReserved__::Usd_Clip::HasAuthoredTimeSamples(*a2, a3)))
  {
    return sub_20C28B228(v5, a3, 0) != 0;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_20C28B228(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C28E234(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_ClipSet *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  unint64_t ClipIndexForTime;
  double ****v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  double v23;
  double v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(this, a3);
  v11 = (double ****)(*((_QWORD *)this + 11) + 16 * ClipIndexForTime);
  v12 = 16 * ClipIndexForTime;
  if (pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Usd_Clip **)v11, a2))
  {
    if ((pxrInternal__aapl__pxrReserved__::Usd_Clip::GetBracketingTimeSamplesForPath(*v11, a2, a3, a4, a5) & 1) != 0
      || (v25 = "usd/clipSet.cpp",
          v26 = "GetBracketingTimeSamplesForPath",
          v27 = 527,
          v28 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetBracketingTimeSamplesForPath(const SdfPath &, dou"
                "ble, double *, double *) const",
          v29 = 0,
          v13 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "activeClip->GetBracketingTimeSamplesForPath( path, time, lower, upper)", 0) & 1) != 0))
    {
      v13 = 1;
      if (*a4 == *a5 && *a5 < a3)
      {
LABEL_15:
        while (1)
        {
          ++ClipIndexForTime;
          v18 = *((_QWORD *)this + 11);
          if (ClipIndexForTime >= (*((_QWORD *)this + 12) - v18) >> 4)
            break;
          v19 = v12 + 16;
          v20 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v18 + v12 + 16), a2);
          v12 += 16;
          if (v20)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v18 + v19) + 104);
            *(_QWORD *)a5 = v21;
            if ((v13 & 1) != 0)
              return 1;
            goto LABEL_22;
          }
        }
        if ((v13 & 1) != 0)
        {
          *a5 = *a4;
          return 1;
        }
        v21 = *(_QWORD *)(*(_QWORD *)v18 + 96);
        *(_QWORD *)a5 = v21;
LABEL_22:
        *(_QWORD *)a4 = v21;
        return 1;
      }
    }
  }
  else
  {
    if (!ClipIndexForTime)
    {
LABEL_12:
      LOBYTE(v13) = 0;
      goto LABEL_15;
    }
    v15 = v12 - 16;
    v16 = ClipIndexForTime;
    while (1)
    {
      v17 = *((_QWORD *)this + 11);
      if (pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v17 + v15), a2))
      {
        break;
      }
      v15 -= 16;
      if (!--v16)
        goto LABEL_12;
    }
    v23 = 0.0;
    v24 = 0.0;
    if ((pxrInternal__aapl__pxrReserved__::Usd_Clip::GetBracketingTimeSamplesForPath(*(double ****)(v17 + v15), a2, a3, &v24, &v23) & 1) != 0|| (v25 = "usd/clipSet.cpp", v26 = "GetBracketingTimeSamplesForPath", v27 = 563, v28 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetBracketingTimeSamplesForPath(const SdfPath &, double, double *, double *) const", v29 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "clip->GetBracketingTimeSamplesForPath( path, time, &tmpLower, &tmpUpper)", 0) & 1) != 0))
    {
      *a4 = v23;
      LOBYTE(v13) = 1;
      goto LABEL_15;
    }
    return 0;
  }
  return v13;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(pxrInternal__aapl__pxrReserved__::Usd_ClipSet *this, double a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  char v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;

  v4 = (char *)*((_QWORD *)this + 11);
  v5 = (char *)*((_QWORD *)this + 12);
  if ((unint64_t)(v5 - v4) < 0x11)
  {
    v11 = 0;
  }
  else
  {
    if (v5 != v4)
    {
      v6 = (v5 - v4) >> 4;
      v5 = (char *)*((_QWORD *)this + 11);
      do
      {
        v7 = v6 >> 1;
        v8 = (uint64_t *)&v5[16 * (v6 >> 1)];
        v10 = *v8;
        v9 = (char *)(v8 + 2);
        v6 += ~(v6 >> 1);
        if (*(double *)(v10 + 104) > a2)
          v6 = v7;
        else
          v5 = v9;
      }
      while (v6);
    }
    if (v4 != v5)
      goto LABEL_9;
    v16 = "usd/clipSet.cpp";
    v17 = "_FindClipIndexForTime";
    v18 = 700;
    v19 = "size_t pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(double) const";
    v20 = 0;
    v15 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "it != valueClips.begin()", 0);
    v11 = 0;
    v4 = (char *)*((_QWORD *)this + 11);
    if ((v15 & 1) != 0)
LABEL_9:
      v11 = ((v5 - v4) >> 4) - 1;
  }
  if (v11 < (uint64_t)(*((_QWORD *)this + 12) - (_QWORD)v4) >> 4)
  {
    v12 = *(_QWORD *)&v4[16 * v11];
    if (*(double *)(v12 + 104) <= a2 && *(double *)(v12 + 112) > a2)
      return v11;
  }
  v16 = "usd/clipSet.cpp";
  v17 = "_FindClipIndexForTime";
  v18 = 714;
  v19 = "size_t pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(double) const";
  v20 = 0;
  v14 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "clipIndex < valueClips.size() && time >= valueClips[clipIndex]->startTime && time < valueClips[clipIndex]->endTime", 0);
  result = 0;
  if (v14)
    return v11;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipSet::ListTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_ClipSet *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v5;
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v6;
  double *v8;
  double v9[2];

  a3[2] = 0;
  a3[1] = 0;
  *a3 = (uint64_t)(a3 + 1);
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)*((_QWORD *)this + 11);
  v6 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)*((_QWORD *)this + 12);
  if (v5 == v6)
    goto LABEL_6;
  do
  {
    if (pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue((uint64_t)this, v5, a2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_Clip::ListTimeSamplesForPath(*v5, a2, (uint64_t)&v8);
      sub_20C0E5E30(a3, v8, v9);
      sub_20BE6100C((uint64_t)&v8, *(_QWORD **)&v9[0]);
    }
    v5 += 2;
  }
  while (v5 != v6);
  if (!a3[2])
LABEL_6:
    sub_20C6CC72C((uint64_t **)a3, (double *)(**((_QWORD **)this + 11) + 96), (uint64_t *)(**((_QWORD **)this + 11) + 96));
}

void sub_20C28B740(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetTimeSamplesInInterval(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v8;
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v9;
  double v10;
  double v11;
  _QWORD *v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  double v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v24;
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v25;
  _BOOL4 v26;
  int v27;
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v28;
  double v29;
  BOOL v30;
  double v31;
  BOOL v32;
  unint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  double *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46[2];
  char v47;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 88);
  v9 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 96);
  if (v8 != v9)
  {
    while (1)
    {
      v10 = *((double *)*v8 + 13);
      v11 = *(double *)(a3 + 16);
      if (*(_BYTE *)(a3 + 24))
      {
        if (v10 > v11)
          goto LABEL_36;
      }
      else if (v10 > v11)
      {
        goto LABEL_36;
      }
      v12 = (_QWORD *)*((_QWORD *)*v8 + 14);
      v45 = *((_QWORD *)*v8 + 13);
      LOBYTE(v46[0]) = fabs(v10) != INFINITY;
      v46[1] = v12;
      v47 = 0;
      if (!sub_20BF06DF4((__int128 *)a3, (uint64_t)&v45)
        || !pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue(a2, v8, a1))
      {
        goto LABEL_35;
      }
      pxrInternal__aapl__pxrReserved__::Usd_Clip::ListTimeSamplesForPath(*v8, a1, (uint64_t)&v45);
      v13 = *(double *)a3;
      v14 = v46[0];
      if (*(_BYTE *)(a3 + 8))
      {
        if (v46[0])
        {
          v15 = v46;
          v16 = v46[0];
          do
          {
            v17 = v16 + 1;
            if (*((double *)v16 + 4) >= v13)
            {
              v17 = v16;
              v15 = v16;
            }
            v16 = (_QWORD *)*v17;
          }
          while (*v17);
          goto LABEL_22;
        }
      }
      else if (v46[0])
      {
        v15 = v46;
        v18 = v46[0];
        do
        {
          v19 = v18 + 1;
          if (v13 < *((double *)v18 + 4))
          {
            v19 = v18;
            v15 = v18;
          }
          v18 = (_QWORD *)*v19;
        }
        while (*v19);
        goto LABEL_22;
      }
      v15 = v46;
LABEL_22:
      v20 = *(double *)(a3 + 16);
      v21 = v46;
      if (*(_BYTE *)(a3 + 24))
      {
        if (v46[0])
        {
          v21 = v46;
          do
          {
            v22 = v14 + 1;
            if (v20 < *((double *)v14 + 4))
            {
              v22 = v14;
              v21 = v14;
            }
            v14 = (_QWORD *)*v22;
          }
          while (*v22);
        }
      }
      else if (v46[0])
      {
        v21 = v46;
        do
        {
          v23 = v14 + 1;
          if (*((double *)v14 + 4) >= v20)
          {
            v23 = v14;
            v21 = v14;
          }
          v14 = (_QWORD *)*v23;
        }
        while (*v23);
      }
      sub_20C28BEA0(a4, *(char **)(a4 + 8), v15, v21);
      sub_20BE6100C((uint64_t)&v45, v46[0]);
LABEL_35:
      v8 += 2;
      if (v8 == v9)
      {
LABEL_36:
        if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
          break;
        return;
      }
    }
  }
  v24 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 88);
  v25 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 96);
  if (v24 != v25)
  {
    do
    {
      v26 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue(a2, v24, a1);
      v24 += 2;
      v27 = v24 == v25 || v26;
    }
    while (v27 != 1);
    if (v26)
      return;
    v24 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 88);
  }
  v28 = *v24;
  v29 = *((double *)*v24 + 12);
  if (*(double *)a3 < v29 || (*(double *)a3 == v29 ? (v30 = *(_BYTE *)(a3 + 8) == 0) : (v30 = 1), !v30))
  {
    v31 = *(double *)(a3 + 16);
    if (v31 > v29 || (v31 == v29 ? (v32 = *(_BYTE *)(a3 + 24) == 0) : (v32 = 1), !v32))
    {
      v33 = *(_QWORD *)(a4 + 16);
      v34 = *(double **)(a4 + 8);
      if ((unint64_t)v34 >= v33)
      {
        v36 = *(double **)a4;
        v37 = ((uint64_t)v34 - *(_QWORD *)a4) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          sub_20BDDF694();
        v39 = v33 - (_QWORD)v36;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)sub_20BDDF6A8(a4 + 16, v40);
          v36 = *(double **)a4;
          v34 = *(double **)(a4 + 8);
          v29 = *((double *)v28 + 12);
        }
        else
        {
          v41 = 0;
        }
        v42 = (double *)&v41[8 * v37];
        v43 = &v41[8 * v40];
        *v42 = v29;
        v35 = v42 + 1;
        while (v34 != v36)
        {
          v44 = *((_QWORD *)v34-- - 1);
          *((_QWORD *)v42-- - 1) = v44;
        }
        *(_QWORD *)a4 = v42;
        *(_QWORD *)(a4 + 8) = v35;
        *(_QWORD *)(a4 + 16) = v43;
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v34 = v29;
        v35 = v34 + 1;
      }
      *(_QWORD *)(a4 + 8) = v35;
    }
  }
}

void sub_20C28BA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C28BABC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20BDDF5DC((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

void sub_20C28BB0C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *sub_20C28BB20(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *result;
  void *v4;

  result = sub_20C28BB68();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType::~UsdClipsAPIInfoKeys_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *sub_20C28BB68()
{
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType::UsdClipsAPIInfoKeys_StaticTokenType(v0);
  return v0;
}

void sub_20C28BB94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_20C28BBA8(uint64_t **a1, double *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  _QWORD *v10;
  double v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v11 = *(double *)(a3 + 8);
    v10[4] = *(_QWORD *)a3;
    *((_DWORD *)v10 + 10) = (int)v11;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

double *sub_20C28BC68(uint64_t a1, double *a2, double *a3, _DWORD *a4)
{
  double v4;
  double v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  double *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  double **v21;
  unint64_t v22;

  if (*a2 == 0.0)
    v8 = 0.0;
  else
    v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (*(_QWORD *)&v8 >= v9)
        *(_QWORD *)&v4 = *(_QWORD *)&v8 % v9;
    }
    else
    {
      *(_QWORD *)&v4 = (v9 - 1) & *(_QWORD *)&v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v4);
    if (v11)
    {
      v12 = (double *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == *(_QWORD *)&v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != *(_QWORD *)&v4)
              break;
          }
          v12 = *(double **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (double *)operator new(0x20uLL);
  *v12 = 0.0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (*(_QWORD *)&v8 >= v9)
        *(_QWORD *)&v4 = *(_QWORD *)&v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      *(_QWORD *)&v4 = (v9 - 1) & *(_QWORD *)&v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(double ***)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v4);
  if (v21)
  {
    *(_QWORD *)v12 = *v21;
LABEL_41:
    *v21 = v12;
    goto LABEL_42;
  }
  *v12 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * *(_QWORD *)&v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (double **)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20C28BE8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20C28BEA0(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_20C28BEF8(a1, a2, a3, a4, v4);
}

char *sub_20C28BEF8(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  void *__p;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      __p = a3;
      sub_20BE754A0((_QWORD **)&__p, a5);
      v20 = *(char **)(a1 + 8);
      v21 = v20 - v5;
      if (a5 > (v20 - v5) >> 3)
      {
        __p = v7;
        sub_20BE754A0((_QWORD **)&__p, v21 >> 3);
        sub_20BF8C924(a1, __p, a4);
        if (v21 < 1)
          return v5;
        v20 = *(char **)(a1 + 8);
      }
      v22 = &v5[8 * a5];
      v23 = &v20[-8 * a5];
      v24 = v20;
      if ((unint64_t)v23 < v12)
      {
        v24 = v20;
        do
        {
          v25 = *(_QWORD *)v23;
          v23 += 8;
          *(_QWORD *)v24 = v25;
          v24 += 8;
        }
        while ((unint64_t)v23 < v12);
      }
      *(_QWORD *)(a1 + 8) = v24;
      if (v20 != v22)
        memmove(&v20[-8 * ((v20 - v22) >> 3)], v5, v20 - v22);
      sub_20C28C208(v7, __p, v5);
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
      if (v14 >> 61)
        sub_20BDDF694();
      v15 = (a2 - v13) >> 3;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v36 = v9;
      if (v17)
        v18 = (char *)sub_20BDDF6A8(v9, v17);
      else
        v18 = 0;
      v26 = &v18[8 * v15];
      __p = v18;
      v33 = v26;
      v35 = &v18[8 * v17];
      v27 = &v26[8 * a5];
      do
      {
        *(_QWORD *)v26 = v7[4];
        v26 += 8;
        v28 = (_QWORD *)v7[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v7[2];
            v30 = *v29 == (_QWORD)v7;
            v7 = v29;
          }
          while (!v30);
        }
        v7 = v29;
      }
      while (v26 != v27);
      v34 = v27;
      v5 = sub_20C28C144((void **)a1, (uint64_t)&__p, v5);
      if (v34 != v33)
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_20C28C10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C28C144(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *sub_20C28C208(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  if (result != a2)
  {
    do
    {
      *a3 = result[4];
      v3 = (_QWORD *)result[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)result[2];
          v5 = *v4 == (_QWORD)result;
          result = v4;
        }
        while (!v5);
      }
      ++a3;
      result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

__n128 sub_20C28C268(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C52E360;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C28C2A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C52E360;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C28C2C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  int v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  int v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  unint64_t ***Schema;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t Type;
  int v20;
  uint64_t v21;
  uint64_t (**v22)(_QWORD, uint64_t);
  int *v23;
  std::type_info *v24;
  __int16 v25;

  result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v5 + 8))
    {
      if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(v5 + 8)) + 14))
        v6 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)v5;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v21 = 0;
    v20 = 0;
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(*(uint64_t **)(a1 + 8));
    result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v7, this);
    if ((result & 1) == 0)
    {
      result = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v6, this);
      if ((_DWORD)result == 1)
      {
        v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v8)
          v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v24 = &stru_24C51BCE0;
        v25 = 0;
        v22 = (uint64_t (**)(_QWORD, uint64_t))&unk_24C5286B0;
        v23 = (int *)&v21;
        result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 448), &v22);
        if ((_BYTE)v25)
          v9 = 0;
        else
          v9 = result;
        if (v9 == 1)
        {
          v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v10)
            v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          v24 = &stru_24C5269D8;
          v25 = 0;
          v22 = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E3D0;
          v23 = &v20;
          result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 464), &v22);
          if ((_BYTE)v25)
            v11 = 0;
          else
            v11 = result;
          if (v11 == 1)
          {
            v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(*(uint64_t **)(a1 + 16));
            result = pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(v12, this);
            if (result)
            {
              sub_20C1034E8((uint64_t *)&v22, *(uint64_t **)(a1 + 8));
              Schema = (unint64_t ***)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v6);
              Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21);
              pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimAttributeInLayer(&v22, this, (uint64_t)&Type, v20, 0);
              result = (uint64_t)v23;
              if (v23)
              {
                v14 = (unsigned int *)(v23 + 2);
                do
                {
                  v15 = __ldxr(v14);
                  v16 = v15 - 1;
                }
                while (__stlxr(v16, v14));
                if (!v16)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              }
            }
          }
        }
      }
    }
    if ((v21 & 7) != 0)
    {
      v17 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  return result;
}

void sub_20C28C4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a12 & 7) != 0)
  {
    v14 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C28C528(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52E3F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C28C564()
{
  return &unk_24C52E3F8;
}

uint64_t sub_20C28C570(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C030CF4(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28C5F0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C030CF4(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_20C28C654(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C28C654(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C28C6A8(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

_QWORD *sub_20C28C6A8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

void sub_20C28C734(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20C28C7B8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C28C7B8(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 16) = v3;
    operator delete(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
  return sub_20BFD265C((_DWORD *)a2);
}

__n128 sub_20C28C7FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C52E418;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C28C83C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C52E418;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C28C864(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v4;
  unint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *__p;
  char *v20;
  char *v21;

  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
  {
    v20 = 0;
    v21 = 0;
    __p = 0;
    v4 = **(_QWORD **)(a1 + 8);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) != v4)
    {
      v5 = 0;
      do
      {
        v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)(v4 + 16 * v5));
        if (!pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(v6, this))
        {
          v7 = ***(_QWORD ***)(a1 + 16);
          v8 = v20;
          if (v20 >= v21)
          {
            v10 = (char *)__p;
            v11 = (v20 - (_BYTE *)__p) >> 3;
            v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 61)
              sub_20BDDF694();
            v13 = v21 - (_BYTE *)__p;
            if ((v21 - (_BYTE *)__p) >> 2 > v12)
              v12 = v13 >> 2;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              v15 = (char *)sub_20BDDF6A8((uint64_t)&v21, v14);
              v10 = (char *)__p;
              v8 = v20;
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[8 * v11];
            *(_QWORD *)v16 = *(_QWORD *)(v7 + 8 * v5);
            v9 = v16 + 8;
            while (v8 != v10)
            {
              v17 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v16 - 1) = v17;
              v16 -= 8;
            }
            __p = v16;
            v20 = v9;
            v21 = &v15[8 * v14];
            if (v10)
              operator delete(v10);
          }
          else
          {
            *(_QWORD *)v20 = *(_QWORD *)(v7 + 8 * v5);
            v9 = v8 + 8;
          }
          v20 = v9;
        }
        ++v5;
        v4 = **(_QWORD **)(a1 + 8);
      }
      while (v5 < (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v4) >> 4);
      v18 = (char *)__p;
      if (__p != v20)
      {
        sub_20C28CA5C(*(uint64_t **)(a1 + 24), this, (uint64_t)&__p);
        v18 = (char *)__p;
      }
      if (v18)
      {
        v20 = v18;
        operator delete(v18);
      }
    }
  }
}

void sub_20C28C9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C28CA14(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52E478))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C28CA50()
{
  return &unk_24C52E478;
}

uint64_t sub_20C28CA5C(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 5;
    if ((unint64_t)(v11 + 1) >> 59)
      sub_20BDDF694();
    v12 = v7 - *a1;
    v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)sub_20BED2F10(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = &v15[32 * v11];
    v20 = &v15[32 * v14];
    sub_20C28CB6C((uint64_t)v18, a2, a3);
    v19 = v18 + 32;
    sub_20C28CBCC(a1, &v17);
    v10 = a1[1];
    sub_20C28CDBC(&v17);
  }
  else
  {
    sub_20C28CB6C(*(_QWORD *)(v6 - 8), a2, a3);
    v10 = v9 + 32;
    a1[1] = v9 + 32;
  }
  a1[1] = v10;
  return v10 - 32;
}

void sub_20C28CB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C28CDBC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28CB6C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v6;

  v6 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return a1;
}

uint64_t sub_20C28CBCC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C28CC40((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C28CC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C28CCE4(v7 - 32, v9);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C28CD38((uint64_t)v12);
  return v10;
}

uint64_t sub_20C28CCE4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_20BFD38A4((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD38DC(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sub_20C28CD38(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C28CD6C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C28CD6C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C28C7B8(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C28CDBC(void **a1)
{
  sub_20C28CDEC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C28CDEC(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 32;
      result = sub_20C28C7B8(v4, v1 - 32);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C28CE30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a2 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C52AE00 + 3;
  return 1;
}

uint64_t sub_20C28CE84(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_20C0AA3E8(a2);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  return v3;
}

_QWORD *sub_20C28CED0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52E4E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C28CF18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (v1)
  {
    v3 = (void *)sub_20C28CFB0(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C28CF38(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C28CF4C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = (void *)sub_20C28CFB0(v1);
    operator delete(v2);
  }
}

uint64_t sub_20C28CF70(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52E530))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C28CFB0(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v11;

  v11 = (void **)(a1 + 88);
  sub_20BDE9EB0(&v11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 72));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_20BFD265C((_DWORD *)(a1 + 40));
  v6 = *(unsigned int **)(a1 + 32);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C28D080(char *a1)
{
  if (a1)
  {
    sub_20C28D080(*(_QWORD *)a1);
    sub_20C28D080(*((_QWORD *)a1 + 1));
    if (a1[95] < 0)
      operator delete(*((void **)a1 + 9));
    if (a1[71] < 0)
      operator delete(*((void **)a1 + 6));
    operator delete(a1);
  }
}

_QWORD *sub_20C28D0D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52E558;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C28D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;

  a10 = 0;
  if (v10)
    sub_20C28D1A8((int)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20C28D14C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C28D160(uint64_t a1)
{
  sub_20C28D1A8(a1 + 24, *(void ***)(a1 + 24));
}

uint64_t sub_20C28D168(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52E5A8))
    return a1 + 24;
  else
    return 0;
}

void sub_20C28D1A8(int a1, void **__p)
{
  void *v3;

  if (__p)
  {
    v3 = *__p;
    if (*__p)
    {
      __p[1] = v3;
      operator delete(v3);
    }
    operator delete(__p);
  }
}

void *sub_20C28D1E0(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x555555555555555)
    v1 = 0x555555555555555;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(24 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double sub_20C28D248(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  __n128 *v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v16;
  __n128 *v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v9 = (__n128 *)((char *)a2 - 24);
      a7.n128_u64[0] = a2[-2].n128_u64[1];
      if (a7.n128_f64[0] < a1->n128_f64[0])
      {
        a7 = *a1;
        v10 = a1[1].n128_u64[0];
        v11 = a2[-1].n128_u8[8];
        *a1 = *v9;
        a1[1].n128_u8[0] = v11;
        a2[-1].n128_u8[8] = v10;
        *v9 = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v16 = a4 >> 1;
      v17 = (__n128 *)((char *)a1 + 24 * (a4 >> 1));
      v18 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v20.n128_f64[0] = sub_20C28D4A0(a1, v17, a3, v18, (uint64_t)a5, a7);
        sub_20C28D4A0((__n128 *)((char *)a1 + 24 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), (uint64_t)a5 + 24 * v16, v20);
        a7.n128_u64[0] = sub_20C28D600(a5, (__n128 *)((char *)a5 + 24 * v16), (__n128 *)((char *)a5 + 24 * v16), (__n128 *)((char *)a5 + 24 * a4), a1).n128_u64[0];
      }
      else
      {
        sub_20C28D248(a1, v17, a3, v18, a5, a6);
        sub_20C28D248((char *)a1 + 24 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = sub_20C28D6AC(a1->n128_f64, &a1->n128_f64[3 * (a4 >> 1)], a2->n128_f64, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v19).n128_u64[0];
      }
    }
    else
    {
      sub_20C28D3F8((uint64_t)a1, a2->n128_f64);
    }
  }
  return a7.n128_f64[0];
}

uint64_t sub_20C28D3F8(uint64_t result, double *a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if ((double *)result != a2)
  {
    v2 = (double *)(result + 24);
    if ((double *)(result + 24) != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *v2;
        if (*v2 < *(double *)v4)
        {
          v10 = *(_OWORD *)(v4 + 32);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_BYTE *)(v8 + 40) = *(_BYTE *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v6 >= *(double *)(v8 - 24))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(double *)v9 = v6;
          *(_QWORD *)(v9 + 8) = v10;
          *(_BYTE *)(v9 + 16) = BYTE8(v10);
        }
        v2 = v5 + 3;
        v3 += 24;
        v4 = (uint64_t)v5;
      }
      while (v5 + 3 != a2);
    }
  }
  return result;
}

double sub_20C28D4A0(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  __n128 *v10;
  __n128 v11;
  unint64_t v12;
  __n128 v14;

  if (a4)
  {
    if (a4 == 2)
    {
      v10 = (__n128 *)((char *)a2 - 24);
      if (a2[-2].n128_f64[1] >= a1->n128_f64[0])
      {
        v14 = *a1;
        *(_QWORD *)(a5 + 16) = a1[1].n128_u64[0];
        *(__n128 *)a5 = v14;
        a6 = *v10;
        v12 = a2[-1].n128_u64[1];
      }
      else
      {
        v11 = *v10;
        *(_QWORD *)(a5 + 16) = a2[-1].n128_u64[1];
        *(__n128 *)a5 = v11;
        a6 = *a1;
        v12 = a1[1].n128_u64[0];
      }
      *(_QWORD *)(a5 + 40) = v12;
      *(__n128 *)(a5 + 24) = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *(_QWORD *)(a5 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a5 = a6;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_20C28D248(a1, (char *)a1 + 24 * (a4 >> 1), a3, a4 >> 1, a5, a4 >> 1);
      sub_20C28D248((char *)a1 + 24 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5 + 24 * (a4 >> 1), a4 - (a4 >> 1));
      a6.n128_u64[0] = sub_20C28DA40(a1, (__n128 *)((char *)a1 + 24 * (a4 >> 1)), (__n128 *)((char *)a1 + 24 * (a4 >> 1)), a2, (__n128 *)a5).n128_u64[0];
    }
    else
    {
      sub_20C28D970((__int128 *)a1, (__int128 *)a2, a5);
    }
  }
  return a6.n128_f64[0];
}

__n128 sub_20C28D600(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  uint64_t v6;
  __n128 *v7;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        result = *a3;
        a5[1].n128_u8[0] = a3[1].n128_u8[0];
        *a5 = result;
        a5 = (__n128 *)((char *)a5 + 24);
        a3 = (__n128 *)((char *)a3 + 24);
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (a3->n128_f64[0] >= a1->n128_f64[0])
    {
      result = *a1;
      a5[1].n128_u8[0] = a1[1].n128_u8[0];
      *a5 = result;
      a1 = (__n128 *)((char *)a1 + 24);
    }
    else
    {
      result = *a3;
      a5[1].n128_u8[0] = a3[1].n128_u8[0];
      *a5 = result;
      a3 = (__n128 *)((char *)a3 + 24);
    }
    a5 = (__n128 *)((char *)a5 + 24);
  }
  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (__n128 *)((char *)a5 + v6);
      result = *(__n128 *)((char *)a1 + v6);
      v7[1].n128_u8[0] = a1[1].n128_u8[v6];
      *v7 = result;
      v6 += 24;
    }
    while ((__n128 *)((char *)a1 + v6) != a2);
  }
  return result;
}

__n128 sub_20C28D6AC(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v10;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  char *v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  __int128 *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  __int128 v40;
  double *v41;
  double *v42;
  uint64_t v43;
  __n128 v46;
  double v47;

  if (a6)
  {
    v10 = a6;
    do
    {
      if (v10 <= a8 || a5 <= a8)
      {
        sub_20C28DAEC(a1, a2, a3, a4, a5, v10, a7);
        return result;
      }
      if (!a5)
        return result;
      v13 = 0;
      result.n128_f64[0] = *a2;
      v14 = -a5;
      while (result.n128_f64[0] >= a1[v13 / 8])
      {
        v13 += 24;
        if (__CFADD__(v14++, 1))
          return result;
      }
      v16 = -v14;
      v42 = a3;
      v43 = a8;
      v41 = &a1[v13 / 8];
      if (-v14 >= v10)
      {
        if (v14 == -1)
        {
          v39 = &a1[v13 / 8];
          v47 = a1[v13 / 8 + 2];
          v46 = *(__n128 *)&a1[v13 / 8];
          v40 = *(_OWORD *)a2;
          *((_BYTE *)v39 + 16) = *((_BYTE *)a2 + 16);
          *(_OWORD *)v39 = v40;
          result = v46;
          *(__n128 *)a2 = v46;
          *((_BYTE *)a2 + 16) = LOBYTE(v47);
          return result;
        }
        if (v14 > 0)
          v16 = 1 - v14;
        v26 = v16 >> 1;
        v20 = (char *)&a1[3 * (v16 >> 1) + v13 / 8];
        v19 = (__int128 *)a2;
        if (a2 != a3)
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          v19 = (__int128 *)a2;
          do
          {
            v28 = v27 >> 1;
            v29 = (double *)v19 + 3 * (v27 >> 1);
            v31 = *v29;
            v30 = (__int128 *)(v29 + 3);
            v27 += ~(v27 >> 1);
            if (v31 < *(double *)v20)
              v19 = v30;
            else
              v27 = v28;
          }
          while (v27);
        }
        v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)a2) >> 3);
      }
      else
      {
        if (v10 >= 0)
          v17 = v10;
        else
          v17 = v10 + 1;
        v18 = v17 >> 1;
        v19 = (__int128 *)&a2[3 * (v17 >> 1)];
        v20 = (char *)a2;
        if ((char *)a2 - (char *)a1 != v13)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)a2 - (char *)a1 - v13) >> 3);
          v20 = (char *)&a1[v13 / 8];
          do
          {
            v22 = v21 >> 1;
            v23 = (double *)&v20[24 * (v21 >> 1)];
            v25 = *v23;
            v24 = (char *)(v23 + 3);
            v21 += ~(v21 >> 1);
            if (*(double *)v19 < v25)
              v21 = v22;
            else
              v20 = v24;
          }
          while (v21);
        }
        v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (char *)a1 - v13) >> 3);
      }
      a5 = -v26 - v14;
      v32 = v10 - v18;
      v33 = v26;
      v34 = sub_20C28DC50(v20, (__int128 *)a2, v19);
      v35 = v33;
      v36 = v34;
      if (v35 + v18 >= v10 - (v35 + v18) - v14)
      {
        v38 = v35;
        sub_20C28D6AC(v34, v19, v42, a4, a5, v10 - v18, a7, v43);
        a2 = (double *)v20;
        v32 = v18;
        a8 = v43;
        a5 = v38;
        a3 = (double *)v36;
        a1 = v41;
      }
      else
      {
        v37 = v18;
        a8 = v43;
        sub_20C28D6AC(&a1[v13 / 8], v20, v34, a4, v35, v37, a7, v43);
        a1 = (double *)v36;
        a2 = (double *)v19;
        a3 = v42;
      }
      v10 = v32;
    }
    while (v32);
  }
  return result;
}

__int128 *sub_20C28D970(__int128 *result, __int128 *a2, uint64_t a3)
{
  __int128 v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  if (result != a2)
  {
    v3 = *result;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)result + 2);
    *(_OWORD *)a3 = v3;
    v4 = (__int128 *)((char *)result + 24);
    if ((__int128 *)((char *)result + 24) != a2)
    {
      v5 = 0;
      v6 = a3;
      v7 = a3;
      do
      {
        v8 = *(double *)v7;
        v7 += 24;
        if (*(double *)v4 >= v8)
        {
          v12 = *v4;
          *(_QWORD *)(v7 + 16) = *((_QWORD *)v4 + 2);
          *(_OWORD *)v7 = v12;
        }
        else
        {
          *(_OWORD *)v7 = *(_OWORD *)v6;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
          v9 = a3;
          if (v6 != a3)
          {
            v10 = v5;
            while (1)
            {
              v9 = a3 + v10;
              if (*(double *)v4 >= *(double *)(a3 + v10 - 24))
                break;
              *(_OWORD *)v9 = *(_OWORD *)(a3 + v10 - 24);
              *(_BYTE *)(v9 + 16) = *(_BYTE *)(a3 + v10 - 8);
              v10 -= 24;
              if (!v10)
              {
                v9 = a3;
                break;
              }
            }
          }
          v11 = *v4;
          *(_BYTE *)(v9 + 16) = *((_BYTE *)v4 + 16);
          *(_OWORD *)v9 = v11;
        }
        v4 = (__int128 *)((char *)v4 + 24);
        v5 += 24;
        v6 = v7;
      }
      while (v4 != a2);
    }
  }
  return result;
}

__n128 sub_20C28DA40(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unint64_t v6;
  __n128 *v7;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        result = *a3;
        a5[1].n128_u64[0] = a3[1].n128_u64[0];
        *a5 = result;
        a5 = (__n128 *)((char *)a5 + 24);
        a3 = (__n128 *)((char *)a3 + 24);
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (a3->n128_f64[0] >= a1->n128_f64[0])
    {
      result = *a1;
      a5[1].n128_u64[0] = a1[1].n128_u64[0];
      *a5 = result;
      a1 = (__n128 *)((char *)a1 + 24);
    }
    else
    {
      result = *a3;
      a5[1].n128_u64[0] = a3[1].n128_u64[0];
      *a5 = result;
      a3 = (__n128 *)((char *)a3 + 24);
    }
    a5 = (__n128 *)((char *)a5 + 24);
  }
  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (__n128 *)((char *)a5 + v6);
      result = *(__n128 *)((char *)a1 + v6);
      v7[1].n128_u64[0] = a1[1].n128_u64[v6 / 8];
      *v7 = result;
      v6 += 24;
    }
    while ((__n128 *)((char *)a1 + v6) != a2);
  }
  return result;
}

double *sub_20C28DAEC(double *result, double *a2, double *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  char *v8;
  __int128 v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  BOOL v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  double *v24;
  __int128 v25;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v17 = 0;
      do
      {
        v18 = &__src[v17 * 8];
        v19 = *(_OWORD *)&result[v17];
        *((double *)v18 + 2) = result[v17 + 2];
        *(_OWORD *)v18 = v19;
        v17 += 3;
      }
      while (&result[v17] != a2);
      if (v17 * 8)
      {
        v20 = __src;
        while (a2 != a3)
        {
          if (*a2 >= *(double *)v20)
          {
            v22 = *(_OWORD *)v20;
            *((_BYTE *)result + 16) = v20[16];
            *(_OWORD *)result = v22;
            v20 += 24;
          }
          else
          {
            v21 = *(_OWORD *)a2;
            *((_BYTE *)result + 16) = *((_BYTE *)a2 + 16);
            *(_OWORD *)result = v21;
            a2 += 3;
          }
          result += 3;
          if (&__src[v17 * 8] == v20)
            return result;
        }
        return (double *)memmove(result, v20, __src - v20 + v17 * 8 - 7);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = &__src[v7 * 8];
      v9 = *(_OWORD *)&a2[v7];
      *((double *)v8 + 2) = a2[v7 + 2];
      *(_OWORD *)v8 = v9;
      v7 += 3;
    }
    while (&a2[v7] != a3);
    if (v7 * 8)
    {
      v10 = (double *)&__src[v7 * 8];
      v11 = a3 - 3;
      while (a2 != result)
      {
        v12 = *(v10 - 3);
        v13 = *(a2 - 3);
        v14 = v12 < v13;
        if (v12 >= v13)
          v15 = (char *)(v10 - 3);
        else
          v15 = (char *)(a2 - 3);
        if (v12 < v13)
          a2 -= 3;
        v16 = *(_OWORD *)v15;
        if (!v14)
          v10 -= 3;
        *((_BYTE *)v11 + 16) = v15[16];
        *(_OWORD *)v11 = v16;
        v11 -= 3;
        if (v10 == (double *)__src)
          return result;
      }
      v23 = 0;
      do
      {
        v24 = &v11[v23];
        v25 = *(_OWORD *)&v10[v23 - 3];
        *((_BYTE *)v24 + 16) = LOBYTE(v10[v23 - 1]);
        *(_OWORD *)v24 = v25;
        v23 -= 3;
      }
      while (&v10[v23] != (double *)__src);
    }
  }
  return result;
}

__int128 *sub_20C28DC50(char *__src, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  int64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3;
  if (__src != (char *)a2)
  {
    if (a2 == a3)
    {
      return (__int128 *)__src;
    }
    else if (__src + 24 == (char *)a2)
    {
      v7 = *(_OWORD *)__src;
      v9 = *((_QWORD *)__src + 2);
      v5 = (char *)a3 - (char *)a2;
      memmove(__src, a2, (char *)a3 - (char *)a2 - 7);
      v3 = (__int128 *)&__src[v5];
      *v3 = v7;
      *((_BYTE *)v3 + 16) = v9;
    }
    else if ((__int128 *)((char *)a2 + 24) == a3)
    {
      v3 = (__int128 *)(__src + 24);
      v8 = *(__int128 *)((char *)a3 - 24);
      v10 = *((_QWORD *)a3 - 1);
      if ((char *)a3 - 24 != __src)
        memmove(__src + 24, __src, (char *)a3 - 24 - __src - 7);
      *(_OWORD *)__src = v8;
      __src[16] = v10;
    }
    else
    {
      return sub_20C28DD4C((__int128 *)__src, a2, a3);
    }
  }
  return v3;
}

__int128 *sub_20C28DD4C(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v26;
  char v27;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if (v3 == 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3))
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = (__int128 *)((char *)a1 + 24);
      v5 = (__int128 *)((char *)a2 + 24);
      do
      {
        v6 = *(__int128 *)((char *)v4 - 24);
        v7 = *((_QWORD *)v4 - 1);
        v8 = *((_BYTE *)v5 - 8);
        *(__int128 *)((char *)v4 - 24) = *(__int128 *)((char *)v5 - 24);
        *((_BYTE *)v4 - 8) = v8;
        *((_BYTE *)v5 - 8) = v7;
        *(__int128 *)((char *)v5 - 24) = v6;
        if (v4 == a2)
          break;
        v4 = (__int128 *)((char *)v4 + 24);
        v9 = v5 == a3;
        v5 = (__int128 *)((char *)v5 + 24);
      }
      while (!v9);
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      v12 = v11;
      v11 = v10;
      v10 = v12 % v10;
    }
    while (v10);
    if (v11)
    {
      v13 = (__int128 *)((char *)a1 + 24 * v11);
      do
      {
        v14 = *(__int128 *)((char *)v13 - 24);
        v15 = *((_QWORD *)v13 - 1);
        v13 = (__int128 *)((char *)v13 - 24);
        v26 = v14;
        v27 = v15;
        v16 = (__int128 *)((char *)v13 + 8 * (((char *)a2 - (char *)a1) >> 3));
        v17 = v13;
        do
        {
          v18 = v16;
          v19 = *v16;
          *((_BYTE *)v17 + 16) = *((_BYTE *)v16 + 16);
          *v17 = v19;
          v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)v16) >> 3);
          v16 = (__int128 *)((char *)v16 + 8 * (((char *)a2 - (char *)a1) >> 3));
          v21 = __OFSUB__(v3, v20);
          v23 = v3 - v20;
          v22 = (v23 < 0) ^ v21;
          v24 = (__int128 *)((char *)a1 + 24 * v23);
          if (!v22)
            v16 = v24;
          v17 = v18;
        }
        while (v16 != v13);
        *((_BYTE *)v18 + 16) = v27;
        *v18 = v26;
      }
      while (v13 != a1);
    }
    return (__int128 *)((char *)a1 + 8 * (((char *)a3 - (char *)a2) >> 3));
  }
  return a2;
}

void *sub_20C28DE84(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 24);
      *(_BYTE *)(v9 - 8) = *(v8 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - 7);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *sub_20C28DF64(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52E5D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C28DFAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (v1)
  {
    v3 = (void *)sub_20C28E044(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C28DFCC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C28DFE0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = (void *)sub_20C28E044(v1);
    operator delete(v2);
  }
}

uint64_t sub_20C28E004(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52E620))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C28E044(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 208));
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 120));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 92));
  sub_20BFD265C((_DWORD *)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v2 = *(unsigned int **)(a1 + 32);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

void sub_20C28E11C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C52E648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C28E130(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C52E648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C28E154(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_20C28E170(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v11);
  v6 = sub_20C0EEAF8((uint64_t *)&v11);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v10);
  v7 = sub_20C0A683C((uint64_t *)(v6 + 112));
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 144))(v7, &v10, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_20BFD265C(&v10);
  sub_20C103234(&v11);
  return v8;
}

void sub_20C28E20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28E234(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C28E2FC(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C28E2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C28E2FC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))MEMORY[0x24BEDB798];
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))off_24C5420E8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_ComputeClipSetDefinitionsForPrimIndex(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v5;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  _QWORD *Layers;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v13;
  int HasField;
  uint64_t *v15;
  _QWORD *v16;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v17;
  int v18;
  int v19;
  unint64_t v20;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  BOOL v26;
  _BOOL4 v27;
  __int128 *v29;
  uint64_t *v30;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v31;
  uint64_t *EmptyString;
  std::string::size_type v33;
  std::string::size_type v34;
  pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  uint64_t Identifier;
  int v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  pxrInternal__aapl__pxrReserved__::SdfPath *v48;
  const char *v49;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  pxrInternal__aapl__pxrReserved__::VtValue *v57;
  pxrInternal__aapl__pxrReserved__::VtValue *v58;
  uint64_t v59;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v61;
  _DWORD *v62;
  uint64_t *v63;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  __int128 v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  std::string::size_type size;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v80;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v81;
  _OWORD *v82;
  __int128 v83;
  std::string::size_type v84;
  unint64_t v85;
  uint64_t v86;
  std::string *v87;
  uint64_t v88;
  _QWORD *v89;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v90;
  int v91;
  int v92;
  std::string *v93;
  uint64_t v94;
  std::string::size_type v95;
  std::string::size_type *p_size;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t *);
  char v100;
  std::string *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string::size_type v104;
  std::string::size_type v105;
  std::string *p_str;
  std::string *p_src;
  std::string::size_type v108;
  uint64_t *v109;
  uint64_t (*v110)(uint64_t *);
  char v111;
  __int128 v112;
  std::string *v113;
  std::string *v114;
  uint64_t *v115;
  uint64_t (*v116)(uint64_t *);
  char v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  __int128 *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  __int128 *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  __int128 *v135;
  unint64_t v136;
  uint64_t v137;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v138;
  uint64_t *v139;
  pxrInternal__aapl__pxrReserved__::VtValue *v140;
  pxrInternal__aapl__pxrReserved__::VtValue *v141;
  uint64_t v142;
  const std::string *v143;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v144;
  uint64_t *v145;
  pxrInternal__aapl__pxrReserved__::VtValue *v146;
  pxrInternal__aapl__pxrReserved__::VtValue *v147;
  uint64_t v148;
  std::string *v149;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v150;
  uint64_t *v151;
  pxrInternal__aapl__pxrReserved__::VtValue *v152;
  pxrInternal__aapl__pxrReserved__::VtValue *v153;
  uint64_t v154;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v155;
  uint64_t *v156;
  pxrInternal__aapl__pxrReserved__::VtValue *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v161;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v162;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v163;
  pxrInternal__aapl__pxrReserved__::VtValue *v164;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v165;
  double *v166;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v167;
  double *v168;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v169;
  double *v170;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v171;
  double *v172;
  double v173;
  double v174;
  double v175;
  double v176;
  uint64_t *v177;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v178;
  uint64_t v179;
  double v180;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v181;
  unint64_t v182;
  const char *v183;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v184;
  unint64_t v185;
  const char *v186;
  std::string *v187;
  std::string::size_type v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  std::string::size_type v193;
  std::string *v194;
  std::string::size_type v195;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v196;
  unint64_t v197;
  const char *v198;
  char *v199;
  const char *v200;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v201;
  unint64_t v202;
  const char *v203;
  char *v204;
  const char *v205;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v206;
  unint64_t v207;
  const char *v208;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v209;
  unint64_t v210;
  const char *v211;
  int v212;
  pxrInternal__aapl__pxrReserved__::VtValue *v213;
  const char *v214;
  char *v215;
  pxrInternal__aapl__pxrReserved__::VtValue *v216;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v217;
  char *v218;
  const char *v219;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v220;
  unint64_t v221;
  const char *v222;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v223;
  uint64_t v224;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v225;
  uint64_t v226;
  pxrInternal__aapl__pxrReserved__ *v227;
  double v228;
  double v229;
  double v230;
  double v231;
  std::string *v232;
  __int128 v233;
  std::string *v234;
  const char *v235;
  char *v236;
  __int128 v237;
  std::string *v238;
  std::string *v239;
  __int128 v240;
  std::string *v241;
  const char *v242;
  char *v243;
  __int128 v244;
  std::string *v245;
  std::string::size_type v246;
  uint64_t v247;
  std::string *v248;
  std::string::size_type v249;
  std::string *v250;
  __int128 v251;
  std::string::size_type v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int v255;
  std::string::size_type v256;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v257;
  unint64_t v258;
  const char *v259;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v260;
  unint64_t v261;
  const char *v262;
  const char *v263;
  const char *v264;
  char *v265;
  __int128 *p_dst;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v267;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v268;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t *Resolver;
  _QWORD *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  std::string::size_type v279;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  pxrInternal__aapl__pxrReserved__::SdfPath *v281;
  __int128 *v282;
  __int128 *v283;
  unint64_t v284;
  __int128 __dst;
  _BYTE __dst_16[32];
  uint64_t *v287;
  _QWORD *v288;
  unint64_t v289;
  std::string *v290;
  std::string *v291;
  std::string __p;
  std::string v293;
  _QWORD **v294;
  _QWORD *v295[2];
  std::string v296;
  std::string v297;
  std::string __str;
  std::string v299;
  std::string v300;
  std::string __src;
  std::string::size_type v302;
  std::string::size_type v303;
  char v304;
  __int128 v305;
  uint64_t v306[3];
  __int128 v307;
  _BYTE v308[24];
  _BYTE v309[24];
  _BYTE v310[24];
  _BYTE v311[144];
  std::string v312;
  std::string *v313;
  char v314;
  _BYTE v315[16];
  uint64_t v316;

  v316 = *MEMORY[0x24BDAC8D0];
  v288 = 0;
  v289 = 0;
  v287 = (uint64_t *)&v288;
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&__dst, a1, 1);
  v270 = a3;
  v271 = a2;
  while (1)
  {
    v5 = *(_QWORD *)__dst_16 == *(_QWORD *)&__dst_16[16] && *(_QWORD *)&__dst_16[8] == *(_QWORD *)&__dst_16[24];
    if (v5)
      break;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&v296.__r_.__value_.__l.__data_ = *(_OWORD *)__dst_16;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v296);
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v296);
    v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
    Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
    v9 = Layers[1] - *Layers;
    v10 = v9 >> 3;
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) - 8;
    v275 = Layers;
    do
    {
      if (!v10)
        goto LABEL_124;
      v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(*Layers + v11));
      v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v13)
        v13 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v12, Path, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v13 + 8), 0);
      v11 -= 8;
      --v10;
      Layers = v275;
    }
    while (!HasField);
    *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__l.__size_;
    memset(&v300, 0, sizeof(v300));
    do
    {
      v277 = v10;
      v15 = (uint64_t *)(*Layers + 8 * v10);
      v294 = 0;
      v16 = (_QWORD *)sub_20C0EEAF8(v15);
      v17 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v17)
        v17 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      v306[0] = (uint64_t)&stru_24C51D8B8;
      LOWORD(v306[1]) = 0;
      *((_QWORD *)&v305 + 1) = &v294;
      *(_QWORD *)&v305 = &unk_24C52E698;
      v18 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, Path, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v17 + 8), (uint64_t (***)(_QWORD, uint64_t))&v305);
      if (LOBYTE(v306[1]))
        v19 = 0;
      else
        v19 = v18;
      if (v19 != 1)
        goto LABEL_94;
      memset(&v299, 0, sizeof(v299));
      v20 = pxrInternal__aapl__pxrReserved__::VtDictionary::size((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v294);
      sub_20BE71C2C((uint64_t *)&v299, v20);
      v297.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v294);
      v297.__r_.__value_.__l.__size_ = v21;
      v22 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v294);
      v24 = v23;
      while (1)
      {
        v25 = v297.__r_.__value_.__r.__words[0];
        v26 = !v24 || v297.__r_.__value_.__r.__words[0] == v22;
        v27 = v26;
        if (v297.__r_.__value_.__l.__size_ == v24 && v27)
          break;
        if (*(char *)(v297.__r_.__value_.__r.__words[0] + 55) < 0)
        {
          if (!*(_QWORD *)(v297.__r_.__value_.__r.__words[0] + 40))
          {
LABEL_38:
            *(_QWORD *)&v305 = "usd/clipSetDefinition.cpp";
            *((_QWORD *)&v305 + 1) = "_ResolveClipSetsInNode";
            v306[0] = 433;
            v306[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_ResolveClipSetsInNode(const PcpNodeRef &, std::ma"
                               "p<std::string, _ClipSet> *)";
            LOBYTE(v306[2]) = 0;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v296);
            v312.__r_.__value_.__r.__words[0] = v33;
            v312.__r_.__value_.__l.__size_ = v34;
            v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v312);
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v35);
            v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v15);
            Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v37);
            v39 = *(char *)(Identifier + 23);
            v40 = *(_QWORD *)Identifier;
            v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
            if (v39 >= 0)
              v43 = Identifier;
            else
              v43 = v40;
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v305, (pxrInternal__aapl__pxrReserved__ *)"Invalid unnamed clip set for prim <%s> in 'clips' dictionary on spec @%s@<%s>", v42, Text, v43, v41);
            goto LABEL_83;
          }
        }
        else if (!*(_BYTE *)(v297.__r_.__value_.__r.__words[0] + 55))
        {
          goto LABEL_38;
        }
        v29 = (__int128 *)(v297.__r_.__value_.__r.__words[0] + 32);
        if ((sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)(v297.__r_.__value_.__r.__words[0] + 56)) & 1) != 0)
        {
          v30 = sub_20C2907B0((uint64_t **)&__src, v25 + 32, v25 + 32);
          v293.__r_.__value_.__r.__words[0] = 0;
          sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + 56), (const void ****)&v293);
          v31 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v31)
            v31 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if ((*((_QWORD *)v31 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (uint64_t *)((*((_QWORD *)v31 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
          v57 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4((uint64_t *)&v293, (const void **)EmptyString);
          v58 = v57;
          if (v57 && sub_20BFED500(v57))
          {
            v59 = *((_QWORD *)v58 + 1);
            if ((v59 & 4) != 0
               ? (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v59 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 168))(v58)
               : *(_QWORD *)v58)
            {
              goto LABEL_57;
            }
          }
          v61 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v61)
            v61 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (sub_20C290BD8((pxrInternal__aapl__pxrReserved__::TfToken *)&v293, (_QWORD *)v61 + 5))
          {
LABEL_57:
            v62 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v296);
            v63 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v296);
            v64 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v63);
            v65 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v64);
            sub_20C2033F4((uint64_t *)&v305, v63);
            sub_20BFD6E54(v306, v62);
            sub_20BFD6EA4((_DWORD *)v306 + 1, v62 + 1);
            v306[1] = v277;
            v306[2] = 0;
            sub_20C1034E8((uint64_t *)&v312, (uint64_t *)(v65 + 8 * v277));
            *(_QWORD *)&v307 = sub_20C291030((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v296, &v312);
            *((_QWORD *)&v307 + 1) = v66;
            v67 = (unsigned int *)v30[8];
            *(_OWORD *)(v30 + 7) = v305;
            *((_QWORD *)&v305 + 1) = 0;
            if (v67)
            {
              v68 = v67 + 2;
              do
              {
                v69 = __ldxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
                (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 8))(v67);
            }
            *(_QWORD *)&v305 = 0;
            sub_20BFD3EBC((int *)v30 + 18, (int *)v306);
            sub_20BFD3F10((int *)v30 + 19, (int *)v306 + 1);
            v71 = v307;
            *((_OWORD *)v30 + 5) = *(_OWORD *)&v306[1];
            *((_OWORD *)v30 + 6) = v71;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v306 + 1);
            sub_20BFD265C(v306);
            v72 = *((_QWORD *)&v305 + 1);
            if (*((_QWORD *)&v305 + 1))
            {
              v73 = (unsigned int *)(*((_QWORD *)&v305 + 1) + 8);
              do
              {
                v74 = __ldxr(v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v73));
              if (!v75)
                (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
            }
            size = v312.__r_.__value_.__l.__size_;
            if (v312.__r_.__value_.__l.__size_)
            {
              v77 = (unsigned int *)(v312.__r_.__value_.__l.__size_ + 8);
              do
              {
                v78 = __ldxr(v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, v77));
              if (!v79)
                (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
            }
          }
          v80 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v80)
            v80 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C290D98((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v296, v15, v80, (pxrInternal__aapl__pxrReserved__::TfToken *)&v293);
          v81 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v81)
            v81 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C290D98((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v296, v15, (_QWORD *)v81 + 10, (pxrInternal__aapl__pxrReserved__::TfToken *)&v293);
          pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((pxrInternal__aapl__pxrReserved__ *)&v293, (const char **)v30 + 14, 0);
          pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v30 + 14, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v293);
          v82 = (_OWORD *)v299.__r_.__value_.__l.__size_;
          if (v299.__r_.__value_.__l.__size_ >= v299.__r_.__value_.__r.__words[2])
          {
            v84 = sub_20BE4EE50((uint64_t *)&v299, (__int128 *)(v25 + 32));
          }
          else
          {
            if (*(char *)(v25 + 55) < 0)
            {
              sub_20BDDBFAC((_BYTE *)v299.__r_.__value_.__l.__size_, *(void **)(v25 + 32), *(_QWORD *)(v25 + 40));
            }
            else
            {
              v83 = *v29;
              *(_QWORD *)(v299.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v25 + 48);
              *v82 = v83;
            }
            v84 = (std::string::size_type)v82 + 24;
          }
          v299.__r_.__value_.__l.__size_ = v84;
          sub_20BF49F14(&v293, 0);
        }
        else
        {
          *(_QWORD *)&v305 = "usd/clipSetDefinition.cpp";
          *((_QWORD *)&v305 + 1) = "_ResolveClipSetsInNode";
          v306[0] = 443;
          v306[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_ResolveClipSetsInNode(const PcpNodeRef &, std::map<"
                             "std::string, _ClipSet> *)";
          LOBYTE(v306[2]) = 0;
          if (*(char *)(v25 + 55) < 0)
            v29 = *(__int128 **)v29;
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v296);
          v312.__r_.__value_.__r.__words[0] = v46;
          v312.__r_.__value_.__l.__size_ = v47;
          v48 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v312);
          v49 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v48);
          v50 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v15);
          v51 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v50);
          v52 = *(char *)(v51 + 23);
          v53 = *(_QWORD *)v51;
          v54 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
          if (v52 >= 0)
            v56 = v51;
          else
            v56 = v53;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v305, (pxrInternal__aapl__pxrReserved__ *)"Expected dictionary for entry '%s' for prim <%s> in 'clips' dictionary on spec @%s@<%s>", v55, v29, v49, v56, v54);
        }
LABEL_83:
        sub_20BF4D354(&v297, v44, v45);
      }
      v85 = 126
          - 2
          * __clz(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v299.__r_.__value_.__l.__size_ - v299.__r_.__value_.__r.__words[0]) >> 3));
      if (v299.__r_.__value_.__l.__size_ == v299.__r_.__value_.__r.__words[0])
        v86 = 0;
      else
        v86 = v85;
      sub_20BEDAFAC((uint64_t)v299.__r_.__value_.__l.__data_, (const void **)v299.__r_.__value_.__l.__size_, (uint64_t)&v305, v86, 1);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)&v305);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems((uint64_t *)&v305, (uint64_t)&v299);
      v313 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations((uint64_t)&v305, (uint64_t *)&v300, (uint64_t)&v312);
      v87 = v313;
      if (v313 == &v312)
      {
        v87 = &v312;
        v88 = 4;
LABEL_92:
        (*(void (**)(void))(v87->__r_.__value_.__r.__words[0] + 8 * v88))();
      }
      else if (v313)
      {
        v88 = 5;
        goto LABEL_92;
      }
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)v310;
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)v309;
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)v308;
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v306[2];
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v305 + 8;
      sub_20BDE5038((void ***)&v312);
      *(_QWORD *)&v305 = &v299;
      sub_20BDE5038((void ***)&v305);
LABEL_94:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)&v305);
      v89 = (_QWORD *)sub_20C0EEAF8(v15);
      v90 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v90)
        v90 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      v312.__r_.__value_.__l.__size_ = (std::string::size_type)&v305;
      v312.__r_.__value_.__r.__words[2] = (std::string::size_type)&stru_24C524D30;
      LOWORD(v313) = 0;
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C52BEB0;
      v91 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v89, Path, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v90 + 16), &v312);
      if ((_BYTE)v313)
        v92 = 0;
      else
        v92 = v91;
      if (v92 == 1)
      {
        v313 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations((uint64_t)&v305, (uint64_t *)&v300, (uint64_t)&v312);
        v93 = v313;
        if (v313 == &v312)
        {
          v93 = &v312;
          v94 = 4;
LABEL_104:
          (*(void (**)(void))(v93->__r_.__value_.__r.__words[0] + 8 * v94))();
        }
        else if (v313)
        {
          v94 = 5;
          goto LABEL_104;
        }
      }
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)v310;
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)v309;
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)v308;
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v306[2];
      sub_20BDE5038((void ***)&v312);
      v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v305 + 8;
      sub_20BDE5038((void ***)&v312);
      sub_20BF49F14(&v294, 0);
      v10 = v277 - 1;
      Layers = v275;
    }
    while (v277);
    v95 = __src.__r_.__value_.__r.__words[0];
    p_size = &__src.__r_.__value_.__l.__size_;
    if ((std::string::size_type *)__src.__r_.__value_.__l.__data_ != &__src.__r_.__value_.__r.__words[1])
    {
      do
      {
        v97 = sub_20C020210((uint64_t)v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_, (unsigned __int8 **)(v95 + 32));
        if (v97 == v300.__r_.__value_.__l.__size_)
        {
          v102 = (std::string *)sub_20C290A18((uint64_t **)&__src, (uint64_t *)v95);
        }
        else
        {
          v98 = v97;
          v99 = sub_20C20BDB4((_QWORD *)(v95 + 56));
          if (v100 & 1 | (unint64_t)v99)
            *(_QWORD *)(v95 + 88) = 0xAAAAAAAAAAAAAAABLL
                                  * ((int64_t)(v98 - v300.__r_.__value_.__r.__words[0]) >> 3);
          v101 = *(std::string **)(v95 + 8);
          if (v101)
          {
            do
            {
              v102 = v101;
              v101 = (std::string *)v101->__r_.__value_.__r.__words[0];
            }
            while (v101);
          }
          else
          {
            do
            {
              v102 = *(std::string **)(v95 + 16);
              v5 = v102->__r_.__value_.__r.__words[0] == v95;
              v95 = (std::string::size_type)v102;
            }
            while (!v5);
          }
        }
        v95 = (std::string::size_type)v102;
      }
      while (v102 != (std::string *)&__src.__r_.__value_.__r.__words[1]);
      p_size = (std::string::size_type *)__src.__r_.__value_.__r.__words[0];
    }
    v104 = __str.__r_.__value_.__l.__size_;
    v103 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_size;
    __str.__r_.__value_.__l.__size_ = __src.__r_.__value_.__l.__size_;
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = __PAIR128__(v104, v103);
    v105 = __str.__r_.__value_.__r.__words[2];
    __str.__r_.__value_.__r.__words[2] = __src.__r_.__value_.__r.__words[2];
    __src.__r_.__value_.__r.__words[2] = v105;
    p_str = (std::string *)(__str.__r_.__value_.__l.__size_ + 16);
    if (!__str.__r_.__value_.__r.__words[2])
      p_str = &__str;
    p_str->__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    v5 = v105 == 0;
    p_src = &__src;
    if (!v5)
      p_src = (std::string *)(v104 + 16);
    p_src->__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__l.__size_;
    *(_QWORD *)&v305 = &v300;
    sub_20BDE5038((void ***)&v305);
    sub_20C291734((uint64_t)&__src, (_QWORD *)__src.__r_.__value_.__l.__size_);
LABEL_124:
    v108 = __str.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[1])
    {
      do
      {
        v109 = sub_20C2907B0(&v287, v108 + 32, v108 + 32);
        v110 = sub_20C20BDB4(v109 + 7);
        if (!(v111 & 1 | (unint64_t)v110))
        {
          sub_20BF2D298((uint64_t)(v109 + 7), v108 + 56);
          sub_20C01A074((int *)v109 + 18, (_DWORD *)(v108 + 72));
          sub_20C01A0C8((int *)v109 + 19, (_DWORD *)(v108 + 76));
          v112 = *(_OWORD *)(v108 + 96);
          *((_OWORD *)v109 + 5) = *(_OWORD *)(v108 + 80);
          *((_OWORD *)v109 + 6) = v112;
        }
        pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((pxrInternal__aapl__pxrReserved__ *)(v109 + 14), (const char **)(v108 + 112), 0);
        v113 = *(std::string **)(v108 + 8);
        if (v113)
        {
          do
          {
            v114 = v113;
            v113 = (std::string *)v113->__r_.__value_.__r.__words[0];
          }
          while (v113);
        }
        else
        {
          do
          {
            v114 = *(std::string **)(v108 + 16);
            v5 = v114->__r_.__value_.__r.__words[0] == v108;
            v108 = (std::string::size_type)v114;
          }
          while (!v5);
        }
        v108 = (std::string::size_type)v114;
      }
      while (v114 != (std::string *)&__str.__r_.__value_.__r.__words[1]);
    }
    sub_20C291734((uint64_t)&__str, (_QWORD *)__str.__r_.__value_.__l.__size_);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextNode((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&__dst);
  }
  v115 = v287;
  if (v287 != (uint64_t *)&v288)
  {
    do
    {
      v116 = sub_20C20BDB4(v115 + 7);
      if (v117 & 1 | (unint64_t)v116)
      {
        v118 = (uint64_t *)v115[1];
        if (v118)
        {
          do
          {
            v119 = v118;
            v118 = (uint64_t *)*v118;
          }
          while (v118);
        }
        else
        {
          do
          {
            v119 = (uint64_t *)v115[2];
            v5 = *v119 == (_QWORD)v115;
            v115 = v119;
          }
          while (!v5);
        }
      }
      else
      {
        v119 = sub_20C290A18(&v287, v115);
      }
      v115 = v119;
    }
    while (v119 != (uint64_t *)&v288);
  }
  if (v289)
  {
    v282 = 0;
    v283 = 0;
    v284 = 0;
    if (v289 > 0x2E8BA2E8BA2E8BALL)
      sub_20BDDF694();
    sub_20C29195C(&v305, v289, 0, (uint64_t)&v284);
    sub_20C2919D8((uint64_t *)&v282, &v305);
    sub_20C291A68((uint64_t)&v305);
    v120 = v287;
    if (v287 == (uint64_t *)&v288)
    {
      v121 = v283;
    }
    else
    {
      v121 = v283;
      do
      {
        if ((unint64_t)v121 >= v284)
        {
          v122 = 0x2E8BA2E8BA2E8BA3 * (((char *)v121 - (char *)v282) >> 3);
          v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) > 0x2E8BA2E8BA2E8BALL)
            sub_20BDDF694();
          if (0x5D1745D1745D1746 * ((uint64_t)(v284 - (_QWORD)v282) >> 3) > v123)
            v123 = 0x5D1745D1745D1746 * ((uint64_t)(v284 - (_QWORD)v282) >> 3);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v284 - (_QWORD)v282) >> 3)) >= 0x1745D1745D1745DLL)
            v124 = 0x2E8BA2E8BA2E8BALL;
          else
            v124 = v123;
          sub_20C29195C(&v305, v124, v122, (uint64_t)&v284);
          sub_20C291AB8(v306[0], (uint64_t)(v120 + 7));
          v306[0] += 88;
          sub_20C2919D8((uint64_t *)&v282, &v305);
          v121 = v283;
          sub_20C291A68((uint64_t)&v305);
        }
        else
        {
          sub_20C291AB8((uint64_t)v121, (uint64_t)(v120 + 7));
          v121 = (__int128 *)((char *)v121 + 88);
        }
        v283 = v121;
        v125 = (uint64_t *)v120[1];
        if (v125)
        {
          do
          {
            v126 = v125;
            v125 = (uint64_t *)*v125;
          }
          while (v125);
        }
        else
        {
          do
          {
            v126 = (uint64_t *)v120[2];
            v5 = *v126 == (_QWORD)v120;
            v120 = v126;
          }
          while (!v5);
        }
        v120 = v126;
      }
      while (v126 != (uint64_t *)&v288);
    }
    v127 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((char *)v121 - (char *)v282) >> 3));
    if (v121 == v282)
      v128 = 0;
    else
      v128 = v127;
    sub_20C291B28((uint64_t)v282, v121, v128, 1);
    sub_20C290AA0(v271, 0x2E8BA2E8BA2E8BA3 * (((char *)v283 - (char *)v282) >> 3));
    if (v270)
      sub_20BE71C2C(v270, 0x2E8BA2E8BA2E8BA3 * (((char *)v283 - (char *)v282) >> 3));
    v130 = (uint64_t)v282;
    v129 = v283;
    if (v282 != v283)
    {
      while (1)
      {
        sub_20C29110C((uint64_t)&v305);
        v131 = v271[1];
        if (v131 >= v271[2])
        {
          v132 = sub_20C294758(v271, (uint64_t)&v305);
          v133 = v271;
        }
        else
        {
          sub_20C29485C(v271[1], (uint64_t)&v305);
          v132 = v131 + 272;
          v133 = v271;
          v271[1] = v132;
        }
        v133[1] = v132;
        sub_20C287D74((uint64_t)&v305);
        v134 = v133[1];
        if (v270)
        {
          v135 = (__int128 *)(v130 + 64);
          v136 = v270[1];
          if (v136 >= v270[2])
          {
            v137 = sub_20BE4EE50(v270, v135);
          }
          else
          {
            sub_20BE4EDF4(v270, v135);
            v137 = v136 + 24;
          }
          v270[1] = v137;
        }
        sub_20BF2D298(v134 - 32, v130);
        sub_20C01A074((int *)(v134 - 16), (_DWORD *)(v130 + 16));
        sub_20C01A0C8((int *)(v134 - 12), (_DWORD *)(v130 + 20));
        *(_QWORD *)(v134 - 8) = *(_QWORD *)(v130 + 24);
        v138 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v138)
          v138 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if ((*((_QWORD *)v138 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
          v139 = (uint64_t *)((*((_QWORD *)v138 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v139 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v138);
        v140 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4((uint64_t *)(v130 + 56), (const void **)v139);
        v141 = v140;
        if (v140 && sub_20BFB4608(v140))
        {
          v142 = *((_QWORD *)v141 + 1);
          if ((v142 & 4) != 0)
            v143 = (const std::string *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v142 & 0xFFFFFFFFFFFFFFF8) + 168))(v141);
          else
            v143 = *(const std::string **)v141;
          sub_20C2949E8((std::string *)(v134 - 168), v143);
        }
        v144 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v144)
          v144 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if ((*((_QWORD *)v144 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
          v145 = (uint64_t *)((*((_QWORD *)v144 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v145 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v144);
        v146 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4((uint64_t *)(v130 + 56), (const void **)v145);
        v147 = v146;
        if (v146 && sub_20BFED488(v146))
        {
          v148 = *((_QWORD *)v147 + 1);
          if ((v148 & 4) != 0)
            v149 = (std::string *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v148 & 0xFFFFFFFFFFFFFFF8) + 168))(v147);
          else
            v149 = *(std::string **)v147;
          sub_20C294A50((std::string *)(v134 - 224), v149);
        }
        v150 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v150)
          v150 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if ((*((_QWORD *)v150 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
          v151 = (uint64_t *)((*((_QWORD *)v150 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v151 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v150);
        v152 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4((uint64_t *)(v130 + 56), (const void **)v151);
        v153 = v152;
        if (v152 && sub_20BFB1AC0(v152))
        {
          v154 = *((_QWORD *)v153 + 1);
          if ((v154 & 4) != 0)
            v153 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v154 & 0xFFFFFFFFFFFFFFF8) + 168))(v153);
          *(_WORD *)(v134 - 40) = *(unsigned __int8 *)v153 | 0x100;
        }
        v155 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v155)
          v155 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if ((*((_QWORD *)v155 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          v156 = (uint64_t *)((*((_QWORD *)v155 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v156 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v155);
        v157 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4((uint64_t *)(v130 + 56), (const void **)v156);
        v158 = (uint64_t *)v157;
        if (v157 && sub_20BFED500(v157))
        {
          v159 = v158[1];
          if ((v159 & 4) != 0)
            v160 = (*(uint64_t (**)(uint64_t *))((v159 & 0xFFFFFFFFFFFFFFF8) + 168))(v158);
          else
            v160 = *v158;
          sub_20C294AAC(v134 - 272, v160);
          v161 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v161)
            v161 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C290B50((pxrInternal__aapl__pxrReserved__::TfToken *)(v130 + 56), v161, v134 - 136);
          v162 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v162)
            v162 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C290B50((pxrInternal__aapl__pxrReserved__::TfToken *)(v130 + 56), (_QWORD *)v162 + 10, v134 - 88);
          goto LABEL_313;
        }
        v163 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v163)
          v163 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v164 = sub_20C290BD8((pxrInternal__aapl__pxrReserved__::TfToken *)(v130 + 56), (_QWORD *)v163 + 5);
        if (!v164)
          goto LABEL_313;
        v165 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v165)
          v165 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v166 = (double *)sub_20C290C54((pxrInternal__aapl__pxrReserved__::TfToken *)(v130 + 56), (_QWORD *)v165 + 9);
        v167 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v167)
          v167 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v168 = (double *)sub_20C290C54((pxrInternal__aapl__pxrReserved__::TfToken *)(v130 + 56), (_QWORD *)v167 + 8);
        v169 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v169)
          v169 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v170 = (double *)sub_20C290C54((pxrInternal__aapl__pxrReserved__::TfToken *)(v130 + 56), (_QWORD *)v169 + 7);
        v171 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v171)
          v171 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v172 = (double *)sub_20C290C54((pxrInternal__aapl__pxrReserved__::TfToken *)(v130 + 56), (_QWORD *)v171 + 6);
        if (!v168 || !v170 || !v172)
          goto LABEL_313;
        if (v166)
          v173 = *v166;
        else
          v173 = 1.79769313e308;
        v174 = *v168;
        v175 = *v170;
        v176 = *v172;
        v177 = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(a1);
        v281 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v134 - 88);
        v178 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v134 - 136);
        if (v174 <= 0.0)
        {
          *(_QWORD *)&v305 = "usd/clipSetDefinition.cpp";
          *((_QWORD *)&v305 + 1) = "_DeriveClipInfo";
          v306[0] = 163;
          v306[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_DeriveClipInfo(const std::string &, const double, c"
                             "onst double, const double, const double, std::optional<VtVec2dArray> *, std::optional<VtVec"
                             "2dArray> *, std::optional<VtArray<SdfAssetPath>> *, const SdfPath &, const PcpLayerStackPtr"
                             " &, const size_t)";
          LOBYTE(v306[2]) = 0;
          v184 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v184)
            v184 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          v185 = *((_QWORD *)v184 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v185)
          {
            v186 = (const char *)(v185 + 16);
            if (*(char *)(v185 + 39) < 0)
              v186 = *(const char **)v186;
          }
          else
          {
            v186 = "";
          }
          v200 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v177);
          v201 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v201)
            v201 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          v202 = *((_QWORD *)v201 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v202)
          {
            v203 = (const char *)(v202 + 16);
            if (*(char *)(v202 + 39) < 0)
              v203 = *(const char **)v203;
          }
          else
          {
            v203 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v305, (pxrInternal__aapl__pxrReserved__ *)"Invalid %s %f for prim <%s>. %s must be greater than 0.", v199, v186, *(_QWORD *)&v174, v200, v203);
          goto LABEL_312;
        }
        v179 = *(_QWORD *)(v134 - 8);
        v180 = fabs(v173);
        if (v173 == 1.79769313e308 || v180 <= v174)
          break;
        *(_QWORD *)&v305 = "usd/clipSetDefinition.cpp";
        *((_QWORD *)&v305 + 1) = "_DeriveClipInfo";
        v306[0] = 174;
        v306[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_DeriveClipInfo(const std::string &, const double, con"
                           "st double, const double, const double, std::optional<VtVec2dArray> *, std::optional<VtVec2dAr"
                           "ray> *, std::optional<VtArray<SdfAssetPath>> *, const SdfPath &, const PcpLayerStackPtr &, const size_t)";
        LOBYTE(v306[2]) = 0;
        v181 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v181)
          v181 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v182 = *((_QWORD *)v181 + 9) & 0xFFFFFFFFFFFFFFF8;
        if (v182)
        {
          v183 = (const char *)(v182 + 16);
          if (*(char *)(v182 + 39) < 0)
            v183 = *(const char **)v183;
        }
        else
        {
          v183 = "";
        }
        v205 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v177);
        v206 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v206)
          v206 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v207 = *((_QWORD *)v206 + 9) & 0xFFFFFFFFFFFFFFF8;
        if (v207)
        {
          v208 = (const char *)(v207 + 16);
          if (*(char *)(v207 + 39) < 0)
            v208 = *(const char **)v208;
        }
        else
        {
          v208 = "";
        }
        v209 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v209)
          v209 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v210 = *((_QWORD *)v209 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v210)
        {
          v211 = (const char *)(v210 + 16);
          if (*(char *)(v210 + 39) < 0)
            v211 = *(const char **)v211;
        }
        else
        {
          v211 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v305, (pxrInternal__aapl__pxrReserved__ *)"Invalid %s %f for prim <%s>. Absolute value of %s must not exceed %s %f.", v204, v183, *(_QWORD *)&v173, v205, v208, v211, *(_QWORD *)&v174);
LABEL_312:
        v217 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)(v134 - 32));
        *(_QWORD *)&v305 = *(_QWORD *)(*(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v217)
                                     + 8 * *(_QWORD *)(v134 - 8));
        sub_20BF1DD04((uint64_t *)&v305);
        sub_20C290CD0((double *)(v130 + 40), v281);
        sub_20C290CD0((double *)(v130 + 40), v178);
        sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v305);
LABEL_313:
        v130 += 88;
        if ((__int128 *)v130 == v129)
          goto LABEL_429;
      }
      memset(&v296, 0, sizeof(v296));
      v295[0] = 0;
      v295[1] = 0;
      v294 = v295;
      pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(v164, &v296, &v294);
      pxrInternal__aapl__pxrReserved__::TfGetPathName(&v296, &v293);
      pxrInternal__aapl__pxrReserved__::TfGetBaseName(&v296, &__p);
      v278 = (uint64_t *)(v134 - 136);
      pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)&__p, ".", &v290);
      v187 = v290;
      if (v290 == v291)
        goto LABEL_274;
      v279 = 0;
      v188 = 0;
      v189 = 0;
      v190 = 0;
      v191 = -1;
      v192 = -1;
      while (1)
      {
        v193 = HIBYTE(v187->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v187->__r_.__value_.__r.__words[2]) < 0)
        {
          v194 = (std::string *)v187->__r_.__value_.__r.__words[0];
          v195 = v187->__r_.__value_.__l.__size_;
          if (v195)
          {
LABEL_257:
            while (v194->__r_.__value_.__s.__data_[0] == 35)
            {
              v194 = (std::string *)((char *)v194 + 1);
              if (!--v195)
                goto LABEL_259;
            }
            goto LABEL_270;
          }
        }
        else
        {
          v194 = v187;
          v195 = HIBYTE(v187->__r_.__value_.__r.__words[2]);
          if (*((_BYTE *)&v187->__r_.__value_.__s + 23))
            goto LABEL_257;
        }
LABEL_259:
        if (v191 == -1)
        {
          if ((v193 & 0x80) != 0)
            v193 = v187->__r_.__value_.__l.__size_;
          v279 = v193;
          v191 = v190;
        }
        else
        {
          if ((v193 & 0x80) != 0)
            v188 = v187->__r_.__value_.__l.__size_;
          else
            v188 = HIBYTE(v187->__r_.__value_.__r.__words[2]);
          v192 = v190;
        }
        ++v189;
LABEL_270:
        ++v190;
        if (++v187 == v291)
        {
          if ((unint64_t)(v189 - 3) < 0xFFFFFFFFFFFFFFFELL || v189 == 2 && v191 != v192 - 1)
          {
LABEL_274:
            *(_QWORD *)&v305 = "usd/clipSetDefinition.cpp";
            *((_QWORD *)&v305 + 1) = "_DeriveClipInfo";
            v306[0] = 221;
            v306[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_DeriveClipInfo(const std::string &, const double,"
                               " const double, const double, const double, std::optional<VtVec2dArray> *, std::optional<V"
                               "tVec2dArray> *, std::optional<VtArray<SdfAssetPath>> *, const SdfPath &, const PcpLayerSt"
                               "ackPtr &, const size_t)";
            LOBYTE(v306[2]) = 0;
            v196 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            v178 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v134 - 136);
            if (!v196)
              v196 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            v197 = *((_QWORD *)v196 + 5) & 0xFFFFFFFFFFFFFFF8;
            if (v197)
            {
              v198 = (const char *)(v197 + 16);
              if (*(char *)(v197 + 39) < 0)
                v198 = *(const char **)v198;
            }
            else
            {
              v198 = "";
            }
            v212 = *((char *)v164 + 23);
            v213 = *(pxrInternal__aapl__pxrReserved__::VtValue **)v164;
            v214 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v177);
            if (v212 >= 0)
              v216 = v164;
            else
              v216 = v213;
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v305, (pxrInternal__aapl__pxrReserved__ *)"Invalid %s '%s' for prim <%s>. It must be of the form path/basename.###.usd or path/basename.###.###.usd. Note that the number of hash marks is variable in each group.", v215, v198, v216, v214);
            goto LABEL_306;
          }
          if (v175 > v176)
          {
            *(_QWORD *)&v305 = "usd/clipSetDefinition.cpp";
            *((_QWORD *)&v305 + 1) = "_DeriveClipInfo";
            v306[0] = 232;
            v306[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_DeriveClipInfo(const std::string &, const double,"
                               " const double, const double, const double, std::optional<VtVec2dArray> *, std::optional<V"
                               "tVec2dArray> *, std::optional<VtArray<SdfAssetPath>> *, const SdfPath &, const PcpLayerSt"
                               "ackPtr &, const size_t)";
            LOBYTE(v306[2]) = 0;
            v178 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v134 - 136);
            v219 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v177);
            v220 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v220)
              v220 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            v221 = *((_QWORD *)v220 + 6) & 0xFFFFFFFFFFFFFFF8;
            if (v221)
            {
              v222 = (const char *)(v221 + 16);
              if (*(char *)(v221 + 39) < 0)
                v222 = *(const char **)v222;
            }
            else
            {
              v222 = "";
            }
            v260 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v260)
              v260 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            v261 = *((_QWORD *)v260 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v261)
            {
              v262 = (const char *)(v261 + 16);
              if (*(char *)(v261 + 39) < 0)
                v262 = *(const char **)v262;
            }
            else
            {
              v262 = "";
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v305, (pxrInternal__aapl__pxrReserved__ *)"Invalid time range specified for prim <%s>. %s (%f) cannot be greater than %s (%f).", v218, v219, v222, *(_QWORD *)&v176, v262, *(_QWORD *)&v175);
            goto LABEL_306;
          }
          v272 = v192;
          v305 = 0u;
          memset(v306, 0, sizeof(v306));
          sub_20C29117C((uint64_t)v281, (uint64_t)&v305);
          sub_20BF5618C((uint64_t)&v305);
          v305 = 0u;
          memset(v306, 0, sizeof(v306));
          sub_20C29117C((uint64_t)v278, (uint64_t)&v305);
          sub_20BF5618C((uint64_t)&v305);
          v305 = 0u;
          memset(v306, 0, sizeof(v306));
          sub_20C2911FC(v134 - 272, (uint64_t)&v305);
          sub_20C00A724(&v305);
          v223 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)(v134 - 32));
          v224 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v223);
          v225 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)(v134 - 32));
          v226 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v225);
          pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v305, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(v226 + 32));
          v227 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v315);
          Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v227);
          v228 = v175 * 10000.0;
          v229 = v180 * 10000.0;
          if (v173 != 1.79769313e308)
          {
            *(double *)&__dst = (v228 - v229) / 10000.0;
            *((double *)&__dst + 1) = *(double *)&__dst;
            sub_20C291350((uint64_t)v281, &__dst);
          }
          v230 = v176 * 10000.0;
          if (v228 > v230)
          {
LABEL_400:
            v178 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v134 - 136);
            if (v173 != 1.79769313e308)
            {
              *(double *)&__dst = (v229 + v230) / 10000.0;
              *((double *)&__dst + 1) = *(double *)&__dst;
              sub_20C291350((uint64_t)v281, &__dst);
            }
            v257 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v257)
              v257 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (sub_20C286E00(2))
            {
              v258 = *((_QWORD *)v257 + 1) & 0xFFFFFFFFFFFFFFF8;
              if (v258)
              {
                v259 = (const char *)(v258 + 16);
                if (*(char *)(v258 + 39) < 0)
                  v259 = *(const char **)v259;
              }
              else
              {
                v259 = "";
              }
              v263 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v177);
              sub_20C29157C((uint64_t *)(v134 - 272));
              p_dst = &__dst;
              if (__dst_16[7] < 0)
                p_dst = (__int128 *)__dst;
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s for prim <%s> derived: %s\n", v264, v265, v259, v263, p_dst);
              if ((__dst_16[7] & 0x80000000) != 0)
                operator delete((void *)__dst);
            }
            v267 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v267)
              v267 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            sub_20C29127C((_QWORD *)v267 + 10, (uint64_t *)v281, (pxrInternal__aapl__pxrReserved__::SdfPath *)v177);
            v268 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v268)
              v268 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            sub_20C29127C(v268, v278, (pxrInternal__aapl__pxrReserved__::SdfPath *)v177);
            pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v315);
            pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v305);
LABEL_306:
            *(_QWORD *)&v305 = &v290;
            sub_20BDE5038((void ***)&v305);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v293.__r_.__value_.__l.__data_);
            sub_20BDE9D48((uint64_t)&v294, v295[0]);
            if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v296.__r_.__value_.__l.__data_);
            goto LABEL_312;
          }
          v276 = 0;
          v273 = (uint64_t *)(v224 + 8 * v179);
          v231 = v174 * 10000.0;
          while (2)
          {
            v303 = v279;
            v302 = v188;
            sub_20BDDC0E4(&v312, "");
            sub_20BDDC0E4(&__src, "");
            sub_20C2914B4();
            v232 = std::string::insert(&__str, 0, "%0");
            v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
            v299.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v233;
            v232->__r_.__value_.__l.__size_ = 0;
            v232->__r_.__value_.__r.__words[2] = 0;
            v232->__r_.__value_.__r.__words[0] = 0;
            v234 = std::string::append(&v299, "d");
            v237 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
            v300.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v237;
            v234->__r_.__value_.__l.__size_ = 0;
            v234->__r_.__value_.__r.__words[2] = 0;
            v234->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v299.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v238 = &v300;
            else
              v238 = (std::string *)v300.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v238, v235, v236, (int)(v228 / 10000.0));
            if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v312.__r_.__value_.__l.__data_);
            v312 = v299;
            if (v302)
            {
              sub_20C2914B4();
              v239 = std::string::insert(&v297, 0, "%.0");
              v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v240;
              v239->__r_.__value_.__l.__size_ = 0;
              v239->__r_.__value_.__r.__words[2] = 0;
              v239->__r_.__value_.__r.__words[0] = 0;
              v241 = std::string::append(&__str, "f");
              v244 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
              v299.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v244;
              v241->__r_.__value_.__l.__size_ = 0;
              v241->__r_.__value_.__r.__words[2] = 0;
              v241->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v297.__r_.__value_.__l.__data_);
              if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v245 = &v299;
              else
                v245 = (std::string *)v299.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v245, v242, v243, v228 / 10000.0);
              v246 = std::string::find(&__str, 46, 0);
              std::string::basic_string(&v297, &__str, v246 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v304);
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__src.__r_.__value_.__l.__data_);
              __src = v297;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v299.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_20BDDBFAC(&__dst, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
            }
            else
            {
              __dst = *(_OWORD *)&v312.__r_.__value_.__l.__data_;
              *(_QWORD *)__dst_16 = *((_QWORD *)&v312.__r_.__value_.__l + 2);
            }
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              sub_20BDDBFAC(&__dst_16[8], __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
            else
              *(std::string *)&__dst_16[8] = __src;
            if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v300.__r_.__value_.__l.__data_);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__src.__r_.__value_.__l.__data_);
            if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v312.__r_.__value_.__l.__data_);
            std::string::operator=(&v290[v191], (const std::string *)&__dst);
            v247 = __dst_16[31];
            if (__dst_16[31] < 0)
              v247 = *(_QWORD *)&__dst_16[16];
            if (v247)
              std::string::operator=(&v290[v272], (const std::string *)&__dst_16[8]);
            sub_20C1034E8((uint64_t *)&v299, v273);
            pxrInternal__aapl__pxrReserved__::TfStringJoin(".", &v290, &v300);
            if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v248 = &v293;
            else
              v248 = (std::string *)v293.__r_.__value_.__r.__words[0];
            if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v249 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
            else
              v249 = v293.__r_.__value_.__l.__size_;
            v250 = std::string::insert(&v300, 0, (const std::string::value_type *)v248, v249);
            v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
            v312.__r_.__value_.__r.__words[2] = v250->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v251;
            v250->__r_.__value_.__l.__size_ = 0;
            v250->__r_.__value_.__r.__words[2] = 0;
            v250->__r_.__value_.__r.__words[0] = 0;
            pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)&v299, (uint64_t)&v312, (uint64_t)&__src);
            if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v312.__r_.__value_.__l.__data_);
            if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v300.__r_.__value_.__l.__data_);
            v252 = v299.__r_.__value_.__l.__size_;
            if (v299.__r_.__value_.__l.__size_)
            {
              v253 = (unsigned int *)(v299.__r_.__value_.__l.__size_ + 8);
              do
              {
                v254 = __ldxr(v253);
                v255 = v254 - 1;
              }
              while (__stlxr(v255, v253));
              if (!v255)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v252 + 8))(v252);
            }
            pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
            if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
            {
              v256 = v312.__r_.__value_.__l.__size_;
              operator delete(v312.__r_.__value_.__l.__data_);
              if (!v256)
                goto LABEL_393;
            }
            else if (!*((_BYTE *)&v312.__r_.__value_.__s + 23))
            {
              goto LABEL_393;
            }
            pxrInternal__aapl__pxrReserved__::SdfLayer::CreateIdentifier(&__src, &v294);
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v312, &v300);
            sub_20C1FCED4(v134 - 272, (__int128 *)&v312);
            if (v314 < 0)
              operator delete(v313);
            if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v312.__r_.__value_.__l.__data_);
            if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v300.__r_.__value_.__l.__data_);
            *(double *)&v312.__r_.__value_.__l.__data_ = v228 / 10000.0;
            *(double *)&v312.__r_.__value_.__l.__size_ = v228 / 10000.0;
            sub_20C291350((uint64_t)v281, &v312);
            if (v173 == 1.79769313e308)
            {
              *(double *)&v312.__r_.__value_.__l.__data_ = v228 / 10000.0;
              *(double *)&v312.__r_.__value_.__l.__size_ = (double)v276;
              sub_20C291350((uint64_t)v278, &v312);
            }
            else
            {
              *(double *)&v312.__r_.__value_.__l.__data_ = (v173 * 10000.0 + v228) / 10000.0;
              *(double *)&v312.__r_.__value_.__l.__size_ = (double)v276;
              sub_20C291350((uint64_t)v278, &v312);
            }
            ++v276;
LABEL_393:
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__src.__r_.__value_.__l.__data_);
            if ((__dst_16[31] & 0x80000000) != 0)
              operator delete(*(void **)&__dst_16[8]);
            if ((__dst_16[7] & 0x80000000) != 0)
              operator delete((void *)__dst);
            v228 = v231 + v228;
            if (v228 > v230)
              goto LABEL_400;
            continue;
          }
        }
      }
    }
LABEL_429:
    sub_20C290D3C((uint64_t)&v282);
  }
  sub_20C291734((uint64_t)&v287, v288);
}

void sub_20C29029C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  char a69;
  uint64_t a70;
  void *a72;
  char a73;
  uint64_t v73;

  if (a44 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v73 - 184));
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&STACK[0x270]);
  STACK[0x270] = (unint64_t)&a54;
  sub_20BDE5038((void ***)&STACK[0x270]);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  sub_20BDE9D48((uint64_t)&a69, (_QWORD *)a70);
  if (a73 < 0)
    operator delete(a72);
  sub_20C290D3C((uint64_t)&a36);
  sub_20C291734((uint64_t)&a51, (_QWORD *)a52);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C2907B0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  const void **v10;
  uint64_t *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v18[2];
  char v19;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (!v6)
    goto LABEL_10;
  v8 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v9 = (uint64_t **)v6;
      v10 = (const void **)(v6 + 4);
      if (!sub_20BDDDF74((uint64_t)(a1 + 2), (const void **)a2, (const void **)v6 + 4))
        break;
      v6 = *v9;
      v8 = v9;
      if (!*v9)
        goto LABEL_10;
    }
    if (!sub_20BDDDF74((uint64_t)(a1 + 2), v10, (const void **)a2))
      break;
    v8 = v9 + 1;
    v6 = v9[1];
    if (!v6)
      goto LABEL_10;
  }
  v11 = *v8;
  if (!*v8)
  {
LABEL_10:
    v12 = operator new(0x90uLL);
    v13 = v12;
    v18[0] = v12;
    v18[1] = v7;
    v19 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC(v12 + 32, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_OWORD *)v12 + 2) = *(_OWORD *)a2;
      *((_QWORD *)v12 + 6) = *(_QWORD *)(a2 + 16);
    }
    *((_QWORD *)v13 + 7) = 0;
    *((_QWORD *)v13 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v13 + 18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v13 + 19);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v13 + 12, 0.0, 1.0);
    *((_QWORD *)v13 + 14) = 0;
    v14 = v13 + 120;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20BDDBFAC(v14, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)a3;
      *((_QWORD *)v13 + 17) = *(_QWORD *)(a3 + 16);
    }
    v19 = 1;
    v15 = (uint64_t *)v18[0];
    *(_QWORD *)v18[0] = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v9;
    *v8 = v15;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v15 = *v8;
    }
    sub_20BDDE208(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    sub_20C291894((uint64_t)v18);
  }
  return v11;
}

void sub_20C290968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD ***v6;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  va_list va;

  va_start(va, a2);
  sub_20BF49F14(v6, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v5);
  sub_20BFD265C(v4);
  v8 = *(unsigned int **)(v2 + 64);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_20C291894((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C290A18(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_20BE10BF0(v7, a2);
  sub_20C291788((uint64_t)(a2 + 4));
  operator delete(a2);
  return v4;
}

uint64_t sub_20C290AA0(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xF0F0F0F0F0F0F1)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C2943A8(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 272 * v6;
    sub_20C294334(a1, v7);
    return sub_20C29470C((uint64_t)v7);
  }
  return result;
}

void sub_20C290B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C29470C((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_20C290B50(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::VtValue *result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  result = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4((uint64_t *)a1, (const void **)EmptyString);
  if (result)
  {
    v7 = (uint64_t *)result;
    result = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF5A0F8(result);
    if ((_DWORD)result)
    {
      v8 = v7[1];
      if ((v8 & 4) != 0)
        v9 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      else
        v9 = *v7;
      return (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C294B1C(a3, v9);
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_20C290BD8(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::VtValue *result;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  uint64_t v6;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  result = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4((uint64_t *)a1, (const void **)EmptyString);
  if (result)
  {
    v5 = result;
    if (sub_20BFB4608(result))
    {
      v6 = *((_QWORD *)v5 + 1);
      if ((v6 & 4) != 0)
        return (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      else
        return *(pxrInternal__aapl__pxrReserved__::VtValue **)v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20C290C54(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  uint64_t v6;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4((uint64_t *)a1, (const void **)EmptyString);
  v5 = v4;
  if (v4)
  {
    if (sub_20BF78EEC(v4))
    {
      v6 = *((_QWORD *)v5 + 1);
      if ((v6 & 4) != 0)
        return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v5;
}

void sub_20C290CD0(double *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2)
{
  uint64_t v4;
  char *v5;
  double *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)a1))
  {
    sub_20BF59FB0(a2, v4, v5);
    v6 = (double *)*((_QWORD *)a2 + 4);
    sub_20BF59FB0(a2, v7, v8);
    v9 = *((_QWORD *)a2 + 4) + 16 * *(_QWORD *)a2;
    while (v6 != (double *)v9)
    {
      *v6 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a1, *v6);
      v6 += 2;
    }
  }
}

uint64_t sub_20C290D3C(uint64_t a1)
{
  void *v2;
  uint64_t i;

  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    for (i = *(_QWORD *)(a1 + 8); (void *)i != v2; sub_20C2918DC(i))
      i -= 88;
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20C290D98(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t *a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  double v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  double v15[2];
  __n128 v16[2];
  uint64_t v17;

  v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C291094(a4, a3);
  if (v6)
  {
    v7 = v6;
    if (sub_20BF5A0F8(v6))
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      sub_20BF5A044(v7, v16);
      sub_20C1034E8(&v13, a2);
      v15[0] = sub_20C291030(a1, &v13);
      v15[1] = v8;
      sub_20C290CD0(v15, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
      v9 = v14;
      if (v14)
      {
        v10 = (unsigned int *)(v14 + 8);
        do
        {
          v11 = __ldxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      sub_20BF5A044(v7, v16);
      sub_20BF5618C((uint64_t)v16);
    }
  }
}

void sub_20C290E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C290EBC(uint64_t a1, const void *****a2)
{
  const void ****v4;
  const void ****v5;
  uint64_t result;

  if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (const void ****)(*(uint64_t (**)(const void *****))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
                                                                        + 168))(a2);
    else
      v5 = *a2;
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=(*(const void *****)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C290F3C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _QWORD ***v4;
  _QWORD **v5;
  uint64_t result;
  _QWORD **v7;

  if (sub_20BF4A73C(a2))
  {
    sub_20C290FC0((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v7);
    v4 = *(_QWORD ****)(a1 + 8);
    v5 = v7;
    v7 = 0;
    sub_20BF49F14(v4, v5);
    sub_20BF49F14(&v7, 0);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *sub_20C290FC0@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *result;
  uint64_t v6;
  BOOL v7;

  *(_QWORD *)a2 = 0;
  v4 = (uint64_t *)sub_20BF4D190((const void *****)a1);
  result = pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v4, a2);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    v7 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v7 = 1;
  if (!v7)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_20C291018(_Unwind_Exception *a1)
{
  _QWORD ***v1;

  sub_20BF49F14(v1, 0);
  _Unwind_Resume(a1);
}

double sub_20C291030(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v5;
  char *v6;
  uint64_t *LayerStack;
  _QWORD *v8;
  double *LayerOffsetForLayer;
  __int128 v11;

  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a1);
  v11 = *(_OWORD *)((char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v5, v6) + 40);
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  v8 = (_QWORD *)sub_20C1FE500(LayerStack);
  LayerOffsetForLayer = (double *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v8, a2);
  if (LayerOffsetForLayer)
    return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)&v11, LayerOffsetForLayer);
  else
    return *(double *)&v11;
}

uint64_t sub_20C291094(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::find((uint64_t *)a1, (const void **)EmptyString);
  v6 = v5;
  v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  if (v6 == v8 && (v6 ? (v9 = v4 == v7) : (v9 = 1), v9))
    return 0;
  else
    return v4 + 56;
}

uint64_t sub_20C29110C(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 256;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 256));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 260));
  *(_QWORD *)(a1 + 264) = 0;
  return a1;
}

uint64_t sub_20C29117C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 40))
  {
    if (a1 != a2)
    {
      sub_20BF5618C(a1);
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t sub_20C2911FC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 40))
  {
    if (a1 != a2)
    {
      sub_20C00A724((_QWORD *)a1);
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

void sub_20C29127C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  unint64_t v6;
  const char *v7;
  const char *Text;
  const char *v9;
  char *v10;
  void *p_p;
  void *__p;
  char v13;

  if (sub_20C286E00(2))
  {
    v6 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v6)
    {
      v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0)
        v7 = *(const char **)v7;
    }
    else
    {
      v7 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    sub_20C291658(a2);
    if (v13 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s for prim <%s> derived: %s\n", v9, v10, v7, Text, p_p);
    if (v13 < 0)
      operator delete(__p);
  }
}

void sub_20C291334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C291350(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_OWORD *)(v5 + 16 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(__int128 **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF59F18(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 16 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 16;
      }
      while (v14);
    }
    *(_OWORD *)&v12[2 * v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, Args = <pxrInternal__aapl__pxrReserved__::GfVec2d>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

uint64_t sub_20C2914B4()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  sub_20BDDE5E0((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v3);
}

void sub_20C291568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29157C(uint64_t *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;
  uint64_t v6;

  sub_20BDDE5E0((uint64_t)v3);
  v6 = a1[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v3, a1, (uint64_t)&v6, (void (*)(uint64_t, _QWORD *))sub_20C00A70C);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C291644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BDDE6CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C291658(uint64_t *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;
  uint64_t v6;

  sub_20BDDE5E0((uint64_t)v3);
  v6 = a1[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v3, a1, (uint64_t)&v6, (void (*)(uint64_t, _QWORD *))sub_20BF5A608);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C291720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BDDE6CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C291734(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C291734(a1, *a2);
    sub_20C291734(a1, a2[1]);
    sub_20C291788((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C291788(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  sub_20BF49F14((_QWORD ***)(a1 + 80), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_20BFD265C((_DWORD *)(a1 + 40));
  v2 = *(unsigned int **)(a1 + 32);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C291818(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  sub_20BF49F14((_QWORD ***)(a1 + 56), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_20C291894(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C291788((uint64_t)v2 + 32);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20C2918DC(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  sub_20BF49F14((_QWORD ***)(a1 + 56), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_20C29195C(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_20BDDF5B4();
    v7 = (char *)operator new(88 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[88 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[88 * a2];
  return a1;
}

void sub_20C2919D8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 88;
    v4 -= 88;
    sub_20C291AB8(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t sub_20C291A68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3 == v2)
      break;
    *(_QWORD *)(a1 + 16) = v3 - 88;
    sub_20C2918DC(v3 - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_20C291AB8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v5;
  result = *(__n128 *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(__n128 *)(a1 + 64) = result;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

uint64_t sub_20C291B28(uint64_t result, __int128 *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  __int128 *v18;
  _BOOL4 v19;
  __int128 *v20;
  BOOL v21;
  __int128 *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  _QWORD **v32;
  __int128 v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  _QWORD **v39;
  void **v40;
  __int128 v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  BOOL v47;
  int v48;
  _QWORD **v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v53;
  char *v54;
  __int128 *v55;
  unint64_t v56;
  BOOL v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  void **v66;
  __int128 v67;
  _QWORD **v68;
  __int128 v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  __int128 v74;
  _QWORD **v75;
  void **v76;
  __int128 v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  _QWORD **v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  _QWORD **v93;
  void **v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  void **v100;
  __int128 v101;
  _QWORD **v102;
  __int128 v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  int64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _QWORD **v114;
  __int128 v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  __int128 v121;
  _QWORD **v122;
  void **v123;
  __int128 v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  void **v130;
  __int128 v131;
  _QWORD **v132;
  __int128 v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  int64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  _QWORD **v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  __int128 v151;
  _QWORD **v152;
  void **v153;
  __int128 v154;
  void **v155;
  unsigned int *v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  __int128 v160;
  _QWORD **v161;
  __int128 v162;
  unsigned int *v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  void **v167;
  __int128 v168;
  _QWORD **v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  __int128 v174;
  _QWORD **v175;
  __int128 v176;
  uint64_t v177;
  unsigned int *v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int v181;
  __int128 v182;
  _QWORD **v183;
  void **v184;
  __int128 v185;
  unsigned int *v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int v189;
  void **v190;
  __int128 v191;
  _QWORD **v192;
  __int128 v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  __int128 v202;
  _QWORD **v203;
  __int128 v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  _QWORD **v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  _QWORD **v221;
  void **v222;
  unsigned int *v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  void **v227;
  __int128 v228;
  _QWORD **v229;
  __int128 v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  _QWORD ***v234;
  __int128 *v235;
  __int128 *v236;
  _DWORD *v237;
  __int128 *v239;
  void **v240;
  __int128 *v241;
  int64_t v243;
  uint64_t v245;
  unint64_t v246;
  __int128 v247;
  char *v248;
  __int128 v249;
  __int128 v250;
  _QWORD **v251;
  __int128 __p;
  uint64_t v253;
  uint64_t v254[3];
  char v255;
  __int128 v256;
  char *v257;
  __int128 v258;
  __int128 v259;
  _QWORD **v260;
  __int128 v261;
  uint64_t v262;
  __int128 *v263;
  char *v264;
  char *v265;

  v4 = result;
LABEL_2:
  v5 = (unint64_t)a2;
  v239 = (__int128 *)((char *)a2 - 88);
  v6 = (__int128 *)v4;
  while (2)
  {
    v4 = (uint64_t)v6;
    v7 = v5 - (_QWORD)v6;
    v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - (_QWORD)v6) >> 3);
    switch(v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        *(_QWORD *)&v256 = (char *)a2 - 88;
        *((_QWORD *)&v256 + 1) = (char *)a2 - 72;
        v257 = (char *)a2 - 56;
        *(_QWORD *)&v247 = v4;
        *((_QWORD *)&v247 + 1) = v4 + 16;
        v248 = (char *)(v4 + 32);
        result = sub_20C293EF0((uint64_t)&v263, (uint64_t *)&v256, (uint64_t *)&v247);
        if ((_DWORD)result)
          return sub_20C293FC0((__int128 *)v4, v239);
        return result;
      case 3:
        return sub_20C293954((__int128 *)v4, (__int128 *)(v4 + 88), v239);
      case 4:
        return sub_20C294240((__int128 *)v4, (__int128 *)(v4 + 88), (__int128 *)(v4 + 176), v239);
      case 5:
        return sub_20C29381C((__int128 *)v4, (__int128 *)(v4 + 88), (__int128 *)(v4 + 176), (__int128 *)(v4 + 264), v239);
      default:
        v245 = v4;
        if (v7 > 2111)
        {
          if (!a3)
          {
            if (v4 != v5)
            {
              v243 = (unint64_t)(v8 - 2) >> 1;
              v107 = v243;
              do
              {
                v108 = v107;
                if (v243 >= v107)
                {
                  v109 = (2 * v107) | 1;
                  v110 = v245 + 88 * v109;
                  if (2 * v107 + 2 < v8)
                  {
                    *(_QWORD *)&v256 = v245 + 88 * v109;
                    *((_QWORD *)&v256 + 1) = v110 + 16;
                    v257 = (char *)(v110 + 32);
                    *(_QWORD *)&v247 = v110 + 88;
                    *((_QWORD *)&v247 + 1) = v110 + 104;
                    v248 = (char *)(v110 + 120);
                    if (sub_20C293EF0((uint64_t)&v263, (uint64_t *)&v256, (uint64_t *)&v247))
                    {
                      v110 += 88;
                      v109 = 2 * v108 + 2;
                    }
                  }
                  *(_QWORD *)&v256 = v110;
                  *((_QWORD *)&v256 + 1) = v110 + 16;
                  v111 = v245 + 88 * v108;
                  v257 = (char *)(v110 + 32);
                  *(_QWORD *)&v247 = v111;
                  *((_QWORD *)&v247 + 1) = v111 + 16;
                  v248 = (char *)(v111 + 32);
                  if (!sub_20C293EF0((uint64_t)&v263, (uint64_t *)&v256, (uint64_t *)&v247))
                  {
                    v256 = *(_OWORD *)v111;
                    *(_QWORD *)v111 = 0;
                    *(_QWORD *)(v111 + 8) = 0;
                    LODWORD(v257) = *(_DWORD *)(v111 + 16);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v111 + 16));
                    HIDWORD(v257) = *(_DWORD *)(v111 + 20);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v111 + 20));
                    v112 = *(_OWORD *)(v111 + 40);
                    v258 = *(_OWORD *)(v111 + 24);
                    v259 = v112;
                    v113 = v245 + 88 * v108;
                    v114 = *(_QWORD ***)(v113 + 56);
                    *(_QWORD *)(v113 + 56) = 0;
                    v260 = v114;
                    v115 = *(_OWORD *)(v113 + 64);
                    v262 = *(_QWORD *)(v113 + 80);
                    v261 = v115;
                    *(_QWORD *)(v113 + 72) = 0;
                    *(_QWORD *)(v113 + 80) = 0;
                    *(_QWORD *)(v113 + 64) = 0;
                    do
                    {
                      v116 = v110;
                      v117 = *(unsigned int **)(v111 + 8);
                      *(_OWORD *)v111 = *(_OWORD *)v110;
                      *(_QWORD *)(v110 + 8) = 0;
                      if (v117)
                      {
                        v118 = v117 + 2;
                        do
                        {
                          v119 = __ldxr(v118);
                          v120 = v119 - 1;
                        }
                        while (__stlxr(v120, v118));
                        if (!v120)
                          (*(void (**)(unsigned int *))(*(_QWORD *)v117 + 8))(v117);
                      }
                      *(_QWORD *)v110 = 0;
                      sub_20BFD3EBC((int *)(v111 + 16), (int *)(v110 + 16));
                      sub_20BFD3F10((int *)(v111 + 20), (int *)(v110 + 20));
                      v121 = *(_OWORD *)(v110 + 24);
                      *(_OWORD *)(v111 + 40) = *(_OWORD *)(v110 + 40);
                      *(_OWORD *)(v111 + 24) = v121;
                      v122 = *(_QWORD ***)(v110 + 56);
                      *(_QWORD *)(v110 + 56) = 0;
                      sub_20BF49F14((_QWORD ***)(v111 + 56), v122);
                      v123 = (void **)(v111 + 64);
                      if (*(char *)(v111 + 87) < 0)
                        operator delete(*v123);
                      v124 = *(_OWORD *)(v110 + 64);
                      *(_QWORD *)(v111 + 80) = *(_QWORD *)(v110 + 80);
                      *(_OWORD *)v123 = v124;
                      *(_BYTE *)(v110 + 87) = 0;
                      *(_BYTE *)(v110 + 64) = 0;
                      if (v243 < v109)
                        break;
                      v125 = (2 * v109) | 1;
                      v110 = v245 + 88 * v125;
                      v109 = 2 * v109 + 2;
                      if (v109 >= v8)
                      {
                        v109 = v125;
                      }
                      else
                      {
                        *(_QWORD *)&v247 = v245 + 88 * v125;
                        *((_QWORD *)&v247 + 1) = v110 + 16;
                        v248 = (char *)(v110 + 32);
                        v263 = (__int128 *)(v110 + 88);
                        v264 = (char *)(v110 + 104);
                        v265 = (char *)(v110 + 120);
                        if (sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263))
                          v110 += 88;
                        else
                          v109 = v125;
                      }
                      *(_QWORD *)&v247 = v110;
                      *((_QWORD *)&v247 + 1) = v110 + 16;
                      v248 = (char *)(v110 + 32);
                      v263 = &v256;
                      v264 = (char *)&v257;
                      v265 = (char *)&v258 + 8;
                      v111 = v116;
                    }
                    while (!sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263));
                    v126 = *(unsigned int **)(v116 + 8);
                    *(_OWORD *)v116 = v256;
                    *((_QWORD *)&v256 + 1) = 0;
                    if (v126)
                    {
                      v127 = v126 + 2;
                      do
                      {
                        v128 = __ldxr(v127);
                        v129 = v128 - 1;
                      }
                      while (__stlxr(v129, v127));
                      if (!v129)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v126 + 8))(v126);
                    }
                    v130 = (void **)(v116 + 64);
                    *(_QWORD *)&v256 = 0;
                    sub_20BFD3EBC((int *)(v116 + 16), (int *)&v257);
                    sub_20BFD3F10((int *)(v116 + 20), (int *)&v257 + 1);
                    v131 = v259;
                    *(_OWORD *)(v116 + 24) = v258;
                    *(_OWORD *)(v116 + 40) = v131;
                    v132 = v260;
                    v260 = 0;
                    sub_20BF49F14((_QWORD ***)(v116 + 56), v132);
                    if (*(char *)(v116 + 87) < 0)
                      operator delete(*v130);
                    v133 = v261;
                    *(_QWORD *)(v116 + 80) = v262;
                    *(_OWORD *)v130 = v133;
                    HIBYTE(v262) = 0;
                    LOBYTE(v261) = 0;
                    sub_20BF49F14(&v260, 0);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v257 + 1);
                    sub_20BFD265C(&v257);
                    v134 = *((_QWORD *)&v256 + 1);
                    if (*((_QWORD *)&v256 + 1))
                    {
                      v135 = (unsigned int *)(*((_QWORD *)&v256 + 1) + 8);
                      do
                      {
                        v136 = __ldxr(v135);
                        v137 = v136 - 1;
                      }
                      while (__stlxr(v137, v135));
                      if (!v137)
                        (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
                    }
                  }
                }
                v107 = v108 - 1;
              }
              while (v108);
              v138 = v7 / 0x58uLL;
              v139 = v245;
              v237 = (_DWORD *)(v245 + 20);
              v236 = (__int128 *)(v245 + 64);
              do
              {
                v247 = *(_OWORD *)v139;
                *(_QWORD *)v139 = 0;
                *(_QWORD *)(v139 + 8) = 0;
                LODWORD(v248) = *(_DWORD *)(v139 + 16);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v245 + 16));
                HIDWORD(v248) = *v237;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v237);
                v140 = 0;
                v141 = *(_OWORD *)(v245 + 40);
                v249 = *(_OWORD *)(v245 + 24);
                v250 = v141;
                v142 = *(_QWORD ***)(v139 + 56);
                *(_QWORD *)(v139 + 56) = 0;
                v251 = v142;
                v143 = *v236;
                v253 = *(_QWORD *)(v245 + 80);
                __p = v143;
                *(_QWORD *)(v245 + 72) = 0;
                *(_QWORD *)(v245 + 80) = 0;
                *(_QWORD *)v236 = 0;
                do
                {
                  v144 = v139 + 88 * v140 + 88;
                  v145 = 2 * v140;
                  v140 = (2 * v140) | 1;
                  v146 = v145 + 2;
                  if (v145 + 2 < v138)
                  {
                    *(_QWORD *)&v256 = v144;
                    *((_QWORD *)&v256 + 1) = v144 + 16;
                    v257 = (char *)(v144 + 32);
                    v263 = (__int128 *)(v144 + 88);
                    v264 = (char *)(v144 + 104);
                    v265 = (char *)(v144 + 120);
                    if (sub_20C293EF0((uint64_t)v254, (uint64_t *)&v256, (uint64_t *)&v263))
                    {
                      v144 += 88;
                      v140 = v146;
                    }
                  }
                  v147 = *(unsigned int **)(v139 + 8);
                  *(_OWORD *)v139 = *(_OWORD *)v144;
                  *(_QWORD *)(v144 + 8) = 0;
                  if (v147)
                  {
                    v148 = v147 + 2;
                    do
                    {
                      v149 = __ldxr(v148);
                      v150 = v149 - 1;
                    }
                    while (__stlxr(v150, v148));
                    if (!v150)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v147 + 8))(v147);
                  }
                  *(_QWORD *)v144 = 0;
                  sub_20BFD3EBC((int *)(v139 + 16), (int *)(v144 + 16));
                  sub_20BFD3F10((int *)(v139 + 20), (int *)(v144 + 20));
                  v151 = *(_OWORD *)(v144 + 24);
                  *(_OWORD *)(v139 + 40) = *(_OWORD *)(v144 + 40);
                  *(_OWORD *)(v139 + 24) = v151;
                  v152 = *(_QWORD ***)(v144 + 56);
                  *(_QWORD *)(v144 + 56) = 0;
                  sub_20BF49F14((_QWORD ***)(v139 + 56), v152);
                  v153 = (void **)(v139 + 64);
                  if (*(char *)(v139 + 87) < 0)
                    operator delete(*v153);
                  v154 = *(_OWORD *)(v144 + 64);
                  *(_QWORD *)(v139 + 80) = *(_QWORD *)(v144 + 80);
                  *(_OWORD *)v153 = v154;
                  *(_BYTE *)(v144 + 87) = 0;
                  *(_BYTE *)(v144 + 64) = 0;
                  v139 = v144;
                }
                while (v140 <= (uint64_t)((unint64_t)(v138 - 2) >> 1));
                v241 = (__int128 *)(v144 + 24);
                v155 = (void **)(v144 + 64);
                if ((__int128 *)v144 == (__int128 *)((char *)a2 - 88))
                {
                  v198 = *(unsigned int **)(v144 + 8);
                  *(_OWORD *)v144 = v247;
                  *((_QWORD *)&v247 + 1) = 0;
                  v139 = v245;
                  if (v198)
                  {
                    v199 = v198 + 2;
                    do
                    {
                      v200 = __ldxr(v199);
                      v201 = v200 - 1;
                    }
                    while (__stlxr(v201, v199));
                    if (!v201)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v198 + 8))(v198);
                  }
                  *(_QWORD *)&v247 = 0;
                  sub_20BFD3EBC((int *)(v144 + 16), (int *)&v248);
                  sub_20BFD3F10((int *)(v144 + 20), (int *)&v248 + 1);
                  v202 = v250;
                  *v241 = v249;
                  *(_OWORD *)(v144 + 40) = v202;
                  v203 = v251;
                  v251 = 0;
                  sub_20BF49F14((_QWORD ***)(v144 + 56), v203);
                  if (*(char *)(v144 + 87) < 0)
                    operator delete(*v155);
                  v204 = __p;
                  *(_QWORD *)(v144 + 80) = v253;
                  *(_OWORD *)v155 = v204;
                  HIBYTE(v253) = 0;
                  LOBYTE(__p) = 0;
                }
                else
                {
                  v156 = *(unsigned int **)(v144 + 8);
                  *(_OWORD *)v144 = *(__int128 *)((char *)a2 - 88);
                  *((_QWORD *)a2 - 10) = 0;
                  if (v156)
                  {
                    v157 = v156 + 2;
                    do
                    {
                      v158 = __ldxr(v157);
                      v159 = v158 - 1;
                    }
                    while (__stlxr(v159, v157));
                    if (!v159)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v156 + 8))(v156);
                  }
                  *((_QWORD *)a2 - 11) = 0;
                  sub_20BFD3EBC((int *)(v144 + 16), (int *)a2 - 18);
                  sub_20BFD3F10((int *)(v144 + 20), (int *)a2 - 17);
                  v160 = *(a2 - 3);
                  *v241 = *(a2 - 4);
                  *(_OWORD *)(v144 + 40) = v160;
                  v161 = (_QWORD **)*((_QWORD *)a2 - 4);
                  *((_QWORD *)a2 - 4) = 0;
                  sub_20BF49F14((_QWORD ***)(v144 + 56), v161);
                  if (*(char *)(v144 + 87) < 0)
                    operator delete(*v155);
                  v162 = *(__int128 *)((char *)a2 - 24);
                  *(_QWORD *)(v144 + 80) = *((_QWORD *)a2 - 1);
                  *(_OWORD *)v155 = v162;
                  *((_BYTE *)a2 - 1) = 0;
                  *((_BYTE *)a2 - 24) = 0;
                  v163 = (unsigned int *)*((_QWORD *)a2 - 10);
                  *(__int128 *)((char *)a2 - 88) = v247;
                  *((_QWORD *)&v247 + 1) = 0;
                  if (v163)
                  {
                    v164 = v163 + 2;
                    do
                    {
                      v165 = __ldxr(v164);
                      v166 = v165 - 1;
                    }
                    while (__stlxr(v166, v164));
                    if (!v166)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v163 + 8))(v163);
                  }
                  v234 = (_QWORD ***)(v144 + 56);
                  v235 = (__int128 *)(v144 + 64);
                  v167 = (void **)a2 - 3;
                  *(_QWORD *)&v247 = 0;
                  sub_20BFD3EBC((int *)a2 - 18, (int *)&v248);
                  sub_20BFD3F10((int *)a2 - 17, (int *)&v248 + 1);
                  v168 = v250;
                  *(a2 - 4) = v249;
                  *(a2 - 3) = v168;
                  v169 = v251;
                  v251 = 0;
                  sub_20BF49F14((_QWORD ***)a2 - 4, v169);
                  if (*((char *)a2 - 1) < 0)
                    operator delete(*v167);
                  v170 = __p;
                  *((_QWORD *)a2 - 1) = v253;
                  *(_OWORD *)v167 = v170;
                  HIBYTE(v253) = 0;
                  LOBYTE(__p) = 0;
                  v139 = v245;
                  v171 = v144 + 88 - v245;
                  if (v171 >= 89)
                  {
                    v172 = (v171 / 0x58uLL - 2) >> 1;
                    v173 = v245 + 88 * v172;
                    *(_QWORD *)&v256 = v173;
                    *((_QWORD *)&v256 + 1) = v173 + 16;
                    v257 = (char *)(v173 + 32);
                    v263 = (__int128 *)v144;
                    v264 = (char *)(v144 + 16);
                    v265 = (char *)(v144 + 32);
                    if (sub_20C293EF0((uint64_t)v254, (uint64_t *)&v256, (uint64_t *)&v263))
                    {
                      v256 = *(_OWORD *)v144;
                      *(_QWORD *)v144 = 0;
                      *(_QWORD *)(v144 + 8) = 0;
                      LODWORD(v257) = *(_DWORD *)(v144 + 16);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v144 + 16));
                      HIDWORD(v257) = *(_DWORD *)(v144 + 20);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v144 + 20));
                      v174 = *(_OWORD *)(v144 + 40);
                      v258 = *v241;
                      v259 = v174;
                      v175 = *v234;
                      *v234 = 0;
                      v260 = v175;
                      v176 = *v235;
                      v262 = *(_QWORD *)(v144 + 80);
                      v261 = v176;
                      *(_QWORD *)(v144 + 72) = 0;
                      *(_QWORD *)(v144 + 80) = 0;
                      *(_QWORD *)v235 = 0;
                      do
                      {
                        v177 = v173;
                        v178 = *(unsigned int **)(v144 + 8);
                        *(_OWORD *)v144 = *(_OWORD *)v173;
                        *(_QWORD *)(v173 + 8) = 0;
                        if (v178)
                        {
                          v179 = v178 + 2;
                          do
                          {
                            v180 = __ldxr(v179);
                            v181 = v180 - 1;
                          }
                          while (__stlxr(v181, v179));
                          if (!v181)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v178 + 8))(v178);
                        }
                        *(_QWORD *)v173 = 0;
                        sub_20BFD3EBC((int *)(v144 + 16), (int *)(v173 + 16));
                        sub_20BFD3F10((int *)(v144 + 20), (int *)(v173 + 20));
                        v182 = *(_OWORD *)(v173 + 24);
                        *(_OWORD *)(v144 + 40) = *(_OWORD *)(v173 + 40);
                        *(_OWORD *)(v144 + 24) = v182;
                        v183 = *(_QWORD ***)(v173 + 56);
                        *(_QWORD *)(v173 + 56) = 0;
                        sub_20BF49F14((_QWORD ***)(v144 + 56), v183);
                        v184 = (void **)(v144 + 64);
                        if (*(char *)(v144 + 87) < 0)
                          operator delete(*v184);
                        v185 = *(_OWORD *)(v177 + 64);
                        *(_QWORD *)(v144 + 80) = *(_QWORD *)(v177 + 80);
                        *(_OWORD *)v184 = v185;
                        *(_BYTE *)(v177 + 87) = 0;
                        *(_BYTE *)(v177 + 64) = 0;
                        if (!v172)
                          break;
                        v172 = (v172 - 1) >> 1;
                        v173 = v245 + 88 * v172;
                        v263 = (__int128 *)v173;
                        v264 = (char *)(v173 + 16);
                        v265 = (char *)(v173 + 32);
                        v254[0] = (uint64_t)&v256;
                        v254[1] = (uint64_t)&v257;
                        v254[2] = (uint64_t)&v258 + 8;
                        v144 = v177;
                      }
                      while (sub_20C293EF0((uint64_t)&v255, (uint64_t *)&v263, v254));
                      v186 = *(unsigned int **)(v177 + 8);
                      *(_OWORD *)v177 = v256;
                      *((_QWORD *)&v256 + 1) = 0;
                      if (v186)
                      {
                        v187 = v186 + 2;
                        do
                        {
                          v188 = __ldxr(v187);
                          v189 = v188 - 1;
                        }
                        while (__stlxr(v189, v187));
                        if (!v189)
                          (*(void (**)(unsigned int *))(*(_QWORD *)v186 + 8))(v186);
                      }
                      v190 = (void **)(v177 + 64);
                      *(_QWORD *)&v256 = 0;
                      sub_20BFD3EBC((int *)(v177 + 16), (int *)&v257);
                      sub_20BFD3F10((int *)(v177 + 20), (int *)&v257 + 1);
                      v191 = v259;
                      *(_OWORD *)(v177 + 24) = v258;
                      *(_OWORD *)(v177 + 40) = v191;
                      v192 = v260;
                      v260 = 0;
                      sub_20BF49F14((_QWORD ***)(v177 + 56), v192);
                      if (*(char *)(v177 + 87) < 0)
                        operator delete(*v190);
                      v193 = v261;
                      *(_QWORD *)(v177 + 80) = v262;
                      *(_OWORD *)v190 = v193;
                      HIBYTE(v262) = 0;
                      LOBYTE(v261) = 0;
                      sub_20BF49F14(&v260, 0);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v257 + 1);
                      sub_20BFD265C(&v257);
                      v194 = *((_QWORD *)&v256 + 1);
                      if (*((_QWORD *)&v256 + 1))
                      {
                        v195 = (unsigned int *)(*((_QWORD *)&v256 + 1) + 8);
                        do
                        {
                          v196 = __ldxr(v195);
                          v197 = v196 - 1;
                        }
                        while (__stlxr(v197, v195));
                        if (!v197)
                          (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
                      }
                    }
                    v139 = v245;
                    if (SHIBYTE(v253) < 0)
                      operator delete((void *)__p);
                  }
                }
                sub_20BF49F14(&v251, 0);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v248 + 1);
                sub_20BFD265C(&v248);
                result = *((_QWORD *)&v247 + 1);
                if (*((_QWORD *)&v247 + 1))
                {
                  v205 = (unsigned int *)(*((_QWORD *)&v247 + 1) + 8);
                  do
                  {
                    v206 = __ldxr(v205);
                    v207 = v206 - 1;
                  }
                  while (__stlxr(v207, v205));
                  if (!v207)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                }
                a2 = (__int128 *)((char *)a2 - 88);
              }
              while (v138-- > 2);
            }
            return result;
          }
          v9 = (unint64_t)v8 >> 1;
          v10 = (__int128 *)(v4 + 88 * ((unint64_t)v8 >> 1));
          if ((unint64_t)v7 < 0x2C01)
          {
            sub_20C293954(v10, (__int128 *)v4, v239);
          }
          else
          {
            sub_20C293954((__int128 *)v4, v10, v239);
            v11 = 88 * v9;
            sub_20C293954((__int128 *)(v4 + 88), (__int128 *)(v11 + v4 - 88), a2 - 11);
            sub_20C293954((__int128 *)(v4 + 176), (__int128 *)(v4 + 88 + v11), (__int128 *)((char *)a2 - 264));
            sub_20C293954((__int128 *)(v11 + v4 - 88), v10, (__int128 *)(v4 + 88 + v11));
            sub_20C293FC0((__int128 *)v4, v10);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            *(_QWORD *)&v256 = v4 - 88;
            *((_QWORD *)&v256 + 1) = v4 - 72;
            v257 = (char *)(v4 - 56);
            *(_QWORD *)&v247 = v4;
            *((_QWORD *)&v247 + 1) = v4 + 16;
            v248 = (char *)(v4 + 32);
            if (!sub_20C293EF0((uint64_t)&v263, (uint64_t *)&v256, (uint64_t *)&v247))
            {
              v48 = *(_DWORD *)(v4 + 16);
              v256 = *(_OWORD *)v4;
              *(_QWORD *)v4 = 0;
              *(_QWORD *)(v4 + 8) = 0;
              LODWORD(v257) = v48;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v4 + 16));
              HIDWORD(v257) = *(_DWORD *)(v4 + 20);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v4 + 20));
              v49 = *(_QWORD ***)(v4 + 56);
              v50 = *(_OWORD *)(v4 + 40);
              v258 = *(_OWORD *)(v4 + 24);
              v259 = v50;
              *(_QWORD *)(v4 + 56) = 0;
              v260 = v49;
              v51 = *(_OWORD *)(v4 + 64);
              v262 = *(_QWORD *)(v4 + 80);
              v261 = v51;
              *(_QWORD *)(v4 + 72) = 0;
              *(_QWORD *)(v4 + 80) = 0;
              *(_QWORD *)(v4 + 64) = 0;
              *(_QWORD *)&v247 = &v256;
              *((_QWORD *)&v247 + 1) = &v257;
              v248 = (char *)&v258 + 8;
              v263 = (__int128 *)((char *)a2 - 88);
              v264 = (char *)a2 - 72;
              v265 = (char *)a2 - 56;
              if (sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263))
              {
                v52 = (__int128 *)v4;
                do
                {
                  v6 = (__int128 *)((char *)v52 + 88);
                  *(_QWORD *)&v247 = &v256;
                  *((_QWORD *)&v247 + 1) = &v257;
                  v248 = (char *)&v258 + 8;
                  v263 = (__int128 *)((char *)v52 + 88);
                  v264 = (char *)v52 + 104;
                  v265 = (char *)v52 + 120;
                  v53 = sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263);
                  v52 = v6;
                }
                while (!v53);
              }
              else
              {
                v54 = (char *)(v4 + 120);
                do
                {
                  v6 = (__int128 *)(v54 - 32);
                  if ((unint64_t)(v54 - 32) >= v5)
                    break;
                  *(_QWORD *)&v247 = &v256;
                  *((_QWORD *)&v247 + 1) = &v257;
                  v248 = (char *)&v258 + 8;
                  v263 = (__int128 *)(v54 - 32);
                  v264 = v54 - 16;
                  v265 = v54;
                  v54 += 88;
                }
                while (!sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263));
              }
              v55 = (__int128 *)v5;
              if ((unint64_t)v6 < v5)
              {
                v56 = v5;
                do
                {
                  v55 = (__int128 *)(v56 - 88);
                  *(_QWORD *)&v247 = &v256;
                  *((_QWORD *)&v247 + 1) = &v257;
                  v248 = (char *)&v258 + 8;
                  v263 = (__int128 *)(v56 - 88);
                  v264 = (char *)(v56 - 72);
                  v265 = (char *)(v56 - 56);
                  v57 = sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263);
                  v56 = (unint64_t)v55;
                }
                while (v57);
              }
              while (v6 < v55)
              {
                sub_20C293FC0(v6, v55);
                do
                {
                  *(_QWORD *)&v247 = &v256;
                  *((_QWORD *)&v247 + 1) = &v257;
                  v58 = (char *)v6 + 104;
                  v59 = (char *)v6 + 120;
                  v6 = (__int128 *)((char *)v6 + 88);
                  v248 = (char *)&v258 + 8;
                  v263 = v6;
                  v264 = v58;
                  v265 = v59;
                }
                while (!sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263));
                do
                {
                  *(_QWORD *)&v247 = &v256;
                  *((_QWORD *)&v247 + 1) = &v257;
                  v60 = (char *)v55 - 72;
                  v61 = (char *)v55 - 56;
                  v55 = (__int128 *)((char *)v55 - 88);
                  v248 = (char *)&v258 + 8;
                  v263 = v55;
                  v264 = v60;
                  v265 = v61;
                }
                while (sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263));
              }
              if ((__int128 *)((char *)v6 - 88) != (__int128 *)v4)
              {
                v62 = *(unsigned int **)(v4 + 8);
                *(_OWORD *)v4 = *(__int128 *)((char *)v6 - 88);
                *((_QWORD *)v6 - 10) = 0;
                if (v62)
                {
                  v63 = v62 + 2;
                  do
                  {
                    v64 = __ldxr(v63);
                    v65 = v64 - 1;
                  }
                  while (__stlxr(v65, v63));
                  if (!v65)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 8))(v62);
                }
                v66 = (void **)(v4 + 64);
                *((_QWORD *)v6 - 11) = 0;
                sub_20BFD3EBC((int *)(v4 + 16), (int *)v6 - 18);
                sub_20BFD3F10((int *)(v4 + 20), (int *)v6 - 17);
                v67 = *(v6 - 3);
                *(_OWORD *)(v4 + 24) = *(v6 - 4);
                *(_OWORD *)(v4 + 40) = v67;
                v68 = (_QWORD **)*((_QWORD *)v6 - 4);
                *((_QWORD *)v6 - 4) = 0;
                sub_20BF49F14((_QWORD ***)(v4 + 56), v68);
                if (*(char *)(v4 + 87) < 0)
                  operator delete(*v66);
                v69 = *(__int128 *)((char *)v6 - 24);
                *(_QWORD *)(v4 + 80) = *((_QWORD *)v6 - 1);
                *(_OWORD *)v66 = v69;
                *((_BYTE *)v6 - 1) = 0;
                *((_BYTE *)v6 - 24) = 0;
              }
              v70 = (unsigned int *)*((_QWORD *)v6 - 10);
              *(__int128 *)((char *)v6 - 88) = v256;
              *((_QWORD *)&v256 + 1) = 0;
              if (v70)
              {
                v71 = v70 + 2;
                do
                {
                  v72 = __ldxr(v71);
                  v73 = v72 - 1;
                }
                while (__stlxr(v73, v71));
                if (!v73)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 8))(v70);
              }
              *(_QWORD *)&v256 = 0;
              sub_20BFD3EBC((int *)v6 - 18, (int *)&v257);
              sub_20BFD3F10((int *)v6 - 17, (int *)&v257 + 1);
              v74 = v259;
              *(v6 - 4) = v258;
              *(v6 - 3) = v74;
              v75 = v260;
              v260 = 0;
              sub_20BF49F14((_QWORD ***)v6 - 4, v75);
              v76 = (void **)v6 - 3;
              if (*((char *)v6 - 1) < 0)
                operator delete(*v76);
              v77 = v261;
              *((_QWORD *)v6 - 1) = v262;
              *(_OWORD *)v76 = v77;
              HIBYTE(v262) = 0;
              LOBYTE(v261) = 0;
              sub_20BF49F14(&v260, 0);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v257 + 1);
              sub_20BFD265C(&v257);
              result = *((_QWORD *)&v256 + 1);
              if (*((_QWORD *)&v256 + 1))
              {
                v78 = (unsigned int *)(*((_QWORD *)&v256 + 1) + 8);
                do
                {
                  v79 = __ldxr(v78);
                  v80 = v79 - 1;
                }
                while (__stlxr(v80, v78));
                if (!v80)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              }
              goto LABEL_53;
            }
          }
          v256 = *(_OWORD *)v4;
          *(_QWORD *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          LODWORD(v257) = *(_DWORD *)(v4 + 16);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v4 + 16));
          HIDWORD(v257) = *(_DWORD *)(v4 + 20);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v4 + 20));
          v12 = 0;
          v13 = *(_QWORD ***)(v4 + 56);
          v14 = *(_OWORD *)(v4 + 40);
          v258 = *(_OWORD *)(v4 + 24);
          v259 = v14;
          *(_QWORD *)(v4 + 56) = 0;
          v260 = v13;
          v15 = *(_OWORD *)(v4 + 64);
          v262 = *(_QWORD *)(v4 + 80);
          v240 = (void **)(v4 + 64);
          v261 = v15;
          *(_QWORD *)(v4 + 72) = 0;
          *(_QWORD *)(v4 + 80) = 0;
          *(_QWORD *)(v4 + 64) = 0;
          do
          {
            *(_QWORD *)&v247 = v4 + v12 + 88;
            *((_QWORD *)&v247 + 1) = v4 + v12 + 104;
            v248 = (char *)(v4 + v12 + 120);
            v263 = &v256;
            v264 = (char *)&v257;
            v265 = (char *)&v258 + 8;
            v12 += 88;
          }
          while (sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263));
          v16 = v4 + v12;
          v17 = v5;
          if (v12 == 88)
          {
            v20 = a2;
            while (v16 < (unint64_t)v20)
            {
              v18 = (__int128 *)((char *)v20 - 88);
              *(_QWORD *)&v247 = (char *)v20 - 88;
              *((_QWORD *)&v247 + 1) = (char *)v20 - 72;
              v248 = (char *)v20 - 56;
              v263 = &v256;
              v264 = (char *)&v257;
              v265 = (char *)&v258 + 8;
              v21 = sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263);
              v20 = v18;
              if (v21)
                goto LABEL_21;
            }
            v18 = v20;
          }
          else
          {
            do
            {
              v18 = (__int128 *)(v17 - 88);
              *(_QWORD *)&v247 = v17 - 88;
              *((_QWORD *)&v247 + 1) = v17 - 72;
              v248 = (char *)(v17 - 56);
              v263 = &v256;
              v264 = (char *)&v257;
              v265 = (char *)&v258 + 8;
              v19 = sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263);
              v17 = (unint64_t)v18;
            }
            while (!v19);
          }
LABEL_21:
          v246 = v4 + v12;
          v6 = (__int128 *)(v4 + v12);
          if (v16 < (unint64_t)v18)
          {
            v22 = v18;
            do
            {
              sub_20C293FC0(v6, v22);
              do
              {
                v23 = (char *)v6 + 104;
                v24 = (char *)v6 + 120;
                v6 = (__int128 *)((char *)v6 + 88);
                *(_QWORD *)&v247 = v6;
                *((_QWORD *)&v247 + 1) = v23;
                v248 = v24;
                v263 = &v256;
                v264 = (char *)&v257;
                v265 = (char *)&v258 + 8;
              }
              while (sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263));
              do
              {
                v25 = (char *)v22 - 72;
                v26 = (char *)v22 - 56;
                v22 = (__int128 *)((char *)v22 - 88);
                *(_QWORD *)&v247 = v22;
                *((_QWORD *)&v247 + 1) = v25;
                v248 = v26;
                v263 = &v256;
                v264 = (char *)&v257;
                v265 = (char *)&v258 + 8;
              }
              while (!sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263));
            }
            while (v6 < v22);
          }
          if ((__int128 *)((char *)v6 - 88) != (__int128 *)v4)
          {
            v27 = *(unsigned int **)(v4 + 8);
            *(_OWORD *)v4 = *(__int128 *)((char *)v6 - 88);
            *((_QWORD *)v6 - 10) = 0;
            if (v27)
            {
              v28 = v27 + 2;
              do
              {
                v29 = __ldxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
                (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
            }
            *((_QWORD *)v6 - 11) = 0;
            sub_20BFD3EBC((int *)(v4 + 16), (int *)v6 - 18);
            sub_20BFD3F10((int *)(v4 + 20), (int *)v6 - 17);
            v31 = *(v6 - 3);
            *(_OWORD *)(v4 + 24) = *(v6 - 4);
            *(_OWORD *)(v4 + 40) = v31;
            v32 = (_QWORD **)*((_QWORD *)v6 - 4);
            *((_QWORD *)v6 - 4) = 0;
            sub_20BF49F14((_QWORD ***)(v4 + 56), v32);
            if (*(char *)(v4 + 87) < 0)
              operator delete(*v240);
            v33 = *(__int128 *)((char *)v6 - 24);
            *(_QWORD *)(v4 + 80) = *((_QWORD *)v6 - 1);
            *(_OWORD *)v240 = v33;
            *((_BYTE *)v6 - 1) = 0;
            *((_BYTE *)v6 - 24) = 0;
          }
          v34 = (unsigned int *)*((_QWORD *)v6 - 10);
          *(__int128 *)((char *)v6 - 88) = v256;
          *((_QWORD *)&v256 + 1) = 0;
          if (v34)
          {
            v35 = v34 + 2;
            do
            {
              v36 = __ldxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
              (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
          }
          *(_QWORD *)&v256 = 0;
          sub_20BFD3EBC((int *)v6 - 18, (int *)&v257);
          sub_20BFD3F10((int *)v6 - 17, (int *)&v257 + 1);
          v38 = v259;
          *(v6 - 4) = v258;
          *(v6 - 3) = v38;
          v39 = v260;
          v260 = 0;
          sub_20BF49F14((_QWORD ***)v6 - 4, v39);
          v40 = (void **)v6 - 3;
          if (*((char *)v6 - 1) < 0)
            operator delete(*v40);
          v41 = v261;
          *((_QWORD *)v6 - 1) = v262;
          *(_OWORD *)v40 = v41;
          HIBYTE(v262) = 0;
          LOBYTE(v261) = 0;
          sub_20BF49F14(&v260, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v257 + 1);
          sub_20BFD265C(&v257);
          v42 = *((_QWORD *)&v256 + 1);
          if (*((_QWORD *)&v256 + 1))
          {
            v43 = (unsigned int *)(*((_QWORD *)&v256 + 1) + 8);
            do
            {
              v44 = __ldxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          }
          v46 = v246 >= (unint64_t)v18;
          v5 = (unint64_t)a2;
          if (!v46)
            goto LABEL_52;
          v47 = sub_20C293AA4((__int128 *)v4, (__int128 *)((char *)v6 - 88));
          result = sub_20C293AA4(v6, a2);
          if (!(_DWORD)result)
          {
            if (v47)
              continue;
LABEL_52:
            result = sub_20C291B28(v4, (char *)v6 - 88, a3, a4 & 1);
LABEL_53:
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)((char *)v6 - 88);
          if (v47)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (v4 != v5)
          {
            v81 = v4 + 88;
            if ((__int128 *)(v4 + 88) != a2)
            {
              v82 = v4;
              do
              {
                v83 = v81;
                *(_QWORD *)&v256 = v81;
                *((_QWORD *)&v256 + 1) = v82 + 104;
                v257 = (char *)(v82 + 120);
                *(_QWORD *)&v247 = v82;
                *((_QWORD *)&v247 + 1) = v82 + 16;
                v248 = (char *)(v82 + 32);
                result = sub_20C293EF0((uint64_t)&v263, (uint64_t *)&v256, (uint64_t *)&v247);
                if ((_DWORD)result)
                {
                  v256 = *(_OWORD *)v83;
                  *(_QWORD *)v83 = 0;
                  *(_QWORD *)(v83 + 8) = 0;
                  LODWORD(v257) = *(_DWORD *)(v82 + 104);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v82 + 104));
                  HIDWORD(v257) = *(_DWORD *)(v82 + 108);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v82 + 108));
                  v84 = *(_OWORD *)(v82 + 128);
                  v258 = *(_OWORD *)(v82 + 112);
                  v259 = v84;
                  v85 = *(_QWORD ***)(v82 + 144);
                  v86 = *(_OWORD *)(v82 + 152);
                  *(_QWORD *)(v82 + 144) = 0;
                  *(_QWORD *)(v82 + 152) = 0;
                  v260 = v85;
                  v261 = v86;
                  v262 = *(_QWORD *)(v82 + 168);
                  v87 = v83;
                  *(_QWORD *)(v82 + 160) = 0;
                  *(_QWORD *)(v82 + 168) = 0;
                  while (1)
                  {
                    v88 = v82;
                    v89 = *(unsigned int **)(v87 + 8);
                    *(_OWORD *)v87 = *(_OWORD *)v82;
                    *(_QWORD *)(v82 + 8) = 0;
                    if (v89)
                    {
                      v90 = v89 + 2;
                      do
                      {
                        v91 = __ldxr(v90);
                        v92 = v91 - 1;
                      }
                      while (__stlxr(v92, v90));
                      if (!v92)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v89 + 8))(v89);
                    }
                    *(_QWORD *)v82 = 0;
                    sub_20BFD3EBC((int *)(v87 + 16), (int *)(v82 + 16));
                    sub_20BFD3F10((int *)(v87 + 20), (int *)(v82 + 20));
                    *(_OWORD *)(v87 + 24) = *(_OWORD *)(v82 + 24);
                    *(_OWORD *)(v87 + 40) = *(_OWORD *)(v82 + 40);
                    v93 = *(_QWORD ***)(v82 + 56);
                    *(_QWORD *)(v82 + 56) = 0;
                    sub_20BF49F14((_QWORD ***)(v87 + 56), v93);
                    v94 = (void **)(v87 + 64);
                    if (*(char *)(v87 + 87) < 0)
                      operator delete(*v94);
                    *(_OWORD *)v94 = *(_OWORD *)(v88 + 64);
                    *(_QWORD *)(v87 + 80) = *(_QWORD *)(v88 + 80);
                    *(_BYTE *)(v88 + 87) = 0;
                    *(_BYTE *)(v88 + 64) = 0;
                    v95 = v245;
                    if (v88 == v245)
                      break;
                    v82 = v88 - 88;
                    *(_QWORD *)&v247 = &v256;
                    *((_QWORD *)&v247 + 1) = &v257;
                    v248 = (char *)&v258 + 8;
                    v263 = (__int128 *)(v88 - 88);
                    v264 = (char *)(v88 - 72);
                    v265 = (char *)(v88 - 56);
                    v87 = v88;
                    if (!sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263))
                    {
                      v95 = v88;
                      break;
                    }
                  }
                  v96 = *(unsigned int **)(v95 + 8);
                  *(_OWORD *)v95 = v256;
                  *((_QWORD *)&v256 + 1) = 0;
                  if (v96)
                  {
                    v97 = v96 + 2;
                    do
                    {
                      v98 = __ldxr(v97);
                      v99 = v98 - 1;
                    }
                    while (__stlxr(v99, v97));
                    if (!v99)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v96 + 8))(v96);
                  }
                  v100 = (void **)(v88 + 64);
                  *(_QWORD *)&v256 = 0;
                  sub_20BFD3EBC((int *)(v88 + 16), (int *)&v257);
                  sub_20BFD3F10((int *)(v88 + 20), (int *)&v257 + 1);
                  v101 = v259;
                  *(_OWORD *)(v88 + 24) = v258;
                  *(_OWORD *)(v88 + 40) = v101;
                  v102 = v260;
                  v260 = 0;
                  sub_20BF49F14((_QWORD ***)(v95 + 56), v102);
                  if (*(char *)(v95 + 87) < 0)
                    operator delete(*v100);
                  v103 = v261;
                  *(_QWORD *)(v88 + 80) = v262;
                  *(_OWORD *)v100 = v103;
                  HIBYTE(v262) = 0;
                  LOBYTE(v261) = 0;
                  sub_20BF49F14(&v260, 0);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v257 + 1);
                  sub_20BFD265C(&v257);
                  result = *((_QWORD *)&v256 + 1);
                  if (*((_QWORD *)&v256 + 1))
                  {
                    v104 = (unsigned int *)(*((_QWORD *)&v256 + 1) + 8);
                    do
                    {
                      v105 = __ldxr(v104);
                      v106 = v105 - 1;
                    }
                    while (__stlxr(v106, v104));
                    if (!v106)
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                  }
                }
                v81 = v83 + 88;
                v82 = v83;
              }
              while ((__int128 *)(v83 + 88) != a2);
            }
          }
        }
        else if (v4 != v5)
        {
          v209 = v4 + 88;
          if ((__int128 *)(v4 + 88) != a2)
          {
            do
            {
              v210 = v209;
              *(_QWORD *)&v256 = v209;
              *((_QWORD *)&v256 + 1) = v4 + 104;
              v257 = (char *)(v4 + 120);
              *(_QWORD *)&v247 = v4;
              *((_QWORD *)&v247 + 1) = v4 + 16;
              v248 = (char *)(v4 + 32);
              result = sub_20C293EF0((uint64_t)&v263, (uint64_t *)&v256, (uint64_t *)&v247);
              if ((_DWORD)result)
              {
                v256 = *(_OWORD *)v210;
                *(_QWORD *)v210 = 0;
                *(_QWORD *)(v210 + 8) = 0;
                LODWORD(v257) = *(_DWORD *)(v4 + 104);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v4 + 104));
                HIDWORD(v257) = *(_DWORD *)(v4 + 108);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v4 + 108));
                v211 = *(_OWORD *)(v4 + 128);
                v258 = *(_OWORD *)(v4 + 112);
                v259 = v211;
                v212 = *(_QWORD ***)(v4 + 144);
                v213 = *(_OWORD *)(v4 + 152);
                *(_QWORD *)(v4 + 144) = 0;
                *(_QWORD *)(v4 + 152) = 0;
                v260 = v212;
                v261 = v213;
                v262 = *(_QWORD *)(v4 + 168);
                v214 = v210;
                *(_QWORD *)(v4 + 160) = 0;
                *(_QWORD *)(v4 + 168) = 0;
                v215 = v4;
                do
                {
                  v216 = v215;
                  v217 = *(unsigned int **)(v214 + 8);
                  *(_OWORD *)v214 = *(_OWORD *)v215;
                  *(_QWORD *)(v215 + 8) = 0;
                  if (v217)
                  {
                    v218 = v217 + 2;
                    do
                    {
                      v219 = __ldxr(v218);
                      v220 = v219 - 1;
                    }
                    while (__stlxr(v220, v218));
                    if (!v220)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v217 + 8))(v217);
                  }
                  *(_QWORD *)v215 = 0;
                  sub_20BFD3EBC((int *)(v214 + 16), (int *)(v215 + 16));
                  sub_20BFD3F10((int *)(v214 + 20), (int *)(v215 + 20));
                  *(_OWORD *)(v214 + 24) = *(_OWORD *)(v215 + 24);
                  *(_OWORD *)(v214 + 40) = *(_OWORD *)(v215 + 40);
                  v221 = *(_QWORD ***)(v215 + 56);
                  *(_QWORD *)(v215 + 56) = 0;
                  sub_20BF49F14((_QWORD ***)(v214 + 56), v221);
                  v222 = (void **)(v214 + 64);
                  if (*(char *)(v214 + 87) < 0)
                    operator delete(*v222);
                  *(_OWORD *)v222 = *(_OWORD *)(v216 + 64);
                  *(_QWORD *)(v214 + 80) = *(_QWORD *)(v216 + 80);
                  *(_BYTE *)(v216 + 87) = 0;
                  *(_BYTE *)(v216 + 64) = 0;
                  *(_QWORD *)&v247 = &v256;
                  *((_QWORD *)&v247 + 1) = &v257;
                  v248 = (char *)&v258 + 8;
                  v215 = v216 - 88;
                  v263 = (__int128 *)(v216 - 88);
                  v264 = (char *)(v216 - 72);
                  v265 = (char *)(v216 - 56);
                  v214 = v216;
                }
                while (sub_20C293EF0((uint64_t)v254, (uint64_t *)&v247, (uint64_t *)&v263));
                v223 = *(unsigned int **)(v216 + 8);
                *(_OWORD *)v216 = v256;
                *((_QWORD *)&v256 + 1) = 0;
                if (v223)
                {
                  v224 = v223 + 2;
                  do
                  {
                    v225 = __ldxr(v224);
                    v226 = v225 - 1;
                  }
                  while (__stlxr(v226, v224));
                  if (!v226)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v223 + 8))(v223);
                }
                v227 = (void **)(v216 + 64);
                *(_QWORD *)&v256 = 0;
                sub_20BFD3EBC((int *)(v216 + 16), (int *)&v257);
                sub_20BFD3F10((int *)(v216 + 20), (int *)&v257 + 1);
                v228 = v259;
                *(_OWORD *)(v216 + 24) = v258;
                *(_OWORD *)(v216 + 40) = v228;
                v229 = v260;
                v260 = 0;
                sub_20BF49F14((_QWORD ***)(v216 + 56), v229);
                if (*(char *)(v216 + 87) < 0)
                  operator delete(*v227);
                v230 = v261;
                *(_QWORD *)(v216 + 80) = v262;
                *(_OWORD *)v227 = v230;
                HIBYTE(v262) = 0;
                LOBYTE(v261) = 0;
                sub_20BF49F14(&v260, 0);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v257 + 1);
                sub_20BFD265C(&v257);
                result = *((_QWORD *)&v256 + 1);
                if (*((_QWORD *)&v256 + 1))
                {
                  v231 = (unsigned int *)(*((_QWORD *)&v256 + 1) + 8);
                  do
                  {
                    v232 = __ldxr(v231);
                    v233 = v232 - 1;
                  }
                  while (__stlxr(v233, v231));
                  if (!v233)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                }
              }
              v209 = v210 + 88;
              v4 = v210;
            }
            while ((__int128 *)(v210 + 88) != a2);
          }
        }
        return result;
    }
  }
}

void sub_20C2935B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22,_QWORD ***a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  _DWORD *v46;
  uint64_t v47;

  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));
  sub_20BF49F14(a23, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a22);
  sub_20C96BAEC(v46);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29381C(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  uint64_t result;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  char v17;

  sub_20C294240(a1, a2, a3, a4);
  v14 = a5;
  v15 = a5 + 1;
  v16 = a5 + 2;
  v11 = a4;
  v12 = a4 + 1;
  v13 = a4 + 2;
  result = sub_20C293EF0((uint64_t)&v17, (uint64_t *)&v14, (uint64_t *)&v11);
  if ((_DWORD)result)
  {
    sub_20C293FC0(a4, a5);
    v14 = a4;
    v15 = a4 + 1;
    v16 = a4 + 2;
    v11 = a3;
    v12 = a3 + 1;
    v13 = a3 + 2;
    result = sub_20C293EF0((uint64_t)&v17, (uint64_t *)&v14, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      sub_20C293FC0(a3, a4);
      v14 = a3;
      v15 = a3 + 1;
      v16 = a3 + 2;
      v11 = a2;
      v12 = a2 + 1;
      v13 = a2 + 2;
      result = sub_20C293EF0((uint64_t)&v17, (uint64_t *)&v14, (uint64_t *)&v11);
      if ((_DWORD)result)
      {
        sub_20C293FC0(a2, a3);
        v14 = a2;
        v15 = a2 + 1;
        v16 = a2 + 2;
        v11 = a1;
        v12 = a1 + 1;
        v13 = a1 + 2;
        result = sub_20C293EF0((uint64_t)&v17, (uint64_t *)&v14, (uint64_t *)&v11);
        if ((_DWORD)result)
          return sub_20C293FC0(a1, a2);
      }
    }
  }
  return result;
}

uint64_t sub_20C293954(__int128 *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t result;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  char v19;

  v6 = a2 + 1;
  v16 = a2;
  v17 = a2 + 1;
  v7 = a2 + 2;
  v18 = a2 + 2;
  v8 = a1 + 1;
  v9 = a1 + 2;
  v13 = a1;
  v14 = a1 + 1;
  v15 = a1 + 2;
  if (sub_20C293EF0((uint64_t)&v19, (uint64_t *)&v16, (uint64_t *)&v13))
  {
    v16 = a3;
    v17 = a3 + 1;
    v18 = a3 + 2;
    v13 = a2;
    v14 = v6;
    v15 = v7;
    if (sub_20C293EF0((uint64_t)&v19, (uint64_t *)&v16, (uint64_t *)&v13))
    {
      v10 = a1;
    }
    else
    {
      sub_20C293FC0(a1, a2);
      v16 = a3;
      v17 = a3 + 1;
      v18 = a3 + 2;
      v13 = a2;
      v14 = v6;
      v15 = v7;
      result = sub_20C293EF0((uint64_t)&v19, (uint64_t *)&v16, (uint64_t *)&v13);
      if (!(_DWORD)result)
        return result;
      v10 = a2;
    }
    v12 = a3;
    return sub_20C293FC0(v10, v12);
  }
  v16 = a3;
  v17 = a3 + 1;
  v18 = a3 + 2;
  v13 = a2;
  v14 = v6;
  v15 = v7;
  result = sub_20C293EF0((uint64_t)&v19, (uint64_t *)&v16, (uint64_t *)&v13);
  if ((_DWORD)result)
  {
    sub_20C293FC0(a2, a3);
    v16 = a2;
    v17 = v6;
    v18 = v7;
    v13 = a1;
    v14 = v8;
    v15 = v9;
    result = sub_20C293EF0((uint64_t)&v19, (uint64_t *)&v16, (uint64_t *)&v13);
    if ((_DWORD)result)
    {
      v10 = a1;
      v12 = a2;
      return sub_20C293FC0(v10, v12);
    }
  }
  return result;
}

BOOL sub_20C293AA4(__int128 *a1, __int128 *a2)
{
  __int128 *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 *v7;
  int v8;
  __int128 v9;
  _QWORD **v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  int *v19;
  _QWORD **v20;
  void **v21;
  __int128 *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD **v30;
  __int128 v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 *v36;
  int v37;
  __int128 v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  _QWORD **v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45[3];
  __int128 *v46;
  char **v47;
  char *v48;
  char v49[9];

  v2 = a2;
  v4 = 0x2E8BA2E8BA2E8BA3 * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      *(_QWORD *)&v38 = (char *)a2 - 88;
      *((_QWORD *)&v38 + 1) = (char *)a2 - 72;
      v39 = (char *)a2 - 56;
      v46 = a1;
      v47 = (char **)(a1 + 1);
      v48 = (char *)(a1 + 2);
      if (sub_20C293EF0((uint64_t)v45, (uint64_t *)&v38, (uint64_t *)&v46))
        sub_20C293FC0(a1, (__int128 *)((char *)v2 - 88));
      return 1;
    case 3:
      sub_20C293954(a1, (__int128 *)((char *)a1 + 88), (__int128 *)((char *)a2 - 88));
      return 1;
    case 4:
      sub_20C294240(a1, (__int128 *)((char *)a1 + 88), a1 + 11, (__int128 *)((char *)a2 - 88));
      return 1;
    case 5:
      sub_20C29381C(a1, (__int128 *)((char *)a1 + 88), a1 + 11, (__int128 *)((char *)a1 + 264), (__int128 *)((char *)a2 - 88));
      return 1;
    default:
      v6 = (uint64_t)(a1 + 11);
      sub_20C293954(a1, (__int128 *)((char *)a1 + 88), a1 + 11);
      v7 = (__int128 *)((char *)a1 + 264);
      if ((__int128 *)((char *)a1 + 264) == v2)
        return 1;
      v8 = 0;
      v36 = v2;
      break;
  }
  while (1)
  {
    *(_QWORD *)&v38 = v7;
    *((_QWORD *)&v38 + 1) = v7 + 1;
    v39 = (char *)(v7 + 2);
    v46 = (__int128 *)v6;
    v47 = (char **)(v6 + 16);
    v48 = (char *)(v6 + 32);
    if (sub_20C293EF0((uint64_t)v45, (uint64_t *)&v38, (uint64_t *)&v46))
    {
      v38 = *v7;
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      LODWORD(v39) = *((_DWORD *)v7 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v7 + 4);
      v37 = v8;
      HIDWORD(v39) = *((_DWORD *)v7 + 5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v7 + 5);
      v9 = *(__int128 *)((char *)v7 + 40);
      v40 = *(__int128 *)((char *)v7 + 24);
      v41 = v9;
      v10 = (_QWORD **)*((_QWORD *)v7 + 7);
      v11 = v7[4];
      *((_QWORD *)v7 + 7) = 0;
      *((_QWORD *)v7 + 8) = 0;
      v42 = v10;
      v43 = v11;
      v44 = *((_QWORD *)v7 + 10);
      v12 = v7;
      *((_QWORD *)v7 + 9) = 0;
      *((_QWORD *)v7 + 10) = 0;
      while (1)
      {
        v13 = v6;
        v14 = (unsigned int *)*((_QWORD *)v12 + 1);
        *v12 = *(_OWORD *)v6;
        *(_QWORD *)(v6 + 8) = 0;
        if (v14)
        {
          v15 = v14 + 2;
          do
          {
            v16 = __ldxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
        *(_QWORD *)v6 = 0;
        v18 = (int *)(v6 + 16);
        sub_20BFD3EBC((int *)v12 + 4, (int *)(v6 + 16));
        v19 = (int *)(v6 + 20);
        sub_20BFD3F10((int *)v12 + 5, (int *)(v6 + 20));
        *(__int128 *)((char *)v12 + 24) = *(_OWORD *)(v6 + 24);
        *(__int128 *)((char *)v12 + 40) = *(_OWORD *)(v6 + 40);
        v20 = *(_QWORD ***)(v6 + 56);
        *(_QWORD *)(v6 + 56) = 0;
        sub_20BF49F14((_QWORD ***)v12 + 7, v20);
        v21 = (void **)(v12 + 4);
        if (*((char *)v12 + 87) < 0)
          operator delete(*v21);
        *(_OWORD *)v21 = *(_OWORD *)(v13 + 64);
        *((_QWORD *)v12 + 10) = *(_QWORD *)(v13 + 80);
        *(_BYTE *)(v13 + 87) = 0;
        *(_BYTE *)(v13 + 64) = 0;
        if ((__int128 *)v13 == a1)
          break;
        v6 = v13 - 88;
        v46 = &v38;
        v47 = &v39;
        v48 = (char *)&v40 + 8;
        v45[0] = v13 - 88;
        v45[1] = v13 - 72;
        v45[2] = v13 - 56;
        v12 = (__int128 *)v13;
        if (!sub_20C293EF0((uint64_t)v49, (uint64_t *)&v46, v45))
        {
          v22 = (__int128 *)v13;
          goto LABEL_19;
        }
      }
      v22 = a1;
LABEL_19:
      v23 = (unsigned int *)*((_QWORD *)v22 + 1);
      *v22 = v38;
      *((_QWORD *)&v38 + 1) = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
      }
      v27 = (_OWORD *)(v13 + 24);
      v28 = v13 + 64;
      *(_QWORD *)&v38 = 0;
      sub_20BFD3EBC(v18, (int *)&v39);
      sub_20BFD3F10(v19, (int *)&v39 + 1);
      v29 = v41;
      *v27 = v40;
      v27[1] = v29;
      v30 = v42;
      v42 = 0;
      sub_20BF49F14((_QWORD ***)v22 + 7, v30);
      if (*((char *)v22 + 87) < 0)
        operator delete(*(void **)v28);
      v31 = v43;
      *(_QWORD *)(v28 + 16) = v44;
      *(_OWORD *)v28 = v31;
      HIBYTE(v44) = 0;
      LOBYTE(v43) = 0;
      sub_20BF49F14(&v42, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
      v2 = v36;
      sub_20BFD265C(&v39);
      v32 = *((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v33 = (unsigned int *)(*((_QWORD *)&v38 + 1) + 8);
        do
        {
          v34 = __ldxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      }
      v8 = v37 + 1;
      if (v37 == 7)
        return (__int128 *)((char *)v7 + 88) == v36;
    }
    v6 = (uint64_t)v7;
    v7 = (__int128 *)((char *)v7 + 88);
    if (v7 == v2)
      return 1;
  }
}

void sub_20C293EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C291818((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C293EF0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  char v6;

  if (sub_20BFF2B40(*a2, *a3))
    return 1;
  if (sub_20BFF2B40(*a3, *a2))
    return 0;
  return sub_20C293F58((uint64_t)&v6, (uint64_t)a2, (uint64_t)a3);
}

BOOL sub_20C293F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_20BFD758C(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 8)) & 1) != 0)return 1;
  if ((sub_20BFD758C(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8)) & 1) != 0)return 0;
  return **(_QWORD **)(a2 + 16) < **(_QWORD **)(a3 + 16);
}

uint64_t sub_20C293FC0(__int128 *a1, __int128 *a2)
{
  int *v4;
  _QWORD **v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11;
  __int128 v12;
  _QWORD **v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void **v19;
  __int128 v20;
  _QWORD **v21;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;
  _QWORD **v28;
  __int128 v29;
  uint64_t v30;

  v23 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v4 = (int *)(a1 + 1);
  v24 = *((_DWORD *)a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a1 + 4);
  v25 = *((_DWORD *)a1 + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a1 + 5);
  v26 = *(__int128 *)((char *)a1 + 24);
  v27 = *(__int128 *)((char *)a1 + 40);
  v5 = (_QWORD **)*((_QWORD *)a1 + 7);
  v6 = a1[4];
  *((_QWORD *)a1 + 7) = 0;
  v28 = v5;
  v29 = v6;
  v30 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 8) = 0;
  *((_QWORD *)a1 + 9) = 0;
  *((_QWORD *)a1 + 10) = 0;
  v7 = (unsigned int *)*((_QWORD *)a1 + 1);
  *a1 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  v11 = (void **)(a1 + 4);
  *(_QWORD *)a2 = 0;
  sub_20BFD3EBC(v4, (int *)a2 + 4);
  sub_20BFD3F10((int *)a1 + 5, (int *)a2 + 5);
  v12 = *(__int128 *)((char *)a2 + 40);
  *(__int128 *)((char *)a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(__int128 *)((char *)a1 + 40) = v12;
  v13 = (_QWORD **)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  sub_20BF49F14((_QWORD ***)a1 + 7, v13);
  if (*((char *)a1 + 87) < 0)
    operator delete(*v11);
  v14 = a2[4];
  *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
  *(_OWORD *)v11 = v14;
  *((_BYTE *)a2 + 87) = 0;
  *((_BYTE *)a2 + 64) = 0;
  v15 = (unsigned int *)*((_QWORD *)a2 + 1);
  *a2 = v23;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  }
  v19 = (void **)(a2 + 4);
  sub_20BFD3EBC((int *)a2 + 4, &v24);
  sub_20BFD3F10((int *)a2 + 5, &v25);
  v20 = v27;
  *(__int128 *)((char *)a2 + 24) = v26;
  *(__int128 *)((char *)a2 + 40) = v20;
  v21 = v28;
  v28 = 0;
  sub_20BF49F14((_QWORD ***)a2 + 7, v21);
  if (*((char *)a2 + 87) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v29;
  *((_QWORD *)a2 + 10) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(v29) = 0;
  sub_20BF49F14(&v28, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  return 0;
}

uint64_t sub_20C294240(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t result;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  char v15;

  sub_20C293954(a1, a2, a3);
  v12 = a4;
  v13 = a4 + 1;
  v14 = a4 + 2;
  v9 = a3;
  v10 = a3 + 1;
  v11 = a3 + 2;
  result = sub_20C293EF0((uint64_t)&v15, (uint64_t *)&v12, (uint64_t *)&v9);
  if ((_DWORD)result)
  {
    sub_20C293FC0(a3, a4);
    v12 = a3;
    v13 = a3 + 1;
    v14 = a3 + 2;
    v9 = a2;
    v10 = a2 + 1;
    v11 = a2 + 2;
    result = sub_20C293EF0((uint64_t)&v15, (uint64_t *)&v12, (uint64_t *)&v9);
    if ((_DWORD)result)
    {
      sub_20C293FC0(a2, a3);
      v12 = a2;
      v13 = a2 + 1;
      v14 = a2 + 2;
      v9 = a1;
      v10 = a1 + 1;
      v11 = a1 + 2;
      result = sub_20C293EF0((uint64_t)&v15, (uint64_t *)&v12, (uint64_t *)&v9);
      if ((_DWORD)result)
        return sub_20C293FC0(a1, a2);
    }
  }
  return result;
}

uint64_t sub_20C294334(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2943EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20C2943A8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1)
    sub_20BDDF5B4();
  return operator new(272 * a2);
}

uint64_t sub_20C2943EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 272;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 272;
    sub_20C29447C(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_20C29447C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 - 16);
      if (*(_QWORD *)(a1 + 24))
        v6 = *(unint64_t **)(a1 + 24);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  sub_20C294624((char *)(a1 + 48), a2 + 48);
  sub_20C0210BC(a1 + 104, (__int128 *)(a2 + 104));
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    v8 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v8;
    v9 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 168) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 - 16);
      if (*(_QWORD *)(a1 + 160))
        v10 = *(unint64_t **)(a1 + 160);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    v12 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v12;
    v13 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 - 16);
      if (*(_QWORD *)(a1 + 208))
        v14 = *(unint64_t **)(a1 + 208);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  v16 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v16;
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 256), (_DWORD *)(a2 + 256));
  sub_20BFD6EA4((_DWORD *)(a1 + 260), (_DWORD *)(a2 + 260));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  return a1;
}

void sub_20C294600(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20C287E38(v2);
  sub_20C287E80(v1);
  _Unwind_Resume(a1);
}

char *sub_20C294624(char *__dst, uint64_t a2)
{
  *__dst = 0;
  __dst[48] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    sub_20C294678(__dst, (__int128 *)a2);
    __dst[48] = 1;
  }
  return __dst;
}

void sub_20C294664(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C287E38(v1);
  _Unwind_Resume(a1);
}

char *sub_20C294678(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20C2946F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C29470C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 272;
    sub_20C287D74(i - 272);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C294758(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x78787878787878)
    v9 = 0xF0F0F0F0F0F0F0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20C2943A8(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[272 * v4];
  v16 = &v10[272 * v9];
  sub_20C29485C((uint64_t)v14, a2);
  v15 = v14 + 272;
  sub_20C294334(a1, &v13);
  v11 = a1[1];
  sub_20C29470C((uint64_t)&v13);
  return v11;
}

void sub_20C294848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C29470C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29485C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    v5 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    v6 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v7 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v7;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    v8 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v8;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    v9 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v9;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_OWORD *)(a2 + 184) = 0u;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a2 + 216) = 0;
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 256), (_DWORD *)(a2 + 256));
  sub_20BFD38DC((_DWORD *)(a1 + 260), (_DWORD *)(a2 + 260));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  return a1;
}

std::string *sub_20C2949E8(std::string *__dst, const std::string *a2)
{
  __int128 v3;

  if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

std::string *sub_20C294A50(std::string *__dst, std::string *__str)
{
  if (__dst[2].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, __str);
    std::string::operator=(__dst + 1, __str + 1);
  }
  else
  {
    sub_20C294678((char *)__dst, (__int128 *)__str);
    __dst[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

uint64_t sub_20C294AAC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 40))
  {
    sub_20C28130C(a1, (__int128 *)a2);
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*(_QWORD *)(a1 + 24))
        v5 = *(unint64_t **)(a1 + 24);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t sub_20C294B1C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 40))
  {
    sub_20C28422C(a1, (__int128 *)a2);
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*(_QWORD *)(a1 + 24))
        v5 = *(unint64_t **)(a1 + 24);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

_DWORD *sub_20C294B8C(_DWORD *a1)
{
  return sub_20BFD265C(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateData *pxrInternal__aapl__pxrReserved__::Usd_CrateData::Usd_CrateData(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2)
{
  void *v4;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_24C52E6D0;
  v4 = operator new(0x60uLL);
  sub_20C297C04((uint64_t)v4, a2);
  *((_QWORD *)this + 3) = v4;
  return this;
}

void sub_20C294BF0(_Unwind_Exception *a1)
{
  unsigned int **v1;
  void *v2;
  const void *v4;

  operator delete(v2);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(v1, v4);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateData::~Usd_CrateData(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this)
{
  const void *v2;

  *(_QWORD *)this = off_24C52E6D0;
  sub_20C29FB88((uint64_t *)this + 3, 0);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData((unsigned int **)this, v2);
}

{
  const void *v2;

  *(_QWORD *)this = off_24C52E6D0;
  sub_20C29FB88((uint64_t *)this + 3, 0);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData((unsigned int **)this, v2);
}

{
  const void *v2;
  void *v3;

  *(_QWORD *)this = off_24C52E6D0;
  sub_20C29FB88((uint64_t *)this + 3, 0);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData((unsigned int **)this, v2);
  operator delete(v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Save(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17[3];
  const char *v18;
  char v19;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    if (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanPackTo(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 88), a2))return sub_20C294E4C(*(_QWORD *)(a1 + 24), a2, v5);
    pxrInternal__aapl__pxrReserved__::Usd_CrateData::Usd_CrateData((pxrInternal__aapl__pxrReserved__::Usd_CrateData *)v17, 0);
    sub_20C2A0040(&v15, a1);
    pxrInternal__aapl__pxrReserved__::SdfAbstractData::CopyFrom((uint64_t)v17, &v15);
    v8 = v16;
    if (v16)
    {
      v9 = (unsigned int *)(v16 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    v7 = pxrInternal__aapl__pxrReserved__::Usd_CrateData::Save(v17, a2);
    v13 = (uint64_t)v18;
    v17[0] = (unsigned int *)off_24C52E6D0;
    v18 = 0;
    if (v13)
    {
      v14 = (void *)sub_20C29FBB4(v13);
      operator delete(v14);
    }
    pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(v17, v12);
  }
  else
  {
    v17[0] = (unsigned int *)"usd/crateData.cpp";
    v17[1] = (unsigned int *)"Save";
    v17[2] = (unsigned int *)1168;
    v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::Save(const string &)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Tried to save to empty fileName");
    return 0;
  }
  return v7;
}

void sub_20C294E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::Usd_CrateData::~Usd_CrateData((pxrInternal__aapl__pxrReserved__::Usd_CrateData *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C294E4C(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char *v28;
  const char *v29;
  unint64_t v30;
  const char *v31;
  char v32;
  void *__p[2];
  char v34;
  _BYTE v35[96];
  _QWORD *v36;
  int v37;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateDataImpl::Save", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v36 = v6;
  v37 = v7;
  if (*(char *)(a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Saving usd binary file @%s@", (const char *)a2, a3, v8);
  v28 = "usd/crateData.cpp";
  v29 = "Save";
  v30 = 138;
  v31 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::Save(const string &)";
  v32 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v35, __p, &v28);
  if (v34 < 0)
    operator delete(__p[0]);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  sub_20C0B8D74((uint64_t *)&v28, *(_QWORD *)(a1 + 48));
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = 0;
  if (v11)
  {
    v13 = (__int16 *)(v10 + 4);
    while (1)
    {
      v14 = *v13;
      v13 += 16;
      if (v14 != -1)
        break;
      if (v11 == ++v12)
        goto LABEL_15;
    }
  }
  if (v12 == v11)
  {
LABEL_15:
    v15 = (char *)v29;
  }
  else
  {
    v16 = v10 + 32 * v11;
    v15 = (char *)v29;
    v17 = v10 + 32 * v12;
    do
    {
      v18 = (_DWORD *)(v17 + 8);
      if ((unint64_t)v15 >= v30)
      {
        v15 = (char *)sub_20BFD7890((uint64_t *)&v28, v18);
      }
      else
      {
        sub_20BFD6E54(v15, v18);
        sub_20BFD6EA4((_DWORD *)v15 + 1, (_DWORD *)(v17 + 12));
        v15 += 8;
      }
      v29 = v15;
      v19 = v17 + 32;
      do
      {
        v17 = v19;
        if (*(_BYTE *)(v19 - 26))
          break;
        v19 += 32;
      }
      while (*(__int16 *)(v17 + 4) == -1);
    }
    while (v17 != v16);
  }
  sub_20C298038((unint64_t)v28, (int *)v15, (uint64_t)__p, v9);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::StartPacking(*(uint64_t **)(a1 + 88), a2, (uint64_t **)__p);
  if (!pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::operator BOOL((uint64_t)__p))
    goto LABEL_29;
  v20 = v28;
  v21 = (char *)v29;
  if (v28 != v29)
  {
    do
    {
      v22 = sub_20C29AEC0((_QWORD *)a1, v20, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v20 + 1)+ ((*((unsigned int *)v20 + 1)+ (unint64_t)*(unsigned int *)v20+ (*((unsigned int *)v20 + 1) + (unint64_t)*(unsigned int *)v20)* (*((unsigned int *)v20 + 1) + (unint64_t)*(unsigned int *)v20)) >> 1))));
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddSpec((uint64_t)__p[0], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v20, *(_DWORD *)(v22 + 24), *(uint64_t ***)(v22 + 16));
      v20 += 8;
    }
    while (v20 != v21);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::Close((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)__p))
  {
    v23 = sub_20C29808C((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::~Packer((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer *)__p);
  }
  else
  {
LABEL_29:
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::~Packer((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer *)__p);
    v23 = 0;
  }
  __p[0] = &v28;
  sub_20BFD6F90((void ***)__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v35);
  v24 = v37--;
  if (v24)
  {
    v25 = (uint64_t)v36;
    v26 = v24 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v25);
      v37 = v26--;
    }
    while (v26 != -2);
  }
  return v23;
}

void sub_20C2950F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  __p = &a11;
  sub_20BFD6F90((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a22);
  sub_20BEB24F4(v22 - 64);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Open(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  return sub_20C29518C(*(_QWORD *)(a1 + 24), a2, &v4);
}

uint64_t sub_20C29518C(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v6;
  _QWORD *v7;
  _BOOL4 v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v13;
  void *v14;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v16[4];
  char v17;
  void *__p;
  char v19;
  _BYTE v20[96];
  _QWORD *v21;
  int v22;

  v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v6 & 1) != 0)
  {
    v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateDataImpl::Open", 0, a3);
    v8 = v7 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = v7;
  v22 = v8;
  if (*(char *)(a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Opening usd binary asset @%s@", (const char *)a2, a3, v9);
  v16[0] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"usd/crateData.cpp";
  v16[1] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"Open";
  v16[2] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)186;
  v16[3] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"BOOL pxrInternal__aapl__pxrReserved__::Usd_Crat"
                                                                         "eDataImpl::Open(const string &, Args &&...) [Args = <BOOL &>]";
  v17 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v20, &__p, v16);
  if (v19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(a2, (char *)*a3, v10, v16);
  v11 = v16[0];
  if (v16[0])
  {
    v16[0] = 0;
    sub_20C29FC14((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 88), v11);
    v12 = sub_20C29808C((uint64_t *)a1);
    v13 = v16[0];
    v16[0] = 0;
    if (v13)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(v13);
      operator delete(v14);
    }
  }
  else
  {
    v12 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v20);
  v22 = v8 - 1;
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v7);
    v22 = -1;
  }
  return v12;
}

void sub_20C2952EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  void *v24;

  if (a11)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(a11);
    operator delete(v24);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a22);
  sub_20BEB24F4(v22 - 64);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Open(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 a4)
{
  unsigned __int8 v5;

  v5 = a4;
  return sub_20C29536C(*(_QWORD *)(a1 + 24), a2, a3, &v5);
}

uint64_t sub_20C29536C(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 *a4)
{
  unsigned __int8 v8;
  _QWORD *v9;
  _BOOL4 v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v14;
  void *v15;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v17[4];
  char v18;
  void *__p;
  char v20;
  _BYTE v21[96];
  _QWORD *v22;
  int v23;

  v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v8 & 1) != 0)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateDataImpl::Open", 0, a3);
    v10 = v9 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v22 = v9;
  v23 = v10;
  if (*(char *)(a2 + 23) >= 0)
    v11 = a2;
  else
    v11 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Opening usd binary asset @%s@", (const char *)a2, a3, v11);
  v17[0] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"usd/crateData.cpp";
  v17[1] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"Open";
  v17[2] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)186;
  v17[3] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"BOOL pxrInternal__aapl__pxrReserved__::Usd_Crat"
                                                                         "eDataImpl::Open(const string &, Args &&...) [Ar"
                                                                         "gs = <const std::shared_ptr<pxrInternal__aapl__"
                                                                         "pxrReserved__::ArAsset> &, BOOL &>]";
  v18 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v21, &__p, v17);
  if (v20 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(a2, (__int128 *)a3, (char *)*a4, v17);
  v12 = v17[0];
  if (v17[0])
  {
    v17[0] = 0;
    sub_20C29FC14((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 88), v12);
    v13 = sub_20C29808C((uint64_t *)a1);
    v14 = v17[0];
    v17[0] = 0;
    if (v14)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(v14);
      operator delete(v15);
    }
  }
  else
  {
    v13 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v21);
  v23 = v10 - 1;
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v9);
    v23 = -1;
  }
  return v13;
}

void sub_20C2954DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  void *v24;

  if (a11)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(a11);
    operator delete(v24);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a22);
  sub_20BEB24F4(v22 - 80);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::StreamsData(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 88);
  return v1 && *(_BYTE *)(v1 + 6504) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::HasSpec(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2))
    return sub_20C29CBF0(v3, a2);
  else
    return v3[4] + 32 * v3[5] != sub_20C29AEC0(v3, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::EraseSpec(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v3;
  uint64_t result;
  const char *Text;
  const char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*((_QWORD *)this + 3);
  result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2);
  if ((result & 1) == 0)
  {
    v3[10] = v3[4] + 32 * v3[5];
    result = sub_20C29CF54((uint64_t)v3, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
    if (!result)
    {
      LOBYTE(v10) = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s", v6, v7, Text, "usd/crateData.cpp", "EraseSpec", 271, "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::EraseSpec(const SdfPath &)", v10);
      return pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "_data.erase(path)", v8);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::MoveSpec(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return sub_20C2956B8(this[3], a2, a3);
}

uint64_t sub_20C2956B8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  void **v14;
  int v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;

  result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(this);
  if ((result & 1) == 0)
  {
    v7 = sub_20C29AEC0(a1, this, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)this + 1)+ ((*((unsigned int *)this + 1)+ (unint64_t)*(unsigned int *)this+ (*((unsigned int *)this + 1) + (unint64_t)*(unsigned int *)this)* (*((unsigned int *)this + 1) + (unint64_t)*(unsigned int *)this)) >> 1))));
    v8 = a1[4];
    v9 = a1[5];
    if (v8 + 32 * v9 == v7)
    {
      v16 = "usd/crateData.cpp";
      v17 = "MoveSpec";
      v18 = 281;
      v19 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::MoveSpec(const SdfPath &, const SdfPath &)";
      v20 = 0;
      result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "oldIter != _data.end()", 0);
      if (!(_DWORD)result)
        return result;
      v8 = a1[4];
      v9 = a1[5];
    }
    a1[10] = v8 + 32 * v9;
    v10 = *(void ***)(v7 + 16);
    v14 = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 3);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v15 = *(_DWORD *)(v7 + 24);
    sub_20C29D0B4((uint64_t)a1, v7);
    sub_20C29D114(a1, a3, (uint64_t)&v14);
    if ((v13 & 1) == 0)
    {
      v16 = "usd/crateData.cpp";
      v17 = "MoveSpec";
      v18 = 288;
      v19 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::MoveSpec(const SdfPath &, const SdfPath &)";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "iresult.second", 0);
    }
    return (uint64_t)sub_20C297FD8(&v14);
  }
  return result;
}

void sub_20C295820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C297FD8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetSpecType(pxrInternal__aapl__pxrReserved__::SdfPath **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return sub_20C295840(this[3], a2);
}

uint64_t sub_20C295840(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v8;
  int v9;

  v3 = (uint64_t)a1;
  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1))
    return 7;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2))
  {
    v6 = sub_20C29AEC0((_QWORD *)v3, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
    if (*(_QWORD *)(v3 + 32) + 32 * *(_QWORD *)(v3 + 40) != v6)
      return *(unsigned int *)(v6 + 24);
    return 0;
  }
  if (!sub_20C29CBF0((_QWORD *)v3, a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v8);
  v4 = sub_20C295840(v3, &v8);
  if (v4 == 1)
  {
    v5 = 0;
    v3 = 2;
  }
  else if (v4 == 8)
  {
    v5 = 0;
    v3 = 9;
  }
  else
  {
    v5 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v5)
    return 0;
  return v3;
}

void sub_20C295954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, int a3)
{
  uint64_t *v5;
  uint64_t result;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  void **v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  v5 = *(uint64_t **)(a1 + 24);
  if (a3
    || (v11 = (void **)"usd/crateData.cpp",
        v12 = "CreateSpec",
        v13 = 316,
        v14 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::CreateSpec(const SdfPath &, SdfSpecType)",
        v15 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "specType != SdfSpecTypeUnknown", 0), (result & 1) != 0))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(this);
    if ((result & 1) == 0)
    {
      v12 = 0;
      v7 = (char *)operator new(0x20uLL);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      v11 = (void **)v7;
      *((_DWORD *)v7 + 6) = 0;
      v8 = (unsigned int *)(v7 + 24);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v10 = sub_20C29D114(v5, this, (uint64_t)&v11);
      result = (uint64_t)sub_20C297FD8(&v11);
      *(_DWORD *)(v10 + 24) = a3;
      v5[10] = v10;
    }
  }
  return result;
}

void sub_20C295A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C297FD8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::_VisitSpecs(uint64_t this, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];

  v3 = this;
  v12[0] = *(_QWORD *)(this + 24);
  v12[1] = this;
  v12[2] = a2;
  v5 = *(_QWORD *)(v12[0] + 32);
  v4 = *(_QWORD *)(v12[0] + 40);
  v6 = 0;
  if (v4)
  {
    v7 = (__int16 *)(v5 + 4);
    while (1)
    {
      v8 = *v7;
      v7 += 16;
      if (v8 != -1)
        break;
      if (v4 == ++v6)
        return this;
    }
  }
  if (v6 != v4)
  {
    v9 = v5 + 32 * v4;
    v10 = v5 + 32 * v6;
    do
    {
      this = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3, v10 + 8);
      if (!(_DWORD)this)
        break;
      this = sub_20C29D1D0((uint64_t)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 8), *(_DWORD *)(v10 + 24));
      if (!(_DWORD)this)
        break;
      v11 = v10 + 32;
      do
      {
        v10 = v11;
        if (*(_BYTE *)(v11 - 26))
          break;
        v11 += 32;
      }
      while (*(__int16 *)(v10 + 4) == -1);
    }
    while (v10 != v9);
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::Has(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _QWORD *a3, uint64_t a4)
{
  return sub_20C295B3C(*(_QWORD **)(a1 + 24), a2, a3, a4, 0);
}

BOOL sub_20C295B3C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _QWORD *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  _QWORD v25[2];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v10)
  {
    if (a5)
      *a5 = 0;
  }
  else
  {
    if (a5)
      *a5 = *(_DWORD *)(v10 + 24);
    v11 = *(uint64_t **)(v10 + 16);
    v12 = *v11;
    v13 = v11[1] - *v11;
    if (v13)
    {
      v14 = v13 / 24;
      v15 = (uint64_t *)(v12 + 8);
      while ((*(v15 - 1) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v15 += 3;
        if (!--v14)
          goto LABEL_11;
      }
      if (a4)
      {
        if (sub_20C29DA78((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
        {
          v20 = a1[11];
          v21 = v15[1];
          if ((v21 & 4) != 0)
            v15 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
          v22 = *v15;
          v26[1] = 0;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v20, v22, (uint64_t)v26);
        }
        else
        {
          sub_20BF4C6D0(v26, v15);
        }
        v23 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
        if (!v23)
          v23 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8))
        {
          sub_20C29D57C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        }
        else
        {
          v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v24)
            v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v24 + 30) & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_35;
          sub_20C29D7A8((pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        }
        sub_20BF4B5D8(v26, v25);
        sub_20BF4C2D8((uint64_t)v25);
LABEL_35:
        v18 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 8))(a4, v26);
        sub_20BF4C2D8((uint64_t)v26);
        return v18;
      }
      return 1;
    }
  }
LABEL_11:
  v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v16)
    v16 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v17)
      v17 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v17 + 6) & 0xFFFFFFFFFFFFFFF8))
      return 0;
  }
  return sub_20C29D90C(a1, a2, (uint64_t)a3, a4);
}

void sub_20C295E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::Has(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return sub_20C295E60(*((_QWORD **)this + 3), a2, a3, a4, 0);
}

BOOL sub_20C295E60(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v10 = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v10)
  {
    if (a5)
      *a5 = 0;
  }
  else
  {
    if (a5)
      *a5 = *(_DWORD *)(v10 + 24);
    v11 = *(uint64_t **)(v10 + 16);
    v12 = *v11;
    v13 = v11[1] - *v11;
    if (v13)
    {
      v14 = v13 / 24;
      v15 = (uint64_t *)(v12 + 8);
      while ((*(v15 - 1) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v15 += 3;
        if (!--v14)
          goto LABEL_11;
      }
      if (!a4)
        return 1;
      if (sub_20C29DA78((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v19 = a1[11];
        v20 = v15[1];
        if ((v20 & 4) != 0)
          v15 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
        v21 = *v15;
        v24[1] = 0;
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v19, v21, (uint64_t)v24);
      }
      else
      {
        sub_20BF4C6D0(v24, v15);
      }
      sub_20BF4B5D8(a4, v24);
      sub_20BF4C2D8((uint64_t)v24);
      v22 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      if (!v22)
        v22 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C29D57C((uint64_t)a1, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)v24);
      }
      else
      {
        v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v23)
          v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v23 + 30) & 0xFFFFFFFFFFFFFFF8))
          return 1;
        sub_20C29D7A8(a4, (pxrInternal__aapl__pxrReserved__::VtValue *)v24);
      }
      sub_20BF4B5D8(a4, v24);
      sub_20BF4C2D8((uint64_t)v24);
      return 1;
    }
  }
LABEL_11:
  v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v16)
    v16 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8))
    return sub_20C29DD90((int)a1, a2, (uint64_t)a3, a4);
  v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v17)
    v17 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  return (*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 6) & 0xFFFFFFFFFFFFFFF8)
      && sub_20C29DD90((int)a1, a2, (uint64_t)a3, a4);
}

void sub_20C29613C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::HasSpecAndField(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _QWORD *a3, uint64_t a4, _DWORD *a5)
{
  return sub_20C295B3C(*(_QWORD **)(a1 + 24), a2, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::HasSpecAndField(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, _DWORD *a5)
{
  return sub_20C295E60(*(_QWORD **)(a1 + 24), a2, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::Get@<W0>(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)a4 + 1) = 0;
  return sub_20C295E60(v4, a2, a3, a4, 0);
}

void sub_20C296198(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetTypeid(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return sub_20C2961B4(*((_QWORD **)this + 3), (unsigned int *)a2, a3);
}

void *sub_20C2961B4(_QWORD *a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *i;
  uint64_t v13;
  uint64_t v14;

  v5 = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v5)
    return (void *)MEMORY[0x24BEDB7C8];
  v6 = *(uint64_t **)(v5 + 16);
  v7 = *v6;
  v8 = v6[1] - *v6;
  if (!v8)
    return (void *)MEMORY[0x24BEDB7C8];
  v9 = v8 / 24;
  v10 = *a3 & 0xFFFFFFFFFFFFFFF8;
  for (i = (pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 8);
        (*((_QWORD *)i - 1) & 0xFFFFFFFFFFFFFFF8) != v10;
        i = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)i + 24))
  {
    if (!--v9)
      return (void *)MEMORY[0x24BEDB7C8];
  }
  if (!sub_20C29DA78(i))
    return (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(i);
  v13 = a1[11];
  v14 = *((_QWORD *)i + 1);
  if ((v14 & 4) != 0)
    i = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(i);
  return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetTypeid(v13, *(_QWORD *)i);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::List@<X0>(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20C2962C4(*((_QWORD **)this + 3), a2, a3);
}

uint64_t sub_20C2962C4@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  char *v20;
  int v21;
  _BYTE v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  if (a1[4] + 32 * a1[5] != result)
  {
    v7 = *(_QWORD **)(result + 16);
    sub_20C0E5D00(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3));
    v8 = v7[1] - *v7;
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = v8 / 24;
      do
      {
        sub_20BF32220((_QWORD *)(*(_QWORD *)a3 + v9), (_QWORD *)(*v7 + v10));
        v10 += 24;
        v9 += 8;
        --v11;
      }
      while (v11);
    }
    result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a2);
    if ((_DWORD)result)
    {
      v21 = 0;
      sub_20C29CE1C((pxrInternal__aapl__pxrReserved__::VtValue *)v22, a2, a1, &v21);
      if (v21 == 1)
      {
        v13 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v13)
          v13 = (uint64_t *)sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        v14 = *(uint64_t **)(a3 + 8);
        if ((unint64_t)v14 < *(_QWORD *)(a3 + 16))
        {
          v18 = *v13;
          *v14 = *v13;
          if ((v18 & 7) != 0)
          {
            v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v19);
            while (__stxr(v17 + 2, v19));
            goto LABEL_21;
          }
LABEL_23:
          v20 = (char *)(v14 + 1);
LABEL_25:
          *(_QWORD *)(a3 + 8) = v20;
          return sub_20BF4C2D8((uint64_t)v22);
        }
      }
      else
      {
        if (v21 != 8)
          return sub_20BF4C2D8((uint64_t)v22);
        v12 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v12)
          v12 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        v13 = (uint64_t *)((char *)v12 + 48);
        v14 = *(uint64_t **)(a3 + 8);
        if ((unint64_t)v14 < *(_QWORD *)(a3 + 16))
        {
          v15 = *v13;
          *v14 = *v13;
          if ((v15 & 7) != 0)
          {
            v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 2, v16));
LABEL_21:
            if ((v17 & 1) == 0)
              *v14 &= 0xFFFFFFFFFFFFFFF8;
            goto LABEL_23;
          }
          goto LABEL_23;
        }
      }
      v20 = sub_20BFCA068((char **)a3, v13);
      goto LABEL_25;
    }
  }
  return result;
}

void sub_20C296508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateData::Set(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  sub_20C296540(*((_QWORD **)this + 3), a2, (uint64_t *)a3, a4);
}

void sub_20C296540(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  const char *Text;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v18;
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  uint64_t v21;
  uint64_t ***v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  char *v32;
  unint64_t v33;
  const char *v34;
  char *v35;
  void *__p[2];
  char v37;
  char *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a4 + 1))
  {
    sub_20C296BD4(a1, (unsigned int *)this, a3);
    return;
  }
  v7 = a4;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(this))
  {
    v38 = "usd/crateData.cpp";
    v39 = "Set";
    v40 = 533;
    v41 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::Set(const SdfPath &, const TfToken &, const VtValue &)";
    v42 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    v9 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0)
        v10 = *(const char **)v10;
    }
    else
    {
      v10 = "";
    }
    sub_20BF834B0((uint64_t)v7);
    if (v37 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v38, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set fields on relationship target or attribute connection specs: <%s>:%s = %s", Text, v10, (const char *)v15);
    if (v37 < 0)
      operator delete(__p[0]);
    return;
  }
  v11 = a1[10];
  if (v11 == a1[4] + 32 * a1[5])
  {
    LODWORD(v13) = *(_DWORD *)this;
    LODWORD(v14) = *((_DWORD *)this + 1);
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_QWORD *)this;
    if (v12 == *(_QWORD *)this)
      goto LABEL_18;
    v14 = HIDWORD(v13);
  }
  v16 = sub_20C29AEC0(a1, this, bswap64(0x9E3779B97F4A7C55* (((v14+ (unint64_t)v13+ (v14 + (unint64_t)v13)* (v14 + (unint64_t)v13)) >> 1)+ v14)));
  if (a1[4] + 32 * a1[5] == v16)
  {
    v38 = "usd/crateData.cpp";
    v39 = "Set";
    v40 = 541;
    v41 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::Set(const SdfPath &, const TfToken &, const VtValue &)";
    v42 = 0;
    v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    v33 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if (v33)
    {
      v34 = (const char *)(v33 + 16);
      if (*(char *)(v33 + 39) < 0)
        v34 = *(const char **)v34;
    }
    else
    {
      v34 = "";
    }
    v35 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Tried to set field '%s' on nonexistent spec at <%s>", v31, v32, v30, v34);
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v38, "i != _data.end()", v35))
      return;
  }
  a1[10] = v16;
LABEL_18:
  v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v17)
    v17 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8))
    return;
  v18 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v18)
    v18 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v18 + 6) & 0xFFFFFFFFFFFFFFF8))
    return;
  v39 = 0;
  v19 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v19)
    v19 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8))
  {
    sub_20C29DEFC(v7, (pxrInternal__aapl__pxrReserved__::VtValue *)__p);
  }
  else
  {
    v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20)
      v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v20 + 30) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_33;
    sub_20C29E150(v7, __p);
  }
  v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v38;
  sub_20BF4B5D8(&v38, __p);
  sub_20BF4C2D8((uint64_t)__p);
LABEL_33:
  v21 = a1[10];
  v23 = *(_QWORD *)(v21 + 16);
  v22 = (uint64_t ***)(v21 + 16);
  v24 = atomic_load((unsigned int *)(v23 + 24));
  if (v24 != 1)
    sub_20C29EE08(v22);
  v25 = *v22;
  v26 = v25[1];
  if (v26 == *v25)
  {
LABEL_39:
    if (v26 >= v25[2])
    {
      v29 = sub_20C29EEA0((uint64_t *)v25, a3, v7);
    }
    else
    {
      sub_20C29EFAC(v25[1], a3, v7);
      v29 = (uint64_t)(v26 + 3);
      v25[1] = v26 + 3;
    }
    v25[1] = (uint64_t *)v29;
  }
  else
  {
    v27 = ((char *)v26 - (char *)*v25) / 24;
    v28 = *v25 + 1;
    while ((*(v28 - 1) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      v28 += 3;
      if (!--v27)
        goto LABEL_39;
    }
    sub_20BF4A9BC(v28, v7);
  }
  sub_20BF4C2D8((uint64_t)&v38);
}

void sub_20C296984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_20BF4C2D8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Set(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t (***a4)(_QWORD, _BYTE *))
{
  _QWORD *v6;
  char *v7;
  _QWORD v9[4];
  char v10;
  int v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 24);
  v13 = 0;
  if (((**a4)(a4, v12) & 1) == 0)
  {
    v9[0] = "usd/crateData.cpp";
    v9[1] = "Set";
    v9[2] = 588;
    v9[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::Set(const SdfPath &, const TfToken &, const SdfAbs"
            "tractDataConstValue &)";
    v10 = 0;
    v11 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v9, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v7, "value.GetValue(&val)");
  }
  sub_20C296540(v6, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return sub_20BF4C2D8((uint64_t)v12);
}

void sub_20C296AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Erase(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)*((_QWORD *)this + 3);
  result = sub_20C29AEC0(v4, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  if (v4[4] + 32 * v4[5] != result)
  {
    v7 = (uint64_t *)(result + 16);
    v6 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(v6 + 8) - *(_QWORD *)v6;
    if (v8)
    {
      v9 = 0;
      v10 = v8 / 24;
      while ((*(_QWORD *)(*(_QWORD *)v6 + v9) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v9 += 24;
        if (!--v10)
          return result;
      }
      v11 = atomic_load((unsigned int *)(v6 + 24));
      if (v11 != 1)
        sub_20C29EE08((uint64_t ***)(result + 16));
      v12 = *v7;
      sub_20C0DEC2C((_QWORD *)(*(_QWORD *)v12 + v9 + 24), *(_QWORD **)(v12 + 8), (_QWORD *)(*(_QWORD *)v12 + v9));
      return sub_20C0DE370(v12, v13);
    }
  }
  return result;
}

uint64_t sub_20C296BD4(_QWORD *a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 32 * a1[5] != result)
  {
    v7 = (uint64_t *)(result + 16);
    v6 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(v6 + 8) - *(_QWORD *)v6;
    if (v8)
    {
      v9 = 0;
      v10 = v8 / 24;
      while ((*(_QWORD *)(*(_QWORD *)v6 + v9) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v9 += 24;
        if (!--v10)
          return result;
      }
      v11 = atomic_load((unsigned int *)(v6 + 24));
      if (v11 != 1)
        sub_20C29EE08((uint64_t ***)(result + 16));
      v12 = *v7;
      sub_20C0DEC2C((_QWORD *)(*(_QWORD *)v12 + v9 + 24), *(_QWORD **)(v12 + 8), (_QWORD *)(*(_QWORD *)v12 + v9));
      return sub_20C0DE370(v12, v13);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateData::ListAllTimeSamples(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  double *v4;

  sub_20C29F030(*((_QWORD **)this + 3), (double **)&__p);
  sub_20C29F570(a2, (double *)__p, v4);
  if (__p)
  {
    v4 = (double *)__p;
    operator delete(__p);
  }
}

void sub_20C296D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::ListTimeSamplesForPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  double **v4;

  v4 = (double **)sub_20C29F158(*((_QWORD **)this + 3), (unsigned int *)a2);
  return sub_20C29F5F0(a3, *v4, v4[1]);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, double a2, double *a3, double *a4)
{
  double *v7;
  double v8;
  unint64_t v9;
  double *v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  uint64_t v17;
  double *v19;
  double *v20;

  sub_20C29F030(*((_QWORD **)this + 3), &v19);
  v7 = v19;
  if (v19 == v20)
  {
    v17 = 0;
    if (!v19)
      return v17;
    goto LABEL_17;
  }
  v8 = *v19;
  if (*v19 >= a2 || (v8 = *(v20 - 1), v8 <= a2))
  {
    *a4 = v8;
    goto LABEL_15;
  }
  v9 = v20 - v19;
  v10 = v19;
  do
  {
    v11 = v9 >> 1;
    v12 = &v10[v9 >> 1];
    v14 = *v12;
    v13 = v12 + 1;
    v9 += ~(v9 >> 1);
    if (v14 < a2)
      v10 = v13;
    else
      v9 = v11;
  }
  while (v9);
  v15 = *v10;
  *a4 = *v10;
  *a3 = v15;
  if ((char *)v10 - (char *)v7 >= 1 && v15 != a2)
  {
    v8 = *(v10 - 1);
LABEL_15:
    *a3 = v8;
  }
  v17 = 1;
  if (v7)
  {
LABEL_17:
    v20 = v7;
    operator delete(v7);
  }
  return v17;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v2;

  v2 = sub_20C29F158(*((_QWORD **)this + 3), (unsigned int *)a2);
  return (v2[1] - *v2) >> 3;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  uint64_t *v8;
  double *v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double v17;
  double v18;

  v8 = sub_20C29F158(*((_QWORD **)this + 3), (unsigned int *)a2);
  v9 = (double *)*v8;
  v10 = v8[1];
  if (*v8 != v10)
  {
    v11 = *v9;
    if (*v9 >= a3 || (v11 = *(double *)(v10 - 8), v11 <= a3))
    {
      *a5 = v11;
    }
    else
    {
      v12 = (v10 - (uint64_t)v9) >> 3;
      v13 = (double *)*v8;
      do
      {
        v14 = v12 >> 1;
        v15 = &v13[v12 >> 1];
        v17 = *v15;
        v16 = v15 + 1;
        v12 += ~(v12 >> 1);
        if (v17 < a3)
          v13 = v16;
        else
          v12 = v14;
      }
      while (v12);
      v18 = *v13;
      *a5 = *v13;
      *a4 = v18;
      if ((char *)v13 - (char *)v9 < 1 || v18 == a3)
        return 1;
      v11 = *(v13 - 1);
    }
    *a4 = v11;
    return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::QueryTimeSample(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return sub_20C296F68(*((_QWORD **)this + 3), (unsigned int *)a2, a4, a3);
}

uint64_t sub_20C296F68(_QWORD *a1, unsigned int *a2, _QWORD *a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *i;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  double **v19;
  double *v20;
  double *v21;
  unint64_t v22;
  double *v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v8 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v8)
    v8 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  v9 = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v9)
    return 0;
  v10 = *(uint64_t **)(v9 + 16);
  v11 = *v10;
  v12 = v10[1] - *v10;
  if (!v12)
    return 0;
  v13 = v12 / 24;
  v14 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  for (i = (pxrInternal__aapl__pxrReserved__::VtValue *)(v11 + 8);
        (*((_QWORD *)i - 1) & 0xFFFFFFFFFFFFFFF8) != v14;
        i = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)i + 24))
  {
    if (!--v13)
      return 0;
  }
  result = sub_20C29DAF0(i);
  if ((_DWORD)result)
  {
    v17 = *((_QWORD *)i + 1);
    if ((v17 & 4) != 0)
      v18 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v17 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(i);
    else
      v18 = *(_QWORD **)i;
    v19 = (double **)v18[1];
    v20 = *v19;
    v21 = v19[1];
    if (v21 == v20)
    {
      v23 = v21;
    }
    else
    {
      v22 = v21 - v20;
      v23 = v20;
      do
      {
        v24 = v22 >> 1;
        v25 = &v23[v22 >> 1];
        v27 = *v25;
        v26 = v25 + 1;
        v22 += ~(v22 >> 1);
        if (v27 < a4)
          v23 = v26;
        else
          v22 = v24;
      }
      while (v22);
    }
    if (v21 != v23 && *v23 == a4)
    {
      if (a3)
      {
        v28 = v23 - v20;
        if (*v18)
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetTimeSampleValueImpl(a1[11], (uint64_t)v18, v28, &v32);
        else
          sub_20BF4C6D0(&v32, (_QWORD *)(v18[2] + 16 * v28));
        if (sub_20C29DA78((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
        {
          v29 = a1[11];
          if ((v33 & 4) != 0)
            v30 = (uint64_t *)(*(uint64_t (**)(char **))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
          else
            v30 = (uint64_t *)&v32;
          v31 = *v30;
          v34[1] = 0;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v29, v31, (uint64_t)v34);
        }
        else
        {
          sub_20BF4C6D0(v34, &v32);
        }
        sub_20BF4B5D8(a3, v34);
        sub_20BF4C2D8((uint64_t)v34);
        sub_20BF4C2D8((uint64_t)&v32);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_20C2971C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::QueryTimeSample(uint64_t a1, unsigned int *a2, uint64_t (***a3)(_QWORD, _QWORD *), double a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(a1 + 24);
  if (!a3)
    return sub_20C296F68(v4, a2, 0, a4);
  v8[1] = 0;
  if (sub_20C296F68(v4, a2, v8, a4))
    v6 = (**a3)(a3, v8);
  else
    v6 = 0;
  sub_20BF4C2D8((uint64_t)v8);
  return v6;
}

void sub_20C2972B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::Usd_CrateData::SetTimeSample(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return sub_20C2972D0(*((_QWORD **)this + 3), (unsigned int *)a2, (char *)a4, a3);
}

void **sub_20C2972D0(_QWORD *a1, unsigned int *a2, char *a3, double a4)
{
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v17;
  uint64_t ***v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::VtValue *v24;
  char v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  double *v29;
  unint64_t v30;
  double *v31;
  double *v32;
  double v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[40];
  double v51;
  void **v52[3];

  v52[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v51 = a4;
  if (!*((_QWORD *)a3 + 1))
    return sub_20C297760(a1, a2, a4);
  v49 = 0;
  v7 = (char *)operator new(0x20uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)v50 = v7;
  *((_DWORD *)v7 + 6) = 0;
  v8 = (unsigned int *)(v7 + 24);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  memset(&v50[8], 0, 32);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v10)
    v10 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  v11 = a1[4];
  v12 = a1[5];
  v13 = a1[10];
  if (v13 == v11 + 32 * v12)
  {
    LODWORD(v14) = *a2;
    LODWORD(v15) = a2[1];
  }
  else
  {
    v14 = *(_QWORD *)a2;
    if (*(_QWORD *)(v13 + 8) == *(_QWORD *)a2)
      goto LABEL_12;
    v15 = HIDWORD(v14);
  }
  v13 = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (((v14+ (unint64_t)v15+ (v14 + (unint64_t)v15)* (v14 + (unint64_t)v15)) >> 1)+ v15)));
  v11 = a1[4];
  v12 = a1[5];
LABEL_12:
  if (v11 + 32 * v12 == v13
    || (v19 = *(unsigned int **)(v13 + 16),
        v18 = (uint64_t ***)(v13 + 16),
        v17 = v19,
        v20 = *(_QWORD *)v19,
        (v21 = *((_QWORD *)v19 + 1) - *(_QWORD *)v19) == 0))
  {
LABEL_17:
    v24 = 0;
    v25 = 1;
  }
  else
  {
    v22 = 0;
    v23 = v21 / 24;
    while ((*(_QWORD *)(v20 + v22 * 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8))
    {
      v22 += 3;
      if (!--v23)
        goto LABEL_17;
    }
    v43 = atomic_load(v17 + 6);
    if (v43 != 1)
      sub_20C29EE08(v18);
    v24 = (pxrInternal__aapl__pxrReserved__::VtValue *)&(**v18)[v22 + 1];
    if (sub_20C29DAF0(v24))
    {
      v44 = sub_20C29ED78(v24);
      v25 = 0;
      v45 = *(_QWORD *)v44;
      *(_QWORD *)v44 = v49;
      v46 = *(_OWORD *)(v44 + 8);
      *(_QWORD *)(v44 + 8) = *(_QWORD *)v50;
      *(_QWORD *)(v44 + 16) = *(_QWORD *)&v50[8];
      *(_OWORD *)v50 = v46;
      v47 = *(_OWORD *)(v44 + 24);
      *(_OWORD *)(v44 + 24) = *(_OWORD *)&v50[16];
      v48 = *(_QWORD *)(v44 + 40);
      *(_QWORD *)(v44 + 40) = *(_QWORD *)&v50[32];
      v49 = v45;
      *(_OWORD *)&v50[16] = v47;
      *(_QWORD *)&v50[32] = v48;
    }
    else
    {
      v25 = 0;
    }
  }
  v27 = **(_QWORD **)v50;
  v26 = *(double **)(*(_QWORD *)v50 + 8);
  if (v26 == **(double ***)v50)
  {
    v29 = *(double **)(*(_QWORD *)v50 + 8);
  }
  else
  {
    v28 = ((uint64_t)v26 - **(_QWORD **)v50) >> 3;
    v29 = **(double ***)v50;
    do
    {
      v30 = v28 >> 1;
      v31 = &v29[v28 >> 1];
      v33 = *v31;
      v32 = v31 + 1;
      v28 += ~(v28 >> 1);
      if (v33 < v51)
        v29 = v32;
      else
        v28 = v30;
    }
    while (v28);
  }
  if (v26 != v29 && *v29 == v51)
  {
    if (v49)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MakeTimeSampleValuesMutableImpl(a1[11], &v49);
      v27 = **(_QWORD **)v50;
    }
    sub_20BF4A9BC((_QWORD *)(*(_QWORD *)&v50[8] + 2 * ((_QWORD)v29 - v27)), a3);
  }
  else
  {
    v34 = a1[11];
    v35 = atomic_load((unsigned int *)(*(_QWORD *)v50 + 24));
    if (v35 != 1)
      sub_20C29FAFC((void **)v50);
    if (v49)
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MakeTimeSampleValuesMutableImpl(v34, &v49);
    v36 = ((uint64_t)v29 - v27) >> 3;
    sub_20C29F670(*(uint64_t *)v50, (char *)(**(_QWORD **)v50 + 8 * v36), (char *)&v51);
    sub_20C29F8B0(&v50[8], (char *)(*(_QWORD *)&v50[8] + 16 * v36), a3);
  }
  if ((v25 & 1) != 0)
  {
    v37 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
    if (!v37)
      v37 = (uint64_t *)sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
    sub_20C29E4BC(&v49, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    sub_20C296540(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v37, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    sub_20BF4C2D8((uint64_t)v52);
  }
  else
  {
    v38 = sub_20C29ED78(v24);
    v39 = *(_QWORD *)v38;
    *(_QWORD *)v38 = v49;
    v49 = v39;
    v40 = *(_OWORD *)(v38 + 8);
    *(_QWORD *)(v38 + 8) = *(_QWORD *)v50;
    *(_QWORD *)(v38 + 16) = *(_QWORD *)&v50[8];
    *(_OWORD *)v50 = v40;
    v41 = *(_OWORD *)(v38 + 24);
    *(_OWORD *)(v38 + 24) = *(_OWORD *)&v50[16];
    *(_OWORD *)&v50[16] = v41;
    v42 = *(_QWORD *)(v38 + 40);
    *(_QWORD *)(v38 + 40) = *(_QWORD *)&v50[32];
    *(_QWORD *)&v50[32] = v42;
  }
  v52[0] = (void **)&v50[8];
  sub_20BF8CA20(v52);
  return sub_20C020410((void **)v50);
}

void sub_20C29771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C29E4FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::Usd_CrateData::EraseTimeSample(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  return sub_20C297760(*((_QWORD **)this + 3), (unsigned int *)a2, a3);
}

void **sub_20C297760(_QWORD *a1, unsigned int *a2, double a3)
{
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t ***v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double *v33;
  unint64_t v34;
  double *v35;
  double *v36;
  double v37;
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[40];
  void **v68;

  v66 = 0;
  v6 = (char *)operator new(0x20uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)v67 = v6;
  *((_DWORD *)v6 + 6) = 0;
  v7 = (unsigned int *)(v6 + 24);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  memset(&v67[8], 0, 32);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v9)
    v9 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  v10 = a1[4];
  v11 = a1[5];
  v12 = a1[10];
  if (v12 == v10 + 32 * v11)
  {
    LODWORD(v13) = *a2;
    LODWORD(v14) = a2[1];
    goto LABEL_9;
  }
  v13 = *(_QWORD *)a2;
  if (*(_QWORD *)(v12 + 8) != *(_QWORD *)a2)
  {
    v14 = HIDWORD(v13);
LABEL_9:
    v12 = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (((v13+ (unint64_t)v14+ (v13 + (unint64_t)v14)* (v13 + (unint64_t)v14)) >> 1)+ v14)));
    v10 = a1[4];
    v11 = a1[5];
  }
  if (v10 + 32 * v11 != v12)
  {
    v17 = *(unsigned int **)(v12 + 16);
    v16 = (uint64_t ***)(v12 + 16);
    v15 = v17;
    v18 = *(_QWORD *)v17;
    v19 = *((_QWORD *)v17 + 1) - *(_QWORD *)v17;
    if (v19)
    {
      v20 = 0;
      v21 = v19 / 24;
      while ((*(_QWORD *)(v18 + v20 * 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8))
      {
        v20 += 3;
        if (!--v21)
          goto LABEL_51;
      }
      v22 = atomic_load(v15 + 6);
      if (v22 != 1)
        sub_20C29EE08(v16);
      v23 = (pxrInternal__aapl__pxrReserved__::VtValue *)&(**v16)[v20 + 1];
      if (sub_20C29DAF0(v23))
      {
        v24 = sub_20C29ED78(v23);
        v25 = *(_QWORD *)v24;
        *(_QWORD *)v24 = v66;
        v66 = v25;
        v26 = *(_OWORD *)(v24 + 8);
        *(_OWORD *)(v24 + 8) = *(_OWORD *)v67;
        v27 = *(_OWORD *)(v24 + 24);
        *(_OWORD *)(v24 + 24) = *(_OWORD *)&v67[16];
        *(_OWORD *)v67 = v26;
        *(_OWORD *)&v67[16] = v27;
        v28 = *(_QWORD *)(v24 + 40);
        *(_QWORD *)(v24 + 40) = *(_QWORD *)&v67[32];
        *(_QWORD *)&v67[32] = v28;
        v30 = *(_QWORD *)v26;
        v29 = *(double **)(v26 + 8);
        v31 = (uint64_t)v29 - *(_QWORD *)v26;
        if (v29 == *(double **)v26)
        {
          v33 = *(double **)(v26 + 8);
        }
        else
        {
          v32 = v31 >> 3;
          v33 = *(double **)v26;
          do
          {
            v34 = v32 >> 1;
            v35 = &v33[v32 >> 1];
            v37 = *v35;
            v36 = v35 + 1;
            v32 += ~(v32 >> 1);
            if (v37 < a3)
              v33 = v36;
            else
              v32 = v34;
          }
          while (v32);
        }
        if (v29 != v33 && *v33 == a3)
        {
          if (v31 == 8)
          {
            v38 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
            if (!v38)
              v38 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
            v39 = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
            if (a1[4] + 32 * a1[5] != v39)
            {
              v41 = v39 + 16;
              v40 = *(_QWORD *)(v39 + 16);
              v42 = *(_QWORD *)(v40 + 8) - *(_QWORD *)v40;
              if (v42)
              {
                v43 = 0;
                v44 = v42 / 24;
                while ((*(_QWORD *)(*(_QWORD *)v40 + v43) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8))
                {
                  v43 += 24;
                  if (!--v44)
                    goto LABEL_51;
                }
                v63 = atomic_load((unsigned int *)(v40 + 24));
                if (v63 != 1)
                  sub_20C29EE08((uint64_t ***)(v39 + 16));
                v64 = *(_QWORD **)v41;
                sub_20C0DEC2C((_QWORD *)(**(_QWORD **)v41 + v43 + 24), *(_QWORD **)(*(_QWORD *)v41 + 8), (_QWORD *)(**(_QWORD **)v41 + v43));
                sub_20C0DE370((uint64_t)v64, v65);
              }
            }
          }
          else
          {
            v45 = a1[11];
            v46 = atomic_load((unsigned int *)(v26 + 24));
            if (v46 != 1)
              sub_20C29FAFC((void **)v67);
            if (v66)
              pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MakeTimeSampleValuesMutableImpl(v45, &v66);
            v47 = ((uint64_t)v33 - v30) >> 3;
            v48 = *(_QWORD *)v67;
            v49 = *(_QWORD *)(*(_QWORD *)v67 + 8);
            v50 = **(_QWORD **)v67 + 8 * v47;
            v51 = v49 - (v50 + 8);
            if (v49 != v50 + 8)
              memmove((void *)(**(_QWORD **)v67 + 8 * v47), (const void *)(v50 + 8), v49 - (v50 + 8));
            *(_QWORD *)(v48 + 8) = v50 + v51;
            v52 = *(_QWORD **)&v67[16];
            v53 = *(_QWORD *)&v67[8] + 16 * v47;
            v54 = v53 + 16;
            if (v53 + 16 != *(_QWORD *)&v67[16])
            {
              v55 = (_QWORD *)v53;
              do
              {
                sub_20BF4B5D8(v55, v55 + 2);
                v53 += 16;
                v56 = v55 + 4;
                v55 += 2;
              }
              while (v56 != v52);
              v54 = *(_QWORD *)&v67[16];
            }
            while (v54 != v53)
              v54 = sub_20BF4C2D8(v54 - 16);
            *(_QWORD *)&v67[16] = v53;
            v57 = sub_20C29ED78(v23);
            v58 = *(_QWORD *)v57;
            *(_QWORD *)v57 = v66;
            v66 = v58;
            v59 = *(_OWORD *)(v57 + 8);
            *(_OWORD *)(v57 + 8) = *(_OWORD *)v67;
            v60 = *(_OWORD *)(v57 + 24);
            *(_OWORD *)(v57 + 24) = *(_OWORD *)&v67[16];
            *(_OWORD *)v67 = v59;
            *(_OWORD *)&v67[16] = v60;
            v61 = *(_QWORD *)(v57 + 40);
            *(_QWORD *)(v57 + 40) = *(_QWORD *)&v67[32];
            *(_QWORD *)&v67[32] = v61;
          }
        }
      }
    }
  }
LABEL_51:
  v68 = (void **)&v67[8];
  sub_20BF8CA20(&v68);
  return sub_20C020410((void **)v67);
}

void sub_20C297BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C29E4FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C297C04(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20C297C80(a1, 0, 0.0, 0.5);
  v4[10] = v4[4] + 32 * v4[5];
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CreateNew(a2, v4 + 11);
  return a1;
}

void sub_20C297C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 8);
  sub_20C297E90(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C297C80(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 59)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C297E0C((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20C297D94();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 26) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C297D80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20C297D94()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C840);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C840))
  {
    dword_25473C820 = 0;
    word_25473C824 = -1;
    byte_25473C826 = 1;
    __cxa_atexit((void (*)(void *))sub_20C297F34, &dword_25473C820, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473C840);
  }
  return &dword_25473C820;
}

_QWORD *sub_20C297E0C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BF25370(a1, a2);
    v4 = a1[1];
    v5 = v4 + 32 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C297E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C297E90(&a9);
  _Unwind_Resume(a1);
}

void sub_20C297E90(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C297ED0(v2);
    operator delete(**a1);
  }
}

_QWORD *sub_20C297ED0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 32;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        result = sub_20C297F70(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      v5 = v4 == v3;
      v4 -= 32;
    }
    while (!v5);
  }
  v1[1] = v3;
  return result;
}

uint64_t sub_20C297F34(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_20C297F70(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

_DWORD *sub_20C297F70(uint64_t a1)
{
  sub_20C297FD8((void ***)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  return sub_20BFD265C((_DWORD *)(a1 + 8));
}

_DWORD *sub_20C297FA4(uint64_t a1)
{
  sub_20C297FD8((void ***)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void ***sub_20C297FD8(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 3);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2;
      sub_20C0DE330(&v7);
      operator delete(v2);
    }
  }
  return a1;
}

void sub_20C298038(unint64_t a1, int *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[9];
  uint64_t v9;

  if (a1 < (unint64_t)a2)
  {
    if ((uint64_t)((uint64_t)a2 - a1) > 3999)
    {
      sub_20C2986E4(a1, (uint64_t)a2, a3, a4);
    }
    else
    {
      *(_QWORD *)&v8[1] = v4;
      v9 = v5;
      v6 = 126 - 2 * __clz((uint64_t)((uint64_t)a2 - a1) >> 3);
      if (a2 == (int *)a1)
        v7 = 0;
      else
        v7 = v6;
      sub_20C298824(a1, a2, (uint64_t)v8, v7, 1);
    }
  }
}

uint64_t sub_20C29808C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  char *v9;
  char *v10;
  unsigned int *v11;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v12;
  int FileVersion;
  unsigned int *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned __int8 v19;
  _QWORD *v20;
  _BOOL4 v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t *Instance;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned int *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;
  unsigned int v37;
  _QWORD *v38;
  int v39;
  char v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int v46;
  void *v47[2];
  uint64_t v48;
  void *__p[2];
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  _QWORD v55[11];

  v55[9] = *MEMORY[0x24BDAC8D0];
  sub_20C297C80((uint64_t)&v52, 0, 0.0, 0.5);
  sub_20BED1250(a1, &v52);
  *(_QWORD *)&v44 = &v53;
  sub_20C297E90((void ***)&v44);
  a1[10] = a1[4] + 32 * a1[5];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
  __p[0] = 0;
  __p[1] = 0;
  v50 = 0;
  v47[1] = 0;
  v48 = 0;
  v47[0] = 0;
  v2 = a1[11];
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_OWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v5 = __p[0];
  *(_OWORD *)__p = v4;
  v50 = v3;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD *)(v2 + 64);
  v7 = v47[0];
  v8 = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_OWORD *)v47 = v8;
  v48 = v6;
  if (v7)
    operator delete(v7);
  v10 = *(char **)(v2 + 72);
  v9 = *(char **)(v2 + 80);
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  v11 = (unsigned int *)__p[0];
  v12 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1[11];
  if (__p[0] == __p[1])
  {
LABEL_8:
    FileVersion = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetFileVersion(v12);
    if (!(FileVersion & 0xFF00 | (FileVersion << 16) & 0xFFFF00))
    {
      v14 = sub_20C29AF1C((uint64_t)__p[0], (unsigned int *)__p[1], (uint64_t)a1);
      if (__p[1] != v14)
        __p[1] = v14;
    }
    v41 = 0;
    v42 = 0;
    v43 = 0;
    *(_QWORD *)&v44 = 0;
    *((_QWORD *)&v44 + 1) = v54;
    v15 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v44, 0x28uLL);
    *((_BYTE *)v15 - 11) = 1;
    *v15 = &off_24C52E8C8;
    v15[1] = a1;
    v15[2] = __p;
    v15[3] = &v41;
    v15[4] = v55;
    (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v15 - 5))(*(v15 - 5), v15, (uint64_t)(v15 - 1));
    v44 = 0u;
    v45 = 0u;
    v46 = 1065353216;
    v40 = 0;
    if (v10 != v9)
    {
      v17 = v10;
      while (*(_DWORD *)v17 != -1)
      {
        v17 += 4;
        if (v17 == v9)
        {
          v17 = v9;
          break;
        }
      }
      if (v10 != v9)
      {
        v18 = v10;
        while (1)
        {
          v19 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
          if ((v19 & 1) != 0)
          {
            v20 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("field data", 0, v16);
            v21 = v20 != 0;
          }
          else
          {
            v20 = 0;
            v21 = 0;
          }
          v38 = v20;
          v39 = v21;
          v37 = (unint64_t)(v18 - v10) >> 2;
          v32 = &v37;
          v22 = sub_20C29BAE0((uint64_t)&v44, &v37, (uint64_t)&unk_20CAC184C, &v32);
          v32 = 0;
          v33 = v54;
          v23 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v32, 0x40uLL);
          *((_BYTE *)v23 - 11) = 1;
          *v23 = &off_24C52E910;
          v23[1] = a1;
          v23[2] = v18;
          v23[3] = v17;
          v23[4] = v47;
          v23[5] = v22 + 3;
          v23[6] = &v40;
          v23[7] = v55;
          (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v23 - 5))(*(v23 - 5), v23, (uint64_t)(v23 - 1));
          if (v40)
            break;
          while (v39--)
            pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v38);
          if (v17 != v9)
          {
            v18 = v17 + 4;
            if (v17 + 4 != v9)
            {
              v17 += 4;
              while (*(_DWORD *)v17 != -1)
              {
                v17 += 4;
                if (v17 == v9)
                {
                  v17 = v9;
                  break;
                }
              }
              if (v18 != v9)
                continue;
            }
          }
          goto LABEL_31;
        }
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::Cancel((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
        sub_20BEB24F4((uint64_t)&v38);
      }
    }
LABEL_31:
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v26 = v51;
    v27 = atomic_load(Instance + 18);
    if (v26 >= v27
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      if (!v40)
      {
        LOBYTE(v38) = 1;
        v32 = 0;
        v33 = v54;
        v28 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v32, 0x38uLL);
        *((_BYTE *)v28 - 11) = 1;
        *v28 = &off_24C52EA20;
        v28[1] = a1;
        v28[2] = __p;
        v28[3] = &v41;
        v28[4] = &v44;
        v28[5] = &v38;
        v28[6] = v55;
        (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v28 - 5))(*(v28 - 5), v28, (uint64_t)(v28 - 1));
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
        v29 = atomic_load((unsigned __int8 *)&v38);
        v30 = v29 & 1;
        if ((v29 & 1) != 0)
        {
          a1[10] = a1[4] + 32 * a1[5];
        }
        else
        {
          v32 = (unsigned int *)"usd/crateData.cpp";
          v33 = "_PopulateFromCrateFile";
          v34 = 907;
          v35 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::_PopulateFromCrateFile()";
          v36 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 3, (pxrInternal__aapl__pxrReserved__ *)"CrateFile specs are corrupted, contains invalid field data.");
        }
LABEL_43:
        sub_20C29CB7C((uint64_t)&v44);
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        goto LABEL_45;
      }
      v32 = (unsigned int *)"usd/crateData.cpp";
      v33 = "_PopulateFromCrateFile";
      v34 = 878;
      v35 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::_PopulateFromCrateFile()";
      v36 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 3, (pxrInternal__aapl__pxrReserved__ *)"CrateFile specs are corrupted, contain field data out of bounds");
    }
    v30 = 0;
    goto LABEL_43;
  }
  while ((uint64_t)(*((_QWORD *)v12 + 13) - *((_QWORD *)v12 + 12)) >> 3 > (unint64_t)*v11)
  {
    v11 += 3;
    if (v11 == __p[1])
      goto LABEL_8;
  }
  *(_QWORD *)&v44 = "usd/crateData.cpp";
  *((_QWORD *)&v44 + 1) = "_PopulateFromCrateFile";
  *(_QWORD *)&v45 = 771;
  *((_QWORD *)&v45 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::_PopulateFromCrateFile()";
  LOBYTE(v46) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 3, (pxrInternal__aapl__pxrReserved__ *)"CrateFile specs are corrupted, contain pathIndices out of bounds");
  v30 = 0;
LABEL_45:
  if (v10)
    operator delete(v10);
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51);
  return v30;
}

void sub_20C29861C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  void *v37;

  sub_20C29CB7C((uint64_t)&a21);
  if (__p)
    operator delete(__p);
  if (v37)
    operator delete(v37);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&a37);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a35);
  _Unwind_Resume(a1);
}

void sub_20C2986E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _DWORD v16[32];
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v16[0] = 1;
  v17 = 65539;
  v18 = 54;
  tbb::task_group_context::init((uint64_t)v16, a2, a3, a4);
  v7 = 0;
  while (1)
  {
    v8 = v7 + 8;
    v9 = a1 + v7;
    if (v7 == 72)
      break;
    v10 = sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
    v7 = v8;
    if ((v10 & 1) != 0)
      goto LABEL_6;
  }
  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = v9 + 8;
  v15 = 1;
  v13 = a3;
  sub_20C299E7C(&v14, &v13, (uint64_t)&v12, (tbb::task_group_context *)v16);
  if (!tbb::task_group_context::is_group_execution_cancelled((tbb::task_group_context *)v16))
    goto LABEL_7;
LABEL_6:
  *(_QWORD *)&v14 = a3;
  *((_QWORD *)&v14 + 1) = (a2 - a1) >> 3;
  v15 = a1;
  sub_20C29A47C(&v14, (uint64_t)&v13, (uint64_t)&v12, v11);
LABEL_7:
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v16);
}

void sub_20C2987FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C298824(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  char v17;
  BOOL v18;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, a2 - 2);
          return (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, a2 - 1);
        }
        return result;
      case 3uLL:
        return sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)v9, v9 + 2, a2 - 2, a3);
      case 4uLL:
        return (uint64_t)sub_20C299678(v9, v9 + 2, v9 + 4, a2 - 2, a3);
      case 5uLL:
        return (uint64_t)sub_20C299758(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_20C298CF0(v9, a2, a3);
          else
            return (uint64_t)sub_20C298E48(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[2 * (v13 >> 1)], v9, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)v9, &v9[2 * (v13 >> 1)], a2 - 2, a3);
            sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2), v15 - 2, a2 - 4, a3);
            sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4), &v9[2 * v14 + 2], a2 - 6, a3);
            sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 - 2), v15, &v9[2 * v14 + 2], a3);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v15);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, &v9[2 * v14 + 1]);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 - 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)v9) & 1) == 0)
          {
            result = (uint64_t)sub_20C2990B0(v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v16 = sub_20C299270(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a3);
          if ((v17 & 1) == 0)
            goto LABEL_15;
          v18 = sub_20C299438(v9, v16, a3);
          v9 = v16 + 2;
          result = sub_20C299438(v16 + 2, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_15:
            result = sub_20C298824(v8, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_20C299878(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a2, a3);
        return result;
    }
  }
}

uint64_t sub_20C298B90(int a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  int IsPropertyPath;
  int v6;
  uint64_t *Name;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;

  IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this);
  v6 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3) + IsPropertyPath;
  if (v6 != 2)
  {
    if (v6 == 1)
      return IsPropertyPath ^ 1u;
    return sub_20BFD758C(this, a3);
  }
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
  v10 = *((unsigned __int8 *)Name + 23);
  if ((v10 & 0x80u) == 0)
    v11 = *((unsigned __int8 *)Name + 23);
  else
    v11 = Name[1];
  v12 = *((unsigned __int8 *)v9 + 23);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = v9[1];
  if (v11 == v12)
  {
    if (v13 >= 0)
      v14 = (unsigned __int8 *)v9;
    else
      v14 = (unsigned __int8 *)*v9;
    if ((v10 & 0x80) == 0)
    {
      if (*((_BYTE *)Name + 23))
      {
        while (*(unsigned __int8 *)Name == *v14)
        {
          Name = (uint64_t *)((char *)Name + 1);
          ++v14;
          if (!--v10)
            return sub_20BFD758C(this, a3);
        }
        goto LABEL_19;
      }
      return sub_20BFD758C(this, a3);
    }
    if (!memcmp((const void *)*Name, v14, Name[1]))
      return sub_20BFD758C(this, a3);
  }
LABEL_19:
  v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
  v17 = *((char *)v16 + 23);
  v18 = *((char *)v15 + 23);
  if (v18 >= 0)
    v19 = *((unsigned __int8 *)v15 + 23);
  else
    v19 = v15[1];
  if (v18 >= 0)
    v20 = v15;
  else
    v20 = (const void *)*v15;
  if (v17 >= 0)
    v21 = *((unsigned __int8 *)v16 + 23);
  else
    v21 = v16[1];
  if (v17 >= 0)
    v22 = v16;
  else
    v22 = (const void *)*v16;
  if (v21 >= v19)
    v23 = v19;
  else
    v23 = v21;
  v24 = memcmp(v20, v22, v23);
  if (v24)
    return v24 < 0;
  else
    return v19 < v21;
}

_DWORD *sub_20C298CF0(_DWORD *result, _DWORD *a2, int a3)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;

  if (result != a2)
  {
    v4 = (uint64_t)result;
    v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 2);
    if (result + 2 != a2)
    {
      v7 = 0;
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)result;
      do
      {
        v9 = v5;
        result = (_DWORD *)sub_20C298B90(a3, v5, v8);
        if ((_DWORD)result)
        {
          v13 = *(_DWORD *)v9;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
          v14 = *((_DWORD *)v8 + 3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v8 + 3);
          v10 = v7;
          while (1)
          {
            v11 = v4 + v10;
            sub_20BFD3EBC((int *)(v4 + v10 + 8), (int *)(v4 + v10));
            sub_20BFD3F10((int *)(v11 + 12), (int *)(v11 + 4));
            if (!v10)
              break;
            v10 -= 8;
            if ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 8)) & 1) == 0)
            {
              v12 = (int *)(v4 + v10 + 8);
              goto LABEL_10;
            }
          }
          v12 = (int *)v4;
LABEL_10:
          sub_20BFD3EBC(v12, &v13);
          sub_20BFD3F10((int *)(v11 + 4), &v14);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
          result = sub_20BFD265C(&v13);
        }
        v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
        v7 += 8;
        v8 = v9;
      }
      while ((_DWORD *)((char *)v9 + 8) != a2);
    }
  }
  return result;
}

void sub_20C298E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

int *sub_20C298E48(int *result, int *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  int *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  int *v9;
  int *v10;
  int v11;
  int v12;

  if (result != a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)result;
    v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 2);
    if (result + 2 != a2)
    {
      v7 = result + 3;
      do
      {
        v8 = v5;
        result = (int *)sub_20C298B90(a3, v5, v4);
        if ((_DWORD)result)
        {
          v11 = *(_DWORD *)v8;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v8);
          v12 = *((_DWORD *)v4 + 3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v4 + 3);
          v9 = v7;
          do
          {
            v10 = v9;
            sub_20BFD3EBC(v9 - 1, v9 - 3);
            v9 -= 2;
            sub_20BFD3F10(v10, v9);
          }
          while ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 - 5)) & 1) != 0);
          sub_20BFD3EBC(v9 - 1, &v11);
          sub_20BFD3F10(v9, &v12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
          result = sub_20BFD265C(&v11);
        }
        v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
        v7 += 2;
        v4 = v8;
      }
      while ((int *)((char *)v8 + 8) != a2);
    }
  }
  return result;
}

void sub_20C298F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C298F80(pxrInternal__aapl__pxrReserved__::SdfPath *a1, int *a2, int *a3, int a4)
{
  char v8;
  int v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;

  v8 = sub_20C298B90(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a1);
  v9 = sub_20C298B90(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if ((v8 & 1) == 0)
  {
    if (!v9)
      return 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
    v11 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
    if (sub_20C298B90(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a1))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a2);
      v10 = (int *)((char *)a1 + 4);
      v12 = 2;
      goto LABEL_9;
    }
    return 1;
  }
  v10 = (int *)((char *)a1 + 4);
  if (!v9)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a2);
    v13 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v10, a2 + 1);
    if (sub_20C298B90(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      v11 = a3 + 1;
      v12 = 2;
      v10 = v13;
      goto LABEL_9;
    }
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a3);
  v11 = a3 + 1;
  v12 = 1;
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v10, v11);
  return v12;
}

int *sub_20C2990B0(int *a1, int *a2, int a3)
{
  int *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  int v8;
  int v10;
  int v11;

  v10 = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  v11 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  if ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 2)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 2;
    while ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6) & 1) == 0);
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2);
    do
    {
      v6 = (int *)v7;
      if (v7 >= (pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
        break;
      v8 = sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, v7);
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 2);
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 2;
    while ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v6, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v6 + 1, a2 + 1);
    do
      v6 += 2;
    while (!sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6));
    do
      a2 -= 2;
    while ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    sub_20BFD3EBC(a1, v6 - 2);
    sub_20BFD3F10(a1 + 1, v6 - 1);
  }
  sub_20BFD3EBC(v6 - 2, &v10);
  sub_20BFD3F10(v6 - 1, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  return v6;
}

void sub_20C299240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

int *sub_20C299270(int *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t v6;
  char v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  int *v9;
  int *v10;
  int v12;
  int v13;

  v12 = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  v13 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  v6 = 0;
  do
  {
    v7 = sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v6 + 2], (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    v6 += 2;
  }
  while ((v7 & 1) != 0);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v8 >= a2)
        break;
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8);
    }
    while ((sub_20C298B90(a3, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12) & 1) == 0);
  }
  else
  {
    do
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8);
    while (!sub_20C298B90(a3, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12));
  }
  v9 = &a1[v6];
  if (v8 < a2)
  {
    v10 = (int *)a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, v10 + 1);
      do
        v9 += 2;
      while ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12) & 1) != 0);
      do
        v10 -= 2;
      while (!sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12));
    }
    while (v9 < v10);
  }
  if (v9 - 2 != a1)
  {
    sub_20BFD3EBC(a1, v9 - 2);
    sub_20BFD3F10(a1 + 1, v9 - 1);
  }
  sub_20BFD3EBC(v9 - 2, &v12);
  sub_20BFD3F10(v9 - 1, &v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  return v9 - 2;
}

void sub_20C299414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C299438(int *a1, int *a2, int a3)
{
  uint64_t v6;
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int v15;
  int v16;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2 - 2);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 - 1);
      }
      return 1;
    case 3:
      sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_20C299678(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_20C299758(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4);
      sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a1 + 2, a1 + 4, a3);
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6);
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_20C298B90(a3, v9, v8))
    {
      v15 = *(_DWORD *)v9;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
      v16 = *((_DWORD *)v9 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v9 + 1);
      v12 = v10;
      while (1)
      {
        v13 = (int *)((char *)a1 + v12);
        sub_20BFD3EBC((int *)((char *)a1 + v12 + 24), (int *)((char *)a1 + v12 + 16));
        sub_20BFD3F10(v13 + 7, v13 + 5);
        if (v12 == -16)
          break;
        v12 -= 8;
        if ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 2)) & 1) == 0)
        {
          v14 = (int *)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      v14 = a1;
LABEL_12:
      sub_20BFD3EBC(v14, &v15);
      sub_20BFD3F10(v13 + 5, &v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
      ++v11;
      sub_20BFD265C(&v15);
      if (v11 == 8)
        return (int *)((char *)v9 + 8) == a2;
    }
    v8 = v9;
    v10 += 8;
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
    if (v9 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
      return 1;
  }
}

void sub_20C299664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

int *sub_20C299678(int *a1, int *a2, int *a3, int *a4, int a5)
{
  int *result;

  sub_20C298F80((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a2, a3, a5);
  result = (int *)sub_20C298B90(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
    result = (int *)sub_20C298B90(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
      result = (int *)sub_20C298B90(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
        return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      }
    }
  }
  return result;
}

int *sub_20C299758(int *a1, int *a2, int *a3, int *a4, int *a5, int a6)
{
  int *result;

  sub_20C299678(a1, a2, a3, a4, a6);
  result = (int *)sub_20C298B90(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a4, a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a4 + 1, a5 + 1);
    result = (int *)sub_20C298B90(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
      result = (int *)sub_20C298B90(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
        result = (int *)sub_20C298B90(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
        }
      }
    }
  }
  return result;
}

int *sub_20C299878(int *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, int *a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  int *v14;
  unint64_t v15;

  if (a1 != (int *)this)
  {
    v6 = this;
    v8 = this - (pxrInternal__aapl__pxrReserved__::SdfPath *)a1;
    v9 = (this - (pxrInternal__aapl__pxrReserved__::SdfPath *)a1) >> 3;
    if (this - (pxrInternal__aapl__pxrReserved__::SdfPath *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_20C2999A0((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != (pxrInternal__aapl__pxrReserved__::SdfPath *)a3)
    {
      v14 = (int *)v6;
      do
      {
        if (sub_20C298B90(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v14, a1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v14 + 1, a1 + 1);
          sub_20C2999A0((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a3;
    }
    if (v8 >= 9)
    {
      v15 = (unint64_t)v8 >> 3;
      do
      {
        sub_20C299B58(a1, (uint64_t)v6, a4, v15);
        v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 - 8);
      }
      while (v15-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

uint64_t sub_20C2999A0(uint64_t result, int a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (int *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3
        && sub_20C298B90(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 8 * (v10 + 1)), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 2)))
      {
        v12 += 2;
        v11 = v13;
      }
      result = sub_20C298B90(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)v5);
      if ((result & 1) == 0)
      {
        v17 = *v5;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v5);
        v18 = v5[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v5 + 1);
        do
        {
          v14 = v12;
          sub_20BFD3EBC(v5, v12);
          v15 = v12 + 1;
          sub_20BFD3F10(v5 + 1, v12 + 1);
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (int *)(v6 + 8 * v16);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v16;
          }
          else if (sub_20C298B90(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8 * v16), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 2)))
          {
            v12 += 2;
          }
          else
          {
            v11 = v16;
          }
          v5 = v14;
        }
        while (!sub_20C298B90(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17));
        sub_20BFD3EBC(v14, &v17);
        sub_20BFD3F10(v15, &v18);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        return (uint64_t)sub_20BFD265C(&v17);
      }
    }
  }
  return result;
}

void sub_20C299B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

int *sub_20C299B58(int *result, uint64_t a2, int a3, uint64_t a4)
{
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int v14;

  if (a4 >= 2)
  {
    v7 = result;
    v13 = *result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(result);
    v14 = v7[1];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v7 + 1);
    v8 = sub_20C299C94(v7, a3, a4);
    v9 = v8;
    v10 = (int *)(a2 - 8);
    v11 = v8 + 1;
    if (v8 == (int *)(a2 - 8))
    {
      sub_20BFD3EBC(v8, &v13);
      sub_20BFD3F10(v11, &v14);
    }
    else
    {
      sub_20BFD3EBC(v8, (int *)(a2 - 8));
      v12 = (int *)(a2 - 4);
      sub_20BFD3F10(v11, v12);
      sub_20BFD3EBC(v10, &v13);
      sub_20BFD3F10(v12, &v14);
      sub_20C299D50(v7, (uint64_t)(v9 + 2), a3, ((char *)(v9 + 2) - (char *)v7) >> 3);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    return sub_20BFD265C(&v13);
  }
  return result;
}

void sub_20C299C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

int *sub_20C299C94(int *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[2 * v6 + 2];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && sub_20C298B90(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[2 * v6 + 2], (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      v10 = v11;
    }
    sub_20BFD3EBC(a1, v9);
    sub_20BFD3F10(a1 + 1, v9 + 1);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

_DWORD *sub_20C299D50(_DWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  _DWORD *v7;
  unint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = &result[2 * (v4 >> 1)];
    v10 = (int *)(a2 - 8);
    result = (_DWORD *)sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 8));
    if ((_DWORD)result)
    {
      v13 = *v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v10);
      v14 = *(_DWORD *)(a2 - 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 4));
      do
      {
        v11 = v9;
        sub_20BFD3EBC(v10, v9);
        v12 = v9 + 1;
        sub_20BFD3F10(v10 + 1, v9 + 1);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = &v7[2 * v8];
        v10 = v11;
      }
      while ((sub_20C298B90(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13) & 1) != 0);
      sub_20BFD3EBC(v11, &v13);
      sub_20BFD3F10(v12, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      return sub_20BFD265C(&v13);
    }
  }
  return result;
}

void sub_20C299E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C299E7C(_QWORD *result, _QWORD *a2, uint64_t a3, tbb::task_group_context *a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v9;

  if (result[1] < *result)
  {
    v5 = result;
    v9 = a4;
    v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(_BYTE *)(v6 - 11) = 1;
    *(_QWORD *)v6 = &off_24C52E838;
    v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 24) = v7;
    *(_QWORD *)(v6 + 32) = *a2;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 52) = 5;
    *(_QWORD *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 - 40)
                                                                                           + 16))(*(_QWORD *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_20C299F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::task *v10;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C299F50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 40;
  if (!v3)
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_20C299FBC(v2, a1, a1 + 8);
  return 0;
}

uint64_t sub_20C299FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16) < (unint64_t)((uint64_t)(*(_QWORD *)a3 - *(_QWORD *)(a3 + 8)) >> 3))
  {
    if (*(_QWORD *)a1 > 1uLL)
      goto LABEL_6;
    if (*(_QWORD *)a1)
    {
LABEL_4:
      if (*(_BYTE *)(a1 + 12))
      {
        --*(_BYTE *)(a1 + 12);
        *(_QWORD *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_20C29A06C(a2);
          if (*(_QWORD *)(a3 + 16) >= (unint64_t)((uint64_t)(*(_QWORD *)a3 - *(_QWORD *)(a3 + 8)) >> 3))
            break;
          if (*(_QWORD *)a1 <= 1uLL)
          {
            if (*(_QWORD *)a1)
              goto LABEL_4;
            return sub_20C29A144(a1, a2, (__int128 *)a3);
          }
        }
      }
    }
  }
  return sub_20C29A144(a1, a2, (__int128 *)a3);
}

uint64_t sub_20C29A06C(uint64_t a1)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(a1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  *(_BYTE *)(v3 - 11) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = &off_24C52E838;
  *(_QWORD *)(v3 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 16)
     + 8
     * ((((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >> 3)
       + (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >> 3 < 0)) >> 1);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(v3 + 40) = v6;
  *(_DWORD *)(v3 + 48) = 2;
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(a1 + 52);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

uint64_t sub_20C29A144(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  char v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10[16];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a3 + 2) < (unint64_t)((uint64_t)(*(_QWORD *)a3 - *((_QWORD *)a3 + 1)) >> 3)
    && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v10 = 0x10000;
    v11 = *a3;
    v12 = *((_QWORD *)a3 + 2);
    while (1)
    {
      result = (uint64_t)sub_20BF87AFC(v10, *(unsigned __int8 *)(a1 + 12));
      v6 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0)
        break;
      v9 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v9;
      v8 = v10[2];
      if (v10[2] < 2u)
      {
        v7 = v10[0];
        if (v10[v10[0] + 3] < v9
          && *((_QWORD *)&v11 + 3 * v10[0] + 2) < (unint64_t)((uint64_t)(*((_QWORD *)&v11 + 3 * v10[0])
                                                                             - *((_QWORD *)&v11 + 3 * v10[0] + 1)) >> 3))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      result = sub_20C29A314(a2, (uint64_t)&v11 + 24 * v10[1], v10[v10[1] + 3]);
      v8 = --v10[2];
      v10[1] = (v10[1] + 1) & 7;
LABEL_11:
      if (v8)
      {
        result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56));
        if (!(_DWORD)result)
          continue;
      }
      return result;
    }
    v7 = v10[0];
LABEL_6:
    result = sub_20C29A3E0((tbb::task *)(a2 + 32), (pxrInternal__aapl__pxrReserved__::SdfPath **)&v11 + 3 * v7);
    v8 = --v10[2];
    v10[0] = (v10[0] - 1) & 7;
    goto LABEL_11;
  }
  return sub_20C29A3E0((tbb::task *)(a2 + 32), (pxrInternal__aapl__pxrReserved__::SdfPath **)a3);
}

uint64_t sub_20C29A314(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &off_24C52E838;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(_BYTE *)(v7 + 52) = *(_BYTE *)(a1 + 52) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

uint64_t sub_20C29A3E0(tbb::task *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t v7;
  char v8;
  char *v9;

  result = tbb::task::self(a1);
  v6 = *a2;
  v5 = a2[1];
  if (v5 != v6)
  {
    v7 = result;
    v8 = 0;
    do
    {
      if ((v8 & 0x3F) == 0)
      {
        result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(v7 - 56));
        if ((result & 1) != 0)
          break;
      }
      v9 = (char *)v5 - 8;
      result = sub_20C298B90(*(_QWORD *)a1, v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 - 8));
      if ((_DWORD)result)
        return tbb::task_group_context::cancel_group_execution(*(tbb::task_group_context **)(v7 - 56));
      ++v8;
      v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8);
    }
    while (v9 + 16 != (char *)v6);
  }
  return result;
}

void sub_20C29A47C(__int128 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5;
  __int128 v6;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v8;
  _DWORD v9[32];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 1))
  {
    v9[0] = 1;
    v10 = 65539;
    v11 = 49;
    tbb::task_group_context::init((uint64_t)v9, a2, a3, a4);
    v8 = (tbb::task_group_context *)v9;
    v5 = tbb::internal::allocate_root_with_context_proxy::allocate(&v8, 0x38uLL);
    *(_BYTE *)(v5 - 11) = 1;
    *(_QWORD *)v5 = &off_24C52E880;
    v6 = *a1;
    *(_QWORD *)(v5 + 24) = *((_QWORD *)a1 + 2);
    *(_OWORD *)(v5 + 8) = v6;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v5);
    *(_DWORD *)(v5 + 48) = 0;
    *(_BYTE *)(v5 + 52) = 5;
    *(_QWORD *)(v5 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v5 - 40) + 16))(*(_QWORD *)(v5 - 40), v5, v5 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v9);
  }
}

void sub_20C29A578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29A5C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 40;
  if (!v3)
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_20C29A630(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

uint64_t sub_20C29A630(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 8) >= 0x1F4uLL)
  {
    if (*(_QWORD *)a1 <= 1uLL)
    {
      if (!*(_QWORD *)a1 || !*(_BYTE *)(a1 + 12))
        return sub_20C29A7C8(a1, (uint64_t)a2, (__int128 *)a3);
      --*(_BYTE *)(a1 + 12);
      *(_QWORD *)a1 = 0;
    }
    sub_20C29A700(a2);
    if (*(_QWORD *)(a3 + 8) >= 0x1F4uLL)
    {
      do
      {
        if (*(_QWORD *)a1 <= 1uLL)
        {
          if (!*(_QWORD *)a1 || !*(_BYTE *)(a1 + 12))
            return sub_20C29A7C8(a1, (uint64_t)a2, (__int128 *)a3);
          --*(_BYTE *)(a1 + 12);
          *(_QWORD *)a1 = 0;
        }
        sub_20C29A700(a2);
      }
      while (*(_QWORD *)(a3 + 8) > 0x1F3uLL);
    }
  }
  return sub_20C29A7C8(a1, (uint64_t)a2, (__int128 *)a3);
}

uint64_t sub_20C29A700(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (uint64_t)a1;
  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(v1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  *(_BYTE *)(v3 - 11) = 1;
  *(_QWORD *)v3 = &off_24C52E880;
  v4 = *(_QWORD *)(v1 + 8);
  v1 += 8;
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)(v3 + 16) = sub_20C29A994((uint64_t *)(v3 + 8), v1);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v1 + 16) + 8 * *(_QWORD *)(v1 + 8) + 8;
  v5 = *(_QWORD *)(v1 + 32) >> 1;
  *(_QWORD *)(v1 + 32) = v5;
  *(_QWORD *)(v3 + 40) = v5;
  *(_DWORD *)(v3 + 48) = 2;
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(v1 + 44);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

uint64_t sub_20C29A7C8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  uint64_t result;
  char v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unsigned __int8 v18[16];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a3 + 1);
  if (v3 >= 0x1F4 && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v18 = 0x10000;
    v19 = *a3;
    v20 = *((_QWORD *)a3 + 2);
    while (1)
    {
      result = (uint64_t)sub_20C29AD04(v18, *(unsigned __int8 *)(a1 + 12));
      v7 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v7 & 1) == 0)
        break;
      v9 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v9;
      v10 = v18[2];
      if (v18[2] < 2u)
      {
        v8 = v18[0];
        if (v18[v18[0] + 3] >= v9 || *((_QWORD *)&v19 + 3 * v18[0] + 1) <= 0x1F3uLL)
          goto LABEL_10;
      }
      else
      {
        result = sub_20C29ADFC(a2, (__int128 *)((char *)&v19 + 24 * v18[1]), v18[v18[1] + 3]);
        v10 = --v18[2];
        v18[1] = (v18[1] + 1) & 7;
      }
LABEL_14:
      if (v10)
      {
        result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56));
        if (!(_DWORD)result)
          continue;
      }
      return result;
    }
    v8 = v18[0];
LABEL_10:
    v12 = *((_QWORD *)&v19 + 3 * v8 + 1);
    v11 = *((_QWORD *)&v19 + 3 * v8 + 2);
    v13 = 126 - 2 * __clz(v12);
    if (v12)
      v14 = v13;
    else
      v14 = 0;
    result = sub_20C298824(v11, (int *)(v11 + 8 * v12), (uint64_t)&v17, v14, 1);
    v10 = --v18[2];
    v18[0] = (v18[0] - 1) & 7;
    goto LABEL_14;
  }
  v15 = 126 - 2 * __clz(v3);
  if (v3)
    v16 = v15;
  else
    v16 = 0;
  return sub_20C298824(*((_QWORD *)a3 + 2), (int *)(*((_QWORD *)a3 + 2) + 8 * v3), (uint64_t)v18, v16, 1);
}

uint64_t sub_20C29A994(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v17;

  v4 = *(int **)(a2 + 16);
  v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v4;
  v5 = sub_20C29AACC(a1, &v17, a2);
  if (v5)
  {
    v6 = v17;
    v7 = (int *)((char *)v17 + 8 * v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v17, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)v6 + 1, v7 + 1);
  }
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 8);
LABEL_4:
  v10 = (8 * v9) | 4;
  do
  {
    --v9;
    v11 = sub_20C298B90(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + v10 - 12));
    v10 -= 8;
  }
  while ((v11 & 1) != 0);
  v12 = 8 * v8;
  while (v9 != v8)
  {
    ++v8;
    v12 += 8;
    if ((sub_20C298B90(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + v12), (pxrInternal__aapl__pxrReserved__::SdfPath *)v4) & 1) == 0)
    {
      if (v9 == v8)
        break;
      v13 = (int *)((char *)v17 + v12);
      v14 = (int *)((char *)v17 + v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v13, v14 - 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v13 + 1, v14);
      goto LABEL_4;
    }
  }
  v15 = (int *)((char *)v17 + v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)((char *)v17 + v10 - 4), v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v15, v4 + 1);
  result = ~v9 + *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  return result;
}

uint64_t sub_20C29AACC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::SdfPath *v29;
  pxrInternal__aapl__pxrReserved__::SdfPath *v30;
  int v31;
  uint64_t v32;
  pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  pxrInternal__aapl__pxrReserved__::SdfPath *v36;

  v6 = *(_QWORD *)(a3 + 8) >> 3;
  v7 = v6;
  v8 = sub_20C298B90(*a1, *a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v6));
  v9 = *a1;
  v10 = *a2;
  if (v8)
  {
    if ((sub_20C298B90(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 16 * v6)) & 1) != 0)goto LABEL_9;
    v11 = *a1;
    v12 = *a2;
    v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 16 * v6);
  }
  else
  {
    if ((sub_20C298B90(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 16 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8 * v6)) & 1) != 0)goto LABEL_9;
    v11 = *a1;
    v13 = *a2;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 16 * v6);
  }
  if (sub_20C298B90(v11, v12, v13))
    v7 = 2 * v6;
  else
    v7 = 0;
LABEL_9:
  v14 = 4 * v6;
  v15 = sub_20C298B90(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 24 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 32 * v6));
  v16 = *a1;
  v17 = *a2;
  if (v15)
  {
    if ((sub_20C298B90(v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 32 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 40 * v6)) & 1) != 0)goto LABEL_17;
    v18 = *a1;
    v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 24 * v6);
    v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 40 * v6);
  }
  else
  {
    if ((sub_20C298B90(v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 40 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 32 * v6)) & 1) != 0)goto LABEL_17;
    v18 = *a1;
    v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 40 * v6);
    v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 24 * v6);
  }
  if (sub_20C298B90(v18, v19, v20))
    v14 = 5 * v6;
  else
    v14 = 3 * v6;
LABEL_17:
  v21 = 3 * v6;
  v22 = 6 * v6;
  v23 = 7 * v6;
  v24 = *(_QWORD *)(a3 + 8) - 1;
  v25 = sub_20C298B90(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 16 * v21), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v23));
  v26 = *a1;
  v27 = *a2;
  if (v25)
  {
    if ((sub_20C298B90(v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8 * v23), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8 * v24)) & 1) != 0)goto LABEL_25;
    v28 = *a1;
    v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v22);
    v30 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v24);
  }
  else
  {
    if ((sub_20C298B90(v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8 * v24), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8 * v23)) & 1) != 0)goto LABEL_25;
    v28 = *a1;
    v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v24);
    v30 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v22);
  }
  if (sub_20C298B90(v28, v29, v30))
    v23 = v24;
  else
    v23 = v22;
LABEL_25:
  v31 = sub_20C298B90(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v7), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v14));
  v32 = *a1;
  v33 = *a2;
  if (v31)
  {
    if ((sub_20C298B90(v32, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8 * v14), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8 * v23)) & 1) != 0)return v14;
    v34 = *a1;
    v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v7);
    v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v23);
  }
  else
  {
    if ((sub_20C298B90(v32, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8 * v23), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8 * v14)) & 1) != 0)return v14;
    v34 = *a1;
    v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v23);
    v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v7);
  }
  if (sub_20C298B90(v34, v35, v36))
    return v23;
  else
    return v7;
}

unsigned __int8 *sub_20C29AD04(unsigned __int8 *result, unsigned int a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;

  if (result[2] <= 7u)
  {
    v3 = result;
    v4 = result + 16;
    v5 = *result;
    v6 = result[v5 + 3];
    do
    {
      if (a2 <= v6)
        break;
      v7 = &v4[24 * v5];
      v9 = *((_QWORD *)v7 + 1);
      v8 = v7 + 8;
      if (v9 < 0x1F4)
        break;
      v10 = &v3[v5 + 3];
      *v3 = (v5 + 1) & 7;
      v11 = (uint64_t)&v4[24 * (((_BYTE)v5 + 1) & 7)];
      v12 = (uint64_t *)&v4[24 * v5];
      v13 = v12[2];
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_QWORD *)(v11 + 16) = v13;
      *v12 = *(_QWORD *)v11;
      result = (unsigned __int8 *)sub_20C29A994(v12, v11);
      *v8 = result;
      v12[2] = *(_QWORD *)(v11 + 16) + 8 * *(_QWORD *)(v11 + 8) + 8;
      v6 = *v10 + 1;
      *v10 = v6;
      v5 = *v3;
      v3[v5 + 3] = v6;
      v14 = ++v3[2];
    }
    while (v14 < 8);
  }
  return result;
}

uint64_t sub_20C29ADFC(uint64_t a1, __int128 *a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &off_24C52E880;
  v8 = *a2;
  *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v8;
  v9 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(_BYTE *)(v7 + 52) = *(_BYTE *)(a1 + 52) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

uint64_t sub_20C29AEC0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = a1[4];
  v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 32 * v4 + 4) < 0)
  {
LABEL_5:
    v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while (*(_QWORD *)(v3 + 32 * v4 + 8) != *a2)
    {
      v5 = (__int16)(v5 + 1);
      v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 32 * v4 + 4))
        goto LABEL_5;
    }
  }
  return v3 + 32 * v4;
}

unsigned int *sub_20C29AF1C(uint64_t IsTargetPath, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  unsigned int *i;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  if ((unsigned int *)IsTargetPath == a2)
    return a2;
  v5 = (unsigned int *)IsTargetPath;
  while (1)
  {
    v6 = *v5;
    v7 = *(_QWORD *)(*(_QWORD *)(a3 + 88) + 96);
    v8 = v6 >= (*(_QWORD *)(*(_QWORD *)(a3 + 88) + 104) - v7) >> 3
       ? (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsTargetPath)
       : (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 8 * v6);
    IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(v8);
    if ((IsTargetPath & 1) != 0)
      break;
    v5 += 3;
    if (v5 == a2)
      return a2;
  }
  if (v5 == a2)
    return a2;
  for (i = v5 + 3; i != a2; i += 3)
  {
    v10 = *i;
    v11 = *(_QWORD *)(*(_QWORD *)(a3 + 88) + 96);
    if (v10 >= (*(_QWORD *)(*(_QWORD *)(a3 + 88) + 104) - v11) >> 3)
      v12 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsTargetPath);
    else
      v12 = (uint64_t *)(v11 + 8 * v10);
    IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
    if ((IsTargetPath & 1) == 0)
    {
      v13 = *(_QWORD *)i;
      v5[2] = i[2];
      *(_QWORD *)v5 = v13;
      v5 += 3;
    }
  }
  return v5;
}

uint64_t sub_20C29AFF4(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C29B094((uint64_t *)(a1 + 8));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C29B080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C29B094(uint64_t *a1)
{
  uint64_t v2;
  float v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  int v23;

  v2 = *a1;
  sub_20C29B2E8((uint64_t)&v22, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateDataImpl main hash table");
  v3 = *(float *)(v2 + 68);
  v4 = vcvtps_u32_f32((float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1[1] + 8) - *(_QWORD *)a1[1]) >> 2)) / v3);
  v5 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 48) / v3);
  if (v5 <= v4)
    v6 = v4;
  else
    v6 = v5;
  sub_20C29B370(v2, v6);
  sub_20C29B2B8(a1[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1[1] + 8) - *(_QWORD *)a1[1]) >> 2));
  v8 = *(_QWORD *)a1[1];
  if (*(_QWORD *)(a1[1] + 8) != v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(v2 + 88);
    do
    {
      v12 = *(unsigned int *)(v8 + v9);
      v13 = *(_QWORD *)(v11 + 96);
      if (v12 >= (*(_QWORD *)(v11 + 104) - v13) >> 3)
        v14 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v7);
      else
        v14 = (uint64_t *)(v13 + 8 * v12);
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C29B6AC((uint64_t *)v2, v14);
      ++v10;
      v8 = *(_QWORD *)a1[1];
      v15 = *(_QWORD *)(a1[1] + 8);
      v9 += 12;
    }
    while (v10 != 0xAAAAAAAAAAAAAAABLL * ((v15 - v8) >> 2));
    if (v15 != v8)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = *(unsigned int *)(v8 + v16);
        v19 = *(_QWORD *)(v11 + 96);
        if (v18 >= (*(_QWORD *)(v11 + 104) - v19) >> 3)
          v20 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v7);
        else
          v20 = (uint64_t *)(v19 + 8 * v18);
        v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C29AEC0((_QWORD *)v2, v20, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v20 + 1)+ ((*((unsigned int *)v20 + 1)+ (unint64_t)*(unsigned int *)v20+ (*((unsigned int *)v20 + 1)+ (unint64_t)*(unsigned int *)v20)* (*((unsigned int *)v20 + 1)+ (unint64_t)*(unsigned int *)v20)) >> 1))));
        *(_QWORD *)(*(_QWORD *)a1[2] + 8 * v17++) = (char *)v7 + 16;
        v8 = *(_QWORD *)a1[1];
        v16 += 12;
      }
      while (v17 != 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1[1] + 8) - v8) >> 2));
    }
  }
  while (v23--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v22);
}

void sub_20C29B298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C29B2B8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_20C29B5AC((void **)a1, a2 - v2);
  }
}

uint64_t sub_20C29B2E8(uint64_t a1, char *a2, char *a3, char *a4)
{
  unsigned __int8 v5;
  int v6;
  _QWORD *v9;
  char *v10;
  char *v11;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(_QWORD *)a1 = v9;
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, v9, v10);
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a4, *(_DWORD **)a1, v11);
      v6 = 3;
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  return a1;
}

void sub_20C29B370(uint64_t a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD v10[9];
  void **v11;

  sub_20C297C80((uint64_t)&v9, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(unsigned int **)(a1 + 8);
  v4 = *(unsigned int **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = v3 + 2;
    v6 = (unint64_t)(v10[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6)
          v7 = bswap64(0x9E3779B97F4A7C55* (v5[1]+ ((v5[1] + (unint64_t)*v5 + (v5[1] + (unint64_t)*v5) * (v5[1] + (unint64_t)*v5)) >> 1)));
        else
          v7 = *(v5 - 2);
        sub_20C29B488(&v9, v9 & v7, 0, v7, (uint64_t)v5);
      }
      v8 = v5 + 6;
      v5 += 8;
    }
    while (v8 != v4);
  }
  v10[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v9, (uint64_t *)a1);
  v11 = (void **)v10;
  sub_20C297E90(&v11);
}

void sub_20C29B468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20C297E90((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C29B488(_QWORD *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10;
  int *v11;
  int v12;
  __int16 *v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  _DWORD *result;

  while (1)
  {
    v10 = a1[4];
    v11 = (int *)(v10 + 32 * a2);
    v13 = (__int16 *)(v11 + 1);
    v12 = *((__int16 *)v11 + 2);
    if (v12 >= a3)
      goto LABEL_4;
    if (v12 == -1)
      break;
    sub_20C29B55C(a5, (uint64_t)(v11 + 2));
    v14 = *v13;
    *v13 = a3;
    v15 = *v11;
    *v11 = a4;
    a3 = v14;
    a4 = v15;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  sub_20BFD38A4(v11 + 2, (_DWORD *)a5);
  v16 = v10 + 32 * a2;
  result = sub_20BFD38DC((_DWORD *)(v16 + 12), (_DWORD *)(a5 + 4));
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(a5 + 16);
  *v11 = a4;
  *v13 = a3;
  return result;
}

int *sub_20C29B55C(uint64_t a1, uint64_t a2)
{
  int *result;
  int v5;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v6;
  return result;
}

void sub_20C29B5AC(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      sub_20BDDF694();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_20BDDF6A8(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t sub_20C29B6AC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v6;
  int v7;
  void **v8;

  sub_20BFD6E54(&v6, a2);
  sub_20BFD6EA4(&v7, a2 + 1);
  v8 = 0;
  v4 = sub_20C29B74C(a1, &v6, (uint64_t)&v6);
  sub_20C297FD8(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  return v4;
}

void sub_20C29B738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C297FA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29B74C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *a1;
  v7 = a1[4];
  v8 = v5 & *a1;
  if (*(__int16 *)(v7 + 32 * v8 + 4) < 0)
  {
    LOWORD(v9) = 0;
LABEL_7:
    v11 = sub_20C29B8DC((uint64_t)a1);
    v12 = a1[4];
    if ((v11 & 1) != 0)
    {
      v8 = v5 & *a1;
      v13 = *(__int16 *)(v12 + 32 * v8 + 4);
      if (v13 < 0)
      {
        LOWORD(v9) = 0;
      }
      else
      {
        LOWORD(v9) = 0;
        do
        {
          v9 = (__int16)(v9 + 1);
          v8 = (v8 + 1) & *a1;
          v13 = *(__int16 *)(v12 + 32 * v8 + 4);
        }
        while (v9 <= v13);
      }
      v14 = (unsigned __int16)v13;
    }
    else
    {
      v14 = *(unsigned __int16 *)(v12 + 32 * v8 + 4);
    }
    if (v14 == 0xFFFF)
    {
      v15 = v12 + 32 * v8;
      sub_20BFD38A4((_DWORD *)(v15 + 8), (_DWORD *)a3);
      sub_20BFD38DC((_DWORD *)(v15 + 12), (_DWORD *)(a3 + 4));
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(v15 + 24) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)v15 = v5;
      *(_WORD *)(v15 + 4) = v9;
    }
    else
    {
      sub_20C29B9A0(a1, v8, v9, v5, a3);
    }
    ++a1[6];
    return a1[4] + 32 * v8;
  }
  else
  {
    LOWORD(v9) = 0;
    while (1)
    {
      result = v7 + 32 * v8;
      if (*(_QWORD *)(result + 8) == *(_QWORD *)a2)
        break;
      v9 = (__int16)(v9 + 1);
      v8 = (v8 + 1) & v6;
      if (v9 > *(__int16 *)(v7 + 32 * v8 + 4))
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_20C29B8DC(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C29B370(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C29B370(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

_DWORD *sub_20C29B9A0(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  int *v17;
  unsigned __int16 i;
  __int16 *v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  _DWORD *result;

  v10 = a1[4] + 32 * a2;
  sub_20C29B55C(a5, v10 + 8);
  v11 = *(_WORD *)(v10 + 4);
  *(_WORD *)(v10 + 4) = a3;
  v12 = *(_DWORD *)v10;
  *(_DWORD *)v10 = a4;
  v13 = *a1;
  v14 = *a1 & (a2 + 1);
  v15 = v11 + 1;
  v16 = a1[4];
  v17 = (int *)(v16 + 32 * v14);
  v19 = (__int16 *)(v17 + 1);
  for (i = *((_WORD *)v17 + 2); i != 0xFFFF; i = *((_WORD *)v17 + 2))
  {
    if (v15 > (__int16)i)
    {
      if (v15 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      sub_20C29B55C(a5, v16 + 32 * v14 + 8);
      v20 = *v19;
      *v19 = v15;
      v21 = *v17;
      *v17 = v12;
      v13 = *a1;
      v16 = a1[4];
      v15 = v20;
      v12 = v21;
    }
    v14 = v13 & (v14 + 1);
    ++v15;
    v17 = (int *)(v16 + 32 * v14);
    v19 = (__int16 *)(v17 + 1);
  }
  v22 = v16 + 32 * v14;
  sub_20BFD38A4((_DWORD *)(v22 + 8), (_DWORD *)a5);
  result = sub_20BFD38DC((_DWORD *)(v22 + 12), (_DWORD *)(a5 + 4));
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(v22 + 24) = *(_DWORD *)(a5 + 16);
  *v17 = v12;
  *v19 = v15;
  return result;
}

uint64_t *sub_20C29BAE0(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  sub_20C29BD3C(a1, v7, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  i = (uint64_t *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C29BDE4((uint64_t)v22, 0);
  return i;
}

void sub_20C29BD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C29BDE4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_20C29BD3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  char *result;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  v8 = operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = **a3;
  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_DWORD *)result + 6) = 0;
  v10 = (unsigned int *)(result + 24);
  v8[3] = result;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C29BDCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C29BDE4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C29BDE4(uint64_t a1, uint64_t a2)
{
  void ***v2;

  v2 = *(void ****)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C297FD8(v2 + 3);
    operator delete(v2);
  }
}

uint64_t sub_20C29BE30(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C29BED0((uint64_t *)(a1 + 8));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 56));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C29BEBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29BED0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  sub_20C29B2E8((uint64_t)&v17, "Usd", "Usd_CrateDataImpl::Open", "field data");
  v3 = *(uint64_t **)a1[4];
  result = (uint64_t)sub_20C29C0C4(v3, (a1[2] - a1[1]) >> 2);
  v5 = (unsigned int *)a1[1];
  if (v5 != (unsigned int *)a1[2])
  {
    v6 = 0;
    while (1)
    {
      v7 = *v5;
      v8 = *(_QWORD *)a1[3];
      if (v7 >= (*(_QWORD *)(a1[3] + 8) - v8) >> 4)
        break;
      v9 = *(_QWORD *)(v2 + 88);
      v10 = v8 + 16 * v7;
      v11 = *(unsigned int *)(v10 + 4);
      v12 = *(_QWORD *)(v9 + 120);
      if (v11 >= (*(_QWORD *)(v9 + 128) - v12) >> 3)
        break;
      sub_20BF32220((_QWORD *)(*v3 + v6), (_QWORD *)(v12 + 8 * v11));
      v13 = *(_QWORD *)(v10 + 8);
      v20 = 0;
      if ((v13 & 0x4000000000000000) != 0 || BYTE6(v13) == 46 || BYTE6(v13) == 41)
      {
        v14 = *(_QWORD *)(v2 + 88);
        v21[1] = 0;
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v14, v13, (uint64_t)v21);
        sub_20BF4B5D8(&v19, v21);
        sub_20BF4C2D8((uint64_t)v21);
      }
      else
      {
        v19 = v13;
        v20 = (char *)&off_24C52E948 + 3;
      }
      sub_20BF4B5D8((_QWORD *)(*v3 + v6 + 8), &v19);
      result = sub_20BF4C2D8((uint64_t)&v19);
      v15 = (unsigned int *)a1[2];
      v5 = (unsigned int *)(a1[1] + 4);
      a1[1] = (uint64_t)v5;
      v6 += 24;
      if (v5 == v15)
        goto LABEL_13;
    }
    *(_BYTE *)a1[5] = 1;
  }
LABEL_13:
  while (v18--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
  return result;
}

void sub_20C29C07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C29C0C4(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((result[1] - *result) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
    return (uint64_t *)sub_20C29C100(result, v4);
  if (!v3)
    return (uint64_t *)sub_20C0DE370((uint64_t)result, *result + 24 * a2);
  return result;
}

uint64_t sub_20C29C100(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      do
      {
        *v7 = 0;
        v7[2] = 0;
        v7 += 3;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)sub_20BDE4FF4(result, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[24 * v11];
    v15 = &v14[24 * a2];
    do
    {
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 2) = 0;
      v14 += 24;
    }
    while (v14 != v15);
    v16[2] = v15;
    sub_20C0DE978(a1, v16);
    return sub_20C0DEB28((uint64_t)v16);
  }
  return result;
}

void sub_20C29C22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0DEB28((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C29C240(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20C29C250(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C29C25C()
{
  return 1;
}

unint64_t sub_20C29C264(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20C29C284(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20C29C298(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20C29C2B0()
{
  return 0;
}

uint64_t sub_20C29C2BC(uint64_t *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<(a2, *a1);
}

void *sub_20C29C2CC()
{
  return &unk_24C52EA00;
}

uint64_t sub_20C29C2D8()
{
  return 0;
}

uint64_t sub_20C29C2E0()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C29C2EC()
{
  return 0;
}

uint64_t sub_20C29C2F4()
{
  return 0;
}

BOOL sub_20C29C2FC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC9BF0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C29C334(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C52EA00, a2, a3);
}

void *sub_20C29C354()
{
  return &unk_24C52EA00;
}

_QWORD *sub_20C29C364@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24C52E948 + 3;
  return result;
}

uint64_t sub_20C29C384(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t *Instance;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _QWORD v9[2];
  __int128 v10;
  uint64_t v11;
  char v12;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  v2 = *(_QWORD **)(a1 + 16);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 2);
  v9[0] = *(_QWORD *)(a1 + 8);
  v9[1] = v2;
  v10 = *(_OWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  sub_20C29C460(0, v3, 1uLL, v9, (uint64_t)&v12);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v5 = v8;
  v6 = atomic_load(Instance + 18);
  if (v5 < v6
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v8, *(_QWORD *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  return 0;
}

void sub_20C29C44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C29C460(unint64_t a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a3)
  {
    if (a1 < a2)
    {
      v10 = v5;
      v11 = v6;
      v7[2] = a3;
      v8 = (~a1 + a2) / a3 + 1;
      v9 = xmmword_20CA59F70;
      v7[0] = a4;
      v7[1] = a1;
      sub_20C29C4C0((__int128 *)&v8, (uint64_t)v7, a5, a4);
    }
  }
  else
  {
    tbb::internal::throw_exception_v4(3);
  }
}

void sub_20C29C4C0(__int128 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v10;
  _DWORD v11[32];
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 1) < *(_QWORD *)a1)
  {
    v11[0] = 1;
    v12 = 65539;
    v13 = 49;
    tbb::task_group_context::init((uint64_t)v11, a2, a3, a4);
    v10 = (tbb::task_group_context *)v11;
    v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v10, 0x48uLL);
    *(_BYTE *)(v6 - 11) = 1;
    *(_QWORD *)v6 = &off_24C52EA68;
    v7 = *a1;
    *(_QWORD *)(v6 + 24) = *((_QWORD *)a1 + 2);
    *(_OWORD *)(v6 + 8) = v7;
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(v6 + 48) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(v6 + 32) = v8;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 68) = 5;
    *(_QWORD *)(v6 + 56) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 - 40) + 16))(*(_QWORD *)(v6 - 40), v6, v6 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v11);
  }
}

void sub_20C29C5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29C620(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 56);
  v2 = a1 + 56;
  if (!v3)
  {
    *(_QWORD *)(a1 + 56) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 68);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 68) = v5 + 1;
      }
    }
  }
  sub_20C29C68C(v2, a1, (unint64_t *)(a1 + 8));
  return 0;
}

void sub_20C29C68C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a3[2] < *a3 - a3[1])
  {
    if (*(_QWORD *)a1 > 1uLL)
      goto LABEL_6;
    if (*(_QWORD *)a1)
    {
LABEL_4:
      if (*(_BYTE *)(a1 + 12))
      {
        --*(_BYTE *)(a1 + 12);
        *(_QWORD *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_20C29C73C(a2);
          if (a3[2] >= *a3 - a3[1])
            break;
          if (*(_QWORD *)a1 <= 1uLL)
          {
            if (*(_QWORD *)a1)
              goto LABEL_4;
            break;
          }
        }
      }
    }
  }
  sub_20C29C808(a1, a2, a3);
}

uint64_t sub_20C29C73C(uint64_t a1)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(a1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x48uLL);
  *(_BYTE *)(v3 - 11) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v3 = &off_24C52EA68;
  *(_QWORD *)(v3 + 8) = v4;
  v6 = v5 + ((unint64_t)(*(_QWORD *)(a1 + 8) - v5) >> 1);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 24) = v7;
  v8 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 32) = v8;
  v9 = *(_QWORD *)(a1 + 56) >> 1;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(v3 + 56) = v9;
  *(_DWORD *)(v3 + 64) = 2;
  *(_BYTE *)(v3 + 68) = *(_BYTE *)(a1 + 68);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

void sub_20C29C808(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  char v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9[16];
  __int128 v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a3[2] < *a3 - a3[1] && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v9 = 0x10000;
    v10 = *(_OWORD *)a3;
    v11 = a3[2];
    while (1)
    {
      sub_20C15C670(v9, *(unsigned __int8 *)(a1 + 12));
      v5 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v5 & 1) == 0)
        break;
      v8 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v8;
      v7 = v9[2];
      if (v9[2] < 2u)
      {
        v6 = v9[0];
        if (v9[v9[0] + 3] < v8
          && *((_QWORD *)&v10 + 3 * v9[0] + 2) < *((_QWORD *)&v10 + 3 * v9[0]) - *((_QWORD *)&v10 + 3 * v9[0] + 1))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      sub_20C29C9D8(a2, (uint64_t)&v10 + 24 * v9[1], v9[v9[1] + 3]);
      v7 = --v9[2];
      v9[1] = (v9[1] + 1) & 7;
LABEL_11:
      if (!v7 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56)))
        return;
    }
    v6 = v9[0];
LABEL_6:
    sub_20C29CAAC((_QWORD *)(a2 + 32), (unint64_t *)&v10 + 3 * v6);
    v7 = --v9[2];
    v9[0] = (v9[0] - 1) & 7;
    goto LABEL_11;
  }
  sub_20C29CAAC((_QWORD *)(a2 + 32), a3);
}

uint64_t sub_20C29C9D8(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x48uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &off_24C52EA68;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(v7 + 24) = v8;
  v9 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(v7 + 32) = v9;
  v10 = *(_QWORD *)(a1 + 56) >> 1;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(v7 + 56) = v10;
  *(_DWORD *)(v7 + 64) = 2;
  *(_BYTE *)(v7 + 68) = *(_BYTE *)(a1 + 68) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

_QWORD *sub_20C29CAAC(_QWORD *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  void **v13;

  v3 = *a2;
  v2 = a2[1];
  if (v2 < *a2)
  {
    v4 = result;
    v5 = result[2];
    v6 = result[1] + v5 * v2;
    do
    {
      v7 = *v4;
      v8 = *(_QWORD *)(**(_QWORD **)(*v4 + 16) + 8 * v6);
      v9 = **(_QWORD **)(*v4 + 8) + 12 * v6;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
      result = sub_20C126B10(*(_QWORD **)(v7 + 24), (unsigned int *)(v9 + 4));
      if (result)
      {
        v10 = result[3];
        if (v10)
        {
          v11 = (unsigned int *)(v10 + 24);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = *(void ***)v8;
        *(_QWORD *)v8 = v10;
        result = sub_20C297FD8(&v13);
      }
      else
      {
        atomic_store(0, *(unsigned __int8 **)(v7 + 32));
      }
      ++v2;
      v6 += v5;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_20C29CB7C(uint64_t a1)
{
  void *v2;

  sub_20C29CBB4(a1, *(void ****)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C29CBB4(uint64_t a1, void ***a2)
{
  void ***v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      sub_20C297FD8(v2 + 3);
      operator delete(v2);
      v2 = (void ***)v3;
    }
    while (v3);
  }
}

BOOL sub_20C29CBF0(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t *TargetPath;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL8 v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v15);
  TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(this);
  sub_20BFD6E54(&v14, TargetPath);
  sub_20BFD6EA4((_DWORD *)&v14 + 1, (_DWORD *)TargetPath + 1);
  sub_20C29CE1C((pxrInternal__aapl__pxrReserved__::VtValue *)&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, a1, 0);
  if (v18)
  {
    if ((v18 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
    if (*(_BYTE *)v5)
    {
      v7 = *(_QWORD **)(v5 + 8);
      v6 = *(_QWORD **)(v5 + 16);
      if (v7 != v6)
      {
        while (*v7 != v14)
        {
          if (++v7 == v6)
            goto LABEL_8;
        }
      }
    }
    else
    {
      v10 = *(_QWORD **)(v5 + 32);
      v9 = *(_QWORD **)(v5 + 40);
      if (v10 != v9)
      {
        while (*v10 != v14)
        {
          if (++v10 == v9)
          {
            v10 = *(_QWORD **)(v5 + 40);
            break;
          }
        }
      }
      if (v10 != v9)
        goto LABEL_21;
      v12 = *(_QWORD **)(v5 + 56);
      v11 = *(_QWORD **)(v5 + 64);
      if (v12 != v11)
      {
        while (*v12 != v14)
        {
          if (++v12 == v11)
          {
            v12 = *(_QWORD **)(v5 + 64);
            break;
          }
        }
      }
      if (v12 != v11)
      {
LABEL_21:
        v8 = 1;
        goto LABEL_22;
      }
      v7 = *(_QWORD **)(v5 + 80);
      v6 = *(_QWORD **)(v5 + 88);
      if (v7 != v6)
      {
        while (*v7 != v14)
        {
          if (++v7 == v6)
          {
LABEL_8:
            v7 = v6;
            break;
          }
        }
      }
    }
    v8 = v7 != v6;
  }
  else
  {
    v8 = 0;
  }
LABEL_22:
  sub_20BF4C2D8((uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_20BFD265C(&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  return v8;
}

void sub_20C29CDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  sub_20BF4C2D8((uint64_t)va2);
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C29CE1C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *__return_ptr a1@<X8>, pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, _QWORD *a3@<X0>, int *a4@<X2>)
{
  uint64_t *result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)a1 + 1) = 0;
  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this);
  if (!(_DWORD)result)
    goto LABEL_11;
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9)
    v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (sub_20C295E60(a3, this, (_QWORD *)v9 + 53, a1, 0))
  {
    v10 = 8;
  }
  else
  {
    v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v11)
      v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v10 = sub_20C295E60(a3, this, (_QWORD *)v11 + 7, a1, 0);
  }
  result = (uint64_t *)sub_20BFD6B4C(a1);
  if ((result & 1) == 0)
  {
    v12[1] = 0;
    sub_20BF4B5D8(a1, v12);
    result = (uint64_t *)sub_20BF4C2D8((uint64_t)v12);
LABEL_11:
    v10 = 0;
  }
  if (a4)
    *a4 = v10;
  return result;
}

void sub_20C29CF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29CF54(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_20C29AEC0((_QWORD *)a1, a2, a3);
  if (*(_QWORD *)(a1 + 32) + 32 * *(_QWORD *)(a1 + 40) == v4)
    return 0;
  sub_20C29CFA0((_DWORD *)a1, v4);
  result = 1;
  *(_BYTE *)(a1 + 73) = 1;
  return result;
}

_DWORD *sub_20C29CFA0(_DWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  _WORD *v12;

  v3 = result;
  if (*(__int16 *)(a2 + 4) != -1)
  {
    result = sub_20C297F70(a2);
    *(_WORD *)(a2 + 4) = -1;
  }
  --v3[6];
  v4 = v3[4];
  v5 = (a2 - v4) >> 5;
  v6 = (v5 + 1) & *v3;
  v7 = *(__int16 *)(v4 + 32 * v6 + 4);
  if (v7 >= 1)
  {
    do
    {
      v8 = (int *)(v4 + 32 * v6);
      v9 = v7 - 1;
      v10 = v4 + 32 * v5;
      v11 = *v8;
      sub_20BFD38A4((_DWORD *)(v10 + 8), v8 + 2);
      sub_20BFD38DC((_DWORD *)(v10 + 12), v8 + 3);
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v8 + 2);
      *((_QWORD *)v8 + 2) = 0;
      *(_DWORD *)(v10 + 24) = v8[6];
      *(_DWORD *)v10 = v11;
      *(_WORD *)(v10 + 4) = v9;
      v4 = v3[4];
      result = (_DWORD *)(v4 + 32 * v6);
      v12 = result + 1;
      if (*((__int16 *)result + 2) != -1)
      {
        result = sub_20C297F70((uint64_t)result);
        *v12 = -1;
        v4 = v3[4];
      }
      v5 = v6;
      v6 = *v3 & (v6 + 1);
      v7 = *(__int16 *)(v4 + 32 * v6 + 4);
    }
    while (v7 > 0);
  }
  return result;
}

uint64_t sub_20C29D0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 *v4;
  uint64_t v5;
  int v6;

  v2 = a2;
  sub_20C29CFA0((_DWORD *)a1, a2);
  if (*(__int16 *)(v2 + 4) == -1)
  {
    v4 = (__int16 *)(v2 + 36);
    v5 = v2 + 32;
    do
    {
      v2 = v5;
      if (*((_BYTE *)v4 - 30))
        break;
      v6 = *v4;
      v4 += 16;
      v5 += 32;
    }
    while (v6 == -1);
  }
  *(_BYTE *)(a1 + 73) = 1;
  return v2;
}

uint64_t sub_20C29D114(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v8;
  int v9;
  void **v10;
  int v11;

  sub_20BFD6E54(&v8, a2);
  sub_20BFD6EA4(&v9, a2 + 1);
  v10 = *(void ***)a3;
  *(_QWORD *)a3 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  v6 = sub_20C29B74C(a1, &v8, (uint64_t)&v8);
  sub_20C297FD8(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  return v6;
}

void sub_20C29D1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C297FA4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C29D1D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  int *v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  void **v17;
  char v18;
  char v19;
  void ***v20;
  int v22;
  int v23;
  void **v24;
  void **v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void ***v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (a3 != 8 && a3 != 1)
    return 1;
  v5 = *(_QWORD **)a1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v27);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  sub_20C29CE1C((pxrInternal__aapl__pxrReserved__::VtValue *)&v34, a2, v5, 0);
  if (!v35)
    goto LABEL_19;
  v6 = (v35 & 4) != 0 ? (*(uint64_t (**)(void ****))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(&v34) : (uint64_t)v34;
  if (*(_BYTE *)v6)
  {
    if (&v24 != (void ***)(v6 + 8))
      sub_20C0E29B0((uint64_t)&v24, *(_DWORD **)(v6 + 8), *(_DWORD **)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  }
  else
  {
    sub_20C13A924((uint64_t *)&v24, ((uint64_t)(*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56)) >> 3)+ ((uint64_t)(*(_QWORD *)(v6 + 40) - *(_QWORD *)(v6 + 32)) >> 3)+ ((uint64_t)(*(_QWORD *)(v6 + 88) - *(_QWORD *)(v6 + 80)) >> 3));
    v7 = *(_DWORD **)(v6 + 80);
    v8 = *(_DWORD **)(v6 + 88);
    v9 = *(_DWORD **)(v6 + 56);
    v10 = *(_DWORD **)(v6 + 64);
    sub_20C031408((uint64_t)&v22, *(_DWORD **)(v6 + 32), *(_DWORD **)(v6 + 40), (int *)v24);
    sub_20C031408((uint64_t)&v22, v9, v10, v11);
    sub_20C031408((uint64_t)&v22, v7, v8, v12);
    v13 = 126 - 2 * __clz(v25 - v24);
    v14 = v25 == v24 ? 0 : v13;
    sub_20C028540((uint64_t)v24, (int *)v25, (uint64_t)&v22, v14, 1);
    v15 = sub_20C29D4D8((int *)v24, (int *)v25);
    sub_20C11D784((uint64_t)&v24, v15, (int *)v25);
  }
  v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v24;
  v17 = v25;
  if (v24 == v25)
  {
LABEL_19:
    v18 = 1;
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v16, &v22);
      v18 = (*(uint64_t (**)(_QWORD, _QWORD, int *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), &v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_20BFD265C(&v22);
      v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 + 8);
      if (v16 == (const pxrInternal__aapl__pxrReserved__::SdfPath *)v17)
        v19 = 0;
      else
        v19 = v18;
    }
    while ((v19 & 1) != 0);
  }
  v20 = (void ***)sub_20BF4C2D8((uint64_t)&v34);
  v34 = &v24;
  sub_20BFD6F90(v20);
  v24 = (void **)&v33;
  sub_20BFD6F90(&v24);
  v24 = (void **)&v32;
  sub_20BFD6F90(&v24);
  v24 = (void **)&v31;
  sub_20BFD6F90(&v24);
  v24 = (void **)&v30;
  sub_20BFD6F90(&v24);
  v24 = (void **)&v29;
  sub_20BFD6F90(&v24);
  v24 = (void **)&v28;
  sub_20BFD6F90(&v24);
  return (v18 & 1) != 0;
}

void sub_20C29D46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20BF4C2D8(v2 - 88);
  *(_QWORD *)(v2 - 88) = va;
  sub_20BFD6F90((void ***)(v2 - 88));
  sub_20BFD6A50((void **)va1);
  _Unwind_Resume(a1);
}

int *sub_20C29D4D8(int *a1, int *a2)
{
  int *result;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;

  result = a2;
  if (a1 != a2)
  {
    v5 = a1 + 2;
    do
    {
      if (v5 == a2)
        return a2;
      v6 = *((_QWORD *)v5 - 1);
      v7 = *(_QWORD *)v5;
      v5 += 2;
    }
    while (v6 != v7);
    v8 = v5 - 4;
    while (v5 != a2)
    {
      if (*(_QWORD *)v8 != *(_QWORD *)v5)
      {
        sub_20BFD3EBC(v8 + 2, v5);
        sub_20BFD3F10(v8 + 3, v5 + 1);
        v8 += 2;
      }
      v5 += 2;
    }
    return v8 + 2;
  }
  return result;
}

void sub_20C29D57C(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18[2];
  char *v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if (sub_20C29DAF0(a2))
  {
    v18[0] = 0;
    v18[1] = 0;
    v17 = (uint64_t *)v18;
    v6 = *((_QWORD *)a2 + 1);
    if ((v6 & 4) != 0)
      v7 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v7 = *(_QWORD **)a2;
    v8 = (uint64_t *)v7[1];
    v9 = *v8;
    if (v8[1] != *v8)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      do
      {
        if (*v7)
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetTimeSampleValueImpl(*(_QWORD *)(a1 + 88), (uint64_t)v7, v12, &v19);
        else
          sub_20BF4C6D0(&v19, (_QWORD *)(v7[2] + v10));
        if (sub_20C29DA78((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
        {
          v13 = *(_QWORD *)(a1 + 88);
          if ((v20 & 4) != 0)
            v14 = (uint64_t *)(*(uint64_t (**)(char **))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
          else
            v14 = (uint64_t *)&v19;
          v15 = *v14;
          v21[1] = 0;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v13, v15, (uint64_t)v21);
        }
        else
        {
          sub_20BF4C6D0(v21, &v19);
        }
        sub_20C29DB68(&v17, (double *)(v9 + v11), (uint64_t *)(v9 + v11), v21);
        sub_20BF4C2D8((uint64_t)v21);
        sub_20BF4C2D8((uint64_t)&v19);
        ++v12;
        v16 = (uint64_t *)v7[1];
        v9 = *v16;
        v11 += 8;
        v10 += 16;
      }
      while (v12 != (v16[1] - *v16) >> 3);
    }
    sub_20C0E68EC((uint64_t)&v17, a3);
    sub_20BFED2B4((uint64_t)&v17, v18[0]);
  }
  else
  {
    sub_20BF4C6D0(a3, a2);
  }
}

void sub_20C29D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20BFED2B4((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20C29D7A8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void **v6[3];
  char v7[8];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void ***v14;

  if (!sub_20C1B1F04(a1))
  {
    sub_20BF4C6D0(a2, a1);
    return;
  }
  v4 = *((_QWORD *)a1 + 1);
  if ((v4 & 4) != 0)
    v5 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v5 = *(_QWORD *)a1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v7);
  if (*(char *)(v5 + 23) < 0)
  {
    if (*(_QWORD *)(v5 + 8))
      goto LABEL_6;
LABEL_9:
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit((unsigned __int8 *)v7);
    goto LABEL_10;
  }
  if (!*(_BYTE *)(v5 + 23))
    goto LABEL_9;
LABEL_6:
  sub_20C29DC5C(v6, 1uLL, v5);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems((unsigned __int8 *)v7, (std::string **)v6);
  v14 = v6;
  sub_20C021818((void ***)&v14);
LABEL_10:
  sub_20C02CA4C(v7, a2);
  v6[0] = (void **)&v13;
  sub_20C021818(v6);
  v6[0] = (void **)&v12;
  sub_20C021818(v6);
  v6[0] = (void **)&v11;
  sub_20C021818(v6);
  v6[0] = (void **)&v10;
  sub_20C021818(v6);
  v6[0] = (void **)&v9;
  sub_20C021818(v6);
  v6[0] = (void **)&v8;
  sub_20C021818(v6);
}

void sub_20C29D8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 24) = v5;
  sub_20C021818((void ***)(v6 - 24));
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C29D90C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void ***v7;
  uint64_t v8;
  _DWORD *v10[3];
  void **v11[3];
  void ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_20C29CE1C((pxrInternal__aapl__pxrReserved__::VtValue *)&v13, a2, a1, 0);
  v5 = v14;
  if (a4 && v14)
  {
    if ((v14 & 4) != 0)
      v6 = (*(uint64_t (**)(uint64_t *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&v13);
    else
      v6 = v13;
    memset(v10, 0, sizeof(v10));
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(v6, (uint64_t *)v10, (uint64_t)v11);
    v7 = v12;
    if (v12 == v11)
    {
      v8 = 4;
      v7 = v11;
    }
    else
    {
      if (!v12)
      {
LABEL_10:
        sub_20C29DD0C(a4, v10);
        v11[0] = (void **)v10;
        sub_20BFD6F90(v11);
        goto LABEL_11;
      }
      v8 = 5;
    }
    ((void (*)(void))(*v7)[v8])();
    goto LABEL_10;
  }
LABEL_11:
  sub_20BF4C2D8((uint64_t)&v13);
  return v5 != 0;
}

void sub_20C29DA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29DA78(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC9BF0 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, (const std::type_info *)&unk_24C52EA00);
}

uint64_t sub_20C29DAF0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC9D87 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C52EAA0);
}

uint64_t *sub_20C29DB68(uint64_t **a1, double *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  double v11;
  double v12;
  uint64_t *v13;
  _QWORD v15[2];
  char v16;

  v8 = a1 + 1;
  v7 = a1[1];
  v9 = a1 + 1;
  v10 = a1 + 1;
  if (v7)
  {
    v11 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v12 = *((double *)v7 + 4);
        if (v11 >= v12)
          break;
        v7 = (uint64_t *)*v7;
        v9 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v12 >= v11)
        break;
      v7 = (uint64_t *)v7[1];
      if (!v7)
      {
        v9 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v13 = (uint64_t *)operator new(0x38uLL);
    v15[1] = v8;
    v13[4] = *a3;
    sub_20BF4C200(v13 + 5, a4);
    v16 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v10, v9, v13);
    v15[0] = 0;
    sub_20BFED270((uint64_t)v15, 0);
    return v13;
  }
  return (uint64_t *)v10;
}

_QWORD *sub_20C29DC5C(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  int v4;
  __n128 *v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;

  a1[2] = 0;
  v4 = (_DWORD)a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    sub_20C02CC00(a1, a2);
    v7 = (__n128 *)a1[1];
    v8 = 3 * a2;
    v9 = &v7[3 * a2];
    v10 = 16 * v8;
    do
    {
      sub_20C02CCF8(v4, v7, a3);
      v7 += 3;
      v10 -= 48;
    }
    while (v10);
    a1[1] = v9;
  }
  return a1;
}

void sub_20C29DCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C021818(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C29DD0C(uint64_t a1, _DWORD **a2)
{
  int v4;
  uint64_t v5;

  v4 = strcmp((const char *)(0x800000020CAB11D8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(a1 + 25) = 1;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    if ((_DWORD **)v5 != a2)
      sub_20C0E29B0(v5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  }
  return v4 == 0;
}

BOOL sub_20C29DD90(int a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  void ***v7;
  uint64_t v8;
  _DWORD *v10[3];
  void **v11[3];
  void ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_20C29CE1C(&v13, a1, a2);
  v5 = v14;
  if (a4 && v14)
  {
    if ((v14 & 4) != 0)
      v6 = (*(uint64_t (**)(uint64_t *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&v13);
    else
      v6 = v13;
    memset(v10, 0, sizeof(v10));
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(v6, (uint64_t *)v10, (uint64_t)v11);
    v7 = v12;
    if (v12 == v11)
    {
      v8 = 4;
      v7 = v11;
    }
    else
    {
      if (!v12)
      {
LABEL_10:
        sub_20C0E4D08(a4, v10);
        v11[0] = (void **)v10;
        sub_20BFD6F90(v11);
        goto LABEL_11;
      }
      v8 = 5;
    }
    ((void (*)(void))(*v7)[v8])();
    goto LABEL_10;
  }
LABEL_11:
  sub_20BF4C2D8((uint64_t)&v13);
  return v5 != 0;
}

void sub_20C29DE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_20C29DEFC@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  char *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char **v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v28;
  char *v29;
  _OWORD v30[2];
  void **v31;

  if (!sub_20BFEB19C(a1))
    return (void **)sub_20BF4C6D0(a2, a1);
  v28 = 0;
  v4 = (char *)operator new(0x20uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  *((_DWORD *)v4 + 6) = 0;
  v5 = (unsigned int *)(v4 + 24);
  v29 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  memset(v30, 0, sizeof(v30));
  v7 = *((_QWORD *)a1 + 1);
  if ((v7 & 4) != 0)
  {
    v8 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(a1);
    v4 = v29;
  }
  else
  {
    v8 = *(_QWORD **)a1;
  }
  sub_20BE69DCC((void **)v4, v8[2]);
  sub_20C29E31C(v30, v8[2]);
  v11 = (_QWORD *)*v8;
  v9 = v8 + 1;
  v10 = v11;
  if (v11 != v9)
  {
    do
    {
      v12 = (char **)v29;
      v13 = (_QWORD *)*((_QWORD *)v29 + 1);
      v14 = *((_QWORD *)v29 + 2);
      if ((unint64_t)v13 >= v14)
      {
        v16 = *(_QWORD **)v29;
        v17 = ((uint64_t)v13 - *(_QWORD *)v29) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_20BDDF694();
        v19 = v14 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_20BDDF6A8((uint64_t)(v29 + 16), v20);
          v16 = *(_QWORD **)v29;
          v13 = (_QWORD *)*((_QWORD *)v29 + 1);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v17];
        *(_QWORD *)v22 = v10[4];
        v15 = v22 + 8;
        while (v13 != v16)
        {
          v23 = *--v13;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        *v12 = v22;
        v12[1] = v15;
        v12[2] = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v13 = v10[4];
        v15 = (char *)(v13 + 1);
      }
      v12[1] = v15;
      sub_20C29E3AC(v30, v10 + 5);
      v24 = (_QWORD *)v10[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v10[2];
          v26 = *v25 == (_QWORD)v10;
          v10 = v25;
        }
        while (!v26);
      }
      v10 = v25;
    }
    while (v25 != v9);
  }
  sub_20C29E4BC(&v28, a2);
  v31 = (void **)v30;
  sub_20BF8CA20(&v31);
  return sub_20C020410((void **)&v29);
}

void sub_20C29E134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C29E4FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C29E150(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  void *__p[2];
  char v13;
  int v14;
  _DWORD v15[5];

  if (!sub_20BFE45A0(a1))
    goto LABEL_16;
  v4 = *((_QWORD *)a1 + 1);
  v5 = (v4 & 4) != 0
     ? (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1)
     : *(_QWORD *)a1;
  if (!*(_BYTE *)v5)
    goto LABEL_16;
  v6 = *(_QWORD *)(v5 + 8);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 16) - v6) >> 4);
  if (v7 == 1)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      if (!*(_QWORD *)(v6 + 8))
        goto LABEL_16;
    }
    else if (!*(_BYTE *)(v6 + 23))
    {
      goto LABEL_16;
    }
    a2[1] = &off_24C52A340;
    sub_20C1980D0(a2, (__int128 *)v6);
    return;
  }
  if (v7)
  {
LABEL_16:
    sub_20BF4C6D0(a2, a1);
    return;
  }
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v9 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v8, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, v10, &v9, v8);
  a2[1] = &off_24C52A340;
  sub_20C1980D0(a2, (__int128 *)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
  sub_20BFD265C(&v14);
  if (v13 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_20BFD265C(&v9);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
}

void sub_20C29E2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_20C02CDE4((uint64_t)&a18);
  sub_20BFD1A18(&a11);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29E31C(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDEA2F0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_20BFC397C(a1, v7);
    return sub_20BFC3A00((uint64_t)v7);
  }
  return result;
}

void sub_20C29E398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFC3A00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29E3AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20BDEA2F0(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[16 * v10];
    v18 = &v14[16 * v13];
    sub_20BF4C6D0(v16, a2);
    v17 = v16 + 16;
    sub_20BFC397C(a1, &v15);
    v9 = a1[1];
    result = sub_20BFC3A00((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_20BF4C6D0(*(_QWORD **)(v4 - 8), a2);
    v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_20C29E49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C29E4BC@<X0>(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((_QWORD *)a2 + 1) = 0;
  return sub_20C29E53C(a2, a1);
}

void sub_20C29E4E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29E4FC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 16);
  sub_20BF8CA20(&v3);
  sub_20C020410((void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20C29E53C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int *v9;
  _OWORD v10[2];
  void **v11;

  if ((sub_20C29DAF0(a1) & 1) == 0)
  {
    v8 = 0;
    v4 = (unsigned int *)operator new(0x20uLL);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    v9 = v4;
    v4[6] = 0;
    v5 = v4 + 6;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    memset(v10, 0, sizeof(v10));
    sub_20C29E5FC(a1, &v8);
    v11 = (void **)v10;
    sub_20BF8CA20(&v11);
    sub_20C020410((void **)&v9);
  }
  return sub_20C29E6C4(a1, a2);
}

void sub_20C29E5E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C29E4FC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C29E5FC(_QWORD *a1, _QWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C52EAB0;
  sub_20C29ED10(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C29E68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

uint64_t *sub_20C29E6C4(_QWORD *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (uint64_t *)sub_20C29ED78(a1);
  v4 = *result;
  v5 = result[1];
  v6 = a2[1];
  *result = *a2;
  result[1] = v6;
  *a2 = v4;
  a2[1] = v5;
  v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  v8 = result[3];
  result[3] = a2[3];
  a2[3] = v8;
  v9 = result[4];
  v10 = result[5];
  v11 = a2[5];
  result[4] = a2[4];
  result[5] = v11;
  a2[4] = v9;
  a2[5] = v10;
  return result;
}

uint64_t *sub_20C29E724(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***sub_20C29E74C(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C29E8A8(a1);
}

uint64_t sub_20C29E75C()
{
  return 1;
}

unint64_t sub_20C29E764(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = (uint64_t)(*a1 + 2);
  v4 = *a1 + 5;
  v6 = 0;
  v7 = 0;
  sub_20C29E914((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

uint64_t sub_20C29E7C0(uint64_t *a1, uint64_t *a2)
{
  return sub_20C29EAB8(*a1, *a2);
}

uint64_t sub_20C29E7CC(uint64_t *a1, uint64_t a2)
{
  return sub_20C29EAB8(*a1, a2);
}

uint64_t sub_20C29E7D8()
{
  return 0;
}

_QWORD *sub_20C29E7E4(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<(a2);
}

void *sub_20C29E7F4()
{
  return &unk_24C52EAA0;
}

uint64_t sub_20C29E800()
{
  return 0;
}

uint64_t sub_20C29E808()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C29E814()
{
  return 0;
}

uint64_t sub_20C29E81C()
{
  return 0;
}

BOOL sub_20C29E824(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC9D87 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C29E85C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52EAA0, a2, a3);
}

void *sub_20C29E87C()
{
  return &unk_24C52EAA0;
}

uint64_t sub_20C29E888(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C29E890@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *a1;
  a2[1] = &off_24C52EAB0;
  return sub_20C29ED10(a2, v2);
}

void ***sub_20C29E8A8(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 6);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 2;
      sub_20BF8CA20(&v7);
      sub_20C020410(v2 + 1);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20C29E914(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20C29E950(a1, a3, a4, a5);
}

uint64_t sub_20C29E950(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7;
  char v9;

  v7 = sub_20C29EA4C((uint64_t)&v9, *a2);
  if (*(_BYTE *)(a1 + 8))
    v7 += (*(_QWORD *)a1 + v7 + (*(_QWORD *)a1 + v7) * (*(_QWORD *)a1 + v7)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v7;
  return sub_20C29E9C8(a1, a3, a4);
}

uint64_t sub_20C29E9C8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::VtValue *v9;
  uint64_t v10;

  v5 = result;
  v6 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  v7 = *(_QWORD *)(a2 + 8) - (_QWORD)v6;
  if (v7)
  {
    v8 = v7 >> 4;
    do
    {
      --v8;
      v9 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
      result = sub_20BF4CF7C(v5, v6);
      v6 = v9;
    }
    while (v8);
  }
  v10 = *a3;
  if (*(_BYTE *)(v5 + 8))
    v10 += (unint64_t)(*(_QWORD *)v5 + v10 + (*(_QWORD *)v5 + v10) * (*(_QWORD *)v5 + v10)) >> 1;
  else
    *(_BYTE *)(v5 + 8) = 1;
  *(_QWORD *)v5 = v10;
  return result;
}

unint64_t sub_20C29EA4C(uint64_t a1, uint64_t a2)
{
  double *v2;
  double v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;

  v2 = *(double **)a2;
  v3 = 0.0;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4)
  {
    v5 = 0;
    v6 = v4 >> 3;
    do
    {
      v7 = *v2++;
      v8 = v7;
      if (v7 == 0.0)
        v8 = 0.0;
      if (v5)
      {
        *(_QWORD *)&v3 = *(_QWORD *)&v8
                       + ((*(_QWORD *)&v3
                         + *(_QWORD *)&v8
                         + (*(_QWORD *)&v3 + *(_QWORD *)&v8) * (*(_QWORD *)&v3 + *(_QWORD *)&v8)) >> 1);
      }
      else
      {
        v5 = 1;
        v3 = v8;
      }
      --v6;
    }
    while (v6);
  }
  return bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)&v3);
}

uint64_t sub_20C29EAB8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  std::type_info *v8;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  result = sub_20C29EB5C((double ***)(a1 + 8), (double ***)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  v6 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 16);
  v7 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 24);
  v8 = *(std::type_info **)(a2 + 16);
  if (v7 - v6 != *(_QWORD *)(a2 + 24) - (_QWORD)v8)
    return 0;
  while (v6 != v7)
  {
    result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v6, v8, v5);
    if (!(_DWORD)result)
      return result;
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
    ++v8;
  }
  return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
}

BOOL sub_20C29EB5C(double ***a1, double ***a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  if (*a1 == *a2)
    return 1;
  v3 = **a1;
  v2 = (*a1)[1];
  v4 = **a2;
  if ((char *)v2 - (char *)v3 != (char *)(*a2)[1] - (char *)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 1;
  do
  {
    v6 = *v4++;
    result = *(v5 - 1) == v6;
    v8 = *(v5 - 1) != v6 || v5 == v2;
    ++v5;
  }
  while (!v8);
  return result;
}

uint64_t sub_20C29EBC0(_QWORD **a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  unsigned int v5;
  void **v7;

  v2 = atomic_load((unsigned int *)*a1 + 12);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x38uLL);
    sub_20C29EC4C((uint64_t)v3, *a1);
    v4 = (unsigned int *)(v3 + 48);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = (void **)*a1;
    *a1 = v3;
    sub_20C29E8A8(&v7);
  }
  return (uint64_t)*a1;
}

void sub_20C29EC38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29EC4C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 24);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_20BFC31F4((_QWORD *)(a1 + 16), a2[2], a2[3], (uint64_t)(a2[3] - a2[2]) >> 4);
  *(_QWORD *)(a1 + 40) = a2[5];
  atomic_store(0, (unsigned int *)(a1 + 48));
  return a1;
}

void sub_20C29ECCC(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C020410(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29ECE0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20C29ED10(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (char *)operator new(0x38uLL);
  result = sub_20C29EC4C((uint64_t)v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)(v4 + 48);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C29ED64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29ED78(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C29EBC0((_QWORD **)a1);
}

void ***sub_20C29EE08(uint64_t ***a1)
{
  char *v2;
  uint64_t **v3;
  unsigned int *v4;
  unsigned int v5;
  void **v7;

  v2 = (char *)operator new(0x20uLL);
  v3 = *a1;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = 0;
  sub_20C0E6B80((uint64_t *)v2, *v3, v3[1], 0xAAAAAAAAAAAAAAABLL * (v3[1] - *v3));
  *((_DWORD *)v2 + 6) = 0;
  v4 = (unsigned int *)(v2 + 24);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  v7 = (void **)*a1;
  *a1 = (uint64_t **)v2;
  return sub_20C297FD8(&v7);
}

void sub_20C29EE8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C29EEA0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BDE4FF4(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (uint64_t *)&v12[24 * v5];
  v18 = &v12[24 * v11];
  sub_20C29EFAC(v16, a2, a3);
  v17 = v16 + 3;
  sub_20C0DE978(a1, &v15);
  v13 = a1[1];
  sub_20C0DEB28((uint64_t)&v15);
  return v13;
}

void sub_20C29EF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0DEB28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C29EFAC(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF4C6D0(a1 + 1, a3);
  return a1;
}

void sub_20C29F030(_QWORD *a1@<X0>, double **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  int v8;
  double *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  double *v15;
  double **v16;
  uint64_t v17;
  double *v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = a1[4];
  v4 = a1[5];
  v6 = 0;
  if (v4)
  {
    v7 = (__int16 *)(v5 + 4);
    while (1)
    {
      v8 = *v7;
      v7 += 16;
      if (v8 != -1)
        break;
      if (v4 == ++v6)
        return;
    }
  }
  if (v6 != v4)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5 + 32 * v4;
    v12 = v5 + 32 * v6;
    do
    {
      v13 = v10;
      v14 = v9;
      v9 = *a2;
      v15 = a2[1];
      v10 = a2[2];
      a2[1] = v14;
      a2[2] = v13;
      *a2 = v14;
      v16 = (double **)sub_20C29F158(a1, (unsigned int *)(v12 + 8));
      sub_20C29F348(v9, v15, *v16, v16[1], (uint64_t)a2, &v18);
      v17 = v12 + 32;
      do
      {
        v12 = v17;
        if (*(_BYTE *)(v17 - 26))
          break;
        v17 += 32;
      }
      while (*(__int16 *)(v12 + 4) == -1);
    }
    while (v12 != v11);
    if (v9)
      operator delete(v9);
  }
}

void sub_20C29F130(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  if (v2)
    operator delete(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C29F158(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned __int8 v16;
  _QWORD v18[4];
  char v19;
  _BYTE v20[96];

  v4 = a1[11];
  v5 = (_QWORD *)(v4 + 6512);
  if (*(char *)(v4 + 6535) < 0)
    v5 = (_QWORD *)*v5;
  v18[0] = "usd/crateData.cpp";
  v18[1] = "_ListTimeSamplesForPath";
  v18[2] = 931;
  v18[3] = "const std::vector<double> &pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::_ListTimeSamplesForPath(const"
           " SdfPath &) const";
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v20, v5, v18);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v6)
    v6 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  v7 = sub_20C29AEC0(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v7)
    goto LABEL_15;
  v8 = *(uint64_t **)(v7 + 16);
  v9 = *v8;
  v10 = v8[1] - *v8;
  if (!v10)
    goto LABEL_15;
  v11 = v10 / 24;
  v12 = (uint64_t *)(v9 + 8);
  while ((*(v12 - 1) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8))
  {
    v12 += 3;
    if (!--v11)
      goto LABEL_15;
  }
  if (sub_20C29DAF0((pxrInternal__aapl__pxrReserved__::VtValue *)v12))
  {
    v13 = v12[1];
    if ((v13 & 4) != 0)
      v14 = (*(uint64_t (**)(uint64_t *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v12);
    else
      v14 = *v12;
    v15 = *(uint64_t **)(v14 + 8);
  }
  else
  {
LABEL_15:
    v16 = atomic_load((unsigned __int8 *)&qword_25473C860);
    if ((v16 & 1) != 0)
    {
      v15 = &qword_25473C848;
    }
    else
    {
      v15 = &qword_25473C848;
      if (__cxa_guard_acquire(&qword_25473C860))
      {
        qword_25473C848 = 0;
        unk_25473C850 = 0;
        qword_25473C858 = 0;
        __cxa_atexit((void (*)(void *))sub_20C29ECE0, &qword_25473C848, &dword_20BDBC000);
        __cxa_guard_release(&qword_25473C860);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v20);
  return v15;
}

void sub_20C29F334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)va);
  _Unwind_Resume(a1);
}

double *sub_20C29F348@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t a5@<X4>, double **a6@<X8>)
{
  double *v8;
  double *result;
  double *v12;
  uint64_t v13;

  v8 = a1;
  v13 = a5;
  if (a1 == a2)
  {
LABEL_8:
    result = (double *)sub_20C29F510(a3, a4, a5);
    a4 = result;
  }
  else
  {
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        a3 += *v8 >= *a3;
        sub_20C29F424(&v13, v8++);
      }
      else
      {
        sub_20C29F424(&v13, a3++);
      }
      if (v8 == a2)
      {
        a5 = v13;
        v8 = a2;
        goto LABEL_8;
      }
    }
    result = (double *)sub_20C29F510(v8, a2, v13);
    v8 = result;
  }
  *a6 = v8;
  a6[1] = a4;
  a6[2] = v12;
  return result;
}

uint64_t *sub_20C29F424(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_20BDDF694();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_20BDDF6A8((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

_QWORD *sub_20C29F510(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    sub_20C29F424(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t sub_20C29F570(uint64_t a1, double *a2, double *a3)
{
  double *v4;
  double *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (double *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C0E7A88((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C29F5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C29F5F0(uint64_t a1, double *a2, double *a3)
{
  double *v4;
  double *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (double *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C0E7A88((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C29F658(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_20C29F670(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      sub_20BDDF694();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_20BDDF6A8(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_20BDDF6A8(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_20C28C144((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_20C29F878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C29F8B0(_QWORD *a1, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  _QWORD v40[5];

  v4 = a2;
  v6 = a1[1];
  v8 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  if (v6 >= v7)
  {
    v9 = (char *)*a1;
    v10 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v10 >> 60)
      sub_20BDDF694();
    v11 = a2 - v9;
    v12 = (a2 - v9) >> 4;
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 3 > v10)
      v10 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v39 = a1 + 2;
    if (v14)
      v15 = (char *)sub_20BDEA2F0((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v16 = &v15[16 * v12];
    v35 = v15;
    v36 = v16;
    v37 = v16;
    v38 = &v15[16 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4)
          v18 = 1;
        else
          v18 = v11 >> 3;
        v40[4] = v8;
        v19 = (char *)sub_20BDEA2F0(v8, v18);
        v21 = v19;
        v22 = &v19[16 * (v18 >> 2)];
        v23 = &v19[16 * v20];
        v24 = v36;
        v25 = v36;
        v26 = v22;
        v27 = v37 - v36;
        if (v37 != v36)
        {
          v34 = &v19[16 * v20];
          v26 = &v22[v27 & 0xFFFFFFFFFFFFFFF0];
          v28 = 16 * (v27 >> 4);
          v29 = &v19[16 * (v18 >> 2)];
          v30 = v36;
          do
          {
            v29 = (char *)(sub_20BF4C200(v29, v30) + 2);
            v30 += 16;
            v28 -= 16;
          }
          while (v28);
          v25 = v37;
          v23 = v34;
        }
        v31 = v35;
        v32 = v38;
        v35 = v21;
        v36 = v22;
        v40[0] = v31;
        v40[1] = v24;
        v37 = v26;
        v38 = v23;
        v40[2] = v25;
        v40[3] = v32;
        sub_20BFC3A00((uint64_t)v40);
        v16 = v26;
      }
      else
      {
        v17 = v12 + 2;
        if (v12 >= -1)
          v17 = v12 + 1;
        v16 -= 16 * (v17 >> 1);
        v36 = v16;
        v37 = v16;
      }
    }
    sub_20BF4C6D0(v16, a3);
    v37 += 16;
    v4 = (char *)sub_20C12A4AC(a1, &v35, v4);
    sub_20BFC3A00((uint64_t)&v35);
  }
  else if (a2 == (char *)v6)
  {
    sub_20BF4C6D0(a2, a3);
    a1[1] = v4 + 16;
  }
  else
  {
    sub_20C12A400((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 16));
    if (v4 <= a3)
      a3 += 16 * (a1[1] > (unint64_t)a3);
    sub_20BF4A9BC(v4, a3);
  }
  return v4;
}

void sub_20C29FADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v12 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void **sub_20C29FAFC(void **a1)
{
  char *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  void *v7;

  v2 = (char *)operator new(0x20uLL);
  v3 = *a1;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = 0;
  sub_20BDDF5DC(v2, *(const void **)v3, *((_QWORD *)v3 + 1), (uint64_t)(*((_QWORD *)v3 + 1) - *(_QWORD *)v3) >> 3);
  *((_DWORD *)v2 + 6) = 0;
  v4 = (unsigned int *)(v2 + 24);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  v7 = *a1;
  *a1 = v2;
  return sub_20C020410(&v7);
}

void sub_20C29FB74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C29FB88(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C29FBB4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C29FBB4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **v2;
  void **v4;

  v2 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 88);
  sub_20C29FC14((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 88), 0);
  sub_20C29FC40(a1);
  sub_20C29FC14(v2, 0);
  v4 = (void **)(a1 + 8);
  sub_20C297E90(&v4);
  return a1;
}

void sub_20C29FC14(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(v3);
    operator delete(v4);
  }
}

void sub_20C29FC40(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  _BYTE v2[8];
  uint64_t v3;
  void **v4;

  v1 = (pxrInternal__aapl__pxrReserved__ *)sub_20C29FD4C((uint64_t)v2, a1);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(v1) & 1) == 0)
    sub_20C29FCB0((uint64_t)v2);
  v4 = (void **)&v3;
  sub_20C297E90(&v4);
}

void sub_20C29FC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 24) = &a11;
  sub_20C297E90((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

void sub_20C29FCB0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  _BYTE v6[8];
  uint64_t v7;
  void **v8;

  v1 = (pxrInternal__aapl__pxrReserved__ *)sub_20C29FD4C((uint64_t)v6, a1);
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v4 = sub_20C29FE98(DetachedDispatcher, (uint64_t)v6);
    v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_20C29FDFC();
  }
  v8 = (void **)&v7;
  sub_20C297E90(&v8);
}

void sub_20C29FD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 24) = &a11;
  sub_20C297E90((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C29FD4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int *v5;
  int *v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(int **)(a1 + 8);
  if (v5 == *(int **)(a1 + 16))
    v5 = sub_20C297D94();
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)a2 = 0;
  sub_20C297ED0(v4);
  v6 = sub_20C297D94();
  *(_WORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return a1;
}

void sub_20C29FDFC()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C29FE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C29FE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  v5 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x60uLL);
  *((_BYTE *)v5 - 11) = 1;
  *v5 = &unk_24C52EB78;
  sub_20C29FD4C((uint64_t)(v5 + 1), a2);
  v5[11] = a1 + 264;
  return v5;
}

uint64_t sub_20C29FF0C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C52EB78;
  v3 = (void **)(a1 + 16);
  sub_20C297E90(&v3);
  return a1;
}

void sub_20C29FF54(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C52EB78;
  v2 = (void **)(a1 + 16);
  sub_20C297E90(&v2);
  operator delete(a1);
}

uint64_t sub_20C29FFA0(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C29FDFC();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 88));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2A002C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2A0040(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20C2A00E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B0D8(v3);
  _Unwind_Resume(exception_object);
}

void sub_20C2A00FC()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_WRITE_NEW_USDC_FILES_AS_VERSION))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_WRITE_NEW_USDC_FILES_AS_VERSION);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_WRITE_NEW_USDC_FILES_AS_VERSION);
  }
}

void sub_20C2A0140()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_MMAP_PREFETCH_KB))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_MMAP_PREFETCH_KB);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_MMAP_PREFETCH_KB);
  }
}

void sub_20C2A0184()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
  }
}

void sub_20C2A01C8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdReadOutOfBoundsError::~UsdReadOutOfBoundsError(std::exception *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version::FromString(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *this, const char *a2)
{
  int v2;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  v2 = sscanf((const char *)this, "%u.%u.%u", (char *)&v8 + 4, &v8, &v7);
  if (v7 <= 0xFF && v8 <= 0xFF && HIDWORD(v8) <= 0xFF && v2 == 3)
    return (v8 << 8) | (v7 << 16) | BYTE4(v8);
  else
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version::AsString(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *this, const char *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", a2, a3, *(unsigned __int8 *)this, *((unsigned __int8 *)this + 1), *((unsigned __int8 *)this + 2));
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileRange::~_FileRange(FILE **this)
{
  FILE *v2;

  v2 = *this;
  if (v2)
  {
    if (*((_BYTE *)this + 24))
      fclose(v2);
  }
}

{
  FILE *v2;

  v2 = *this;
  if (v2)
  {
    if (*((_BYTE *)this + 24))
      fclose(v2);
  }
}

unint64_t *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_AddRangeReference(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl *this, const void *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[3];

  v6 = (char *)this + 40;
  v7 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::_Detached;
  *(_QWORD *)(v7 + 24) = this;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a3;
  sub_20C2B6AC4((uint64_t)v6, v7 + 8, (unint64_t **)v7, (uint64_t)v11);
  result = (unint64_t *)(v11[0] + 8);
  do
    v9 = __ldxr(result);
  while (__stxr(v9 + 1, result));
  if (!v9)
  {
    do
      v10 = __ldxr((unint64_t *)this);
    while (__stxr(v10 + 1, (unint64_t *)this));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_DetachReferencedRanges(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl *this)
{
  unint64_t *v1;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD v14[4];
  char v15;

  v1 = (unint64_t *)*((_QWORD *)this + 9);
  if (v1)
  {
    while ((v1[6] & 1) == 0)
    {
      v1 = (unint64_t *)*v1;
      if (!v1)
        return;
    }
LABEL_5:
    if (atomic_load(v1 + 1))
    {
      v3 = v1[4];
      v4 = sub_20C2A0500();
      v5 = v3 + v1[5] - 1;
      v6 = v3 / v4;
      v7 = v5 / sub_20C2A0500();
      v8 = v6 * sub_20C2A0500();
      v9 = v7 - v6 + 1;
      v10 = sub_20C2A0500();
      if (pxrInternal__aapl__pxrReserved__::ArchSetMemoryProtection(v8, v9 * v10, 3))
      {
        v12 = sub_20C2A0500();
        if (v9)
        {
          v13 = v6 * v12;
          do
          {
            --v9;
            *(_BYTE *)v13 = *(_BYTE *)v13;
            v13 += sub_20C2A0500();
          }
          while (v9);
        }
      }
      else
      {
        v14[0] = "usd/crateFile.cpp";
        v14[1] = "_DetachReferencedRanges";
        v14[2] = 550;
        v14[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_DetachReferencedRanges()";
        v15 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"could not set address range permissions to copy-on-write", v11);
      }
    }
    while (1)
    {
      v1 = (unint64_t *)*v1;
      if (!v1)
        break;
      if ((v1[6] & 1) != 0)
        goto LABEL_5;
    }
  }
}

uint64_t sub_20C2A0500()
{
  unsigned __int8 v0;
  pxrInternal__aapl__pxrReserved__ *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2549883C0);
  if ((v0 & 1) == 0)
  {
    v2 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_2549883C0);
    if ((_DWORD)v2)
    {
      dword_2549883B8 = pxrInternal__aapl__pxrReserved__::ArchGetPageSize(v2);
      __cxa_guard_release(&qword_2549883C0);
    }
  }
  return dword_2549883B8;
}

void sub_20C2A0558(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549883C0);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::ZeroCopySource(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = 0;
  result[1] = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::_Detached;
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

{
  *result = 0;
  result[1] = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::_Detached;
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::_Detached(uint64_t a1, void *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(unint64_t **)(a1 + 16);
  do
  {
    v3 = __ldxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    __dmb(9u);
    if (v2)
    {
      sub_20C2AE9B8((uint64_t)(v2 + 5), a2);
      sub_20BE99858((uint64_t)(v2 + 1), 0);
      operator delete(v2);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::operator==(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4];
}

const char *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection(const char **a1, char *__s1)
{
  const char *v3;
  const char *v4;
  _QWORD v6[4];
  char v7;

  v3 = *a1;
  v4 = a1[1];
  while (v3 != v4)
  {
    if (!strcmp(__s1, v3))
      return v3;
    v3 += 32;
  }
  v6[0] = "usd/crateFile.cpp";
  v6[1] = "GetSection";
  v6[2] = 810;
  v6[3] = "const CrateFile::_Section *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSe"
          "ction(_SectionName) const";
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 3, (pxrInternal__aapl__pxrReserved__ *)"Crate file missing %s section", __s1);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetMinimumSectionStart(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)this + 32;
  if (*(_QWORD *)this != v2 && v3 != v2)
  {
    do
    {
      if (*(_QWORD *)(v3 + 16) < *(_QWORD *)(v1 + 16))
        v1 = v3;
      v3 += 32;
    }
    while (v3 != v2);
  }
  if (v1 == v2)
    return 88;
  else
    return *(_QWORD *)(v1 + 16);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanRead(uint64_t a1)
{
  uint64_t *Resolver;
  uint64_t v3;
  _BOOL8 CanRead;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)a1);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
  }
  v3 = pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  if (v11)
    CanRead = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanRead(v3, &v11);
  else
    CanRead = 0;
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return CanRead;
}

void sub_20C2A07E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanRead(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *Instance;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE v24[88];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v5 = v4;
  if (v3)
  {
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    pxrInternal__aapl__pxrReserved__::ArchFileAdvise(v3, v5, v6, 3);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v7 = *a2;
  }
  v22 = 0;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  sub_20C2A09FC(&v20, v11, (uint64_t)v24);
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v16 = sub_20BEC5244(&v23, 0);
  v24[0] = 0;
  v17 = (_QWORD *)sub_20BEB5B80(Instance + 19, v24);
  if (v17 != v16)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v16, v17);
  if (v3)
  {
    v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    pxrInternal__aapl__pxrReserved__::ArchFileAdvise(v3, v5, v18, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
  return v17 == v16;
}

void sub_20C2A09CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a12);
  _Unwind_Resume(a1);
}

void sub_20C2A09FC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  const char *v11;
  const char *p_p;
  void *__p;
  char v14;
  void *v15;
  char v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = 0x434453552D525850;
  *(_BYTE *)(a3 + 9) = 10;
  if (a2 > 87)
  {
    a1[2] = 0;
    sub_20C2B72E8(a1, a3, 0x58uLL);
    if (*(_QWORD *)a3 == 0x434453552D525850)
    {
      v7 = *(unsigned __int8 *)(a3 + 8);
      v8 = *(unsigned __int8 *)(a3 + 9);
      if (*(_BYTE *)(a3 + 8) || v8 >= 0xB)
      {
        v17 = "usd/crateFile.cpp";
        v18 = "_ReadBootStrap";
        v19 = 3617;
        v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream]";
        v21 = 0;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v5, v6, v7, v8, *(unsigned __int8 *)(a3 + 10));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v9, v10, 0, 10, 0);
        if (v16 >= 0)
          v11 = (const char *)&v15;
        else
          v11 = (const char *)v15;
        if (v14 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file version mismatch -- file is %s, software supports %s", v11, p_p);
        if (v14 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      else if (*(_QWORD *)(a3 + 16) >= a2)
      {
        v17 = "usd/crateFile.cpp";
        v18 = "_ReadBootStrap";
        v19 = 3625;
        v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream]";
        v21 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, possibly truncated: table of contents at offset %lld but file size is %lld");
      }
    }
    else
    {
      v17 = "usd/crateFile.cpp";
      v18 = "_ReadBootStrap";
      v19 = 3610;
      v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(Byte"
            "Stream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate bootstrap section corrupt");
    }
  }
  else
  {
    v17 = "usd/crateFile.cpp";
    v18 = "_ReadBootStrap";
    v19 = 3603;
    v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(ByteSt"
          "ream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"File too small to contain bootstrap structure");
  }
}

void sub_20C2A0C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CreateNew@<X0>(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  _BYTE *v4;
  int v5;
  void *v6;
  uint64_t result;
  void *__p[2];
  char v9;

  v2 = (int)this;
  v4 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
    v4 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
  }
  if (*v4)
  {
    v5 = 0;
  }
  else
  {
    sub_20BDDC0E4(__p, "USDC_USE_PREAD");
    v5 = !pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  if (v2)
    v5 = 2;
  v6 = operator new(0x19B0uLL);
  result = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v6, v5);
  *a2 = v6;
  return result;
}

void sub_20C2A0D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapAsset(const char *a1@<X0>, _QWORD *a2@<X1>, unint64_t **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12[4];
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v8 = v7;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  pxrInternal__aapl__pxrReserved__::ArchMapFileReadOnly(v12, v6, &v14);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  sub_20C2AEA3C(a3, v12, v8, v9);
  sub_20BE99858((uint64_t)v12, 0);
  if (!(*a3)[3])
  {
    v12[0] = (uint64_t)"usd/crateFile.cpp";
    v12[1] = (uint64_t)"_MmapAsset";
    v12[2] = 2422;
    v12[3] = (uint64_t)"static CrateFile::_FileMapping pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapAs"
                      "set(const char *, const ArAssetSharedPtr &)";
    v13 = 0;
    if (SHIBYTE(v16) < 0)
    {
      v10 = ": ";
      v11 = v14;
      if (!v15)
        v10 = "";
    }
    else
    {
      if (HIBYTE(v16))
        v10 = ": ";
      else
        v10 = "";
      v11 = (const char *)&v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Couldn't map asset '%s'%s%s", a1, v10, v11);
    sub_20C2A0EB4(a3);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v14);
}

void sub_20C2A0E70(_Unwind_Exception *a1)
{
  unint64_t **v1;
  uint64_t v2;

  sub_20C2AECCC(v1);
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  _Unwind_Resume(a1);
}

unint64_t *sub_20C2A0EB4(unint64_t **a1)
{
  unint64_t *result;
  void *v3;
  unint64_t *v4;

  result = *a1;
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_DetachReferencedRanges((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl *)result);
    v4 = *a1;
    *a1 = 0;
    return (unint64_t *)sub_20C2AEC70(&v4, v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapFile(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this@<X0>, const char *a2@<X1>, unint64_t **a3@<X8>)
{
  const char *v6;
  const char *v7;
  uint64_t v8[4];
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::ArchMapFileReadOnly(v8, a2, &v10);
  sub_20C2AEA3C(a3, v8, 0, -1);
  sub_20BE99858((uint64_t)v8, 0);
  if (!(*a3)[3])
  {
    v8[0] = (uint64_t)"usd/crateFile.cpp";
    v8[1] = (uint64_t)"_MmapFile";
    v8[2] = 2437;
    v8[3] = (uint64_t)"static CrateFile::_FileMapping pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapFil"
                     "e(const char *, FILE *)";
    v9 = 0;
    if (SHIBYTE(v12) < 0)
    {
      v6 = ": ";
      v7 = v10;
      if (!v11)
        v6 = "";
    }
    else
    {
      if (HIBYTE(v12))
        v6 = ": ";
      else
        v6 = "";
      v7 = (const char *)&v10;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Couldn't map file '%s'%s%s", (const char *)this, v6, v7);
    sub_20C2A0EB4(a3);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v10);
}

void sub_20C2A1008(_Unwind_Exception *a1)
{
  unint64_t **v1;
  uint64_t v2;

  sub_20C2AECCC(v1);
  if (*(char *)(v2 - 17) < 0)
    operator delete(*(void **)(v2 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a4@<X8>)
{
  unsigned __int8 v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  _BOOL4 v9;
  uint64_t *Resolver;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  int v21;

  v7 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v7 & 1) != 0)
  {
    v8 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateFile::CrateFile::Open", 0, a3);
    v9 = v8 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v20 = v8;
  v21 = v9;
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v18 = *(_QWORD *)(a1 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(a1, &v19, a2, a4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v14 = v21--;
  if (v14)
  {
    v15 = (uint64_t)v20;
    v16 = v14 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
      v21 = v16--;
    }
    while (v16 != -2);
  }
}

void sub_20C2A1174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  sub_20BEB24F4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(uint64_t a1@<X0>, __int128 *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a4@<X8>)
{
  int v4;
  unsigned __int8 v8;
  _QWORD *v9;
  _BOOL4 v10;
  void *v11;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v12;
  const char *v13;
  _BYTE *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  void *v21;
  FILE *v22;
  void *v23;
  BOOL v24;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v25;
  uint64_t v26;
  __sFILE *v27;
  const char *v28;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v29;
  void *v30[2];
  char v31;
  void *__p[2];
  uint64_t v33;
  const char *v34;
  char v35;
  __int128 v36;
  _QWORD *v37;
  int v38;

  v4 = (int)a3;
  v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v8 & 1) != 0)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateFile::CrateFile::Open", 0, a3);
    v10 = v9 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v37 = v9;
  v38 = v10;
  *a4 = 0;
  v36 = 0uLL;
  v11 = *(void **)a2;
  if (v4)
  {
    if (!v11)
    {
LABEL_10:
      __p[0] = "usd/crateFile.cpp";
      __p[1] = "Open";
      v33 = 2470;
      v34 = "static std::unique_ptr<CrateFile> pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(const str"
            "ing &, const ArAssetSharedPtr &, BOOL)";
      v35 = 0;
      if (*(char *)(a1 + 23) >= 0)
        v13 = (const char *)a1;
      else
        v13 = *(const char **)a1;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to open asset '%s'", v13);
      goto LABEL_23;
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v11 + 48))(__p);
    v36 = *(_OWORD *)__p;
    v11 = __p[0];
    a2 = &v36;
  }
  if (!v11)
    goto LABEL_10;
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a1))
  {
    v12 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)operator new(0x19B0uLL);
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v12, (__int128 *)a1, a2, v4);
  }
  else
  {
    v14 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
    if (!v14)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
      v14 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
    }
    if (!*v14)
    {
      v22 = (FILE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 40))(*(_QWORD *)a2);
      if (v22)
      {
        v23 = v21;
        sub_20BDDC0E4(__p, "USDC_USE_PREAD");
        v24 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
        if (SHIBYTE(v33) < 0)
          operator delete(__p[0]);
        if (v24)
        {
          v25 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)operator new(0x19B0uLL);
          pxrInternal__aapl__pxrReserved__::ArchGetFileName(v22, v30);
          v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2);
          __p[0] = v22;
          __p[1] = v23;
          if (v26 == -1)
            v26 = pxrInternal__aapl__pxrReserved__::ArchGetFileLength(v22, v27) - (_QWORD)v23;
          v33 = v26;
          LOBYTE(v34) = 0;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v25, (__int128 *)a1, (__int128 *)v30, (uint64_t)__p, a2);
          sub_20C29FC14(a4, v25);
          if (__p[0] && (_BYTE)v34)
            fclose((FILE *)__p[0]);
          if (v31 < 0)
            operator delete(v30[0]);
        }
        else
        {
          if (*(char *)(a1 + 23) >= 0)
            v28 = (const char *)a1;
          else
            v28 = *(const char **)a1;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapAsset(v28, a2, (unint64_t **)v30);
          v29 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)operator new(0x19B0uLL);
          pxrInternal__aapl__pxrReserved__::ArchGetFileName(v22, __p);
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v29, (__int128 *)a1, (__int128 *)__p, v30);
          sub_20C29FC14(a4, v29);
          if (SHIBYTE(v33) < 0)
            operator delete(__p[0]);
          sub_20C2AECCC((unint64_t **)v30);
        }
      }
    }
    if (*a4)
      goto LABEL_20;
    v12 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)operator new(0x19B0uLL);
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v12, (__int128 *)a1, a2, v4);
  }
  sub_20C29FC14(a4, v12);
LABEL_20:
  if (*((char *)*a4 + 6535) < 0)
  {
    if (*((_QWORD *)*a4 + 815))
      goto LABEL_23;
    goto LABEL_22;
  }
  if (!*((_BYTE *)*a4 + 6535))
LABEL_22:
    sub_20C29FC14(a4, 0);
LABEL_23:
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v38--;
  if (v18)
  {
    v19 = (uint64_t)v37;
    v20 = v18 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v19);
      v38 = v20--;
    }
    while (v20 != -2);
  }
}

void sub_20C2A1540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **v25;
  void *v26;
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  operator delete(v26);
  sub_20C2AECCC((unint64_t **)&a10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a25);
  sub_20C29FC14(v25, 0);
  sub_20BEB24F4(v27 - 80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSoftwareVersion(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  return 2560;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSoftwareVersionToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  unsigned __int8 v1;
  void *v3;
  const char *v4;
  char *v5;
  void *__p;
  char v7;

  v1 = atomic_load((unsigned __int8 *)&qword_254988338);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988338))
  {
    v3 = operator new(8uLL);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v4, v5, 0, 10, 0);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v3);
    if (v7 < 0)
      operator delete(__p);
    qword_254988330 = (uint64_t)v3;
    __cxa_guard_release(&qword_254988338);
  }
  return qword_254988330;
}

void sub_20C2A16D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  __cxa_guard_abort(&qword_254988338);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetFileVersion(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  return *((unsigned __int16 *)this + 3184) | (*((unsigned __int8 *)this + 6370) << 16);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetFileVersionToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  void *__p;
  char v6;

  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", a2, a3, *((unsigned __int8 *)this + 6368), *((unsigned __int8 *)this + 6369), *((unsigned __int8 *)this + 6370));
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a4);
  if (v6 < 0)
    operator delete(__p);
}

void sub_20C2A179C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile(uint64_t a1, int a2)
{
  uint64_t v4;
  char *v5;
  uint64_t i;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20C2B7438(a1 + 216, 0, 0.0, 0.5);
  for (i = 320; i != 2176; i += 32)
    *(_QWORD *)(a1 + i) = 0;
  do
  {
    *(_QWORD *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 4032);
  do
  {
    *(_QWORD *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 5888);
  *(_OWORD *)(a1 + 6432) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_QWORD *)(a1 + 6360) = 0x434453552D525850;
  *(_BYTE *)(a1 + 6369) = 10;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_OWORD *)(a1 + 6448) = 0u;
  *(_OWORD *)(a1 + 6464) = 0u;
  *(_BYTE *)(a1 + 6480) = 0;
  *(_BYTE *)(a1 + 6504) = a2 == 2;
  *(_OWORD *)(a1 + 6512) = 0u;
  *(_OWORD *)(a1 + 6528) = 0u;
  *(_OWORD *)(a1 + 6544) = 0u;
  *(_QWORD *)(a1 + 6560) = 0;
  *(_BYTE *)(a1 + 6568) = a2 == 1;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, v4, v5);
  return a1;
}

void sub_20C2A1928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t **v12;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;
  _BYTE *v14;
  void **v15;
  void *v17;
  FILE *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  v17 = *(void **)(v10 + 6560);
  *(_QWORD *)(v10 + 6560) = 0;
  if (v17)
    operator delete[](v17);
  if ((char)v14[190] < 0)
    operator delete(*(void **)(v10 + 6536));
  if ((char)v14[166] < 0)
    operator delete(*v15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  v18 = *(FILE **)(v10 + 6456);
  if (v18 && v14[111])
    fclose(v18);
  sub_20C2AECCC(v12);
  v19 = *(void **)(v10 + 6336);
  if (v19)
  {
    *(_QWORD *)(v10 + 6344) = v19;
    operator delete(v19);
  }
  sub_20C2A5B64(v11, 0);
  v20 = (_QWORD *)(v10 + 5832);
  v21 = -1856;
  while (1)
  {
    v22 = (_QWORD *)v20[3];
    if (v20 == v22)
      break;
    if (v22)
    {
      v23 = 5;
LABEL_17:
      (*(void (**)(void))(*v22 + 8 * v23))();
    }
    v20 -= 4;
    v21 += 32;
    if (!v21)
    {
      v24 = 0;
      while (1)
      {
        v25 = *(_QWORD **)(v10 + v24 + 4000);
        if ((_QWORD *)(v10 + v24 + 3976) == v25)
          break;
        if (v25)
        {
          v26 = 5;
LABEL_24:
          (*(void (**)(void))(*v25 + 8 * v26))();
        }
        v24 -= 32;
        if (v24 == -1856)
        {
          v27 = 1856;
          while (1)
          {
            v28 = *(_QWORD **)(v10 + v27 + 288);
            if ((_QWORD *)(v10 + v27 + 264) == v28)
              break;
            if (v28)
            {
              v29 = 5;
LABEL_31:
              (*(void (**)(void))(*v28 + 8 * v29))();
            }
            v27 -= 32;
            if (!v27)
            {
              a10 = v10 + 224;
              sub_20C2AECF4((void ***)&a10);
              sub_20C2B7720(v10 + 168);
              v30 = *(void **)(v10 + 144);
              if (v30)
              {
                *(_QWORD *)(v10 + 152) = v30;
                operator delete(v30);
              }
              a10 = v10 + 120;
              sub_20BEEB2B8((void ***)&a10);
              sub_20BFD6F90((void ***)&a10);
              v31 = *(void **)(v10 + 72);
              if (v31)
              {
                *(_QWORD *)(v10 + 80) = v31;
                operator delete(v31);
              }
              v32 = *(void **)(v10 + 48);
              if (v32)
              {
                *(_QWORD *)(v10 + 56) = v32;
                operator delete(v32);
              }
              a10 = v10 + 24;
              sub_20C2B7648((void ***)&a10);
              v33 = *(void **)v10;
              if (*(_QWORD *)v10)
              {
                *(_QWORD *)(v10 + 8) = v33;
                operator delete(v33);
              }
              _Unwind_Resume(a1);
            }
          }
          v28 = (_QWORD *)(v10 + v27 + 264);
          v29 = 4;
          goto LABEL_31;
        }
      }
      v25 = (_QWORD *)(v10 + v24 + 3976);
      v26 = 4;
      goto LABEL_24;
    }
  }
  v22 = v20;
  v23 = 4;
  goto LABEL_17;
}

double pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BootStrap::_BootStrap(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BootStrap *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = 0x434453552D525850;
  *((_BYTE *)this + 9) = 10;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = 0x434453552D525850;
  *((_BYTE *)this + 9) = 10;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, uint64_t a2, char *a3)
{
  unsigned __int8 v4;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *result;

  v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v4 & 1) != 0)
  {
    v5 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateFile::CrateFile::_DoAllTypeRegistrations", 0, a3);
    v6 = v5 != 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  sub_20C2AAEF0((uint64_t *)this);
  sub_20C2AAFDC((uint64_t *)this);
  sub_20C2AB0C8((uint64_t *)this);
  sub_20C2AB1B8((uint64_t *)this);
  sub_20C2AB2A8((uint64_t *)this);
  sub_20C2AB398((uint64_t *)this);
  sub_20C2AB488((uint64_t *)this);
  sub_20C2AB57C((uint64_t *)this);
  sub_20C2AB66C((uint64_t *)this);
  sub_20C2AB75C((uint64_t *)this);
  sub_20C2AB850((uint64_t *)this);
  sub_20C2AB944((uint64_t *)this);
  sub_20C2ABA38((uint64_t *)this);
  sub_20C2ABB2C((uint64_t *)this);
  sub_20C2ABC20((uint64_t *)this);
  sub_20C2ABD14((uint64_t *)this);
  sub_20C2ABE08((uint64_t *)this);
  sub_20C2ABEFC((uint64_t *)this);
  sub_20C2ABFF0((uint64_t *)this);
  sub_20C2AC0E4((uint64_t *)this);
  sub_20C2AC1D8((uint64_t *)this);
  sub_20C2AC2CC((uint64_t *)this);
  sub_20C2AC3C0((uint64_t *)this);
  sub_20C2AC4B4((uint64_t *)this);
  sub_20C2AC5A8((uint64_t *)this);
  sub_20C2AC69C((uint64_t *)this);
  sub_20C2AC790((uint64_t *)this);
  sub_20C2AC884((uint64_t *)this);
  sub_20C2AC978((uint64_t *)this);
  sub_20C2ACA6C((uint64_t *)this);
  sub_20C2ACB60((uint64_t *)this);
  sub_20C2ACC54((uint64_t *)this);
  sub_20C2ACD48((uint64_t *)this);
  sub_20C2ACE3C((uint64_t *)this);
  sub_20C2ACF30((uint64_t *)this);
  sub_20C2AD024((uint64_t *)this);
  sub_20C2AD118((uint64_t *)this);
  sub_20C2AD20C((uint64_t *)this);
  sub_20C2AD300((uint64_t *)this);
  sub_20C2AD3F4((uint64_t *)this);
  sub_20C2AD4E8((uint64_t *)this);
  sub_20C2AD5DC((uint64_t *)this);
  sub_20C2AD6D0((uint64_t *)this);
  sub_20C2AD7C4((uint64_t *)this);
  sub_20C2AD8B8((uint64_t *)this);
  sub_20C2AD9AC((uint64_t *)this);
  sub_20C2ADAA0((uint64_t *)this);
  sub_20C2ADB94((uint64_t *)this);
  sub_20C2ADC88((uint64_t *)this);
  sub_20C2ADD7C((uint64_t *)this);
  sub_20C2ADE70((uint64_t *)this);
  sub_20C2ADF64((uint64_t *)this);
  sub_20C2AE058((uint64_t *)this);
  sub_20C2AE14C((uint64_t *)this);
  sub_20C2AE240((uint64_t *)this);
  sub_20C2AE334((uint64_t *)this);
  result = sub_20C2AE428((uint64_t *)this);
  if (v6)
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v5);
  return result;
}

void sub_20C2A1D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *a4)
{
  void *v8;
  uint64_t i;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  unint64_t *v15;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20C2B7438(a1 + 216, 0, 0.0, 0.5);
  for (i = 320; i != 2176; i += 32)
    *(_QWORD *)(a1 + i) = 0;
  do
  {
    *(_QWORD *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 4032);
  do
  {
    *(_QWORD *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 5888);
  *(_OWORD *)(a1 + 6432) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_QWORD *)(a1 + 6360) = 0x434453552D525850;
  *(_BYTE *)(a1 + 6369) = 10;
  *(_QWORD *)(a1 + 6448) = *a4;
  v15 = 0;
  *a4 = 0;
  sub_20C2AEC70(&v15, v8);
  *(_BYTE *)(a1 + 6480) = 0;
  *(_QWORD *)(a1 + 6472) = 0;
  *(_OWORD *)(a1 + 6456) = 0u;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_BYTE *)(a1 + 6504) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 6512), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(a1 + 6528) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 6512) = v12;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 6536), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    *(_QWORD *)(a1 + 6552) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 6536) = v13;
  }
  *(_QWORD *)(a1 + 6560) = 0;
  *(_BYTE *)(a1 + 6568) = 1;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, v10, v11);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitMMap((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1);
  return a1;
}

void sub_20C2A1F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t *v11;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v12;
  void **v13;
  uint64_t v14;
  FILE **v15;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (*(char *)(v14 + 166) < 0)
    operator delete(*v13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v12);
  if (*v15 && *(_BYTE *)(v14 + 111))
    fclose(*v15);
  sub_20C2AECCC((unint64_t **)(v10 + 6448));
  v17 = *(void **)(v10 + 6336);
  if (v17)
  {
    *(_QWORD *)(v10 + 6344) = v17;
    operator delete(v17);
  }
  sub_20C2A5B64(v11, 0);
  v18 = (_QWORD *)(v10 + 5832);
  v19 = -1856;
  while (1)
  {
    v20 = (_QWORD *)v18[3];
    if (v18 == v20)
      break;
    if (v20)
    {
      v21 = 5;
LABEL_13:
      (*(void (**)(void))(*v20 + 8 * v21))();
    }
    v18 -= 4;
    v19 += 32;
    if (!v19)
    {
      v22 = 0;
      while (1)
      {
        v23 = *(_QWORD **)(v10 + v22 + 4000);
        if ((_QWORD *)(v10 + v22 + 3976) == v23)
          break;
        if (v23)
        {
          v24 = 5;
LABEL_20:
          (*(void (**)(void))(*v23 + 8 * v24))();
        }
        v22 -= 32;
        if (v22 == -1856)
        {
          v25 = 1856;
          while (1)
          {
            v26 = *(_QWORD **)(v10 + v25 + 288);
            if ((_QWORD *)(v10 + v25 + 264) == v26)
              break;
            if (v26)
            {
              v27 = 5;
LABEL_27:
              (*(void (**)(void))(*v26 + 8 * v27))();
            }
            v25 -= 32;
            if (!v25)
            {
              a10 = (void **)(v10 + 224);
              sub_20C2AECF4(&a10);
              sub_20C2B7720(v10 + 168);
              v28 = *(void **)(v10 + 144);
              if (v28)
              {
                *(_QWORD *)(v10 + 152) = v28;
                operator delete(v28);
              }
              a10 = (void **)(v10 + 120);
              sub_20BEEB2B8(&a10);
              sub_20BFD6F90(&a10);
              v29 = *(void **)(v10 + 72);
              if (v29)
              {
                *(_QWORD *)(v10 + 80) = v29;
                operator delete(v29);
              }
              v30 = *(void **)(v10 + 48);
              if (v30)
              {
                *(_QWORD *)(v10 + 56) = v30;
                operator delete(v30);
              }
              a10 = (void **)(v10 + 24);
              sub_20C2B7648(&a10);
              v31 = *(void **)v10;
              if (*(_QWORD *)v10)
              {
                *(_QWORD *)(v10 + 8) = v31;
                operator delete(v31);
              }
              _Unwind_Resume(a1);
            }
          }
          v26 = (_QWORD *)(v10 + v25 + 264);
          v27 = 4;
          goto LABEL_27;
        }
      }
      v23 = (_QWORD *)(v10 + v22 + 3976);
      v24 = 4;
      goto LABEL_20;
    }
  }
  v20 = v18;
  v21 = 4;
  goto LABEL_13;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitMMap(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *Instance;
  void *v18;
  unint64_t v19;
  _QWORD v20[4];
  int v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)this + 6512;
  v3 = *((_QWORD *)this + 806);
  if (!v3)
  {
    if (*((char *)this + 6535) < 0)
    {
      **((_BYTE **)this + 814) = 0;
      *((_QWORD *)this + 815) = 0;
    }
    else
    {
      *v2 = 0;
      *((_BYTE *)this + 6535) = 0;
    }
    if (*((char *)this + 6559) < 0)
    {
      **((_BYTE **)this + 817) = 0;
      *((_QWORD *)this + 818) = 0;
    }
    else
    {
      *((_BYTE *)this + 6536) = 0;
      *((_BYTE *)this + 6559) = 0;
    }
    return;
  }
  v4 = *(_QWORD *)(v3 + 32);
  pxrInternal__aapl__pxrReserved__::ArchMemAdvise(*(_QWORD *)(v3 + 24), v4, 3);
  v5 = atomic_load((unsigned __int8 *)&qword_254988358);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254988358))
  {
    sub_20BDDC0E4(__p, "USDC_DUMP_PAGE_MAPS");
    sub_20BDDC0E4(v24, "");
    pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)__p, (uint64_t)v24, (uint64_t)&qword_254988340);
    if (v25 < 0)
      operator delete(v24[0]);
    if (v23 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254988340, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988358);
  }
  if (byte_254988357 < 0)
  {
    if (!qword_254988348)
      goto LABEL_20;
    if (qword_254988348 != 1)
      goto LABEL_16;
    if (*(_BYTE *)qword_254988340 == 42)
      goto LABEL_17;
    if (qword_254988348 != 1)
      goto LABEL_16;
    v6 = *(unsigned __int8 *)qword_254988340;
LABEL_15:
    if (v6 != 49)
      goto LABEL_16;
LABEL_17:
    v8 = *(_QWORD *)(*((_QWORD *)this + 806) + 24);
    v9 = v8 + v4;
    v10 = sub_20C2AEECC() & v8;
    v11 = ~v10 + v9 + sub_20C2A0500();
    v12 = v11 / sub_20C2A0500();
    v13 = operator new[](v12);
    v14 = (void *)*((_QWORD *)this + 820);
    *((_QWORD *)this + 820) = v13;
    if (v14)
    {
      operator delete[](v14);
      v13 = (void *)*((_QWORD *)this + 820);
    }
    bzero(v13, v12);
    goto LABEL_20;
  }
  if (!byte_254988357)
    goto LABEL_20;
  if (byte_254988357 == 1)
  {
    v6 = qword_254988340;
    if (qword_254988340 == 42)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_16:
  pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(__p, &qword_254988340, 2);
  v7 = pxrInternal__aapl__pxrReserved__::ArchRegex::Match((uint64_t)__p, (const char *)this + 6512);
  pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)__p);
  if (v7)
    goto LABEL_17;
LABEL_20:
  v15 = *((_QWORD *)this + 820);
  v16 = *(_QWORD *)(*((_QWORD *)this + 806) + 24);
  sub_20C2A2B6C();
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)__p);
  v20[0] = this;
  v20[1] = v16;
  v20[2] = (char *)this + 6448;
  v20[3] = v15;
  v21 = 0;
  sub_20C2A24AC((uint64_t)this, (uint64_t)v20, v4);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v18 = __p[0];
  v19 = atomic_load(Instance + 18);
  if ((unint64_t)v18 < v19
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)__p, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    if (v2[23] < 0)
    {
      **((_BYTE **)this + 814) = 0;
      *((_QWORD *)this + 815) = 0;
    }
    else
    {
      *v2 = 0;
      v2[23] = 0;
    }
  }
  if (!sub_20C2A2B6C())
    pxrInternal__aapl__pxrReserved__::ArchMemAdvise(*(_QWORD *)(*((_QWORD *)this + 806) + 24), v4, 0);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)__p);
}

void sub_20C2A2444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 49) < 0)
    operator delete(*(void **)(v19 - 72));
  if (a19 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254988358);
  _Unwind_Resume(a1);
}

void sub_20C2A24AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t *Instance;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned int *v55;
  unsigned int *v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  const char *v60;
  _OWORD v61[2];
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];
  uint64_t v66;
  _OWORD v67[2];
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _OWORD v77[2];
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78);
  v6 = *(_OWORD *)(a2 + 24);
  v77[0] = *(_OWORD *)(a2 + 8);
  v77[1] = v6;
  sub_20C2B7794((uint64_t)v77, a3, (uint64_t)&v79);
  *(_QWORD *)(a1 + 6440) = v84;
  v7 = v82;
  *(_OWORD *)(a1 + 6392) = v81;
  *(_OWORD *)(a1 + 6408) = v7;
  *(_OWORD *)(a1 + 6424) = v83;
  v8 = v80;
  *(_OWORD *)(a1 + 6360) = v79;
  *(_OWORD *)(a1 + 6376) = v8;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v10 = v78;
  v11 = atomic_load(Instance + 18);
  if (v10 >= v11
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    v12 = *(_OWORD *)(a2 + 16);
    v75[0] = *(_OWORD *)a2;
    v75[1] = v12;
    v76 = *(_QWORD *)(a2 + 32);
    sub_20C2B79F0((uint64_t)v75, a1 + 6360, (uint64_t)&v79);
    v13 = *(void **)(a1 + 6336);
    if (v13)
    {
      *(_QWORD *)(a1 + 6344) = v13;
      operator delete(v13);
      *(_QWORD *)(a1 + 6336) = 0;
      *(_QWORD *)(a1 + 6344) = 0;
      *(_QWORD *)(a1 + 6352) = 0;
    }
    *(_OWORD *)(a1 + 6336) = v79;
    *(_QWORD *)(a1 + 6352) = v80;
  }
  v14 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v14)
    v14 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v15 = v78;
  v16 = atomic_load(v14 + 18);
  if (v15 >= v16
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v14))
  {
    v18 = *(_OWORD *)(a2 + 16);
    v73[0] = *(_OWORD *)a2;
    v73[1] = v18;
    v74 = *(_QWORD *)(a2 + 32);
    sub_20C2B7A8C(a1, (uint64_t)v73);
  }
  v19 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v19)
    v19 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v20 = v78;
  v21 = atomic_load(v19 + 18);
  if (v20 >= v21
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v19))
  {
    v22 = *(_OWORD *)(a2 + 16);
    v71[0] = *(_OWORD *)a2;
    v71[1] = v22;
    v72 = *(_QWORD *)(a2 + 32);
    sub_20C2B7B04(a1, (uint64_t)v71, v17);
  }
  v23 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v23)
    v23 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v24 = v78;
  v25 = atomic_load(v23 + 18);
  if (v24 >= v25
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v23))
  {
    v26 = *(_OWORD *)(a2 + 16);
    v69[0] = *(_OWORD *)a2;
    v69[1] = v26;
    v70 = *(_QWORD *)(a2 + 32);
    sub_20C2B8200(a1, (uint64_t)v69, v17);
  }
  v27 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v27)
    v27 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v28 = v78;
  v29 = atomic_load(v27 + 18);
  if (v28 >= v29
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v27))
  {
    v30 = *(_OWORD *)(a2 + 16);
    v67[0] = *(_OWORD *)a2;
    v67[1] = v30;
    v68 = *(_QWORD *)(a2 + 32);
    sub_20C2B82D4(a1, (uint64_t)v67, v17);
  }
  v31 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v31)
    v31 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v32 = v78;
  v33 = atomic_load(v31 + 18);
  if (v32 >= v33
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v31))
  {
    v34 = *(_OWORD *)(a2 + 16);
    v65[0] = *(_OWORD *)a2;
    v65[1] = v34;
    v66 = *(_QWORD *)(a2 + 32);
    sub_20C2B8684(a1, (uint64_t)v65, v17);
  }
  v35 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v35)
    v35 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v36 = v78;
  v37 = atomic_load(v35 + 18);
  if (v36 >= v37
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v35))
  {
    v38 = *(_OWORD *)(a2 + 16);
    v63[0] = *(_OWORD *)a2;
    v63[1] = v38;
    v64 = *(_QWORD *)(a2 + 32);
    sub_20C2B894C(a1, (uint64_t)v63, v17);
  }
  v39 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v39)
    v39 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v40 = v78;
  v41 = atomic_load(v39 + 18);
  if (v40 >= v41
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v39))
  {
    v42 = *(_OWORD *)(a2 + 16);
    v61[0] = *(_OWORD *)a2;
    v61[1] = v42;
    v62 = *(_QWORD *)(a2 + 32);
    sub_20C2B8D50(a1, (uint64_t)v61, v17);
  }
  v43 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v43)
    v43 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v44 = v78;
  v45 = atomic_load(v43 + 18);
  if (v44 >= v45
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v43))
  {
    v46 = *(_QWORD *)(a1 + 48);
    v47 = *(_QWORD *)(a1 + 56);
    if (v46 != v47)
    {
      v48 = *(_QWORD *)(a1 + 48);
      while ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3 > (unint64_t)*(unsigned int *)(v48 + 4))
      {
        v48 += 16;
        if (v48 == v47)
          goto LABEL_51;
      }
      *(_QWORD *)&v79 = "usd/crateFile.cpp";
      *((_QWORD *)&v79 + 1) = "operator()";
      *(_QWORD *)&v80 = 3551;
      *((_QWORD *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cra"
                              "teFile::_FileMapping *>>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v60 = *(const char **)v60;
      goto LABEL_77;
    }
LABEL_51:
    v49 = *(unsigned int **)(a1 + 72);
    v50 = *(unsigned int **)(a1 + 80);
    if (v49 != v50)
    {
      v51 = (v47 - v46) >> 4;
      v52 = *(unsigned int **)(a1 + 72);
      while (1)
      {
        v53 = *v52;
        if ((_DWORD)v53 != -1 && v51 <= v53)
          break;
        if (++v52 == v50)
          goto LABEL_59;
      }
      *(_QWORD *)&v79 = "usd/crateFile.cpp";
      *((_QWORD *)&v79 + 1) = "operator()";
      *(_QWORD *)&v80 = 3551;
      *((_QWORD *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cra"
                              "teFile::_FileMapping *>>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v60 = *(const char **)v60;
      goto LABEL_77;
    }
LABEL_59:
    v55 = *(unsigned int **)a1;
    v56 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 != v56)
    {
      v57 = v50 - v49;
      while ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3 > (unint64_t)*v55)
      {
        v58 = v55[1];
        if (v57 <= v58 || (_DWORD)v58 && v49[(v58 - 1)] != -1)
          break;
        v59 = v55[2];
        if (!v59 || v59 >= 12)
          break;
        v55 += 3;
        if (v55 == v56)
          goto LABEL_78;
      }
      *(_QWORD *)&v79 = "usd/crateFile.cpp";
      *((_QWORD *)&v79 + 1) = "operator()";
      *(_QWORD *)&v80 = 3551;
      *((_QWORD *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cra"
                              "teFile::_FileMapping *>>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v60 = *(const char **)v60;
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v79, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@", v60);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    }
  }
LABEL_78:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78);
}

void sub_20C2A2A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_20C2A2B50()
{
  __cxa_end_catch();
  JUMPOUT(0x20C2A2A98);
}

void sub_20C2A2B5C(void *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  JUMPOUT(0x20C2A2AACLL);
}

uint64_t sub_20C2A2B6C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2549883D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549883D0))
  {
    dword_2549883C8 = sub_20C2AEE38();
    __cxa_guard_release(&qword_2549883D0);
  }
  return dword_2549883C8;
}

void sub_20C2A2BC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549883D0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20C2B7438(a1 + 216, 0, 0.0, 0.5);
  for (i = 320; i != 2176; i += 32)
    *(_QWORD *)(a1 + i) = 0;
  do
  {
    *(_QWORD *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 4032);
  do
  {
    *(_QWORD *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 5888);
  *(_OWORD *)(a1 + 6432) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_QWORD *)(a1 + 6360) = 0x434453552D525850;
  *(_BYTE *)(a1 + 6369) = 10;
  *(_QWORD *)(a1 + 6448) = 0;
  *(_QWORD *)(a1 + 6456) = *(_QWORD *)a4;
  *(_OWORD *)(a1 + 6464) = *(_OWORD *)(a4 + 8);
  *(_BYTE *)(a1 + 6480) = *(_BYTE *)(a4 + 24);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a1 + 6488) = *a5;
  v13 = a5[1];
  *(_QWORD *)(a1 + 6496) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 6504) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 6512), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v16 = *a2;
    *(_QWORD *)(a1 + 6528) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 6512) = v16;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 6536), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    *(_QWORD *)(a1 + 6552) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 6536) = v17;
  }
  *(_QWORD *)(a1 + 6560) = 0;
  *(_BYTE *)(a1 + 6568) = 0;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, v10, v11);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitPread((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1);
  return a1;
}

void sub_20C2A2DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t *v11;
  void **v12;
  uint64_t v13;
  FILE *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  if (*(char *)(v13 + 166) < 0)
    operator delete(*v12);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v10 + 6488));
  v15 = *(FILE **)(v10 + 6456);
  if (v15 && *(_BYTE *)(v13 + 111))
    fclose(v15);
  sub_20C2AECCC((unint64_t **)(v10 + 6448));
  v16 = *(void **)(v10 + 6336);
  if (v16)
  {
    *(_QWORD *)(v10 + 6344) = v16;
    operator delete(v16);
  }
  sub_20C2A5B64(v11, 0);
  v17 = (_QWORD *)(v10 + 5832);
  v18 = -1856;
  while (1)
  {
    v19 = (_QWORD *)v17[3];
    if (v17 == v19)
      break;
    if (v19)
    {
      v20 = 5;
LABEL_13:
      (*(void (**)(void))(*v19 + 8 * v20))();
    }
    v17 -= 4;
    v18 += 32;
    if (!v18)
    {
      v21 = 0;
      while (1)
      {
        v22 = *(_QWORD **)(v10 + v21 + 4000);
        if ((_QWORD *)(v10 + v21 + 3976) == v22)
          break;
        if (v22)
        {
          v23 = 5;
LABEL_20:
          (*(void (**)(void))(*v22 + 8 * v23))();
        }
        v21 -= 32;
        if (v21 == -1856)
        {
          v24 = 1856;
          while (1)
          {
            v25 = *(_QWORD **)(v10 + v24 + 288);
            if ((_QWORD *)(v10 + v24 + 264) == v25)
              break;
            if (v25)
            {
              v26 = 5;
LABEL_27:
              (*(void (**)(void))(*v25 + 8 * v26))();
            }
            v24 -= 32;
            if (!v24)
            {
              a10 = (void **)(v10 + 224);
              sub_20C2AECF4(&a10);
              sub_20C2B7720(v10 + 168);
              v27 = *(void **)(v10 + 144);
              if (v27)
              {
                *(_QWORD *)(v10 + 152) = v27;
                operator delete(v27);
              }
              a10 = (void **)(v10 + 120);
              sub_20BEEB2B8(&a10);
              sub_20BFD6F90(&a10);
              v28 = *(void **)(v10 + 72);
              if (v28)
              {
                *(_QWORD *)(v10 + 80) = v28;
                operator delete(v28);
              }
              v29 = *(void **)(v10 + 48);
              if (v29)
              {
                *(_QWORD *)(v10 + 56) = v29;
                operator delete(v29);
              }
              a10 = (void **)(v10 + 24);
              sub_20C2B7648(&a10);
              v30 = *(void **)v10;
              if (*(_QWORD *)v10)
              {
                *(_QWORD *)(v10 + 8) = v30;
                operator delete(v30);
              }
              _Unwind_Resume(a1);
            }
          }
          v25 = (_QWORD *)(v10 + v24 + 264);
          v26 = 4;
          goto LABEL_27;
        }
      }
      v22 = (_QWORD *)(v10 + v21 + 3976);
      v23 = 4;
      goto LABEL_20;
    }
  }
  v19 = v17;
  v20 = 4;
  goto LABEL_13;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitPread(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *Instance;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[5];
  unint64_t v10;

  v2 = *((_QWORD *)this + 809);
  pxrInternal__aapl__pxrReserved__::ArchFileAdvise(*((_QWORD *)this + 807), *((_QWORD *)this + 808), v2, 3);
  v3 = *((_QWORD *)this + 808);
  v4 = *((_QWORD *)this + 809);
  v5 = *((_QWORD *)this + 807);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  v9[0] = this;
  v9[1] = v3;
  v9[2] = 0;
  v9[3] = v4;
  v9[4] = v5;
  sub_20C2A30E4((uint64_t)this, (uint64_t)v9, v2);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = v10;
  v8 = atomic_load(Instance + 18);
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    if (*((char *)this + 6535) < 0)
    {
      **((_BYTE **)this + 814) = 0;
      *((_QWORD *)this + 815) = 0;
    }
    else
    {
      *((_BYTE *)this + 6512) = 0;
      *((_BYTE *)this + 6535) = 0;
    }
    if (*((char *)this + 6559) < 0)
    {
      **((_BYTE **)this + 817) = 0;
      *((_QWORD *)this + 818) = 0;
    }
    else
    {
      *((_BYTE *)this + 6536) = 0;
      *((_BYTE *)this + 6559) = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::ArchFileAdvise(*((_QWORD *)this + 807), *((_QWORD *)this + 808), v2, 0);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
}

void sub_20C2A30D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2A30E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t *Instance;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned int *v55;
  unsigned int *v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  const char *v60;
  _OWORD v61[2];
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];
  uint64_t v66;
  _OWORD v67[2];
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _OWORD v77[2];
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78);
  v6 = *(_OWORD *)(a2 + 24);
  v77[0] = *(_OWORD *)(a2 + 8);
  v77[1] = v6;
  sub_20C2BF6CC((uint64_t)v77, a3, (uint64_t)&v79);
  *(_QWORD *)(a1 + 6440) = v84;
  v7 = v82;
  *(_OWORD *)(a1 + 6392) = v81;
  *(_OWORD *)(a1 + 6408) = v7;
  *(_OWORD *)(a1 + 6424) = v83;
  v8 = v80;
  *(_OWORD *)(a1 + 6360) = v79;
  *(_OWORD *)(a1 + 6376) = v8;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v10 = v78;
  v11 = atomic_load(Instance + 18);
  if (v10 >= v11
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    v12 = *(_OWORD *)(a2 + 16);
    v75[0] = *(_OWORD *)a2;
    v75[1] = v12;
    v76 = *(_QWORD *)(a2 + 32);
    sub_20C2BF93C((uint64_t)v75, a1 + 6360, (uint64_t)&v79);
    v13 = *(void **)(a1 + 6336);
    if (v13)
    {
      *(_QWORD *)(a1 + 6344) = v13;
      operator delete(v13);
      *(_QWORD *)(a1 + 6336) = 0;
      *(_QWORD *)(a1 + 6344) = 0;
      *(_QWORD *)(a1 + 6352) = 0;
    }
    *(_OWORD *)(a1 + 6336) = v79;
    *(_QWORD *)(a1 + 6352) = v80;
  }
  v14 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v14)
    v14 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v15 = v78;
  v16 = atomic_load(v14 + 18);
  if (v15 >= v16
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v14))
  {
    v18 = *(_OWORD *)(a2 + 16);
    v73[0] = *(_OWORD *)a2;
    v73[1] = v18;
    v74 = *(_QWORD *)(a2 + 32);
    sub_20C2BF9C8(a1, (uint64_t)v73);
  }
  v19 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v19)
    v19 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v20 = v78;
  v21 = atomic_load(v19 + 18);
  if (v20 >= v21
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v19))
  {
    v22 = *(_OWORD *)(a2 + 16);
    v71[0] = *(_OWORD *)a2;
    v71[1] = v22;
    v72 = *(_QWORD *)(a2 + 32);
    sub_20C2BFA38(a1, (uint64_t)v71, v17);
  }
  v23 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v23)
    v23 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v24 = v78;
  v25 = atomic_load(v23 + 18);
  if (v24 >= v25
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v23))
  {
    v26 = *(_OWORD *)(a2 + 16);
    v69[0] = *(_OWORD *)a2;
    v69[1] = v26;
    v70 = *(_QWORD *)(a2 + 32);
    sub_20C2C010C(a1, (uint64_t)v69, v17);
  }
  v27 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v27)
    v27 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v28 = v78;
  v29 = atomic_load(v27 + 18);
  if (v28 >= v29
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v27))
  {
    v30 = *(_OWORD *)(a2 + 16);
    v67[0] = *(_OWORD *)a2;
    v67[1] = v30;
    v68 = *(_QWORD *)(a2 + 32);
    sub_20C2C01D0(a1, (uint64_t)v67, v17);
  }
  v31 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v31)
    v31 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v32 = v78;
  v33 = atomic_load(v31 + 18);
  if (v32 >= v33
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v31))
  {
    v34 = *(_OWORD *)(a2 + 16);
    v65[0] = *(_OWORD *)a2;
    v65[1] = v34;
    v66 = *(_QWORD *)(a2 + 32);
    sub_20C2C0564(a1, (uint64_t)v65, v17);
  }
  v35 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v35)
    v35 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v36 = v78;
  v37 = atomic_load(v35 + 18);
  if (v36 >= v37
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v35))
  {
    v38 = *(_OWORD *)(a2 + 16);
    v63[0] = *(_OWORD *)a2;
    v63[1] = v38;
    v64 = *(_QWORD *)(a2 + 32);
    sub_20C2C081C(a1, (uint64_t)v63, v17);
  }
  v39 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v39)
    v39 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v40 = v78;
  v41 = atomic_load(v39 + 18);
  if (v40 >= v41
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v39))
  {
    v42 = *(_OWORD *)(a2 + 16);
    v61[0] = *(_OWORD *)a2;
    v61[1] = v42;
    v62 = *(_QWORD *)(a2 + 32);
    sub_20C2C0C04(a1, (uint64_t)v61, v17);
  }
  v43 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v43)
    v43 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v44 = v78;
  v45 = atomic_load(v43 + 18);
  if (v44 >= v45
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v43))
  {
    v46 = *(_QWORD *)(a1 + 48);
    v47 = *(_QWORD *)(a1 + 56);
    if (v46 != v47)
    {
      v48 = *(_QWORD *)(a1 + 48);
      while ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3 > (unint64_t)*(unsigned int *)(v48 + 4))
      {
        v48 += 16;
        if (v48 == v47)
          goto LABEL_51;
      }
      *(_QWORD *)&v79 = "usd/crateFile.cpp";
      *((_QWORD *)&v79 + 1) = "operator()";
      *(_QWORD *)&v80 = 3551;
      *((_QWORD *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_PreadStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v60 = *(const char **)v60;
      goto LABEL_77;
    }
LABEL_51:
    v49 = *(unsigned int **)(a1 + 72);
    v50 = *(unsigned int **)(a1 + 80);
    if (v49 != v50)
    {
      v51 = (v47 - v46) >> 4;
      v52 = *(unsigned int **)(a1 + 72);
      while (1)
      {
        v53 = *v52;
        if ((_DWORD)v53 != -1 && v51 <= v53)
          break;
        if (++v52 == v50)
          goto LABEL_59;
      }
      *(_QWORD *)&v79 = "usd/crateFile.cpp";
      *((_QWORD *)&v79 + 1) = "operator()";
      *(_QWORD *)&v80 = 3551;
      *((_QWORD *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_PreadStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v60 = *(const char **)v60;
      goto LABEL_77;
    }
LABEL_59:
    v55 = *(unsigned int **)a1;
    v56 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 != v56)
    {
      v57 = v50 - v49;
      while ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3 > (unint64_t)*v55)
      {
        v58 = v55[1];
        if (v57 <= v58 || (_DWORD)v58 && v49[(v58 - 1)] != -1)
          break;
        v59 = v55[2];
        if (!v59 || v59 >= 12)
          break;
        v55 += 3;
        if (v55 == v56)
          goto LABEL_78;
      }
      *(_QWORD *)&v79 = "usd/crateFile.cpp";
      *((_QWORD *)&v79 + 1) = "operator()";
      *(_QWORD *)&v80 = 3551;
      *((_QWORD *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_PreadStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v60 = *(const char **)v60;
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v79, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@", v60);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    }
  }
LABEL_78:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78);
}

void sub_20C2A36BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_20C2A3788()
{
  __cxa_end_catch();
  JUMPOUT(0x20C2A36D0);
}

void sub_20C2A3794(void *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  JUMPOUT(0x20C2A36E4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile(uint64_t a1, __int128 *a2, _QWORD *a3, char a4)
{
  uint64_t v8;
  char *v9;
  uint64_t i;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20C2B7438(a1 + 216, 0, 0.0, 0.5);
  for (i = 320; i != 2176; i += 32)
    *(_QWORD *)(a1 + i) = 0;
  do
  {
    *(_QWORD *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 4032);
  do
  {
    *(_QWORD *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 5888);
  *(_OWORD *)(a1 + 6432) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_QWORD *)(a1 + 6360) = 0x434453552D525850;
  *(_BYTE *)(a1 + 6369) = 10;
  *(_OWORD *)(a1 + 6448) = 0u;
  *(_OWORD *)(a1 + 6464) = 0u;
  *(_BYTE *)(a1 + 6480) = 0;
  *(_QWORD *)(a1 + 6488) = *a3;
  v11 = a3[1];
  *(_QWORD *)(a1 + 6496) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 6504) = a4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 6512), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v14 = *a2;
    *(_QWORD *)(a1 + 6528) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 6512) = v14;
  }
  *(_BYTE *)(a1 + 6568) = 0;
  *(_OWORD *)(a1 + 6536) = 0u;
  *(_OWORD *)(a1 + 6552) = 0u;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, v8, v9);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitAsset((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1);
  return a1;
}

void sub_20C2A3958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t **v12;
  uint64_t v13;
  FILE *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v10 + 6488));
  v15 = *(FILE **)(v10 + 6456);
  if (v15 && *(_BYTE *)(v13 + 111))
    fclose(v15);
  sub_20C2AECCC(v12);
  v16 = *(void **)(v10 + 6336);
  if (v16)
  {
    *(_QWORD *)(v10 + 6344) = v16;
    operator delete(v16);
  }
  sub_20C2A5B64(v11, 0);
  v17 = (_QWORD *)(v10 + 5832);
  v18 = -1856;
  while (1)
  {
    v19 = (_QWORD *)v17[3];
    if (v17 == v19)
      break;
    if (v19)
    {
      v20 = 5;
LABEL_11:
      (*(void (**)(void))(*v19 + 8 * v20))();
    }
    v17 -= 4;
    v18 += 32;
    if (!v18)
    {
      v21 = 0;
      while (1)
      {
        v22 = *(_QWORD **)(v10 + v21 + 4000);
        if ((_QWORD *)(v10 + v21 + 3976) == v22)
          break;
        if (v22)
        {
          v23 = 5;
LABEL_18:
          (*(void (**)(void))(*v22 + 8 * v23))();
        }
        v21 -= 32;
        if (v21 == -1856)
        {
          v24 = 1856;
          while (1)
          {
            v25 = *(_QWORD **)(v10 + v24 + 288);
            if ((_QWORD *)(v10 + v24 + 264) == v25)
              break;
            if (v25)
            {
              v26 = 5;
LABEL_25:
              (*(void (**)(void))(*v25 + 8 * v26))();
            }
            v24 -= 32;
            if (!v24)
            {
              a10 = (void **)(v10 + 224);
              sub_20C2AECF4(&a10);
              sub_20C2B7720(v10 + 168);
              v27 = *(void **)(v10 + 144);
              if (v27)
              {
                *(_QWORD *)(v10 + 152) = v27;
                operator delete(v27);
              }
              a10 = (void **)(v10 + 120);
              sub_20BEEB2B8(&a10);
              sub_20BFD6F90(&a10);
              v28 = *(void **)(v10 + 72);
              if (v28)
              {
                *(_QWORD *)(v10 + 80) = v28;
                operator delete(v28);
              }
              v29 = *(void **)(v10 + 48);
              if (v29)
              {
                *(_QWORD *)(v10 + 56) = v29;
                operator delete(v29);
              }
              a10 = (void **)(v10 + 24);
              sub_20C2B7648(&a10);
              v30 = *(void **)v10;
              if (*(_QWORD *)v10)
              {
                *(_QWORD *)(v10 + 8) = v30;
                operator delete(v30);
              }
              _Unwind_Resume(a1);
            }
          }
          v25 = (_QWORD *)(v10 + v24 + 264);
          v26 = 4;
          goto LABEL_25;
        }
      }
      v22 = (_QWORD *)(v10 + v21 + 3976);
      v23 = 4;
      goto LABEL_18;
    }
  }
  v19 = v17;
  v20 = 4;
  goto LABEL_11;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitAsset(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *Instance;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  uint64_t v26;

  v2 = *((_QWORD *)this + 811);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 812);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    *(_QWORD *)&v24 = this;
    *((_QWORD *)&v24 + 1) = v2;
    v25 = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v26 = 0;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *(_QWORD *)&v24 = this;
    *((_QWORD *)&v24 + 1) = v2;
    v25 = 0;
    v26 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
  v20 = v24;
  v21 = v25;
  if (v25)
  {
    v8 = (unint64_t *)&v25->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v22 = v26;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 811) + 16))(*((_QWORD *)this + 811));
  sub_20C2A3D58((uint64_t)this, &v20, v10);
  v11 = v21;
  if (v21)
  {
    v12 = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v15 = v23;
  v16 = atomic_load(Instance + 18);
  if (v15 < v16
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    if (*((char *)this + 6535) < 0)
    {
      **((_BYTE **)this + 814) = 0;
      *((_QWORD *)this + 815) = 0;
    }
    else
    {
      *((_BYTE *)this + 6512) = 0;
      *((_BYTE *)this + 6535) = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20C2A3D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v6;
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v6);
  _Unwind_Resume(a1);
}

void sub_20C2A3D58(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *Instance;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unint64_t v94;
  unsigned int *v95;
  unint64_t v96;
  unsigned int *v98;
  unsigned int *v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  const char *v103;
  __int128 v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  __int128 v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  __int128 v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128);
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v125 = *((_QWORD *)a2 + 1);
  v126 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v127 = *((_QWORD *)a2 + 3);
  sub_20C2A09FC(&v125, a3, (uint64_t)&v129);
  *(_QWORD *)(a1 + 6440) = v134;
  v9 = v132;
  *(_OWORD *)(a1 + 6392) = v131;
  *(_OWORD *)(a1 + 6408) = v9;
  *(_OWORD *)(a1 + 6424) = v133;
  v10 = v130;
  *(_OWORD *)(a1 + 6360) = v129;
  *(_OWORD *)(a1 + 6376) = v10;
  v11 = v126;
  if (v126)
  {
    v12 = (unint64_t *)&v126->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v15 = v128;
  v16 = atomic_load(Instance + 18);
  if (v15 >= v16
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    v122 = *a2;
    v18 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v123 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v124 = *((_QWORD *)a2 + 3);
    sub_20C2C36D4((uint64_t)&v122, a1 + 6360, (uint64_t)&v129);
    v21 = *(void **)(a1 + 6336);
    if (v21)
    {
      *(_QWORD *)(a1 + 6344) = v21;
      operator delete(v21);
      *(_QWORD *)(a1 + 6336) = 0;
      *(_QWORD *)(a1 + 6344) = 0;
      *(_QWORD *)(a1 + 6352) = 0;
    }
    *(_OWORD *)(a1 + 6336) = v129;
    *(_QWORD *)(a1 + 6352) = v130;
    *(_QWORD *)&v130 = 0;
    v129 = 0uLL;
    v22 = v123;
    if (v123)
    {
      v23 = (unint64_t *)&v123->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v25 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v25)
    v25 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v26 = v128;
  v27 = atomic_load(v25 + 18);
  if (v26 >= v27
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v25))
  {
    v28 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v32 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v32)
    v32 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v33 = v128;
  v34 = atomic_load(v32 + 18);
  if (v33 >= v34
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v32))
  {
    v119 = *a2;
    v35 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v120 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v121 = *((_QWORD *)a2 + 3);
    sub_20C2C3760(a1, (uint64_t)&v119, v17);
    v38 = v120;
    if (v120)
    {
      v39 = (unint64_t *)&v120->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v41 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v41)
    v41 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v42 = v128;
  v43 = atomic_load(v41 + 18);
  if (v42 >= v43
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v41))
  {
    v116 = *a2;
    v44 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v117 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v118 = *((_QWORD *)a2 + 3);
    sub_20C2C3EA0(a1, (uint64_t)&v116, v17);
    v47 = v117;
    if (v117)
    {
      v48 = (unint64_t *)&v117->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  v50 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v50)
    v50 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v51 = v128;
  v52 = atomic_load(v50 + 18);
  if (v51 >= v52
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v50))
  {
    v113 = *a2;
    v53 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v114 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v115 = *((_QWORD *)a2 + 3);
    sub_20C2C3F64(a1, (uint64_t)&v113, v17);
    v56 = v114;
    if (v114)
    {
      v57 = (unint64_t *)&v114->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  v59 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v59)
    v59 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v60 = v128;
  v61 = atomic_load(v59 + 18);
  if (v60 >= v61
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v59))
  {
    v110 = *a2;
    v62 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v111 = v62;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v112 = *((_QWORD *)a2 + 3);
    sub_20C2C431C(a1, (uint64_t)&v110, v17);
    v65 = v111;
    if (v111)
    {
      v66 = (unint64_t *)&v111->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  v68 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v68)
    v68 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v69 = v128;
  v70 = atomic_load(v68 + 18);
  if (v69 >= v70
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v68))
  {
    v107 = *a2;
    v71 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v108 = v71;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    v109 = *((_QWORD *)a2 + 3);
    sub_20C2C45D4(a1, (uint64_t)&v107, v17);
    v74 = v108;
    if (v108)
    {
      v75 = (unint64_t *)&v108->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  v77 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v77)
    v77 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v78 = v128;
  v79 = atomic_load(v77 + 18);
  if (v78 >= v79
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v77))
  {
    v104 = *a2;
    v80 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v105 = v80;
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v106 = *((_QWORD *)a2 + 3);
    sub_20C2C4ACC(a1, (uint64_t)&v104, v17);
    v83 = v105;
    if (v105)
    {
      v84 = (unint64_t *)&v105->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
  }
  v86 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v86)
    v86 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v87 = v128;
  v88 = atomic_load(v86 + 18);
  if (v87 >= v88
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v86))
  {
    v89 = *(_QWORD *)(a1 + 48);
    v90 = *(_QWORD *)(a1 + 56);
    if (v89 != v90)
    {
      v91 = *(_QWORD *)(a1 + 48);
      while ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3 > (unint64_t)*(unsigned int *)(v91 + 4))
      {
        v91 += 16;
        if (v91 == v90)
          goto LABEL_113;
      }
      *(_QWORD *)&v129 = "usd/crateFile.cpp";
      *((_QWORD *)&v129 + 1) = "operator()";
      *(_QWORD *)&v130 = 3551;
      *((_QWORD *)&v130 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections("
                               "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                               "rReserved__::Usd_CrateFile::_AssetStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v131) = 0;
      v103 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v103 = *(const char **)v103;
      goto LABEL_139;
    }
LABEL_113:
    v92 = *(unsigned int **)(a1 + 72);
    v93 = *(unsigned int **)(a1 + 80);
    if (v92 != v93)
    {
      v94 = (v90 - v89) >> 4;
      v95 = *(unsigned int **)(a1 + 72);
      while (1)
      {
        v96 = *v95;
        if ((_DWORD)v96 != -1 && v94 <= v96)
          break;
        if (++v95 == v93)
          goto LABEL_121;
      }
      *(_QWORD *)&v129 = "usd/crateFile.cpp";
      *((_QWORD *)&v129 + 1) = "operator()";
      *(_QWORD *)&v130 = 3551;
      *((_QWORD *)&v130 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections("
                               "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                               "rReserved__::Usd_CrateFile::_AssetStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v131) = 0;
      v103 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v103 = *(const char **)v103;
      goto LABEL_139;
    }
LABEL_121:
    v98 = *(unsigned int **)a1;
    v99 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 != v99)
    {
      v100 = v93 - v92;
      while ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3 > (unint64_t)*v98)
      {
        v101 = v98[1];
        if (v100 <= v101 || (_DWORD)v101 && v92[(v101 - 1)] != -1)
          break;
        v102 = v98[2];
        if (!v102 || v102 >= 12)
          break;
        v98 += 3;
        if (v98 == v99)
          goto LABEL_140;
      }
      *(_QWORD *)&v129 = "usd/crateFile.cpp";
      *((_QWORD *)&v129 + 1) = "operator()";
      *(_QWORD *)&v130 = 3551;
      *((_QWORD *)&v130 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections("
                               "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                               "rReserved__::Usd_CrateFile::_AssetStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v131) = 0;
      v103 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0)
        v103 = *(const char **)v103;
LABEL_139:
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v129, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@", v103);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    }
  }
LABEL_140:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v128);
}

void sub_20C2A4658(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_20C2A46BC()
{
  JUMPOUT(0x20C2A46C4);
}

void sub_20C2A475C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C2A4694);
}

void sub_20C2A4768(void *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  JUMPOUT(0x20C2A46B4);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  char *v2;
  unsigned __int8 v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  char v24;
  const char *v25;
  int v26;
  char *v27;
  int v28;
  void *v29;
  FILE *v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t i;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v37;
  uint64_t v38;
  uint64_t v39;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void **v46[4];
  char v47;

  v2 = (char *)this + 6480;
  v3 = atomic_load((unsigned __int8 *)&qword_254988360);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254988360))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25473C8E8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988360);
  }
  if (!v2[88])
    goto LABEL_30;
  v4 = *((_QWORD *)this + 806);
  if (!v4)
    goto LABEL_30;
  v5 = (char *)this + 6448;
  if (!*((_QWORD *)this + 820))
  {
LABEL_28:
    if (*(_QWORD *)v5)
      sub_20C2A0EB4((unint64_t **)this + 806);
LABEL_30:
    sub_20C2A4CBC((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + 96));
    sub_20C2A4D30((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + 120));
    sub_20C2A4DA4((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + 144));
    sub_20C2A4E24((uint64_t *)this + 21);
    sub_20C2A4E7C((uint64_t)this + 216);
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DeleteValueHandlers(this);
    goto LABEL_31;
  }
  v6 = *(_QWORD *)(v4 + 24);
  v7 = sub_20C2A4C20(v6);
  v8 = sub_20C2A4C20(v6 + *(_QWORD *)(*(_QWORD *)v5 + 32) - 1) - v7 + 1;
  v9 = (char *)operator new[](v8);
  v10 = sub_20C2AEECC();
  v11 = sub_20C2A0500();
  if (pxrInternal__aapl__pxrReserved__::ArchQueryMappedMemoryResidency((pxrInternal__aapl__pxrReserved__ *)(v10 & v6), v8 * v11, v9, v12))
  {
    if (v8)
    {
      v14 = 0;
      v15 = 0;
      v16 = (char *)*((_QWORD *)this + 820);
      v17 = v9;
      v18 = v8;
      do
      {
        v19 = *v16++;
        v20 = *v17 & 1;
        v21 = v19 & 1;
        v15 += v20;
        v14 += v21;
        v22 = (_DWORD)v20 == 0;
        if ((*v17 & 1) != 0)
          v23 = 45;
        else
          v23 = 32;
        if (v22)
          v24 = 33;
        else
          v24 = 43;
        if ((_DWORD)v21)
          v23 = v24;
        *v17++ = v23;
        --v18;
      }
      while (v18);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    std::mutex::lock(&stru_25473C8E8);
    v25 = (char *)this + 6512;
    if (v2[55] < 0)
      v25 = *(const char **)v25;
    printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\npage map for %s\n%lld pages, %lld used (%.1f%%), %lld in mem (%.1f%%)\nused %.1f%% of pages in mem\nlegend: '+': in mem & used,     '-': in mem & unused\n        '!': not in mem & used, ' ': not in mem & unused\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n", v25, v8, v14, (double)v14 * 100.0 / (double)v8, v15, (double)v15 * 100.0 / (double)v8, (double)v14 * 100.0 / (double)v15);
    if (v8)
    {
      v26 = 0;
      v27 = v9;
      do
      {
        v28 = *v27++;
        putchar(v28);
        if (v26 == 80)
        {
          putchar(10);
          v26 = -1;
        }
        ++v26;
        --v8;
      }
      while (v8);
    }
    puts("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
    std::mutex::unlock(&stru_25473C8E8);
    operator delete[](v9);
    if (!v2[88])
      goto LABEL_30;
    goto LABEL_28;
  }
  v46[0] = (void **)"usd/crateFile.cpp";
  v46[1] = (void **)"~CrateFile";
  v46[2] = (void **)2683;
  v46[3] = (void **)"pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile()";
  v47 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v46, (pxrInternal__aapl__pxrReserved__ *)"failed to obtain memory residency information", v13);
  operator delete[](v9);
LABEL_31:
  v29 = (void *)*((_QWORD *)this + 820);
  *((_QWORD *)this + 820) = 0;
  if (v29)
    operator delete[](v29);
  if (v2[79] < 0)
    operator delete(*((void **)this + 817));
  if (v2[55] < 0)
    operator delete(*((void **)this + 814));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + 6488));
  v30 = (FILE *)*((_QWORD *)this + 807);
  if (v30 && *v2)
    fclose(v30);
  sub_20C2AECCC((unint64_t **)this + 806);
  v31 = (void *)*((_QWORD *)this + 792);
  if (v31)
  {
    *((_QWORD *)this + 793) = v31;
    operator delete(v31);
  }
  sub_20C2A5B64((uint64_t *)this + 791, 0);
  v32 = 0;
  v33 = (char *)this + 5832;
  do
  {
    v34 = *(char **)((char *)this + v32 + 5856);
    if (&v33[v32] == v34)
    {
      v34 = &v33[v32];
      v35 = 4;
    }
    else
    {
      if (!v34)
        goto LABEL_48;
      v35 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_48:
    v32 -= 32;
  }
  while (v32 != -1856);
  for (i = 0; i != -1856; i -= 32)
  {
    v37 = *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)((char *)this + i + 4000);
    if ((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + i + 3976) == v37)
    {
      v37 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + i + 3976);
      v38 = 4;
    }
    else
    {
      if (!v37)
        continue;
      v38 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  }
  v39 = 1856;
  do
  {
    v40 = *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)((char *)this + v39 + 288);
    if ((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + v39 + 264) == v40)
    {
      v40 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + v39 + 264);
      v41 = 4;
    }
    else
    {
      if (!v40)
        goto LABEL_62;
      v41 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_62:
    v39 -= 32;
  }
  while (v39);
  v46[0] = (void **)((char *)this + 224);
  sub_20C2AECF4(v46);
  sub_20C2B7720((uint64_t)this + 168);
  v42 = (void *)*((_QWORD *)this + 18);
  if (v42)
  {
    *((_QWORD *)this + 19) = v42;
    operator delete(v42);
  }
  v46[0] = (void **)((char *)this + 120);
  sub_20BEEB2B8(v46);
  v46[0] = (void **)((char *)this + 96);
  sub_20BFD6F90(v46);
  v43 = (void *)*((_QWORD *)this + 9);
  if (v43)
  {
    *((_QWORD *)this + 10) = v43;
    operator delete(v43);
  }
  v44 = (void *)*((_QWORD *)this + 6);
  if (v44)
  {
    *((_QWORD *)this + 7) = v44;
    operator delete(v44);
  }
  v46[0] = (void **)((char *)this + 24);
  sub_20C2B7648(v46);
  v45 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v45;
    operator delete(v45);
  }
}

unint64_t sub_20C2A4C20(unint64_t a1)
{
  unsigned __int8 v2;
  char v3;
  unint64_t v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254988400);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254988400))
  {
    qword_2549883F8 = sub_20C2AEECC();
    __cxa_guard_release(&qword_254988400);
  }
  v3 = 0;
  v4 = ~qword_2549883F8;
  qword_2549883F8 = ~qword_2549883F8;
  do
  {
    v5 = v4;
    v4 >>= 1;
    ++v3;
  }
  while (v5 >= 2);
  qword_2549883F8 = v4;
  return a1 >> v3;
}

void sub_20C2A4CA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988400);
  _Unwind_Resume(a1);
}

void sub_20C2A4CBC(pxrInternal__aapl__pxrReserved__ *a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *(_OWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0)
    sub_20C2C7700((pxrInternal__aapl__pxrReserved__ *)&v1);
  v3 = (void **)&v1;
  sub_20BFD6F90(&v3);
}

void sub_20C2A4D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

void sub_20C2A4D30(pxrInternal__aapl__pxrReserved__ *a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *(_OWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0)
    sub_20C2C79B8((pxrInternal__aapl__pxrReserved__ *)&v1);
  v3 = (void **)&v1;
  sub_20BEEB2B8(&v3);
}

void sub_20C2A4D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

void sub_20C2A4DA4(pxrInternal__aapl__pxrReserved__ *a1)
{
  char ShouldSynchronizeAsyncDestroyCalls;
  void *v2;
  void *v3;
  void *__p[2];
  uint64_t v5;

  *(_OWORD *)__p = *(_OWORD *)a1;
  v3 = __p[0];
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  ShouldSynchronizeAsyncDestroyCalls = pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1);
  v2 = v3;
  if ((ShouldSynchronizeAsyncDestroyCalls & 1) == 0)
  {
    sub_20C2C7C70((pxrInternal__aapl__pxrReserved__ *)__p);
    v2 = __p[0];
  }
  if (v2)
  {
    __p[1] = v2;
    operator delete(v2);
  }
}

void sub_20C2A4E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2A4E24(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  uint64_t v3[5];

  v1 = (pxrInternal__aapl__pxrReserved__ *)sub_20BF20A20((uint64_t)v3, a1);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(v1) & 1) == 0)
    sub_20C2C7F10(v3);
  return sub_20C2B7720((uint64_t)v3);
}

void sub_20C2A4E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2B7720((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2A4E7C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  _BYTE v2[8];
  uint64_t v3;
  void **v4;

  v1 = (pxrInternal__aapl__pxrReserved__ *)sub_20C2C8248((uint64_t)v2, a1);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(v1) & 1) == 0)
    sub_20C2C81AC((uint64_t)v2);
  v4 = (void **)&v3;
  sub_20C2AECF4(&v4);
}

void sub_20C2A4ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 24) = &a11;
  sub_20C2AECF4((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DeleteValueHandlers(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;

  v2 = (uint64_t *)*((_QWORD *)this + 734);
  if (v2)
  {
    sub_20C2B2820(v2 + 1, 0);
    sub_20BF2B090(v2, 0);
    operator delete(v2);
  }
  v3 = (uint64_t *)*((_QWORD *)this + 735);
  if (v3)
  {
    sub_20C2B28C4(v3 + 1, 0);
    sub_20BF2B090(v3, 0);
    operator delete(v3);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 736);
  if (v4)
  {
    sub_20C2B2968(v4 + 1, 0);
    sub_20BF2B090(v4, 0);
    operator delete(v4);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 737);
  if (v5)
  {
    sub_20C2B2A0C(v5 + 1, 0);
    sub_20BF2B090(v5, 0);
    operator delete(v5);
  }
  v6 = (uint64_t *)*((_QWORD *)this + 738);
  if (v6)
  {
    sub_20C2B2AB0(v6 + 1, 0);
    sub_20BF2B090(v6, 0);
    operator delete(v6);
  }
  v7 = (uint64_t *)*((_QWORD *)this + 739);
  if (v7)
  {
    sub_20C2B2B54(v7 + 1, 0);
    sub_20BF2B090(v7, 0);
    operator delete(v7);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 740);
  if (v8)
  {
    sub_20C2B2BF8(v8 + 1, 0);
    sub_20BF2B090(v8, 0);
    operator delete(v8);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 741);
  if (v9)
  {
    sub_20C2B2C9C(v9 + 1, 0);
    sub_20BF2B090(v9, 0);
    operator delete(v9);
  }
  v10 = (uint64_t *)*((_QWORD *)this + 742);
  if (v10)
  {
    sub_20C2B2D40(v10 + 1, 0);
    sub_20BF2B090(v10, 0);
    operator delete(v10);
  }
  v11 = (uint64_t *)*((_QWORD *)this + 743);
  if (v11)
  {
    sub_20C2B2DE4(v11 + 1, 0);
    sub_20BEEC0B8(v11, 0);
    operator delete(v11);
  }
  v12 = (uint64_t *)*((_QWORD *)this + 744);
  if (v12)
  {
    sub_20C2B2E88(v12 + 1, 0);
    sub_20BF2B064(v12, 0);
    operator delete(v12);
  }
  v13 = (uint64_t *)*((_QWORD *)this + 745);
  if (v13)
  {
    sub_20C2B2F2C(v13 + 1, 0);
    sub_20C2B2FD0(v13, 0);
    operator delete(v13);
  }
  v14 = (uint64_t *)*((_QWORD *)this + 749);
  if (v14)
  {
    sub_20C2B3070(v14 + 1, 0);
    sub_20BF2B090(v14, 0);
    operator delete(v14);
  }
  v15 = (uint64_t *)*((_QWORD *)this + 750);
  if (v15)
  {
    sub_20C2B3114(v15 + 1, 0);
    sub_20BF2B090(v15, 0);
    operator delete(v15);
  }
  v16 = (uint64_t *)*((_QWORD *)this + 751);
  if (v16)
  {
    sub_20C2B31B8(v16 + 1, 0);
    sub_20BF2B090(v16, 0);
    operator delete(v16);
  }
  v17 = (uint64_t *)*((_QWORD *)this + 752);
  if (v17)
  {
    sub_20C2B325C(v17 + 1, 0);
    sub_20BF2B090(v17, 0);
    operator delete(v17);
  }
  v18 = (uint64_t *)*((_QWORD *)this + 753);
  if (v18)
  {
    sub_20C2B3300(v18 + 1, 0);
    sub_20BF2B090(v18, 0);
    operator delete(v18);
  }
  v19 = (uint64_t *)*((_QWORD *)this + 754);
  if (v19)
  {
    sub_20C2B33A4(v19 + 1, 0);
    sub_20BF2B090(v19, 0);
    operator delete(v19);
  }
  v20 = (uint64_t *)*((_QWORD *)this + 755);
  if (v20)
  {
    sub_20C2B3448(v20 + 1, 0);
    sub_20BF2B090(v20, 0);
    operator delete(v20);
  }
  v21 = (uint64_t *)*((_QWORD *)this + 756);
  if (v21)
  {
    sub_20C2B34EC(v21 + 1, 0);
    sub_20BF2B090(v21, 0);
    operator delete(v21);
  }
  v22 = (uint64_t *)*((_QWORD *)this + 757);
  if (v22)
  {
    sub_20C2B3590(v22 + 1, 0);
    sub_20BF2B090(v22, 0);
    operator delete(v22);
  }
  v23 = (uint64_t *)*((_QWORD *)this + 758);
  if (v23)
  {
    sub_20C2B3634(v23 + 1, 0);
    sub_20BF2B090(v23, 0);
    operator delete(v23);
  }
  v24 = (uint64_t *)*((_QWORD *)this + 759);
  if (v24)
  {
    sub_20C2B36D8(v24 + 1, 0);
    sub_20BF2B090(v24, 0);
    operator delete(v24);
  }
  v25 = (uint64_t *)*((_QWORD *)this + 760);
  if (v25)
  {
    sub_20C2B377C(v25 + 1, 0);
    sub_20BF2B090(v25, 0);
    operator delete(v25);
  }
  v26 = (uint64_t *)*((_QWORD *)this + 761);
  if (v26)
  {
    sub_20C2B3820(v26 + 1, 0);
    sub_20BF2B090(v26, 0);
    operator delete(v26);
  }
  v27 = (uint64_t *)*((_QWORD *)this + 762);
  if (v27)
  {
    sub_20C2B38C4(v27 + 1, 0);
    sub_20BF2B090(v27, 0);
    operator delete(v27);
  }
  v28 = (uint64_t *)*((_QWORD *)this + 763);
  if (v28)
  {
    sub_20C2B3968(v28 + 1, 0);
    sub_20BF2B090(v28, 0);
    operator delete(v28);
  }
  v29 = (uint64_t *)*((_QWORD *)this + 746);
  if (v29)
  {
    sub_20C2B3A0C(v29 + 1, 0);
    sub_20BF2B090(v29, 0);
    operator delete(v29);
  }
  v30 = (uint64_t *)*((_QWORD *)this + 747);
  if (v30)
  {
    sub_20C2B3AB0(v30 + 1, 0);
    sub_20BF2B090(v30, 0);
    operator delete(v30);
  }
  v31 = (uint64_t *)*((_QWORD *)this + 748);
  if (v31)
  {
    sub_20C2B3B54(v31 + 1, 0);
    sub_20BF2B090(v31, 0);
    operator delete(v31);
  }
  v32 = (uint64_t *)*((_QWORD *)this + 764);
  if (v32)
  {
    sub_20C2B3BF8(v32 + 1, 0);
    sub_20C2B3D54(v32, 0);
    operator delete(v32);
  }
  v33 = (uint64_t *)*((_QWORD *)this + 765);
  if (v33)
  {
    sub_20C2B3DF8(v33 + 1, 0);
    sub_20C2B3FC4(v33, 0);
    operator delete(v33);
  }
  v34 = (uint64_t *)*((_QWORD *)this + 766);
  if (v34)
  {
    sub_20C2B40E8(v34 + 1, 0);
    sub_20C2B42B4(v34, 0);
    operator delete(v34);
  }
  v35 = (uint64_t *)*((_QWORD *)this + 767);
  if (v35)
  {
    sub_20C2B43D8(v35 + 1, 0);
    sub_20C2B45A4(v35, 0);
    operator delete(v35);
  }
  v36 = (uint64_t *)*((_QWORD *)this + 768);
  if (v36)
  {
    sub_20C2B46C8(v36 + 1, 0);
    sub_20C2B4894(v36, 0);
    operator delete(v36);
  }
  v37 = (uint64_t *)*((_QWORD *)this + 769);
  if (v37)
  {
    sub_20C2B49B8(v37 + 1, 0);
    sub_20C2B4B70(v37, 0);
    operator delete(v37);
  }
  v38 = (uint64_t *)*((_QWORD *)this + 770);
  if (v38)
  {
    sub_20C2B4C94(v38 + 1, 0);
    sub_20C2B4B70(v38, 0);
    operator delete(v38);
  }
  v39 = (uint64_t *)*((_QWORD *)this + 771);
  if (v39)
  {
    sub_20C2B4D38(v39 + 1, 0);
    sub_20C2B4B70(v39, 0);
    operator delete(v39);
  }
  v40 = (uint64_t *)*((_QWORD *)this + 772);
  if (v40)
  {
    sub_20C2B4DDC(v40 + 1, 0);
    sub_20C2B4B70(v40, 0);
    operator delete(v40);
  }
  v41 = (uint64_t *)*((_QWORD *)this + 773);
  if (v41)
  {
    sub_20C2B4E80(v41 + 1, 0);
    sub_20C2B4FE8(v41, 0);
    operator delete(v41);
  }
  v42 = (uint64_t *)*((_QWORD *)this + 774);
  if (v42)
  {
    sub_20C2B5098(v42 + 1, 0);
    sub_20C2B5200(v42, 0);
    operator delete(v42);
  }
  v43 = (uint64_t *)*((_QWORD *)this + 775);
  if (v43)
  {
    sub_20C2B52B0(v43 + 1, 0);
    sub_20BF2B090(v43, 0);
    operator delete(v43);
  }
  v44 = (uint64_t *)*((_QWORD *)this + 776);
  if (v44)
  {
    sub_20C2B5354(v44 + 1, 0);
    sub_20BF2B090(v44, 0);
    operator delete(v44);
  }
  v45 = (uint64_t *)*((_QWORD *)this + 777);
  if (v45)
  {
    sub_20C2B53F8(v45 + 1, 0);
    sub_20BF2B090(v45, 0);
    operator delete(v45);
  }
  v46 = (uint64_t *)*((_QWORD *)this + 778);
  if (v46)
  {
    sub_20C2B549C(v46 + 1, 0);
    sub_20C2B55FC(v46, 0);
    operator delete(v46);
  }
  v47 = (uint64_t *)*((_QWORD *)this + 779);
  if (v47)
  {
    sub_20C2B56A0(v47 + 1, 0);
    sub_20C2B5814(v47, 0);
    operator delete(v47);
  }
  v48 = (uint64_t *)*((_QWORD *)this + 780);
  if (v48)
  {
    sub_20C2B58CC(v48 + 1, 0);
    sub_20C2B5A48(v48, 0);
    operator delete(v48);
  }
  v49 = (uint64_t *)*((_QWORD *)this + 781);
  if (v49)
  {
    sub_20C2B5B30(v49 + 1, 0);
    sub_20C2B5C98(v49, 0);
    operator delete(v49);
  }
  v50 = (uint64_t *)*((_QWORD *)this + 782);
  if (v50)
  {
    sub_20C2B5CC4(v50 + 1, 0);
    sub_20C2B5C98(v50, 0);
    operator delete(v50);
  }
  v51 = (uint64_t *)*((_QWORD *)this + 783);
  if (v51)
  {
    sub_20C2B5D68(v51 + 1, 0);
    sub_20C2B5ED0(v51, 0);
    operator delete(v51);
  }
  v52 = (uint64_t *)*((_QWORD *)this + 784);
  if (v52)
  {
    sub_20C2B5F80(v52 + 1, 0);
    sub_20BF2B090(v52, 0);
    operator delete(v52);
  }
  v53 = (uint64_t *)*((_QWORD *)this + 785);
  if (v53)
  {
    sub_20C2B6024(v53 + 1, 0);
    sub_20C12AA40(v53, 0);
    operator delete(v53);
  }
  v54 = (uint64_t *)*((_QWORD *)this + 786);
  if (v54)
  {
    sub_20C2B6178(v54 + 1, 0);
    sub_20C12AA40(v54, 0);
    operator delete(v54);
  }
  v55 = (uint64_t *)*((_QWORD *)this + 787);
  if (v55)
  {
    sub_20C2B621C(v55 + 1, 0);
    sub_20C2B63E8(v55, 0);
    operator delete(v55);
  }
  v56 = (uint64_t *)*((_QWORD *)this + 788);
  if (v56)
  {
    sub_20C2B650C(v56 + 1, 0);
    sub_20C2B66D8(v56, 0);
    operator delete(v56);
  }
  v57 = (uint64_t *)*((_QWORD *)this + 789);
  if (v57)
  {
    sub_20C2B67FC(v57 + 1, 0);
    sub_20BF2B090(v57, 0);
    operator delete(v57);
  }
  v58 = (uint64_t *)*((_QWORD *)this + 790);
  if (v58)
  {
    sub_20C2B68A0(v58 + 1, 0);
    sub_20C2B6944(v58, 0);
    operator delete(v58);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanPackTo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  FILE *v5;
  FILE *v6;
  size_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void **p_s1;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL8 v22;
  void *v23;
  void *__s1;
  size_t __n;
  unsigned __int8 v27;

  v3 = a1 + 6535;
  if (*(char *)(a1 + 6535) < 0)
  {
    if (*(_QWORD *)(a1 + 6520))
      goto LABEL_3;
    return 1;
  }
  if (!*(_BYTE *)(a1 + 6535))
    return 1;
LABEL_3:
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = pxrInternal__aapl__pxrReserved__::ArchOpenFile(v4, "rb");
  if (v5)
  {
    v6 = v5;
    pxrInternal__aapl__pxrReserved__::ArchGetFileName(v5, &__s1);
    if ((v27 & 0x80u) == 0)
      v7 = v27;
    else
      v7 = __n;
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a1 + 6544);
    if (v7 == v8)
    {
      v12 = *(unsigned __int8 **)(v3 + 1);
      v11 = (unsigned __int8 *)(v3 + 1);
      v10 = v12;
      if (v9 >= 0)
        v13 = v11;
      else
        v13 = v10;
      if ((v27 & 0x80) != 0)
      {
        v23 = __s1;
        v22 = memcmp(__s1, v13, __n) == 0;
        goto LABEL_32;
      }
      if (!v27)
      {
        v22 = 1;
        goto LABEL_34;
      }
      v14 = v27 - 1;
      p_s1 = &__s1;
      do
      {
        v17 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v16 = v17;
        v19 = *v13++;
        v18 = v19;
        v21 = v14-- != 0;
        v22 = v16 == v18;
      }
      while (v16 == v18 && v21);
    }
    else
    {
      v22 = 0;
    }
    if ((v27 & 0x80) == 0)
    {
LABEL_34:
      fclose(v6);
      return v22;
    }
    v23 = __s1;
LABEL_32:
    operator delete(v23);
    goto LABEL_34;
  }
  return 0;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::StartPacking(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *Resolver;
  void *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  const char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  uint64_t v16;
  const char *v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)a1);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAssetForWrite((uint64_t)Resolver);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  if (v19)
  {
    v7 = operator new(0x2E0uLL);
    sub_20C2AEF44((uint64_t)v7, (uint64_t)a1, &v19, (__int128 *)a2);
    sub_20C2A5B64(a1 + 791, (uint64_t)v7);
    v8 = (void *)*a1;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    if (v8)
      operator delete(v8);
    if (a1[15] == a1[16])
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, ";-)");
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v9 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
    }
  }
  else
  {
    __p[0] = "usd/crateFile.cpp";
    __p[1] = "StartPacking";
    v16 = 2776;
    v17 = "CrateFile::Packer pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::StartPacking(const string &)";
    v18 = 0;
    if (*(char *)(a2 + 23) >= 0)
      v11 = (const char *)a2;
    else
      v11 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open %s for write", v11);
  }
  *a3 = a1;
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20C2A5AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  if ((a11 & 7) != 0)
  {
    v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v11 - 48));
  _Unwind_Resume(a1);
}

void sub_20C2A5B4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x20C2A5B44);
}

void sub_20C2A5B64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2C853C(v3);
    operator delete(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  char *v11;
  int v13;

  v4 = *((_QWORD *)this + 791);
  v13 = -1;
  v5 = sub_20C200698(v4, a2, (uint64_t *)a2, &v13);
  if (v6)
  {
    *((_DWORD *)v5 + 6) = (*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3;
    v7 = (_QWORD *)*((_QWORD *)this + 16);
    if ((unint64_t)v7 >= *((_QWORD *)this + 17))
    {
      v11 = sub_20BFCA068((char **)this + 15, (uint64_t *)a2);
    }
    else
    {
      v8 = *(_QWORD *)a2;
      *v7 = *(_QWORD *)a2;
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 2, v9));
        if ((v10 & 1) == 0)
          *v7 &= 0xFFFFFFFFFFFFFFF8;
      }
      v11 = (char *)(v7 + 1);
    }
    *((_QWORD *)this + 16) = v11;
  }
  return *((unsigned int *)v5 + 6);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::operator BOOL(uint64_t a1)
{
  return *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 6328) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::Close(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **this)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v2;
  uint64_t v3;
  int v4;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t *Resolver;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  FILE *v21;
  uint64_t v22;
  FILE *v23;
  uint64_t v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  __sFILE *v32;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v33;
  __int128 v34;
  void *__p[2];
  uint64_t v36;
  const char *v37;
  char v38;

  v2 = *this;
  if (!v2 || !*((_QWORD *)v2 + 791))
  {
    __p[0] = "usd/crateFile.cpp";
    __p[1] = "Close";
    v36 = 2804;
    v37 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::Close()";
    v38 = 0;
    v10 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "_crate && _crate->_packCtx", 0))return v10;
    v2 = *this;
  }
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Write(v2);
  v3 = *(_QWORD *)(*((_QWORD *)*this + 791) + 720);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v5 = *this;
  if (!v4)
  {
    sub_20C2A5B64((uint64_t *)v5 + 791, 0);
    return 0;
  }
  std::string::operator=((std::string *)((char *)v5 + 6512), (const std::string *)(*((_QWORD *)v5 + 791) + 224));
  sub_20C2A5B64((uint64_t *)*this + 791, 0);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v6);
  v8 = *this;
  if (*((char *)*this + 6535) < 0)
  {
    sub_20BDDBFAC(__p, *((void **)v8 + 814), *((_QWORD *)v8 + 815));
  }
  else
  {
    v9 = (char *)v8 + 6512;
    *(_OWORD *)__p = *(_OWORD *)v9;
    v36 = *((_QWORD *)v9 + 2);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  if (!(_QWORD)v34)
    goto LABEL_36;
  if (*((_BYTE *)*this + 6504))
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v34 + 48))(__p);
    v11 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    v34 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v16 = (unint64_t *)((char *)__p[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!(_QWORD)v34)
      goto LABEL_36;
  }
  v18 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
  if (!v18)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
    v18 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
  }
  if (!*v18)
  {
    v21 = (FILE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v34 + 40))(v34);
    v23 = v21;
    if (v21)
    {
      v24 = v22;
      pxrInternal__aapl__pxrReserved__::ArchGetFileName(v21, __p);
      v25 = (uint64_t)*this + 6536;
      if (*((char *)*this + 6559) < 0)
        operator delete(*(void **)v25);
      *(_OWORD *)v25 = *(_OWORD *)__p;
      *(_QWORD *)(v25 + 16) = v36;
      if (!*((_BYTE *)*this + 6568))
      {
        v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34 + 16))(v34);
        if (v31 == -1)
          v31 = pxrInternal__aapl__pxrReserved__::ArchGetFileLength(v23, v32) - v24;
        v33 = *this;
        *((_QWORD *)v33 + 807) = v23;
        *((_QWORD *)v33 + 808) = v24;
        *((_QWORD *)v33 + 809) = v31;
        *((_BYTE *)v33 + 6480) = 0;
        sub_20BDE881C((_QWORD *)v33 + 811, (uint64_t *)&v34);
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitPread(*this);
        goto LABEL_27;
      }
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)*this + 6512);
      if (*((char *)*this + 6535) < 0)
        v26 = *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)v26;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapFile(v26, (const char *)v23, (unint64_t **)__p);
      sub_20C2A6A30((unint64_t **)*this + 806, (unint64_t **)__p);
      sub_20C2AECCC((unint64_t **)__p);
      if (*((_QWORD *)*this + 806))
      {
        sub_20BDEBF08((_QWORD *)*this + 811);
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitMMap(*this);
        goto LABEL_27;
      }
LABEL_36:
      v10 = 0;
      goto LABEL_37;
    }
  }
  sub_20C2A0EB4((unint64_t **)*this + 806);
  v19 = (uint64_t)*this + 6456;
  v20 = (_QWORD *)((char *)*this + 6488);
  *((_QWORD *)*this + 809) = 0;
  *(_BYTE *)(v19 + 24) = 0;
  *(_OWORD *)v19 = 0u;
  sub_20BDE881C(v20, (uint64_t *)&v34);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitAsset(*this);
LABEL_27:
  v10 = 1;
LABEL_37:
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v10;
}

void sub_20C2A604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Write(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v7;
  __int128 v8;
  _OWORD *v9;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v31;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v32;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v33;
  __int128 v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v36;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v44;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v45;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v46;
  __int128 v47;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v49;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v57;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v58;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v59;
  __int128 v60;
  uint64_t v61;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v62;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v70;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v71;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v72;
  __int128 v73;
  uint64_t v74;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v75;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v83;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v84;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v85;
  __int128 v86;
  uint64_t v87;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v88;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v96;
  char *v97;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v98;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  __int128 v107;
  __int128 v108;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *v111;
  unint64_t v112;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v113;
  uint64_t *v114;
  _BYTE __src[88];
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddDeferredSpecs(this);
  v2 = (_QWORD *)*((_QWORD *)this + 791);
  v3 = v2 + 32;
  v113 = this;
  v114 = v2 + 32;
  __p = 0;
  v111 = 0;
  v112 = 0;
  v4 = v2[25];
  v5 = v2[26];
  if (v4 == v5)
  {
    v9 = 0;
    v21 = 0;
    v22 = *v3;
  }
  else
  {
    do
    {
      v6 = (const char *)v4;
      if (*(char *)(v4 + 23) < 0)
        v6 = *(const char **)v4;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__src, v6, *v114, *(_QWORD *)(v4 + 32));
      sub_20C2A7944((uint64_t)&v113, *(char **)(v4 + 24), *(int64_t *)&__src[24]);
      v7 = v111;
      if ((unint64_t)v111 >= v112)
      {
        v10 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
        v11 = (v111 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59)
          sub_20BDDF694();
        v13 = v112 - (_QWORD)__p;
        if ((uint64_t)(v112 - (_QWORD)__p) >> 4 > v12)
          v12 = v13 >> 4;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
          v14 = 0x7FFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)sub_20BED2F10((uint64_t)&v112, v14);
          v10 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
          v7 = v111;
        }
        else
        {
          v15 = 0;
        }
        v16 = *(_OWORD *)&__src[16];
        v17 = &v15[32 * v11];
        *(_OWORD *)v17 = *(_OWORD *)__src;
        *((_OWORD *)v17 + 1) = v16;
        if (v7 == v10)
        {
          v20 = &v15[32 * v11];
        }
        else
        {
          v18 = &v15[32 * v11];
          do
          {
            v19 = *((_OWORD *)v7 - 1);
            v20 = v18 - 32;
            *((_OWORD *)v18 - 2) = *((_OWORD *)v7 - 2);
            *((_OWORD *)v18 - 1) = v19;
            v7 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v7 - 32);
            v18 -= 32;
          }
          while (v7 != v10);
        }
        v9 = v17 + 32;
        __p = v20;
        v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)(v17 + 32);
        v112 = (unint64_t)&v15[32 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        v8 = *(_OWORD *)&__src[16];
        *(_OWORD *)v111 = *(_OWORD *)__src;
        *((_OWORD *)v7 + 1) = v8;
        v9 = (_OWORD *)((char *)v7 + 32);
      }
      v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)v9;
      v4 += 40;
    }
    while (v4 != v5);
    v21 = v112;
    v22 = *v114;
    if ((unint64_t)v9 < v112)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)v9, "TOKENS", *v114, 0);
      v23 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)(v9 + 2);
      v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)(v9 + 2);
      goto LABEL_40;
    }
  }
  v24 = ((char *)v9 - (_BYTE *)__p) >> 5;
  if ((unint64_t)(v24 + 1) >> 59)
    goto LABEL_129;
  v25 = v21 - (_QWORD)__p;
  v26 = v25 >> 4;
  if (v25 >> 4 <= (unint64_t)(v24 + 1))
    v26 = v24 + 1;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
    v27 = 0x7FFFFFFFFFFFFFFLL;
  else
    v27 = v26;
  if (v27)
  {
    v28 = (char *)sub_20BED2F10((uint64_t)&v112, v27);
    v30 = v29;
  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  v31 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v28[32 * v24], "TOKENS", v22, 0);
  v23 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v31 + 32);
  v33 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
  v32 = v111;
  if (v111 != __p)
  {
    do
    {
      v34 = *((_OWORD *)v32 - 1);
      *((_OWORD *)v31 - 2) = *((_OWORD *)v32 - 2);
      *((_OWORD *)v31 - 1) = v34;
      v31 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v31 - 32);
      v32 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v32 - 32);
    }
    while (v32 != v33);
    v32 = v33;
  }
  __p = v31;
  v111 = v23;
  v112 = (unint64_t)&v28[32 * v30];
  if (v32)
    operator delete(v32);
LABEL_40:
  v111 = v23;
  sub_20C2C9030(this, (uint64_t)&v113);
  v35 = *v114;
  v36 = v111;
  *((_QWORD *)v111 - 1) = *v114 - *((_QWORD *)v111 - 2);
  if ((unint64_t)v36 >= v112)
  {
    v38 = (v36 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
    if ((unint64_t)(v38 + 1) >> 59)
      goto LABEL_129;
    v39 = (uint64_t)(v112 - (_QWORD)__p) >> 4;
    if (v39 <= v38 + 1)
      v39 = v38 + 1;
    if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
      v40 = 0x7FFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    if (v40)
    {
      v41 = (char *)sub_20BED2F10((uint64_t)&v112, v40);
      v43 = v42;
    }
    else
    {
      v41 = 0;
      v43 = 0;
    }
    v44 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v41[32 * v38], "STRINGS", v35, 0);
    v37 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v44 + 32);
    v46 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    v45 = v111;
    if (v111 != __p)
    {
      do
      {
        v47 = *((_OWORD *)v45 - 1);
        *((_OWORD *)v44 - 2) = *((_OWORD *)v45 - 2);
        *((_OWORD *)v44 - 1) = v47;
        v44 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v44 - 32);
        v45 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v45 - 32);
      }
      while (v45 != v46);
      v45 = v46;
    }
    __p = v44;
    v111 = v37;
    v112 = (unint64_t)&v41[32 * v43];
    if (v45)
      operator delete(v45);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v36, "STRINGS", v35, 0);
    v37 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v36 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v36 + 32);
  }
  v111 = v37;
  sub_20C2A918C((uint64_t)&v113, (uint64_t)this + 144);
  v48 = *v114;
  v49 = v111;
  *((_QWORD *)v111 - 1) = *v114 - *((_QWORD *)v111 - 2);
  if ((unint64_t)v49 >= v112)
  {
    v51 = (v49 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
    if ((unint64_t)(v51 + 1) >> 59)
      goto LABEL_129;
    v52 = (uint64_t)(v112 - (_QWORD)__p) >> 4;
    if (v52 <= v51 + 1)
      v52 = v51 + 1;
    if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
      v53 = 0x7FFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    if (v53)
    {
      v54 = (char *)sub_20BED2F10((uint64_t)&v112, v53);
      v56 = v55;
    }
    else
    {
      v54 = 0;
      v56 = 0;
    }
    v57 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v54[32 * v51], "FIELDS", v48, 0);
    v50 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v57 + 32);
    v59 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    v58 = v111;
    if (v111 != __p)
    {
      do
      {
        v60 = *((_OWORD *)v58 - 1);
        *((_OWORD *)v57 - 2) = *((_OWORD *)v58 - 2);
        *((_OWORD *)v57 - 1) = v60;
        v57 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v57 - 32);
        v58 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v58 - 32);
      }
      while (v58 != v59);
      v58 = v59;
    }
    __p = v57;
    v111 = v50;
    v112 = (unint64_t)&v54[32 * v56];
    if (v58)
      operator delete(v58);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v49, "FIELDS", v48, 0);
    v50 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v49 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v49 + 32);
  }
  v111 = v50;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteFields(this, (uint64_t)&v113);
  v61 = *v114;
  v62 = v111;
  *((_QWORD *)v111 - 1) = *v114 - *((_QWORD *)v111 - 2);
  if ((unint64_t)v62 >= v112)
  {
    v64 = (v62 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
    if ((unint64_t)(v64 + 1) >> 59)
      goto LABEL_129;
    v65 = (uint64_t)(v112 - (_QWORD)__p) >> 4;
    if (v65 <= v64 + 1)
      v65 = v64 + 1;
    if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
      v66 = 0x7FFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    if (v66)
    {
      v67 = (char *)sub_20BED2F10((uint64_t)&v112, v66);
      v69 = v68;
    }
    else
    {
      v67 = 0;
      v69 = 0;
    }
    v70 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v67[32 * v64], "FIELDSETS", v61, 0);
    v63 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v70 + 32);
    v72 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    v71 = v111;
    if (v111 != __p)
    {
      do
      {
        v73 = *((_OWORD *)v71 - 1);
        *((_OWORD *)v70 - 2) = *((_OWORD *)v71 - 2);
        *((_OWORD *)v70 - 1) = v73;
        v70 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v70 - 32);
        v71 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v71 - 32);
      }
      while (v71 != v72);
      v71 = v72;
    }
    __p = v70;
    v111 = v63;
    v112 = (unint64_t)&v67[32 * v69];
    if (v71)
      operator delete(v71);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v62, "FIELDSETS", v61, 0);
    v63 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v62 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v62 + 32);
  }
  v111 = v63;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteFieldSets(this, (uint64_t)&v113);
  v74 = *v114;
  v75 = v111;
  *((_QWORD *)v111 - 1) = *v114 - *((_QWORD *)v111 - 2);
  if ((unint64_t)v75 >= v112)
  {
    v77 = (v75 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
    if ((unint64_t)(v77 + 1) >> 59)
      goto LABEL_129;
    v78 = (uint64_t)(v112 - (_QWORD)__p) >> 4;
    if (v78 <= v77 + 1)
      v78 = v77 + 1;
    if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
      v79 = 0x7FFFFFFFFFFFFFFLL;
    else
      v79 = v78;
    if (v79)
    {
      v80 = (char *)sub_20BED2F10((uint64_t)&v112, v79);
      v82 = v81;
    }
    else
    {
      v80 = 0;
      v82 = 0;
    }
    v83 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v80[32 * v77], "PATHS", v74, 0);
    v76 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v83 + 32);
    v85 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    v84 = v111;
    if (v111 != __p)
    {
      do
      {
        v86 = *((_OWORD *)v84 - 1);
        *((_OWORD *)v83 - 2) = *((_OWORD *)v84 - 2);
        *((_OWORD *)v83 - 1) = v86;
        v83 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v83 - 32);
        v84 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v84 - 32);
      }
      while (v84 != v85);
      v84 = v85;
    }
    __p = v83;
    v111 = v76;
    v112 = (unint64_t)&v80[32 * v82];
    if (v84)
      operator delete(v84);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v75, "PATHS", v74, 0);
    v76 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v75 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v75 + 32);
  }
  v111 = v76;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WritePaths(this, (uint64_t)&v113);
  v87 = *v114;
  v88 = v111;
  *((_QWORD *)v111 - 1) = *v114 - *((_QWORD *)v111 - 2);
  if ((unint64_t)v88 < v112)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v88, "SPECS", v87, 0);
    v89 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v88 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v88 + 32);
    goto LABEL_120;
  }
  v90 = (v88 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
  if ((unint64_t)(v90 + 1) >> 59)
LABEL_129:
    sub_20BDDF694();
  v91 = (uint64_t)(v112 - (_QWORD)__p) >> 4;
  if (v91 <= v90 + 1)
    v91 = v90 + 1;
  if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
    v92 = 0x7FFFFFFFFFFFFFFLL;
  else
    v92 = v91;
  if (v92)
  {
    v93 = (char *)sub_20BED2F10((uint64_t)&v112, v92);
    v95 = v94;
  }
  else
  {
    v93 = 0;
    v95 = 0;
  }
  v96 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v93[32 * v90], "SPECS", v87, 0);
  v97 = &v93[32 * v95];
  v89 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v96 + 32);
  v99 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
  v98 = v111;
  if (v111 != __p)
  {
    do
    {
      v100 = *((_OWORD *)v98 - 1);
      *((_OWORD *)v96 - 2) = *((_OWORD *)v98 - 2);
      *((_OWORD *)v96 - 1) = v100;
      v96 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v96 - 32);
      v98 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v98 - 32);
    }
    while (v98 != v99);
    v98 = v99;
  }
  __p = v96;
  v111 = v89;
  v112 = (unint64_t)v97;
  if (v98)
    operator delete(v98);
LABEL_120:
  v111 = v89;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteSpecs((uint64_t **)this, (uint64_t)&v113);
  v101 = *v114;
  *((_QWORD *)v89 - 1) = *v114 - *((_QWORD *)v89 - 2);
  v102 = *((_QWORD *)this + 791);
  memset(&__src[8], 0, 80);
  *(_QWORD *)__src = 0x434453552D525850;
  __src[8] = *(_BYTE *)(v102 + 248);
  *(_WORD *)&__src[9] = *(_WORD *)(v102 + 249);
  *(_QWORD *)&__src[16] = v101;
  sub_20C2B2620((uint64_t)&v113, (uint64_t)&__p);
  v103 = v114;
  v105 = v114 + 2;
  v104 = v114[2];
  if (v104 > 0 || v114[4] + v104 < 0)
  {
    sub_20C2B209C((_BOOL8)v114);
    *v103 = 0;
    v103 = v105;
  }
  *v103 = 0;
  sub_20C2A7A30((uint64_t)&v113, __src);
  v106 = v114;
  sub_20C2B209C((_BOOL8)v114);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v106 + 11));
  if ((void **)((char *)this + 6336) != &__p)
    sub_20C2B2718((char *)this + 6336, (char *)__p, (uint64_t)v111, (v111 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5);
  *((_QWORD *)this + 805) = *(_QWORD *)&__src[80];
  v107 = *(_OWORD *)&__src[48];
  *(_OWORD *)((char *)this + 6392) = *(_OWORD *)&__src[32];
  *(_OWORD *)((char *)this + 6408) = v107;
  *(_OWORD *)((char *)this + 6424) = *(_OWORD *)&__src[64];
  v108 = *(_OWORD *)&__src[16];
  *(_OWORD *)((char *)this + 6360) = *(_OWORD *)__src;
  *(_OWORD *)((char *)this + 6376) = v108;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ClearValueHandlerDedupTables(this);
  if (__p)
  {
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    operator delete(__p);
  }
  return 1;
}

void sub_20C2A69B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t **sub_20C2A6A30(unint64_t **a1, unint64_t **a2)
{
  unint64_t *v4;
  void *v5;
  unint64_t *v7;

  if (a1 != a2)
  {
    v4 = *a2;
    *a2 = 0;
    v7 = *a1;
    *a1 = v4;
    sub_20C2AEC70(&v7, a2);
    v7 = *a2;
    *a2 = 0;
    sub_20C2AEC70(&v7, v5);
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::Packer(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::operator=(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::~Packer(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer *this)
{
  if (*(_QWORD *)this)
    sub_20C2A5B64((uint64_t *)(*(_QWORD *)this + 6328), 0);
}

{
  if (*(_QWORD *)this)
    sub_20C2A5B64((uint64_t *)(*(_QWORD *)this + 6328), 0);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSectionsNameStartSize@<X0>(_QWORD *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (_QWORD *)this[792];
  v4 = (_QWORD *)this[793];
  if (v3 != v4)
  {
    v5 = 0;
    v6 = v3 + 3;
    do
    {
      v7 = (char *)(v6 - 3);
      if ((unint64_t)v5 >= a2[2])
      {
        this = (_QWORD *)sub_20C2C8608(a2, v7, v6 - 1, v6);
        v5 = this;
      }
      else
      {
        this = sub_20BDDC0E4(v5, v7);
        v5[3] = *(v6 - 1);
        v5[4] = *v6;
        v5 += 5;
        a2[1] = (uint64_t)v5;
      }
      a2[1] = (uint64_t)v5;
      v8 = v6 + 1;
      v6 += 4;
    }
    while (v8 != v4);
  }
  return this;
}

void sub_20C2A6BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEE7D5C((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddDeferredSpecs(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 *v23;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v24;
  int v25;
  __int16 *v26;
  __int16 *v27;
  _QWORD *v28;
  __int16 *v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  __int16 *v35;
  int v36;
  const pxrInternal__aapl__pxrReserved__::VtValue **v37;
  const pxrInternal__aapl__pxrReserved__::VtValue **v38;
  const pxrInternal__aapl__pxrReserved__::VtValue *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  int v47;
  int v48;
  unint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t *v61;
  uint64_t *v62;
  char **v63;
  int v64;
  int v65;
  unint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  int v77;
  unsigned int *v78;
  unsigned int v79;
  int v80;
  int v81;
  _DWORD *v82;
  unint64_t v83;
  int v84;
  _DWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  int v93;
  _DWORD *v94;
  _DWORD *v95;
  char *v96;
  uint64_t v97;
  int v98;
  int64x2_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v104;
  void *__p;
  double *v106;
  uint64_t v107;
  uint64_t v108;
  __int16 *v109;
  uint64_t v110;
  unint64_t v111;
  void **v112[2];
  int64x2_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  sub_20C2C8888((uint64_t)&v107, 0, 0.0, 0.5);
  v2 = *((_QWORD *)this + 3);
  v104 = this;
  v100 = *((_QWORD *)this + 4);
  if (v2 != v100)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 56);
      v4 = *(_QWORD *)(v2 + 64);
      v102 = v2;
      while (v3 != v4)
      {
        v5 = *(_QWORD *)(v3 + 24);
        if (*(_QWORD *)(v3 + 32) != v5)
        {
          v6 = 0;
          do
          {
            if ((sub_20C29DA78((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 16 * v6)) & 1) == 0)
            {
              __p = (void *)(**(_QWORD **)(v3 + 16) + 8 * v6);
              v7 = sub_20C2C8AA0(&v107, (double *)__p, (uint64_t)&unk_20CAC184C, (uint64_t **)&__p);
              v8 = *(_QWORD *)(v3 + 24) + 16 * v6;
              v9 = (uint64_t *)*((_QWORD *)v7 + 3);
              v10 = *((_QWORD *)v7 + 4);
              if ((unint64_t)v9 >= v10)
              {
                v12 = *((_QWORD *)v7 + 2);
                v13 = ((uint64_t)v9 - v12) >> 3;
                if ((unint64_t)(v13 + 1) >> 61)
                  sub_20BDDF694();
                v14 = v10 - v12;
                v15 = v14 >> 2;
                if (v14 >> 2 <= (unint64_t)(v13 + 1))
                  v15 = v13 + 1;
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                  v16 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v16 = v15;
                if (v16)
                  v17 = (char *)sub_20BDDF6A8((uint64_t)(v7 + 16), v16);
                else
                  v17 = 0;
                v18 = (uint64_t *)&v17[8 * v13];
                *v18 = v8;
                v11 = v18 + 1;
                v20 = (char *)*((_QWORD *)v7 + 2);
                v19 = (char *)*((_QWORD *)v7 + 3);
                if (v19 != v20)
                {
                  do
                  {
                    v21 = *((_QWORD *)v19 - 1);
                    v19 -= 8;
                    *--v18 = v21;
                  }
                  while (v19 != v20);
                  v19 = (char *)*((_QWORD *)v7 + 2);
                }
                *((_QWORD *)v7 + 2) = v18;
                *((_QWORD *)v7 + 3) = v11;
                *((_QWORD *)v7 + 4) = &v17[8 * v16];
                if (v19)
                  operator delete(v19);
              }
              else
              {
                *v9 = v8;
                v11 = v9 + 1;
              }
              *((_QWORD *)v7 + 3) = v11;
            }
            ++v6;
            v5 = *(_QWORD *)(v3 + 24);
          }
          while (v6 != (*(_QWORD *)(v3 + 32) - v5) >> 4);
        }
        v3 += 56;
      }
      v2 = v102 + 80;
    }
    while (v102 + 80 != v100);
  }
  sub_20BDE48D4(&__p, v111);
  v22 = 0;
  if (v110)
  {
    v23 = v109;
    v24 = v104;
    while (1)
    {
      v25 = *v23;
      v23 += 20;
      if (v25 != -1)
        break;
      if (v110 == ++v22)
        goto LABEL_39;
    }
  }
  else
  {
    v24 = v104;
  }
  if (v22 != v110)
  {
    v26 = &v109[20 * v110];
    v27 = &v109[20 * v22];
    v28 = __p;
    do
    {
      *v28 = *((_QWORD *)v27 + 1);
      v29 = v27 + 20;
      do
      {
        v27 = v29;
        if (*((_BYTE *)v29 - 38))
          break;
        v29 += 20;
      }
      while (*v27 == -1);
      ++v28;
    }
    while (v27 != v26);
  }
LABEL_39:
  std::__sort<std::__less<double,double> &,double *>();
  v30 = (double *)__p;
  v31 = v106;
  if (__p != v106)
  {
    do
    {
      v32 = *v30;
      if (*v30 == 0.0)
        v33 = 0.0;
      else
        v33 = *v30;
      v34 = *(_QWORD *)&v33 & v107;
      v35 = &v109[20 * v34];
      if ((*v35 & 0x80000000) == 0)
      {
        if (*(double *)&v109[20 * v34 + 4] == v32)
          goto LABEL_50;
        LOWORD(v36) = 0;
        while (1)
        {
          v36 = (__int16)(v36 + 1);
          v34 = (v34 + 1) & v107;
          v35 = &v109[20 * v34];
          if (v36 > *v35)
            break;
          if (*(double *)&v109[20 * v34 + 4] == v32)
            goto LABEL_50;
        }
      }
      v35 = &v109[20 * v110];
LABEL_50:
      v37 = (const pxrInternal__aapl__pxrReserved__::VtValue **)*((_QWORD *)v35 + 2);
      v38 = (const pxrInternal__aapl__pxrReserved__::VtValue **)*((_QWORD *)v35 + 3);
      while (v37 != v38)
      {
        v39 = *v37;
        v40 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(v24, *v37);
        v41 = *((_QWORD *)v39 + 1);
        if (v41)
          v42 = (*((_QWORD *)v39 + 1) & 3) == 3;
        else
          v42 = 1;
        if (!v42)
          (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v41 & 0xFFFFFFFFFFFFFFF8) + 32))(v39);
        *(_QWORD *)v39 = v40;
        *((_QWORD *)v39 + 1) = (char *)&off_24C52E948 + 3;
        ++v37;
      }
      ++v30;
    }
    while (v30 != v31);
  }
  v43 = *((_QWORD *)v24 + 3);
  v103 = *((_QWORD *)v24 + 4);
  if (v43 == v103)
  {
    v99 = vdupq_n_s64(v43);
  }
  else
  {
    v101 = (uint64_t)v24 + 16;
    do
    {
      v44 = *(_QWORD *)(v43 + 32);
      v45 = *(_QWORD *)(v43 + 40);
      if (v44 != v45)
      {
        v46 = (char **)(v43 + 8);
        do
        {
          v47 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddField((char **)v24, v44);
          v48 = v47;
          v50 = *(_DWORD **)(v43 + 16);
          v49 = *(_QWORD *)(v43 + 24);
          if ((unint64_t)v50 >= v49)
          {
            v52 = ((char *)v50 - *v46) >> 2;
            if ((unint64_t)(v52 + 1) >> 62)
              sub_20BDDF694();
            v53 = v49 - (_QWORD)*v46;
            v54 = v53 >> 1;
            if (v53 >> 1 <= (unint64_t)(v52 + 1))
              v54 = v52 + 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
              v55 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v56 = (char *)sub_20BDE1330(v43 + 24, v55);
            else
              v56 = 0;
            v57 = &v56[4 * v52];
            *(_DWORD *)v57 = v48;
            v51 = v57 + 4;
            v59 = *(char **)(v43 + 8);
            v58 = *(char **)(v43 + 16);
            if (v58 != v59)
            {
              do
              {
                v60 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v57 - 1) = v60;
                v57 -= 4;
              }
              while (v58 != v59);
              v58 = *v46;
            }
            *(_QWORD *)(v43 + 8) = v57;
            *(_QWORD *)(v43 + 16) = v51;
            *(_QWORD *)(v43 + 24) = &v56[4 * v55];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *v50 = v47;
            v51 = v50 + 1;
          }
          *(_QWORD *)(v43 + 16) = v51;
          v44 += 24;
          v24 = v104;
        }
        while (v44 != v45);
      }
      v61 = *(uint64_t **)(v43 + 56);
      v62 = *(uint64_t **)(v43 + 64);
      if (v61 != v62)
      {
        v63 = (char **)(v43 + 8);
        do
        {
          sub_20C29E4BC(v61 + 1, (pxrInternal__aapl__pxrReserved__::VtValue *)v112);
          sub_20C0DE1A4(v113.i64, v61, v112);
          v64 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddField((char **)v24, (uint64_t)&v113);
          v65 = v64;
          v67 = *(_DWORD **)(v43 + 16);
          v66 = *(_QWORD *)(v43 + 24);
          if ((unint64_t)v67 >= v66)
          {
            v69 = ((char *)v67 - *v63) >> 2;
            if ((unint64_t)(v69 + 1) >> 62)
              sub_20BDDF694();
            v70 = v66 - (_QWORD)*v63;
            v71 = v70 >> 1;
            if (v70 >> 1 <= (unint64_t)(v69 + 1))
              v71 = v69 + 1;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
              v72 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v72 = v71;
            if (v72)
              v73 = (char *)sub_20BDE1330(v43 + 24, v72);
            else
              v73 = 0;
            v74 = &v73[4 * v69];
            *(_DWORD *)v74 = v65;
            v68 = v74 + 4;
            v76 = *(char **)(v43 + 8);
            v75 = *(char **)(v43 + 16);
            if (v75 != v76)
            {
              do
              {
                v77 = *((_DWORD *)v75 - 1);
                v75 -= 4;
                *((_DWORD *)v74 - 1) = v77;
                v74 -= 4;
              }
              while (v75 != v76);
              v75 = *v63;
            }
            *(_QWORD *)(v43 + 8) = v74;
            *(_QWORD *)(v43 + 16) = v68;
            *(_QWORD *)(v43 + 24) = &v73[4 * v72];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *v67 = v64;
            v68 = v67 + 1;
          }
          *(_QWORD *)(v43 + 16) = v68;
          sub_20BF4C2D8((uint64_t)&v113.i64[1]);
          if ((v113.i8[0] & 7) != 0)
          {
            v78 = (unsigned int *)(v113.i64[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v79 = __ldxr(v78);
            while (__stlxr(v79 - 2, v78));
          }
          sub_20BF4C2D8((uint64_t)v112);
          v61 += 7;
          v24 = v104;
        }
        while (v61 != v62);
      }
      v80 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddFieldSet(v24, (char **)(v43 + 8));
      v81 = v80;
      v82 = (_DWORD *)*((_QWORD *)v24 + 1);
      v83 = *((_QWORD *)v24 + 2);
      if ((unint64_t)v82 >= v83)
      {
        v86 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v82 - *(_QWORD *)v24) >> 2);
        v87 = v86 + 1;
        if (v86 + 1 > 0x1555555555555555)
          sub_20BDDF694();
        v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - *(_QWORD *)v24) >> 2);
        if (2 * v88 > v87)
          v87 = 2 * v88;
        if (v88 >= 0xAAAAAAAAAAAAAAALL)
          v89 = 0x1555555555555555;
        else
          v89 = v87;
        v90 = (char *)sub_20C152228(v101, v89);
        v92 = &v90[12 * v86];
        v93 = *(_DWORD *)(v43 + 4);
        *(_DWORD *)v92 = *(_DWORD *)v43;
        *((_DWORD *)v92 + 1) = v81;
        *((_DWORD *)v92 + 2) = v93;
        v95 = *(_DWORD **)v24;
        v94 = (_DWORD *)*((_QWORD *)v24 + 1);
        v96 = v92;
        if (v94 != *(_DWORD **)v24)
        {
          do
          {
            v97 = *(_QWORD *)(v94 - 3);
            v94 -= 3;
            v98 = v94[2];
            *(_QWORD *)(v96 - 12) = v97;
            v96 -= 12;
            *((_DWORD *)v96 + 2) = v98;
          }
          while (v94 != v95);
          v94 = *(_DWORD **)v24;
        }
        v85 = v92 + 12;
        *(_QWORD *)v24 = v96;
        *((_QWORD *)v24 + 1) = v92 + 12;
        *((_QWORD *)v24 + 2) = &v90[12 * v91];
        if (v94)
          operator delete(v94);
      }
      else
      {
        v84 = *(_DWORD *)(v43 + 4);
        *v82 = *(_DWORD *)v43;
        v82[1] = v80;
        v82[2] = v84;
        v85 = v82 + 3;
      }
      *((_QWORD *)v24 + 1) = v85;
      v43 += 80;
    }
    while (v43 != v103);
    v99 = *(int64x2_t *)((char *)v24 + 24);
  }
  v113 = v99;
  *((_QWORD *)v24 + 3) = 0;
  *((_QWORD *)v24 + 4) = 0;
  v114 = *((_QWORD *)v24 + 5);
  *((_QWORD *)v24 + 5) = 0;
  v112[0] = (void **)&v113;
  sub_20C2B7648(v112);
  if (__p)
  {
    v106 = (double *)__p;
    operator delete(__p);
  }
  v113.i64[0] = (uint64_t)&v108;
  sub_20C2B2528((void ***)&v113);
}

void sub_20C2A7318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v25 - 128) = &a16;
  sub_20C2B2528((void ***)(v25 - 128));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t ElementTypeid;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  void **v15;
  const char *v16;
  void *v18;
  char v19;
  void *v20[2];
  char v21;
  void *__p;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  uint64_t v27;

  v2 = a2;
  v27 = *MEMORY[0x24BDAC8D0];
  if (sub_20C29DA78(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    v5 = *(_QWORD *)v2;
    if ((*(_QWORD *)v2 & 0xFF000000000000) == 0x2F000000000000
      && ((*((unsigned __int8 *)this + 6368) << 16) | (*((unsigned __int8 *)this + 6369) << 8)) <= 0x7FFu
      && ((*(unsigned __int8 *)(*((_QWORD *)this + 791) + 248) << 16) | (*(unsigned __int8 *)(*((_QWORD *)this + 791)
                                                                                              + 249) << 8)) >= 0x800u)
    {
      v23 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue((uint64_t)this, v5, (uint64_t)&__p);
      v5 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(this, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
      sub_20BF4C2D8((uint64_t)&__p);
    }
  }
  else if (!sub_20C29DAF0(v2)
         || ((v6 = *((_QWORD *)v2 + 1), (v6 & 4) != 0)
           ? (v7 = (uint64_t *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v2))
           : (v7 = *(uint64_t **)v2),
             (v5 = *v7) == 0))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(v2))
      ElementTypeid = pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid(v2);
    else
      ElementTypeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(v2);
    v9 = ElementTypeid;
    sub_20BDDC0E4(&__p, (char *)(*(_QWORD *)(ElementTypeid + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v10 = sub_20BEF33B4((uint64_t)v20, (uint64_t)&__p);
    v11 = sub_20C2CD47C((_QWORD *)this + 27, (unsigned __int8 *)&__p, v10);
    if (SHIBYTE(v24) < 0)
      operator delete(__p);
    if (*((_QWORD *)this + 31) + (*((_QWORD *)this + 32) << 6) == v11)
    {
      __p = "usd/crateFile.cpp";
      v23 = "_PackValue";
      v24 = 4574;
      v25 = "ValueRep pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(const VtValue &)";
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
      v13 = v21;
      v14 = (void **)v20[0];
      sub_20BF834B0((uint64_t)v2);
      v15 = v20;
      if (v13 < 0)
        v15 = v14;
      if (v19 >= 0)
        v16 = (const char *)&v18;
      else
        v16 = (const char *)v18;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to pack unsupported type '%s' (%s)", (const char *)v15, v16);
      if (v19 < 0)
        operator delete(v18);
      if (v21 < 0)
        operator delete(v20[0]);
      return 0;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 56);
      if (!v12)
        sub_20BE9E974();
      return (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)v12 + 48))(v12, v2);
    }
  }
  return v5;
}

void sub_20C2A7640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_20BF4C2D8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddField(char **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  char **v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v22;
  __int128 v23;

  DWORD1(v23) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2);
  *((_QWORD *)&v23 + 1) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 8));
  v4 = (uint64_t)(a1[791] + 120);
  v22 = -1;
  v5 = sub_20C2CCEA4(v4, (uint64_t)&v23, &v23, &v22);
  v6 = v5;
  if (v7)
  {
    v8 = a1 + 6;
    *((_DWORD *)v5 + 8) = (unint64_t)(a1[7] - a1[6]) >> 4;
    v9 = a1[7];
    v10 = (unint64_t)a1[8];
    if ((unint64_t)v9 >= v10)
    {
      v12 = (v9 - *v8) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        sub_20BDDF694();
      v14 = v10 - (_QWORD)*v8;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_20BDEA2F0((uint64_t)(a1 + 8), v15);
      else
        v16 = 0;
      v17 = &v16[16 * v12];
      v18 = &v16[16 * v15];
      *(_OWORD *)v17 = v23;
      v11 = v17 + 16;
      v20 = a1[6];
      v19 = a1[7];
      if (v19 != v20)
      {
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
          v17 -= 16;
          v19 -= 16;
        }
        while (v19 != v20);
        v19 = *v8;
      }
      a1[6] = v17;
      a1[7] = v11;
      a1[8] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_OWORD *)v9 = v23;
      v11 = v9 + 16;
    }
    a1[7] = v11;
  }
  return *((unsigned int *)v6 + 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddFieldSet(_QWORD *a1, char **a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  char **v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  int v23;

  v4 = a1[791] + 160;
  v23 = -1;
  v5 = sub_20C2CCB64(v4, (uint64_t)a2, (uint64_t)a2, &v23);
  v6 = v5;
  if (v7)
  {
    v8 = (char **)(a1 + 9);
    *((_DWORD *)v5 + 10) = (a1[10] - a1[9]) >> 2;
    sub_20C125B2C((uint64_t)(a1 + 9), a1[10], *a2, a2[1], (a2[1] - *a2) >> 2);
    v9 = (_DWORD *)a1[10];
    v10 = a1[11];
    if ((unint64_t)v9 >= v10)
    {
      v12 = ((char *)v9 - *v8) >> 2;
      if ((unint64_t)(v12 + 1) >> 62)
        sub_20BDDF694();
      v13 = v10 - (_QWORD)*v8;
      v14 = v13 >> 1;
      if (v13 >> 1 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)sub_20BDE1330((uint64_t)(a1 + 11), v15);
      else
        v16 = 0;
      v17 = &v16[4 * v12];
      v18 = &v16[4 * v15];
      *(_DWORD *)v17 = -1;
      v11 = v17 + 4;
      v20 = (char *)a1[9];
      v19 = (char *)a1[10];
      if (v19 != v20)
      {
        do
        {
          v21 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v17 - 1) = v21;
          v17 -= 4;
        }
        while (v19 != v20);
        v19 = *v8;
      }
      a1[9] = v17;
      a1[10] = v11;
      a1[11] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v9 = -1;
      v11 = v9 + 1;
    }
    a1[10] = v11;
  }
  return *((unsigned int *)v6 + 10);
}

uint64_t sub_20C2A7944(uint64_t result, char *__src, int64_t a3)
{
  int64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  if (a3)
  {
    v3 = a3;
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BootStrap::_BootStrap(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BootStrap *this, const pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = 0x434453552D525850;
  *((_BYTE *)this + 8) = *(_BYTE *)a2;
  *((_BYTE *)this + 9) = *((_BYTE *)a2 + 1);
  *((_BYTE *)this + 10) = *((_BYTE *)a2 + 2);
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = 0x434453552D525850;
  *((_BYTE *)this + 8) = *(_BYTE *)a2;
  *((_BYTE *)this + 9) = *((_BYTE *)a2 + 1);
  *((_BYTE *)this + 10) = *((_BYTE *)a2 + 2);
  return result;
}

uint64_t sub_20C2A7A30(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 88;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ClearValueHandlerDedupTables(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;

  sub_20C2B2820((uint64_t *)(*((_QWORD *)this + 734) + 8), 0);
  sub_20C2B28C4((uint64_t *)(*((_QWORD *)this + 735) + 8), 0);
  sub_20C2B2968((uint64_t *)(*((_QWORD *)this + 736) + 8), 0);
  sub_20C2B2A0C((uint64_t *)(*((_QWORD *)this + 737) + 8), 0);
  v2 = (uint64_t *)*((_QWORD *)this + 738);
  sub_20BF2B090(v2, 0);
  sub_20C2B2AB0(v2 + 1, 0);
  v3 = (uint64_t *)*((_QWORD *)this + 739);
  sub_20BF2B090(v3, 0);
  sub_20C2B2B54(v3 + 1, 0);
  sub_20C2B2BF8((uint64_t *)(*((_QWORD *)this + 740) + 8), 0);
  sub_20C2B2C9C((uint64_t *)(*((_QWORD *)this + 741) + 8), 0);
  v4 = (uint64_t *)*((_QWORD *)this + 742);
  sub_20BF2B090(v4, 0);
  sub_20C2B2D40(v4 + 1, 0);
  sub_20C2B2DE4((uint64_t *)(*((_QWORD *)this + 743) + 8), 0);
  sub_20C2B2E88((uint64_t *)(*((_QWORD *)this + 744) + 8), 0);
  sub_20C2B2F2C((uint64_t *)(*((_QWORD *)this + 745) + 8), 0);
  v5 = (uint64_t *)*((_QWORD *)this + 749);
  sub_20BF2B090(v5, 0);
  sub_20C2B3070(v5 + 1, 0);
  v6 = (uint64_t *)*((_QWORD *)this + 750);
  sub_20BF2B090(v6, 0);
  sub_20C2B3114(v6 + 1, 0);
  v7 = (uint64_t *)*((_QWORD *)this + 751);
  sub_20BF2B090(v7, 0);
  sub_20C2B31B8(v7 + 1, 0);
  v8 = (uint64_t *)*((_QWORD *)this + 752);
  sub_20BF2B090(v8, 0);
  sub_20C2B325C(v8 + 1, 0);
  v9 = (uint64_t *)*((_QWORD *)this + 753);
  sub_20BF2B090(v9, 0);
  sub_20C2B3300(v9 + 1, 0);
  sub_20C2B33A4((uint64_t *)(*((_QWORD *)this + 754) + 8), 0);
  v10 = (uint64_t *)*((_QWORD *)this + 755);
  sub_20BF2B090(v10, 0);
  sub_20C2B3448(v10 + 1, 0);
  v11 = (uint64_t *)*((_QWORD *)this + 756);
  sub_20BF2B090(v11, 0);
  sub_20C2B34EC(v11 + 1, 0);
  v12 = (uint64_t *)*((_QWORD *)this + 757);
  sub_20BF2B090(v12, 0);
  sub_20C2B3590(v12 + 1, 0);
  v13 = (uint64_t *)*((_QWORD *)this + 758);
  sub_20BF2B090(v13, 0);
  sub_20C2B3634(v13 + 1, 0);
  v14 = (uint64_t *)*((_QWORD *)this + 759);
  sub_20BF2B090(v14, 0);
  sub_20C2B36D8(v14 + 1, 0);
  v15 = (uint64_t *)*((_QWORD *)this + 760);
  sub_20BF2B090(v15, 0);
  sub_20C2B377C(v15 + 1, 0);
  v16 = (uint64_t *)*((_QWORD *)this + 761);
  sub_20BF2B090(v16, 0);
  sub_20C2B3820(v16 + 1, 0);
  v17 = (uint64_t *)*((_QWORD *)this + 762);
  sub_20BF2B090(v17, 0);
  sub_20C2B38C4(v17 + 1, 0);
  v18 = (uint64_t *)*((_QWORD *)this + 763);
  sub_20BF2B090(v18, 0);
  sub_20C2B3968(v18 + 1, 0);
  v19 = (uint64_t *)*((_QWORD *)this + 746);
  sub_20BF2B090(v19, 0);
  sub_20C2B3A0C(v19 + 1, 0);
  v20 = (uint64_t *)*((_QWORD *)this + 747);
  sub_20BF2B090(v20, 0);
  sub_20C2B3AB0(v20 + 1, 0);
  v21 = (uint64_t *)*((_QWORD *)this + 748);
  sub_20BF2B090(v21, 0);
  sub_20C2B3B54(v21 + 1, 0);
  sub_20C2B3D54(*((uint64_t **)this + 764), 0);
  sub_20C2B3FC4(*((uint64_t **)this + 765), 0);
  sub_20C2B42B4(*((uint64_t **)this + 766), 0);
  sub_20C2B45A4(*((uint64_t **)this + 767), 0);
  sub_20C2B4894(*((uint64_t **)this + 768), 0);
  sub_20C2B4B70(*((uint64_t **)this + 769), 0);
  sub_20C2B4B70(*((uint64_t **)this + 770), 0);
  sub_20C2B4B70(*((uint64_t **)this + 771), 0);
  sub_20C2B4B70(*((uint64_t **)this + 772), 0);
  sub_20C2B4FE8(*((uint64_t **)this + 773), 0);
  sub_20C2B5200(*((uint64_t **)this + 774), 0);
  sub_20C2B55FC(*((uint64_t **)this + 778), 0);
  sub_20C2B5814(*((uint64_t **)this + 779), 0);
  sub_20C2B5A48(*((uint64_t **)this + 780), 0);
  sub_20C2B5C98(*((uint64_t **)this + 781), 0);
  sub_20C2B5C98(*((uint64_t **)this + 782), 0);
  sub_20C2B5ED0(*((uint64_t **)this + 783), 0);
  sub_20C12AA40(*((uint64_t **)this + 785), 0);
  sub_20C12AA40(*((uint64_t **)this + 786), 0);
  sub_20C2B63E8(*((uint64_t **)this + 787), 0);
  sub_20C2B66D8(*((uint64_t **)this + 788), 0);
  v22 = (uint64_t *)*((_QWORD *)this + 789);
  sub_20BF2B090(v22, 0);
  sub_20C2B67FC(v22 + 1, 0);
  v23 = (uint64_t *)*((_QWORD *)this + 790);
  sub_20C2B6944(v23, 0);
  sub_20C2B68A0(v23 + 1, 0);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddSpec(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  _DWORD *v40;
  int v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  unint64_t v57;
  __n128 v58;
  unint64_t v59;
  void *__p[2];
  char *v61;
  int v62;
  void **v63;

  v62 = a3;
  __p[0] = 0;
  __p[1] = 0;
  v61 = 0;
  v58 = 0uLL;
  v59 = 0;
  v56 = 0uLL;
  v57 = 0;
  sub_20C2A842C(__p, 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  v7 = *a4;
  v8 = a4[1];
  if (*a4 != v8)
  {
    do
    {
      v9 = (uint64_t)(v7 + 1);
      if (sub_20C29DAF0((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 1))
        && ((v10 = v7[2], (v10 & 4) != 0)
          ? (v11 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v7 + 1))
          : (v11 = *(uint64_t **)v9),
            !*v11))
      {
        v25 = v7[2];
        if ((v25 & 4) != 0)
          v26 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v7 + 1);
        else
          v26 = *(uint64_t **)v9;
        v27 = v58.n128_u64[1];
        if (v58.n128_u64[1] >= v59)
        {
          v28 = sub_20C2C9504((uint64_t *)&v58, v7, v26);
        }
        else
        {
          sub_20C2C9628((uint64_t *)v58.n128_u64[1], v7, v26);
          v28 = v27 + 56;
        }
        v58.n128_u64[1] = v28;
      }
      else
      {
        if (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 6328) + 248) << 16) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 6328)
                                                                                                 + 249) << 8)) > 0x7FFu)
          goto LABEL_18;
        if (sub_20C1B1F04((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 1)))
        {
          v12 = v7[2];
          v13 = (v12 & 4) != 0
              ? (*(uint64_t (**)(uint64_t *))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(v7 + 1)
              : *(_QWORD *)v9;
          if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(v13 + 32)))
            goto LABEL_16;
        }
        if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x7FFu
          || !sub_20C29DA78((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 1)))
        {
          goto LABEL_18;
        }
        v14 = v7[2];
        if ((v14 & 4) != 0)
          v9 = (*(uint64_t (**)(uint64_t *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v7 + 1);
        if ((unint64_t)*(unsigned __int8 *)(v9 + 6) << 48 == 0x2F000000000000)
        {
LABEL_16:
          v15 = *((_QWORD *)&v56 + 1);
          if (*((_QWORD *)&v56 + 1) >= v57)
          {
            v16 = sub_20C2C9934((uint64_t *)&v56, v7);
          }
          else
          {
            sub_20C0E6CA4(*((uint64_t **)&v56 + 1), v7);
            v16 = v15 + 24;
          }
          *((_QWORD *)&v56 + 1) = v16;
        }
        else
        {
LABEL_18:
          v17 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddField((char **)a1, (uint64_t)v7);
          v18 = v17;
          v19 = (char *)__p[1];
          if (__p[1] >= v61)
          {
            v21 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            if ((unint64_t)(v21 + 1) >> 62)
              sub_20BDDF694();
            v22 = (v61 - (char *)__p[0]) >> 1;
            if (v22 <= v21 + 1)
              v22 = v21 + 1;
            if ((unint64_t)(v61 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFFCLL)
              v23 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
              v24 = (char *)sub_20BDE1330((uint64_t)&v61, v23);
            else
              v24 = 0;
            v29 = &v24[4 * v21];
            *(_DWORD *)v29 = v18;
            v20 = v29 + 4;
            v31 = (char *)__p[0];
            v30 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v32 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v29 - 1) = v32;
                v29 -= 4;
              }
              while (v30 != v31);
              v30 = (char *)__p[0];
            }
            __p[0] = v29;
            __p[1] = v20;
            v61 = &v24[4 * v23];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_DWORD *)__p[1] = v17;
            v20 = v19 + 4;
          }
          __p[1] = v20;
        }
      }
      v7 += 3;
    }
    while (v7 != v8);
  }
  if (v58.n128_u64[0] == v58.n128_u64[1] && (_QWORD)v56 == *((_QWORD *)&v56 + 1))
  {
    v37 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, a2);
    v38 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddFieldSet((_QWORD *)a1, (char **)__p);
    v39 = *(_QWORD *)(a1 + 16);
    v40 = *(_DWORD **)(a1 + 8);
    if ((unint64_t)v40 >= v39)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(_QWORD *)a1) >> 2);
      v44 = v43 + 1;
      if (v43 + 1 > 0x1555555555555555)
        sub_20BDDF694();
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(_QWORD *)a1) >> 2);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0xAAAAAAAAAAAAAAALL)
        v46 = 0x1555555555555555;
      else
        v46 = v44;
      v47 = (char *)sub_20C152228(a1 + 16, v46);
      v48 = &v47[12 * v43];
      v50 = &v47[12 * v49];
      v51 = v62;
      *(_DWORD *)v48 = v37;
      *((_DWORD *)v48 + 1) = v38;
      *((_DWORD *)v48 + 2) = v51;
      v42 = v48 + 12;
      v53 = *(char **)a1;
      v52 = *(char **)(a1 + 8);
      if (v52 != *(char **)a1)
      {
        do
        {
          v54 = *(_QWORD *)(v52 - 12);
          v52 -= 12;
          v55 = *((_DWORD *)v52 + 2);
          *(_QWORD *)(v48 - 12) = v54;
          v48 -= 12;
          *((_DWORD *)v48 + 2) = v55;
        }
        while (v52 != v53);
        v52 = *(char **)a1;
      }
      *(_QWORD *)a1 = v48;
      *(_QWORD *)(a1 + 8) = v42;
      *(_QWORD *)(a1 + 16) = v50;
      if (v52)
        operator delete(v52);
    }
    else
    {
      v41 = v62;
      *v40 = v37;
      v40[1] = v38;
      v40[2] = v41;
      v42 = v40 + 3;
    }
    *(_QWORD *)(a1 + 8) = v42;
  }
  else
  {
    v33 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, a2);
    LODWORD(v63) = v33;
    v34 = *(_QWORD *)(a1 + 32);
    if (v34 >= *(_QWORD *)(a1 + 40))
    {
      v36 = sub_20C2C9A38((uint64_t *)(a1 + 24), &v63, &v62, (uint64_t)__p, (uint64_t)&v56, &v58);
    }
    else
    {
      v35 = v62;
      *(_DWORD *)v34 = v33;
      *(_DWORD *)(v34 + 4) = v35;
      *(_QWORD *)(v34 + 16) = 0;
      *(_QWORD *)(v34 + 24) = 0;
      *(_OWORD *)(v34 + 8) = *(_OWORD *)__p;
      *(_QWORD *)(v34 + 24) = v61;
      __p[0] = 0;
      __p[1] = 0;
      v61 = 0;
      *(_OWORD *)(v34 + 32) = v56;
      *(_QWORD *)(v34 + 48) = v57;
      v56 = 0uLL;
      v57 = 0;
      *(__n128 *)(v34 + 56) = v58;
      *(_QWORD *)(v34 + 72) = v59;
      v58 = 0uLL;
      v59 = 0;
      v36 = v34 + 80;
      *(_QWORD *)(a1 + 32) = v34 + 80;
    }
    *(_QWORD *)(a1 + 32) = v36;
  }
  v63 = (void **)&v56;
  sub_20C0DE330(&v63);
  *(_QWORD *)&v56 = &v58;
  sub_20C2B69E4((void ***)&v56);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20C2A83BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 88) = &a9;
  sub_20C0DE330((void ***)(v18 - 88));
  a9 = &a13;
  sub_20C2B69E4((void ***)&a9);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20C2A842C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_20BDDF694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20BDE1330(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *IsTargetPath;
  uint64_t *TargetPath;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v4 = *((_QWORD *)this + 791) + 80;
  LODWORD(v17) = -1;
  v5 = sub_20C2CC798(v4, (unsigned int *)a2, a2, &v17);
  if (v6)
  {
    IsTargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2);
    if ((_DWORD)IsTargetPath)
    {
      TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a2);
      IsTargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath);
    }
    if (*(_QWORD *)a2 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsTargetPath))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v17);
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
      sub_20BFD265C(&v17);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a2))
    {
      v9 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v17 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v17 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(a2, (unsigned int **)&v17);
    }
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17);
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    *((_DWORD *)v5 + 6) = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    v14 = *((_QWORD *)this + 13);
    if (v14 >= *((_QWORD *)this + 14))
    {
      v15 = sub_20C2CCA78((uint64_t *)this + 12, a2);
    }
    else
    {
      sub_20BFD6E54(*((_DWORD **)this + 13), a2);
      sub_20BFD6EA4((_DWORD *)(v14 + 4), (_DWORD *)a2 + 1);
      v15 = v14 + 8;
    }
    *((_QWORD *)this + 13) = v15;
  }
  return *((unsigned int *)v5 + 6);
}

