uint64_t awd::metrics::CommCenterBasebandTrace::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::ByteSize(awd::metrics::CommCenterBasebandTrace *this)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;

  LOBYTE(v2) = *((_BYTE *)this + 36);
  if (!(_BYTE)v2)
  {
    v3 = 0;
LABEL_6:
    *((_DWORD *)this + 8) = v3;
    return v3;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 9);
    if ((v2 & 2) == 0)
      goto LABEL_17;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_17;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v2 = *((_DWORD *)this + 9);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v3 = (v3 + v10 + v6 + 1);
LABEL_17:
  if ((v2 & 4) == 0)
    goto LABEL_6;
  v11 = *((_QWORD *)this + 3);
  v12 = *(unsigned __int8 *)(v11 + 23);
  v13 = v12;
  v14 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = v14;
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v14 = *(_QWORD *)(v11 + 8);
    v13 = *(_BYTE *)(v11 + 23);
  }
  else
  {
    v16 = 1;
  }
  if (v13 < 0)
    v12 = v14;
  v17 = v3 + v16 + v12;
  *((_DWORD *)this + 8) = v17 + 1;
  return (v17 + 1);
}

void awd::metrics::CommCenterBasebandTrace::CopyFrom(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebandTrace *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebandTrace::IsInitialized(awd::metrics::CommCenterBasebandTrace *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterBasebandTrace::Swap(uint64_t this, awd::metrics::CommCenterBasebandTrace *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != (awd::metrics::CommCenterBasebandTrace *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    v3 = *(_QWORD *)(this + 16);
    v4 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(this + 16) = v4;
    *((_QWORD *)a2 + 1) = v2;
    *((_QWORD *)a2 + 2) = v3;
    v5 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
  }
  return this;
}

char *awd::metrics::CommCenterBasebandTrace::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF544D50;
  strcpy(result, "awd.metrics.CommCenterBasebandTrace");
  return result;
}

_QWORD *awd::metrics::CommCenterNVMSync::SharedCtor(_QWORD *this)
{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *(_QWORD *)((char *)this + 22) = 0;
  return this;
}

awd::metrics::CommCenterNVMSync *awd::metrics::CommCenterNVMSync::CommCenterNVMSync(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E79074C8;
  *(_QWORD *)((char *)this + 22) = 0;
  awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E79074C8;
  *(_QWORD *)((char *)this + 22) = 0;
  awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  return this;
}

void sub_1BF46B5A0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterNVMSync::MergeFrom(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*((_BYTE *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 6) = v7;
    v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v8 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 9) |= 4u;
    *((_QWORD *)this + 2) = v8;
    v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v9 = *((_BYTE *)a2 + 28);
    *((_DWORD *)this + 9) |= 8u;
    *((_BYTE *)this + 28) = v9;
    if ((*((_DWORD *)a2 + 9) & 0x10) == 0)
      return;
LABEL_9:
    v5 = *((_BYTE *)a2 + 29);
    *((_DWORD *)this + 9) |= 0x10u;
    *((_BYTE *)this + 29) = v5;
  }
}

void sub_1BF46B6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46B6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46B728(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterNVMSync::~CommCenterNVMSync(awd::metrics::CommCenterNVMSync *this)
{
  *(_QWORD *)this = off_1E79074C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E79074C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E79074C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterNVMSync::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::default_instance(awd::metrics::CommCenterNVMSync *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterNVMSync::default_instance_;
  if (!awd::metrics::CommCenterNVMSync::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterNVMSync::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterNVMSync::New(awd::metrics::CommCenterNVMSync *this)
{
  _QWORD *result;

  result = operator new(0x28uLL);
  result[4] = 0;
  result[1] = 0;
  result[2] = 0;
  *result = off_1E79074C8;
  *(_QWORD *)((char *)result + 22) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterNVMSync::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 36))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 22) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::MergePartialFromCodedStream(awd::metrics::CommCenterNVMSync *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unint64_t *v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 24);
  v6 = (unint64_t *)((char *)this + 16);
  while (1)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 < *((_QWORD *)a2 + 2) && (*v7 & 0x80000000) == 0)
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v12 >= v10)
            continue;
        }
        else
        {
          *v4 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v12 >= v10)
            continue;
        }
        if (*v12 != 16)
          continue;
        v13 = v12 + 1;
        *((_QWORD *)a2 + 1) = v13;
        if ((unint64_t)v13 >= v10)
          goto LABEL_36;
        goto LABEL_33;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 >= v10)
          goto LABEL_36;
LABEL_33:
        if (*v13 < 0)
        {
LABEL_36:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v17 >= v10)
            continue;
        }
        else
        {
          *v5 = *v13;
          v17 = v13 + 1;
          *((_QWORD *)a2 + 1) = v17;
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v17 >= v10)
            continue;
        }
        if (*v17 != 24)
          continue;
        v14 = v17 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v10)
          goto LABEL_43;
LABEL_40:
        if (*v14 < 0)
        {
LABEL_43:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 4u;
          if ((unint64_t)v18 >= v10)
            continue;
        }
        else
        {
          *v6 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 9) |= 4u;
          if ((unint64_t)v18 >= v10)
            continue;
        }
        if (*v18 != 32)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)a2 + 1) = v15;
        v25 = -1431655766;
        if ((unint64_t)v15 >= v10)
          goto LABEL_49;
LABEL_47:
        if (*v15 < 0)
        {
LABEL_49:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25);
          if (!(_DWORD)result)
            return result;
          v19 = v25;
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v19 = *v15;
          v20 = v15 + 1;
          *((_QWORD *)a2 + 1) = v20;
        }
        *((_BYTE *)this + 28) = v19 != 0;
        *((_DWORD *)this + 9) |= 8u;
        if ((unint64_t)v20 >= v10 || *v20 != 40)
          continue;
        v16 = v20 + 1;
        *((_QWORD *)a2 + 1) = v16;
        v24 = -1431655766;
        if ((unint64_t)v16 >= v10)
          goto LABEL_56;
LABEL_54:
        if (*v16 < 0)
        {
LABEL_56:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!(_DWORD)result)
            return result;
          v21 = v24;
          v22 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v21 = *v16;
          v22 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_BYTE *)this + 29) = v21 != 0;
        *((_DWORD *)this + 9) |= 0x10u;
        if (v22 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v10)
          goto LABEL_43;
        goto LABEL_40;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        v25 = -1431655766;
        if ((unint64_t)v15 >= v10)
          goto LABEL_49;
        goto LABEL_47;
      case 5u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        v24 = -1431655766;
        if ((unint64_t)v16 >= v10)
          goto LABEL_56;
        goto LABEL_54;
      default:
        v9 = TagFallback & 7;
LABEL_24:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
  }
}

uint64_t awd::metrics::CommCenterNVMSync::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::ByteSize(awd::metrics::CommCenterNVMSync *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  unsigned int v7;

  LOBYTE(v2) = *((_BYTE *)this + 36);
  if (!(_BYTE)v2)
  {
    result = 0;
    *((_DWORD *)this + 8) = 0;
    return result;
  }
  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_11;
LABEL_7:
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 9);
    }
    else
    {
      v6 = 2;
    }
    v3 += v6;
    goto LABEL_11;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  v2 = *((_DWORD *)this + 9);
  if ((v2 & 2) != 0)
    goto LABEL_7;
LABEL_11:
  if ((v2 & 4) != 0)
  {
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 2))
        + 1;
    v2 = *((_DWORD *)this + 9);
  }
  v7 = v3 + 2;
  if ((v2 & 8) == 0)
    v7 = v3;
  if ((v2 & 0x10) != 0)
    result = v7 + 2;
  else
    result = v7;
  *((_DWORD *)this + 8) = result;
  return result;
}

void awd::metrics::CommCenterNVMSync::CopyFrom(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterNVMSync *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterNVMSync::IsInitialized(awd::metrics::CommCenterNVMSync *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterNVMSync::Swap(uint64_t this, awd::metrics::CommCenterNVMSync *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::metrics::CommCenterNVMSync *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LOBYTE(v3) = *(_BYTE *)(this + 28);
    *(_BYTE *)(this + 28) = *((_BYTE *)a2 + 28);
    *((_BYTE *)a2 + 28) = v3;
    LOBYTE(v3) = *(_BYTE *)(this + 29);
    *(_BYTE *)(this + 29) = *((_BYTE *)a2 + 29);
    *((_BYTE *)a2 + 29) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

double awd::metrics::CommCenterNVMSync::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF53F2A0;
  strcpy(v3, "awd.metrics.CommCenterNVMSync");
  return *(double *)"ommCenterNVMSync";
}

_QWORD *awd::metrics::CommCenterAccessoryInformation::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

awd::metrics::CommCenterAccessoryInformation *awd::metrics::CommCenterAccessoryInformation::CommCenterAccessoryInformation(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  *(_QWORD *)this = off_1E7907540;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E7907540;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  return this;
}

void sub_1BF46BE80(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterAccessoryInformation::MergeFrom(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 4) = v7;
    if ((*((_DWORD *)a2 + 7) & 4) == 0)
      return;
LABEL_7:
    v5 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 7) |= 4u;
    *((_DWORD *)this + 5) = v5;
  }
}

void sub_1BF46BF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46BF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46BFC0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterAccessoryInformation::~CommCenterAccessoryInformation(awd::metrics::CommCenterAccessoryInformation *this)
{
  *(_QWORD *)this = off_1E7907540;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E7907540;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E7907540;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::default_instance(awd::metrics::CommCenterAccessoryInformation *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterAccessoryInformation::default_instance_;
  if (!awd::metrics::CommCenterAccessoryInformation::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterAccessoryInformation::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterAccessoryInformation::New(awd::metrics::CommCenterAccessoryInformation *this)
{
  _QWORD *result;

  result = operator new(0x20uLL);
  *result = off_1E7907540;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 28))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::MergePartialFromCodedStream(awd::metrics::CommCenterAccessoryInformation *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  uint64_t TagFallback;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
          {
            TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = *v7;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((_QWORD *)a2 + 1) = v7 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v9 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_22;
          v13 = (char *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v13 >= v11 || *v13 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
            if (!(_DWORD)result)
              return result;
            v14 = (_BYTE *)*((_QWORD *)a2 + 1);
            v11 = *((_QWORD *)a2 + 2);
            *((_DWORD *)this + 7) |= 1u;
            if ((unint64_t)v14 < v11)
              goto LABEL_27;
          }
          else
          {
            *v4 = *v13;
            v14 = v13 + 1;
            *((_QWORD *)a2 + 1) = v14;
            *((_DWORD *)this + 7) |= 1u;
            if ((unint64_t)v14 < v11)
            {
LABEL_27:
              if (*v14 == 16)
              {
                v15 = v14 + 1;
                *((_QWORD *)a2 + 1) = v15;
                if ((unint64_t)v15 < v11)
                  goto LABEL_29;
LABEL_32:
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
                if (!(_DWORD)result)
                  return result;
                v16 = (_BYTE *)*((_QWORD *)a2 + 1);
                v11 = *((_QWORD *)a2 + 2);
                *((_DWORD *)this + 7) |= 2u;
                if ((unint64_t)v16 < v11)
                  goto LABEL_34;
              }
            }
          }
        }
        if (v9 != 2)
          break;
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_32;
LABEL_29:
        if ((char)*v15 < 0)
          goto LABEL_32;
        *v5 = *v15;
        v16 = v15 + 1;
        *((_QWORD *)a2 + 1) = v16;
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v16 < v11)
        {
LABEL_34:
          if (*v16 == 24)
          {
            v12 = v16 + 1;
            *((_QWORD *)a2 + 1) = v12;
            if ((unint64_t)v12 < v11)
              goto LABEL_36;
LABEL_39:
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
            if (!(_DWORD)result)
              return result;
            v19 = *((_QWORD *)a2 + 1);
            v18 = *((_QWORD *)a2 + 2);
            *((_DWORD *)this + 7) |= 4u;
            if (v19 == v18)
              goto LABEL_41;
          }
        }
      }
      if (v9 != 3)
        break;
      v10 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_22;
      v12 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v12 >= v11)
        goto LABEL_39;
LABEL_36:
      if ((char)*v12 < 0)
        goto LABEL_39;
      *v6 = *v12;
      v17 = (char *)(v12 + 1);
      *((_QWORD *)a2 + 1) = v17;
      *((_DWORD *)this + 7) |= 4u;
      if (v17 == (char *)v11)
      {
LABEL_41:
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    v10 = TagFallback & 7;
LABEL_22:
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::metrics::CommCenterAccessoryInformation::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = v5[7];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  if ((v5[7] & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::ByteSize(awd::metrics::CommCenterAccessoryInformation *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  uint64_t v8;

  LOBYTE(v2) = *((_BYTE *)this + 28);
  if (!(_BYTE)v2)
  {
    v3 = 0;
LABEL_6:
    *((_DWORD *)this + 6) = v3;
    return v3;
  }
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 7);
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 7);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
    goto LABEL_6;
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
       + 1
       + v3;
  else
    v8 = (v3 + 2);
  *((_DWORD *)this + 6) = v8;
  return v8;
}

void awd::metrics::CommCenterAccessoryInformation::CopyFrom(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterAccessoryInformation *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterAccessoryInformation::IsInitialized(awd::metrics::CommCenterAccessoryInformation *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::Swap(uint64_t this, awd::metrics::CommCenterAccessoryInformation *a2)
{
  uint64_t v2;

  if (a2 != (awd::metrics::CommCenterAccessoryInformation *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
  }
  return this;
}

double awd::metrics::CommCenterAccessoryInformation::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF544D60;
  strcpy(v3, "awd.metrics.CommCenterAccessoryInformation");
  return *(double *)"ssoryInformation";
}

double awd::metrics::MetricsCCBasebandReset::SharedCtor(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE8338];
  *((_WORD *)this + 20) = 0;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v1;
  *((_QWORD *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return result;
}

awd::metrics::MetricsCCBasebandReset *awd::metrics::MetricsCCBasebandReset::MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E79075B8;
  *((_QWORD *)this + 1) = v3;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = v3;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E79075B8;
  *((_QWORD *)this + 1) = v3;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = v3;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  return this;
}

void sub_1BF46C608(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::MetricsCCBasebandReset::MergeFrom(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  int v4;
  void **v5;
  void **v6;
  void **v7;
  char v8;
  __int128 v9;
  int v10;
  void *v11;
  size_t v12;
  char v13;
  int v14;
  int v15;
  void **v16;
  void **v17;
  char v18;
  __int128 v19;
  void *v20;
  size_t v21;
  void **v22;
  void **v23;
  char v24;
  __int128 v25;
  void *v26;
  size_t v27;
  void **v28;
  void **v29;
  char v30;
  __int128 v31;
  void *v32;
  size_t v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v37);
  }
  v4 = *((_DWORD *)a2 + 17);
  if (!(_BYTE)v4)
    goto LABEL_76;
  v5 = (void **)MEMORY[0x1E0DE8338];
  if ((v4 & 1) == 0)
    goto LABEL_19;
  v6 = (void **)*((_QWORD *)a2 + 1);
  *((_DWORD *)this + 17) |= 1u;
  v7 = (void **)*((_QWORD *)this + 1);
  if (v7 == v5)
  {
    v7 = (void **)operator new(0x18uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    *((_QWORD *)this + 1) = v7;
  }
  if (v7 == v6)
  {
LABEL_19:
    v10 = *((_DWORD *)a2 + 17);
    if ((v10 & 2) != 0)
      goto LABEL_25;
    goto LABEL_20;
  }
  v8 = *((_BYTE *)v6 + 23);
  if (*((char *)v7 + 23) < 0)
  {
    if (v8 >= 0)
      v11 = v6;
    else
      v11 = *v6;
    if (v8 >= 0)
      v12 = *((unsigned __int8 *)v6 + 23);
    else
      v12 = (size_t)v6[1];
    std::string::__assign_no_alias<false>(v7, v11, v12);
    goto LABEL_19;
  }
  if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v7, *v6, (size_t)v6[1]);
    v10 = *((_DWORD *)a2 + 17);
    if ((v10 & 2) != 0)
      goto LABEL_25;
LABEL_20:
    if ((v10 & 4) != 0)
      goto LABEL_26;
LABEL_21:
    if ((v10 & 8) != 0)
      goto LABEL_27;
    goto LABEL_22;
  }
  v9 = *(_OWORD *)v6;
  v7[2] = v6[2];
  *(_OWORD *)v7 = v9;
  v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 2) == 0)
    goto LABEL_20;
LABEL_25:
  v13 = *((_BYTE *)a2 + 40);
  *((_DWORD *)this + 17) |= 2u;
  *((_BYTE *)this + 40) = v13;
  v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 4) == 0)
    goto LABEL_21;
LABEL_26:
  v14 = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 17) |= 4u;
  *((_DWORD *)this + 4) = v14;
  v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 8) != 0)
  {
LABEL_27:
    v15 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 17) |= 8u;
    *((_DWORD *)this + 5) = v15;
    if ((*((_DWORD *)a2 + 17) & 0x10) == 0)
      goto LABEL_42;
    goto LABEL_28;
  }
LABEL_22:
  if ((v10 & 0x10) == 0)
    goto LABEL_42;
LABEL_28:
  v16 = (void **)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 17) |= 0x10u;
  v17 = (void **)*((_QWORD *)this + 3);
  if (v17 == v5)
  {
    v17 = (void **)operator new(0x18uLL);
    v17[1] = 0;
    v17[2] = 0;
    *v17 = 0;
    *((_QWORD *)this + 3) = v17;
  }
  if (v17 == v16)
  {
LABEL_42:
    if ((*((_BYTE *)a2 + 68) & 0x20) == 0)
      goto LABEL_59;
    goto LABEL_43;
  }
  v18 = *((_BYTE *)v16 + 23);
  if (*((char *)v17 + 23) < 0)
  {
    if (v18 >= 0)
      v20 = v16;
    else
      v20 = *v16;
    if (v18 >= 0)
      v21 = *((unsigned __int8 *)v16 + 23);
    else
      v21 = (size_t)v16[1];
    std::string::__assign_no_alias<false>(v17, v20, v21);
    goto LABEL_42;
  }
  if ((*((_BYTE *)v16 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v17, *v16, (size_t)v16[1]);
    if ((*((_BYTE *)a2 + 68) & 0x20) == 0)
      goto LABEL_59;
  }
  else
  {
    v19 = *(_OWORD *)v16;
    v17[2] = v16[2];
    *(_OWORD *)v17 = v19;
    if ((*((_BYTE *)a2 + 68) & 0x20) == 0)
      goto LABEL_59;
  }
LABEL_43:
  v22 = (void **)*((_QWORD *)a2 + 4);
  *((_DWORD *)this + 17) |= 0x20u;
  v23 = (void **)*((_QWORD *)this + 4);
  if (v23 == v5)
  {
    v23 = (void **)operator new(0x18uLL);
    v23[1] = 0;
    v23[2] = 0;
    *v23 = 0;
    *((_QWORD *)this + 4) = v23;
  }
  if (v23 != v22)
  {
    v24 = *((_BYTE *)v22 + 23);
    if (*((char *)v23 + 23) < 0)
    {
      if (v24 >= 0)
        v26 = v22;
      else
        v26 = *v22;
      if (v24 >= 0)
        v27 = *((unsigned __int8 *)v22 + 23);
      else
        v27 = (size_t)v22[1];
      std::string::__assign_no_alias<false>(v23, v26, v27);
    }
    else if ((*((_BYTE *)v22 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v23, *v22, (size_t)v22[1]);
    }
    else
    {
      v25 = *(_OWORD *)v22;
      v23[2] = v22[2];
      *(_OWORD *)v23 = v25;
    }
  }
LABEL_59:
  if ((*((_BYTE *)a2 + 68) & 0x40) == 0)
    goto LABEL_74;
  v28 = (void **)*((_QWORD *)a2 + 6);
  *((_DWORD *)this + 17) |= 0x40u;
  v29 = (void **)*((_QWORD *)this + 6);
  if (v29 == v5)
  {
    v29 = (void **)operator new(0x18uLL);
    v29[1] = 0;
    v29[2] = 0;
    *v29 = 0;
    *((_QWORD *)this + 6) = v29;
  }
  if (v29 == v28)
  {
LABEL_74:
    v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x80) == 0)
      goto LABEL_76;
    goto LABEL_75;
  }
  v30 = *((_BYTE *)v28 + 23);
  if (*((char *)v29 + 23) < 0)
  {
    if (v30 >= 0)
      v32 = v28;
    else
      v32 = *v28;
    if (v30 >= 0)
      v33 = *((unsigned __int8 *)v28 + 23);
    else
      v33 = (size_t)v28[1];
    std::string::__assign_no_alias<false>(v29, v32, v33);
    goto LABEL_74;
  }
  if ((*((_BYTE *)v28 + 23) & 0x80) == 0)
  {
    v31 = *(_OWORD *)v28;
    v29[2] = v28[2];
    *(_OWORD *)v29 = v31;
    v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x80) == 0)
      goto LABEL_76;
LABEL_75:
    v34 = *((_DWORD *)a2 + 11);
    *((_DWORD *)this + 17) |= 0x80u;
    *((_DWORD *)this + 11) = v34;
    v4 = *((_DWORD *)a2 + 17);
    goto LABEL_76;
  }
  std::string::__assign_no_alias<true>(v29, *v28, (size_t)v28[1]);
  v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 0x80) != 0)
    goto LABEL_75;
LABEL_76:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      v35 = *((_QWORD *)a2 + 7);
      *((_DWORD *)this + 17) |= 0x100u;
      *((_QWORD *)this + 7) = v35;
      v4 = *((_DWORD *)a2 + 17);
    }
    if ((v4 & 0x200) != 0)
    {
      v36 = *((_BYTE *)a2 + 41);
      *((_DWORD *)this + 17) |= 0x200u;
      *((_BYTE *)this + 41) = v36;
    }
  }
}

void sub_1BF46C9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46C9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46CA28(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::MetricsCCBasebandReset::~MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this)
{
  *(_QWORD *)this = off_1E79075B8;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E79075B8;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E79075B8;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v2);
}

void awd::metrics::MetricsCCBasebandReset::SharedDtor(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;

  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 == MEMORY[0x1E0DE8338] || v2 == 0)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5 != MEMORY[0x1E0DE8338] && v5 != 0)
      goto LABEL_28;
LABEL_11:
    v7 = *((_QWORD *)this + 4);
    if (v7 != v3 && v7 != 0)
      goto LABEL_34;
    goto LABEL_16;
  }
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  operator delete((void *)v2);
  v5 = *((_QWORD *)this + 3);
  if (v5 == v3 || v5 == 0)
    goto LABEL_11;
LABEL_28:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  v7 = *((_QWORD *)this + 4);
  if (v7 != v3 && v7 != 0)
  {
LABEL_34:
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    operator delete((void *)v7);
    v9 = *((_QWORD *)this + 6);
    if (v9 != v3 && v9 != 0)
      goto LABEL_40;
    return;
  }
LABEL_16:
  v9 = *((_QWORD *)this + 6);
  if (v9 != v3 && v9 != 0)
  {
LABEL_40:
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    operator delete((void *)v9);
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::default_instance(awd::metrics::MetricsCCBasebandReset *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::MetricsCCBasebandReset::default_instance_;
  if (!awd::metrics::MetricsCCBasebandReset::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::MetricsCCBasebandReset::default_instance_;
  }
  return result;
}

double awd::metrics::MetricsCCBasebandReset::New(awd::metrics::MetricsCCBasebandReset *this)
{
  _QWORD *v1;
  uint64_t v2;
  double result;

  v1 = operator new(0x48uLL);
  v2 = MEMORY[0x1E0DE8338];
  *v1 = off_1E79075B8;
  v1[1] = v2;
  *((_WORD *)v1 + 20) = 0;
  result = 0.0;
  v1[2] = 0;
  v1[3] = v2;
  v1[4] = v2;
  *((_DWORD *)v1 + 11) = 0;
  v1[6] = v2;
  v1[7] = 0;
  v1[8] = 0;
  return result;
}

uint64_t awd::metrics::MetricsCCBasebandReset::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(this + 68);
  if ((_BYTE)v1)
  {
    v2 = MEMORY[0x1E0DE8338];
    if ((v1 & 1) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
          *(_BYTE *)(this + 40) = 0;
          *(_QWORD *)(this + 16) = 0;
          if ((*(_BYTE *)(this + 68) & 0x10) == 0)
            goto LABEL_13;
LABEL_7:
          v4 = *(_QWORD *)(this + 24);
          if (v4 != v2)
          {
            if (*(char *)(v4 + 23) < 0)
            {
              **(_BYTE **)v4 = 0;
              *(_QWORD *)(v4 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v4 = 0;
              *(_BYTE *)(v4 + 23) = 0;
            }
          }
LABEL_13:
          if ((*(_BYTE *)(this + 68) & 0x20) != 0)
          {
            v5 = *(_QWORD *)(this + 32);
            if (v5 != v2)
            {
              if (*(char *)(v5 + 23) < 0)
              {
                **(_BYTE **)v5 = 0;
                *(_QWORD *)(v5 + 8) = 0;
                if ((*(_BYTE *)(this + 68) & 0x40) != 0)
                {
LABEL_18:
                  v6 = *(_QWORD *)(this + 48);
                  if (v6 != v2)
                  {
                    if (*(char *)(v6 + 23) < 0)
                    {
                      **(_BYTE **)v6 = 0;
                      *(_QWORD *)(v6 + 8) = 0;
                    }
                    else
                    {
                      *(_BYTE *)v6 = 0;
                      *(_BYTE *)(v6 + 23) = 0;
                    }
                  }
                }
LABEL_24:
                *(_DWORD *)(this + 44) = 0;
                v1 = *(_DWORD *)(this + 68);
                goto LABEL_25;
              }
              *(_BYTE *)v5 = 0;
              *(_BYTE *)(v5 + 23) = 0;
            }
          }
          if ((*(_BYTE *)(this + 68) & 0x40) != 0)
            goto LABEL_18;
          goto LABEL_24;
        }
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
    }
    *(_BYTE *)(this + 40) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((*(_BYTE *)(this + 68) & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_7;
  }
LABEL_25:
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(this + 56) = 0;
    *(_BYTE *)(this + 41) = 0;
  }
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::MergePartialFromCodedStream(awd::metrics::MetricsCCBasebandReset *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t TagFallback;
  int v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unsigned int v17;
  _BYTE *v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  _BYTE *v32;
  char *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;

  v4 = (unsigned int *)((char *)this + 16);
  v5 = (unint64_t *)((char *)this + 56);
  v6 = (unsigned int *)((char *)this + 44);
  v7 = (unsigned int *)((char *)this + 20);
  v8 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_60;
        *((_DWORD *)this + 17) |= 1u;
        if (*((_QWORD *)this + 1) == v8)
        {
          v12 = operator new(0x18uLL);
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_QWORD *)this + 1) = v12;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if ((_DWORD)result)
        {
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v15 < v14 && *v15 == 16)
          {
            v16 = v15 + 1;
            *((_QWORD *)a2 + 1) = v16;
            goto LABEL_18;
          }
          continue;
        }
        return result;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
LABEL_18:
        v44 = -1431655766;
        if ((unint64_t)v16 < v14 && (*v16 & 0x80000000) == 0)
        {
          v17 = *v16;
          v18 = v16 + 1;
          *((_QWORD *)a2 + 1) = v18;
          goto LABEL_92;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
        if ((_DWORD)result)
        {
          v17 = v44;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
LABEL_92:
          *((_BYTE *)this + 40) = v17 != 0;
          *((_DWORD *)this + 17) |= 2u;
          if ((unint64_t)v18 >= v14 || *v18 != 24)
            continue;
          v19 = v18 + 1;
          *((_QWORD *)a2 + 1) = v19;
          if ((unint64_t)v19 >= v14)
            goto LABEL_98;
          goto LABEL_95;
        }
        break;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v19 >= v14)
          goto LABEL_98;
LABEL_95:
        if (*v19 < 0)
        {
LABEL_98:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v41 = *((_DWORD *)this + 17) | 4;
          *((_DWORD *)this + 17) = v41;
          if ((unint64_t)v40 >= v42)
            continue;
        }
        else
        {
          *v4 = *v19;
          v40 = v19 + 1;
          *((_QWORD *)a2 + 1) = v40;
          v41 = *((_DWORD *)this + 17) | 4;
          *((_DWORD *)this + 17) = v41;
          if ((unint64_t)v40 >= v14)
            continue;
        }
        if (*v40 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v40 + 1;
        *((_DWORD *)this + 17) = v41 | 0x10;
        if (*((_QWORD *)this + 3) == v8)
        {
LABEL_26:
          v20 = operator new(0x18uLL);
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          *((_QWORD *)this + 3) = v20;
        }
LABEL_27:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v22 >= v21 || *v22 != 40)
          continue;
        v23 = v22 + 1;
        *((_QWORD *)a2 + 1) = v23;
        if ((unint64_t)v23 >= v21)
          goto LABEL_72;
LABEL_34:
        if (*v23 < 0)
        {
LABEL_72:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 17) |= 0x100u;
          if ((unint64_t)v24 >= v21)
            continue;
        }
        else
        {
          *v5 = *v23;
          v24 = v23 + 1;
          *((_QWORD *)a2 + 1) = v24;
          *((_DWORD *)this + 17) |= 0x100u;
          if ((unint64_t)v24 >= v21)
            continue;
        }
        if (*v24 != 48)
          continue;
        v25 = v24 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_76:
        v43 = -1431655766;
        if ((unint64_t)v25 >= v21 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43);
          if (!(_DWORD)result)
            return result;
          v35 = v43;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v35 = *v25;
          v36 = v25 + 1;
          *((_QWORD *)a2 + 1) = v36;
        }
        *((_BYTE *)this + 41) = v35 != 0;
        v39 = *((_DWORD *)this + 17) | 0x200;
        *((_DWORD *)this + 17) = v39;
        if ((unint64_t)v36 >= v21 || *v36 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v36 + 1;
        *((_DWORD *)this + 17) = v39 | 0x20;
        if (*((_QWORD *)this + 4) == v8)
        {
LABEL_41:
          v26 = operator new(0x18uLL);
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          *((_QWORD *)this + 4) = v26;
        }
LABEL_42:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_47:
        *((_DWORD *)this + 17) |= 0x40u;
        if (*((_QWORD *)this + 6) == v8)
        {
          v28 = operator new(0x18uLL);
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          *((_QWORD *)this + 6) = v28;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v30 = (_BYTE *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v30 >= v29 || *v30 != 72)
          continue;
        v31 = v30 + 1;
        *((_QWORD *)a2 + 1) = v31;
        if ((unint64_t)v31 >= v29)
          goto LABEL_64;
LABEL_56:
        if (*v31 < 0)
        {
LABEL_64:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          v29 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 17) |= 0x80u;
          if ((unint64_t)v32 >= v29)
            continue;
        }
        else
        {
          *v6 = *v31;
          v32 = v31 + 1;
          *((_QWORD *)a2 + 1) = v32;
          *((_DWORD *)this + 17) |= 0x80u;
          if ((unint64_t)v32 >= v29)
            continue;
        }
        if (*v32 != 80)
          continue;
        v33 = v32 + 1;
        *((_QWORD *)a2 + 1) = v33;
LABEL_68:
        if ((unint64_t)v33 >= v29 || *v33 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v38 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 17) |= 8u;
          if (v38 != v37)
            continue;
        }
        else
        {
          *v7 = *v33;
          v34 = (unsigned __int8 *)(v33 + 1);
          *((_QWORD *)a2 + 1) = v34;
          *((_DWORD *)this + 17) |= 8u;
          if (v34 != (unsigned __int8 *)v29)
            continue;
        }
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        continue;
      case 4u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_60;
        *((_DWORD *)this + 17) |= 0x10u;
        if (*((_QWORD *)this + 3) == v8)
          goto LABEL_26;
        goto LABEL_27;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v23 < v21)
          goto LABEL_34;
        goto LABEL_72;
      case 6u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        goto LABEL_76;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_60;
        *((_DWORD *)this + 17) |= 0x20u;
        if (*((_QWORD *)this + 4) == v8)
          goto LABEL_41;
        goto LABEL_42;
      case 8u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_47;
        goto LABEL_60;
      case 9u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v31 < v29)
          goto LABEL_56;
        goto LABEL_64;
      case 0xAu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v33 = (char *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_68;
      default:
        v11 = TagFallback & 7;
LABEL_60:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 68);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    v6 = *(_DWORD *)(v5 + 68);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x10) == 0)
  {
LABEL_5:
    if ((v6 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x100) == 0)
  {
LABEL_6:
    if ((v6 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x200) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 41), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x80) == 0)
  {
LABEL_10:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 68) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::ByteSize(awd::metrics::MetricsCCBasebandReset *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;

  v2 = *((_DWORD *)this + 17);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    if ((v2 & 0xFF00) == 0)
      goto LABEL_73;
    goto LABEL_68;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) != 0)
      v3 = 2;
    else
      v3 = 0;
    if ((v2 & 4) == 0)
      goto LABEL_26;
LABEL_22:
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
      v2 = *((_DWORD *)this + 17);
    }
    else
    {
      v13 = 2;
    }
    v3 = (v13 + v3);
    goto LABEL_26;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 17);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v11 = v9 + v5;
  if ((v2 & 2) != 0)
    v3 = v11 + 2;
  else
    v3 = v11;
  if ((v2 & 4) != 0)
    goto LABEL_22;
LABEL_26:
  if ((v2 & 8) != 0)
  {
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      v2 = *((_DWORD *)this + 17);
      v3 = (v15 + 1 + v3);
      if ((v2 & 0x10) != 0)
        goto LABEL_37;
    }
    else
    {
      v3 = (v3 + 2);
      if ((v2 & 0x10) != 0)
        goto LABEL_37;
    }
LABEL_28:
    if ((v2 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_46;
  }
  if ((v2 & 0x10) == 0)
    goto LABEL_28;
LABEL_37:
  v16 = *((_QWORD *)this + 3);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = v17;
  v19 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v16 + 23);
  else
    v20 = v19;
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v19 = *(_QWORD *)(v16 + 8);
    v2 = *((_DWORD *)this + 17);
    v18 = *(_BYTE *)(v16 + 23);
  }
  else
  {
    v21 = 1;
  }
  if (v18 < 0)
    v17 = v19;
  v3 = (v3 + v21 + v17 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_46:
  v22 = *((_QWORD *)this + 4);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = v23;
  v25 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v26 = *(unsigned __int8 *)(v22 + 23);
  else
    v26 = v25;
  if (v26 >= 0x80)
  {
    v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26);
    v23 = *(unsigned __int8 *)(v22 + 23);
    v25 = *(_QWORD *)(v22 + 8);
    v2 = *((_DWORD *)this + 17);
    v24 = *(_BYTE *)(v22 + 23);
  }
  else
  {
    v27 = 1;
  }
  if (v24 < 0)
    v23 = v25;
  v3 = (v3 + v27 + v23 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_30:
    if ((v2 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_55:
  v28 = *((_QWORD *)this + 6);
  v29 = *(unsigned __int8 *)(v28 + 23);
  v30 = v29;
  v31 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v32 = *(unsigned __int8 *)(v28 + 23);
  else
    v32 = v31;
  if (v32 >= 0x80)
  {
    v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32);
    v29 = *(unsigned __int8 *)(v28 + 23);
    v31 = *(_QWORD *)(v28 + 8);
    v2 = *((_DWORD *)this + 17);
    v30 = *(_BYTE *)(v28 + 23);
  }
  else
  {
    v33 = 1;
  }
  if (v30 < 0)
    v29 = v31;
  v3 = (v3 + v33 + v29 + 1);
  if ((v2 & 0x80) == 0)
  {
LABEL_31:
    if ((v2 & 0xFF00) == 0)
      goto LABEL_73;
    goto LABEL_68;
  }
LABEL_64:
  v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v34 >= 0x80)
  {
    v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34);
    v2 = *((_DWORD *)this + 17);
    v3 = (v35 + 1 + v3);
    if ((v2 & 0xFF00) == 0)
      goto LABEL_73;
  }
  else
  {
    v3 = (v3 + 2);
    if ((v2 & 0xFF00) == 0)
      goto LABEL_73;
  }
LABEL_68:
  if ((v2 & 0x100) != 0)
  {
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 7))
                + 1;
    v2 = *((_DWORD *)this + 17);
  }
  if ((v2 & 0x200) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
LABEL_73:
  *((_DWORD *)this + 16) = v3;
  return v3;
}

void awd::metrics::MetricsCCBasebandReset::CopyFrom(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::MetricsCCBasebandReset *))(*(_QWORD *)this + 32))(this);
    awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::IsInitialized(awd::metrics::MetricsCCBasebandReset *this)
{
  return 1;
}

uint64_t awd::metrics::MetricsCCBasebandReset::Swap(uint64_t this, awd::metrics::MetricsCCBasebandReset *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != (awd::metrics::MetricsCCBasebandReset *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LOBYTE(v2) = *(_BYTE *)(this + 40);
    *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 40);
    *((_BYTE *)a2 + 40) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    v3 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v3;
    v4 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v4;
    v5 = *(_QWORD *)(this + 48);
    v6 = *(_QWORD *)(this + 56);
    v7 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(this + 56) = v7;
    *((_QWORD *)a2 + 6) = v5;
    *((_QWORD *)a2 + 7) = v6;
    LOBYTE(v5) = *(_BYTE *)(this + 41);
    *(_BYTE *)(this + 41) = *((_BYTE *)a2 + 41);
    *((_BYTE *)a2 + 41) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 68);
    *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v5;
  }
  return this;
}

char *awd::metrics::MetricsCCBasebandReset::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF53F3D0;
  strcpy(result, "awd.metrics.MetricsCCBasebandReset");
  return result;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::GetCachedSize(awd::metrics::CommCenterBasebandBootTime *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t awd::metrics::CrashReasonType::GetCachedSize(awd::metrics::CrashReasonType *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t awd::metrics::CommCenterBasebanCrash::GetCachedSize(awd::metrics::CommCenterBasebanCrash *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t awd::metrics::CommCenterBasebandTrace::GetCachedSize(awd::metrics::CommCenterBasebandTrace *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterNVMSync::GetCachedSize(awd::metrics::CommCenterNVMSync *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::GetCachedSize(awd::metrics::CommCenterAccessoryInformation *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t awd::metrics::MetricsCCBasebandReset::GetCachedSize(awd::metrics::MetricsCCBasebandReset *this)
{
  return *((unsigned int *)this + 16);
}

std::__shared_weak_count_vtbl **sys::UIObserver::create_default_global@<X0>(uint64_t a1@<X8>)
{
  sys::UIObserver *v3;

  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v3 = (sys::UIObserver *)operator new(0x40uLL);
  sys::UIObserver::UIObserver(v3);
  return std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_1BF46D95C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

sys::UIObserver *sys::UIObserver::UIObserver(sys::UIObserver *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t *v4;

  v2 = dispatch_queue_create("sys::UIObserver", 0);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v2;
  if (v2)
  {
    v3 = v2;
    dispatch_retain(v2);
    *((_QWORD *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  *((_QWORD *)this + 4) = &off_1E79077D8;
  v4 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(v4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>((_QWORD *)this + 5, (uint64_t)v4);
  *((_QWORD *)this + 7) = 0xFFFFFFFF00000000;
  return this;
}

void sub_1BF46DA14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  operator delete(v2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void sub_1BF46DA30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

uint64_t sys::UIObserver::handleDisplayLockedChange_sync(uint64_t this)
{
  uint64_t v1;
  char v2;

  if (*(_DWORD *)(this + 60) != -1)
  {
    v1 = this;
    v2 = SBSGetScreenLockStatus() != 0;
    return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v1 + 40), v2);
  }
  return this;
}

void sys::UIObserver::registerForScreenLockedNotification_sync(sys::UIObserver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[5];
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_30;
  v11[4] = v3;
  v12 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  notify_register_dispatch("com.apple.springboard.lockstate", (int *)this + 15, *((dispatch_queue_t *)this + 2), v11);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF46DB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  char v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 32);
      if (v5 && *(_DWORD *)(v5 + 60) != -1)
      {
        v6 = SBSGetScreenLockStatus() != 0;
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 40), v6);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF46DC60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sys::UIObserver::unregisterForScreenLockedNotification_sync(sys::UIObserver *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 15);
  if ((_DWORD)result != -1)
  {
    result = notify_cancel(result);
    *((_DWORD *)this + 15) = -1;
  }
  return result;
}

void sys::UIObserver::observe(sys::UIObserver *this@<X0>, char a2@<W1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  void (__cdecl *v19)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  char v28;
  _QWORD aBlock[6];
  std::__shared_weak_count *v30;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v4 || (v7 = *(_QWORD *)this, (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  v14 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v15 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3sys10UIObserver7observeEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_7;
  aBlock[4] = this;
  aBlock[5] = v7;
  v30 = v9;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(aBlock);
  v18 = v17;
  if (v17)
    v19 = (void (__cdecl *)(std::__shared_weak_count *__hidden))_Block_copy(v17);
  else
    v19 = 0;
  v14->~__shared_weak_count = v19;
  *a3 = v14;
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_1E7907A20;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = v14;
  a3[1] = (std::__shared_weak_count_vtbl *)v20;
  if (v18)
    _Block_release(v18);
  v26[0] = v15;
  v26[1] = 1174405120;
  v26[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_7;
  v26[3] = &__block_descriptor_tmp_8_8;
  v26[4] = this;
  v26[5] = v14;
  v27 = v20;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v28 = a2;
  ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped((uint64_t *)this, (uint64_t)v26);
  v23 = v27;
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF46DEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  const void **v25;
  const void *v26;
  uint64_t v27;

  (*(void (**)(uint64_t))(v27 + 16))(v27);
  if (*v25)
    _Block_release(*v25);
  operator delete(v25);
  if (v26)
    _Block_release(v26);
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (uint64_t *)a1[5];
      if (v6)
      {
        v9[0] = MEMORY[0x1E0C809B0];
        v9[1] = 0x40000000;
        v9[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_2;
        v9[3] = &__block_descriptor_tmp_5_13;
        v9[4] = v3;
        ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(v6, (uint64_t)v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t ___ZN3sys10UIObserver7observeEb_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_DWORD *)(v1 + 56) - 1;
  *(_DWORD *)(v1 + 56) = v2;
  if (!v2)
  {
    result = *(unsigned int *)(v1 + 60);
    if ((_DWORD)result != -1)
    {
      result = notify_cancel(result);
      *(_DWORD *)(v1 + 60) = -1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke_7(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v2 + 56) = v3 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a1 + 56))
      return;
  }
  else
  {
    sys::UIObserver::registerForScreenLockedNotification_sync((sys::UIObserver *)v2);
    if (!*(_BYTE *)(a1 + 56))
      return;
  }
  if (*(_DWORD *)(v2 + 60) != -1)
  {
    v4 = SBSGetScreenLockStatus() != 0;
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v2 + 40), v4);
  }
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::__shared_weak_count_vtbl **std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *__p;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7907788;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  __p = 0;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (!v6)
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    do
LABEL_12:
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_15;
  }
  if (v6->__shared_owners_ == -1)
  {
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_12;
  }
LABEL_15:
  v14 = __p;
  __p = 0;
  if (v14)
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&__p, v14);
  return a1;
}

void sub_1BF46E2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  a10 = 0;
  if (v10)
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<sys::UIObserver>::operator()[abi:ne180100](a1 + 24, *(_QWORD **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF544F12)
    return a1 + 24;
  if (((v3 & 0x80000001BF544F12 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF544F12))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF544F12 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::default_delete<sys::UIObserver>::operator()[abi:ne180100](int a1, _QWORD *__p)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;

  if (__p)
  {
    __p[4] = &off_1E79077D8;
    v3 = (unsigned int *)__p[6];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    v10 = __p[3];
    if (v10)
      dispatch_release(v10);
    v11 = __p[2];
    if (v11)
      dispatch_release(v11);
    v12 = (std::__shared_weak_count *)__p[1];
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    operator delete(__p);
  }
}

_QWORD *boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E79077D8;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E79077D8;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  a1[1] = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E7907958;
  v4[2] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF46E5BC(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1BF46E68C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  __cxa_end_catch();
  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24[4];

  v2 = (uint64_t *)operator new(0x20uLL);
  v20 = (uint64_t)&v20;
  v21 = &v20;
  v24[0] = 0;
  v24[1] = 0;
  v22 = 0;
  v23 = v24;
  v3 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v3, (uint64_t)&v20);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v2, (uint64_t)v3);
  v4 = operator new(1uLL);
  v2[2] = (uint64_t)v4;
  v2[3] = 0;
  v5 = operator new(0x18uLL);
  v5[1] = 0x100000001;
  *v5 = off_1E7907898;
  v5[2] = v4;
  v2[3] = (uint64_t)v5;
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v23, v24[0]);
  if (v22)
  {
    v6 = v20;
    v7 = v21;
    v8 = *v21;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v20 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v22 = 0;
    if (v7 != &v20)
    {
      do
      {
        v12 = (uint64_t *)v7[1];
        v13 = (unsigned int *)v7[3];
        if (v13)
        {
          v14 = v13 + 2;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
            v17 = v13 + 3;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
              (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
          }
        }
        operator delete(v7);
        v7 = v12;
      }
      while (v12 != &v20);
    }
  }
  a1[2] = *(_QWORD *)*a1;
  v9 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v9, 0);
  a1[3] = (uint64_t)v9;
  a1[4] = 0;
  v10 = operator new(0x18uLL);
  v10[1] = 0x100000001;
  *v10 = off_1E79078F8;
  v10[2] = v9;
  a1[4] = (uint64_t)v10;
  return a1;
}

void sub_1BF46E8AC(void *a1)
{
  pthread_mutex_t *v1;

  __cxa_begin_catch(a1);
  pthread_mutex_destroy(v1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BF46E8C4()
{
  __break(1u);
}

void sub_1BF46E990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  __cxa_end_catch();
  v11 = (unsigned int *)v9[3];
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
      v15 = v11 + 3;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr((uint64_t)v9);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1BF46EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;
  operator delete(v11);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1BF46EA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(a1 + 3), (_QWORD *)a1[4]);
  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
    operator delete(v1);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 16));
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(uint64_t ***a1, char a2)
{
  __int128 v3;
  pthread_mutex_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD v49[4];
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  uint64_t ***v53;
  uint64_t v54;
  uint64_t **v55;
  unsigned int *v56;
  char v57;
  __int128 v58;
  __int128 v59;
  std::runtime_error v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *__p[2];
  pthread_mutex_t *v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v57 = a2;
  v55 = 0;
  v56 = 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = v3;
  v70 = v3;
  v67 = v3;
  v68 = v3;
  v65 = v3;
  v66 = v3;
  v63 = v3;
  v64 = v3;
  v61 = v3;
  v62 = v3;
  v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v61;
  v72[0] = 0;
  v72[1] = v4;
  pthread_mutex_lock(v4);
  v5 = a1[1];
  if (!v5)
  {
    v7 = *a1;
    goto LABEL_15;
  }
  v6 = atomic_load((unsigned int *)v5 + 2);
  v7 = *a1;
  if (v6 == 1)
  {
    v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      v8 = (*v7)[1];
      *(_QWORD *)&v58 = v8;
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)&v58 = a1[2];
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
        goto LABEL_11;
    }
    v10 = *(_QWORD *)(v8 + 16);
    if (*(_BYTE *)(v10 + 24))
    {
      v8 = *(_QWORD *)(v8 + 8);
    }
    else
    {
      v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v58);
      v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  v5 = a1[1];
  if (v5)
  {
    v11 = (unsigned int *)(v5 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
LABEL_15:
  v13 = v56;
  v55 = v7;
  v56 = (unsigned int *)v5;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
      v17 = v13 + 3;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  pthread_mutex_unlock(v72[1]);
  v20 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v72[0][-1].__opaque[55] >= 0)
    {
      v21 = (char *)__p[1] + 16 * (uint64_t)v72[0];
      do
      {
        v22 = (unsigned int *)*((_QWORD *)v21 - 1);
        if (v22)
        {
          v23 = v22 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
            v26 = v22 + 3;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 24))(v22);
          }
        }
        v21 -= 16;
      }
      while (v21 > v20);
    }
    if (__p[0] >= (void *)0xB)
      operator delete(__p[1]);
  }
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v74 = v29;
  v75 = v29;
  *(_OWORD *)v72 = v29;
  v73 = v29;
  v70 = v29;
  *(_OWORD *)__p = v29;
  v68 = v29;
  v69 = v29;
  v66 = v29;
  v67 = v29;
  v64 = v29;
  v65 = v29;
  v62 = v29;
  v63 = v29;
  v61 = v29;
  LOBYTE(v61) = 0;
  v76 = 0xAAAAAAAAAAAAAAAALL;
  v77 = 10;
  v78 = (char *)&v61 + 8;
  v79 = 0;
  v81 = 0;
  v82 = 0;
  v80 = &v57;
  v30 = v55;
  v31 = (uint64_t)*v55;
  v52 = &v61;
  v53 = a1;
  v54 = v31;
  *(_QWORD *)&v50 = *(_QWORD *)(v31 + 8);
  *((_QWORD *)&v50 + 1) = v31;
  *(_QWORD *)&v51 = &v61;
  *((_QWORD *)&v51 + 1) = v31;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v50);
  v49[0] = *v30;
  v49[1] = v49[0];
  v49[2] = &v61;
  v49[3] = v49[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(v49);
  v58 = v50;
  v59 = v51;
  v32 = v49[0];
  v33 = v50;
  if ((_QWORD)v50 == v49[0])
  {
    if (HIDWORD(v81) <= v81)
      goto LABEL_57;
LABEL_56:
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v53, v54);
    goto LABEL_57;
  }
  v34 = (_BYTE *)v59;
  if (!*(_BYTE *)v59)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v50 + 16) + 32);
    v36 = *(_QWORD *)(v35 + 24);
    if (!v36)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t, _QWORD))((v36 & 0xFFFFFFFFFFFFFFFELL) + 8))(v35 + 32, **(unsigned __int8 **)(v59 + 272));
    if (!*v34)
      *v34 = 1;
  }
  *(_QWORD *)&v58 = *(_QWORD *)(v33 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
  v37 = v59;
  if (*(_BYTE *)v59)
    *(_BYTE *)v59 = 0;
  for (i = v58; (_QWORD)v58 != v32; i = v58)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
    v40 = *(_QWORD *)(v39 + 24);
    if (!v40)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t, _QWORD))((v40 & 0xFFFFFFFFFFFFFFFELL) + 8))(v39 + 32, **(unsigned __int8 **)(v37 + 272));
    if (!*(_BYTE *)v37)
      *(_BYTE *)v37 = 1;
    *(_QWORD *)&v58 = *(_QWORD *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
    v37 = v59;
    if (*(_BYTE *)v59)
      *(_BYTE *)v59 = 0;
  }
  if (*((_DWORD *)v52 + 71) > *((_DWORD *)v52 + 70))
    goto LABEL_56;
LABEL_57:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v61);
  v42 = v56;
  if (v56)
  {
    v43 = v56 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v42 + 16))(v42);
      v46 = v42 + 3;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v42 + 24))(v42);
    }
  }
  return result;
}

void sub_1BF46F308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a29);
  JUMPOUT(0x1BF46F47CLL);
}

void sub_1BF46F318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_1BF46F378(_Unwind_Exception *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF46F348);
}

void sub_1BF46F3B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;

  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      v51 = &__p[16 * a51];
      do
      {
        v52 = (unsigned int *)*((_QWORD *)v51 - 1);
        if (v52)
        {
          v53 = v52 + 2;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
            v56 = v52 + 3;
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 24))(v52);
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x1BF46F47CLL);
}

void sub_1BF46F458(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1BF46F484);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int i;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  int *v51;
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _QWORD v107[6];

  v107[3] = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
  {
LABEL_126:
    v80 = a1[3];
    if (v80 != v1)
    {
      *(_QWORD *)&v81 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v81 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v103 = v81;
      v104 = v81;
      v101 = v81;
      v102 = v81;
      v99 = v81;
      v100 = v81;
      v97 = v81;
      v98 = v81;
      v95 = v81;
      v96 = v81;
      v82 = *(_QWORD *)(v80 + 16);
      *(_QWORD *)&v105 = 10;
      *((_QWORD *)&v105 + 1) = &v95;
      *(_QWORD *)&v106 = 0;
      *((_QWORD *)&v106 + 1) = v82;
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 24))(v82);
      v83 = a1[2];
      a1[3] = a1[1];
      v84 = *(_DWORD **)(v83 + 288);
      if (v84)
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v84, &v95);
      *(_QWORD *)(v83 + 288) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 32))(*((_QWORD *)&v106 + 1));
      v85 = *((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1))
      {
        if ((uint64_t)v106 - 1 >= 0)
        {
          v86 = *((_QWORD *)&v105 + 1) + 16 * v106;
          do
          {
            v87 = *(unsigned int **)(v86 - 8);
            if (v87)
            {
              v88 = v87 + 2;
              do
              {
                v89 = __ldaxr(v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, v88));
              if (!v90)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 16))(v87);
                v91 = v87 + 3;
                do
                {
                  v92 = __ldaxr(v91);
                  v93 = v92 - 1;
                }
                while (__stlxr(v93, v91));
                if (!v93)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 24))(v87);
              }
            }
            v86 -= 16;
          }
          while (v86 > v85);
        }
        if ((unint64_t)v105 >= 0xB)
          operator delete(*((void **)&v105 + 1));
      }
    }
    return;
  }
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v105 = v18;
    v106 = v18;
    v103 = v18;
    v104 = v18;
    v101 = v18;
    v102 = v18;
    v99 = v18;
    v100 = v18;
    v97 = v18;
    v98 = v18;
    v95 = v18;
    v96 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v105 = 10;
    *((_QWORD *)&v105 + 1) = &v95;
    *(_QWORD *)&v106 = 0;
    *((_QWORD *)&v106 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        while (1)
        {
          memset(v107, 170, 24);
          v25 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v25 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v94);
            v107[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
            LODWORD(v107[0]) = 1;
            if (v94)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_68;
LABEL_39:
              v30 = *(_QWORD *)(v24 + 16);
              if (!v30)
                goto LABEL_69;
              if (!atomic_load((unsigned int *)(v30 + 8)))
                goto LABEL_69;
              goto LABEL_41;
            }
LABEL_38:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_68;
            goto LABEL_39;
          }
          if (v25 != 1)
          {
            LODWORD(v107[0]) = 0;
            v107[1] = 0;
            v107[2] = 0;
            goto LABEL_38;
          }
          v26 = *(_QWORD *)(v24 + 16);
          if (!v26)
          {
LABEL_67:
            v107[1] = 0;
            v107[2] = v26;
            LODWORD(v107[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_68;
            goto LABEL_39;
          }
          v27 = (unsigned int *)(v26 + 8);
          for (i = *(_DWORD *)(v26 + 8); ; i = v29)
          {
            if (!i)
            {
              v26 = 0;
              goto LABEL_67;
            }
            v29 = __ldxr(v27);
            if (v29 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v27))
              break;
          }
          v107[1] = *(_QWORD *)(v24 + 8);
          v107[2] = v26;
          LODWORD(v107[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_39;
LABEL_68:
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
          {
LABEL_69:
            if (*(_BYTE *)(v21 + 24))
            {
              *(_BYTE *)(v21 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v95);
            }
            v52 = 1;
            if (LODWORD(v107[0]) == SLODWORD(v107[0]) >> 31)
              goto LABEL_72;
LABEL_89:
            if (v107[1])
              (*(void (**)(_QWORD))(*(_QWORD *)v107[1] + 8))(v107[1]);
            goto LABEL_91;
          }
LABEL_41:
          v32 = *(_QWORD *)(v22 + 264);
          if (v32 == *(_QWORD *)(v22 + 248))
          {
            if (v32 == -1)
            {
              v34 = *(_QWORD **)(v22 + 256);
              v50 = -1;
            }
            else
            {
              if (4 * v32 <= (unint64_t)(v32 + 1))
                v33 = v32 + 1;
              else
                v33 = 4 * v32;
              v34 = (_QWORD *)(v22 + 8);
              if (v33 >= 0xB)
              {
                if (v33 >= 0xAAAAAAAAAAAAAABLL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v34 = operator new(24 * v33);
              }
              if (v32)
              {
                v35 = *(_QWORD *)(v22 + 256);
                v36 = v35 + 24 * v32;
                v37 = v34;
                do
                {
                  v39 = *(_QWORD *)(v35 + 8);
                  if (*(_DWORD *)v35 == *(int *)v35 >> 31)
                  {
                    v37[1] = v39;
                    v40 = *(_QWORD *)(v35 + 16);
                    v37[2] = v40;
                    if (v40)
                    {
                      v41 = (unsigned int *)(v40 + 8);
                      do
                        v42 = __ldxr(v41);
                      while (__stxr(v42 + 1, v41));
                    }
                  }
                  else
                  {
                    v37[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
                  }
                  v38 = *(_DWORD *)v35;
                  v35 += 24;
                  *(_DWORD *)v37 = v38 ^ (v38 >> 31);
                  v37 += 3;
                }
                while (v35 != v36);
              }
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(v22 + 8));
              *(_QWORD *)(v22 + 248) = v33;
              *(_QWORD *)(v22 + 256) = v34;
              v50 = *(_QWORD *)(v22 + 264);
            }
            v60 = &v34[3 * v50 + 1];
            v45 = v107[0];
            v46 = SLODWORD(v107[0]) >> 31;
            if (SLODWORD(v107[0]) >> 31 == LODWORD(v107[0]))
            {
              *v60 = v107[1];
              v61 = v107[2];
              v34[3 * v50 + 2] = v107[2];
              if (v61)
              {
                v62 = (unsigned int *)(v61 + 8);
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }
            }
            else
            {
              *v60 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v107[1] + 16))(v107[1]);
            }
            v51 = (int *)&v34[3 * v50];
          }
          else
          {
            v43 = *(_QWORD *)(v22 + 256);
            v44 = (_QWORD *)(v43 + 24 * v32 + 8);
            v45 = v107[0];
            v46 = SLODWORD(v107[0]) >> 31;
            if (SLODWORD(v107[0]) >> 31 == LODWORD(v107[0]))
            {
              *v44 = v107[1];
              v47 = v107[2];
              *(_QWORD *)(v43 + 24 * v32 + 16) = v107[2];
              if (v47)
              {
                v48 = (unsigned int *)(v47 + 8);
                do
                  v49 = __ldxr(v48);
                while (__stxr(v49 + 1, v48));
              }
            }
            else
            {
              *v44 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v107[1] + 16))(v107[1]);
            }
            v51 = (int *)(v43 + 24 * v32);
          }
          v52 = 0;
          *v51 = v45 ^ v46;
          ++*(_QWORD *)(v22 + 264);
          if (LODWORD(v107[0]) != SLODWORD(v107[0]) >> 31)
            goto LABEL_89;
LABEL_72:
          v53 = (unsigned int *)v107[2];
          if (v107[2])
          {
            v54 = (unsigned int *)(v107[2] + 8);
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 16))(v53);
              v57 = v53 + 3;
              do
              {
                v58 = __ldaxr(v57);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, v57));
              if (!v59)
                (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 24))(v53);
            }
          }
LABEL_91:
          if ((v52 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 280);
      v64 = *(_QWORD *)(v21 + 16);
      if (v64)
      {
        if (atomic_load((unsigned int *)(v64 + 8)))
        {
          v66 = 1;
          goto LABEL_108;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v69 = *(_DWORD **)(v22 + 288);
        if (v69)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v69, &v95);
        v66 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v67 = *(_QWORD *)(v20 + 16);
        v68 = *(_DWORD **)(v22 + 288);
        if (v68)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v68, &v95);
        *(_QWORD *)(v22 + 288) = v67;
        v66 = 0;
        if (v67)
          ++*(_DWORD *)(v67 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 284);
      v66 = 1;
    }
LABEL_108:
    (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 32))(*((_QWORD *)&v106 + 1));
    v70 = *((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      if ((uint64_t)v106 - 1 >= 0)
      {
        v71 = *((_QWORD *)&v105 + 1) + 16 * v106;
        do
        {
          v72 = *(unsigned int **)(v71 - 8);
          if (v72)
          {
            v73 = v72 + 2;
            do
            {
              v74 = __ldaxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 16))(v72);
              v76 = v72 + 3;
              do
              {
                v77 = __ldaxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
                (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 24))(v72);
            }
          }
          v71 -= 16;
        }
        while (v71 > v70);
      }
      if ((unint64_t)v105 >= 0xB)
        operator delete(*((void **)&v105 + 1));
    }
    v1 = *a1;
    v79 = a1[1];
    if (!v66)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v79)
    {
      v1 = v79;
      goto LABEL_126;
    }
  }
  if (v1 == v79)
    goto LABEL_126;
}

void sub_1BF46FD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF46FD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33,char *__p,uint64_t a35)
{
  char *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;

  if (__p)
  {
    if (a35 - 1 >= 0)
    {
      v36 = &__p[16 * a35];
      do
      {
        v37 = (unsigned int *)*((_QWORD *)v36 - 1);
        if (v37)
        {
          v38 = v37 + 2;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
            v41 = v37 + 3;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
              (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
          }
        }
        v36 -= 16;
      }
      while (v36 > __p);
    }
    if (a33 >= 0xB)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x1BF46FFCCLL);
}

void sub_1BF46FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF46FED8);
}

void sub_1BF46FEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF46FECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v5 - 128);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF46FEF0(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v3 != v2)
    {
      v4 = v2;
      do
      {
        if (*(_DWORD *)v4 == *(int *)v4 >> 31)
        {
          v5 = *(unsigned int **)(v4 + 16);
          if (v5)
          {
            v6 = v5 + 2;
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
              v9 = v5 + 3;
              do
              {
                v10 = __ldaxr(v9);
                v11 = v10 - 1;
              }
              while (__stlxr(v11, v9));
              if (!v11)
                (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
            }
          }
        }
        else
        {
          v12 = *(_QWORD *)(v4 + 8);
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v4 += 24;
      }
      while (v4 != v3);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF46FFCCLL);
}

void sub_1BF46FFA8()
{
  void *v0;
  unint64_t v1;

  __cxa_end_catch();
  if (v1 >= 0xB)
    operator delete(v0);
  JUMPOUT(0x1BF46FED0);
}

void sub_1BF46FFC4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = a1[31];
  if (v1)
  {
    v3 = a1[32];
    if (v3 - 1 >= 0)
    {
      v4 = v1 + 24 * v3;
      v5 = v4;
      do
      {
        v6 = *(_DWORD *)(v5 - 24);
        v5 -= 24;
        if (v6 == v6 >> 31)
        {
          v7 = *(unsigned int **)(v4 - 8);
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
        }
        else
        {
          v14 = *(_QWORD *)(v4 - 16);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v4 = v5;
      }
      while (v5 > v1);
    }
    if (a1[30] >= 0xBuLL)
      operator delete((void *)a1[31]);
  }
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  _OWORD v37[10];
  unint64_t v38;
  void *__p;
  uint64_t v40;
  pthread_mutex_t *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[8] = v4;
  v37[9] = v4;
  v37[6] = v4;
  v37[7] = v4;
  v37[4] = v4;
  v37[5] = v4;
  v37[2] = v4;
  v37[3] = v4;
  v37[0] = v4;
  v37[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v38 = 10;
  __p = v37;
  v40 = 0;
  v41 = v5;
  pthread_mutex_lock(v5);
  if (**(_QWORD **)a1 == a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6 || (v7 = atomic_load((unsigned int *)(v6 + 8)), v7 != 1))
    {
      v8 = (uint64_t *)operator new(0x20uLL);
      v9 = *(uint64_t **)a1;
      v10 = **(_QWORD **)a1;
      v11 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v11, v10);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v8, (uint64_t)v11);
      v8[2] = v9[2];
      v12 = v9[3];
      v8[3] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v36, (uint64_t)v8);
      v15 = *(uint64_t **)a1;
      v16 = *(unsigned int **)(a1 + 8);
      *(_OWORD *)a1 = v36;
      *(_QWORD *)&v36 = v15;
      *((_QWORD *)&v36 + 1) = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
    }
    v23 = *(uint64_t ***)a1;
    v24 = **(uint64_t ***)a1;
    v25 = v24[1];
    *(_QWORD *)&v36 = v25;
    if (v24 != (uint64_t *)v25)
    {
      do
      {
        while (1)
        {
          v26 = *(_QWORD *)(v25 + 16);
          if (!*(_BYTE *)(v26 + 24))
            break;
          v25 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)&v36 = v25;
          v24 = *v23;
          if ((uint64_t *)v25 == *v23)
            goto LABEL_20;
        }
        v25 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v24, (int *)(v26 + 64), (uint64_t **)&v36);
        v23 = *(uint64_t ***)a1;
        *(_QWORD *)&v36 = v25;
        v24 = *v23;
      }
      while ((uint64_t *)v25 != *v23);
    }
LABEL_20:
    *(_QWORD *)(a1 + 16) = v25;
  }
  pthread_mutex_unlock(v41);
  v27 = (char *)__p;
  if (__p)
  {
    if (v40 - 1 >= 0)
    {
      v28 = (char *)__p + 16 * v40;
      do
      {
        v29 = (unsigned int *)*((_QWORD *)v28 - 1);
        if (v29)
        {
          v30 = v29 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
            v33 = v29 + 3;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
              (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
          }
        }
        v28 -= 16;
      }
      while (v28 > v27);
    }
    if (v38 >= 0xB)
      operator delete(__p);
  }
}

void sub_1BF470360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1BF4705C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79079E0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__on_zero_shared(uint64_t a1)
{
  const void **v1;

  v1 = *(const void ***)(a1 + 24);
  if (v1)
  {
    (*((void (**)(void))*v1 + 2))();
    if (*v1)
      _Block_release(*v1);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF545156)
    return a1 + 24;
  if (((v3 & 0x80000001BF545156 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF545156))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF545156 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void LogTracker::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xE0uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  LogTracker::LogTracker((uint64_t)v4, v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(a2, v5);
  ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF4709E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::LogTracker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FF318;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FF318;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E7907A70;
  *(_QWORD *)(a1 + 48) = &unk_1E7907AE0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "logtracker.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("logtracker.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E7907DB0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E7907E40;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E7907E40;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E7907A70;
  *(_QWORD *)(a1 + 48) = &unk_1E7907AE0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  return a1;
}

void sub_1BF470D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF470D84(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void LogTracker::~LogTracker(LogTracker *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(_QWORD *)this = off_1E7907A70;
  *((_QWORD *)this + 6) = &unk_1E7907AE0;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  v3 = *((_QWORD *)this + 26);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 22);
    if (!v7)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v7 = *((_QWORD *)this + 22);
  if (v7)
LABEL_10:
    dispatch_release(v7);
LABEL_11:
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((_QWORD *)this + 20));
  *((_QWORD *)this + 6) = off_1E7907DB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v8 = *((_QWORD *)this + 18);
  if (v8)
    dispatch_release(v8);
  v9 = *((_QWORD *)this + 17);
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)this = off_1E7908A38;
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v12 = *((_QWORD *)this + 4);
    v13 = (void *)*((_QWORD *)this + 3);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v11;
    operator delete(v13);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

{
  void *v1;

  LogTracker::~LogTracker(this);
  operator delete(v1);
}

void `non-virtual thunk to'LogTracker::~LogTracker(LogTracker *this)
{
  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));
}

{
  void *v1;

  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));
  operator delete(v1);
}

const char *LogTracker::getName(LogTracker *this)
{
  return "logtracker.mod";
}

void LogTracker::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = v5;
  v18[1] = v7;
  v18[2] = a1;
  v18[3] = v13;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v24 = (std::__shared_weak_count *)a1[16];
  if (!v24 || (v25 = a1[15], (v26 = std::__shared_weak_count::lock(v24)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = operator new(8uLL);
  *v28 = a1;
  v29 = a1[17];
  v30 = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  v32 = operator new(0x18uLL);
  *v32 = v28;
  v32[1] = v25;
  v32[2] = v27;
  dispatch_async_f(v29, v32, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void LogTracker::dumpLogInternal_sync(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  const void *v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int IsInternalBuild;
  NSObject *v15;
  NSObject *global_queue;
  xpc_object_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  const void *v30;
  size_t v31;
  std::string::size_type v32;
  std::string *v33;
  xpc_object_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  xpc_object_t value;
  const char *v39;
  uint64_t v40;
  void *__p;
  char v42;
  const void *v43;
  xpc_object_t v44;
  _QWORD aBlock[6];
  std::__shared_weak_count *v46;
  void *v47;
  xpc_object_t v48;
  _QWORD block[5];
  dispatch_group_t group;
  xpc_object_t object;
  BOOL v52;
  void *__dst[2];
  unint64_t v54;
  BOOL v55;
  std::string v56;

  v55 = 0;
  v6 = (const void *)*MEMORY[0x1E0CFB170];
  v7 = strlen((const char *)*MEMORY[0x1E0CFB170]);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    v54 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v54) = v7;
  v9 = __dst;
  if (v7)
LABEL_8:
    memmove(v9, v6, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  memset(&v56, 0, sizeof(v56));
  if (prop::tailspin::get((char *)__dst, (uint64_t)&v56))
    util::convert<BOOL>(&v56, &v55, 0);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v54) & 0x80000000) == 0)
    {
LABEL_13:
      v12 = MEMORY[0x1E0C809B0];
      v13 = "7_EUlPS4_E_";
      if (v55)
        goto LABEL_14;
LABEL_23:
      v55 = 0;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v54) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__dst[0]);
  v12 = MEMORY[0x1E0C809B0];
  v13 = "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"
      + 111;
  if (!v55)
    goto LABEL_23;
LABEL_14:
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  v55 = IsInternalBuild;
  if (IsInternalBuild)
  {
    v15 = *(NSObject **)(a1 + 208);
    if (v15)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 208));
      dispatch_group_enter(v15);
    }
    global_queue = dispatch_get_global_queue(21, 0);
    block[0] = v12;
    block[1] = *((_QWORD *)v13 + 275);
    block[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
    block[3] = &__block_descriptor_57_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE_e5_v8__0l;
    block[4] = a1;
    group = v15;
    if (v15)
    {
      dispatch_retain(v15);
      dispatch_group_enter(group);
    }
    v17 = *a2;
    object = v17;
    if (v17)
      xpc_retain(v17);
    else
      object = xpc_null_create();
    v52 = v55;
    dispatch_async(global_queue, block);
    xpc_release(object);
    object = 0;
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v15)
    {
      dispatch_group_leave(v15);
      dispatch_release(v15);
    }
  }
LABEL_30:
  v18 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v18 || (v19 = *(_QWORD *)(a1 + 120), (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  aBlock[0] = v12;
  aBlock[1] = *((_QWORD *)v13 + 275);
  aBlock[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_3;
  aBlock[3] = &__block_descriptor_72_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE_e28_v20__0i8_dict__object__v__12l;
  aBlock[4] = a1;
  aBlock[5] = v19;
  v46 = v21;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  if (*a3)
  {
    v27 = _Block_copy(*a3);
    v28 = *a2;
    v47 = v27;
    v48 = v28;
    if (v28)
    {
LABEL_42:
      xpc_retain(v28);
      goto LABEL_45;
    }
  }
  else
  {
    v28 = *a2;
    v47 = 0;
    v48 = v28;
    if (v28)
      goto LABEL_42;
  }
  v48 = xpc_null_create();
LABEL_45:
  v29 = _Block_copy(aBlock);
  v30 = (const void *)*MEMORY[0x1E0CFBDB8];
  v31 = strlen((const char *)*MEMORY[0x1E0CFBDB8]);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v36 = v31 | 7;
    v37 = v36 + 1;
    v33 = (std::string *)operator new(v36 + 1);
    v56.__r_.__value_.__l.__size_ = v32;
    v56.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  }
  else
  {
    *((_BYTE *)&v56.__r_.__value_.__s + 23) = v31;
    v33 = &v56;
    if (!v31)
    {
      v56.__r_.__value_.__s.__data_[0] = 0;
      v34 = *a2;
      v44 = v34;
      if (v34)
        goto LABEL_49;
LABEL_55:
      v34 = xpc_null_create();
      v44 = v34;
      if (v29)
        goto LABEL_50;
      goto LABEL_56;
    }
  }
  memmove(v33, v30, v32);
  v33->__r_.__value_.__s.__data_[v32] = 0;
  v34 = *a2;
  v44 = v34;
  if (!v34)
    goto LABEL_55;
LABEL_49:
  xpc_retain(v34);
  if (v29)
  {
LABEL_50:
    v35 = _Block_copy(v29);
    goto LABEL_57;
  }
LABEL_56:
  v35 = 0;
LABEL_57:
  v43 = v35;
  Service::runCommand(a1, (uint64_t)&v56, &v44, &v43);
  if (v35)
    _Block_release(v35);
  xpc_release(v34);
  v44 = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB930]);
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v40 = xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v39);
  LogTracker::sendUserNotificationForDump(v40, (const void **)&__p);
  if (v42 < 0)
    operator delete(__p);
  xpc_release(v56.__r_.__value_.__l.__data_);
  if (v29)
    _Block_release(v29);
  xpc_release(v48);
  v48 = 0;
  if (v47)
    _Block_release(v47);
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  std::__shared_weak_count::__release_weak(v21);
}

void sub_1BF471740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *aBlock,xpc_object_t object)
{
  std::__shared_weak_count *v26;
  const void *v27;
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  xpc_release(*(xpc_object_t *)(v28 - 104));
  if (v27)
    _Block_release(v27);
  xpc_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void sub_1BF47180C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(exception_object);
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 208);
  v6 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  v4 = *(xpc_object_t *)(a1 + 48);
  v5 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    v4 = xpc_null_create();
    v5 = v4;
  }
  LogTracker::diagnosticToolsLog_sync(v2, &v6, &v5, *(unsigned __int8 *)(a1 + 56));
  xpc_release(v4);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1BF4718EC(_Unwind_Exception *a1)
{
  NSObject *v1;
  void *v2;

  xpc_release(v2);
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void LogTracker::diagnosticToolsLog_sync(uint64_t a1, NSObject **a2, xpc_object_t *a3, int a4)
{
  xpc_object_t value;
  uint64_t v9;
  xpc_object_t v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  unsigned __int8 v14;
  void **v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  NSObject *v38;
  xpc_object_t v39;
  int v40;
  xpc_object_t v41;
  const char *v42;
  uint8_t *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  const void *v48;
  size_t v49;
  std::string::size_type v50;
  std::string *p_dst;
  uint64_t v52;
  uint64_t v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  const void *v62;
  size_t v63;
  size_t v64;
  void *p_p;
  uint64_t v66;
  uint64_t v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  const char *p_object;
  xpc_object_t v73;
  xpc_object_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  NSObject *v80;
  xpc_object_t v81;
  void *__p;
  size_t v83;
  int64_t v84;
  std::string __dst;
  std::string v86;
  std::string v87;
  __int128 object;
  int64_t v89;
  _QWORD aBlock[6];
  std::__shared_weak_count *v91;
  dispatch_group_t group;
  void *v93;
  dispatch_object_t v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  void *v98[3];
  void *v99[3];
  uint8_t buf[24];
  void *v101;
  __int128 *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  memset(v99, 170, sizeof(v99));
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB370]);
  *(_QWORD *)&object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)v98);
  Timestamp::asString(v9, 0, 9, buf);
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v98, (_QWORD *)v98[1]);
  xpc_release((xpc_object_t)object);
  memset(v98, 170, sizeof(v98));
  v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB6A0]);
  *(_QWORD *)buf = v10;
  if (v10)
    xpc_retain(v10);
  else
    *(_QWORD *)buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)buf, (const object *)*MEMORY[0x1E0D01A30], v11);
  xpc_release(*(xpc_object_t *)buf);
  v12 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = "NO";
    if (a4)
      v13 = "YES";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I Tailspin: %s", buf, 0xCu);
    v12 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
LABEL_13:
      v96 = 0xAAAAAAAAAAAAAAAALL;
      v97 = 0xAAAAAAAAAAAAAAAALL;
      if ((v14 & 1) != 0)
        goto LABEL_19;
      goto LABEL_150;
    }
  }
  else if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_13;
  }
  v15 = v98;
  if (SHIBYTE(v98[2]) < 0)
    v15 = (void **)v98[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v15;
  _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I DumpPath: %s", buf, 0xCu);
  v96 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAAAALL;
  if ((v16 & 1) == 0)
  {
LABEL_150:
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
    }
  }
LABEL_19:
  v17 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v101 = &__block_descriptor_tmp_13_2;
  v102 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v95 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_23;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v18 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v95 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_23;
  }
  v19 = (unint64_t *)(v18 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_23:
  abm::HelperClient::create();
  if (*((_QWORD *)&v95 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v95 + 1));
    }
  }
  v23 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v23 || (v24 = *(_QWORD *)(a1 + 120), (v25 = std::__shared_weak_count::lock(v23)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v93 = (void *)0xAAAAAAAAAAAAAAAALL;
  v94 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = v17;
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v24;
  v91 = v26;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = *a2;
  group = v32;
  if (v32)
  {
    dispatch_retain(v32);
    dispatch_group_enter(group);
  }
  v33 = _Block_copy(aBlock);
  v34 = *(NSObject **)(a1 + 136);
  if (v34)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v93 = v33;
  v94 = v34;
  if (a4)
  {
    v35 = xpc_dictionary_create(0, 0, 0);
    v36 = MEMORY[0x1E0C812F8];
    if (v35 || (v35 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v35) == v36)
      {
        xpc_retain(v35);
        v37 = v35;
      }
      else
      {
        v37 = xpc_null_create();
      }
    }
    else
    {
      v37 = xpc_null_create();
      v35 = 0;
    }
    xpc_release(v35);
    if (MEMORY[0x1C3B8A86C](v37) != v36)
    {
      v38 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF335000, v38, OS_LOG_TYPE_ERROR, "Failed to create an input dictionary", buf, 2u);
      }
LABEL_127:
      xpc_release(v37);
      v34 = v94;
      goto LABEL_128;
    }
    v39 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBA38]);
    *(_QWORD *)buf = v39;
    if (v39)
      xpc_retain(v39);
    else
      *(_QWORD *)buf = xpc_null_create();
    v40 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    memset(buf, 170, sizeof(buf));
    v41 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB930]);
    *(_QWORD *)&object = v41;
    if (v41)
      xpc_retain(v41);
    else
      *(_QWORD *)&object = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v42);
    xpc_release((xpc_object_t)object);
    if ((buf[23] & 0x80u) == 0)
      v43 = buf;
    else
      v43 = *(uint8_t **)buf;
    v44 = xpc_string_create((const char *)v43);
    if (!v44)
      v44 = xpc_null_create();
    xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CF10C8], v44);
    v45 = xpc_null_create();
    xpc_release(v44);
    xpc_release(v45);
    v46 = xpc_int64_create(v40);
    if (!v46)
      v46 = xpc_null_create();
    xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CF1010], v46);
    v47 = xpc_null_create();
    xpc_release(v46);
    xpc_release(v47);
    v48 = (const void *)*MEMORY[0x1E0D01A20];
    v49 = strlen((const char *)*MEMORY[0x1E0D01A20]);
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v50 = v49;
    if (v49 >= 0x17)
    {
      v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v52 = v49 | 7;
      v53 = v52 + 1;
      p_dst = (std::string *)operator new(v52 + 1);
      __dst.__r_.__value_.__l.__size_ = v50;
      __dst.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v49;
      p_dst = &__dst;
      if (!v49)
      {
LABEL_73:
        p_dst->__r_.__value_.__s.__data_[v50] = 0;
        if (SHIBYTE(v98[2]) >= 0)
          v54 = (const std::string::value_type *)v98;
        else
          v54 = (const std::string::value_type *)v98[0];
        if (SHIBYTE(v98[2]) >= 0)
          v55 = HIBYTE(v98[2]);
        else
          v55 = (std::string::size_type)v98[1];
        v56 = std::string::insert(&__dst, 0, v54, v55);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v99[2]) >= 0)
          v58 = (const std::string::value_type *)v99;
        else
          v58 = (const std::string::value_type *)v99[0];
        if (SHIBYTE(v99[2]) >= 0)
          v59 = HIBYTE(v99[2]);
        else
          v59 = (std::string::size_type)v99[1];
        v60 = std::string::append(&v86, v58, v59);
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        v62 = (const void *)*MEMORY[0x1E0D01A10];
        v63 = strlen((const char *)*MEMORY[0x1E0D01A10]);
        if (v63 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v64 = v63;
        if (v63 >= 0x17)
        {
          v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17)
            v66 = v63 | 7;
          v67 = v66 + 1;
          p_p = operator new(v66 + 1);
          v83 = v64;
          v84 = v67 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v84) = v63;
          p_p = &__p;
          if (!v63)
          {
LABEL_93:
            *((_BYTE *)p_p + v64) = 0;
            if (v84 >= 0)
              v68 = (const std::string::value_type *)&__p;
            else
              v68 = (const std::string::value_type *)__p;
            if (v84 >= 0)
              v69 = HIBYTE(v84);
            else
              v69 = v83;
            v70 = std::string::append(&v87, v68, v69);
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v89 = v70->__r_.__value_.__r.__words[2];
            object = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            if (v89 >= 0)
              p_object = (const char *)&object;
            else
              p_object = (const char *)object;
            v73 = xpc_string_create(p_object);
            if (!v73)
              v73 = xpc_null_create();
            xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CF1000], v73);
            v74 = xpc_null_create();
            xpc_release(v73);
            xpc_release(v74);
            if (SHIBYTE(v89) < 0)
            {
              operator delete((void *)object);
              if ((SHIBYTE(v84) & 0x80000000) == 0)
              {
LABEL_106:
                if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_107;
                goto LABEL_114;
              }
            }
            else if ((SHIBYTE(v84) & 0x80000000) == 0)
            {
              goto LABEL_106;
            }
            operator delete(__p);
            if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_107:
              if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_108;
              goto LABEL_115;
            }
LABEL_114:
            operator delete(v87.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_108:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_109;
              goto LABEL_116;
            }
LABEL_115:
            operator delete(v86.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_109:
              v81 = v37;
              if (v37)
                goto LABEL_110;
              goto LABEL_117;
            }
LABEL_116:
            operator delete(__dst.__r_.__value_.__l.__data_);
            v81 = v37;
            if (v37)
            {
LABEL_110:
              xpc_retain(v37);
              v75 = v93;
              if (!v93)
                goto LABEL_119;
              goto LABEL_118;
            }
LABEL_117:
            v81 = xpc_null_create();
            v75 = v93;
            if (!v93)
            {
LABEL_119:
              v79 = v75;
              v80 = v94;
              if (v94)
                dispatch_retain(v94);
              abm::HelperClient::perform();
              if (v80)
                dispatch_release(v80);
              if (v79)
                _Block_release(v79);
              xpc_release(v81);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              goto LABEL_127;
            }
LABEL_118:
            v75 = _Block_copy(v75);
            goto LABEL_119;
          }
        }
        memmove(p_p, v62, v64);
        goto LABEL_93;
      }
    }
    memmove(p_dst, v48, v50);
    goto LABEL_73;
  }
LABEL_128:
  if (v34)
    dispatch_release(v34);
  if (v93)
    _Block_release(v93);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v91)
    std::__shared_weak_count::__release_weak(v91);
  std::__shared_weak_count::__release_weak(v26);
  v76 = (std::__shared_weak_count *)v97;
  if (!v97)
    goto LABEL_141;
  v77 = (unint64_t *)(v97 + 8);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
    if ((SHIBYTE(v98[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((SHIBYTE(v99[2]) & 0x80000000) == 0)
        return;
LABEL_146:
      operator delete(v99[0]);
      return;
    }
  }
  else
  {
LABEL_141:
    if ((SHIBYTE(v98[2]) & 0x80000000) == 0)
      goto LABEL_142;
  }
  operator delete(v98[0]);
  if (SHIBYTE(v99[2]) < 0)
    goto LABEL_146;
}

void sub_1BF4723C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,dispatch_group_t group)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_3(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _DWORD *v21;
  xpc_object_t v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
    v14 = (const void *)a1[7];
    if (v14)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (const void *)a1[7];
    if (v14)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (xpc_object_t)a1[8];
      if (v16)
        goto LABEL_12;
LABEL_16:
      v16 = xpc_null_create();
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_33;
      goto LABEL_17;
    }
  }
  v15 = 0;
  v16 = (xpc_object_t)a1[8];
  if (!v16)
    goto LABEL_16;
LABEL_12:
  xpc_retain(v16);
  v17 = (std::__shared_weak_count *)v7[16];
  if (!v17)
LABEL_33:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_17:
  v18 = v7[15];
  v19 = std::__shared_weak_count::lock(v17);
  if (!v19)
    goto LABEL_33;
  v20 = v19;
  v21 = operator new(0x28uLL);
  *(_QWORD *)v21 = v7;
  v21[2] = a2;
  *((_QWORD *)v21 + 2) = v13;
  v22 = xpc_null_create();
  if (v15)
  {
    *((_QWORD *)v21 + 3) = _Block_copy(v15);
    *((_QWORD *)v21 + 4) = v16;
    if (v16)
    {
LABEL_20:
      xpc_retain(v16);
      goto LABEL_23;
    }
  }
  else
  {
    *((_QWORD *)v21 + 3) = 0;
    *((_QWORD *)v21 + 4) = v16;
    if (v16)
      goto LABEL_20;
  }
  *((_QWORD *)v21 + 4) = xpc_null_create();
LABEL_23:
  v23 = v7[17];
  v24 = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = operator new(0x18uLL);
  *v26 = v21;
  v26[1] = v18;
  v26[2] = v20;
  dispatch_async_f(v23, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  do
    v27 = __ldaxr(v24);
  while (__stlxr(v27 - 1, v24));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v16);
  if (v15)
    _Block_release(v15);
  xpc_release(v22);
}

xpc_object_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  xpc_object_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (const void *)a2[7];
  if (v7)
  {
    v8 = _Block_copy(v7);
    v9 = (void *)a2[8];
    a1[7] = v8;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  else
  {
    v9 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void LogTracker::sendUserNotificationForDump(uint64_t a1, const void **a2)
{
  const void *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int IsCarrierBuild;
  size_t v11;
  size_t v12;
  int v13;
  size_t v14;
  size_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const void *v21;
  int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  std::string v26;
  _BYTE v27[24];
  std::string __p;
  _BYTE v29[48];
  void **__dst;
  unint64_t v31;
  unint64_t v32;

  v3 = (const void *)*MEMORY[0x1E0CFB028];
  v4 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v31 = v5;
    v32 = v8 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v32) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v3, v5);
  *((_BYTE *)p_dst + v5) = 0;
  memset(&__p, 0, sizeof(__p));
  v9 = -1431655766;
  if (prop::ttr::get((char *)&__dst, (uint64_t)&__p))
  {
    *(_DWORD *)v27 = -1431655766;
    if (util::convert<int>(&__p, v27, 0))
      v9 = *(_DWORD *)v27;
    else
      v9 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst);
LABEL_15:
  v31 = 0xAAAAAAAAAA005D73;
  v32 = 0xAAAAAAAAAAAAAAALL;
  __dst = *(void ***)"[Settings]";
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    IsCarrierBuild = 1;
  else
    IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  if (IsCarrierBuild && v9)
  {
    v11 = *((unsigned __int8 *)a2 + 23);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      if (v11 >= 0xA)
        v12 = 10;
      else
        v12 = *((unsigned __int8 *)a2 + 23);
      v13 = memcmp(a2, &__dst, v12);
      if (v12 != 10)
        return;
LABEL_32:
      if (v13)
        return;
      memset(&v29[16], 0, 32);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v29[23] = 22;
      qmemcpy(v29, "Telephony_Dump_Started", 22);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "LogDump");
      if ((v11 & 0x80) != 0)
      {
        if (a2[1])
        {
LABEL_35:
          if ((v11 & 0x80u) == 0)
            v15 = v11;
          else
            v15 = (size_t)a2[1];
          v16 = v15 + 8;
          memset(v27, 170, sizeof(v27));
          if (v15 + 8 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v16 >= 0x17)
          {
            v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17)
              v18 = v16 | 7;
            v19 = v18 + 1;
            v20 = operator new(v18 + 1);
            *(_QWORD *)&v27[8] = v15 + 8;
            *(_QWORD *)&v27[16] = v19 | 0x8000000000000000;
            *(_QWORD *)v27 = v20;
            *v20 = 0x203A6E6F73616552;
            v17 = v20 + 1;
          }
          else
          {
            v17 = &v27[8];
            *(_QWORD *)&v27[16] = 0;
            v27[23] = v15 + 8;
            *(_OWORD *)v27 = 0x203A6E6F73616552uLL;
            if (!v15)
              goto LABEL_51;
          }
          if ((v11 & 0x80u) == 0)
            v21 = a2;
          else
            v21 = *a2;
          memmove(v17, v21, v15);
LABEL_51:
          v17[v15] = 0;
          *(_QWORD *)&v29[40] = *(_QWORD *)&v27[16];
          *(_OWORD *)&v29[24] = *(_OWORD *)v27;
          v23 = __p;
          *(_OWORD *)v24 = *(_OWORD *)v29;
          v25 = *(_QWORD *)&v29[16];
          if ((v27[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)&v29[24], *(std::string::size_type *)&v29[32]);
            v22 = 1;
LABEL_54:
            support::ui::showNotification(0, (uint64_t)&v23, 0);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v26.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v25) & 0x80000000) == 0)
              {
LABEL_56:
                if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_57;
                goto LABEL_62;
              }
            }
            else if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
              goto LABEL_56;
            }
            operator delete(v24[0]);
            if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              if (!v22)
                return;
              goto LABEL_58;
            }
LABEL_62:
            operator delete(v23.__r_.__value_.__l.__data_);
            if (!v22)
              return;
LABEL_58:
            operator delete(*(void **)&v29[24]);
            return;
          }
LABEL_52:
          v22 = 0;
          v26 = *(std::string *)&v29[24];
          goto LABEL_54;
        }
      }
      else if (v11)
      {
        goto LABEL_35;
      }
      v23 = __p;
      *(_OWORD *)v24 = *(_OWORD *)v29;
      v25 = *(_QWORD *)&v29[16];
      goto LABEL_52;
    }
    if ((unint64_t)a2[1] >= 0xA)
      v14 = 10;
    else
      v14 = (size_t)a2[1];
    v13 = memcmp(*a2, &__dst, v14);
    if (v14 == 10)
      goto LABEL_32;
  }
}

void sub_1BF472E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    support::ui::NotificationInfo::~NotificationInfo(&a27);
    _Unwind_Resume(a1);
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a27);
  _Unwind_Resume(a1);
}

void sub_1BF472E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF472E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  support::ui::NotificationInfo::~NotificationInfo((void **)&a9);
  support::ui::NotificationInfo::~NotificationInfo(&a21);
  _Unwind_Resume(a1);
}

void sub_1BF472EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  _Unwind_Resume(exception_object);
}

void LogTracker::moveBasebandServicesLog_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t value;
  const char *p_p;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  NSObject *v31;
  void *v32;
  NSObject *v33;
  unsigned __int8 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  unint64_t v41;
  void *v42;
  NSObject *v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  xpc_object_t object;
  xpc_object_t objecta;
  _QWORD aBlock[5];
  std::__shared_weak_count *v49;
  dispatch_group_t group;
  void *__p;
  dispatch_object_t v52;
  char v53;
  void *block;
  uint64_t v55;
  void (*v56)(uint64_t);
  void *v57;
  __int128 *v58;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v6) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = xpc_array_create(0, 0);
  if (v8 || (v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v8) == MEMORY[0x1E0C812C8])
    {
      xpc_retain(v8);
      v9 = v8;
    }
    else
    {
      v9 = xpc_null_create();
    }
  }
  else
  {
    v9 = xpc_null_create();
    v8 = 0;
  }
  xpc_release(v8);
  v10 = xpc_int64_create(7);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CF1150], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB6A0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  block = 0;
  v55 = 0;
  v56 = 0;
  xpc::dyn_cast_or_default();
  if (v53 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v14 = xpc_string_create(p_p);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CF1060], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  if (v53 < 0)
    operator delete(__p);
  xpc_release(object);
  v16 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB370]);
  objecta = v16;
  if (v16)
    xpc_retain(v16);
  else
    objecta = xpc_null_create();
  block = 0;
  v55 = 0;
  v56 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v56) < 0)
    operator delete(block);
  if (v53 >= 0)
    v17 = (const char *)&__p;
  else
    v17 = (const char *)__p;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_array_append_value(v9, v18);
  xpc_release(v18);
  if (v53 < 0)
    operator delete(__p);
  xpc_release(objecta);
  if (v9)
  {
    xpc_retain(v9);
    v19 = v9;
  }
  else
  {
    v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CF10D0], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = (std::__shared_weak_count *)a1[16];
  if (!v21 || (v22 = a1[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  v52 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v29 = (void *)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = v22;
  v49 = v24;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = *a2;
  group = v31;
  if (v31)
  {
    dispatch_retain(v31);
    dispatch_group_enter(group);
  }
  v32 = _Block_copy(aBlock);
  v33 = a1[17];
  if (v33)
    dispatch_retain(v33);
  __p = v32;
  v52 = v33;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block = v29;
  v55 = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_2;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v35 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_59;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v35 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_59;
  }
  v36 = (unint64_t *)(v35 + 8);
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
LABEL_59:
  abm::HelperClient::create();
  if (!v45)
    goto LABEL_63;
  v38 = (unint64_t *)&v45->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_63:
    v44 = v7;
    if (v7)
      goto LABEL_64;
LABEL_67:
    v44 = xpc_null_create();
    v40 = __p;
    if (!__p)
      goto LABEL_69;
    goto LABEL_68;
  }
  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
  std::__shared_weak_count::__release_weak(v45);
  v44 = v7;
  if (!v7)
    goto LABEL_67;
LABEL_64:
  xpc_retain(v7);
  v40 = __p;
  if (__p)
LABEL_68:
    v40 = _Block_copy(v40);
LABEL_69:
  v42 = v40;
  v43 = v52;
  if (v52)
    dispatch_retain(v52);
  abm::HelperClient::perform();
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  xpc_release(v44);
  do
    v41 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v41 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v41)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v52)
    dispatch_release(v52);
  if (__p)
    _Block_release(__p);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_1BF473554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,dispatch_group_t group,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  std::__shared_weak_count *v30;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  object = 0;
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&__p);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  std::__shared_weak_count::__release_weak(v30);
  xpc_release(v29);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      v3 = v2;
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[6];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void LogTracker::getConfiguration(LogTracker *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  NSObject *v7;
  const void *v8;
  size_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _BYTE *v27;
  const void *v28;
  size_t v29;
  std::string::size_type v30;
  std::string *p_p;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  const char *v36;
  xpc_object_t v37;
  xpc_object_t v38;
  char *v39;
  size_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  const char *v46;
  xpc_object_t v47;
  xpc_object_t v48;
  _BYTE *v49;
  const void *v50;
  size_t v51;
  std::string::size_type v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  const char *v58;
  xpc_object_t v59;
  xpc_object_t v60;
  size_t v61;
  size_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  xpc_object_t v68;
  xpc_object_t v69;
  size_t v70;
  size_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  const char *v76;
  xpc_object_t v77;
  xpc_object_t v78;
  size_t v79;
  size_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  const char *v85;
  xpc_object_t v86;
  xpc_object_t v87;
  uint64_t IsInternalBuild;
  int CompressionMode;
  const void *v90;
  size_t v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  std::string *v96;
  xpc_object_t v97;
  xpc_object_t v98;
  size_t v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  xpc_object_t v105;
  xpc_object_t v106;
  void *v107;
  size_t v108;
  unint64_t v109;
  _DWORD value[3];
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  int v114;
  std::string __p;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == v5)
    {
      xpc_retain(v4);
      v6 = v4;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  if (MEMORY[0x1C3B8A86C](v6) != v5)
  {
    v7 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Failed to create config dictionary", (uint8_t *)&__p, 2u);
    }
    *a2 = xpc_null_create();
    goto LABEL_239;
  }
  v111 = 0xAAAAAAAAAAAAAAAALL;
  v112 = 0xAAAAAAAAAAAAAALL;
  *(_QWORD *)&value[1] = 0xAAAAAAAAAAAAAA00;
  value[0] = 0;
  v113 = 0;
  v8 = (const void *)*MEMORY[0x1E0CFB170];
  v9 = strlen((const char *)*MEMORY[0x1E0CFB170]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    v108 = v10;
    v109 = v13 | 0x8000000000000000;
    v107 = v11;
    goto LABEL_18;
  }
  HIBYTE(v109) = v9;
  v11 = &v107;
  if (v9)
LABEL_18:
    memmove(v11, v8, v10);
  *((_BYTE *)v11 + v10) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::coredump::get((char *)&v107, (uint64_t)&__p))
  {
    v14 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  else
  {
    v14 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v14)
      goto LABEL_34;
  }
  else if (!v14)
  {
    goto LABEL_34;
  }
  if (v113)
    v15 = "enabled";
  else
    v15 = "disabled";
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBE78], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
LABEL_34:
  v113 = 0;
  v18 = strlen((const char *)v8);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v108 = v19;
    v109 = v22 | 0x8000000000000000;
    v107 = v20;
    goto LABEL_41;
  }
  HIBYTE(v109) = v18;
  v20 = &v107;
  if (v18)
LABEL_41:
    memmove(v20, v8, v19);
  *((_BYTE *)v20 + v19) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    v23 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  else
  {
    v23 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_47:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v23)
      goto LABEL_57;
  }
  else if (!v23)
  {
    goto LABEL_57;
  }
  if (v113)
    v24 = "enabled";
  else
    v24 = "disabled";
  v25 = xpc_string_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBFD8], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
LABEL_57:
  if (SHIBYTE(v112) < 0)
  {
    v111 = 0;
    v27 = *(_BYTE **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    v27 = &value[1];
  }
  *v27 = 0;
  v28 = (const void *)*MEMORY[0x1E0CFB028];
  v29 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v30;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_67;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
  p_p = &__p;
  if (v29)
LABEL_67:
    memmove(p_p, v28, v30);
  p_p->__r_.__value_.__s.__data_[v30] = 0;
  v34 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  v35 = v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v35)
      goto LABEL_78;
  }
  else if (!v34)
  {
    goto LABEL_78;
  }
  if (v112 >= 0)
    v36 = (const char *)&value[1];
  else
    v36 = *(const char **)&value[1];
  v37 = xpc_string_create(v36);
  if (!v37)
    v37 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBE68], v37);
  v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
LABEL_78:
  v113 = 0;
  v39 = diag::config::kEnabledDuringSleepKey[0];
  v40 = strlen(diag::config::kEnabledDuringSleepKey[0]);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    v108 = v41;
    v109 = v44 | 0x8000000000000000;
    v107 = v42;
    goto LABEL_85;
  }
  HIBYTE(v109) = v40;
  v42 = &v107;
  if (v40)
LABEL_85:
    memmove(v42, v39, v41);
  *((_BYTE *)v42 + v41) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    v45 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
  }
  else
  {
    v45 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v45)
      goto LABEL_101;
  }
  else if (!v45)
  {
    goto LABEL_101;
  }
  if (v113)
    v46 = "enabled";
  else
    v46 = "disabled";
  v47 = xpc_string_create(v46);
  if (!v47)
    v47 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFC108], v47);
  v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
LABEL_101:
  if (SHIBYTE(v112) < 0)
  {
    v111 = 0;
    v49 = *(_BYTE **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    v49 = &value[1];
  }
  *v49 = 0;
  v50 = (const void *)*MEMORY[0x1E0CFBB60];
  v51 = strlen((const char *)*MEMORY[0x1E0CFBB60]);
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v52 = v51;
  if (v51 >= 0x17)
  {
    v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v54 = v51 | 7;
    v55 = v54 + 1;
    v53 = (std::string *)operator new(v54 + 1);
    __p.__r_.__value_.__l.__size_ = v52;
    __p.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    goto LABEL_111;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v51;
  v53 = &__p;
  if (v51)
LABEL_111:
    memmove(v53, v50, v52);
  v53->__r_.__value_.__s.__data_[v52] = 0;
  v56 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  v57 = v56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v57)
      goto LABEL_122;
  }
  else if (!v56)
  {
    goto LABEL_122;
  }
  if (v112 >= 0)
    v58 = (const char *)&value[1];
  else
    v58 = *(const char **)&value[1];
  v59 = xpc_string_create(v58);
  if (!v59)
    v59 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFC028], v59);
  v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
LABEL_122:
  v113 = 0;
  v61 = strlen((const char *)v8);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v62 = v61;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    v63 = operator new(v64 + 1);
    v108 = v62;
    v109 = v65 | 0x8000000000000000;
    v107 = v63;
    goto LABEL_129;
  }
  HIBYTE(v109) = v61;
  v63 = &v107;
  if (v61)
LABEL_129:
    memmove(v63, v8, v62);
  *((_BYTE *)v63 + v62) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::ipc::get((char *)&v107, (uint64_t)&__p))
  {
    v66 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  else
  {
    v66 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_135:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v66)
      goto LABEL_145;
  }
  else if (!v66)
  {
    goto LABEL_145;
  }
  if (v113)
    v67 = "enabled";
  else
    v67 = "disabled";
  v68 = xpc_string_create(v67);
  if (!v68)
    v68 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCF0], v68);
  v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
LABEL_145:
  v113 = 0;
  v70 = strlen((const char *)v8);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v71 = v70;
  if (v70 >= 0x17)
  {
    v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v73 = v70 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    v108 = v71;
    v109 = v74 | 0x8000000000000000;
    v107 = v72;
    goto LABEL_152;
  }
  HIBYTE(v109) = v70;
  v72 = &v107;
  if (v70)
LABEL_152:
    memmove(v72, v8, v71);
  *((_BYTE *)v72 + v71) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbipc::get((char *)&v107, (uint64_t)&__p))
  {
    v75 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
  }
  else
  {
    v75 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_158:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v75)
      goto LABEL_168;
  }
  else if (!v75)
  {
    goto LABEL_168;
  }
  if (v113)
    v76 = "enabled";
  else
    v76 = "disabled";
  v77 = xpc_string_create(v76);
  if (!v77)
    v77 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCF8], v77);
  v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
LABEL_168:
  v113 = 0;
  v79 = strlen((const char *)v8);
  if (v79 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v80 = v79;
  if (v79 >= 0x17)
  {
    v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17)
      v82 = v79 | 7;
    v83 = v82 + 1;
    v81 = operator new(v82 + 1);
    v108 = v80;
    v109 = v83 | 0x8000000000000000;
    v107 = v81;
    goto LABEL_175;
  }
  HIBYTE(v109) = v79;
  v81 = &v107;
  if (v79)
LABEL_175:
    memmove(v81, v8, v80);
  *((_BYTE *)v81 + v80) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::tailspin::get((char *)&v107, (uint64_t)&__p))
  {
    v84 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_181;
  }
  else
  {
    v84 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_181;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_181:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v84)
      goto LABEL_191;
  }
  else if (!v84)
  {
    goto LABEL_191;
  }
  if (v113)
    v85 = "enabled";
  else
    v85 = "disabled";
  v86 = xpc_string_create(v85);
  if (!v86)
    v86 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBE80], v86);
  v87 = xpc_null_create();
  xpc_release(v86);
  xpc_release(v87);
LABEL_191:
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v90 = (const void *)*MEMORY[0x1E0CF11E8];
  v91 = strlen((const char *)*MEMORY[0x1E0CF11E8]);
  if (v91 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v92 = v91;
  if (v91 >= 0x17)
  {
    v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v94 = v91 | 7;
    v95 = v94 + 1;
    v93 = operator new(v94 + 1);
    v108 = v92;
    v109 = v95 | 0x8000000000000000;
    v107 = v93;
  }
  else
  {
    HIBYTE(v109) = v91;
    v93 = &v107;
    if (!v91)
      goto LABEL_203;
  }
  memmove(v93, v90, v92);
LABEL_203:
  *((_BYTE *)v93 + v92) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::compression::get((char *)&v107, (uint64_t)&__p))
  {
    v114 = -1431655766;
    if (util::convert<int>(&__p, &v114, 0))
      CompressionMode = v114;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v109) & 0x80000000) == 0)
      goto LABEL_208;
  }
  else if ((SHIBYTE(v109) & 0x80000000) == 0)
  {
    goto LABEL_208;
  }
  operator delete(v107);
LABEL_208:
  std::to_string(&__p, CompressionMode);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v96 = &__p;
  else
    v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v97 = xpc_string_create((const char *)v96);
  if (!v97)
    v97 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBE70], v97);
  v98 = xpc_null_create();
  xpc_release(v97);
  xpc_release(v98);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  value[0] = 0;
  v99 = strlen((const char *)v28);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v100 = v99;
  if (v99 >= 0x17)
  {
    v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v102 = v99 | 7;
    v103 = v102 + 1;
    v101 = operator new(v102 + 1);
    v108 = v100;
    v109 = v103 | 0x8000000000000000;
    v107 = v101;
    goto LABEL_222;
  }
  HIBYTE(v109) = v99;
  v101 = &v107;
  if (v99)
LABEL_222:
    memmove(v101, v28, v100);
  *((_BYTE *)v101 + v100) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::systemlogs::get((char *)&v107, (uint64_t)&__p))
  {
    v104 = util::convert<int>(&__p, value, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_228;
  }
  else
  {
    v104 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_228;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_228:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v104)
      goto LABEL_237;
LABEL_234:
    v105 = xpc_int64_create(value[0]);
    if (!v105)
      v105 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBDE0], v105);
    v106 = xpc_null_create();
    xpc_release(v105);
    xpc_release(v106);
    goto LABEL_237;
  }
  if (v104)
    goto LABEL_234;
LABEL_237:
  *a2 = v6;
  v6 = xpc_null_create();
  if (SHIBYTE(v112) < 0)
    operator delete(*(void **)&value[1]);
LABEL_239:
  xpc_release(v6);
}

void sub_1BF47472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a21 < 0)
    operator delete(__p);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void sub_1BF4747E8()
{
  JUMPOUT(0x1BF4747D4);
}

void LogTracker::copyPreference(uint64_t a1@<X0>, const void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  NSObject *v9;
  int v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  const void *v15;
  xpc_object_t v16;
  const void *v17;
  xpc_object_t v18;
  std::string __p;
  CFTypeRef cf;
  xpc_object_t object;
  _BYTE buf[34];
  _BYTE v23[6];

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v6) == v7)
    {
      xpc_retain(v6);
      v8 = v6;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  if (MEMORY[0x1C3B8A86C](v8) != v7)
  {
    v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, "Failed to create preference dictionary", buf, 2u);
    }
    *a3 = xpc_null_create();
    goto LABEL_39;
  }
  v10 = *((char *)a2 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  v12 = v11 + 34;
  memset(buf, 170, 24);
  if (v11 + 34 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v12 > 0x16)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    *(_QWORD *)&buf[8] = v11 + 34;
    *(_QWORD *)&buf[16] = (v14 + 1) | 0x8000000000000000;
    *(_QWORD *)buf = operator new(v14 + 1);
    qmemcpy(*(void **)buf, "/var/wireless/Library/Preferences/", 34);
    v13 = (_BYTE *)(*(_QWORD *)buf + 34);
    if (!v11)
      goto LABEL_24;
  }
  else
  {
    qmemcpy(buf, "/var/wireless/Library/Preferences/", sizeof(buf));
    v13 = v23;
  }
  if (v10 >= 0)
    v15 = a2;
  else
    v15 = *a2;
  memmove(v13, v15, v11);
LABEL_24:
  v13[v11] = 0;
  if (ctu::fs::file_exists())
  {
    if ((buf[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    else
      __p = *(std::string *)buf;
    util::readPlistToCFDictionary((uint64_t)&__p, &cf);
    ctu::cf_to_xpc((ctu *)cf, v17);
    v16 = object;
    if (object && MEMORY[0x1C3B8A86C](object) == v7)
      xpc_retain(v16);
    else
      v16 = xpc_null_create();
    v18 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v18);
    xpc_release(object);
    object = 0;
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v8;
  }
  *a3 = v16;
  v8 = xpc_null_create();
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_39:
  xpc_release(v8);
}

void sub_1BF474AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Failed to collect logs. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D The log has been created", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t TelephonyXPC::Result::toString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  const char *v2;

  switch(result)
  {
    case 0xE020E000:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "kInternalError");
      return result;
    case 0xE020E001:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "kServerError");
      return result;
    case 0xE020E002:
      v2 = "kCommandError";
      goto LABEL_12;
    case 0xE020E003:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "kTimeout");
      return result;
    case 0xE020E004:
      v2 = "kNotSupported";
      goto LABEL_12;
    case 0xE020E005:
      *(_BYTE *)(a2 + 23) = 6;
      strcpy((char *)a2, "kRetry");
      return result;
    case 0xE020E006:
      *(_BYTE *)(a2 + 23) = 17;
      strcpy((char *)a2, "kPermissionDenied");
      return result;
    case 0xE020E007:
      v2 = "kNotAvailable";
LABEL_12:
      *(_BYTE *)(a2 + 23) = 13;
      *(_QWORD *)a2 = *(_QWORD *)v2;
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(v2 + 5);
      *(_BYTE *)(a2 + 13) = 0;
      break;
    default:
      if ((_DWORD)result)
      {
        *(_BYTE *)(a2 + 23) = 17;
        strcpy((char *)a2, "kInvalidErrorCode");
      }
      else
      {
        *(_BYTE *)(a2 + 23) = 8;
        strcpy((char *)a2, "kSuccess");
      }
      break;
  }
  return result;
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void LogTracker::systemLog_sync(uint64_t a1, dispatch_group_t *a2, xpc_object_t *a3, _QWORD *a4)
{
  xpc_object_t value;
  int v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  const char *v26;
  xpc_object_t v27;
  const char *v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  void **v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  void **v43;
  xpc_object_t v44;
  xpc_object_t v45;
  const void *v46;
  size_t v47;
  size_t v48;
  __int128 *p_dst;
  uint64_t v50;
  uint64_t v51;
  const char *p_object;
  xpc_object_t v53;
  xpc_object_t v54;
  NSObject *v55;
  void *v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  xpc_object_t v61;
  char v62;
  xpc_object_t v63;
  xpc_object_t v64;
  void *v65;
  void *v66;
  NSObject *v67;
  xpc_object_t v68;
  void *v69;
  NSObject *v70;
  xpc_object_t v71;
  std::__shared_weak_count *v72;
  xpc_object_t __p[3];
  void *v74[3];
  void *v75[3];
  void *v76;
  dispatch_object_t v77;
  xpc_object_t object;
  uint64_t v79;
  void (*v80)(uint64_t);
  void *v81;
  __int128 *v82;
  __int128 __dst;
  unint64_t v84;
  _QWORD aBlock[6];
  std::__shared_weak_count *v86;
  dispatch_group_t v87;
  _BYTE v88[24];
  _BYTE *v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB190]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v9 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v76 = (void *)0xAAAAAAAAAAAAAAAALL;
  v77 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v18 = (void *)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_100_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v11;
  v86 = v13;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v87 = *a2;
  if (v87)
  {
    dispatch_retain(v87);
    if (v87)
      dispatch_group_enter(v87);
  }
  v20 = v88;
  v21 = a4[3];
  if (!v21)
    goto LABEL_20;
  if ((_QWORD *)v21 != a4)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_20:
    v89 = (_BYTE *)v21;
    goto LABEL_22;
  }
  v89 = v88;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v88);
LABEL_22:
  v90 = v9;
  v22 = _Block_copy(aBlock);
  v23 = *(NSObject **)(a1 + 136);
  if (v23)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v76 = v22;
  v77 = v23;
  memset(v75, 170, sizeof(v75));
  v24 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB370]);
  __p[0] = v24;
  if (v24)
    xpc_retain(v24);
  else
    __p[0] = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)v74);
  Timestamp::asString((uint64_t)v74, 0, 9, &object);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v80) < 0)
    operator delete(object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v74, (_QWORD *)v74[1]);
  xpc_release(__p[0]);
  memset(v74, 170, sizeof(v74));
  v25 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB6A0]);
  object = v25;
  if (v25)
    xpc_retain(v25);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)*MEMORY[0x1E0D01A30], v26);
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  v27 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB930]);
  object = v27;
  if (v27)
    xpc_retain(v27);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v28);
  xpc_release(object);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  object = v18;
  v79 = 0x40000000;
  v80 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v81 = &__block_descriptor_tmp_13_2;
  v82 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v72 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &object);
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v72 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_40:
  abm::HelperClient::create();
  if (v72)
  {
    v33 = (unint64_t *)&v72->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v35 = xpc_dictionary_create(0, 0, 0);
  if (v35 || (v35 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v35) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v35);
      v36 = v35;
    }
    else
    {
      v36 = xpc_null_create();
    }
  }
  else
  {
    v36 = xpc_null_create();
    v35 = 0;
  }
  xpc_release(v35);
  if (SHIBYTE(v75[2]) >= 0)
    v37 = v75;
  else
    v37 = (void **)v75[0];
  v38 = xpc_string_create((const char *)v37);
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF10E0], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(__p[2]) >= 0)
    v40 = __p;
  else
    v40 = (xpc_object_t *)__p[0];
  v41 = xpc_string_create((const char *)v40);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF10C8], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  if (SHIBYTE(v74[2]) >= 0)
    v43 = v74;
  else
    v43 = (void **)v74[0];
  v44 = xpc_string_create((const char *)v43);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF1000], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  object = 0;
  v79 = 0;
  v80 = 0;
  v46 = (const void *)*MEMORY[0x1E0CFB178];
  v47 = strlen((const char *)*MEMORY[0x1E0CFB178]);
  if (v47 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v48 = v47;
  if (v47 >= 0x17)
  {
    v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v50 = v47 | 7;
    v51 = v50 + 1;
    p_dst = (__int128 *)operator new(v50 + 1);
    *((_QWORD *)&__dst + 1) = v48;
    v84 = v51 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_73;
  }
  HIBYTE(v84) = v47;
  p_dst = &__dst;
  if (v47)
LABEL_73:
    memmove(p_dst, v46, v48);
  *((_BYTE *)p_dst + v48) = 0;
  prop::systemlogs::get((char *)&__dst, (uint64_t)&object);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v80) >= 0)
    p_object = (const char *)&object;
  else
    p_object = (const char *)object;
  v53 = xpc_string_create(p_object);
  if (!v53)
    v53 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF0FF8], v53);
  v54 = xpc_null_create();
  xpc_release(v53);
  xpc_release(v54);
  v55 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
  {
    if (v9 != 2)
      goto LABEL_83;
LABEL_125:
    v61 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBA40]);
    *(_QWORD *)&__dst = v61;
    if (v61)
      xpc_retain(v61);
    else
      *(_QWORD *)&__dst = xpc_null_create();
    v62 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    v63 = xpc_BOOL_create(v62);
    if (!v63)
      v63 = xpc_null_create();
    xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF1188], v63);
    v64 = xpc_null_create();
    xpc_release(v63);
    xpc_release(v64);
    xpc_release((xpc_object_t)__dst);
    v68 = v36;
    if (v36)
    {
      xpc_retain(v36);
      v65 = v76;
      if (!v76)
      {
LABEL_135:
        v66 = v65;
        v67 = v77;
        if (v77)
          dispatch_retain(v77);
        abm::HelperClient::perform();
        if (v67)
          dispatch_release(v67);
        if (v66)
          _Block_release(v66);
        xpc_release(v68);
        if (SHIBYTE(v80) < 0)
          goto LABEL_97;
        goto LABEL_98;
      }
    }
    else
    {
      v68 = xpc_null_create();
      v65 = v76;
      if (!v76)
        goto LABEL_135;
    }
    v65 = _Block_copy(v65);
    goto LABEL_135;
  }
  v60 = abm::helper::asString();
  LODWORD(__dst) = 136315138;
  *(_QWORD *)((char *)&__dst + 4) = v60;
  _os_log_debug_impl(&dword_1BF335000, v55, OS_LOG_TYPE_DEBUG, "#D System Logs: %s", (uint8_t *)&__dst, 0xCu);
  if (v9 == 2)
    goto LABEL_125;
LABEL_83:
  if (v9 != 1)
    goto LABEL_96;
  v71 = v36;
  if (v36)
  {
    xpc_retain(v36);
    v56 = v76;
    if (!v76)
      goto LABEL_89;
    goto LABEL_88;
  }
  v71 = xpc_null_create();
  v56 = v76;
  if (v76)
LABEL_88:
    v56 = _Block_copy(v56);
LABEL_89:
  v69 = v56;
  v70 = v77;
  if (v77)
    dispatch_retain(v77);
  abm::HelperClient::perform();
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  xpc_release(v71);
LABEL_96:
  if (SHIBYTE(v80) < 0)
LABEL_97:
    operator delete(object);
LABEL_98:
  xpc_release(v36);
  do
    v57 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v57 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (v57)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_102;
  }
  else
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
        goto LABEL_103;
      goto LABEL_121;
    }
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v74[0]);
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
  {
LABEL_104:
    v58 = v77;
    if (!v77)
      goto LABEL_106;
    goto LABEL_105;
  }
LABEL_122:
  operator delete(v75[0]);
  v58 = v77;
  if (v77)
LABEL_105:
    dispatch_release(v58);
LABEL_106:
  if (v76)
    _Block_release(v76);
  if (v89 == v88)
  {
    v59 = 4;
    goto LABEL_112;
  }
  if (v89)
  {
    v59 = 5;
    v20 = v89;
LABEL_112:
    (*(void (**)(_QWORD *))(*v20 + 8 * v59))(v20);
  }
  if (v87)
  {
    dispatch_group_leave(v87);
    if (v87)
      dispatch_release(v87);
  }
  if (v86)
    std::__shared_weak_count::__release_weak(v86);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF475928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, char a15, uint64_t a16, char a17, uint64_t a18, xpc_object_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,xpc_object_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke(_QWORD *a1, unsigned int *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  void *__p[2];
  char v20;
  xpc_object_t object;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  if (a1[11])
  {
    v13 = *a2;
    v14 = *a3;
    object = v14;
    if (v14)
    {
      xpc_retain(v14);
      LOBYTE(__p[0]) = v13 == 0;
      v15 = a1[11];
      if (v15)
      {
LABEL_12:
        (*(void (**)(uint64_t, void **, xpc_object_t *))(*(_QWORD *)v15 + 48))(v15, __p, &object);
        xpc_release(object);
        object = 0;
        goto LABEL_13;
      }
    }
    else
    {
      object = xpc_null_create();
      LOBYTE(__p[0]) = v13 == 0;
      v15 = a1[11];
      if (v15)
        goto LABEL_12;
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_13:
  if (*a2)
  {
    v16 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = abm::helper::asString();
      TelephonyXPC::Result::toString(*a2, (uint64_t)__p);
      if (v20 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v23 = v17;
      v24 = 2080;
      v25 = v18;
      _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Failed to collect system logs mode: %s result: %s", buf, 0x16u);
      if (v20 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1BF475DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  result = a2[11];
  if (!result)
    goto LABEL_10;
  if ((_QWORD *)result != a2 + 8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_10:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[11] + 24))(a2[11]);
}

void sub_1BF475EA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 56);
    if (v4)
      dispatch_release(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = a1[7];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[7];
    if (v6)
      dispatch_release(v6);
  }
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::archiveLogs_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t value;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  int v9;
  xpc_object_t v10;
  NSObject *v11;
  char v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  void **v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const char *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  _QWORD aBlock[6];
  std::__shared_weak_count *v54;
  dispatch_group_t group;
  xpc_object_t object;
  dispatch_object_t v57;
  void *__p[3];
  void *v59[3];
  uint8_t buf[8];
  uint64_t v61;
  void (*v62)(uint64_t);
  void *v63;
  __int128 *v64;

  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC068]);
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v9 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)buf);
  if (!v9)
  {
    v11 = a1[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Compression is disabled!", buf, 2u);
    }
    return;
  }
  v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBDF8]);
  *(_QWORD *)buf = v10;
  if (v10)
    xpc_retain(v10);
  else
    *(_QWORD *)buf = xpc_null_create();
  v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  memset(v59, 170, sizeof(v59));
  v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB370]);
  object = v13;
  if (v13)
    xpc_retain(v13);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__p);
  Timestamp::asString((uint64_t)__p, 0, 9, buf);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v62) < 0)
    operator delete(*(void **)buf);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  v14 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB6A0]);
  *(_QWORD *)buf = v14;
  if (v14)
    xpc_retain(v14);
  else
    *(_QWORD *)buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)buf, (const object *)*MEMORY[0x1E0D01A30], v15);
  xpc_release(*(xpc_object_t *)buf);
  v16 = (std::__shared_weak_count *)a1[16];
  if (!v16 || (v17 = a1[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v57 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v24 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v17;
  v54 = v19;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = *a2;
  group = v26;
  if (v26)
  {
    dispatch_retain(v26);
    dispatch_group_enter(group);
  }
  v27 = _Block_copy(aBlock);
  v28 = a1[17];
  if (v28)
    dispatch_retain(v28);
  object = v27;
  v57 = v28;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)buf = v24;
  v61 = 0x40000000;
  v62 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v63 = &__block_descriptor_tmp_13_2;
  v64 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v52 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v52 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_41;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_41:
  abm::HelperClient::create();
  if (v52)
  {
    v33 = (unint64_t *)&v52->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v35 = xpc_dictionary_create(0, 0, 0);
  if (v35 || (v35 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v35) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v35);
      v36 = v35;
    }
    else
    {
      v36 = xpc_null_create();
    }
  }
  else
  {
    v36 = xpc_null_create();
    v35 = 0;
  }
  xpc_release(v35);
  if (SHIBYTE(__p[2]) >= 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  v38 = xpc_string_create((const char *)v37);
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF10F8], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(v59[2]) >= 0)
    v40 = (const char *)v59;
  else
    v40 = (const char *)v59[0];
  v41 = xpc_string_create(v40);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF10E0], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  v43 = xpc_int64_create(v9);
  if (!v43)
    v43 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF11E8], v43);
  v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  v45 = xpc_BOOL_create(v12);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF1070], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v51 = v36;
  if (v36)
  {
    xpc_retain(v36);
    v47 = object;
    if (!object)
      goto LABEL_71;
    goto LABEL_70;
  }
  v51 = xpc_null_create();
  v47 = object;
  if (object)
LABEL_70:
    v47 = _Block_copy(v47);
LABEL_71:
  v49 = v47;
  v50 = v57;
  if (v57)
    dispatch_retain(v57);
  abm::HelperClient::perform();
  if (v50)
    dispatch_release(v50);
  if (v49)
    _Block_release(v49);
  xpc_release(v51);
  xpc_release(v36);
  do
    v48 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v48 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v48)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v57)
    dispatch_release(v57);
  if (object)
    _Block_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
      return;
LABEL_94:
    operator delete(v59[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v59[2]) < 0)
    goto LABEL_94;
}

void sub_1BF476684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,dispatch_group_t group,xpc_object_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  void *v33;
  uint64_t v34;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v33);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a25);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v32);
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 129) < 0)
  {
    operator delete(*(void **)(v34 - 152));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Compression failed. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

void LogTracker::processLogarchive_sync(_QWORD *a1, NSObject **a2, const char *a3, _QWORD *a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  int v35;
  unint64_t v36;
  const char *v37;
  size_t v38;
  void **v39;
  xpc_object_t v40;
  xpc_object_t v41;
  const char *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  NSObject *object;
  void *__dst[5];
  _QWORD aBlock[6];
  std::__shared_weak_count *v59;
  dispatch_group_t group;
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v9 = a1[15], (v10 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = (void *)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_96_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v9;
  v59 = v11;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = *a2;
  group = v18;
  if (v18)
  {
    dispatch_retain(v18);
    dispatch_group_enter(v18);
  }
  v19 = v61;
  v20 = a4[3];
  if (!v20)
    goto LABEL_16;
  if ((_QWORD *)v20 != a4)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
LABEL_16:
    v62 = (_BYTE *)v20;
    goto LABEL_18;
  }
  v62 = v61;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v61);
LABEL_18:
  v21 = _Block_copy(aBlock);
  v22 = a1[17];
  if (v22)
    dispatch_retain(v22);
  v55 = v21;
  object = v22;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  __dst[0] = v16;
  __dst[1] = (void *)0x40000000;
  __dst[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  __dst[3] = &__block_descriptor_tmp_13_2;
  __dst[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v24 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_23;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __dst);
    v24 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_23:
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  abm::HelperClient::create();
  if (v54)
  {
    v27 = (unint64_t *)&v54->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v29 = xpc_dictionary_create(0, 0, 0);
  if (v29 || (v29 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v29) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v29);
      v30 = v29;
    }
    else
    {
      v30 = xpc_null_create();
    }
  }
  else
  {
    v30 = xpc_null_create();
    v29 = 0;
  }
  xpc_release(v29);
  v31 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    v32 = *(const char **)a3;
    v33 = *((_QWORD *)a3 + 1);
  }
  else
  {
    v32 = a3;
    v33 = *((unsigned __int8 *)a3 + 23);
  }
  v34 = v32 - 1;
  do
  {
    if (!v33)
    {
      v36 = 0;
      memset(__dst, 170, 24);
      if ((v31 & 0x80) != 0)
        goto LABEL_96;
LABEL_44:
      v37 = a3;
      if (v36 <= v31)
      {
        v38 = v31 - v36;
        if (v31 - v36 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_98;
        goto LABEL_46;
      }
LABEL_104:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    v35 = v34[v33--];
  }
  while (v35 != 92 && v35 != 47);
  v36 = v33 + 1;
  memset(__dst, 170, 24);
  if ((v31 & 0x80) == 0)
    goto LABEL_44;
LABEL_96:
  v31 = *((_QWORD *)a3 + 1);
  if (v31 < v36)
    goto LABEL_104;
  v37 = *(const char **)a3;
  v38 = v31 - v36;
  if (v31 - v36 >= 0x7FFFFFFFFFFFFFF8)
LABEL_98:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_46:
  if (v38 >= 0x17)
  {
    v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v48 = v38 | 7;
    v49 = v48 + 1;
    v39 = (void **)operator new(v48 + 1);
    __dst[1] = (void *)v38;
    __dst[2] = (void *)(v49 | 0x8000000000000000);
    __dst[0] = v39;
LABEL_64:
    memmove(v39, &v37[v36], v38);
    *((_BYTE *)v39 + v38) = 0;
    if (a3[23] < 0)
      goto LABEL_65;
    goto LABEL_49;
  }
  HIBYTE(__dst[2]) = v38;
  v39 = __dst;
  if (v31 != v36)
    goto LABEL_64;
  *((_BYTE *)__dst + v38) = 0;
  if ((a3[23] & 0x80000000) == 0)
    goto LABEL_49;
LABEL_65:
  a3 = *(const char **)a3;
LABEL_49:
  v40 = xpc_string_create(a3);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E0CF10F8], v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  if (SHIBYTE(__dst[2]) >= 0)
    v42 = (const char *)__dst;
  else
    v42 = (const char *)__dst[0];
  v43 = xpc_string_create(v42);
  if (!v43)
    v43 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E0CF1128], v43);
  v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  v45 = xpc_int64_create(2);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E0CF11E8], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v53 = v30;
  if (!v30)
  {
    v53 = xpc_null_create();
    v47 = v55;
    if (!v55)
      goto LABEL_68;
    goto LABEL_67;
  }
  xpc_retain(v30);
  v47 = v55;
  if (v55)
LABEL_67:
    v47 = _Block_copy(v47);
LABEL_68:
  v52 = v47;
  if (object)
    dispatch_retain(object);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v52)
    _Block_release(v52);
  xpc_release(v53);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  xpc_release(v30);
  do
    v50 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v50 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v50)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (object)
    dispatch_release(object);
  if (v55)
    _Block_release(v55);
  if (v62 == v61)
  {
    v51 = 4;
LABEL_88:
    (*(void (**)(_QWORD *))(*v19 + 8 * v51))(v19);
  }
  else if (v62)
  {
    v51 = 5;
    v19 = v62;
    goto LABEL_88;
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1BF477078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,dispatch_group_t group,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke(_QWORD *a1, _DWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = a1[11];
      if (v11)
      {
        LOBYTE(__p[0]) = *a2 == 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, __p);
      }
      v12 = *a2;
      v13 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v12, (uint64_t)__p);
          if (v16 >= 0)
            v14 = __p;
          else
            v14 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v18 = v14;
          _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Logarchive compression failed. Result: %s", buf, 0xCu);
          if (v16 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEBUG, "#D Logarchive compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  result = a2[11];
  if (!result)
    goto LABEL_10;
  if ((_QWORD *)result != a2 + 8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_10:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[11] + 24))(a2[11]);
}

void sub_1BF477440(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 56);
    if (v4)
      dispatch_release(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = a1[7];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[7];
    if (v6)
      dispatch_release(v6);
  }
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::jsonSummary_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  const void *v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  NSObject *v21;
  xpc_object_t v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD *v25;
  NSObject *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  NSObject *v29;
  xpc_object_t v30;
  _QWORD *v31;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v35;

  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild() & 1) != 0)
  {
    v6 = (const void *)*MEMORY[0x1E0CFB728];
    v7 = strlen((const char *)*MEMORY[0x1E0CFB728]);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      v35 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v35) = v7;
      v9 = __dst;
      if (!v7)
        goto LABEL_11;
    }
    memmove(v9, v6, (size_t)v8);
LABEL_11:
    *((_BYTE *)v8 + (_QWORD)v9) = 0;
    aBlock = 0;
    cf = 0;
    Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock)
      _Block_release(aBlock);
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(v35) < 0)
      operator delete(__dst[0]);
    v12 = (std::__shared_weak_count *)a1[16];
    if (!v12 || (v13 = a1[15], (v14 = std::__shared_weak_count::lock(v12)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v15 = v14;
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    v27 = v13;
    v28 = v15;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v21 = *a2;
    v29 = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(v21);
    }
    v22 = *a3;
    v30 = v22;
    if (v22)
    {
      xpc_retain(v22);
    }
    else
    {
      v22 = xpc_null_create();
      v30 = v22;
    }
    v31 = a1;
    v23 = a1[22];
    v24 = a1[17];
    v25 = operator new(0x28uLL);
    *v25 = v13;
    v25[1] = v15;
    v27 = 0;
    v28 = 0;
    v25[2] = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(v21);
    }
    v25[3] = v22;
    if (v22)
      xpc_retain(v22);
    else
      v25[3] = xpc_null_create();
    v25[4] = a1;
    dispatch_group_notify_f(v23, v24, v25, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    xpc_release(v22);
    if (v21)
    {
      dispatch_group_leave(v21);
      dispatch_release(v21);
    }
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  v26 = a1[11];
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v27) = 0;
    _os_log_error_impl(&dword_1BF335000, v26, OS_LOG_TYPE_ERROR, "JSON summary is not supported!", (uint8_t *)&v27, 2u);
  }
}

void sub_1BF4777A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;

  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void sub_1BF4777C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a15);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t LogTracker::postLogCollectionSupported(LogTracker *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

void LogTracker::postLogCollectionExternal_sync(_QWORD *a1, xpc_object_t *a2)
{
  NSObject *v4;
  xpc_object_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  xpc_object_t v17;
  unint64_t v18;
  xpc_object_t v19;
  unint64_t v20;
  xpc_object_t v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  xpc_object_t v30;
  __int128 v31;
  xpc_object_t v32;
  __int128 v33;
  xpc_object_t v34;
  xpc_object_t v35;
  void *object_8;
  xpc_object_t v37;
  xpc_object_t v38;
  dispatch_group_t v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a1[26];
  v39 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v38 = *a2;
  v5 = v38;
  if (v38)
  {
    xpc_retain(v38);
  }
  else
  {
    v5 = xpc_null_create();
    v38 = v5;
  }
  v42 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v39, &v38, v41);
  v6 = v42;
  if (v42 == v41)
  {
    v7 = 4;
    v6 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  xpc_release(v5);
  v38 = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  v8 = (std::__shared_weak_count *)a1[16];
  if (!v8 || (v9 = a1[15], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = *a2;
  v37 = *a2;
  if (*a2)
  {
    xpc_retain(v17);
  }
  else
  {
    v17 = xpc_null_create();
    v37 = v17;
  }
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = *a2;
  v35 = *a2;
  if (*a2)
  {
    xpc_retain(v19);
  }
  else
  {
    v19 = xpc_null_create();
    v35 = v19;
  }
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  object_8 = v17;
  if (!v17)
  {
    v17 = xpc_null_create();
    object_8 = v17;
    v21 = *a2;
    v29 = a1;
    v30 = *a2;
    if (*a2)
      goto LABEL_32;
LABEL_34:
    v30 = xpc_null_create();
    goto LABEL_35;
  }
  xpc_retain(v17);
  v21 = *a2;
  v29 = a1;
  v30 = *a2;
  if (!*a2)
    goto LABEL_34;
LABEL_32:
  xpc_retain(v21);
LABEL_35:
  *(_QWORD *)&v31 = v9;
  *((_QWORD *)&v31 + 1) = v11;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v32 = v19;
  if (v19)
    xpc_retain(v19);
  else
    v32 = xpc_null_create();
  *(_QWORD *)&v33 = v9;
  *((_QWORD *)&v33 + 1) = v11;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v34 = v17;
  if (v17)
    xpc_retain(v17);
  else
    v34 = xpc_null_create();
  v24 = a1[26];
  v25 = a1[17];
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v26 = operator new(0x50uLL);
  *v26 = v29;
  v26[1] = v30;
  if (v30)
  {
    xpc_retain(v30);
    *((_OWORD *)v26 + 1) = v31;
    v27 = v32;
    v26[4] = a1;
    v26[5] = v32;
    if (v32)
      goto LABEL_47;
LABEL_50:
    v26[5] = xpc_null_create();
    *((_OWORD *)v26 + 3) = v33;
    v28 = v34;
    v26[8] = a1;
    v26[9] = v34;
    if (v34)
      goto LABEL_48;
LABEL_51:
    v26[9] = xpc_null_create();
    goto LABEL_52;
  }
  v26[1] = xpc_null_create();
  *((_OWORD *)v26 + 1) = v31;
  v27 = v32;
  v26[4] = a1;
  v26[5] = v32;
  if (!v32)
    goto LABEL_50;
LABEL_47:
  xpc_retain(v27);
  *((_OWORD *)v26 + 3) = v33;
  v28 = v34;
  v26[8] = a1;
  v26[9] = v34;
  if (!v34)
    goto LABEL_51;
LABEL_48:
  xpc_retain(v28);
LABEL_52:
  v40 = 0;
  dispatch_group_notify_f(v24, v25, v26, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v40);
  xpc_release(v28);
  xpc_release(v27);
  xpc_release(v30);
  xpc_release(object_8);
  std::__shared_weak_count::__release_weak(v11);
  xpc_release(v35);
  std::__shared_weak_count::__release_weak(v11);
  xpc_release(v37);
  std::__shared_weak_count::__release_weak(v11);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1BF477C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void LogTracker::postLogCollectionInternal_sync(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t *v2;
  xpc_object_t value;
  const char *v5;
  char *v6;
  xpc_object_t v7;
  const char *v8;
  xpc_object_t v9;
  const char *v10;
  const char *v11;
  xpc_object_t v12;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v22;
  size_t v23;
  size_t v24;
  _BYTE *v25;
  xpc_object_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  NSObject *v30;
  uint64_t v31;
  _DWORD *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 isDuplicated;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  size_t v47;
  std::string::value_type **v48;
  xpc_object_t v49;
  const char *v50;
  int v51;
  NSObject *v52;
  const char *v53;
  _BYTE *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::ios_base *v60;
  _QWORD *v61;
  std::string *p_s;
  std::string::size_type size;
  _QWORD *v64;
  __int128 v65;
  size_t v66;
  void *v67;
  uint64_t v68;
  const void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  _QWORD *v80;
  int v81;
  size_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  int shared_weak_owners_high;
  const std::string::value_type *v89;
  std::string::size_type shared_owners;
  std::string *v91;
  __int128 v92;
  int v93;
  NSObject *v94;
  int v95;
  size_t v96;
  unint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  std::string *v101;
  const char *v102;
  size_t v103;
  std::string *v104;
  __int128 v105;
  const char *v106;
  xpc_object_t *v107;
  void *v108;
  int v109;
  std::__shared_weak_count *v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  void *v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  xpc_object_t v118;
  xpc_object_t v119;
  xpc_object_t v120;
  int v121;
  size_t v122;
  std::string::value_type **v123;
  NSObject *v124;
  xpc_object_t v125;
  _QWORD *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  unint64_t *p_shared_weak_owners;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  unint64_t v138;
  __int128 v139;
  unint64_t v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  __int128 v145;
  unint64_t v146;
  void *v147;
  __int128 v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  __int128 v154;
  void *v155;
  __int128 v156;
  unint64_t v157;
  NSObject *v158;
  NSObject *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  void *v163;
  uint64_t v164;
  void *v165;
  void *v166;
  void *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  _QWORD *v171;
  xpc_object_t *v172;
  char *v173;
  int v174;
  char v175;
  _BYTE __dst[48];
  void *v177[2];
  xpc_object_t v178[2];
  _OWORD v179[9];
  xpc_object_t __p[2];
  __int128 v181;
  void *v182[2];
  xpc_object_t v183[2];
  __int128 v184;
  __int128 v185;
  _OWORD v186[7];
  _BYTE v187[32];
  _OWORD v188[7];
  _BYTE v189[32];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _BYTE v193[32];
  void *v194;
  std::__shared_weak_count *v195;
  _BYTE v196[32];
  std::string v197;
  xpc_object_t v198;
  dispatch_group_t v199;
  std::string v200;
  _QWORD *v201;
  std::locale v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  void *v207;
  std::string v208;
  std::string v209;
  BOOL v210[25];
  std::string __s;
  std::string v212;
  void *v213[3];
  void *v214[3];
  std::string::value_type *v215[3];
  _QWORD v216[3];
  _QWORD *v217;
  _BYTE object[248];
  __int128 v219;
  uint8_t buf[4];
  const char *v221;
  __int16 v222;
  xpc_object_t *v223;
  uint64_t v224;

  v2 = a2;
  v224 = *MEMORY[0x1E0C80C00];
  memset(v215, 170, sizeof(v215));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB548]);
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  v6 = (char *)*MEMORY[0x1E0CFB6C8];
  xpc::dyn_cast_or_default((xpc *)object, (const object *)*MEMORY[0x1E0CFB6C8], v5);
  xpc_release(*(xpc_object_t *)object);
  memset(v214, 170, sizeof(v214));
  v7 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB538]);
  *(_QWORD *)object = v7;
  if (v7)
    xpc_retain(v7);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v8);
  xpc_release(*(xpc_object_t *)object);
  memset(v213, 170, sizeof(v213));
  v9 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB8D0]);
  *(_QWORD *)object = v9;
  if (v9)
    xpc_retain(v9);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v10);
  xpc_release(*(xpc_object_t *)object);
  memset(&v212, 170, sizeof(v212));
  v11 = (const char *)*MEMORY[0x1E0CFB930];
  v12 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB930]);
  *(_QWORD *)object = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v13);
  xpc_release(*(xpc_object_t *)object);
  memset(&__s, 170, sizeof(__s));
  v14 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB370]);
  __p[0] = v14;
  if (v14)
    xpc_retain(v14);
  else
    __p[0] = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__dst);
  Timestamp::asString((uint64_t)__dst, 0, 9, object);
  xpc::dyn_cast_or_default();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__dst, *(_QWORD **)&__dst[8]);
  xpc_release(__p[0]);
  v15 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB010]);
  *(_QWORD *)object = v15;
  if (v15)
    xpc_retain(v15);
  else
    *(_QWORD *)object = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, (const object *)7);
  xpc_release(*(xpc_object_t *)object);
  memset(&v210[1], 170, 24);
  v17 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB770]);
  *(_QWORD *)object = v17;
  if (v17)
    xpc_retain(v17);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v18);
  xpc_release(*(xpc_object_t *)object);
  v19 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFC068]);
  *(_QWORD *)object = v19;
  if (v19)
    xpc_retain(v19);
  else
    *(_QWORD *)object = xpc_null_create();
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v174 = xpc::dyn_cast_or_default((xpc *)object, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)object);
  v210[0] = 1;
  v22 = (const void *)*MEMORY[0x1E0CFC0C0];
  v23 = strlen((const char *)*MEMORY[0x1E0CFC0C0]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  v173 = v6;
  if (v23 >= 0x17)
  {
    v26 = v2;
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v25 = operator new(v27 + 1);
    *(_QWORD *)&__dst[8] = v24;
    *(_QWORD *)&__dst[16] = v28 | 0x8000000000000000;
    *(_QWORD *)__dst = v25;
    v2 = v26;
    goto LABEL_38;
  }
  __dst[23] = v23;
  v25 = __dst;
  if (v23)
LABEL_38:
    memmove(v25, v22, v24);
  v25[v24] = 0;
  memset(object, 0, 24);
  if (prop::logfilter::get(__dst, (uint64_t)object))
    util::convert<BOOL>((const std::string *)object, v210, 0);
  if ((object[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)object);
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_43:
      if (v210[0])
        goto LABEL_44;
LABEL_48:
      v30 = a1[11];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)object = 0;
        _os_log_impl(&dword_1BF335000, v30, OS_LOG_TYPE_DEFAULT, "#I Duplicated Signature Detection is disabled", object, 2u);
      }
      goto LABEL_88;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(*(void **)__dst);
  if (!v210[0])
    goto LABEL_48;
LABEL_44:
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&object[96] = v29;
  *(_OWORD *)&object[80] = v29;
  *(_OWORD *)&object[64] = v29;
  *(_OWORD *)&object[48] = v29;
  *(_OWORD *)&object[32] = v29;
  *(_OWORD *)&object[16] = v29;
  *(_OWORD *)object = v29;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v209, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v209 = __s;
  if (v210[24] < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)&v210[1], *(std::string::size_type *)&v210[9]);
  else
    v208 = *(std::string *)&v210[1];
  ResetInfo::ResetInfo((std::string *)object, (__int128 *)v214, (__int128 *)v213, (__int128 *)&v212, (uint64_t)&v209, v16, (__int128 *)&v208);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v208.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v209.__r_.__value_.__l.__data_);
LABEL_56:
  pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  v31 = qword_1ED70FE38;
  if (!qword_1ED70FE38)
  {
    v32 = operator new(0x30uLL);
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v32 + 2), "com.apple.telephony.abm", "Log Dump History");
    *(_QWORD *)v32 = &off_1E7906E20;
    v32[4] = 10;
    *((_QWORD *)v32 + 3) = 0;
    *((_QWORD *)v32 + 4) = 0;
    *((_QWORD *)v32 + 5) = 0;
    LogDumpDB::init((LogDumpDB *)v32);
    v33 = operator new(0x20uLL);
    *v33 = off_1E7908028;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v32;
    v34 = (std::__shared_weak_count *)off_1ED70FE40;
    qword_1ED70FE38 = (uint64_t)v32;
    off_1ED70FE40 = v33;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v31 = qword_1ED70FE38;
  }
  v37 = (std::__shared_weak_count *)off_1ED70FE40;
  *(_QWORD *)__dst = v31;
  *(_QWORD *)&__dst[8] = off_1ED70FE40;
  if (off_1ED70FE40)
  {
    v38 = (unint64_t *)((char *)off_1ED70FE40 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  isDuplicated = LogDumpDB::isDuplicated(v31, (uint64_t)object, 1200);
  v41 = isDuplicated;
  if (!v37)
    goto LABEL_70;
  v42 = (unint64_t *)&v37->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (v41)
    {
LABEL_71:
      std::string::append(&v212, " (duplicated signature detected)", 0x20uLL);
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v212;
      else
        v44 = (std::string *)v212.__r_.__value_.__r.__words[0];
      v45 = xpc_string_create((const char *)v44);
      if (!v45)
        v45 = xpc_null_create();
      xpc_dictionary_set_value(*v2, v11, v45);
      v46 = xpc_null_create();
      xpc_release(v45);
      xpc_release(v46);
      if ((object[111] & 0x80000000) != 0)
      {
        operator delete(*(void **)&object[88]);
        if ((object[71] & 0x80000000) == 0)
        {
LABEL_78:
          if ((object[47] & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_239;
        }
      }
      else if ((object[71] & 0x80000000) == 0)
      {
        goto LABEL_78;
      }
      operator delete(*(void **)&object[48]);
      if ((object[47] & 0x80000000) == 0)
      {
LABEL_79:
        if ((object[23] & 0x80000000) == 0)
        {
LABEL_80:
          v175 = 1;
          goto LABEL_97;
        }
LABEL_240:
        operator delete(*(void **)object);
        goto LABEL_80;
      }
LABEL_239:
      operator delete(*(void **)&object[24]);
      if ((object[23] & 0x80000000) == 0)
        goto LABEL_80;
      goto LABEL_240;
    }
  }
  else
  {
LABEL_70:
    if (isDuplicated)
      goto LABEL_71;
  }
  if ((object[111] & 0x80000000) != 0)
  {
    operator delete(*(void **)&object[88]);
    if ((object[71] & 0x80000000) == 0)
    {
LABEL_86:
      if ((object[47] & 0x80000000) == 0)
        goto LABEL_87;
LABEL_235:
      operator delete(*(void **)&object[24]);
      if ((object[23] & 0x80000000) == 0)
        goto LABEL_88;
LABEL_236:
      operator delete(*(void **)object);
      goto LABEL_88;
    }
  }
  else if ((object[71] & 0x80000000) == 0)
  {
    goto LABEL_86;
  }
  operator delete(*(void **)&object[48]);
  if ((object[47] & 0x80000000) != 0)
    goto LABEL_235;
LABEL_87:
  if ((object[23] & 0x80000000) != 0)
    goto LABEL_236;
LABEL_88:
  if (SHIBYTE(v215[2]) >= 0)
    v47 = HIBYTE(v215[2]);
  else
    v47 = (size_t)v215[1];
  if (v47 == strlen(v173))
  {
    v48 = SHIBYTE(v215[2]) >= 0 ? v215 : (std::string::value_type **)v215[0];
    if (!memcmp(v48, v173, v47))
    {
      v175 = 0;
      v70 = (const char *)*MEMORY[0x1E0CFB190];
      goto LABEL_217;
    }
  }
  v175 = 0;
LABEL_97:
  memset(v189, 170, 24);
  v49 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB6A0]);
  *(_QWORD *)object = v49;
  if (v49)
    xpc_retain(v49);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)*MEMORY[0x1E0D01A30], v50);
  xpc_release(*(xpc_object_t *)object);
  if (!v174)
  {
    *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&object[104] = v55;
    v219 = v55;
    *(_OWORD *)&object[232] = v55;
    *(_OWORD *)&object[216] = v55;
    *(_OWORD *)&object[200] = v55;
    *(_OWORD *)&object[184] = v55;
    *(_OWORD *)&object[168] = v55;
    *(_OWORD *)&object[152] = v55;
    *(_OWORD *)&object[136] = v55;
    *(_OWORD *)&object[120] = v55;
    *(_OWORD *)&object[88] = v55;
    *(_OWORD *)&object[72] = v55;
    *(_OWORD *)&object[56] = v55;
    *(_OWORD *)&object[40] = v55;
    *(_OWORD *)&object[24] = v55;
    *(_OWORD *)&object[8] = v55;
    v56 = MEMORY[0x1E0DE4FE0];
    v57 = MEMORY[0x1E0DE4FE0] + 64;
    v58 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v59 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *(_QWORD *)&object[112] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)object = v58;
    *(_QWORD *)&object[*(_QWORD *)(v58 - 24)] = v59;
    v60 = (std::ios_base *)&object[*(_QWORD *)(*(_QWORD *)object - 24)];
    std::ios_base::init(v60, &object[8]);
    v60[1].__vftable = 0;
    v60[1].__fmtflags_ = -1;
    *(_QWORD *)object = v56 + 24;
    *(_QWORD *)&object[112] = v57;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&object[8] = MEMORY[0x1E0DE4FB8] + 16;
    memset(&object[72], 0, 32);
    *(_DWORD *)&object[104] = 16;
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(object, (uint64_t)".*(", 3);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      size = __s.__r_.__value_.__l.__size_;
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)p_s, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)").*", 3);
    *(_QWORD *)&v65 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__dst[32] = v65;
    *(_OWORD *)v177 = v65;
    *(_OWORD *)__dst = v65;
    *(_OWORD *)&__dst[16] = v65;
    if ((object[104] & 0x10) != 0)
    {
      v68 = *(_QWORD *)&object[96];
      if (*(_QWORD *)&object[96] < *(_QWORD *)&object[56])
      {
        *(_QWORD *)&object[96] = *(_QWORD *)&object[56];
        v68 = *(_QWORD *)&object[56];
      }
      v69 = *(const void **)&object[48];
      v66 = v68 - *(_QWORD *)&object[48];
      if ((unint64_t)(v68 - *(_QWORD *)&object[48]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_356;
    }
    else
    {
      if ((object[104] & 8) == 0)
      {
        v66 = 0;
        BYTE7(v181) = 0;
        v67 = __p;
        goto LABEL_127;
      }
      v69 = *(const void **)&object[24];
      v66 = *(_QWORD *)&object[40] - *(_QWORD *)&object[24];
      if (*(_QWORD *)&object[40] - *(_QWORD *)&object[24] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_356:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v66 >= 0x17)
    {
      v71 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v66 | 7) != 0x17)
        v71 = v66 | 7;
      v72 = v71 + 1;
      v67 = operator new(v71 + 1);
      __p[1] = (xpc_object_t)v66;
      *(_QWORD *)&v181 = v72 | 0x8000000000000000;
      __p[0] = v67;
    }
    else
    {
      BYTE7(v181) = v66;
      v67 = __p;
      if (!v66)
      {
LABEL_127:
        *((_BYTE *)v67 + v66) = 0;
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)__dst, (uint64_t)__p, 0);
        if (SBYTE7(v181) < 0)
          operator delete(__p[0]);
        v195 = 0;
        v194 = 0;
        *(_QWORD *)v196 = 0;
        std::locale::locale(&v202, (const std::locale *)__dst);
        v203 = *(_OWORD *)&__dst[8];
        v204 = *(_OWORD *)&__dst[24];
        v205 = *(_QWORD *)&__dst[40];
        v206 = (std::__shared_weak_count *)v177[0];
        if (v177[0])
        {
          v73 = (unint64_t *)((char *)v177[0] + 8);
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        v207 = v177[1];
        ctu::fs::get_filtered_files();
        v75 = v206;
        if (v206)
        {
          v76 = (unint64_t *)&v206->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        std::locale::~locale(&v202);
        v78 = (std::__shared_weak_count *)v194;
        v79 = v195;
        v172 = v2;
        if ((v189[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)v189, *(std::string::size_type *)&v189[8]);
        else
          v200 = *(std::string *)v189;
        v171 = a1;
        v201 = a1;
        if (v78 == v79)
        {
LABEL_194:
          v108 = (void *)v200.__r_.__value_.__r.__words[0];
          v109 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          memset(&v200, 0, sizeof(v200));
          if (v109 < 0)
          {
            operator delete(v108);
            if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v200.__r_.__value_.__l.__data_);
          }
          v110 = (std::__shared_weak_count *)v194;
          a1 = v171;
          v2 = v172;
          v111 = (_QWORD *)MEMORY[0x1E0DE4F60];
          if (v194)
          {
            v112 = v195;
            v113 = v194;
            if (v195 != v194)
            {
              do
              {
                if (SHIBYTE(v112[-1].__shared_weak_owners_) < 0)
                  operator delete(v112[-1].__vftable);
                --v112;
              }
              while (v112 != v110);
              v113 = v194;
            }
            v195 = v110;
            operator delete(v113);
          }
          v114 = (std::__shared_weak_count *)v177[0];
          v115 = MEMORY[0x1E0DE4FB8];
          if (v177[0])
          {
            v116 = (unint64_t *)((char *)v177[0] + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          std::locale::~locale((std::locale *)__dst);
          *(_QWORD *)object = *v111;
          *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = v111[3];
          *(_QWORD *)&object[8] = v115 + 16;
          if ((object[95] & 0x80000000) != 0)
            operator delete(*(void **)&object[72]);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1C3B89E4C](&object[112]);
          goto LABEL_213;
        }
        while (1)
        {
          v80 = v201;
          v81 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
          else
            v82 = v200.__r_.__value_.__l.__size_;
          v83 = v82 + 1;
          memset(v187, 170, 24);
          if (v82 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_357:
            std::string::__throw_length_error[abi:ne180100]();
          if (v83 >= 0x17)
          {
            v85 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v83 | 7) != 0x17)
              v85 = v83 | 7;
            v86 = v85 + 1;
            v84 = operator new(v85 + 1);
            *(_QWORD *)&v187[16] = v86 | 0x8000000000000000;
            *(_QWORD *)v187 = v84;
            *(_QWORD *)&v187[8] = v82 + 1;
          }
          else
          {
            memset(v187, 0, 24);
            v84 = v187;
            v187[23] = v82 + 1;
            if (!v82)
              goto LABEL_158;
          }
          if (v81 >= 0)
            v87 = &v200;
          else
            v87 = (std::string *)v200.__r_.__value_.__r.__words[0];
          memmove(v84, v87, v82);
LABEL_158:
          *(_WORD *)&v84[v82] = 47;
          shared_weak_owners_high = SHIBYTE(v78->__shared_weak_owners_);
          if (shared_weak_owners_high >= 0)
            v89 = (const std::string::value_type *)v78;
          else
            v89 = (const std::string::value_type *)v78->__vftable;
          if (shared_weak_owners_high >= 0)
            shared_owners = HIBYTE(v78->__shared_weak_owners_);
          else
            shared_owners = v78->__shared_owners_;
          v91 = std::string::append((std::string *)v187, v89, shared_owners);
          v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          *(_QWORD *)&v181 = *((_QWORD *)&v91->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          v93 = ctu::fs::remove_dir();
          if (SBYTE7(v181) < 0)
          {
            operator delete(__p[0]);
            if ((v187[23] & 0x80000000) != 0)
            {
LABEL_169:
              operator delete(*(void **)v187);
              v94 = v80[11];
              if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                goto LABEL_143;
              goto LABEL_170;
            }
          }
          else if ((v187[23] & 0x80000000) != 0)
          {
            goto LABEL_169;
          }
          v94 = v80[11];
          if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            goto LABEL_143;
LABEL_170:
          v95 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v96 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
          else
            v96 = v200.__r_.__value_.__l.__size_;
          v97 = v96 + 1;
          memset(v187, 170, 24);
          if (v96 + 1 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_357;
          if (v97 >= 0x17)
          {
            v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v97 | 7) != 0x17)
              v99 = v97 | 7;
            v100 = v99 + 1;
            v98 = operator new(v99 + 1);
            *(_QWORD *)&v187[16] = v100 | 0x8000000000000000;
            *(_QWORD *)v187 = v98;
            *(_QWORD *)&v187[8] = v96 + 1;
          }
          else
          {
            memset(v187, 0, 24);
            v98 = v187;
            v187[23] = v96 + 1;
            if (!v96)
              goto LABEL_184;
          }
          if (v95 >= 0)
            v101 = &v200;
          else
            v101 = (std::string *)v200.__r_.__value_.__r.__words[0];
          memmove(v98, v101, v96);
LABEL_184:
          *(_WORD *)&v98[v96] = 47;
          if (v78->__shared_weak_owners_ >= 0)
            v102 = (const char *)v78;
          else
            v102 = (const char *)v78->__vftable;
          v103 = strlen(v102);
          v104 = std::string::append((std::string *)v187, v102, v103);
          v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          *(_QWORD *)&v181 = *((_QWORD *)&v104->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          v106 = "Failed";
          if (v93)
            v106 = "Succeeded";
          v107 = __p;
          if (SBYTE7(v181) < 0)
            v107 = (xpc_object_t *)__p[0];
          *(_DWORD *)buf = 136315394;
          v221 = v106;
          v222 = 2080;
          v223 = v107;
          _os_log_impl(&dword_1BF335000, v94, OS_LOG_TYPE_DEFAULT, "#I %s to remove path: %s", buf, 0x16u);
          if (SBYTE7(v181) < 0)
          {
            operator delete(__p[0]);
            if ((v187[23] & 0x80000000) != 0)
              goto LABEL_193;
          }
          else if ((v187[23] & 0x80000000) != 0)
          {
LABEL_193:
            operator delete(*(void **)v187);
          }
LABEL_143:
          if (++v78 == v79)
            goto LABEL_194;
        }
      }
    }
    memmove(v67, v69, v66);
    goto LABEL_127;
  }
  v51 = ctu::fs::remove_dir();
  v52 = a1[11];
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    v53 = "Failed";
    if (v51)
      v53 = "Succeeded";
    v54 = v189;
    if (v189[23] < 0)
      v54 = *(_BYTE **)v189;
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v53;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v54;
    _os_log_impl(&dword_1BF335000, v52, OS_LOG_TYPE_DEFAULT, "#I %s to remove dump path: %s", object, 0x16u);
  }
LABEL_213:
  v118 = xpc_int64_create(0);
  if (!v118)
    v118 = xpc_null_create();
  v70 = (const char *)*MEMORY[0x1E0CFB190];
  xpc_dictionary_set_value(*v2, (const char *)*MEMORY[0x1E0CFB190], v118);
  v119 = xpc_null_create();
  xpc_release(v118);
  xpc_release(v119);
  if ((v189[23] & 0x80000000) != 0)
    operator delete(*(void **)v189);
LABEL_217:
  v120 = xpc_dictionary_get_value(*v2, v70);
  *(_QWORD *)object = v120;
  if (v120)
    xpc_retain(v120);
  else
    *(_QWORD *)object = xpc_null_create();
  v121 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(*(xpc_object_t *)object);
  if (SHIBYTE(v215[2]) >= 0)
    v122 = HIBYTE(v215[2]);
  else
    v122 = (size_t)v215[1];
  if (v122 != strlen(v173))
    goto LABEL_249;
  v123 = SHIBYTE(v215[2]) >= 0 ? v215 : (std::string::value_type **)v215[0];
  if (memcmp(v123, v173, v122) || v121 == 2)
    goto LABEL_249;
  v124 = a1[26];
  v199 = v124;
  if (v124)
  {
    dispatch_retain(v124);
    dispatch_group_enter(v124);
  }
  v125 = *v2;
  v198 = v125;
  if (v125)
  {
    xpc_retain(v125);
  }
  else
  {
    v125 = xpc_null_create();
    v198 = v125;
  }
  v217 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v199, &v198, v216);
  v126 = v217;
  if (v217 == v216)
  {
    v127 = 4;
    v126 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_247;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_247:
  xpc_release(v125);
  v198 = 0;
  if (v124)
  {
    dispatch_group_leave(v124);
    dispatch_release(v124);
  }
LABEL_249:
  v128 = (std::__shared_weak_count *)a1[16];
  if (!v128 || (v129 = v2, v130 = (void *)a1[15], (v131 = std::__shared_weak_count::lock(v128)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v132 = v131;
  p_shared_weak_owners = (unint64_t *)&v131->__shared_weak_owners_;
  do
    v134 = __ldxr(p_shared_weak_owners);
  while (__stxr(v134 + 1, p_shared_weak_owners));
  v135 = (unint64_t *)&v131->__shared_owners_;
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v132);
  }
  v197.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v137 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v137 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v196[16] = v137;
  *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v137;
  *(_OWORD *)v196 = v137;
  v194 = v130;
  v195 = v132;
  do
    v138 = __ldxr(p_shared_weak_owners);
  while (__stxr(v138 + 1, p_shared_weak_owners));
  *(_QWORD *)v196 = a1;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)&v196[8], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    *(std::string *)&v196[8] = __s;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v197, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v197 = v212;
  *(_QWORD *)&v139 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v193 = v139;
  *(_OWORD *)&v193[16] = v139;
  v191 = v139;
  v192 = v139;
  *(_OWORD *)&v189[16] = v139;
  v190 = v139;
  *(_QWORD *)v189 = v130;
  *(_QWORD *)&v189[8] = v132;
  do
    v140 = __ldxr(p_shared_weak_owners);
  while (__stxr(v140 + 1, p_shared_weak_owners));
  *(_QWORD *)&v189[16] = a1;
  v189[24] = v175;
  *(_DWORD *)&v189[28] = v121;
  v141 = *v129;
  *(_QWORD *)&v190 = v141;
  if (!v141)
  {
    *(_QWORD *)&v190 = xpc_null_create();
    v142 = v195;
    *((_QWORD *)&v190 + 1) = v194;
    *(_QWORD *)&v191 = v195;
    if (!v195)
      goto LABEL_273;
LABEL_271:
    v143 = (unint64_t *)&v142->__shared_weak_owners_;
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
    goto LABEL_273;
  }
  xpc_retain(v141);
  v142 = v195;
  *((_QWORD *)&v190 + 1) = v194;
  *(_QWORD *)&v191 = v195;
  if (v195)
    goto LABEL_271;
LABEL_273:
  *((_QWORD *)&v191 + 1) = *(_QWORD *)v196;
  if ((v196[31] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v192, *(const std::string::value_type **)&v196[8], *(std::string::size_type *)&v196[16]);
  }
  else
  {
    v192 = *(_OWORD *)&v196[8];
    *(_QWORD *)v193 = *(_QWORD *)&v196[24];
  }
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)&v193[8], v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    *(std::string *)&v193[8] = v197;
  *(_QWORD *)&v145 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v145 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v188[5] = v145;
  v188[6] = v145;
  v188[3] = v145;
  v188[4] = v145;
  v188[1] = v145;
  v188[2] = v145;
  *(_OWORD *)&v187[16] = v145;
  v188[0] = v145;
  *(_QWORD *)v187 = v130;
  *(_QWORD *)&v187[8] = v132;
  do
    v146 = __ldxr(p_shared_weak_owners);
  while (__stxr(v146 + 1, p_shared_weak_owners));
  v147 = *v129;
  *(_QWORD *)&v187[16] = a1;
  *(_QWORD *)&v187[24] = v147;
  if (v147)
    xpc_retain(v147);
  else
    *(_QWORD *)&v187[24] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v188, (uint64_t)v189);
  *(_QWORD *)&v148 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v148 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v186[5] = v148;
  v186[6] = v148;
  v186[3] = v148;
  v186[4] = v148;
  v186[1] = v148;
  v186[2] = v148;
  v185 = v148;
  v186[0] = v148;
  *(_OWORD *)v183 = v148;
  v184 = v148;
  v181 = v148;
  *(_OWORD *)v182 = v148;
  __p[0] = v130;
  __p[1] = v132;
  do
    v149 = __ldxr(p_shared_weak_owners);
  while (__stxr(v149 + 1, p_shared_weak_owners));
  *(_QWORD *)&v181 = a1;
  DWORD2(v181) = v174;
  BYTE12(v181) = v175;
  if (SHIBYTE(v215[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v182, v215[0], (std::string::size_type)v215[1]);
  }
  else
  {
    *(_OWORD *)v182 = *(_OWORD *)v215;
    v183[0] = v215[2];
  }
  v150 = *v129;
  v183[1] = v150;
  if (!v150)
  {
    v183[1] = xpc_null_create();
    v151 = *(_QWORD *)&v187[8];
    v184 = *(_OWORD *)v187;
    if (!*(_QWORD *)&v187[8])
      goto LABEL_295;
LABEL_293:
    v152 = (unint64_t *)(v151 + 16);
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    goto LABEL_295;
  }
  xpc_retain(v150);
  v151 = *(_QWORD *)&v187[8];
  v184 = *(_OWORD *)v187;
  if (*(_QWORD *)&v187[8])
    goto LABEL_293;
LABEL_295:
  v185 = *(_OWORD *)&v187[16];
  if (*(_QWORD *)&v187[24])
    xpc_retain(*(xpc_object_t *)&v187[24]);
  else
    *((_QWORD *)&v185 + 1) = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v186, (uint64_t)v188);
  *(_QWORD *)&v154 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v154 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v179[7] = v154;
  v179[8] = v154;
  v179[5] = v154;
  v179[6] = v154;
  v179[3] = v154;
  v179[4] = v154;
  v179[1] = v154;
  v179[2] = v154;
  *(_OWORD *)v178 = v154;
  v179[0] = v154;
  *(_OWORD *)&__dst[32] = v154;
  *(_OWORD *)v177 = v154;
  *(_OWORD *)&__dst[16] = v154;
  v155 = *v129;
  *(_QWORD *)__dst = a1;
  *(_QWORD *)&__dst[8] = v155;
  if (v155)
    xpc_retain(v155);
  else
    *(_QWORD *)&__dst[8] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&__dst[16], (uint64_t)__p);
  *(_QWORD *)&object[240] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v156 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v156 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&object[224] = v156;
  *(_OWORD *)&object[208] = v156;
  *(_OWORD *)&object[192] = v156;
  *(_OWORD *)&object[176] = v156;
  *(_OWORD *)&object[160] = v156;
  *(_OWORD *)&object[144] = v156;
  *(_OWORD *)&object[128] = v156;
  *(_OWORD *)&object[112] = v156;
  *(_OWORD *)&object[96] = v156;
  *(_OWORD *)&object[80] = v156;
  *(_OWORD *)&object[64] = v156;
  *(_OWORD *)&object[48] = v156;
  *(_OWORD *)&object[32] = v156;
  *(_OWORD *)&object[16] = v156;
  *(_QWORD *)object = v130;
  *(_QWORD *)&object[8] = v132;
  do
    v157 = __ldxr(p_shared_weak_owners);
  while (__stxr(v157 + 1, p_shared_weak_owners));
  *(_QWORD *)&object[16] = a1;
  *(_OWORD *)&object[24] = *(_OWORD *)__dst;
  if (*(_QWORD *)&__dst[8])
    xpc_retain(*(xpc_object_t *)&__dst[8]);
  else
    *(_QWORD *)&object[32] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&object[40], (uint64_t)&__dst[16]);
  v158 = a1[26];
  v159 = a1[17];
  v160 = (char *)operator new(0xF8uLL);
  v161 = *(_OWORD *)object;
  v162 = *(_OWORD *)&object[16];
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)object = 0;
  *(_OWORD *)v160 = v161;
  *((_OWORD *)v160 + 1) = v162;
  v163 = *(void **)&object[32];
  *((_QWORD *)v160 + 4) = *(_QWORD *)&object[32];
  if (v163)
    xpc_retain(v163);
  else
    *((_QWORD *)v160 + 4) = xpc_null_create();
  *(_OWORD *)(v160 + 40) = *(_OWORD *)&object[40];
  *(_QWORD *)&object[40] = 0;
  *(_QWORD *)&object[48] = 0;
  v164 = *(_QWORD *)&object[88];
  *((_QWORD *)v160 + 7) = *(_QWORD *)&object[56];
  *(_QWORD *)(v160 + 61) = *(_QWORD *)&object[61];
  *(_OWORD *)(v160 + 72) = *(_OWORD *)&object[72];
  memset(&object[72], 0, 24);
  v165 = *(void **)&object[96];
  *((_QWORD *)v160 + 11) = v164;
  *((_QWORD *)v160 + 12) = v165;
  if (v165)
    xpc_retain(v165);
  else
    *((_QWORD *)v160 + 12) = xpc_null_create();
  *(_OWORD *)(v160 + 104) = *(_OWORD *)&object[104];
  *(_QWORD *)&object[112] = 0;
  *(_QWORD *)&object[104] = 0;
  v166 = *(void **)&object[128];
  *((_QWORD *)v160 + 15) = *(_QWORD *)&object[120];
  *((_QWORD *)v160 + 16) = v166;
  if (v166)
    xpc_retain(v166);
  else
    *((_QWORD *)v160 + 16) = xpc_null_create();
  *(_OWORD *)(v160 + 136) = *(_OWORD *)&object[136];
  *(_QWORD *)&object[144] = 0;
  *(_QWORD *)&object[136] = 0;
  *(_OWORD *)(v160 + 152) = *(_OWORD *)&object[152];
  v167 = *(void **)&object[168];
  *((_QWORD *)v160 + 21) = *(_QWORD *)&object[168];
  if (v167)
    xpc_retain(v167);
  else
    *((_QWORD *)v160 + 21) = xpc_null_create();
  v168 = *(_QWORD *)&object[216];
  *((_QWORD *)v160 + 24) = *(_QWORD *)&object[192];
  *((_OWORD *)v160 + 11) = *(_OWORD *)&object[176];
  *(_OWORD *)&object[176] = 0uLL;
  *(_OWORD *)(v160 + 200) = *(_OWORD *)&object[200];
  *((_QWORD *)v160 + 27) = v168;
  *(_QWORD *)&object[208] = 0;
  *(_QWORD *)&object[200] = 0;
  *((_OWORD *)v160 + 14) = *(_OWORD *)&object[224];
  *((_QWORD *)v160 + 30) = *(_QWORD *)&object[240];
  memset(&object[216], 0, 32);
  dispatch_group_notify_f(v158, v159, v160, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)object);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v179);
  xpc_release(v178[1]);
  v178[1] = 0;
  if (SHIBYTE(v178[0]) < 0)
    operator delete(v177[0]);
  if (*(_QWORD *)&__dst[24])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__dst[24]);
  xpc_release(*(xpc_object_t *)&__dst[8]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v184);
  xpc_release(v183[1]);
  v183[1] = 0;
  if (SHIBYTE(v183[0]) < 0)
    operator delete(v182[0]);
  if (__p[1])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v187);
  if ((v193[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v193[8]);
    if ((v193[7] & 0x80000000) == 0)
    {
LABEL_328:
      v169 = (std::__shared_weak_count *)v191;
      if (!(_QWORD)v191)
        goto LABEL_330;
      goto LABEL_329;
    }
  }
  else if ((v193[7] & 0x80000000) == 0)
  {
    goto LABEL_328;
  }
  operator delete((void *)v192);
  v169 = (std::__shared_weak_count *)v191;
  if ((_QWORD)v191)
LABEL_329:
    std::__shared_weak_count::__release_weak(v169);
LABEL_330:
  xpc_release((xpc_object_t)v190);
  *(_QWORD *)&v190 = 0;
  if (*(_QWORD *)&v189[8])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v189[8]);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v197.__r_.__value_.__l.__data_);
    if ((v196[31] & 0x80000000) == 0)
    {
LABEL_334:
      v170 = v195;
      if (!v195)
        goto LABEL_336;
      goto LABEL_335;
    }
  }
  else if ((v196[31] & 0x80000000) == 0)
  {
    goto LABEL_334;
  }
  operator delete(*(void **)&v196[8]);
  v170 = v195;
  if (v195)
LABEL_335:
    std::__shared_weak_count::__release_weak(v170);
LABEL_336:
  std::__shared_weak_count::__release_weak(v132);
  if (v210[24] < 0)
  {
    operator delete(*(void **)&v210[1]);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_338:
      if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_339;
      goto LABEL_351;
    }
  }
  else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_338;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_339:
    if ((SHIBYTE(v213[2]) & 0x80000000) == 0)
      goto LABEL_340;
    goto LABEL_352;
  }
LABEL_351:
  operator delete(v212.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v213[2]) & 0x80000000) == 0)
  {
LABEL_340:
    if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
      goto LABEL_341;
    goto LABEL_353;
  }
LABEL_352:
  operator delete(v213[0]);
  if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
  {
LABEL_341:
    if ((SHIBYTE(v215[2]) & 0x80000000) == 0)
      return;
LABEL_354:
    operator delete(v215[0]);
    return;
  }
LABEL_353:
  operator delete(v214[0]);
  if (SHIBYTE(v215[2]) < 0)
    goto LABEL_354;
}

void sub_1BF479810(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF479E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a73;

  if (a50 < 0)
  {
    operator delete(__p);
    if (SLOBYTE(STACK[0x20F]) < 0)
    {
LABEL_5:
      operator delete(a73);
      if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0)
        JUMPOUT(0x1BF479DB0);
      JUMPOUT(0x1BF479DA8);
    }
  }
  else if (SLOBYTE(STACK[0x20F]) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x1BF479DA0);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (!v7)
  {
    *(_QWORD *)(a1 + 32) = xpc_null_create();
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    if (!v8)
      goto LABEL_10;
LABEL_8:
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    goto LABEL_10;
  }
  xpc_retain(v7);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  if (v8)
    goto LABEL_8;
LABEL_10:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v11;
  }
  v12 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return a1;
}

void sub_1BF479F9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  xpc_release(*(xpc_object_t *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = 0;
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 16) = v7;
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v8;
  }
  v9 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  if (!v9)
  {
    *(_QWORD *)(a1 + 56) = xpc_null_create();
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v10;
    if (!v10)
      goto LABEL_13;
LABEL_11:
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    goto LABEL_13;
  }
  xpc_retain(v9);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  if (v10)
    goto LABEL_11;
LABEL_13:
  v13 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  if (v13)
    xpc_retain(v13);
  else
    *(_QWORD *)(a1 + 88) = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(a1 + 96, a2 + 96);
  return a1;
}

void sub_1BF47A0E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v3)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 104);
  xpc_release(*(xpc_object_t *)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5::~$_5(uint64_t a1)
{
  std::__shared_weak_count *v2;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 80);
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::~$_4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 64);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 48);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_7;
LABEL_3:
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::markPurgeable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __darwin_ino64_t v18;
  stat *p_dst;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void **v29;
  void **v30;
  std::string *v31;
  uint64_t v32;
  void *v33;
  int v34;
  void **v35;
  _WORD *v36;
  int v37;
  size_t size;
  unint64_t v39;
  stat *v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  timespec v49;
  std::string *p_sz;
  std::string *v51;
  DIR *v52;
  DIR *v53;
  dirent *v54;
  _BOOL4 v55;
  NSObject *v56;
  NSObject *v57;
  std::string *v58;
  void *v59;
  int v60;
  void **v61;
  void **v62;
  void *v63;
  std::__shared_weak_count *v64;
  uint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string v69;
  uint64_t v70;
  std::locale v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  void *v77;
  void **v78;
  uint64_t v79;
  _BYTE v80[48];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[10];
  std::string v90;
  void *__p[2];
  char v92;
  std::string __sz;
  stat __dst;
  uint8_t buf[4];
  std::string *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89[0] = v6;
  v89[9] = v6;
  v89[8] = v6;
  v89[7] = v6;
  v89[6] = v6;
  v89[5] = v6;
  v89[4] = v6;
  v89[3] = v6;
  v89[2] = v6;
  v89[1] = v6;
  v88 = v6;
  v87 = v6;
  v86 = v6;
  v85 = v6;
  v84 = v6;
  v83 = v6;
  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *((_QWORD *)&v89[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
  v82 = v9;
  *(uint64_t *)((char *)&v82 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v82 + *(_QWORD *)(v82 - 24));
  std::ios_base::init(v11, &v83);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v82 = v7 + 24;
  *((_QWORD *)&v89[0] + 1) = v8;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v83 = MEMORY[0x1E0DE4FB8] + 16;
  v87 = 0u;
  v88 = 0u;
  LODWORD(v89[0]) = 16;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)".*(", 3);
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = a3;
  else
    v14 = *(_QWORD *)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)").*", 3);
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v80[32] = v17;
  v81 = v17;
  *(_OWORD *)v80 = v17;
  *(_OWORD *)&v80[16] = v17;
  if ((v89[0] & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1) < (unint64_t)v86)
    {
      *((_QWORD *)&v88 + 1) = v86;
      v20 = v86;
    }
    v21 = (const void *)*((_QWORD *)&v85 + 1);
    v18 = v20 - *((_QWORD *)&v85 + 1);
    if ((unint64_t)(v20 - *((_QWORD *)&v85 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_32;
  }
  else
  {
    if ((v89[0] & 8) == 0)
    {
      v18 = 0;
      HIBYTE(__dst.st_gid) = 0;
      p_dst = &__dst;
      goto LABEL_20;
    }
    v21 = (const void *)v84;
    v18 = v85 - v84;
    if ((_QWORD)v85 - (_QWORD)v84 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_32:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (stat *)operator new(v22 + 1);
    *(_QWORD *)&__dst.st_uid = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = p_dst;
    __dst.st_ino = v18;
    goto LABEL_19;
  }
  HIBYTE(__dst.st_gid) = v18;
  p_dst = &__dst;
  if (v18)
LABEL_19:
    memmove(p_dst, v21, v18);
LABEL_20:
  *((_BYTE *)&p_dst->st_dev + v18) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v80, (uint64_t)&__dst, 0);
  if (SHIBYTE(__dst.st_gid) < 0)
    operator delete(*(void **)&__dst.st_dev);
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::locale::locale(&v71, (const std::locale *)v80);
  v72 = *(_OWORD *)&v80[8];
  v73 = *(_OWORD *)&v80[24];
  v74 = *(_QWORD *)&v80[40];
  v75 = (std::__shared_weak_count *)v81;
  if ((_QWORD)v81)
  {
    v24 = (unint64_t *)(v81 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v76 = *((_QWORD *)&v81 + 1);
  ctu::fs::get_filtered_files();
  v26 = v75;
  if (!v75)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v75->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::locale::~locale(&v71);
    v29 = (void **)v77;
    v30 = v78;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_30;
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v71);
    v29 = (void **)v77;
    v30 = v78;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_30:
      v69 = *(std::string *)a2;
      goto LABEL_35;
    }
  }
  std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_35:
  v70 = a1;
  while (v29 != v30)
  {
    v32 = v70;
    v33 = (void *)*((unsigned __int8 *)v29 + 23);
    v34 = (char)v33;
    if ((char)v33 < 0)
      v33 = v29[1];
    if (v33 == (void *)2)
    {
      if (v34 >= 0)
        v36 = v29;
      else
        v36 = *v29;
      if (*v36 == 11822)
        goto LABEL_41;
    }
    else if (v33 == (void *)1)
    {
      v35 = v34 >= 0 ? v29 : (void **)*v29;
      if (*(_BYTE *)v35 == 46)
        goto LABEL_41;
    }
    memset(&__sz, 170, sizeof(__sz));
    v37 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      size = v69.__r_.__value_.__l.__size_;
    v39 = size + 1;
    memset(&__dst, 170, 24);
    if (size + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v39 >= 0x17)
    {
      v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v41 = v39 | 7;
      v42 = v41 + 1;
      v40 = (stat *)operator new(v41 + 1);
      *(_QWORD *)&__dst.st_uid = v42 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = v40;
      __dst.st_ino = size + 1;
    }
    else
    {
      memset(&__dst, 0, 24);
      v40 = &__dst;
      HIBYTE(__dst.st_gid) = size + 1;
      if (!size)
        goto LABEL_69;
    }
    if (v37 >= 0)
      v43 = &v69;
    else
      v43 = (std::string *)v69.__r_.__value_.__r.__words[0];
    memmove(v40, v43, size);
LABEL_69:
    *(_WORD *)((char *)&v40->st_dev + size) = 47;
    v44 = *((char *)v29 + 23);
    if (v44 >= 0)
      v45 = (const std::string::value_type *)v29;
    else
      v45 = (const std::string::value_type *)*v29;
    if (v44 >= 0)
      v46 = *((unsigned __int8 *)v29 + 23);
    else
      v46 = (std::string::size_type)v29[1];
    v47 = std::string::append((std::string *)&__dst, v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __sz.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
      operator delete(*(void **)&__dst.st_dev);
    v49.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v49.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v49;
    *(timespec *)__dst.st_qspare = v49;
    __dst.st_birthtimespec = v49;
    *(timespec *)&__dst.st_size = v49;
    __dst.st_mtimespec = v49;
    __dst.st_ctimespec = v49;
    *(timespec *)&__dst.st_uid = v49;
    __dst.st_atimespec = v49;
    *(timespec *)&__dst.st_dev = v49;
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_sz = &__sz;
    else
      p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
    if (!stat((const char *)p_sz, &__dst))
    {
      v51 = (__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__sz
          : (std::string *)__sz.__r_.__value_.__r.__words[0];
      v52 = opendir((const char *)v51);
      v53 = v52;
      if (v52)
      {
        v54 = readdir(v52);
        closedir(v53);
        if (v54)
        {
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__dst, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__dst.st_dev = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            *(_QWORD *)&__dst.st_uid = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
          }
          v92 = 2;
          strcpy((char *)__p, ".*");
          LogTracker::markPurgeable(v32, &__dst, __p);
          if (v92 < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
              goto LABEL_81;
          }
          else if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
          {
            goto LABEL_81;
          }
          operator delete(*(void **)&__dst.st_dev);
        }
      }
    }
LABEL_81:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v90, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    else
      v90 = __sz;
    v55 = util::markPurgeableFile((uint64_t *)&v90);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v90.__r_.__value_.__l.__data_);
      v56 = *(NSObject **)(v32 + 88);
      v57 = v56;
      if (v55)
      {
LABEL_93:
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &__sz;
          else
            v31 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          v96 = v31;
          _os_log_impl(&dword_1BF335000, v56, OS_LOG_TYPE_DEFAULT, "#I %s is marked to be purgeable", buf, 0xCu);
          if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_41;
          goto LABEL_98;
        }
        goto LABEL_97;
      }
    }
    else
    {
      v56 = *(NSObject **)(v32 + 88);
      v57 = v56;
      if (v55)
        goto LABEL_93;
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &__sz;
      else
        v58 = (std::string *)__sz.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v96 = v58;
      _os_log_error_impl(&dword_1BF335000, v56, OS_LOG_TYPE_ERROR, "Failed to mark %s to be purgeable", buf, 0xCu);
      if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_98:
      operator delete(__sz.__r_.__value_.__l.__data_);
      goto LABEL_41;
    }
LABEL_97:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_98;
LABEL_41:
    v29 += 3;
  }
  v59 = (void *)v69.__r_.__value_.__r.__words[0];
  v60 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  memset(&v69, 0, sizeof(v69));
  if (v60 < 0)
  {
    operator delete(v59);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
  }
  v61 = (void **)v77;
  if (v77)
  {
    v62 = v78;
    v63 = v77;
    if (v78 != v77)
    {
      do
      {
        if (*((char *)v62 - 1) < 0)
          operator delete(*(v62 - 3));
        v62 -= 3;
      }
      while (v62 != v61);
      v63 = v77;
    }
    v78 = v61;
    operator delete(v63);
  }
  v64 = (std::__shared_weak_count *)v81;
  v65 = (uint64_t *)MEMORY[0x1E0DE4F60];
  if ((_QWORD)v81)
  {
    v66 = (unint64_t *)(v81 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  std::locale::~locale((std::locale *)v80);
  v82 = *v65;
  *(uint64_t *)((char *)&v82 + *(_QWORD *)(v82 - 24)) = v65[3];
  *(_QWORD *)&v83 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v88) < 0)
    operator delete((void *)v87);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B89E4C]((char *)v89 + 8);
}

void sub_1BF47AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,std::locale a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::vector<std::string>::~vector[abi:ne180100](&a26);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a29);
  std::ostringstream::~ostringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void LogTracker::houseKeepingLogs_sync(uint64_t a1, const char *a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  xpc_object_t v37;
  std::__shared_weak_count *v38;
  std::string v39;
  void *v40[2];
  unint64_t v41;
  std::string v42;
  void *__p[2];
  unint64_t v44;
  std::string v45;
  void *__dst[2];
  unint64_t v47;
  _QWORD block[5];

  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild() & 1) != 0)
    goto LABEL_15;
  v4 = (const void *)*MEMORY[0x1E0D01A30];
  v5 = strlen((const char *)*MEMORY[0x1E0D01A30]);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v47 = v9 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_11:
    memmove(v7, v4, (size_t)v6);
    *((_BYTE *)v6 + (_QWORD)v7) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_7;
LABEL_12:
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    goto LABEL_13;
  }
  HIBYTE(v47) = v5;
  v7 = __dst;
  if (v5)
    goto LABEL_11;
  LOBYTE(__dst[0]) = 0;
  if (a2[23] < 0)
    goto LABEL_12;
LABEL_7:
  v45 = *(std::string *)a2;
LABEL_13:
  LogTracker::markPurgeable(a1, (uint64_t)__dst, (uint64_t)&v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst[0]);
LABEL_15:
  v10 = (const void *)*MEMORY[0x1E0D01A48];
  v11 = strlen((const char *)*MEMORY[0x1E0D01A48]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __p[1] = v12;
    v44 = v15 | 0x8000000000000000;
    __p[0] = v13;
LABEL_23:
    memmove(v13, v10, (size_t)v12);
    *((_BYTE *)v12 + (_QWORD)v13) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_24;
  }
  HIBYTE(v44) = v11;
  v13 = __p;
  if (v11)
    goto LABEL_23;
  LOBYTE(__p[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_19:
    v42 = *(std::string *)a2;
    goto LABEL_25;
  }
LABEL_24:
  std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_25:
  LogTracker::markPurgeable(a1, (uint64_t)__p, (uint64_t)&v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
LABEL_27:
  v16 = (const void *)*MEMORY[0x1E0D01A68];
  v17 = strlen((const char *)*MEMORY[0x1E0D01A68]);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    v40[1] = v18;
    v41 = v21 | 0x8000000000000000;
    v40[0] = v19;
LABEL_35:
    memmove(v19, v16, (size_t)v18);
    *((_BYTE *)v18 + (_QWORD)v19) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_36;
  }
  HIBYTE(v41) = v17;
  v19 = v40;
  if (v17)
    goto LABEL_35;
  LOBYTE(v40[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_31:
    v39 = *(std::string *)a2;
    goto LABEL_37;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_37:
  LogTracker::markPurgeable(a1, (uint64_t)v40, (uint64_t)&v39);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
LABEL_39:
      if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v22))
        goto LABEL_47;
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(v40[0]);
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v24))
    goto LABEL_47;
LABEL_45:
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v23)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v25))
  {
LABEL_47:
    v26 = xpc_dictionary_create(0, 0, 0);
    if (v26 || (v26 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v26) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v26);
        v27 = v26;
      }
      else
      {
        v27 = xpc_null_create();
      }
    }
    else
    {
      v27 = xpc_null_create();
      v26 = 0;
    }
    xpc_release(v26);
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    v28 = xpc_string_create(a2);
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E0CF10E0], v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_2;
    block[4] = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v31 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v38 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_62;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
      v31 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v38 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_62;
    }
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
LABEL_62:
    abm::HelperClient::create();
    if (!v38)
      goto LABEL_66;
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      v37 = v27;
      if (v27)
        goto LABEL_67;
    }
    else
    {
LABEL_66:
      v37 = v27;
      if (v27)
      {
LABEL_67:
        xpc_retain(v27);
        goto LABEL_70;
      }
    }
    v37 = xpc_null_create();
LABEL_70:
    abm::HelperClient::perform();
    xpc_release(v37);
    do
      v36 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
    while (__stlxr(v36 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
    if (!v36)
    {
      (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
    }
    xpc_release(v27);
  }
}

void sub_1BF47B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isDefaultCarrierProfileInstalled(LogTracker *this)
{
  const void *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__dst[2];
  unint64_t v9;
  int v10;
  std::string __p;

  v10 = -1431655766;
  v1 = (const void *)*MEMORY[0x1E0CFC078];
  v2 = strlen((const char *)*MEMORY[0x1E0CFC078]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v9) = v2;
  v4 = __dst;
  if (v2)
LABEL_8:
    memmove(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::profile::get((char *)__dst, (uint64_t)&__p))
    util::convert<int>(&__p, &v10, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return v10 != 0;
LABEL_15:
    operator delete(__dst[0]);
    return v10 != 0;
  }
  if (SHIBYTE(v9) < 0)
    goto LABEL_15;
  return v10 != 0;
}

void sub_1BF47B5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isInternalProperty_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  std::string *p_string;
  xpc_object_t value;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  NSObject *v17;
  char **v18;
  void **v19;
  std::string *v20;
  char *v22;
  const char *v23;
  const char *v24;
  void **v25;
  TapToRadar *v26;
  _BOOL8 v27;
  int Mode;
  xpc_object_t object;
  xpc_object_t objecta;
  xpc_object_t objectb;
  std::string v32;
  std::string string;
  void *v34[2];
  int64_t v35;
  char *v36[2];
  int64_t v37;
  std::string __p;
  void **v39;
  __int16 v40;
  std::string *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  memset(&string, 0, sizeof(string));
  v8 = MEMORY[0x1C3B8A86C](*a2);
  v9 = MEMORY[0x1E0C812F8];
  if (v8 != MEMORY[0x1E0C812F8])
  {
    v10 = 0;
    goto LABEL_3;
  }
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB030]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  *(_OWORD *)v36 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v37 = v32.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(object);
  v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB550]);
  objecta = v13;
  if (v13)
    xpc_retain(v13);
  else
    objecta = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
  *(_OWORD *)v34 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v35 = v32.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(objecta);
  v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB6A8]);
  objectb = v14;
  if (v14)
    xpc_retain(v14);
  else
    objectb = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
    operator delete(string.__r_.__value_.__l.__data_);
  string = v32;
  xpc_release(objectb);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB248]))
    {
      if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB198]))
      {
        if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB190]))
        {
          v22 = (char *)*MEMORY[0x1E0CFB048];
          if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB048]))
          {
            v22 = (char *)*MEMORY[0x1E0CFB0A0];
            if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB0A0]))
            {
              v22 = (char *)*MEMORY[0x1E0CFB098];
              v23 = (const char *)v36;
              v24 = (const char *)v36;
LABEL_56:
              if (strcasecmp(v24, v22))
              {
                v22 = (char *)*MEMORY[0x1E0CFAFC0];
                if (strcasecmp(v23, (const char *)*MEMORY[0x1E0CFAFC0]))
                {
                  v10 = 0;
                  goto LABEL_3;
                }
              }
              goto LABEL_74;
            }
          }
          goto LABEL_74;
        }
LABEL_64:
        v27 = prop::systemlogs::get((char *)v34, (uint64_t)&string);
        goto LABEL_69;
      }
      goto LABEL_60;
    }
LABEL_59:
    v27 = prop::compression::get((char *)v34, (uint64_t)&string);
LABEL_69:
    v10 = v27;
    goto LABEL_3;
  }
  v23 = v36[0];
  if (!strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB248]))
    goto LABEL_59;
  if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB198]))
  {
    if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB190]))
    {
      v22 = (char *)*MEMORY[0x1E0CFB048];
      if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB048]))
      {
        v22 = (char *)*MEMORY[0x1E0CFB0A0];
        if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB0A0]))
        {
          v22 = (char *)*MEMORY[0x1E0CFB098];
          v24 = v36[0];
          goto LABEL_56;
        }
      }
LABEL_74:
      std::string::basic_string[abi:ne180100]<0>(&__p, v22);
      v10 = prop::get((char *)&__p, (char *)v34, (uint64_t)&string);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_3;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (v35 >= 0)
    v25 = v34;
  else
    v25 = (void **)v34[0];
  v26 = (TapToRadar *)strcasecmp((const char *)v25, (const char *)*MEMORY[0x1E0CFB028]);
  if ((_DWORD)v26)
  {
    v27 = prop::ttr::get((char *)v34, (uint64_t)&string);
    goto LABEL_69;
  }
  Mode = TapToRadar::getMode(v26);
  util::to_str<int>(&__p, Mode);
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
    operator delete(string.__r_.__value_.__l.__data_);
  string = __p;
  v10 = 1;
LABEL_3:
  if (MEMORY[0x1C3B8A86C](*a3) != v9)
    goto LABEL_22;
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!string.__r_.__value_.__l.__size_)
      goto LABEL_22;
    p_string = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&string.__r_.__value_.__s + 23))
      goto LABEL_22;
    p_string = &string;
  }
  v15 = xpc_string_create((const char *)p_string);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFB6A8], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
LABEL_22:
  if (!v10)
  {
    *a4 = -534716416;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
LABEL_33:
    if (SHIBYTE(v35) < 0)
      goto LABEL_38;
    goto LABEL_34;
  }
  v17 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *a4 = 0;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  v18 = v36;
  if (v37 < 0)
    v18 = (char **)v36[0];
  v19 = v34;
  if (v35 < 0)
    v19 = (void **)v34[0];
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
  v20 = &string;
  if ((string.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)string.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"get";
  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
  HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
  v39 = v19;
  v40 = 2080;
  v41 = v20;
  _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I Internal %s trace property: %s, %s = %s", (uint8_t *)&__p, 0x2Au);
  *a4 = 0;
  if ((SHIBYTE(string.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_33;
LABEL_37:
  operator delete(string.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
  {
LABEL_38:
    operator delete(v34[0]);
    if (SHIBYTE(v37) < 0)
      goto LABEL_39;
    return v10;
  }
LABEL_34:
  if (SHIBYTE(v37) < 0)
LABEL_39:
    operator delete(v36[0]);
  return v10;
}

void sub_1BF47BE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(a20);
  if ((a32 & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(a27);
  goto LABEL_7;
}

double util::to_str<int>(std::string *a1, int __val)
{
  double result;
  std::string v4;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1BF47C000(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF47BFF0);
}

void sub_1BF47C00C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void LogTracker::getLoggingConfig(xpc_object_t *a1@<X8>)
{
  char *v3;
  std::string *v4;
  __int128 v5;
  unsigned int v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::value_type *v10;
  std::string::size_type size;
  std::string::size_type v12;
  const void *v13;
  void *v14;
  CFTypeID v15;
  const void *v16;
  void *v17;
  std::string v18;
  std::string::value_type __s[23];
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;

  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = xmmword_1BF53F3C0;
  strcpy(v21.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/ABMHelper.framework/");
  v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "com.apple.commcenter.logconfig");
  v4 = std::string::append(&v21, v3, 0x1EuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (config::hw::watch((config::hw *)v4))
  {
    strcpy(__s, ".watchos");
    v6 = 8;
  }
  else
  {
    strcpy(__s, ".ios");
    v6 = 4;
  }
  v20 = v6;
  v7 = std::string::append(&v22, __s, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v23, ".plist", 6uLL);
  v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  size = v9->__r_.__value_.__l.__size_;
  v12 = v9->__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    operator delete(v3);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_9;
LABEL_14:
    std::string::__init_copy_ctor_external(&v18, v10, size);
    goto LABEL_15;
  }
LABEL_12:
  operator delete(v22.__r_.__value_.__l.__data_);
  operator delete(v3);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
LABEL_8:
  if ((v12 & 0x8000000000000000) != 0)
    goto LABEL_14;
LABEL_9:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  v18.__r_.__value_.__l.__size_ = size;
  v18.__r_.__value_.__r.__words[2] = v12;
LABEL_15:
  util::readPlistToCFDictionary((uint64_t)&v18, &v22);
  v14 = (void *)v22.__r_.__value_.__r.__words[0];
  if (!v22.__r_.__value_.__r.__words[0]
    || (v15 = CFGetTypeID(v22.__r_.__value_.__l.__data_), v15 != CFDictionaryGetTypeID()))
  {
    v14 = 0;
    v23.__r_.__value_.__r.__words[0] = 0;
    v16 = (const void *)v22.__r_.__value_.__r.__words[0];
    if (!v22.__r_.__value_.__r.__words[0])
      goto LABEL_21;
    goto LABEL_20;
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  CFRetain(v14);
  v16 = (const void *)v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__r.__words[0])
LABEL_20:
    CFRelease(v16);
LABEL_21:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::cf_to_xpc((ctu *)v14, v13);
  v17 = (void *)v22.__r_.__value_.__r.__words[0];
  *a1 = (xpc_object_t)v22.__r_.__value_.__r.__words[0];
  if (v17 && MEMORY[0x1C3B8A86C](v17) == MEMORY[0x1E0C812F8])
    xpc_retain(v17);
  else
    *a1 = xpc_null_create();
  xpc_release(v22.__r_.__value_.__l.__data_);
  if (v14)
    CFRelease(v14);
  if ((v12 & 0x8000000000000000) != 0)
    operator delete(v10);
}

void sub_1BF47C2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  uint64_t v34;

  if (v34 < 0)
    operator delete(v33);
  _Unwind_Resume(exception_object);
}

void LogTracker::checkLoggingVersion_sync(NSObject **this)
{
  const void *v2;
  size_t v3;
  size_t v4;
  __int128 *p_dst;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  xpc_object_t value;
  NSObject *v16;
  const char *v17;
  int v18;
  size_t v19;
  size_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  capabilities::radio *v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const char *v40;
  xpc_object_t v41;
  void **v42;
  xpc_object_t v43;
  const char *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  xpc_object_t v52;
  void *aBlock;
  xpc_object_t v54;
  char v55[24];
  xpc_object_t object;
  int v57;
  void *__p[2];
  unint64_t v59;
  std::string v60;
  int v61;
  xpc_object_t xdict;
  __int128 __dst;
  _QWORD v64[4];

  v64[3] = *MEMORY[0x1E0C80C00];
  if (!capabilities::trace::allowed((capabilities::trace *)this))
    return;
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  LogTracker::getLoggingConfig(&xdict);
  v61 = 0;
  memset(&v60, 0, sizeof(v60));
  v2 = (const void *)*MEMORY[0x1E0CFB098];
  v3 = strlen((const char *)*MEMORY[0x1E0CFB098]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (__int128 *)operator new(v6 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v64[0] = v7 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v64[0]) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_9:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v8 = (const void *)*MEMORY[0x1E0CFB938];
  v9 = strlen((const char *)*MEMORY[0x1E0CFB938]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    __p[1] = v10;
    v59 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_17;
  }
  HIBYTE(v59) = v9;
  v11 = __p;
  if (v9)
LABEL_17:
    memmove(v11, v8, (size_t)v10);
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  v14 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
  if (SHIBYTE(v59) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
    {
LABEL_20:
      if (v14)
        goto LABEL_21;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete((void *)__dst);
  if (v14)
  {
LABEL_21:
    util::convert<int>(&v60, &v61, 0);
    value = xpc_dictionary_get_value(xdict, "LoggingConfigVersion");
    *(_QWORD *)&__dst = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)&__dst = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_release((xpc_object_t)__dst);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      *v60.__r_.__value_.__l.__data_ = 0;
      v60.__r_.__value_.__l.__size_ = 0;
      v57 = 0;
      v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_30:
        v20 = v19;
        if (v19 >= 0x17)
        {
          v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v22 = v19 | 7;
          v23 = v22 + 1;
          v21 = (__int128 *)operator new(v22 + 1);
          *((_QWORD *)&__dst + 1) = v20;
          v64[0] = v23 | 0x8000000000000000;
          *(_QWORD *)&__dst = v21;
        }
        else
        {
          HIBYTE(v64[0]) = v19;
          v21 = &__dst;
          if (!v19)
          {
LABEL_37:
            *((_BYTE *)v21 + v20) = 0;
            v24 = (const char *)*MEMORY[0x1E0CFB7D0];
            v25 = strlen((const char *)*MEMORY[0x1E0CFB7D0]);
            if (v25 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v26 = (void *)v25;
            if (v25 >= 0x17)
            {
              v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17)
                v28 = v25 | 7;
              v29 = v28 + 1;
              v27 = operator new(v28 + 1);
              __p[1] = v26;
              v59 = v29 | 0x8000000000000000;
              __p[0] = v27;
            }
            else
            {
              HIBYTE(v59) = v25;
              v27 = __p;
              if (!v25)
              {
LABEL_45:
                *((_BYTE *)v26 + (_QWORD)v27) = 0;
                v30 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
                if (SHIBYTE(v59) < 0)
                {
                  operator delete(__p[0]);
                  if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                  {
LABEL_47:
                    if (v30)
                    {
LABEL_48:
                      v31 = (capabilities::radio *)util::convert<int>(&v60, &v57, 0);
                      v32 = capabilities::radio::product(v31);
                      v33 = this[11];
                      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_QWORD *)&__dst = __PAIR64__(v61, 67109888);
                        WORD4(__dst) = 1024;
                        *(_DWORD *)((char *)&__dst + 10) = v18;
                        HIWORD(__dst) = 1024;
                        LODWORD(v64[0]) = v57;
                        WORD2(v64[0]) = 1024;
                        *(_DWORD *)((char *)v64 + 6) = v32;
                        _os_log_impl(&dword_1BF335000, v33, OS_LOG_TYPE_DEFAULT, "#I Stored Logging Version: %d, Default Logging Version: %d, Stored Product ID: %d, Current Product ID: %d", (uint8_t *)&__dst, 0x1Au);
                      }
                      if (v61 < v18 || v57 != v32)
                      {
                        v34 = this[11];
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__dst) = 0;
                          _os_log_impl(&dword_1BF335000, v34, OS_LOG_TYPE_DEFAULT, "#I Updating Log Configuration", (uint8_t *)&__dst, 2u);
                        }
                        object = xdict;
                        if (xdict)
                          xpc_retain(xdict);
                        else
                          object = xpc_null_create();
                        v55[23] = 13;
                        strcpy(v55, "Not Specified");
                        LogTracker::updateLoggingSettings_sync(this, 2, &object, (uint64_t)v55);
                        xpc_release(object);
                        object = 0;
                        v35 = xpc_dictionary_create(0, 0, 0);
                        if (v35 || (v35 = xpc_null_create()) != 0)
                        {
                          if (MEMORY[0x1C3B8A86C](v35) == MEMORY[0x1E0C812F8])
                          {
                            xpc_retain(v35);
                            v36 = v35;
                          }
                          else
                          {
                            v36 = xpc_null_create();
                          }
                        }
                        else
                        {
                          v36 = xpc_null_create();
                          v35 = 0;
                        }
                        xpc_release(v35);
                        v37 = xpc_string_create((const char *)v2);
                        if (!v37)
                          v37 = xpc_null_create();
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CFB030], v37);
                        v38 = xpc_null_create();
                        xpc_release(v37);
                        xpc_release(v38);
                        v39 = xpc_string_create((const char *)v8);
                        if (!v39)
                          v39 = xpc_null_create();
                        v40 = (const char *)*MEMORY[0x1E0CFB550];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CFB550], v39);
                        v41 = xpc_null_create();
                        xpc_release(v39);
                        xpc_release(v41);
                        __p[0] = 0;
                        __p[1] = 0;
                        v59 = 0;
                        std::to_string((std::string *)&__dst, v18);
                        *(_OWORD *)__p = __dst;
                        v59 = v64[0];
                        if (v64[0] >= 0)
                          v42 = __p;
                        else
                          v42 = (void **)__p[0];
                        v43 = xpc_string_create((const char *)v42);
                        if (!v43)
                          v43 = xpc_null_create();
                        v44 = (const char *)*MEMORY[0x1E0CFB6A8];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CFB6A8], v43);
                        v45 = xpc_null_create();
                        xpc_release(v43);
                        xpc_release(v45);
                        if (SHIBYTE(v59) < 0)
                          operator delete(__p[0]);
                        v54 = v36;
                        if (v36)
                          xpc_retain(v36);
                        else
                          v54 = xpc_null_create();
                        aBlock = 0;
                        LogTracker::setProperty_sync(this, &v54, (uint64_t *)&aBlock);
                        if (aBlock)
                          _Block_release(aBlock);
                        xpc_release(v54);
                        v54 = 0;
                        v46 = xpc_string_create(v24);
                        if (!v46)
                          v46 = xpc_null_create();
                        xpc_dictionary_set_value(v36, v40, v46);
                        v47 = xpc_null_create();
                        xpc_release(v46);
                        xpc_release(v47);
                        __p[0] = 0;
                        __p[1] = 0;
                        v59 = 0;
                        std::to_string((std::string *)&__dst, v32);
                        *(_OWORD *)__p = __dst;
                        v59 = v64[0];
                        if (v64[0] >= 0)
                          v48 = __p;
                        else
                          v48 = (void **)__p[0];
                        v49 = xpc_string_create((const char *)v48);
                        if (!v49)
                          v49 = xpc_null_create();
                        xpc_dictionary_set_value(v36, v44, v49);
                        v50 = xpc_null_create();
                        xpc_release(v49);
                        xpc_release(v50);
                        if (SHIBYTE(v59) < 0)
                          operator delete(__p[0]);
                        v52 = v36;
                        if (v36)
                          xpc_retain(v36);
                        else
                          v52 = xpc_null_create();
                        v51 = 0;
                        LogTracker::setProperty_sync(this, &v52, (uint64_t *)&v51);
                        if (v51)
                          _Block_release(v51);
                        xpc_release(v52);
                        v52 = 0;
                        xpc_release(v36);
                      }
                      goto LABEL_101;
                    }
LABEL_60:
                    v16 = this[11];
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__dst) = 0;
                      v17 = "Failed to get stored Device ID";
                      goto LABEL_62;
                    }
                    goto LABEL_101;
                  }
                }
                else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                {
                  goto LABEL_47;
                }
                operator delete((void *)__dst);
                if (v30)
                  goto LABEL_48;
                goto LABEL_60;
              }
            }
            memmove(v27, v24, (size_t)v26);
            goto LABEL_45;
          }
        }
        memmove(v21, v2, v20);
        goto LABEL_37;
      }
    }
    else
    {
      v60.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v60.__r_.__value_.__s + 23) = 0;
      v57 = 0;
      v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_30;
    }
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_25:
  v16 = this[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst) = 0;
    v17 = "Failed to get stored version";
LABEL_62:
    _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&__dst, 2u);
  }
LABEL_101:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  xpc_release(xdict);
}

void sub_1BF47CC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *a12, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,xpc_object_t a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::updateLoggingSettings_sync(_QWORD *a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  std::string *v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  LogTracker *v18;
  _BOOL8 isDefaultCarrierProfileInstalled;
  int v20;
  NSObject *v22;
  const char *v23;
  BOOL v24;
  char v25;
  xpc_object_t v26;
  xpc_object_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  NSObject *v38;
  unsigned __int8 v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  unint64_t v48;
  void *v50;
  NSObject *v51;
  xpc_object_t v52;
  std::__shared_weak_count *v53;
  _QWORD aBlock[6];
  std::__shared_weak_count *v55;
  std::string __p;
  void *v57;
  dispatch_object_t object;
  std::string v59;
  _QWORD applier[5];
  std::string v61;
  xpc_object_t v62;
  std::string v63;
  int v64;
  uint8_t buf[8];
  uint64_t v66;
  void (*v67)(uint64_t);
  void *v68;
  __int128 *v69;

  v8 = MEMORY[0x1C3B8A86C](*a3);
  v9 = MEMORY[0x1E0C812F8];
  if (v8 != MEMORY[0x1E0C812F8])
  {
    LogTracker::getLoggingConfig((xpc_object_t *)buf);
    v10 = *(_QWORD *)buf;
    v11 = xpc_null_create();
    v12 = (void *)*a3;
    *a3 = v10;
    xpc_release(v12);
    xpc_release(v11);
  }
  v64 = a2;
  memset(&v63, 170, sizeof(v63));
  LogTracker::validateSelectedConfig_sync((uint64_t)a1, &v64, &v63);
  v62 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v63;
  else
    v13 = (std::string *)v63.__r_.__value_.__r.__words[0];
  *(_QWORD *)buf = a3;
  v66 = (uint64_t)v13;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &v62);
  v14 = v62;
  v15 = MEMORY[0x1E0C809B0];
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke;
  applier[3] = &__block_descriptor_64_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = a1;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v61 = *(std::string *)a4;
  xpc_dictionary_apply(v14, applier);
  if (!TelephonyUtilIsCarrierBuild() || (TelephonyUtilIsInternalBuild() & 1) != 0)
  {
LABEL_82:
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_83;
  }
  memset(&v59, 0, sizeof(v59));
  v16 = xpc_dictionary_create(0, 0, 0);
  if (v16 || (v16 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v16) == v9)
    {
      xpc_retain(v16);
      v17 = v16;
    }
    else
    {
      v17 = xpc_null_create();
    }
  }
  else
  {
    v17 = xpc_null_create();
    v16 = 0;
  }
  xpc_release(v16);
  isDefaultCarrierProfileInstalled = LogTracker::isDefaultCarrierProfileInstalled(v18);
  v20 = v64;
  if (v64 == 1 && isDefaultCarrierProfileInstalled)
  {
    std::string::__assign_external(&v59, (const std::string::value_type *)*MEMORY[0x1E0CF1138]);
    v22 = a1[11];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v23 = "#D Uninstall a profile";
      goto LABEL_90;
    }
LABEL_30:
    v28 = (std::__shared_weak_count *)a1[16];
    if (!v28)
      goto LABEL_91;
    goto LABEL_31;
  }
  v24 = LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)isDefaultCarrierProfileInstalled);
  v25 = v20 != 2 || v24;
  if ((v25 & 1) != 0)
    goto LABEL_81;
  v26 = xpc_BOOL_create(1);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1188], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  std::string::__assign_external(&v59, (const std::string::value_type *)*MEMORY[0x1E0CF1120]);
  v22 = a1[11];
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    goto LABEL_30;
  *(_WORD *)buf = 0;
  v23 = "#D Install a profile";
LABEL_90:
  _os_log_debug_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEBUG, v23, buf, 2u);
  v28 = (std::__shared_weak_count *)a1[16];
  if (!v28)
LABEL_91:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_31:
  v29 = a1[15];
  v30 = std::__shared_weak_count::lock(v28);
  if (!v30)
    goto LABEL_91;
  v31 = v30;
  p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v31);
  }
  v57 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = v15;
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_43;
  aBlock[3] = &__block_descriptor_80_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v29;
  v55 = v31;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    __p = v59;
  v37 = _Block_copy(aBlock);
  v38 = a1[17];
  if (v38)
    dispatch_retain(v38);
  v57 = v37;
  object = v38;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)buf = v15;
  v66 = 0x40000000;
  v67 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v68 = &__block_descriptor_tmp_13_2;
  v69 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v40 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_50;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v40 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_50;
  }
  v41 = (unint64_t *)(v40 + 8);
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
LABEL_50:
  abm::HelperClient::create();
  if (v53)
  {
    v43 = (unint64_t *)&v53->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v45 = xpc_string_create((const char *)*MEMORY[0x1E0CF11B8]);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1040], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v52 = v17;
  if (v17)
  {
    xpc_retain(v17);
    v47 = v57;
    if (!v57)
      goto LABEL_62;
    goto LABEL_61;
  }
  v52 = xpc_null_create();
  v47 = v57;
  if (v57)
LABEL_61:
    v47 = _Block_copy(v47);
LABEL_62:
  v50 = v47;
  v51 = object;
  if (object)
    dispatch_retain(object);
  abm::HelperClient::perform();
  if (v51)
    dispatch_release(v51);
  if (v50)
    _Block_release(v50);
  xpc_release(v52);
  do
    v48 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v48 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v48)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (object)
    dispatch_release(object);
  if (v57)
    _Block_release(v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v55)
    std::__shared_weak_count::__release_weak(v55);
  std::__shared_weak_count::__release_weak(v31);
LABEL_81:
  xpc_release(v17);
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_82;
  operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
LABEL_83:
    operator delete(v61.__r_.__value_.__l.__data_);
LABEL_84:
  xpc_release(v62);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BF47D518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;

  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v49);
  xpc_release(v48);
  if (a37 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  xpc_release(*(xpc_object_t *)(v50 - 168));
  if (*(char *)(v50 - 137) < 0)
    operator delete(*(void **)(v50 - 160));
  _Unwind_Resume(a1);
}

void LogTracker::setProperty_sync(_QWORD *a1, xpc_object_t *a2, uint64_t *a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t value;
  xpc_object_t v10;
  xpc_object_t v11;
  char isSupported;
  char v13;
  xpc_object_t v14;
  xpc_object_t v15;
  const object *v16;
  _BOOL4 isInternalProperty_sync;
  int v18;
  uint64_t v19;
  xpc_object_t v20;
  uint64_t v21;
  xpc_object_t v22;
  void *v23;
  CFTypeID v24;
  const void *v25;
  const void *v26;
  size_t v27;
  void *v28;
  void **v29;
  xpc_object_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  std::string *v37;
  const void *v38;
  size_t v39;
  size_t v40;
  __int128 *p_buf;
  uint64_t v42;
  uint64_t v43;
  xpc_object_t v44;
  void *v45;
  void *v46;
  _QWORD v47[4];
  void *v48;
  const void *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v55;
  xpc_object_t v56;
  std::string v57;
  xpc_object_t v58;
  xpc_object_t object[3];
  xpc_object_t v60[3];
  std::string v61;
  void *v62;
  __int128 buf;
  unint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    v62 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v62 = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v8 = xpc_null_create();
LABEL_8:
  v62 = v8;
LABEL_9:
  xpc_release(v7);
  memset(&v61, 170, sizeof(v61));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB030]);
  v60[0] = value;
  if (value)
    xpc_retain(value);
  else
    v60[0] = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v60[0]);
  memset(v60, 170, sizeof(v60));
  v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB550]);
  object[0] = v10;
  if (v10)
    xpc_retain(v10);
  else
    object[0] = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB6A8]);
  v58 = v11;
  if (v11)
    xpc_retain(v11);
  else
    v58 = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v58);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v57, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v57 = v61;
  isSupported = abm::trace::isSupported();
  v13 = isSupported;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v13 & 1) != 0)
    {
LABEL_23:
      LODWORD(v58) = -534716416;
      v14 = *a2;
      v51 = v14;
      if (v14)
      {
        xpc_retain(v14);
      }
      else
      {
        v14 = xpc_null_create();
        v51 = v14;
      }
      isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)a1, &v51, &v62, &v58);
      xpc_release(v14);
      v51 = 0;
      if (isInternalProperty_sync)
      {
        if (*a3)
          dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a3, (unsigned int *)&v58, &v62);
        goto LABEL_89;
      }
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 88))(a1))
      {
        v18 = prop::set((char *)&v61, (char *)v60, (char *)object);
        if (*a3)
        {
          if (v18)
            v19 = 0;
          else
            v19 = 3760250880;
          v20 = xpc_null_create();
          v21 = *a3;
          *(_QWORD *)&buf = v20;
          v22 = xpc_null_create();
          (*(void (**)(uint64_t, uint64_t, __int128 *))(v21 + 16))(v21, v19, &buf);
          xpc_release((xpc_object_t)buf);
          xpc_release(v22);
        }
        goto LABEL_89;
      }
      v38 = (const void *)*MEMORY[0x1E0CFBEE0];
      v39 = strlen((const char *)*MEMORY[0x1E0CFBEE0]);
      if (v39 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v40 = v39;
      if (v39 >= 0x17)
      {
        v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17)
          v42 = v39 | 7;
        v43 = v42 + 1;
        p_buf = (__int128 *)operator new(v42 + 1);
        *((_QWORD *)&buf + 1) = v40;
        v64 = v43 | 0x8000000000000000;
        *(_QWORD *)&buf = p_buf;
      }
      else
      {
        HIBYTE(v64) = v39;
        p_buf = &buf;
        if (!v39)
          goto LABEL_78;
      }
      memmove(p_buf, v38, v40);
LABEL_78:
      *((_BYTE *)p_buf + v40) = 0;
      v44 = *a2;
      v50 = v44;
      if (v44)
      {
        xpc_retain(v44);
      }
      else
      {
        v44 = xpc_null_create();
        v50 = v44;
      }
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 3321888768;
      v47[2] = ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
      v47[3] = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      v45 = (void *)*a3;
      if (*a3)
        v45 = _Block_copy(v45);
      v48 = v45;
      v46 = _Block_copy(v47);
      v49 = v46;
      Service::runCommand((uint64_t)a1, (uint64_t)&buf, &v50, &v49);
      if (v46)
        _Block_release(v46);
      xpc_release(v44);
      v50 = 0;
      if (SHIBYTE(v64) < 0)
        operator delete((void *)buf);
      if (v48)
        _Block_release(v48);
      goto LABEL_89;
    }
  }
  else if ((isSupported & 1) != 0)
  {
    goto LABEL_23;
  }
  v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v15 = *a2;
  v56 = v15;
  if (v15)
    xpc_retain(v15);
  else
    v56 = xpc_null_create();
  xpc::bridge((xpc *)&v56, v16);
  v23 = (void *)buf;
  if (!(_QWORD)buf || (v24 = CFGetTypeID((CFTypeRef)buf), v24 != CFDictionaryGetTypeID()))
  {
    v58 = 0;
    v25 = (const void *)buf;
    if (!(_QWORD)buf)
      goto LABEL_45;
    goto LABEL_44;
  }
  v58 = v23;
  CFRetain(v23);
  v25 = (const void *)buf;
  if ((_QWORD)buf)
LABEL_44:
    CFRelease(v25);
LABEL_45:
  xpc_release(v56);
  v26 = (const void *)*MEMORY[0x1E0CFB9B8];
  v27 = strlen((const char *)*MEMORY[0x1E0CFB9B8]);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    v29 = (void **)operator new(v31 + 1);
    __dst[1] = v28;
    v55 = v32 | 0x8000000000000000;
    __dst[0] = v29;
LABEL_53:
    memmove(v29, v26, (size_t)v28);
    *((_BYTE *)v28 + (_QWORD)v29) = 0;
    v30 = v58;
    cf = v58;
    if (!v58)
      goto LABEL_55;
    goto LABEL_54;
  }
  HIBYTE(v55) = v27;
  v29 = __dst;
  if (v27)
    goto LABEL_53;
  LOBYTE(__dst[0]) = 0;
  v30 = v58;
  cf = v58;
  if (v58)
LABEL_54:
    CFRetain(v30);
LABEL_55:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst[0]);
    v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
LABEL_61:
      if (!*a3)
        goto LABEL_63;
      goto LABEL_62;
    }
  }
  else
  {
    v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      goto LABEL_61;
  }
  v37 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v37;
  _os_log_debug_impl(&dword_1BF335000, v33, OS_LOG_TYPE_DEBUG, "#D The property (%s) not supported in setting", (uint8_t *)&buf, 0xCu);
  if (!*a3)
    goto LABEL_63;
LABEL_62:
  v34 = xpc_null_create();
  v35 = *a3;
  *(_QWORD *)&buf = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, __int128 *))(v35 + 16))(v35, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v36);
LABEL_63:
  if (v30)
    CFRelease(v30);
LABEL_89:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_94:
    operator delete(v60[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
LABEL_95:
    operator delete(v61.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  operator delete(object[0]);
  if (SHIBYTE(v60[2]) < 0)
    goto LABEL_94;
LABEL_91:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_95;
LABEL_92:
  xpc_release(v62);
}

void sub_1BF47DD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void LogTracker::validateSelectedConfig_sync(uint64_t a1@<X0>, _DWORD *a2@<X1>, std::string *a3@<X8>)
{
  const char *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const std::string::value_type *v12;
  NSObject *v13;
  uint8_t v14[16];

  memset(a3, 170, sizeof(std::string));
  v6 = (const char *)abm::helper::asString();
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    a3->__r_.__value_.__l.__size_ = v8;
    a3->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
LABEL_9:
    memmove(v9, v6, v8);
    *((_BYTE *)v9 + v8) = 0;
    if (*a2 != 5)
      return;
    goto LABEL_10;
  }
  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v7;
  v9 = a3;
  if (v7)
    goto LABEL_9;
  a3->__r_.__value_.__s.__data_[0] = 0;
  if (*a2 != 5)
    return;
LABEL_10:
  *a2 = 2;
  v12 = (const std::string::value_type *)abm::helper::asString();
  std::string::__assign_external(a3, v12);
  v13 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Update the logging config to Default as the requested logging config is not supported", v14, 2u);
  }
}

void sub_1BF47E13C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD applier[6];
  std::string __p;

  v5 = *(_QWORD *)(a1 + 32);
  if (object)
  {
    v6 = object;
    xpc_retain(object);
    goto LABEL_4;
  }
  v6 = xpc_null_create();
  if (v6)
  {
LABEL_4:
    if (MEMORY[0x1C3B8A86C](v6) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
    goto LABEL_8;
  }
  v7 = xpc_null_create();
  v6 = 0;
LABEL_8:
  xpc_release(v6);
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2;
  applier[3] = &__block_descriptor_72_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = v5;
  applier[5] = a2;
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  xpc_dictionary_apply(v7, applier);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v7);
  return 1;
}

void sub_1BF47E284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  xpc_release(v21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t a3)
{
  _QWORD *v6;
  NSObject *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v19;
  const char *v20;
  void *p_p;
  void *aBlock;
  xpc_object_t object;
  xpc_object_t v24;
  void *__p;
  char v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 32);
  v7 = v6[11];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a1 + 40);
    v24 = a3;
    if (a3)
      xpc_retain(a3);
    else
      v24 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v24, (const object *)"", v20);
    if (v26 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315650;
    v28 = v19;
    v29 = 2080;
    v30 = a2;
    v31 = 2080;
    v32 = p_p;
    _os_log_debug_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEBUG, "#D tracename: %s, traceKey: %s, traceValue: %s", buf, 0x20u);
    if (v26 < 0)
      operator delete(__p);
    xpc_release(v24);
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8 || (v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v8) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v8);
      v9 = v8;
    }
    else
    {
      v9 = xpc_null_create();
    }
  }
  else
  {
    v9 = xpc_null_create();
    v8 = 0;
  }
  xpc_release(v8);
  v10 = xpc_string_create(*(const char **)(a1 + 40));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB030], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_string_create(a2);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB550], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  if (a3)
    xpc_retain(a3);
  else
    a3 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB6A8], a3);
  v14 = xpc_null_create();
  xpc_release(a3);
  xpc_release(v14);
  v15 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v15 = *(const char **)v15;
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFBF88], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  aBlock = 0;
  LogTracker::setProperty_sync(v6, &object, (uint64_t *)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  object = 0;
  xpc_release(v9);
  return 1;
}

void sub_1BF47E5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_43(uint64_t a1, int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *a2;
        v12 = *(NSObject **)(v5 + 88);
        if (v11)
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v13 = (_QWORD *)(a1 + 56);
            if (*(char *)(a1 + 79) < 0)
              v13 = (_QWORD *)*v13;
            v15 = 136315138;
            v16 = v13;
            _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Failed to %s", (uint8_t *)&v15, 0xCu);
          }
        }
        else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v14 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v14 = (_QWORD *)*v14;
          v15 = 136315138;
          v16 = v14;
          _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D Succeeded to %s", (uint8_t *)&v15, 0xCu);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF47E8D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;

  v5 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v3 = (uint64_t *)(a1 + 32);
  if (v4)
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v3, &v5, a3);
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7907DB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7907DB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF47EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF47EC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7907DF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF47ED80(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF47EDA0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7907DB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7907DB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  dispatch_group_t v4;
  NSObject *v5;
  const char *v6;
  dispatch_group_t v7;
  NSObject *v8;
  BOOL v9;
  const char *v10;
  void *v11;
  const char *v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  std::locale::__imp *p_dst;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  const void *v39;
  size_t v40;
  size_t v41;
  std::locale::__imp *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  NSObject *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const char **v63;
  const char **v64;
  const void *v65;
  size_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  size_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  NSObject *v80;
  const char *v81;
  const char *v82;
  const void *v83;
  size_t v84;
  size_t v85;
  void *p_p;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_weak_owners;
  unint64_t v91;
  void *v92;
  const void *v93;
  size_t v94;
  size_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  const void *v103;
  size_t v104;
  size_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  const void *v113;
  size_t v114;
  size_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  const void *v123;
  size_t v124;
  size_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  NSObject *v136;
  NSObject *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  _QWORD *v143;
  NSObject *object;
  void *v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  const void *v159;
  void *v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  const void *v167;
  void *v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  const void *v175;
  void *__p;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  const void *v183;
  const void *v184;
  std::locale __dst;
  size_t v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  unint64_t v190;
  void *v191[2];
  unint64_t v192;
  std::string buf;
  void *v194;
  __int128 *v195;
  std::__shared_weak_count *v196;
  xpc_object_t v197;
  void *v198;
  dispatch_object_t v199;
  xpc_object_t v200;
  dispatch_object_t v201;
  xpc_object_t v202;
  _QWORD aBlock[5];
  dispatch_group_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  __int128 v207;
  _BYTE v208[24];
  void *v209;
  uint64_t v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;

  v1 = a1;
  v213 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*a1;
  v3 = *(_QWORD *)(*a1 + 16);
  LogTracker::checkLoggingVersion_sync((NSObject **)v3);
  v4 = dispatch_group_create();
  v5 = *(NSObject **)(v3 + 176);
  *(_QWORD *)(v3 + 176) = v4;
  if (v5)
    dispatch_release(v5);
  v7 = dispatch_group_create();
  v8 = *(NSObject **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v7;
  if (v8)
    dispatch_release(v8);
  *(_BYTE *)(v3 + 216) = 0;
  v9 = prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v6);
  v11 = (void *)MEMORY[0x1E0C809B0];
  if (v9
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v10)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v12))
  {
    v143 = v1;
    memset(v208, 170, 16);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    buf.__r_.__value_.__l.__size_ = 0x40000000;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v194 = &__block_descriptor_tmp_13_2;
    v195 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v207 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_13;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &buf);
      v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v207 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_13;
    }
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
LABEL_13:
    abm::HelperClient::create();
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
    if (!*((_QWORD *)&v207 + 1))
      goto LABEL_17;
    v18 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
    }
    else
    {
LABEL_17:
      v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
LABEL_19:
        aBlock[0] = v11;
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
        aBlock[3] = &__block_descriptor_64_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
        aBlock[4] = v3;
        v21 = v2[3];
        v204 = v21;
        if (v21)
        {
          dispatch_retain(v21);
          if (v204)
            dispatch_group_enter(v204);
        }
        v205 = *(_QWORD *)v208;
        v206 = *(std::__shared_weak_count **)&v208[8];
        if (*(_QWORD *)&v208[8])
        {
          v22 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = _Block_copy(aBlock);
        v25 = *(NSObject **)(v3 + 136);
        if (v25)
          dispatch_retain(*(dispatch_object_t *)(v3 + 136));
        v26 = xpc_dictionary_create(0, 0, 0);
        if (v26 || (v26 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v26) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v26);
            v27 = v26;
          }
          else
          {
            v27 = xpc_null_create();
          }
        }
        else
        {
          v27 = xpc_null_create();
          v26 = 0;
        }
        xpc_release(v26);
        v28 = xpc_int64_create(5000);
        if (!v28)
          v28 = xpc_null_create();
        xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E0CF1008], v28);
        v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        v30 = (const void *)*MEMORY[0x1E0CFB028];
        v31 = strlen((const char *)*MEMORY[0x1E0CFB028]);
        object = v25;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v32 = v31;
        if (v31 >= 0x17)
        {
          v34 = v11;
          v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v35 = v31 | 7;
          v36 = v35 + 1;
          p_dst = (std::locale::__imp *)operator new(v35 + 1);
          v186 = v32;
          v187 = v36 | 0x8000000000000000;
          __dst.__locale_ = p_dst;
          v11 = v34;
        }
        else
        {
          HIBYTE(v187) = v31;
          p_dst = (std::locale::__imp *)&__dst;
          if (!v31)
          {
LABEL_45:
            *((_BYTE *)p_dst + v32) = 0;
            memset(&buf, 0, sizeof(buf));
            v37 = -1431655766;
            v38 = -1431655766;
            if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0))
                v38 = (int)__p;
              else
                v38 = -1431655766;
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v187) & 0x80000000) == 0)
                goto LABEL_51;
            }
            else if ((SHIBYTE(v187) & 0x80000000) == 0)
            {
              goto LABEL_51;
            }
            operator delete(__dst.__locale_);
LABEL_51:
            v39 = (const void *)*MEMORY[0x1E0CFB2D8];
            v40 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v142 = v24;
              v43 = v11;
              v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v44 = v40 | 7;
              v45 = v44 + 1;
              v42 = (std::locale::__imp *)operator new(v44 + 1);
              v186 = v41;
              v187 = v45 | 0x8000000000000000;
              __dst.__locale_ = v42;
              v11 = v43;
              v24 = v142;
            }
            else
            {
              HIBYTE(v187) = v40;
              v42 = (std::locale::__imp *)&__dst;
              if (!v40)
              {
LABEL_59:
                *((_BYTE *)v42 + v41) = 0;
                memset(&buf, 0, sizeof(buf));
                if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0))
                    v37 = (int)__p;
                  else
                    v37 = -1431655766;
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v187) & 0x80000000) == 0)
                  {
LABEL_65:
                    if (v38 != 4)
                    {
LABEL_76:
                      v200 = v27;
                      if (v27)
                      {
                        xpc_retain(v27);
                        v1 = v143;
                        if (v24)
                        {
LABEL_78:
                          v47 = _Block_copy(v24);
LABEL_81:
                          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
                          buf.__r_.__value_.__l.__size_ = (std::string::size_type)object;
                          if (object)
                            dispatch_retain(object);
                          abm::HelperClient::perform();
                          if (buf.__r_.__value_.__l.__size_)
                            dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
                          if (buf.__r_.__value_.__r.__words[0])
                            _Block_release(buf.__r_.__value_.__l.__data_);
                          xpc_release(v200);
                          v200 = 0;
LABEL_111:
                          xpc_release(v27);
                          if (object)
                            dispatch_release(object);
                          if (v24)
                            _Block_release(v24);
                          v57 = v206;
                          if (v206)
                          {
                            p_shared_owners = (unint64_t *)&v206->__shared_owners_;
                            do
                              v59 = __ldaxr(p_shared_owners);
                            while (__stlxr(v59 - 1, p_shared_owners));
                            if (!v59)
                            {
                              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                              std::__shared_weak_count::__release_weak(v57);
                            }
                          }
                          if (v204)
                          {
                            dispatch_group_leave(v204);
                            if (v204)
                              dispatch_release(v204);
                          }
                          v60 = *(std::__shared_weak_count **)&v208[8];
                          if (*(_QWORD *)&v208[8])
                          {
                            v61 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
                            do
                              v62 = __ldaxr(v61);
                            while (__stlxr(v62 - 1, v61));
                            if (!v62)
                            {
                              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                              std::__shared_weak_count::__release_weak(v60);
                            }
                          }
                          goto LABEL_128;
                        }
                      }
                      else
                      {
                        v1 = v143;
                        v200 = xpc_null_create();
                        if (v24)
                          goto LABEL_78;
                      }
                      v47 = 0;
                      goto LABEL_81;
                    }
LABEL_71:
                    if (v37 != 1)
                      goto LABEL_76;
                    v46 = *(NSObject **)(v3 + 88);
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1BF335000, v46, OS_LOG_TYPE_DEFAULT, "#N Cellular Logging was detected before initiating LogTracker. The service needs to be paused in boot-up.", (uint8_t *)&buf, 2u);
                    }
                    v202 = v27;
                    if (v27)
                      xpc_retain(v27);
                    else
                      v202 = xpc_null_create();
                    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
                    buf.__r_.__value_.__l.__size_ = 3321888768;
                    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_64;
                    v194 = &__block_descriptor_72_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
                    v195 = *(__int128 **)v208;
                    v196 = *(std::__shared_weak_count **)&v208[8];
                    v1 = v143;
                    if (*(_QWORD *)&v208[8])
                    {
                      v48 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
                      do
                        v49 = __ldxr(v48);
                      while (__stxr(v49 + 1, v48));
                    }
                    v197 = v27;
                    if (v27)
                    {
                      xpc_retain(v27);
                      if (v24)
                        goto LABEL_94;
                    }
                    else
                    {
                      v197 = xpc_null_create();
                      if (v24)
                      {
LABEL_94:
                        v198 = _Block_copy(v24);
                        v50 = object;
                        v199 = object;
                        if (!object)
                        {
LABEL_96:
                          v51 = v11;
                          v52 = _Block_copy(&buf);
                          v53 = *(NSObject **)(v3 + 136);
                          if (v53)
                            dispatch_retain(*(dispatch_object_t *)(v3 + 136));
                          v200 = v52;
                          v201 = v53;
                          abm::HelperClient::perform();
                          v11 = v51;
                          if (v201)
                            dispatch_release(v201);
                          if (v200)
                            _Block_release(v200);
                          xpc_release(v202);
                          v202 = 0;
                          if (v199)
                            dispatch_release(v199);
                          if (v198)
                            _Block_release(v198);
                          xpc_release(v197);
                          v197 = 0;
                          v54 = v196;
                          if (v196)
                          {
                            v55 = (unint64_t *)&v196->__shared_owners_;
                            do
                              v56 = __ldaxr(v55);
                            while (__stlxr(v56 - 1, v55));
                            if (!v56)
                            {
                              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                              std::__shared_weak_count::__release_weak(v54);
                            }
                          }
                          goto LABEL_111;
                        }
LABEL_95:
                        dispatch_retain(v50);
                        goto LABEL_96;
                      }
                    }
                    v198 = 0;
                    v50 = object;
                    v199 = object;
                    if (!object)
                      goto LABEL_96;
                    goto LABEL_95;
                  }
                }
                else if ((SHIBYTE(v187) & 0x80000000) == 0)
                {
                  goto LABEL_65;
                }
                operator delete(__dst.__locale_);
                if (v38 != 4)
                  goto LABEL_76;
                goto LABEL_71;
              }
            }
            memmove(v42, v39, v41);
            goto LABEL_59;
          }
        }
        memmove(p_dst, v30, v32);
        goto LABEL_45;
      }
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I ABM is initializing; reinit traces in helper",
      (uint8_t *)&buf,
      2u);
    goto LABEL_19;
  }
LABEL_128:
  v63 = (const char **)MEMORY[0x1E0D01A30];
  strlen((const char *)*MEMORY[0x1E0D01A30]);
  ctu::fs::create_directory();
  v64 = (const char **)MEMORY[0x1E0D01A48];
  v65 = (const void *)*MEMORY[0x1E0D01A48];
  v66 = strlen((const char *)*MEMORY[0x1E0D01A48]);
  if (v66 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_263;
  v67 = (void *)v66;
  if (v66 >= 0x17)
  {
    v69 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v69 = v66 | 7;
    v70 = v69 + 1;
    v68 = operator new(v69 + 1);
    v191[1] = v67;
    v192 = v70 | 0x8000000000000000;
    v191[0] = v68;
    goto LABEL_135;
  }
  HIBYTE(v192) = v66;
  v68 = v191;
  if (v66)
LABEL_135:
    memmove(v68, v65, (size_t)v67);
  *((_BYTE *)v67 + (_QWORD)v68) = 0;
  v71 = *v63;
  v72 = strlen(*v63);
  if (v72 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v73 = (void *)v72;
  if (v72 >= 0x17)
  {
    v75 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v72 | 7) != 0x17)
      v75 = v72 | 7;
    v76 = v75 + 1;
    v74 = operator new(v75 + 1);
    v189[1] = v73;
    v190 = v76 | 0x8000000000000000;
    v189[0] = v74;
  }
  else
  {
    HIBYTE(v190) = v72;
    v74 = v189;
    if (!v72)
      goto LABEL_144;
  }
  memmove(v74, v71, (size_t)v73);
LABEL_144:
  *((_BYTE *)v73 + (_QWORD)v74) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__dst, "[^\\.].*", 0);
  util::moveDirContent((const void **)v191, (uint64_t)v189, 1u, 1, (uint64_t)&__dst);
  v77 = v188;
  if (!v188)
    goto LABEL_148;
  v78 = (unint64_t *)&v188->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (v79)
  {
LABEL_148:
    std::locale::~locale(&__dst);
    if ((SHIBYTE(v190) & 0x80000000) == 0)
      goto LABEL_149;
LABEL_254:
    operator delete(v189[0]);
    if ((SHIBYTE(v192) & 0x80000000) == 0)
      goto LABEL_150;
    goto LABEL_255;
  }
  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
  std::__shared_weak_count::__release_weak(v77);
  std::locale::~locale(&__dst);
  if (SHIBYTE(v190) < 0)
    goto LABEL_254;
LABEL_149:
  if ((SHIBYTE(v192) & 0x80000000) == 0)
    goto LABEL_150;
LABEL_255:
  operator delete(v191[0]);
LABEL_150:
  strlen(*v64);
  ctu::fs::create_directory();
  v80 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    v81 = *v64;
    v82 = *v63;
    *(_DWORD *)v208 = 136315394;
    *(_QWORD *)&v208[4] = v81;
    *(_WORD *)&v208[12] = 2080;
    *(_QWORD *)&v208[14] = v82;
    _os_log_impl(&dword_1BF335000, v80, OS_LOG_TYPE_DEFAULT, "#I Moved %s/*/* -> %s/", v208, 0x16u);
  }
  v83 = (const void *)*MEMORY[0x1E0CFBAB0];
  v84 = strlen((const char *)*MEMORY[0x1E0CFBAB0]);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
LABEL_263:
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    p_p = operator new(v87 + 1);
    v177 = v85;
    v178 = v88 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_159;
  }
  HIBYTE(v178) = v84;
  p_p = &__p;
  if (v84)
LABEL_159:
    memmove(p_p, v83, v85);
  *((_BYTE *)p_p + v85) = 0;
  *(_QWORD *)v208 = v11;
  *(_QWORD *)&v208[8] = 3321888768;
  *(_QWORD *)&v208[16] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_67;
  v209 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v210 = v3;
  v211 = *v2;
  v89 = (std::__shared_weak_count *)v2[1];
  v212 = v89;
  if (v89)
  {
    p_shared_weak_owners = (unint64_t *)&v89->__shared_weak_owners_;
    do
      v91 = __ldxr(p_shared_weak_owners);
    while (__stxr(v91 + 1, p_shared_weak_owners));
  }
  v92 = _Block_copy(v208);
  v184 = v92;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v184);
  if (v92)
    _Block_release(v92);
  if (SHIBYTE(v178) < 0)
    operator delete(__p);
  v93 = (const void *)*MEMORY[0x1E0CFB888];
  v94 = strlen((const char *)*MEMORY[0x1E0CFB888]);
  if (v94 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v95 = v94;
  if (v94 >= 0x17)
  {
    v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v94 | 7) != 0x17)
      v97 = v94 | 7;
    v98 = v97 + 1;
    v96 = operator new(v97 + 1);
    v169 = v95;
    v170 = v98 | 0x8000000000000000;
    v168 = v96;
    goto LABEL_174;
  }
  HIBYTE(v170) = v94;
  v96 = &v168;
  if (v94)
LABEL_174:
    memmove(v96, v93, v95);
  *((_BYTE *)v96 + v95) = 0;
  __p = v11;
  v177 = 3321888768;
  v178 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_70;
  v179 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v180 = v3;
  v181 = *v2;
  v99 = (std::__shared_weak_count *)v2[1];
  v182 = v99;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_weak_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = _Block_copy(&__p);
  v183 = v102;
  Service::registerCommandHandler(v3, (uint64_t)&v168, &v183);
  if (v102)
    _Block_release(v102);
  if (SHIBYTE(v170) < 0)
    operator delete(v168);
  v103 = (const void *)*MEMORY[0x1E0CFB5F0];
  v104 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
  if (v104 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v105 = v104;
  if (v104 >= 0x17)
  {
    v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v107 = v104 | 7;
    v108 = v107 + 1;
    v106 = operator new(v107 + 1);
    v161 = v105;
    v162 = v108 | 0x8000000000000000;
    v160 = v106;
    goto LABEL_189;
  }
  HIBYTE(v162) = v104;
  v106 = &v160;
  if (v104)
LABEL_189:
    memmove(v106, v103, v105);
  *((_BYTE *)v106 + v105) = 0;
  v168 = v11;
  v169 = 3321888768;
  v170 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  v171 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v172 = v3;
  v173 = *v2;
  v109 = (std::__shared_weak_count *)v2[1];
  v174 = v109;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_weak_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v112 = _Block_copy(&v168);
  v175 = v112;
  Service::registerCommandHandler(v3, (uint64_t)&v160, &v175);
  if (v112)
    _Block_release(v112);
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v113 = (const void *)*MEMORY[0x1E0CFB890];
  v114 = strlen((const char *)*MEMORY[0x1E0CFB890]);
  if (v114 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v115 = v114;
  if (v114 >= 0x17)
  {
    v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v114 | 7) != 0x17)
      v117 = v114 | 7;
    v118 = v117 + 1;
    v116 = operator new(v117 + 1);
    v153 = v115;
    v154 = v118 | 0x8000000000000000;
    v152 = v116;
    goto LABEL_204;
  }
  HIBYTE(v154) = v114;
  v116 = &v152;
  if (v114)
LABEL_204:
    memmove(v116, v113, v115);
  *((_BYTE *)v116 + v115) = 0;
  v160 = v11;
  v161 = 3321888768;
  v162 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  v163 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v164 = v3;
  v165 = *v2;
  v119 = (std::__shared_weak_count *)v2[1];
  v166 = v119;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_weak_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  v122 = _Block_copy(&v160);
  v167 = v122;
  Service::registerCommandHandler(v3, (uint64_t)&v152, &v167);
  if (v122)
    _Block_release(v122);
  if (SHIBYTE(v154) < 0)
    operator delete(v152);
  v123 = (const void *)*MEMORY[0x1E0CFB880];
  v124 = strlen((const char *)*MEMORY[0x1E0CFB880]);
  if (v124 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v125 = v124;
  if (v124 >= 0x17)
  {
    v127 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v124 | 7) != 0x17)
      v127 = v124 | 7;
    v128 = v127 + 1;
    v126 = operator new(v127 + 1);
    v146 = v125;
    v147 = v128 | 0x8000000000000000;
    v145 = v126;
    goto LABEL_219;
  }
  HIBYTE(v147) = v124;
  v126 = &v145;
  if (v124)
LABEL_219:
    memmove(v126, v123, v125);
  *((_BYTE *)v126 + v125) = 0;
  v152 = v11;
  v153 = 3321888768;
  v154 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  v155 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v156 = v3;
  v157 = *v2;
  v129 = (std::__shared_weak_count *)v2[1];
  v158 = v129;
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_weak_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v132 = _Block_copy(&v152);
  v159 = v132;
  Service::registerCommandHandler(v3, (uint64_t)&v145, &v159);
  if (v132)
    _Block_release(v132);
  if (SHIBYTE(v147) < 0)
    operator delete(v145);
  dispatch_get_global_queue(0, 0);
  v145 = v11;
  v146 = 3321888768;
  v147 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  v148 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e103___os_state_data_s_I___b32I__os_state_data_decoder_s__64c__64c___64c__0C__16__0__os_state_hints_s_I_II_8l;
  v149 = v3;
  v150 = *v2;
  v133 = (std::__shared_weak_count *)v2[1];
  v151 = v133;
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_weak_owners_;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  *(_QWORD *)(v3 + 200) = os_state_add_handler();
  if (v151)
    std::__shared_weak_count::__release_weak(v151);
  if (v158)
    std::__shared_weak_count::__release_weak(v158);
  if (v166)
    std::__shared_weak_count::__release_weak(v166);
  if (v174)
    std::__shared_weak_count::__release_weak(v174);
  if (v182)
    std::__shared_weak_count::__release_weak(v182);
  if (v212)
    std::__shared_weak_count::__release_weak(v212);
  v136 = v2[3];
  if (v136)
  {
    dispatch_group_leave(v136);
    v137 = v2[3];
    if (v137)
      dispatch_release(v137);
  }
  v138 = (std::__shared_weak_count *)v2[1];
  if (v138)
    std::__shared_weak_count::__release_weak(v138);
  operator delete(v2);
  v139 = (std::__shared_weak_count *)v1[2];
  if (v139)
  {
    v140 = (unint64_t *)&v139->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  operator delete(v1);
}

void sub_1BF4800A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Reinit traces complete", v2, 2u);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(NSObject **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(NSObject **)(a1 + 40);
    if (!v5)
      return;
  }
  dispatch_group_leave(v5);
  v6 = *(NSObject **)(a1 + 40);
  if (v6)
    dispatch_release(v6);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_64(_QWORD *a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *aBlock;
  NSObject *object;
  xpc_object_t v7;

  v2 = (void *)a1[6];
  v7 = v2;
  if (!v2)
  {
    v7 = xpc_null_create();
    v3 = (void *)a1[7];
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v2);
  v3 = (void *)a1[7];
  if (v3)
LABEL_5:
    v3 = _Block_copy(v3);
LABEL_6:
  v4 = a1[8];
  aBlock = v3;
  object = v4;
  if (v4)
    dispatch_retain(v4);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v7);
}

void sub_1BF4807C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (!v7)
  {
    a1[6] = xpc_null_create();
    v8 = (void *)a2[7];
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  xpc_retain(v7);
  v8 = (void *)a2[7];
  if (v8)
LABEL_8:
    v8 = _Block_copy(v8);
LABEL_9:
  v9 = a2[8];
  a1[7] = v8;
  a1[8] = v9;
  if (v9)
    dispatch_retain(v9);
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    _Block_release(v3);
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_67(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  unint64_t *v22;
  NSObject *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v13;
  v21 = xpc_null_create();
  v20[1] = v7;
  v20[2] = v15;
  v22 = (unint64_t *)&v19->__shared_owners_;
  v23 = v7[17];
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v23, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_70(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  unint64_t *v22;
  NSObject *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v13;
  v21 = xpc_null_create();
  v20[1] = v7;
  v20[2] = v15;
  v22 = (unint64_t *)&v19->__shared_owners_;
  v23 = v7[17];
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v23, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  xpc_object_t v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
LABEL_14:
    v15 = 0;
    v17 = a1[5];
    v16 = (std::__shared_weak_count *)a1[6];
    if (!v16)
      goto LABEL_17;
LABEL_15:
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    goto LABEL_17;
  }
  v13 = xpc_null_create();
  v14 = *a3;
  if (!*a3)
    goto LABEL_14;
LABEL_11:
  v15 = _Block_copy(v14);
  v17 = a1[5];
  v16 = (std::__shared_weak_count *)a1[6];
  if (v16)
    goto LABEL_15;
LABEL_17:
  v20 = (std::__shared_weak_count *)v7[16];
  if (!v20 || (v21 = v7[15], (v22 = std::__shared_weak_count::lock(v20)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  v24 = operator new(0x28uLL);
  *v24 = v13;
  v25 = xpc_null_create();
  v24[1] = v7;
  v24[2] = v15;
  v24[3] = v17;
  v24[4] = v16;
  if (v16)
  {
    v26 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = v7[17];
  v29 = (unint64_t *)&v23->__shared_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  v31 = operator new(0x18uLL);
  *v31 = v24;
  v31[1] = v21;
  v31[2] = v23;
  dispatch_async_f(v28, v31, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v32 = __ldaxr(v29);
  while (__stlxr(v32 - 1, v29));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  xpc_release(v25);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

uint64_t ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  _QWORD block[6];
  std::__shared_weak_count *v30;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      if (v8 && *(_DWORD *)(a2 + 16) == 3)
      {
        v9 = MEMORY[0x1E0C809B0];
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3321888768;
        v27[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6;
        v27[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e5_v8__0l;
        v27[4] = v5;
        v27[5] = v8;
        v10 = (std::__shared_weak_count *)a1[6];
        v28 = v10;
        if (v10)
        {
          p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
          do
            v12 = __ldxr(p_shared_weak_owners);
          while (__stxr(v12 + 1, p_shared_weak_owners));
        }
        v13 = (std::__shared_weak_count *)v5[16];
        if (!v13 || (v14 = v5[15], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = v5[17];
        block[0] = v9;
        block[1] = 3321888768;
        block[2] = ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
        block[3] = &unk_1E7907FE8;
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        block[5] = v14;
        v30 = v16;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        block[4] = v27;
        dispatch_async(v17, block);
        v20 = v30;
        if (v30)
        {
          v21 = (unint64_t *)&v30->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v28)
          std::__shared_weak_count::__release_weak(v28);
      }
      v24 = (unint64_t *)&v7->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  void *v17;
  unint64_t v18;
  __int128 v19;
  void *v20;
  NSObject *object;
  xpc_object_t v22;
  std::__shared_weak_count *v23;
  _QWORD aBlock[4];
  __int128 v25;
  std::__shared_weak_count *v26;
  void *v27;
  dispatch_object_t v28;
  _QWORD block[5];

  v27 = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v1 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v19 = *(_OWORD *)(a1 + 32);
  v25 = v19;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  v26 = v2;
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }
  v5 = _Block_copy(aBlock);
  v6 = *(NSObject **)(v19 + 136);
  if (v6)
    dispatch_retain(*(dispatch_object_t *)(v19 + 136));
  v27 = v5;
  v28 = v6;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = v1;
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v8 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v8 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  v9 = (unint64_t *)(v8 + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
LABEL_11:
  abm::HelperClient::create();
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v13) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v13);
      v14 = v13;
    }
    else
    {
      v14 = xpc_null_create();
    }
  }
  else
  {
    v14 = xpc_null_create();
    v13 = 0;
  }
  xpc_release(v13);
  v15 = xpc_int64_create(1500);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CF1008], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v22 = v14;
  if (!v14)
  {
    v22 = xpc_null_create();
    v17 = v27;
    if (!v27)
      goto LABEL_29;
    goto LABEL_28;
  }
  xpc_retain(v14);
  v17 = v27;
  if (v27)
LABEL_28:
    v17 = _Block_copy(v17);
LABEL_29:
  v20 = v17;
  object = v28;
  if (v28)
    dispatch_retain(v28);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v20)
    _Block_release(v20);
  xpc_release(v22);
  xpc_release(v14);
  do
    v18 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v18 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v18)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
}

void sub_1BF4816C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  void *v25;
  uint64_t v26;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a12);
  xpc_release(object);
  object = 0;
  xpc_release(v25);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v26 - 88);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7(_QWORD *a1, _DWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t value;
  int v14;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v24;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      if (*a2 || MEMORY[0x1C3B8A86C](*a3) != MEMORY[0x1E0C812F8])
        goto LABEL_15;
      value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CF11E8]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      if ((v14 - 3) < 0xFFFFFFFE)
      {
LABEL_15:
        v15 = (const void *)*MEMORY[0x1E0CFB9B0];
        v16 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = (void *)v16;
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v18 = (void **)operator new(v19 + 1);
          __dst[1] = v17;
          v24 = v20 | 0x8000000000000000;
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(v24) = v16;
          v18 = __dst;
          if (!v16)
            goto LABEL_23;
        }
        memmove(v18, v15, (size_t)v17);
LABEL_23:
        *((_BYTE *)v17 + (_QWORD)v18) = 0;
        aBlock = 0;
        cf = 0;
        Service::broadcastEvent(v7, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v24) < 0)
          operator delete(__dst[0]);
      }
    }
  }
}

void sub_1BF48192C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t value;
  uint64_t *v6;
  uint64_t **v7;
  char v8;
  __int128 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  void **v14;
  int v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  NSObject *v27;
  NSObject *shared_owners;
  uint64_t *v29;
  uint64_t **v30;
  void **v31;
  void *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  uint64_t *v37;
  size_t v38;
  size_t v39;
  int v40;
  int v41;
  char *v42;
  std::string *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  xpc_object_t v51;
  uint64_t v52;
  xpc_object_t v53;
  const void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  xpc_object_t v59;
  void *__p[2];
  __int128 v61;
  unint64_t v62;
  void *v63[3];
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v59 = v4;
    }
    else
    {
      v59 = xpc_null_create();
    }
  }
  else
  {
    v59 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  memset(v63, 170, sizeof(v63));
  v58 = a1;
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0CFB450]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v61 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v6 = *(uint64_t **)(v3 + 152);
  v7 = (uint64_t **)(v3 + 160);
  if (v6 == (uint64_t *)(v3 + 160))
    goto LABEL_47;
  v8 = 0;
  do
  {
    v62 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v9;
    v61 = v9;
    if (*((char *)v6 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v6 + 2);
      *(_QWORD *)&v61 = v6[6];
    }
    v10 = v6[8];
    *((_QWORD *)&v61 + 1) = v6[7];
    v62 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if ((SBYTE7(v61) & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (SHIBYTE(v63[2]) >= 0)
      v14 = v63;
    else
      v14 = (void **)v63[0];
    v15 = strcasecmp((const char *)v13, (const char *)v14);
    if (v15)
    {
      v16 = (std::__shared_weak_count *)v62;
      if (!v62)
        goto LABEL_34;
    }
    else
    {
      v17 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v14;
        _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "Failed to register: %s is already registered.", (uint8_t *)object, 0xCu);
        v8 = 1;
        v16 = (std::__shared_weak_count *)v62;
        if (!v62)
          goto LABEL_34;
      }
      else
      {
        v8 = 1;
        v16 = (std::__shared_weak_count *)v62;
        if (!v62)
          goto LABEL_34;
      }
    }
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_34:
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
    if (!v15)
      break;
    v20 = (uint64_t *)v6[1];
    if (v20)
    {
      do
      {
        v21 = (uint64_t **)v20;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (uint64_t **)v6[2];
        v22 = *v21 == v6;
        v6 = (uint64_t *)v21;
      }
      while (!v22);
    }
    v6 = (uint64_t *)v21;
  }
  while (v21 != v7);
  if ((v8 & 1) != 0)
  {
    v23 = 3760250880;
    v24 = v58;
    goto LABEL_98;
  }
LABEL_47:
  v25 = (std::__shared_weak_count *)operator new(0x28uLL);
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)off_1E7907FA0;
  v27 = *(NSObject **)(v3 + 176);
  if (v27)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 176));
    dispatch_group_enter(v27);
  }
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v25[1].__shared_owners_ = (uint64_t)v27;
  if (v27)
  {
    dispatch_retain(v27);
    shared_owners = v25[1].__shared_owners_;
    if (shared_owners)
      dispatch_group_enter(shared_owners);
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  v29 = *v7;
  v30 = (uint64_t **)(v3 + 160);
  if (*v7)
  {
    if (SHIBYTE(v63[2]) >= 0)
      v31 = v63;
    else
      v31 = (void **)v63[0];
    if (SHIBYTE(v63[2]) >= 0)
      v32 = (void *)HIBYTE(v63[2]);
    else
      v32 = v63[1];
    while (1)
    {
      v30 = (uint64_t **)v29;
      v35 = (uint64_t *)v29[4];
      v33 = v29 + 4;
      v34 = v35;
      v36 = *((char *)v33 + 23);
      if (v36 >= 0)
        v37 = v33;
      else
        v37 = v34;
      if (v36 >= 0)
        v38 = *((unsigned __int8 *)v33 + 23);
      else
        v38 = v33[1];
      if (v38 >= (unint64_t)v32)
        v39 = (size_t)v32;
      else
        v39 = v38;
      v40 = memcmp(v31, v37, v39);
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_60;
LABEL_74:
        v41 = memcmp(v37, v31, v39);
        if (v41)
        {
          if ((v41 & 0x80000000) == 0)
            goto LABEL_86;
        }
        else if (v38 >= (unint64_t)v32)
        {
LABEL_86:
          v42 = (char *)v30;
          goto LABEL_87;
        }
        v29 = v30[1];
        if (!v29)
        {
          v7 = v30 + 1;
          break;
        }
      }
      else
      {
        if ((unint64_t)v32 >= v38)
          goto LABEL_74;
LABEL_60:
        v29 = *v30;
        v7 = v30;
        if (!*v30)
          break;
      }
    }
  }
  v42 = (char *)operator new(0x48uLL);
  v43 = (std::string *)(v42 + 32);
  if (SHIBYTE(v63[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v43, (const std::string::value_type *)v63[0], (std::string::size_type)v63[1]);
  }
  else
  {
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)v63;
    *((void **)v42 + 6) = v63[2];
  }
  *((_QWORD *)v42 + 7) = 0;
  *((_QWORD *)v42 + 8) = 0;
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = 0;
  *((_QWORD *)v42 + 2) = v30;
  *v7 = (uint64_t *)v42;
  v44 = **(_QWORD **)(v3 + 152);
  v45 = (uint64_t *)v42;
  if (v44)
  {
    *(_QWORD *)(v3 + 152) = v44;
    v45 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 160), v45);
  ++*(_QWORD *)(v3 + 168);
LABEL_87:
  v24 = v58;
  do
    v46 = __ldxr(v26);
  while (__stxr(v46 + 1, v26));
  v47 = (std::__shared_weak_count *)*((_QWORD *)v42 + 8);
  *((_QWORD *)v42 + 7) = v25 + 1;
  *((_QWORD *)v42 + 8) = v25;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  do
    v50 = __ldaxr(v26);
  while (__stlxr(v50 - 1, v26));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  v23 = 0;
LABEL_98:
  v51 = xpc_null_create();
  v52 = *(_QWORD *)(v2 + 16);
  __p[0] = v51;
  v53 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v52 + 16))(v52, v23, __p);
  xpc_release(__p[0]);
  xpc_release(v53);
  if (SHIBYTE(v63[2]) < 0)
    operator delete(v63[0]);
  xpc_release(v59);
  v54 = *(const void **)(v2 + 16);
  if (v54)
    _Block_release(v54);
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v55 = (std::__shared_weak_count *)v24[2];
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  operator delete(v24);
}

void sub_1BF481F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, xpc_object_t object, xpc_object_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,xpc_object_t a27)
{
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  void *v31;
  unint64_t v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  v31 = v28;
  operator delete(v31);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (a26 < 0)
    operator delete(__p);
  xpc_release(object);
  v34 = *(const void **)(v27 + 16);
  if (v34)
    _Block_release(v34);
  xpc_release(*(xpc_object_t *)v27);
  operator delete((void *)v27);
  v35 = (std::__shared_weak_count *)a11[2];
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void sub_1BF4820AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7907FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7907FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t value;
  _QWORD *v5;
  void **v6;
  const char *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  uint64_t v26;
  xpc_object_t v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  char *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void *v40[3];
  _BYTE object[12];
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  memset(v40, 170, sizeof(v40));
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0CFB450]);
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  v5 = *(_QWORD **)(v3 + 152);
  if (v5 != (_QWORD *)(v3 + 160))
  {
    if (SHIBYTE(v40[2]) >= 0)
      v6 = v40;
    else
      v6 = (void **)v40[0];
    while (1)
    {
      v7 = *((char *)v5 + 55) >= 0 ? (const char *)(v5 + 4) : (const char *)v5[4];
      if (!strcasecmp(v7, (const char *)v6))
        break;
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
      if (v9 == (_QWORD *)(v3 + 160))
        goto LABEL_19;
    }
    v15 = (_QWORD *)v5[7];
    v14 = (std::__shared_weak_count *)v5[8];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = (void *)*MEMORY[0x1E0CFB060];
    __p[0] = (void *)v2;
    __p[1] = v18;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, object);
    v19 = *(_QWORD *)object;
    *(_QWORD *)object = xpc_null_create();
    v20 = (void *)*v15;
    *v15 = v19;
    xpc_release(v20);
    xpc_release(*(xpc_object_t *)object);
    v21 = v15[1];
    v15[1] = 0;
    if (v21)
    {
      dispatch_group_leave(v21);
      dispatch_release(v21);
    }
    v22 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v32 = v40;
      if (SHIBYTE(v40[2]) < 0)
        v32 = (void **)v40[0];
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v32;
      _os_log_debug_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEBUG, "#D Received log domain: %s", (uint8_t *)__p, 0xCu);
      v22 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        goto LABEL_30;
    }
    else if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      if (!v14)
        goto LABEL_34;
LABEL_30:
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v11 = 0;
      }
      else
      {
LABEL_34:
        v11 = 0;
      }
      goto LABEL_36;
    }
    v33 = (char *)MEMORY[0x1C3B8A7D0](*v15);
    memset(__p, 170, 24);
    v34 = strlen(v33);
    if (v34 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v35 = (void *)v34;
    if (v34 >= 0x17)
    {
      v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v37 = v34 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      __p[1] = v35;
      __p[2] = (void *)(v38 | 0x8000000000000000);
      __p[0] = v36;
    }
    else
    {
      HIBYTE(__p[2]) = v34;
      v36 = __p;
      if (!v34)
        goto LABEL_58;
    }
    memcpy(v36, v33, (size_t)v35);
LABEL_58:
    *((_BYTE *)v35 + (_QWORD)v36) = 0;
    free(v33);
    v39 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v39 = (void **)__p[0];
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v39;
    _os_log_debug_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEBUG, "#D Received log summary: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    goto LABEL_30;
  }
LABEL_19:
  v11 = 3760250880;
  v12 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = v40;
    if (SHIBYTE(v40[2]) < 0)
      v13 = (void **)v40[0];
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v13;
    _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Failed to find log summary domain with %s", (uint8_t *)__p, 0xCu);
  }
LABEL_36:
  v25 = xpc_null_create();
  v26 = *(_QWORD *)(v2 + 16);
  __p[0] = v25;
  v27 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v26 + 16))(v26, v11, __p);
  xpc_release(__p[0]);
  xpc_release(v27);
  if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
  {
    v28 = *(const void **)(v2 + 16);
    if (!v28)
      goto LABEL_41;
    goto LABEL_40;
  }
  operator delete(v40[0]);
  v28 = *(const void **)(v2 + 16);
  if (v28)
LABEL_40:
    _Block_release(v28);
LABEL_41:
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v29 = (std::__shared_weak_count *)a1[2];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(a1);
}

void sub_1BF4825DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  xpc_object_t value;
  const char *v6;
  const char *v7;
  xpc_object_t v8;
  const char *v9;
  NSObject *v10;
  void **v11;
  size_t v12;
  void **v13;
  NSObject *v14;
  const void *v15;
  void *v16;
  uint64_t IsInternalBuild;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  const void *aBlock;
  NSObject *object;
  xpc_object_t v51;
  const void *v52;
  NSObject *v53;
  void *__p[3];
  void *v55[3];
  __int128 block;
  void (*v57)(uint64_t);
  void *v58;
  __int128 *v59;
  os_activity_scope_state_s state;
  void (*v61)(_QWORD *, unsigned int *);
  void *v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = _os_activity_create(&dword_1BF335000, "Dump trace", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, &state);
  os_activity_scope_leave(&state);
  memset(v55, 170, sizeof(v55));
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0CFB0F8]);
  state.opaque[0] = (uint64_t)value;
  if (value)
    xpc_retain(value);
  else
    state.opaque[0] = (uint64_t)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&state, (const object *)*MEMORY[0x1E0CFB4D8], v6);
  xpc_release((xpc_object_t)state.opaque[0]);
  memset(__p, 170, sizeof(__p));
  v7 = (const char *)*MEMORY[0x1E0CFB930];
  v8 = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0CFB930]);
  state.opaque[0] = (uint64_t)v8;
  if (v8)
    xpc_retain(v8);
  else
    state.opaque[0] = (uint64_t)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&state, (const object *)"", v9);
  xpc_release((xpc_object_t)state.opaque[0]);
  v10 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v11 = (void **)__p[0];
    LODWORD(state.opaque[0]) = 136315138;
    *(uint64_t *)((char *)state.opaque + 4) = (uint64_t)v11;
    _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Dumping log with Reason: \"%s\"", (uint8_t *)&state, 0xCu);
  }
  if (SHIBYTE(v55[2]) >= 0)
    v12 = HIBYTE(v55[2]);
  else
    v12 = (size_t)v55[1];
  if (v12 != strlen((const char *)*MEMORY[0x1E0CFBB98])
    || (SHIBYTE(v55[2]) >= 0 ? (v13 = v55) : (v13 = (void **)v55[0]),
        memcmp(v13, (const void *)*MEMORY[0x1E0CFBB98], v12)))
  {
    v14 = *(NSObject **)v2;
    v53 = v14;
    if (v14)
    {
      xpc_retain(v14);
      v15 = *(const void **)(v2 + 16);
      if (v15)
      {
LABEL_21:
        v16 = _Block_copy(v15);
LABEL_24:
        v52 = v16;
        LogTracker::dumpLogInternal_sync(v3, (xpc_object_t *)&v53, &v52);
        if (v16)
          _Block_release(v16);
        xpc_release(v14);
        v53 = 0;
        goto LABEL_27;
      }
    }
    else
    {
      v14 = xpc_null_create();
      v53 = v14;
      v15 = *(const void **)(v2 + 16);
      if (v15)
        goto LABEL_21;
    }
    v16 = 0;
    goto LABEL_24;
  }
  v33 = xpc_string_create((const char *)*MEMORY[0x1E0D01A50]);
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)v2, v7, v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = xpc_null_create();
  v36 = *(_QWORD *)(v2 + 16);
  state.opaque[0] = (uint64_t)v35;
  v37 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, os_activity_scope_state_s *))(v36 + 16))(v36, 0, &state);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_release(v37);
  v38 = *(xpc_object_t *)v2;
  v52 = v38;
  v53 = 0;
  if (v38)
  {
    xpc_retain(v38);
  }
  else
  {
    v38 = xpc_null_create();
    v52 = v38;
  }
  LogTracker::jsonSummary_sync((_QWORD *)v3, &v53, (xpc_object_t *)&v52);
  xpc_release(v38);
  v52 = 0;
LABEL_27:
  if (!TelephonyUtilIsCarrierBuild())
    goto LABEL_79;
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)IsInternalBuild))
    goto LABEL_79;
  v18 = MEMORY[0x1E0C809B0];
  state.opaque[0] = MEMORY[0x1E0C809B0];
  state.opaque[1] = 3321888768;
  v61 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke;
  v62 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v63 = v3;
  v64 = *(_QWORD *)(v2 + 24);
  v19 = *(std::__shared_weak_count **)(v2 + 32);
  v65 = v19;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
  }
  v22 = _Block_copy(&state);
  v23 = *(NSObject **)(v3 + 136);
  if (v23)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = v18;
  *((_QWORD *)&block + 1) = 0x40000000;
  v57 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v58 = &__block_descriptor_tmp_13_2;
  v59 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v25 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v25 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  v26 = (unint64_t *)(v25 + 8);
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_40:
  abm::HelperClient::create();
  v28 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = xpc_dictionary_create(0, 0, 0);
  if (v31 || (v31 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v31) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v31);
      v32 = v31;
    }
    else
    {
      v32 = xpc_null_create();
    }
  }
  else
  {
    v32 = xpc_null_create();
    v31 = 0;
  }
  xpc_release(v31);
  v39 = xpc_string_create((const char *)*MEMORY[0x1E0CF11B8]);
  if (!v39)
    v39 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CF1040], v39);
  v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  v41 = xpc_BOOL_create(1);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CF1188], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  v51 = v32;
  if (v32)
  {
    xpc_retain(v32);
    if (v22)
      goto LABEL_63;
LABEL_97:
    aBlock = 0;
    object = v23;
    if (!v23)
      goto LABEL_65;
    goto LABEL_64;
  }
  v51 = xpc_null_create();
  if (!v22)
    goto LABEL_97;
LABEL_63:
  aBlock = _Block_copy(v22);
  object = v23;
  if (v23)
LABEL_64:
    dispatch_retain(v23);
LABEL_65:
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v51);
  xpc_release(v32);
  do
    v43 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v43 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v43)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v23)
    dispatch_release(v23);
  if (v22)
    _Block_release(v22);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
LABEL_79:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_84:
    operator delete(v55[0]);
    if (!v4)
      goto LABEL_86;
    goto LABEL_85;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v55[2]) < 0)
    goto LABEL_84;
LABEL_81:
  if (v4)
LABEL_85:
    os_release(v4);
LABEL_86:
  v44 = *(std::__shared_weak_count **)(v2 + 32);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  v45 = *(const void **)(v2 + 16);
  if (v45)
    _Block_release(v45);
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v46 = (std::__shared_weak_count *)a1[2];
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  operator delete(a1);
}

void sub_1BF482EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      if ((_DWORD)v11)
      {
        v12 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Failed to install profile. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  xpc_object_t v4;
  void *v5;
  xpc_object_t value;
  xpc_object_t v7;
  xpc_object_t v8;
  const void *v9;
  size_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  char v16;
  std::string *v17;
  const char *v18;
  _BOOL4 v19;
  const void *v20;
  size_t v21;
  std::string::size_type v22;
  std::string *p_p;
  uint64_t v24;
  uint64_t v25;
  xpc_object_t *v26;
  int v27;
  void *v28;
  std::string *v29;
  xpc_object_t *v30;
  int v31;
  NSObject *v32;
  xpc_object_t v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  xpc_object_t *v38;
  xpc_object_t v39;
  std::string __p;
  xpc_object_t v41[3];
  xpc_object_t object[3];
  void *v43[3];
  void *aBlock;
  xpc_object_t v45;
  std::string __dst;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(xpc_object_t *)(*a1 + 8);
  v45 = v4;
  if (!v4)
  {
    v4 = xpc_null_create();
    v45 = v4;
    v5 = (void *)v2[2];
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v4);
  v5 = (void *)v2[2];
  if (v5)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  LogTracker::setProperty_sync(v3, &v45, (uint64_t *)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v4);
  v45 = 0;
  memset(v43, 170, sizeof(v43));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB030]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v7 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB550]);
  v41[0] = v7;
  if (v7)
    xpc_retain(v7);
  else
    v41[0] = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v41[0]);
  memset(v41, 170, sizeof(v41));
  v8 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB6A8]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8)
    xpc_retain(v8);
  else
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(__p.__r_.__value_.__l.__data_);
  v9 = (const void *)*MEMORY[0x1E0CFB098];
  v10 = strlen((const char *)*MEMORY[0x1E0CFB098]);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_30;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_30:
    memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (SHIBYTE(v43[2]) >= 0)
    v15 = v43;
  else
    v15 = (void **)v43[0];
  v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__dst;
  else
    v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (strcasecmp((const char *)v15, (const char *)v17))
  {
    v19 = 0;
    if ((v16 & 0x80) == 0)
      goto LABEL_39;
LABEL_59:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v19)
      goto LABEL_75;
    goto LABEL_60;
  }
  v20 = (const void *)*MEMORY[0x1E0CFBA30];
  v21 = strlen((const char *)*MEMORY[0x1E0CFBA30]);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    p_p = (std::string *)operator new(v24 + 1);
    __p.__r_.__value_.__l.__size_ = v22;
    __p.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_48;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v21;
  p_p = &__p;
  if (v21)
LABEL_48:
    memmove(p_p, v20, v22);
  p_p->__r_.__value_.__s.__data_[v22] = 0;
  if (SHIBYTE(object[2]) >= 0)
    v26 = object;
  else
    v26 = (xpc_object_t *)object[0];
  v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v28 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v19 = strcasecmp((const char *)v26, (const char *)v29) == 0;
  if (v27 < 0)
  {
    operator delete(v28);
    if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_59;
  }
  else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    goto LABEL_59;
  }
LABEL_39:
  if (!v19)
    goto LABEL_75;
LABEL_60:
  if (SHIBYTE(v41[2]) >= 0)
    v30 = v41;
  else
    v30 = (xpc_object_t *)v41[0];
  v31 = abm::helper::asEnum((abm::helper *)v30, v18);
  v32 = v3[11];
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    v38 = v41;
    if (SHIBYTE(v41[2]) < 0)
      v38 = (xpc_object_t *)v41[0];
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
    _os_log_debug_impl(&dword_1BF335000, v32, OS_LOG_TYPE_DEBUG, "#D Selected Config: %s", (uint8_t *)&__dst, 0xCu);
  }
  memset(&__p, 170, sizeof(__p));
  v33 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFBF88]);
  v39 = v33;
  if (v33)
    xpc_retain(v33);
  else
    v39 = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v39);
  v39 = xpc_null_create();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  LogTracker::updateLoggingSettings_sync(v3, v31, &v39, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v39);
  v39 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v41[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(object[0]);
  if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
  {
LABEL_78:
    v34 = (const void *)v2[2];
    if (!v34)
      goto LABEL_85;
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v43[0]);
  v34 = (const void *)v2[2];
  if (v34)
LABEL_84:
    _Block_release(v34);
LABEL_85:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v35 = (std::__shared_weak_count *)a1[2];
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a1);
}

void sub_1BF483888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *aBlock)
{
  _QWORD *v35;
  uint64_t v36;
  const void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  v38 = *(const void **)(v36 + 16);
  if (v38)
    _Block_release(v38);
  xpc_release(*(xpc_object_t *)(v36 + 8));
  operator delete((void *)v36);
  v39 = (std::__shared_weak_count *)v35[2];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v35);
  _Unwind_Resume(a1);
}

void sub_1BF483A88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  xpc_object_t value;
  xpc_object_t v5;
  char isSupported;
  char v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  std::string *v11;
  xpc_object_t v12;
  _QWORD *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  _QWORD *v16;
  _BOOL4 isInternalProperty_sync;
  _BOOL4 v18;
  _QWORD *v19;
  const void *v20;
  size_t v21;
  void *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  const char *p_buf;
  xpc_object_t v28;
  xpc_object_t v29;
  int v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  const void *v37;
  xpc_object_t v38;
  void *__dst[2];
  unint64_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  unsigned int v43;
  std::string __p;
  xpc_object_t object[3];
  std::string v46;
  __int128 buf;
  void (*v48)(uint64_t, unsigned int, void **);
  void *v49;
  const void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  memset(&v46, 170, sizeof(v46));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB030]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  buf = 0uLL;
  v48 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v5 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB550]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5)
    xpc_retain(v5);
  else
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  buf = 0uLL;
  v48 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    __p = v46;
  isSupported = abm::trace::isSupported();
  v7 = isSupported;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 1) != 0)
    {
LABEL_12:
      v43 = -534716416;
      v42 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v8 = xpc_dictionary_create(0, 0, 0);
      v9 = v8;
      if (v8)
      {
        v42 = v8;
      }
      else
      {
        v9 = xpc_null_create();
        v42 = v9;
        if (!v9)
        {
          v15 = xpc_null_create();
          v9 = 0;
          goto LABEL_25;
        }
      }
      if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v9);
        goto LABEL_26;
      }
      v15 = xpc_null_create();
LABEL_25:
      v42 = v15;
LABEL_26:
      xpc_release(v9);
      v16 = (_QWORD *)v2[1];
      v41 = v16;
      if (v16)
      {
        xpc_retain(v16);
      }
      else
      {
        v16 = xpc_null_create();
        v41 = v16;
      }
      isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)v3, &v41, &v42, &v43);
      xpc_release(v16);
      v41 = 0;
      if (isInternalProperty_sync)
      {
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v43, &v42);
LABEL_64:
        xpc_release(v42);
        goto LABEL_65;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
      {
        buf = 0uLL;
        v48 = 0;
        v18 = prop::get((char *)&v46, (char *)object, (uint64_t)&buf);
        v19 = (_QWORD *)v2[1];
        __dst[0] = v19;
        if (v19)
        {
          xpc_retain(v19);
        }
        else
        {
          v19 = xpc_null_create();
          __dst[0] = v19;
        }
        if (SHIBYTE(v48) >= 0)
          p_buf = (const char *)&buf;
        else
          p_buf = (const char *)buf;
        v28 = xpc_string_create(p_buf);
        if (!v28)
          v28 = xpc_null_create();
        xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB6A8], v28);
        v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (v18)
          v30 = 0;
        else
          v30 = -534716416;
        LODWORD(v38) = v30;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 2, (unsigned int *)&v38, __dst);
        xpc_release(__dst[0]);
        if (SHIBYTE(v48) < 0)
          operator delete((void *)buf);
        goto LABEL_64;
      }
      v20 = (const void *)*MEMORY[0x1E0CFBED0];
      v21 = strlen((const char *)*MEMORY[0x1E0CFBED0]);
      if (v21 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v22 = (void *)v21;
      if (v21 >= 0x17)
      {
        v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v24 = v21 | 7;
        v25 = v24 + 1;
        v23 = (void **)operator new(v24 + 1);
        __dst[1] = v22;
        v40 = v25 | 0x8000000000000000;
        __dst[0] = v23;
      }
      else
      {
        HIBYTE(v40) = v21;
        v23 = __dst;
        if (!v21)
          goto LABEL_42;
      }
      memmove(v23, v20, (size_t)v22);
LABEL_42:
      *((_BYTE *)v22 + (_QWORD)v23) = 0;
      v26 = (_QWORD *)v2[1];
      v38 = v26;
      if (v26)
      {
        xpc_retain(v26);
      }
      else
      {
        v26 = xpc_null_create();
        v38 = v26;
      }
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3321888768;
      v48 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke;
      v49 = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      v31 = (_QWORD *)v2[2];
      if (v31)
        v31 = _Block_copy(v31);
      v50 = v31;
      v32 = _Block_copy(&buf);
      v37 = v32;
      Service::runCommand((uint64_t)v3, (uint64_t)__dst, &v38, &v37);
      if (v32)
        _Block_release(v32);
      xpc_release(v26);
      v38 = 0;
      if (SHIBYTE(v40) < 0)
        operator delete(__dst[0]);
      if (v50)
        _Block_release(v50);
      goto LABEL_64;
    }
  }
  else if ((isSupported & 1) != 0)
  {
    goto LABEL_12;
  }
  v10 = v3[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = &v46;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)v46.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I The property (%s) not supported in getting", (uint8_t *)&buf, 0xCu);
  }
  v12 = xpc_null_create();
  v13 = (_QWORD *)v2[2];
  *(_QWORD *)&buf = v12;
  v14 = xpc_null_create();
  ((void (*)(_QWORD *, uint64_t, __int128 *))v13[2])(v13, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v14);
LABEL_65:
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_67:
      v33 = (_QWORD *)v2[2];
      if (!v33)
        goto LABEL_72;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  v33 = (_QWORD *)v2[2];
  if (v33)
LABEL_71:
    _Block_release(v33);
LABEL_72:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v34 = (std::__shared_weak_count *)a1[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(a1);
}

void sub_1BF484070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3;

  v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(void **__p)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *__p;
  if (v2)
    operator delete(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_7:
    operator delete(__p);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  v3 = **a1;
  if (*(_QWORD *)(v3 + 200))
  {
    os_state_remove_handler();
    *(_QWORD *)(v3 + 200) = 0;
  }
  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_10:
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  const object **v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  void **v17;
  xpc_object_t v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  int v22;
  xpc_object_t v23;
  const char *v24;
  xpc_object_t v25;
  const char *v26;
  int v27;
  NSObject *v28;
  const char *v29;
  std::string *v30;
  xpc_object_t v31;
  const void *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  size_t v36;
  xpc_object_t v37;
  NSObject *v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  const void *v43;
  size_t v44;
  std::string::size_type v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  const object *v49;
  char *v50;
  xpc_object_t v51;
  char IsCarrierBuild;
  char v53;
  NSObject *v54;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v57;
  size_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  uint64_t v62;
  const char **v63;
  int v64;
  char v65;
  xpc_object_t v66;
  const void *v67;
  size_t v68;
  std::string::size_type v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  size_t v74;
  std::string::size_type v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  xpc_object_t v79;
  void *v80;
  const void *v81;
  size_t v82;
  std::string::size_type v83;
  int v84;
  void *p_state;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  int v90;
  size_t v91;
  std::string::size_type v92;
  size_t v93;
  std::string *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void **v98;
  std::string *v99;
  std::string::size_type v100;
  char v101;
  xpc_object_t v102;
  xpc_object_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  xpc_object_t v106;
  xpc_object_t v107;
  std::string *v108;
  xpc_object_t v109;
  xpc_object_t v110;
  void **v111;
  xpc_object_t v112;
  xpc_object_t v113;
  xpc_object_t v114;
  xpc_object_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  xpc_object_t v120;
  xpc_object_t v121;
  _QWORD *v122;
  const char *v123;
  char *key;
  xpc_object_t v125;
  _QWORD *v126;
  NSObject *v127;
  _DWORD value[4];
  char v129;
  BOOL v130;
  std::string v131;
  xpc_object_t xdict;
  void *__p[3];
  unsigned int v134[4];
  xpc_object_t __s1[4];
  std::string state;
  uint64_t v137;

  v1 = a1;
  v137 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *(_QWORD *)&value[1] = v2;
  v3 = *(_QWORD **)v2;
  v4 = _os_activity_create(&dword_1BF335000, "Dump finished", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  state.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, (os_activity_scope_state_t)&state);
  os_activity_scope_leave((os_activity_scope_state_t)&state);
  v5 = v3[11];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v2 + 8);
    LODWORD(state.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(state.__r_.__value_.__r.__words[0]) = v6;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Log dump has finished. The result: 0x%x", (uint8_t *)&state, 8u);
  }
  memset(__p, 170, sizeof(__p));
  v7 = (const char *)*MEMORY[0x1E0CFB370];
  v8 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), (const char *)*MEMORY[0x1E0CFB370]);
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8)
    xpc_retain(v8);
  else
    v131.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__s1);
  Timestamp::asString((uint64_t)__s1, 0, 9, &state);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
    operator delete(state.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__s1, (_QWORD *)__s1[1]);
  xpc_release(v131.__r_.__value_.__l.__data_);
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v9;
  v11 = MEMORY[0x1E0C812F8];
  if (v9)
  {
    xdict = v9;
  }
  else
  {
    v10 = xpc_null_create();
    xdict = v10;
    if (!v10)
    {
      v12 = xpc_null_create();
      v10 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x1C3B8A86C](v10) == v11)
  {
    xpc_retain(v10);
    goto LABEL_16;
  }
  v12 = xpc_null_create();
LABEL_15:
  xdict = v12;
LABEL_16:
  xpc_release(v10);
  v13 = (const object **)MEMORY[0x1E0D01A30];
  v14 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
  if (!v14)
    v14 = xpc_null_create();
  v15 = (const char *)*MEMORY[0x1E0CFB6A0];
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB6A0], v14);
  v16 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v16);
  if (SHIBYTE(__p[2]) >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  v18 = xpc_string_create((const char *)v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v7, v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = *(_DWORD *)(v2 + 8);
  if (v20 == -534716414)
    v20 = -534716415;
  LODWORD(state.__r_.__value_.__l.__data_) = v20;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(v2 + 24), (unsigned int *)&state, &xdict);
  v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E0CFB078]);
  state.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  if (v21)
    xpc_retain(v21);
  else
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)&state, 0);
  xpc_release(state.__r_.__value_.__l.__data_);
  if (!v22)
  {
    memset(__s1, 170, 24);
    v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E0CFB0F8]);
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25)
      xpc_retain(v25);
    else
      state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&state, (const object *)*MEMORY[0x1E0CFB4D8], v26);
    xpc_release(state.__r_.__value_.__l.__data_);
    v32 = (const void *)*MEMORY[0x1E0CFB3A0];
    v33 = (xpc_object_t)strlen((const char *)*MEMORY[0x1E0CFB3A0]);
    v34 = v33;
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v33 != (xpc_object_t)-1)
      {
        v35 = __s1[1];
        if (__s1[1] >= v33)
          v37 = v33;
        else
          v37 = __s1[1];
        if (memcmp(__s1[0], v32, (size_t)v37))
          goto LABEL_58;
        goto LABEL_55;
      }
    }
    else if (v33 != (xpc_object_t)-1)
    {
      v35 = (xpc_object_t)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v33)
        v36 = (size_t)v33;
      else
        v36 = HIBYTE(__s1[2]);
      if (memcmp(__s1, v32, v36))
        goto LABEL_58;
LABEL_55:
      if (v35 == v34)
      {
        v38 = v3[11];
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(state.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1BF335000, v38, OS_LOG_TYPE_DEFAULT, "#I Baseband Log collection will not trigger the post log collection", (uint8_t *)&state, 2u);
        }
        goto LABEL_221;
      }
LABEL_58:
      v39 = xpc_null_create();
      if (MEMORY[0x1C3B8A86C](*(_QWORD *)(v2 + 16)) != v11 || *(_DWORD *)(v2 + 8))
      {
        v127 = v4;
        v40 = *(xpc_object_t *)(v2 + 32);
        if (v40)
        {
          xpc_retain(*(xpc_object_t *)(v2 + 32));
        }
        else
        {
          v40 = xpc_null_create();
          if (!v40)
          {
            v125 = xpc_null_create();
            v40 = 0;
            goto LABEL_69;
          }
        }
        if (MEMORY[0x1C3B8A86C](v40) == v11)
        {
          xpc_retain(v40);
          v125 = v40;
        }
        else
        {
          v125 = xpc_null_create();
        }
LABEL_69:
        v42 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v42);
        xpc_release(v40);
        v43 = (const void *)*MEMORY[0x1E0CFB028];
        v44 = strlen((const char *)*MEMORY[0x1E0CFB028]);
        v126 = v1;
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v45 = v44;
        if (v44 >= 0x17)
        {
          v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v47 = v44 | 7;
          v48 = v47 + 1;
          v46 = (std::string *)operator new(v47 + 1);
          v131.__r_.__value_.__l.__size_ = v45;
          v131.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        }
        else
        {
          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v44;
          v46 = &v131;
          if (!v44)
          {
LABEL_77:
            v46->__r_.__value_.__s.__data_[v45] = 0;
            memset(&state, 0, sizeof(state));
            if (prop::systemlogs::get((char *)&v131, (uint64_t)&state))
            {
              v134[0] = -1431655766;
              if (util::convert<int>(&state, v134, 0))
                v49 = (const object *)v134[0];
              else
                v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_85:
                if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v131.__r_.__value_.__l.__data_);
                v50 = (char *)*MEMORY[0x1E0CFB190];
                v51 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E0CFB190]);
                state.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
                if (v51)
                  xpc_retain(v51);
                else
                  state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                value[0] = xpc::dyn_cast_or_default((xpc *)&state, v49);
                xpc_release(state.__r_.__value_.__l.__data_);
                if ((TelephonyUtilIsInternalBuild() & 1) == 0)
                {
                  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
                  v53 = value[0] == 2 ? IsCarrierBuild : 1;
                  if ((v53 & 1) == 0)
                  {
                    v54 = v3[11];
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(state.__r_.__value_.__l.__data_) = 0;
                      _os_log_error_impl(&dword_1BF335000, v54, OS_LOG_TYPE_ERROR, "Detected an internal log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&state, 2u);
                    }
                    value[0] = 0;
                  }
                }
                IsInternalBuild = TelephonyUtilIsInternalBuild();
                if ((IsInternalBuild & 1) != 0
                  || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
                {
                  CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
                }
                else
                {
                  CompressionMode = 2;
                }
                v57 = (const void *)*MEMORY[0x1E0CF11E8];
                v58 = strlen((const char *)*MEMORY[0x1E0CF11E8]);
                if (v58 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v59 = v58;
                if (v58 >= 0x17)
                {
                  v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17)
                    v61 = v58 | 7;
                  v62 = v61 + 1;
                  v60 = (std::string *)operator new(v61 + 1);
                  v131.__r_.__value_.__l.__size_ = v59;
                  v131.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
                  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
                }
                else
                {
                  *((_BYTE *)&v131.__r_.__value_.__s + 23) = v58;
                  v60 = &v131;
                  if (!v58)
                  {
LABEL_110:
                    v60->__r_.__value_.__s.__data_[v59] = 0;
                    memset(&state, 0, sizeof(state));
                    if (prop::compression::get((char *)&v131, (uint64_t)&state))
                    {
                      v134[0] = -1431655766;
                      if (util::convert<int>(&state, v134, 0))
                        CompressionMode = v134[0];
                      else
                        CompressionMode = CompressionMode;
                    }
                    if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(state.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_116:
                        v63 = (const char **)MEMORY[0x1E0CFC068];
                        key = v50;
                        if (value[0] == 2)
                        {
LABEL_117:
                          v64 = 0;
                          v130 = 0;
                          v65 = 1;
                          goto LABEL_140;
                        }
LABEL_120:
                        v66 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), *v63);
                        state.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
                        if (v66)
                          xpc_retain(v66);
                        else
                          state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                        v64 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)CompressionMode);
                        xpc_release(state.__r_.__value_.__l.__data_);
                        v130 = 0;
                        if (!v64)
                        {
                          v65 = 1;
                          goto LABEL_140;
                        }
                        v67 = (const void *)*MEMORY[0x1E0CF1070];
                        v68 = strlen((const char *)*MEMORY[0x1E0CF1070]);
                        if (v68 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v69 = v68;
                        if (v68 >= 0x17)
                        {
                          v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v68 | 7) != 0x17)
                            v71 = v68 | 7;
                          v72 = v71 + 1;
                          v70 = (std::string *)operator new(v71 + 1);
                          v131.__r_.__value_.__l.__size_ = v69;
                          v131.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                        }
                        else
                        {
                          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v68;
                          v70 = &v131;
                          if (!v68)
                            goto LABEL_133;
                        }
                        memmove(v70, v67, v69);
LABEL_133:
                        v70->__r_.__value_.__s.__data_[v69] = 0;
                        memset(&state, 0, sizeof(state));
                        if (prop::compression::get((char *)&v131, (uint64_t)&state))
                          util::convert<BOOL>(&state, &v130, 0);
                        if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(state.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v131.__r_.__value_.__l.__data_);
                        v65 = 0;
LABEL_140:
                        v129 = 1;
                        v73 = (const char *)*MEMORY[0x1E0CFBA40];
                        v74 = strlen((const char *)*MEMORY[0x1E0CFBA40]);
                        if (v74 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v75 = v74;
                        if (v74 >= 0x17)
                        {
                          v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v74 | 7) != 0x17)
                            v77 = v74 | 7;
                          v78 = v77 + 1;
                          v76 = (std::string *)operator new(v77 + 1);
                          v131.__r_.__value_.__l.__size_ = v75;
                          v131.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
                          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                        }
                        else
                        {
                          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v74;
                          v76 = &v131;
                          if (!v74)
                          {
LABEL_148:
                            v76->__r_.__value_.__s.__data_[v75] = 0;
                            memset(&state, 0, sizeof(state));
                            if (prop::systemlogs::get((char *)&v131, (uint64_t)&state))
                              util::convert<BOOL>(&state, (BOOL *)&v129, 0);
                            if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(state.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                goto LABEL_152;
                            }
                            else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_152;
                            }
                            operator delete(v131.__r_.__value_.__l.__data_);
LABEL_152:
                            v79 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), v73);
                            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
                            v80 = v125;
                            if (v79)
                              xpc_retain(v79);
                            else
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                            v129 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)v129);
                            xpc_release(state.__r_.__value_.__l.__data_);
                            v123 = v73;
                            memset(&state, 170, sizeof(state));
                            v81 = (const void *)*MEMORY[0x1E0D01A30];
                            v82 = strlen((const char *)*MEMORY[0x1E0D01A30]);
                            if (v82 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v83 = v82;
                            v84 = v64;
                            if (v82 >= 0x17)
                            {
                              v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v82 | 7) != 0x17)
                                v86 = v82 | 7;
                              v87 = v86 + 1;
                              p_state = operator new(v86 + 1);
                              state.__r_.__value_.__l.__size_ = v83;
                              state.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)p_state;
                              v4 = v127;
                            }
                            else
                            {
                              *((_BYTE *)&state.__r_.__value_.__s + 23) = v82;
                              p_state = &state;
                              v4 = v127;
                              if (!v82)
                              {
                                state.__r_.__value_.__s.__data_[0] = 0;
                                v1 = v126;
                                if ((v65 & 1) != 0)
                                  goto LABEL_189;
                                goto LABEL_166;
                              }
                            }
                            memmove(p_state, v81, v83);
                            *((_BYTE *)p_state + v83) = 0;
                            v1 = v126;
                            if ((v65 & 1) != 0)
                            {
LABEL_189:
                              v102 = xpc_int64_create(value[0]);
                              if (!v102)
                                v102 = xpc_null_create();
                              xpc_dictionary_set_value(v80, key, v102);
                              v103 = xpc_null_create();
                              xpc_release(v102);
                              xpc_release(v103);
                              v104 = xpc_int64_create(v84);
                              if (!v104)
                                v104 = xpc_null_create();
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x1E0CFC068], v104);
                              v105 = xpc_null_create();
                              xpc_release(v104);
                              xpc_release(v105);
                              v106 = xpc_BOOL_create(v130);
                              if (!v106)
                                v106 = xpc_null_create();
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x1E0CFBDF8], v106);
                              v107 = xpc_null_create();
                              xpc_release(v106);
                              xpc_release(v107);
                              if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v108 = &state;
                              else
                                v108 = (std::string *)state.__r_.__value_.__r.__words[0];
                              v109 = xpc_string_create((const char *)v108);
                              if (!v109)
                                v109 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v15, v109);
                              v110 = xpc_null_create();
                              xpc_release(v109);
                              xpc_release(v110);
                              if (SHIBYTE(__p[2]) >= 0)
                                v111 = __p;
                              else
                                v111 = (void **)__p[0];
                              v112 = xpc_string_create((const char *)v111);
                              if (!v112)
                                v112 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v7, v112);
                              v113 = xpc_null_create();
                              xpc_release(v112);
                              xpc_release(v113);
                              v114 = xpc_BOOL_create(v129);
                              if (!v114)
                                v114 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v123, v114);
                              v115 = xpc_null_create();
                              xpc_release(v114);
                              xpc_release(v115);
                              ctu::fs::create_directory();
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(state.__r_.__value_.__l.__data_);
                              v116 = v80;
                              goto LABEL_210;
                            }
LABEL_166:
                            if ((TelephonyUtilIsInternalBuild() & 1) != 0
                              || TelephonyUtilIsCarrierBuild())
                            {
                              v122 = v3;
                              v88 = (const void *)*MEMORY[0x1E0D01A48];
                              v89 = strlen((const char *)*MEMORY[0x1E0D01A48]);
                              v90 = SHIBYTE(__p[2]);
                              if (SHIBYTE(__p[2]) >= 0)
                                v91 = HIBYTE(__p[2]);
                              else
                                v91 = (size_t)__p[1];
                              v92 = v91 + v89;
                              memset(&v131, 170, sizeof(v131));
                              if (v91 + v89 > 0x7FFFFFFFFFFFFFF7)
                                std::string::__throw_length_error[abi:ne180100]();
                              v93 = v89;
                              if (v92 > 0x16)
                              {
                                v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v92 | 7) != 0x17)
                                  v95 = v92 | 7;
                                v96 = v95 + 1;
                                v94 = (std::string *)operator new(v95 + 1);
                                v131.__r_.__value_.__l.__size_ = v92;
                                v131.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
                                v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                              }
                              else
                              {
                                memset(&v131, 0, sizeof(v131));
                                v94 = &v131;
                                *((_BYTE *)&v131.__r_.__value_.__s + 23) = v91 + v89;
                              }
                              if (v93)
                                memcpy(v94, v88, v93);
                              v97 = (char *)v94 + v93;
                              if (v91)
                              {
                                if (v90 >= 0)
                                  v98 = __p;
                                else
                                  v98 = (void **)__p[0];
                                memmove(v97, v98, v91);
                              }
                              v97[v91] = 0;
                              v1 = v126;
                              v4 = v127;
                              v99 = std::string::append(&v131, "/", 1uLL);
                              v100 = v99->__r_.__value_.__r.__words[0];
                              *(_QWORD *)v134 = v99->__r_.__value_.__l.__size_;
                              *(_QWORD *)((char *)&v134[1] + 3) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1]
                                                                                            + 7);
                              v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
                              v99->__r_.__value_.__l.__size_ = 0;
                              v99->__r_.__value_.__r.__words[2] = 0;
                              v99->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(state.__r_.__value_.__l.__data_);
                              state.__r_.__value_.__r.__words[0] = v100;
                              state.__r_.__value_.__l.__size_ = *(_QWORD *)v134;
                              *(std::string::size_type *)((char *)&state.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v134[1] + 3);
                              *((_BYTE *)&state.__r_.__value_.__s + 23) = v101;
                              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v131.__r_.__value_.__l.__data_);
                              v3 = v122;
                              v80 = v125;
                            }
                            goto LABEL_189;
                          }
                        }
                        memmove(v76, v73, v75);
                        goto LABEL_148;
                      }
                    }
                    else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_116;
                    }
                    operator delete(v131.__r_.__value_.__l.__data_);
                    v63 = (const char **)MEMORY[0x1E0CFC068];
                    key = v50;
                    if (value[0] == 2)
                      goto LABEL_117;
                    goto LABEL_120;
                  }
                }
                memmove(v60, v57, v59);
                goto LABEL_110;
              }
            }
            else
            {
              v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_85;
            }
            operator delete(state.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        memmove(v46, v43, v45);
        goto LABEL_77;
      }
      v41 = *(xpc_object_t *)(v2 + 16);
      if (v41)
      {
        xpc_retain(*(xpc_object_t *)(v2 + 16));
      }
      else
      {
        v41 = xpc_null_create();
        if (!v41)
        {
          v120 = xpc_null_create();
          v41 = 0;
LABEL_240:
          v121 = xpc_null_create();
          xpc_release(v39);
          xpc_release(v121);
          xpc_release(v41);
          v116 = v120;
LABEL_210:
          if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116)
              xpc_retain(v116);
            else
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            LogTracker::postLogCollectionInternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          else
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116)
              xpc_retain(v116);
            else
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            LogTracker::postLogCollectionExternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          state.__r_.__value_.__r.__words[0] = 0;
          xpc_release(v116);
LABEL_221:
          if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
            goto LABEL_224;
          v31 = __s1[0];
          goto LABEL_223;
        }
      }
      if (MEMORY[0x1C3B8A86C](v41) == v11)
      {
        xpc_retain(v41);
        v120 = v41;
      }
      else
      {
        v120 = xpc_null_create();
      }
      goto LABEL_240;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  memset(&state, 170, sizeof(state));
  v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), v15);
  __s1[0] = v23;
  if (v23)
    xpc_retain(v23);
  else
    __s1[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)__s1, *v13, v24);
  xpc_release(__s1[0]);
  v27 = ctu::fs::remove_dir();
  v28 = v3[11];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = "Failed";
    if (v27)
      v29 = "Succeeded";
    v30 = &state;
    if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)state.__r_.__value_.__r.__words[0];
    LODWORD(__s1[0]) = 136315394;
    *(xpc_object_t *)((char *)__s1 + 4) = (xpc_object_t)v29;
    WORD2(__s1[1]) = 2080;
    *(xpc_object_t *)((char *)&__s1[1] + 6) = v30;
    _os_log_impl(&dword_1BF335000, v28, OS_LOG_TYPE_DEFAULT, "#I User requested to clear logs, %s to remove dump path: %s", (uint8_t *)__s1, 0x16u);
  }
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (xpc_object_t)state.__r_.__value_.__r.__words[0];
LABEL_223:
    operator delete(v31);
  }
LABEL_224:
  xpc_release(xdict);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!v4)
      goto LABEL_229;
    goto LABEL_228;
  }
  operator delete(__p[0]);
  if (v4)
LABEL_228:
    os_release(v4);
LABEL_229:
  _ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&value[1]);
  v117 = (std::__shared_weak_count *)v1[2];
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  operator delete(v1);
}

void sub_1BF485554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    v3 = *(const void **)(v2 + 24);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()((uint64_t *)a1);
  if (a1)
  {
    xpc_release(*(xpc_object_t *)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    v2 = *(NSObject **)(a1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = *(NSObject **)(a1 + 16);
      if (v3)
        dispatch_release(v3);
    }
    v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
}

void sub_1BF485A34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 24));
    *(_QWORD *)(v1 + 24) = 0;
    v3 = *(NSObject **)(v1 + 16);
    if (v3)
    {
      dispatch_group_leave(v3);
      v4 = *(NSObject **)(v1 + 16);
      if (v4)
        dispatch_release(v4);
    }
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  const char *v12;
  const void *v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  const char **v21;
  const void *v22;
  size_t v23;
  std::string::size_type v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  const void *v36;
  size_t v37;
  size_t v38;
  void *p_p;
  uint64_t v40;
  uint64_t v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  xpc_object_t v46;
  uint64_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  const char *v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  const char *v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  const char *v59;
  xpc_object_t v60;
  xpc_object_t v61;
  xpc_object_t v62;
  const char *v63;
  std::string *v64;
  xpc_object_t v65;
  xpc_object_t v66;
  const char *v67;
  xpc_object_t v68;
  const char *v69;
  std::string *v70;
  size_t v71;
  xpc_object_t v72;
  const char *v73;
  std::string *v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  const char *v78;
  std::string *v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  const char *v83;
  std::string *v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  char v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  char v92;
  xpc_object_t v93;
  const char *v94;
  xpc_object_t v95;
  xpc_object_t v96;
  char v97;
  xpc_object_t v98;
  const char *v99;
  xpc_object_t v100;
  NSObject *v101;
  xpc_object_t v102;
  xpc_object_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  void *v106;
  _QWORD *v107;
  xpc_object_t v108;
  xpc_object_t *v109;
  xpc_object_t v110;
  const char *v111;
  xpc_object_t v112;
  xpc_object_t v113;
  void **v114;
  xpc_object_t v115;
  void *v116;
  NSObject *v117;
  uint64_t v118;
  NSObject *v119;
  _QWORD *v120;
  _QWORD *v121;
  BOOL v122;
  xpc_object_t v123;
  void *v124;
  xpc_object_t v125;
  xpc_object_t v126;
  void *v127;
  xpc_object_t v128;
  xpc_object_t v129;
  ctu::Gestalt *v130;
  std::string::size_type v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::string *v142;
  xpc_object_t v143;
  xpc_object_t v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  int v148;
  unsigned __int8 v149;
  NSObject *v150;
  const char *v151;
  std::string *p_object;
  std::string v153;
  xpc_object_t v154;
  const void *v155;
  __int128 v156;
  xpc_object_t v157;
  xpc_object_t value;
  const void *v159;
  __int128 v160;
  void *__p;
  size_t v162;
  int64_t v163;
  std::string v164;
  std::string v165;
  std::string object;
  std::string __dst;
  void *v168[3];
  void *v169[3];
  std::string v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[1];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return;
  v5 = v4;
  v6 = *a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v6)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  memset(v169, 170, sizeof(v169));
  v9 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB370]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  if (v9)
    xpc_retain(v9);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&__dst);
  Timestamp::asString(v10, 0, 9, v168);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v168[2]) < 0)
    operator delete(v168[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__dst, (_QWORD *)__dst.__r_.__value_.__l.__size_);
  xpc_release(object.__r_.__value_.__l.__data_);
  memset(v168, 170, sizeof(v168));
  v11 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB0F8]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  if (v11)
    xpc_retain(v11);
  else
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&__dst, (const object *)"", v12);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  memset(&__dst, 170, sizeof(__dst));
  v13 = (const void *)*MEMORY[0x1E0D01A20];
  v14 = strlen((const char *)*MEMORY[0x1E0D01A20]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_24;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_24:
    memmove(p_dst, v13, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  if (SHIBYTE(v168[2]) >= 0)
    v19 = (const char *)v168;
  else
    v19 = (const char *)v168[0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBB98]);
  if (!strncasecmp((const char *)*MEMORY[0x1E0CFBB98], v19, v20))
    std::string::__assign_external(&__dst, (const std::string::value_type *)*MEMORY[0x1E0D01A40]);
  v21 = (const char **)MEMORY[0x1E0D01A30];
  v22 = (const void *)*MEMORY[0x1E0D01A30];
  v23 = strlen((const char *)*MEMORY[0x1E0D01A30]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    v164.__r_.__value_.__l.__size_ = v24;
    v164.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    goto LABEL_37;
  }
  *((_BYTE *)&v164.__r_.__value_.__s + 23) = v23;
  v25 = &v164;
  if (v23)
LABEL_37:
    memmove(v25, v22, v24);
  *((_BYTE *)v25 + v24) = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__dst;
  else
    v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v30 = std::string::append(&v164, (const std::string::value_type *)v28, size);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v165.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v169[2]) >= 0)
    v32 = (const std::string::value_type *)v169;
  else
    v32 = (const std::string::value_type *)v169[0];
  if (SHIBYTE(v169[2]) >= 0)
    v33 = HIBYTE(v169[2]);
  else
    v33 = (std::string::size_type)v169[1];
  v34 = std::string::append(&v165, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v170.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = (const void *)*MEMORY[0x1E0D01A60];
  v37 = strlen((const char *)*MEMORY[0x1E0D01A60]);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v38 = v37;
  if (v37 >= 0x17)
  {
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    p_p = operator new(v40 + 1);
    v162 = v38;
    v163 = v41 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_57;
  }
  HIBYTE(v163) = v37;
  p_p = &__p;
  if (v37)
LABEL_57:
    memmove(p_p, v36, v38);
  *((_BYTE *)p_p + v38) = 0;
  if (v163 >= 0)
    v42 = (const std::string::value_type *)&__p;
  else
    v42 = (const std::string::value_type *)__p;
  if (v163 >= 0)
    v43 = HIBYTE(v163);
  else
    v43 = v162;
  v44 = std::string::append(&v170, v42, v43);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  object.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&object.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v163) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_67;
LABEL_74:
      operator delete(v165.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_68;
LABEL_75:
      operator delete(v164.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
  }
  else if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_74;
LABEL_67:
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
LABEL_68:
  v46 = xpc_dictionary_create(0, 0, 0);
  v47 = MEMORY[0x1E0C812F8];
  if (v46 || (v46 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v46) == v47)
    {
      xpc_retain(v46);
      v48 = v46;
    }
    else
    {
      v48 = xpc_null_create();
    }
  }
  else
  {
    v48 = xpc_null_create();
    v46 = 0;
  }
  xpc_release(v46);
  if (MEMORY[0x1C3B8A86C](v48) == v47)
  {
    v49 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB930]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    if (v49)
      xpc_retain(v49);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v50);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v170;
    else
      v51 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v52 = xpc_string_create((const char *)v51);
    if (!v52)
      v52 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB928], v52);
    v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169[2]) >= 0)
      v54 = (const char *)v169;
    else
      v54 = (const char *)v169[0];
    v55 = xpc_string_create(v54);
    if (!v55)
      v55 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB698], v55);
    v56 = xpc_null_create();
    xpc_release(v55);
    xpc_release(v56);
    v57 = xpc_string_create(*v21);
    if (!v57)
      v57 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB690], v57);
    v58 = xpc_null_create();
    xpc_release(v57);
    xpc_release(v58);
    if (SHIBYTE(v168[2]) >= 0)
      v59 = (const char *)v168;
    else
      v59 = (const char *)v168[0];
    v60 = xpc_string_create(v59);
    if (!v60)
      v60 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBA20], v60);
    v61 = xpc_null_create();
    xpc_release(v60);
    xpc_release(v61);
    v62 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB548]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    if (v62)
      xpc_retain(v62);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v63);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v170;
    else
      v64 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v65 = xpc_string_create((const char *)v64);
    if (!v65)
      v65 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBB58], v65);
    v66 = xpc_null_create();
    xpc_release(v65);
    xpc_release(v66);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    xpc_release(v165.__r_.__value_.__l.__data_);
    memset(&v170, 170, sizeof(v170));
    v67 = (const char *)*MEMORY[0x1E0CFB538];
    v68 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB538]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
    if (v68)
      xpc_retain(v68);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v69);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v170;
    else
      v70 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v71 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (!strncasecmp((const char *)v70, (const char *)*MEMORY[0x1E0CFB590], v71))
    {
      v72 = xpc_dictionary_get_value((xpc_object_t)a1[3], v67);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      if (v72)
        xpc_retain(v72);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v73);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v165;
      else
        v74 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v75 = xpc_string_create((const char *)v74);
      if (!v75)
        v75 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBA18], v75);
      v76 = xpc_null_create();
      xpc_release(v75);
      xpc_release(v76);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
      v77 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB8D0]);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
      if (v77)
        xpc_retain(v77);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v78);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = &v165;
      else
        v79 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v80 = xpc_string_create((const char *)v79);
      if (!v80)
        v80 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBD00], v80);
      v81 = xpc_null_create();
      xpc_release(v80);
      xpc_release(v81);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
      v82 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB770]);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
      if (v82)
        xpc_retain(v82);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v83);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = &v165;
      else
        v84 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v85 = xpc_string_create((const char *)v84);
      if (!v85)
        v85 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBBE8], v85);
      v86 = xpc_null_create();
      xpc_release(v85);
      xpc_release(v86);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
    }
    v87 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB780]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    if (v87)
      xpc_retain(v87);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v88 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v89 = xpc_BOOL_create(v88);
    if (!v89)
      v89 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBA10], v89);
    v90 = xpc_null_create();
    xpc_release(v89);
    xpc_release(v90);
    xpc_release(v165.__r_.__value_.__l.__data_);
    v91 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB798]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
    if (v91)
      xpc_retain(v91);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v92 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v93 = xpc_BOOL_create(v92);
    if (!v93)
      v93 = xpc_null_create();
    v94 = (const char *)*MEMORY[0x1E0CFB920];
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB920], v93);
    v95 = xpc_null_create();
    xpc_release(v93);
    xpc_release(v95);
    xpc_release(v165.__r_.__value_.__l.__data_);
    v96 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB790]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
    if (v96)
      xpc_retain(v96);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v97 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v98 = xpc_BOOL_create(v97);
    if (!v98)
      v98 = xpc_null_create();
    v99 = (const char *)*MEMORY[0x1E0CFB918];
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB918], v98);
    v100 = xpc_null_create();
    xpc_release(v98);
    xpc_release(v100);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(v3 + 216))
    {
      v101 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v165.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF335000, v101, OS_LOG_TYPE_DEFAULT, "#I Setting SCD and COF flags due to problem reaching helper daemon during shutdown", (uint8_t *)&v165, 2u);
      }
      v102 = xpc_BOOL_create(1);
      if (!v102)
        v102 = xpc_null_create();
      xpc_dictionary_set_value(v48, v94, v102);
      v103 = xpc_null_create();
      xpc_release(v102);
      xpc_release(v103);
      v104 = xpc_BOOL_create(1);
      if (!v104)
        v104 = xpc_null_create();
      xpc_dictionary_set_value(v48, v99, v104);
      v105 = xpc_null_create();
      xpc_release(v104);
      xpc_release(v105);
    }
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  v106 = operator new(0x30uLL);
  v159 = v106;
  v160 = xmmword_1BF5456F0;
  strcpy((char *)v106, "com.apple.AppleBasebandManager.data.plist");
  LogTracker::copyPreference(v3, &v159, &__p);
  operator delete(v106);
  v107 = *(_QWORD **)(v3 + 152);
  if (v107 != (_QWORD *)(v3 + 160))
  {
    do
    {
      v109 = (xpc_object_t *)v107[7];
      v110 = *v109;
      if (*v109)
      {
        xpc_retain(*v109);
        v111 = (const char *)(v107 + 4);
        if (*((char *)v107 + 55) < 0)
          goto LABEL_191;
      }
      else
      {
        v110 = xpc_null_create();
        v111 = (const char *)(v107 + 4);
        if (*((char *)v107 + 55) < 0)
LABEL_191:
          v111 = *(const char **)v111;
      }
      xpc_dictionary_set_value(__p, v111, v110);
      v112 = xpc_null_create();
      xpc_release(v110);
      xpc_release(v112);
      v113 = xpc_null_create();
      v114 = (void **)v107[7];
      v115 = xpc_null_create();
      v116 = *v114;
      *v114 = v113;
      xpc_release(v116);
      xpc_release(v115);
      v117 = *(NSObject **)(v3 + 176);
      if (v117)
      {
        dispatch_retain(*(dispatch_object_t *)(v3 + 176));
        dispatch_group_enter(v117);
      }
      v118 = v107[7];
      v119 = *(NSObject **)(v118 + 8);
      *(_QWORD *)(v118 + 8) = v117;
      if (v119)
      {
        dispatch_group_leave(v119);
        dispatch_release(v119);
      }
      v120 = (_QWORD *)v107[1];
      if (v120)
      {
        do
        {
          v121 = v120;
          v120 = (_QWORD *)*v120;
        }
        while (v120);
      }
      else
      {
        do
        {
          v121 = (_QWORD *)v107[2];
          v122 = *v121 == (_QWORD)v107;
          v107 = v121;
        }
        while (!v122);
      }
      v107 = v121;
    }
    while (v121 != (_QWORD *)(v3 + 160));
  }
  if (v48)
  {
    xpc_retain(v48);
    v108 = v48;
  }
  else
  {
    v108 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E0CFB558], v108);
  v123 = xpc_null_create();
  xpc_release(v108);
  xpc_release(v123);
  LogTracker::getConfiguration((LogTracker *)v3, &value);
  v124 = __p;
  v125 = value;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E0CFB7E0], value);
  v126 = xpc_null_create();
  value = v126;
  xpc_release(v125);
  xpc_release(v126);
  value = 0;
  v127 = operator new(0x28uLL);
  v155 = v127;
  v156 = xmmword_1BF545700;
  strcpy((char *)v127, "com.apple.AppleBasebandManager.plist");
  LogTracker::copyPreference(v3, &v155, &v157);
  v128 = v157;
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E0CFBC08], v157);
  v129 = xpc_null_create();
  v157 = v129;
  xpc_release(v128);
  xpc_release(v129);
  v157 = 0;
  operator delete(v127);
  v130 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v131 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v130);
    v132 = *(_OWORD *)&v165.__r_.__value_.__l.__data_;
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = 0uLL;
    v133 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v132;
    if (v133)
    {
      v134 = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = (std::__shared_weak_count *)v165.__r_.__value_.__l.__size_;
    if (v165.__r_.__value_.__l.__size_)
    {
      v137 = (unint64_t *)(v165.__r_.__value_.__l.__size_ + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v131 = off_1ED70FC60;
  }
  v139 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  v164.__r_.__value_.__r.__words[0] = v131;
  v164.__r_.__value_.__l.__size_ = *(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v140 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v131 + 80))(&v170, v131);
  if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = &v170;
  else
    v142 = (std::string *)v170.__r_.__value_.__r.__words[0];
  v143 = xpc_string_create((const char *)v142);
  if (!v143)
    v143 = xpc_null_create();
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E0CFBA48], v143);
  v144 = xpc_null_create();
  xpc_release(v143);
  xpc_release(v144);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v170.__r_.__value_.__l.__data_);
    if (!v139)
      goto LABEL_220;
  }
  else if (!v139)
  {
    goto LABEL_220;
  }
  v145 = (unint64_t *)&v139->__shared_owners_;
  do
    v146 = __ldaxr(v145);
  while (__stlxr(v146 - 1, v145));
  if (v146)
  {
LABEL_220:
    v147 = __p;
    v154 = __p;
    if (__p)
      goto LABEL_221;
LABEL_224:
    v154 = xpc_null_create();
    v148 = SHIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_222;
    goto LABEL_225;
  }
  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
  std::__shared_weak_count::__release_weak(v139);
  v147 = __p;
  v154 = __p;
  if (!__p)
    goto LABEL_224;
LABEL_221:
  xpc_retain(v147);
  v148 = SHIBYTE(object.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_222:
    v153 = object;
    goto LABEL_226;
  }
LABEL_225:
  std::string::__init_copy_ctor_external(&v153, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
LABEL_226:
  v149 = util::writeJSON();
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  xpc_release(v154);
  v154 = 0;
  v150 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
  {
    if (((MEMORY[0x1C3B8A86C](v147) == v47) & v149) != 0)
      v151 = "Succeeded";
    else
      v151 = "Failed";
    p_object = (std::string *)object.__r_.__value_.__r.__words[0];
    if (v148 >= 0)
      p_object = &object;
    LODWORD(v170.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = (std::string::size_type)v151;
    WORD2(v170.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v170.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_object;
    _os_log_impl(&dword_1BF335000, v150, OS_LOG_TYPE_DEFAULT, "#I %s to generate log summary: %s", (uint8_t *)&v170, 0x16u);
  }
  xpc_release(v147);
  xpc_release(v48);
  if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_237;
LABEL_241:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v168[2]) & 0x80000000) == 0)
    {
LABEL_238:
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        return;
LABEL_243:
      operator delete(v169[0]);
      return;
    }
    goto LABEL_242;
  }
  operator delete(object.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_241;
LABEL_237:
  if ((SHIBYTE(v168[2]) & 0x80000000) == 0)
    goto LABEL_238;
LABEL_242:
  operator delete(v168[0]);
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_243;
}

void sub_1BF486CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,xpc_object_t object,uint64_t a31,int a32,__int16 a33,char a34,char a35,xpc_object_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(_QWORD *)(v2 + 72) = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(_QWORD *)(v2 + 40) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  xpc_object_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v20;
  xpc_object_t v21;
  NSObject *v22;

  v20 = a1;
  v3 = *(_QWORD **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v5))
  {
    v6 = v3[26];
    v22 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    v7 = *(xpc_object_t *)(a1 + 8);
    v21 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      v7 = xpc_null_create();
      v21 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v22, &v21);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  v8 = v3[26];
  v9 = v3[17];
  v10 = operator new(0x40uLL);
  v11 = *(_QWORD *)(a1 + 24);
  *v10 = *(_QWORD *)(a1 + 16);
  v10[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(void **)(a1 + 40);
  v10[2] = *(_QWORD *)(a1 + 32);
  v10[3] = v14;
  if (!v14)
  {
    v10[3] = xpc_null_create();
    v15 = *(_QWORD *)(a1 + 56);
    v10[4] = *(_QWORD *)(a1 + 48);
    v10[5] = v15;
    if (!v15)
      goto LABEL_20;
LABEL_18:
    v16 = (unint64_t *)(v15 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    goto LABEL_20;
  }
  xpc_retain(v14);
  v15 = *(_QWORD *)(a1 + 56);
  v10[4] = *(_QWORD *)(a1 + 48);
  v10[5] = v15;
  if (v15)
    goto LABEL_18;
LABEL_20:
  v18 = *(void **)(a1 + 72);
  v10[6] = *(_QWORD *)(a1 + 64);
  v10[7] = v18;
  if (v18)
    xpc_retain(v18);
  else
    v10[7] = xpc_null_create();
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v20);
}

void sub_1BF4873D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  NSObject *v10;
  void *v11;

  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *value;
  const void *v10;
  size_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  int v20;
  NSObject *v21;
  xpc_object_t v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v31;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v35;

  v31 = a1;
  v4 = a1 + 8;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v3 = *(_QWORD **)(v4 + 8);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 24), (const char *)*MEMORY[0x1E0CFC068]);
      __dst[0] = value;
      if (value)
        xpc_retain(value);
      else
        __dst[0] = xpc_null_create();
      IsInternalBuild = TelephonyUtilIsInternalBuild();
      if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
        CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
      else
        CompressionMode = 2;
      v20 = xpc::dyn_cast_or_default((xpc *)__dst, (const object *)CompressionMode);
      xpc_release(__dst[0]);
      if (v20)
      {
        v21 = v3[26];
        __dst[0] = v21;
        if (v21)
        {
          dispatch_retain(v21);
          dispatch_group_enter(v21);
        }
        v22 = *(xpc_object_t *)(a1 + 24);
        cf = v22;
        if (v22)
        {
          xpc_retain(v22);
        }
        else
        {
          v22 = xpc_null_create();
          cf = v22;
        }
        LogTracker::archiveLogs_sync(v3, __dst, (xpc_object_t *)&cf);
        xpc_release(v22);
        cf = 0;
        if (v21)
        {
          dispatch_group_leave(v21);
          dispatch_release(v21);
        }
      }
      v23 = v3[26];
      v24 = v3[17];
      v25 = operator new(0x20uLL);
      v26 = *(_QWORD *)(a1 + 40);
      *v25 = *(_QWORD *)(a1 + 32);
      v25[1] = v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 16);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(void **)(a1 + 56);
      v25[2] = *(_QWORD *)(a1 + 48);
      v25[3] = v29;
      if (v29)
        xpc_retain(v29);
      else
        v25[3] = xpc_null_create();
      dispatch_group_notify_f(v23, v24, v25, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v31);
    }
  }
  else
  {
    v6 = 0;
  }
  v10 = (const void *)*MEMORY[0x1E0CFBC70];
  v11 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __dst[1] = v12;
    v35 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v35) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_19;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_19:
  *((_BYTE *)&v12->isa + (_QWORD)v13) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v31);
}

void sub_1BF4876F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  NSObject *v17;
  void *v18;

  xpc_release(v18);
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 56));
    *(_QWORD *)(v2 + 56) = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  xpc_object_t value;
  const char *v11;
  const void *v12;
  size_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  CFTypeRef *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const char *v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  const void *v32;
  size_t v33;
  void *v34;
  void *v35;
  const object *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  CFTypeID v40;
  NSObject *v41;
  CFTypeRef *v42;
  std::__shared_weak_count *v43;
  void *v44;
  xpc_object_t v45;
  void *aBlock[2];
  unint64_t v47;
  xpc_object_t object;
  CFTypeRef cf[3];
  void *__dst[3];
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)v4 + 1);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  v5 = std::__shared_weak_count::lock(v2);
  v6 = v5;
  if (!v5 || !*(_QWORD *)a1)
  {
LABEL_11:
    v12 = (const void *)*MEMORY[0x1E0CFBC70];
    v13 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = (void *)v13;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      v15 = (void **)operator new(v16 + 1);
      __dst[1] = v14;
      __dst[2] = (void *)(v17 | 0x8000000000000000);
      __dst[0] = v15;
    }
    else
    {
      HIBYTE(__dst[2]) = v13;
      v15 = __dst;
      if (!v13)
        goto LABEL_19;
    }
    memmove(v15, v12, (size_t)v14);
LABEL_19:
    *((_BYTE *)v14 + (_QWORD)v15) = 0;
    cf[0] = 0;
    aBlock[0] = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, cf, (const void **)aBlock);
    if (aBlock[0])
      _Block_release(aBlock[0]);
    if (cf[0])
      CFRelease(cf[0]);
    if (SHIBYTE(__dst[2]) < 0)
      operator delete(__dst[0]);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    goto LABEL_82;
  }
  v7 = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  memset(__dst, 170, sizeof(__dst));
  v9 = (const char *)*MEMORY[0x1E0CFB930];
  value = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x1E0CFB930]);
  cf[0] = value;
  if (value)
    xpc_retain(value);
  else
    cf[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)cf, (const object *)"", v11);
  xpc_release((xpc_object_t)cf[0]);
  memset(cf, 170, sizeof(cf));
  v20 = (const char *)*MEMORY[0x1E0CFB370];
  v21 = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x1E0CFB370]);
  object = v21;
  if (v21)
    xpc_retain(v21);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&v51);
  Timestamp::asString((uint64_t)&v51, 0, 9, aBlock);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v47) < 0)
    operator delete(aBlock[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v51, *((_QWORD **)&v51 + 1));
  xpc_release(object);
  v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v22) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v22);
      v23 = v22;
    }
    else
    {
      v23 = xpc_null_create();
    }
  }
  else
  {
    v23 = xpc_null_create();
    v22 = 0;
  }
  xpc_release(v22);
  if (SHIBYTE(cf[2]) >= 0)
    v24 = cf;
  else
    v24 = (CFTypeRef *)cf[0];
  v25 = xpc_string_create((const char *)v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v23, v20, v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  if (SHIBYTE(__dst[2]) >= 0)
    v27 = (const char *)__dst;
  else
    v27 = (const char *)__dst[0];
  v28 = xpc_string_create(v27);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v23, v9, v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  v30 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB6A0], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v32 = (const void *)*MEMORY[0x1E0CFBC70];
  v33 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v37 = v33 | 7;
    v38 = v37 + 1;
    v35 = operator new(v37 + 1);
    aBlock[1] = v34;
    v47 = v38 | 0x8000000000000000;
    aBlock[0] = v35;
LABEL_62:
    memmove(v35, v32, (size_t)v34);
    *((_BYTE *)v34 + (_QWORD)v35) = 0;
    v45 = v23;
    if (v23)
      goto LABEL_58;
    goto LABEL_63;
  }
  HIBYTE(v47) = v33;
  v35 = aBlock;
  if (v33)
    goto LABEL_62;
  LOBYTE(aBlock[0]) = 0;
  v45 = v23;
  if (v23)
  {
LABEL_58:
    xpc_retain(v23);
    goto LABEL_64;
  }
LABEL_63:
  v45 = xpc_null_create();
LABEL_64:
  xpc::bridge((xpc *)&v45, v36);
  v39 = (void *)v51;
  if ((_QWORD)v51 && (v40 = CFGetTypeID((CFTypeRef)v51), v40 == CFDictionaryGetTypeID()))
  {
    object = v39;
    CFRetain(v39);
  }
  else
  {
    object = 0;
  }
  v44 = 0;
  Service::broadcastEvent(v3, (uint64_t)aBlock, (const void **)&object, (const void **)&v44);
  if (v44)
    _Block_release(v44);
  if (object)
    CFRelease(object);
  if ((_QWORD)v51)
    CFRelease((CFTypeRef)v51);
  xpc_release(v45);
  if (SHIBYTE(v47) < 0)
    operator delete(aBlock[0]);
  v41 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v42 = cf;
    if (SHIBYTE(cf[2]) < 0)
      v42 = (CFTypeRef *)cf[0];
    LODWORD(v51) = 136315138;
    *(_QWORD *)((char *)&v51 + 4) = v42;
    _os_log_impl(&dword_1BF335000, v41, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&v51, 0xCu);
  }
  xpc_release(v23);
  if (SHIBYTE(cf[2]) < 0)
  {
    operator delete((void *)cf[0]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_82;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(__dst[0]);
LABEL_82:
  xpc_release(*((xpc_object_t *)a1 + 3));
  *((_QWORD *)a1 + 3) = 0;
  v43 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  operator delete(a1);
}

void sub_1BF487E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,CFTypeRef a30,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    *v1 = &off_1E7906E20;
    v2 = v1[3];
    if (!v2)
    {
LABEL_18:
      MEMORY[0x1C3B89240](v1 + 1);
      operator delete(v1);
      return;
    }
    v3 = v1[4];
    v4 = (void *)v1[3];
    if (v3 == v2)
    {
LABEL_17:
      v1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*(char *)(v3 - 65) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v3 - 64));
      if ((*(char *)(v3 - 65) & 0x80000000) == 0)
      {
LABEL_9:
        if (*(char *)(v3 - 89) < 0)
          goto LABEL_14;
        goto LABEL_5;
      }
LABEL_13:
      operator delete(*(void **)(v3 - 88));
      if (*(char *)(v3 - 89) < 0)
LABEL_14:
        operator delete(*(void **)(v3 - 112));
LABEL_5:
      v3 -= 112;
      if (v3 == v2)
      {
        v4 = (void *)v1[3];
        goto LABEL_17;
      }
    }
  }
}

uint64_t std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF54548DLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF54548DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF54548DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF54548DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  const void *v22;
  NSObject *object;
  xpc_object_t v24;
  _QWORD aBlock[6];
  std::__shared_weak_count *v26;
  uint64_t v27;
  xpc_object_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p;
  char v32;
  xpc_object_t v33;
  uint64_t v34;
  __int128 block;
  void (*v36)(uint64_t);
  void *v37;
  __int128 *v38;

  v2 = a1[2];
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke;
  aBlock[3] = &__block_descriptor_280_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v7 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  aBlock[4] = v2;
  aBlock[5] = v7;
  v26 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = (void *)a1[4];
  v27 = a1[3];
  v28 = v10;
  if (v10)
    xpc_retain(v10);
  else
    v28 = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&v29, (uint64_t)(a1 + 5));
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(v2 + 136);
  if (v12)
    dispatch_retain(v12);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = v5;
  *((_QWORD *)&block + 1) = 0x40000000;
  v36 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v37 = &__block_descriptor_tmp_13_2;
  v38 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_20;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_20;
  }
  v15 = (unint64_t *)(v14 + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
LABEL_20:
  abm::HelperClient::create();
  v17 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (!*((_QWORD *)&block + 1))
    goto LABEL_24;
  v18 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v24 = v4;
    if (v4)
    {
LABEL_25:
      xpc_retain(v4);
      if (v11)
        goto LABEL_26;
      goto LABEL_49;
    }
  }
  else
  {
LABEL_24:
    v24 = v4;
    if (v4)
      goto LABEL_25;
  }
  v24 = xpc_null_create();
  if (v11)
  {
LABEL_26:
    v22 = _Block_copy(v11);
    object = v12;
    if (!v12)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_49:
  v22 = 0;
  object = v12;
  if (v12)
LABEL_27:
    dispatch_retain(v12);
LABEL_28:
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v22)
    _Block_release(v22);
  xpc_release(v24);
  do
    v20 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v20 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v20)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v34);
  xpc_release(v33);
  v33 = 0;
  if (v32 < 0)
    operator delete(__p);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  xpc_release(v28);
  v28 = 0;
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  xpc_release(v4);
  v21 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)a1);
  operator delete(v21);
}

void sub_1BF4885F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, dispatch_object_t object, xpc_object_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,xpc_object_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,xpc_object_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v36;
  const void *v37;
  NSObject *v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(a12);
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (v38)
    dispatch_release(v38);
  if (v37)
    _Block_release(v37);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&a35);
  xpc_release(a34);
  if (a33 < 0)
    operator delete(__p);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  xpc_release(a23);
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  xpc_release(v36);
  v42 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(v35);
  operator delete(v42);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  _BOOL4 v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;
  void *v18;
  void **v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          v19 = v21 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v23 = v19;
          _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Unable to reach baseband tracing task (error: %s)", buf, 0xCu);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        v13 = 1;
      }
      else
      {
        v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        v13 = 0;
        if (v14)
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I Successfully reached baseband tracing task", (uint8_t *)__p, 2u);
          v13 = 0;
        }
      }
      *(_BYTE *)(v5 + 216) = v13;
      v15 = *(NSObject **)(v5 + 208);
      v16 = *(NSObject **)(v5 + 136);
      v17 = operator new(0xE0uLL);
      v18 = (void *)a1[8];
      *v17 = a1[7];
      v17[1] = v18;
      if (v18)
        xpc_retain(v18);
      else
        v17[1] = xpc_null_create();
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(v17 + 2), (uint64_t)(a1 + 9));
      dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    }
  }
}

void sub_1BF48891C(_Unwind_Exception *a1)
{
  xpc_object_t *v1;

  xpc_release(v1[1]);
  v1[1] = 0;
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF48893C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  if (v7)
    xpc_retain(v7);
  else
    a1[8] = xpc_null_create();
  return LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
}

void sub_1BF4889C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(v1 + 64));
  *(_QWORD *)(v1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 136);
  xpc_release(*(xpc_object_t *)(a1 + 128));
  *(_QWORD *)(a1 + 128) = 0;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  xpc_object_t v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v12;
  xpc_object_t v13;
  NSObject *v14;

  v12 = a1;
  v3 = *(_QWORD **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v5))
  {
    v6 = v3[26];
    v14 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    v7 = *(xpc_object_t *)(a1 + 8);
    v13 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      v7 = xpc_null_create();
      v13 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v14, &v13);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  v8 = v3[26];
  v9 = v3[17];
  v10 = operator new(0xD0uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)v10, a1 + 16);
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&v12);
}

void sub_1BF488B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  NSObject *v10;
  void *v11;

  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v2 + 80);
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(_QWORD *)(v2 + 72) = 0;
    if (*(char *)(v2 + 71) < 0)
      operator delete(*(void **)(v2 + 48));
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  size_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  size_t v18;
  char *v19;
  NSObject *v20;
  xpc_object_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v33;

  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!*((_DWORD *)a1 + 6))
          goto LABEL_46;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
        if (!*((_DWORD *)a1 + 6))
        {
LABEL_46:
          v22 = v3[26];
          v23 = v3[17];
          v24 = operator new(0x90uLL);
          v25 = *((_QWORD *)a1 + 9);
          *v24 = *((_QWORD *)a1 + 8);
          v24[1] = v25;
          if (v25)
          {
            v26 = (unint64_t *)(v25 + 16);
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v28 = (void *)*((_QWORD *)a1 + 11);
          v24[2] = *((_QWORD *)a1 + 10);
          v24[3] = v28;
          if (v28)
            xpc_retain(v28);
          else
            v24[3] = xpc_null_create();
          LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)(v24 + 4), (uint64_t)(a1 + 96));
          dispatch_group_notify_f(v22, v23, v24, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
          goto LABEL_53;
        }
      }
      if (!a1[28])
      {
        v17 = a1[55];
        v18 = v17 >= 0 ? a1[55] : *((_QWORD *)a1 + 5);
        if (v18 == strlen((const char *)*MEMORY[0x1E0CFB6C8]))
        {
          v19 = v17 >= 0 ? a1 + 32 : (char *)*((_QWORD *)a1 + 4);
          if (!memcmp(v19, (const void *)*MEMORY[0x1E0CFB6C8], v18))
          {
            v20 = v3[26];
            __dst[0] = v20;
            if (v20)
            {
              dispatch_retain(v20);
              dispatch_group_enter(v20);
            }
            v21 = (xpc_object_t)*((_QWORD *)a1 + 7);
            cf = v21;
            if (v21)
            {
              xpc_retain(v21);
            }
            else
            {
              v21 = xpc_null_create();
              cf = v21;
            }
            LogTracker::archiveLogs_sync(v3, __dst, (xpc_object_t *)&cf);
            xpc_release(v21);
            cf = 0;
            if (v20)
            {
              dispatch_group_leave(v20);
              dispatch_release(v20);
            }
          }
        }
      }
      goto LABEL_46;
    }
  }
  else
  {
    v6 = 0;
  }
  v9 = (const void *)*MEMORY[0x1E0CFBC70];
  v10 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __dst[1] = v11;
    v33 = v14 | 0x8000000000000000;
    __dst[0] = v12;
  }
  else
  {
    HIBYTE(v33) = v10;
    v12 = __dst;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v12, v9, (size_t)v11);
LABEL_18:
  *((_BYTE *)&v11->isa + (_QWORD)v12) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_53:
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)(a1 + 64));
  xpc_release(*((xpc_object_t *)a1 + 7));
  *((_QWORD *)a1 + 7) = 0;
  if (a1[55] < 0)
    operator delete(*((void **)a1 + 4));
  v29 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  operator delete(a1);
}

void sub_1BF488F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  NSObject *v18;
  void *v19;
  std::__shared_weak_count *v21;

  xpc_release(v19);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17 + 64);
  xpc_release(*(xpc_object_t *)(v17 + 56));
  *(_QWORD *)(v17 + 56) = 0;
  if (*(char *)(v17 + 55) < 0)
  {
    operator delete(*(void **)(v17 + 32));
    v21 = *(std::__shared_weak_count **)(v17 + 8);
    if (!v21)
    {
LABEL_5:
      operator delete((void *)v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v21 = *(std::__shared_weak_count **)(v17 + 8);
    if (!v21)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v21);
  operator delete((void *)v17);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  xpc_object_t v10;
  const void *v11;
  size_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v26;

  v4 = a1 + 1;
  v2 = (std::__shared_weak_count *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      v9 = v3[26];
      __dst[0] = v9;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      v10 = (xpc_object_t)a1[3];
      cf = v10;
      if (v10)
      {
        xpc_retain(v10);
      }
      else
      {
        v10 = xpc_null_create();
        cf = v10;
      }
      LogTracker::jsonSummary_sync(v3, __dst, (xpc_object_t *)&cf);
      xpc_release(v10);
      if (v9)
      {
        dispatch_group_leave(v9);
        dispatch_release(v9);
      }
      v19 = v3[26];
      v20 = v3[17];
      v21 = operator new(0x70uLL);
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v21, (uint64_t)(a1 + 4));
      dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      goto LABEL_36;
    }
  }
  else
  {
    v6 = 0;
  }
  v11 = (const void *)*MEMORY[0x1E0CFBC70];
  v12 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __dst[1] = v13;
    v26 = v16 | 0x8000000000000000;
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(v26) = v12;
    v14 = __dst;
    if (!v12)
      goto LABEL_21;
  }
  memmove(v14, v11, (size_t)v13);
LABEL_21:
  *((_BYTE *)&v13->isa + (_QWORD)v14) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_36:
  v22 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)a1);
  operator delete(v22);
}

void sub_1BF4892F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  operator delete(v2);
  v4 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1BF489310(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1BF48932C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v21;
  void *v22;

  xpc_release(v19);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
    v21 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17);
    operator delete(v21);
    _Unwind_Resume(a1);
  }
  v22 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  void *v18;
  xpc_object_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  std::string *v30;
  std::string *v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  std::string *v35;
  uint64_t v37;
  void *aBlock;
  CFTypeRef cf;
  uint64_t (**__dst)();
  size_t v41;
  unint64_t v42;
  void **p_dst;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = a1;
  v4 = a1 + 8;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v3 = *(_QWORD *)(v4 + 8);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!*(_BYTE *)(a1 + 24))
        {
LABEL_30:
          if (*(_DWORD *)(a1 + 28) != 2)
          {
            v20 = *(void **)(a1 + 32);
            cf = v20;
            if (v20)
              xpc_retain(v20);
            else
              cf = xpc_null_create();
            __dst = 0;
            v41 = 0;
            v42 = 0;
            TapToRadar::createRadarIfPossible((xpc_object_t *)&cf, (uint64_t)&__dst);
            if (SHIBYTE(v42) < 0)
              operator delete(__dst);
            xpc_release((xpc_object_t)cf);
            cf = 0;
            goto LABEL_52;
          }
          v17 = *(NSObject **)(v3 + 208);
          cf = v17;
          if (v17)
          {
            dispatch_retain(v17);
            dispatch_group_enter(v17);
          }
          v18 = *(void **)(a1 + 32);
          aBlock = v18;
          if (v18)
          {
            xpc_retain(v18);
            v19 = *(xpc_object_t *)(a1 + 32);
            if (v19)
            {
LABEL_35:
              xpc_retain(v19);
              __dst = off_1E79080A8;
              v41 = v3;
              v42 = (unint64_t)v19;
              p_dst = 0;
              goto LABEL_40;
            }
          }
          else
          {
            aBlock = xpc_null_create();
            v19 = *(xpc_object_t *)(a1 + 32);
            if (v19)
              goto LABEL_35;
          }
          v19 = xpc_null_create();
          __dst = off_1E79080A8;
          v41 = v3;
          v42 = (unint64_t)v19;
          p_dst = 0;
          if (!v19)
          {
            v19 = 0;
            v42 = (unint64_t)xpc_null_create();
LABEL_41:
            p_dst = (void **)&__dst;
            LogTracker::systemLog_sync(v3, (dispatch_group_t *)&cf, &aBlock, &__dst);
            v26 = (uint64_t (***)())p_dst;
            if (p_dst == (void **)&__dst)
            {
              v27 = 4;
              v26 = &__dst;
            }
            else
            {
              if (!p_dst)
                goto LABEL_50;
              v27 = 5;
            }
            ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v26)[v27])(v26, v21, v22, v23, v24, v25);
LABEL_50:
            xpc_release(v19);
            xpc_release(aBlock);
            if (v17)
            {
              dispatch_group_leave(v17);
              dispatch_release(v17);
            }
            goto LABEL_52;
          }
LABEL_40:
          xpc_retain(v19);
          goto LABEL_41;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
        if (!*(_BYTE *)(a1 + 24))
          goto LABEL_30;
      }
LABEL_52:
      v28 = *(NSObject **)(v3 + 208);
      v29 = *(NSObject **)(v3 + 136);
      v30 = (std::string *)operator new(0x48uLL);
      v31 = v30;
      v32 = *(_QWORD *)(a1 + 48);
      v30->__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 40);
      v30->__r_.__value_.__l.__size_ = v32;
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 16);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v30->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(v30 + 1, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      }
      else
      {
        *(_OWORD *)&v30[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
        v30[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 80);
      }
      v35 = v31 + 2;
      if (*(char *)(a1 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
      }
      else
      {
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 88);
        v31[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 104);
      }
      dispatch_group_notify_f(v28, v29, v31, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v37);
    }
  }
  else
  {
    v6 = 0;
  }
  v9 = (const void *)*MEMORY[0x1E0CFBC70];
  v10 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (uint64_t (***)())operator new(v13 + 1);
    v41 = v11;
    v42 = v14 | 0x8000000000000000;
    __dst = (uint64_t (**)())v12;
  }
  else
  {
    HIBYTE(v42) = v10;
    v12 = &__dst;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v12, v9, v11);
LABEL_18:
  *((_BYTE *)v12 + v11) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent(v3, (uint64_t)&__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v42) < 0)
    operator delete(__dst);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v37);
}

void sub_1BF4897D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 87) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_11:
    operator delete(*(void **)(v2 + 64));
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 88));
  if (*(char *)(v2 + 87) < 0)
    goto LABEL_11;
LABEL_4:
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
LABEL_5:
    std::__shared_weak_count::__release_weak(v3);
LABEL_6:
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = 0;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete((void *)v2);
  return a1;
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E79080A8;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(xpc_object_t *a1)
{
  *a1 = off_1E79080A8;
  xpc_release(a1[2]);
  operator delete(a1);
}

_QWORD *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  *v2 = off_1E79080A8;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v2[2] = xpc_null_create();
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  xpc_object_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  *a2 = off_1E79080A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  a2[2] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[2]);
  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::operator()(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  int v4;
  void *v5;
  _QWORD *v6;
  xpc_object_t value;
  const char *v8;
  NSObject *v9;
  char *v10;
  char v11;
  std::string *v12;
  int64_t v13;
  int64_t v14;
  int64_t size;
  void *v16;
  char *v17;
  int v18;
  std::string *v19;
  int64_t v20;
  char *v21;
  char *v22;
  NSObject *v23;
  xpc_object_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  std::string __p;
  NSObject *v30;
  std::string v31;
  uint8_t buf[8];
  xpc_object_t v33;
  uint8_t *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  *a3 = xpc_null_create();
  v6 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    memset(&v31, 170, sizeof(v31));
    value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CF1038]);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v8);
    xpc_release(*(xpc_object_t *)buf);
    v10 = (char *)*MEMORY[0x1E0D01A38];
    v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v31;
    else
      v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
    v13 = strlen((const char *)*MEMORY[0x1E0D01A38]);
    if (v13)
    {
      v14 = v13;
      size = v31.__r_.__value_.__l.__size_;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      if (size >= v13)
      {
        v17 = (char *)v12 + size;
        v18 = *v10;
        v19 = v12;
        do
        {
          v20 = size - v14;
          if (v20 == -1)
            break;
          v21 = (char *)memchr(v19, v18, v20 + 1);
          if (!v21)
            break;
          v22 = v21;
          if (!memcmp(v21, v10, v14))
          {
            if (v22 == v17 || v22 - (char *)v12 == -1)
              break;
            goto LABEL_26;
          }
          v19 = (std::string *)(v22 + 1);
          size = v17 - (v22 + 1);
        }
        while (size >= v14);
      }
      v16 = *(void **)(a1 + 16);
      *(_QWORD *)buf = v16;
      if (v16)
        xpc_retain(v16);
      else
        *(_QWORD *)buf = xpc_null_create();
      TapToRadar::createRadarIfPossible((xpc_object_t *)buf, (uint64_t)&v31);
      xpc_release(*(xpc_object_t *)buf);
      *(_QWORD *)buf = 0;
      goto LABEL_44;
    }
LABEL_26:
    v23 = v6[26];
    v30 = v23;
    if (v23)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
      v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0)
      std::string::__init_copy_ctor_external(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    else
      __p = v31;
    v24 = *(xpc_object_t *)(a1 + 16);
    if (v24)
    {
      xpc_retain(v24);
      v34 = 0;
      *(_QWORD *)buf = off_1E7908128;
      v33 = v24;
    }
    else
    {
      v24 = xpc_null_create();
      v34 = 0;
      *(_QWORD *)buf = off_1E7908128;
      v33 = v24;
      if (!v24)
      {
        v24 = 0;
        v33 = xpc_null_create();
LABEL_35:
        v34 = buf;
        LogTracker::processLogarchive_sync(v6, &v30, (const char *)&__p, buf);
        v27 = v34;
        if (v34 == buf)
        {
          v28 = 4;
          v27 = buf;
        }
        else
        {
          if (!v34)
          {
LABEL_40:
            xpc_release(v24);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v23)
            {
              dispatch_group_leave(v23);
              dispatch_release(v23);
            }
LABEL_44:
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
            goto LABEL_46;
          }
          v28 = 5;
        }
        (*(void (**)(uint8_t *, uint64_t, uint64_t))(*(_QWORD *)v27 + 8 * v28))(v27, v25, v26);
        goto LABEL_40;
      }
    }
    xpc_retain(v24);
    goto LABEL_35;
  }
  v9 = v6[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, "Failed to collect sysdiagnose!", buf, 2u);
  }
LABEL_46:
  xpc_release(v5);
}

void sub_1BF489E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  NSObject *v27;

  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  if (a22 < 0)
    operator delete(__p);
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target_type()
{
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7908128;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(xpc_object_t *a1)
{
  *a1 = off_1E7908128;
  xpc_release(a1[1]);
  operator delete(a1);
}

_QWORD *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = operator new(0x10uLL);
  v3 = *(void **)(a1 + 8);
  *v2 = off_1E7908128;
  v2[1] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v2[1] = xpc_null_create();
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *v2;
  xpc_object_t result;

  v2 = *(void **)(a1 + 8);
  *a2 = off_1E7908128;
  a2[1] = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  a2[1] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[1]);
  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1)
{
  void *v1;
  void *__p[2];
  uint64_t v3;
  xpc_object_t object;

  v1 = *(void **)(a1 + 8);
  object = v1;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  __p[0] = 0;
  __p[1] = 0;
  v3 = 0;
  TapToRadar::createRadarIfPossible(&object, (uint64_t)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
  xpc_release(object);
}

void sub_1BF48A1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  const char *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  const void *v28;
  size_t v29;
  size_t v30;
  void **p_dst;
  const object *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  CFTypeID v36;
  NSObject *v37;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  void *v40;
  xpc_object_t object;
  void *aBlock;
  void **__dst;
  size_t v44;
  unint64_t v45;
  std::string cf;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)v4 + 1);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v9);
          v10 = v9;
        }
        else
        {
          v10 = xpc_null_create();
        }
      }
      else
      {
        v10 = xpc_null_create();
        v9 = 0;
      }
      xpc_release(v9);
      v19 = (const char **)(a1 + 24);
      v20 = a1 + 24;
      if (a1[47] < 0)
        v20 = *v19;
      v21 = xpc_string_create(v20);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB370], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      v23 = a1 + 48;
      if (a1[71] < 0)
        v23 = *(const char **)v23;
      v24 = xpc_string_create(v23);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB930], v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      v26 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
      if (!v26)
        v26 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB6A0], v26);
      v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      v28 = (const void *)*MEMORY[0x1E0CFBC70];
      v29 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v30 = v29;
      if (v29 >= 0x17)
      {
        v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v33 = v29 | 7;
        v34 = v33 + 1;
        p_dst = (void **)operator new(v33 + 1);
        v44 = v30;
        v45 = v34 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v45) = v29;
        p_dst = (void **)&__dst;
        if (!v29)
        {
          LOBYTE(__dst) = 0;
          object = v10;
          if (v10)
          {
LABEL_48:
            xpc_retain(v10);
LABEL_54:
            xpc::bridge((xpc *)&object, v32);
            v35 = (void *)cf.__r_.__value_.__r.__words[0];
            if (cf.__r_.__value_.__r.__words[0]
              && (v36 = CFGetTypeID(cf.__r_.__value_.__l.__data_), v36 == CFDictionaryGetTypeID()))
            {
              aBlock = v35;
              CFRetain(v35);
            }
            else
            {
              aBlock = 0;
            }
            v40 = 0;
            Service::broadcastEvent(v3, (uint64_t)&__dst, (const void **)&aBlock, (const void **)&v40);
            if (v40)
              _Block_release(v40);
            if (aBlock)
              CFRelease(aBlock);
            if (cf.__r_.__value_.__r.__words[0])
              CFRelease(cf.__r_.__value_.__l.__data_);
            xpc_release(object);
            if (SHIBYTE(v45) < 0)
            {
              operator delete(__dst);
              v37 = *(NSObject **)(v3 + 88);
              if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
LABEL_66:
                if ((a1[47] & 0x80000000) == 0)
                {
LABEL_67:
                  *(_OWORD *)&cf.__r_.__value_.__l.__data_ = *(_OWORD *)v19;
                  cf.__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 5);
LABEL_73:
                  LogTracker::houseKeepingLogs_sync(v3, (const char *)&cf);
                  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(cf.__r_.__value_.__l.__data_);
                  xpc_release(v10);
                  goto LABEL_76;
                }
LABEL_72:
                std::string::__init_copy_ctor_external(&cf, *((const std::string::value_type **)a1 + 3), *((_QWORD *)a1 + 4));
                goto LABEL_73;
              }
            }
            else
            {
              v37 = *(NSObject **)(v3 + 88);
              if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                goto LABEL_66;
            }
            v38 = (std::string::size_type)(a1 + 24);
            if (a1[47] < 0)
              v38 = (std::string::size_type)*v19;
            LODWORD(cf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)cf.__r_.__value_.__r.__words + 4) = v38;
            _os_log_impl(&dword_1BF335000, v37, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&cf, 0xCu);
            if ((a1[47] & 0x80000000) == 0)
              goto LABEL_67;
            goto LABEL_72;
          }
LABEL_53:
          object = xpc_null_create();
          goto LABEL_54;
        }
      }
      memmove(p_dst, v28, v30);
      *((_BYTE *)p_dst + v30) = 0;
      object = v10;
      if (v10)
        goto LABEL_48;
      goto LABEL_53;
    }
  }
  else
  {
    v6 = 0;
  }
  v11 = (const void *)*MEMORY[0x1E0CFBC70];
  v12 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    v44 = v13;
    v45 = v16 | 0x8000000000000000;
    __dst = v14;
  }
  else
  {
    HIBYTE(v45) = v12;
    v14 = (void **)&__dst;
    if (!v12)
      goto LABEL_21;
  }
  memmove(v14, v11, v13);
LABEL_21:
  *((_BYTE *)v14 + v13) = 0;
  cf.__r_.__value_.__r.__words[0] = 0;
  aBlock = 0;
  Service::broadcastEvent(v3, (uint64_t)&__dst, (const void **)&cf.__r_.__value_.__l.__data_, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_76:
  if ((a1[71] & 0x80000000) == 0)
  {
    if ((a1[47] & 0x80000000) == 0)
      goto LABEL_78;
LABEL_82:
    operator delete(*((void **)a1 + 3));
    v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    if (!v39)
      goto LABEL_80;
    goto LABEL_79;
  }
  operator delete(*((void **)a1 + 6));
  if (a1[47] < 0)
    goto LABEL_82;
LABEL_78:
  v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v39)
LABEL_79:
    std::__shared_weak_count::__release_weak(v39);
LABEL_80:
  operator delete(a1);
}

void sub_1BF48A7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object, CFTypeRef cf, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_15()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_46()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance, &dword_1BF335000);
  }
  return result;
}

std::__shared_weak_count_vtbl **TraceCAReporter::create@<X0>(uint64_t a1@<X8>)
{
  TraceCAReporter *v3;

  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v3 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v3);
  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  return std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_1BF48AA7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void TraceCAReporter::TraceCAReporter(TraceCAReporter *this)
{
  NSObject *initially_inactive;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  int v8;
  std::string *v9;
  unint64_t size;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  char v18;
  std::string::size_type v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void **v29;
  std::string *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *v33;
  std::string *v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  int8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  unint64_t v45;
  void ***v46;
  void **v47;
  unint64_t v48;
  const char *v49;
  size_t v50;
  size_t v51;
  void **p_dst;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  char *v69;
  void ***v70;
  void **__dst;
  char *v72;
  unint64_t v73;
  std::string v74;
  void *v75;
  size_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *__p;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v74, "com.apple.telephony.abm", "ca.trace.reporter");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v3 = dispatch_queue_create_with_target_V2("TraceCAReporter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((_QWORD *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((TraceCAReporter *)((char *)this + 32), (const ctu::OsLogLogger *)&__dst);
  MEMORY[0x1C3B89240](&__dst);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v74);
  v4 = (const char *)*MEMORY[0x1E0CFB170];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x1E0CFB170], MEMORY[0x1E0CFC090]);
  v68 = v4;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v78, (char *)*MEMORY[0x1E0CFB178], MEMORY[0x1E0CFB668]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v82, (char *)*MEMORY[0x1E0CFBC00], MEMORY[0x1E0CFB908]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v86, (char *)*MEMORY[0x1E0CFB028], MEMORY[0x1E0CFB0C8]);
  v5 = 0;
  v6 = (_QWORD *)((char *)this + 64);
  v69 = (char *)this + 64;
  v70 = (void ***)((char *)this + 80);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  do
  {
    v7 = &v74 + 2 * v5;
    v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      v9 = &v74 + 2 * v5;
    else
      v9 = (std::string *)v7->__r_.__value_.__r.__words[0];
    if (v8 >= 0)
      size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    else
      size = v7->__r_.__value_.__l.__size_;
    v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, (uint64_t *)v9, size);
    v12 = v11;
    v13 = *((_QWORD *)this + 9);
    if (!v13)
    {
      v15 = 0xAAAAAAAAAAAAAAAALL;
      goto LABEL_63;
    }
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = v11;
      if (v11 >= v13)
        v15 = v11 % v13;
    }
    else
    {
      v15 = (v13 - 1) & v11;
    }
    v16 = *(uint64_t ***)(*v6 + 8 * v15);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v18 >= 0)
          v19 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        else
          v19 = v7->__r_.__value_.__l.__size_;
        if (v18 >= 0)
          v20 = &v74 + 2 * v5;
        else
          v20 = (std::string *)v7->__r_.__value_.__r.__words[0];
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v26 = v17[1];
            if (v26 == v12)
            {
              v27 = *((unsigned __int8 *)v17 + 39);
              if ((v27 & 0x80u) == 0)
                v28 = *((unsigned __int8 *)v17 + 39);
              else
                v28 = v17[3];
              if (v28 == v19)
              {
                v29 = (const void **)(v17 + 2);
                if ((v27 & 0x80) != 0)
                {
                  if (!memcmp(*v29, v20, v17[3]))
                    goto LABEL_7;
                }
                else
                {
                  if (!*((_BYTE *)v17 + 39))
                    goto LABEL_7;
                  v30 = v20;
                  while (*(unsigned __int8 *)v29 == v30->__r_.__value_.__s.__data_[0])
                  {
                    v29 = (const void **)((char *)v29 + 1);
                    v30 = (std::string *)((char *)v30 + 1);
                    if (!--v27)
                      goto LABEL_7;
                  }
                }
              }
            }
            else if ((v26 & (v13 - 1)) != v15)
            {
              goto LABEL_62;
            }
            v17 = (uint64_t *)*v17;
            if (!v17)
              goto LABEL_62;
          }
        }
        while (1)
        {
          v21 = v17[1];
          if (v21 == v12)
          {
            v22 = *((unsigned __int8 *)v17 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v17 + 39);
            else
              v23 = v17[3];
            if (v23 == v19)
            {
              v24 = (const void **)(v17 + 2);
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp(*v24, v20, v17[3]))
                  goto LABEL_7;
              }
              else
              {
                if (!*((_BYTE *)v17 + 39))
                  goto LABEL_7;
                v25 = v20;
                while (*(unsigned __int8 *)v24 == v25->__r_.__value_.__s.__data_[0])
                {
                  v24 = (const void **)((char *)v24 + 1);
                  v25 = (std::string *)((char *)v25 + 1);
                  if (!--v22)
                    goto LABEL_7;
                }
              }
            }
          }
          else
          {
            if (v21 >= v13)
              v21 %= v13;
            if (v21 != v15)
            {
LABEL_62:
              v6 = (_QWORD *)((char *)this + 64);
              break;
            }
          }
          v17 = (uint64_t *)*v17;
          if (!v17)
            goto LABEL_62;
        }
      }
    }
LABEL_63:
    v73 = 0xAAAAAAAAAAAAAAAALL;
    v31 = operator new(0x40uLL);
    v32 = v31;
    __dst = (void **)v31;
    v72 = (char *)this + 80;
    LOBYTE(v73) = 0;
    *v31 = 0;
    v31[1] = v12;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v31 + 2), v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
    }
    else
    {
      *((_OWORD *)v31 + 1) = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v31[4] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    }
    v33 = (std::string *)(v32 + 5);
    v34 = &v74 + 2 * v5 + 1;
    if (SHIBYTE(v7[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v33, v34->__r_.__value_.__l.__data_, *(&v76 + 6 * v5));
    }
    else
    {
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v32[7] = *(&v77 + 6 * v5);
    }
    LOBYTE(v73) = 1;
    v35 = (float)(unint64_t)(*((_QWORD *)this + 11) + 1);
    v36 = *((float *)this + 24);
    if (v13 && (float)(v36 * (float)v13) >= v35)
      goto LABEL_97;
    v37 = (v13 & (v13 - 1)) != 0;
    if (v13 < 3)
      v37 = 1;
    v38 = v37 | (2 * v13);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v41 = *(int8x8_t *)((char *)this + 72);
    if (prime > *(_QWORD *)&v41)
      goto LABEL_81;
    if (prime < *(_QWORD *)&v41)
    {
      v42 = vcvtps_u32_f32((float)*((unint64_t *)this + 11) / *((float *)this + 24));
      if (*(_QWORD *)&v41 < 3uLL || (v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime < *(_QWORD *)&v41)
LABEL_81:
        std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>((uint64_t)v6, prime);
    }
    v13 = *((_QWORD *)this + 9);
    v45 = v13 - 1;
    if ((v13 & (v13 - 1)) == 0)
    {
      v15 = v45 & v12;
      v46 = *(void ****)(*v6 + 8 * (v45 & v12));
      v47 = __dst;
      if (!v46)
        goto LABEL_98;
      goto LABEL_5;
    }
    if (v12 < v13)
    {
      v15 = v12;
LABEL_97:
      v46 = *(void ****)(*v6 + 8 * v15);
      v47 = __dst;
      if (!v46)
        goto LABEL_98;
      goto LABEL_5;
    }
    v15 = v12 % v13;
    v46 = *(void ****)(*v6 + 8 * (v12 % v13));
    v47 = __dst;
    if (!v46)
    {
LABEL_98:
      *v47 = *v70;
      *v70 = __dst;
      *(_QWORD *)(*v6 + 8 * v15) = v70;
      if (*__dst)
      {
        v48 = *((_QWORD *)*__dst + 1);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v48 >= v13)
            v48 %= v13;
        }
        else
        {
          v48 &= v13 - 1;
        }
        *(_QWORD *)(*v6 + 8 * v48) = __dst;
      }
      goto LABEL_6;
    }
LABEL_5:
    *v47 = *v46;
    *v46 = __dst;
LABEL_6:
    ++*((_QWORD *)this + 11);
LABEL_7:
    ++v5;
    v6 = (_QWORD *)((char *)this + 64);
  }
  while (v5 != 4);
  if ((v89 & 0x80000000) == 0)
  {
    v49 = v68;
    if ((v87 & 0x80000000) == 0)
      goto LABEL_108;
LABEL_133:
    operator delete(v86);
    if (v85 < 0)
      goto LABEL_134;
LABEL_109:
    if ((v83 & 0x80000000) == 0)
      goto LABEL_110;
LABEL_135:
    operator delete(v82);
    if (v81 < 0)
      goto LABEL_136;
LABEL_111:
    if ((v79 & 0x80000000) == 0)
      goto LABEL_112;
LABEL_137:
    operator delete(v78);
    if (SHIBYTE(v77) < 0)
      goto LABEL_138;
LABEL_113:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_114;
LABEL_139:
    operator delete(v74.__r_.__value_.__l.__data_);
    goto LABEL_114;
  }
  operator delete(__p);
  v49 = v68;
  if (v87 < 0)
    goto LABEL_133;
LABEL_108:
  if ((v85 & 0x80000000) == 0)
    goto LABEL_109;
LABEL_134:
  operator delete(v84);
  if (v83 < 0)
    goto LABEL_135;
LABEL_110:
  if ((v81 & 0x80000000) == 0)
    goto LABEL_111;
LABEL_136:
  operator delete(v80);
  if (v79 < 0)
    goto LABEL_137;
LABEL_112:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
    goto LABEL_113;
LABEL_138:
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_139;
LABEL_114:
  gettimeofday((timeval *)this + 3, 0);
  v50 = strlen(v49);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v51 = v50;
  if (v50 >= 0x17)
  {
    v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v53 = v50 | 7;
    v54 = v53 + 1;
    p_dst = (void **)operator new(v53 + 1);
    v72 = (char *)v51;
    v73 = v54 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_121;
  }
  HIBYTE(v73) = v50;
  p_dst = (void **)&__dst;
  if (v50)
LABEL_121:
    memmove(p_dst, v49, v51);
  *((_BYTE *)p_dst + v51) = 0;
  memset(&v74, 0, sizeof(v74));
  v55 = prop::bbtrace::get((char *)&__dst, (uint64_t)&v74);
  if ((_DWORD)v55)
    v55 = util::convert<BOOL>(&v74, (BOOL *)this + 40, 0);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73) < 0)
      goto LABEL_141;
  }
  else
  {
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_126;
LABEL_141:
    operator delete(__dst);
  }
LABEL_126:
  if (!capabilities::radio::maverick((capabilities::radio *)v55))
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x1E0D01AE8], MEMORY[0x1E0CFB670]);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
    goto LABEL_155;
  }
  v56 = diag::config::kEnabledDuringSleepKey[0];
  v57 = strlen(diag::config::kEnabledDuringSleepKey[0]);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v58 = v57;
  if (v57 >= 0x17)
  {
    v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v60 = v57 | 7;
    v61 = v60 + 1;
    v59 = (std::string *)operator new(v60 + 1);
    v74.__r_.__value_.__l.__size_ = v58;
    v74.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    goto LABEL_145;
  }
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = v57;
  v59 = &v74;
  if (v57)
LABEL_145:
    memmove(v59, v56, v58);
  v59->__r_.__value_.__s.__data_[v58] = 0;
  v62 = &v75;
  v63 = (const void *)*MEMORY[0x1E0CFB670];
  v64 = strlen((const char *)*MEMORY[0x1E0CFB670]);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v65 = v64;
  if (v64 >= 0x17)
  {
    v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v66 = v64 | 7;
    v67 = v66 + 1;
    v62 = operator new(v66 + 1);
    v76 = v65;
    v77 = v67 | 0x8000000000000000;
    v75 = v62;
    goto LABEL_153;
  }
  HIBYTE(v77) = v64;
  if (v64)
LABEL_153:
    memmove(v62, v63, v65);
  *((_BYTE *)v62 + v65) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
LABEL_155:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_159:
    operator delete(v74.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_159;
}

void sub_1BF48B3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;

  std::pair<std::string,std::string>::~pair((uint64_t)&__p);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a14);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v27);
  _Unwind_Resume(a1);
}

void sub_1BF48B4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _QWORD *v19;
  char *v20;

  do
  {
    v20 -= 48;
    std::pair<std::string,std::string>::~pair((uint64_t)v20);
  }
  while (v20 != &a19);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v19);
  _Unwind_Resume(a1);
}

void sub_1BF48B5B4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_10:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void TraceCAReporter::prepTraceStats(TraceCAReporter *a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t value;
  xpc_object_t v7;
  void **v8;
  const char *v9;
  NSObject *v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  void **v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t object[3];
  void *v37[3];
  __int128 __p;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  memset(v37, 170, sizeof(v37));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB550]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  __p = 0uLL;
  v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB030]);
  v35 = v7;
  if (v7)
    xpc_retain(v7);
  else
    v35 = xpc_null_create();
  __p = 0uLL;
  v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v35);
  if (!TraceCAReporter::supportedTraceDomainToReport((uint64_t)a1, (char *)object))
    goto LABEL_14;
  if (SHIBYTE(v37[2]) >= 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  v9 = (const char *)*MEMORY[0x1E0CFB170];
  if (strcasecmp((const char *)v8, (const char *)*MEMORY[0x1E0CFB170]))
  {
    v10 = *((_QWORD *)a1 + 4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v8;
      _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&__p, 0xCu);
    }
LABEL_14:
    *a3 = xpc_null_create();
    goto LABEL_15;
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = MEMORY[0x1E0C812F8];
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v11) == v12)
    {
      xpc_retain(v11);
      v13 = v11;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  v14 = xpc_string_create((const char *)*MEMORY[0x1E0CFB900]);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB278], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFB2C0]);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB3F0], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_string_create((const char *)*MEMORY[0x1E0CFB368]);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB3E8], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAAALL;
  v20 = xpc_null_create();
  *(_QWORD *)&__p = v20;
  if (SHIBYTE(v37[2]) >= 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if (!strcasecmp((const char *)v21, v9))
  {
    v23 = *a2;
    v34 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      v23 = xpc_null_create();
      v34 = v23;
    }
    TraceCAReporter::prepTraceStatsEnabled((uint64_t)a1, &v34, &v35);
    v22 = v35;
    v35 = xpc_null_create();
    *(_QWORD *)&__p = v22;
    xpc_release(v20);
    xpc_release(v35);
    v35 = 0;
    xpc_release(v23);
    v34 = 0;
  }
  else
  {
    v22 = v20;
  }
  if (MEMORY[0x1C3B8A86C](v22) == v12)
  {
    TraceCAReporter::gatherMissingBasebandTraceState(a1, (xpc_object_t *)&__p);
    v24 = (xpc_object_t)__p;
    if ((_QWORD)__p)
      xpc_retain((xpc_object_t)__p);
    else
      v24 = xpc_null_create();
    xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB9D8], v24);
    v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v26 = xpc_dictionary_create(0, 0, 0);
    v27 = v26;
    if (v26)
    {
      *a3 = v26;
    }
    else
    {
      v27 = xpc_null_create();
      *a3 = v27;
      if (!v27)
      {
        v28 = xpc_null_create();
        v27 = 0;
        goto LABEL_53;
      }
    }
    if (MEMORY[0x1C3B8A86C](v27) == v12)
    {
      xpc_retain(v27);
LABEL_54:
      xpc_release(v27);
      v29 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
      if (!v29)
        v29 = xpc_null_create();
      v30 = *a3;
      xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFB020], v29);
      v31 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v31);
      if (v13)
      {
        xpc_retain(v13);
        v30 = *a3;
        v32 = v13;
      }
      else
      {
        v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E0CFB018], v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      v22 = (xpc_object_t)__p;
      goto LABEL_60;
    }
    v28 = xpc_null_create();
LABEL_53:
    *a3 = v28;
    goto LABEL_54;
  }
  *a3 = xpc_null_create();
LABEL_60:
  xpc_release(v22);
  xpc_release(v13);
LABEL_15:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(v37[0]);
    return;
  }
  operator delete(object[0]);
  if (SHIBYTE(v37[2]) < 0)
    goto LABEL_19;
}

void sub_1BF48BC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL TraceCAReporter::supportedTraceDomainToReport(uint64_t a1, char *a2)
{
  int v4;
  const char *v5;
  NSObject *v6;
  _BOOL8 result;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a2[23];
  if ((v4 & 0x80000000) == 0)
  {
    v5 = a2;
    if (strcasecmp(a2, (const char *)*MEMORY[0x1E0CFB088]))
      goto LABEL_3;
    return 1;
  }
  v5 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, (const char *)*MEMORY[0x1E0CFB088]))
    return 1;
LABEL_3:
  if (!strcasecmp(v5, (const char *)*MEMORY[0x1E0D01A80]))
    return 1;
  v6 = *(NSObject **)(a1 + 32);
  result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v8 = *(char **)a2;
    if (v4 >= 0)
      v8 = a2;
    v9 = 136315138;
    v10 = v8;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "Trace domain %s is not supported to report to CA", (uint8_t *)&v9, 0xCu);
    return 0;
  }
  return result;
}

BOOL TraceCAReporter::supportedTracePropertyToReport(uint64_t a1, uint64_t a2)
{
  const char *v3;
  int v4;
  NSObject *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = strcasecmp(v3, (const char *)*MEMORY[0x1E0CFB170]);
  if (v4)
  {
    v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315138;
      v8 = v3;
      _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&v7, 0xCu);
    }
  }
  return v4 == 0;
}

void TraceCAReporter::prepTraceStatsEnabled(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  int v13;
  std::string::size_type size;
  std::string *v16;
  void *v18;
  unint64_t v19;
  int v20;
  uint8_t *v21;
  uint64_t v22;
  void **v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v27;
  NSObject *v29;
  xpc_object_t v30;
  NSObject *v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  void **v39;
  xpc_object_t v40;
  xpc_object_t v41;
  char *v42;
  std::string *v43;
  void **v44;
  BOOL v45;
  void *v46[2];
  char v47;
  void *__s1[3];
  void *v49[2];
  char v50;
  std::string v51;
  void *__p[2];
  char v53;
  char v54[24];
  uint8_t buf[23];
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  memset(v54, 170, sizeof(v54));
  v6 = (char *)*MEMORY[0x1E0CFB550];
  v53 = 12;
  strcpy((char *)__p, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)v54, *a2, v6, (uint64_t)__p);
  if (v53 < 0)
    operator delete(__p[0]);
  memset(&v51, 170, sizeof(v51));
  v7 = (char *)*MEMORY[0x1E0CFB6A8];
  v50 = 12;
  strcpy((char *)v49, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)&v51, *a2, v7, (uint64_t)v49);
  if (v50 < 0)
    operator delete(v49[0]);
  memset(__s1, 170, sizeof(__s1));
  v8 = (char *)*MEMORY[0x1E0CFBF88];
  v47 = 12;
  strcpy((char *)v46, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)__s1, *a2, v8, (uint64_t)v46);
  if (v47 < 0)
    operator delete(v46[0]);
  v9 = v54[23];
  v10 = v54[23];
  if (v54[23] < 0)
    v9 = *(_QWORD *)&v54[8];
  if (v9 == 12)
  {
    v11 = *(char **)v54;
    if (v54[23] >= 0)
      v11 = v54;
    v12 = *(_QWORD *)v11;
    v13 = *((_DWORD *)v11 + 2);
    if (v12 == 0x6963657053746F4ELL && v13 == 1684367718)
      goto LABEL_48;
  }
  size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v16 = &v51;
  }
  else
  {
    size = v51.__r_.__value_.__l.__size_;
    v16 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if (size == 12
    && v16->__r_.__value_.__r.__words[0] == 0x6963657053746F4ELL
    && LODWORD(v16->__r_.__value_.__r.__words[1]) == 1684367718)
  {
LABEL_48:
    v31 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v42 = *(char **)v54;
      if (v10 >= 0)
        v42 = v54;
      v43 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::string *)v51.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v42;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v43;
      _os_log_error_impl(&dword_1BF335000, v31, OS_LOG_TYPE_ERROR, "Missing one of the key/value: key is %s, value is %s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  if (!strcmp((const char *)v16, "default") && !defaults::bbtrace::get(v54, (std::string::size_type *)&v51))
  {
LABEL_52:
    v30 = xpc_null_create();
    goto LABEL_53;
  }
  v45 = 0;
  util::convert<BOOL>(&v51, &v45, 0);
  if (*(_BYTE *)(a1 + 40) != v45)
    goto LABEL_64;
  abm::asString();
  if (SHIBYTE(__s1[2]) >= 0)
    v18 = (void *)HIBYTE(__s1[2]);
  else
    v18 = __s1[1];
  v19 = v56;
  v20 = (char)v56;
  if ((v56 & 0x80u) != 0)
    v19 = *(_QWORD *)&buf[8];
  if (v18 != (void *)v19)
  {
    v27 = 1;
    if (((char)v56 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_63;
  }
  if ((v56 & 0x80u) == 0)
    v21 = buf;
  else
    v21 = *(uint8_t **)buf;
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    v27 = memcmp(__s1[0], v21, (size_t)__s1[1]) != 0;
    if ((v20 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_63;
  }
  if (!HIBYTE(__s1[2]))
  {
    v27 = 0;
    if (((char)v56 & 0x80000000) == 0)
      goto LABEL_45;
LABEL_63:
    operator delete(*(void **)buf);
    if (v27)
      goto LABEL_46;
    goto LABEL_64;
  }
  v22 = HIBYTE(__s1[2]) - 1;
  v23 = __s1;
  do
  {
    v25 = *(unsigned __int8 *)v23;
    v23 = (void **)((char *)v23 + 1);
    v24 = v25;
    v26 = *v21++;
    v27 = v24 != v26;
  }
  while (v24 == v26 && v22-- != 0);
  if ((char)v56 < 0)
    goto LABEL_63;
LABEL_45:
  if (v27)
  {
LABEL_46:
    v29 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      v44 = __s1;
      if (SHIBYTE(__s1[2]) < 0)
        v44 = (void **)__s1[0];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v45;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v44;
      _os_log_debug_impl(&dword_1BF335000, v29, OS_LOG_TYPE_DEBUG, "#D No state transistion, not reporting to CA(state: %d, triggerInterface: %s)", buf, 0x12u);
    }
    v30 = xpc_null_create();
LABEL_53:
    *a3 = v30;
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_64:
  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v32 = xpc_dictionary_create(0, 0, 0);
  v33 = v32;
  if (v32)
  {
    *a3 = v32;
  }
  else
  {
    v33 = xpc_null_create();
    *a3 = v33;
    if (!v33)
    {
      v34 = xpc_null_create();
      v33 = 0;
      goto LABEL_71;
    }
  }
  if (MEMORY[0x1C3B8A86C](v33) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v33);
    goto LABEL_72;
  }
  v34 = xpc_null_create();
LABEL_71:
  *a3 = v34;
LABEL_72:
  xpc_release(v33);
  TraceCAReporter::gatherDurationInformation((TraceCAReporter *)a1, a3);
  if (*(_BYTE *)(a1 + 40))
    v35 = "On";
  else
    v35 = "Off";
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  v37 = *a3;
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CFC090], v36);
  v38 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v38);
  if (SHIBYTE(__s1[2]) >= 0)
    v39 = __s1;
  else
    v39 = (void **)__s1[0];
  v40 = xpc_string_create((const char *)v39);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CFB678], v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  *(_BYTE *)(a1 + 40) = v45;
  if (SHIBYTE(__s1[2]) < 0)
LABEL_54:
    operator delete(__s1[0]);
LABEL_55:
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v54[23] & 0x80000000) == 0)
      return;
LABEL_59:
    operator delete(*(void **)v54);
    return;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if (v54[23] < 0)
    goto LABEL_59;
}

void sub_1BF48C5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void TraceCAReporter::gatherMissingBasebandTraceState(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t *i;
  __int128 v11;
  std::string *v12;
  std::string *p_p;
  xpc_object_t v14;
  std::string *v15;
  xpc_object_t v16;
  std::string __p;
  void *v18[2];
  uint64_t v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  _BYTE v23[32];

  v4 = MEMORY[0x1C3B8A86C](*a2);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v6) == v5)
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = xpc_null_create();
    v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  for (i = (uint64_t *)*((_QWORD *)this + 10); i; i = (uint64_t *)*i)
  {
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v23 = v11;
    *(_OWORD *)&v23[16] = v11;
    v22 = v11;
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v22, (const std::string::value_type *)i[2], i[3]);
      if ((*((char *)i + 63) & 0x80000000) == 0)
      {
LABEL_14:
        *(_OWORD *)&v23[8] = *(_OWORD *)(i + 5);
        *(_QWORD *)&v23[24] = i[7];
        goto LABEL_17;
      }
    }
    else
    {
      v22 = *((_OWORD *)i + 1);
      *(_QWORD *)v23 = i[4];
      if ((*((char *)i + 63) & 0x80000000) == 0)
        goto LABEL_14;
    }
    std::string::__init_copy_ctor_external((std::string *)&v23[8], (const std::string::value_type *)i[5], i[6]);
LABEL_17:
    memset(&v21, 170, sizeof(v21));
    if ((v23[7] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v22, *((std::string::size_type *)&v22 + 1));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v22;
      v21.__r_.__value_.__r.__words[2] = *(_QWORD *)v23;
    }
    memset(&v20, 170, sizeof(v20));
    if ((v23[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)&v23[8], *(std::string::size_type *)&v23[16]);
    else
      v20 = *(std::string *)&v23[8];
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v20;
    else
      v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (xpc_dictionary_get_value(*a2, (const char *)v12))
    {
LABEL_37:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_44;
    }
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    prop::bbtrace::get((char *)&v21, (uint64_t)v18);
    TraceCAReporter::convertPlistValToCAInformation((char *)&v21, (uint64_t)v18, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v14 = xpc_string_create((const char *)p_p);
    if (!v14)
      v14 = xpc_null_create();
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v20;
    else
      v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_value(*a2, (const char *)v15, v14);
    v16 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19) & 0x80000000) == 0)
        goto LABEL_37;
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v18[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if ((v23[31] & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v23[31] & 0x80000000) == 0)
    {
LABEL_40:
      if ((v23[7] & 0x80000000) != 0)
        goto LABEL_47;
      continue;
    }
LABEL_46:
    operator delete(*(void **)&v23[8]);
    if ((v23[7] & 0x80000000) != 0)
LABEL_47:
      operator delete((void *)v22);
  }
}

void sub_1BF48C9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    std::pair<std::string,std::string>::~pair((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a25);
  std::pair<std::string,std::string>::~pair((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void TraceCAReporter::getOrDefault<std::string>(uint64_t a1, xpc_object_t xdict, char *key, uint64_t a4)
{
  xpc_object_t value;
  void *v7;
  int v8;
  xpc_object_t object;
  void *v10[6];

  memset(v10, 170, 24);
  value = xpc_dictionary_get_value(xdict, key);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&v10[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v7 = (void *)HIBYTE(v10[2]);
  v8 = SHIBYTE(v10[2]);
  if (SHIBYTE(v10[2]) < 0)
    v7 = v10[1];
  if (v7)
  {
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(void **)(a1 + 16) = v10[2];
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    if (v8 < 0)
      operator delete(v10[0]);
  }
}

void sub_1BF48CB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

double TraceCAReporter::gatherDurationInformation(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  timeval *v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  double result;
  timeval v15;

  v4 = MEMORY[0x1C3B8A86C](*a2);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v6) == v5)
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = xpc_null_create();
    v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v15.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v15, 0);
  v11 = *((_QWORD *)this + 6);
  v10 = (timeval *)((char *)this + 48);
  v12 = xpc_int64_create(v15.tv_sec - v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB348], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  result = *(double *)&v15.tv_sec;
  *v10 = v15;
  return result;
}

std::string *TraceCAReporter::convertPlistValToCAInformation@<X0>(char *a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *result;
  uint64_t v7;
  _BYTE *v8;
  const std::string::value_type *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  const std::string::value_type *v13;
  int v14;

  v4 = a1;
  v5 = a3;
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((v4[23] & 0x80000000) == 0)
    {
LABEL_3:
      result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBC00]);
      if ((_DWORD)result)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    if ((a1[23] & 0x80000000) == 0)
      goto LABEL_3;
  }
  v4 = *(char **)v4;
  result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBC00]);
  if ((_DWORD)result)
  {
LABEL_4:
    if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB028]))
    {
      v14 = -1431655766;
      util::convert<int>((const std::string *)a2, &v14, 0);
      v13 = (const std::string::value_type *)trace::toString();
      return std::string::__assign_external(v5, v13);
    }
    else if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB170])
           || !strcasecmp(v4, (const char *)*MEMORY[0x1E0D01AE8])
           || (result = (std::string *)strcasecmp(v4, diag::config::kEnabledDuringSleepKey[0]), !(_DWORD)result))
    {
      v7 = *(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0)
        v7 = *(_QWORD *)(a2 + 8);
      if (v7 == 1)
      {
        if (*(char *)(a2 + 23) >= 0)
          v8 = (_BYTE *)a2;
        else
          v8 = *(_BYTE **)a2;
        if (*v8 == 48)
          v9 = "Off";
        else
          v9 = "On";
      }
      else
      {
        v9 = "On";
      }
      return std::string::__assign_external(v5, v9);
    }
    return result;
  }
LABEL_19:
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (v10 == 1)
  {
    v12 = v11 >= 0 ? (_BYTE *)a2 : *(_BYTE **)a2;
    if (*v12 == 48)
    {
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        v5->__r_.__value_.__l.__size_ = 8;
        v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v5->__r_.__value_.__s + 23) = 8;
      }
      strcpy((char *)v5, "No limit");
    }
  }
  return result;
}

void sub_1BF48CF18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, __s, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = *a3;
  v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v13;
    if (!v13)
      goto LABEL_17;
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((_BYTE *)v11 + v14) = 0;
  return a1;
}

void sub_1BF48D078(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79081C8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF48D19C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF48D1BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  void **v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  void **v7;

  if (!a1)
    return;
  v2 = (void **)a1[10];
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_17:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[8];
  a1[8] = 0;
  if (v3)
    operator delete(v3);
  MEMORY[0x1C3B89240](a1 + 4);
  v4 = a1[3];
  if (v4)
    dispatch_release(v4);
  v5 = a1[2];
  if (v5)
    dispatch_release(v5);
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  std::string *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD v43[2];
  unint64_t v44;

  v4 = (_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= v10)
        v12 = v8 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v4[23];
        if (v15 >= 0)
          v16 = v4[23];
        else
          v16 = *((_QWORD *)v4 + 1);
        if (v15 < 0)
          v4 = *(_BYTE **)v4;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v9)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v4, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v4; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return;
                  }
                }
              }
            }
            else if ((v22 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v9)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v4, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v4; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  v44 = 0xAAAAAAAAAAAAAA00;
  v27 = (char *)operator new(0x40uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v9;
  v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v27 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v27 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  LOBYTE(v44) = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v10 && (float)(v30 * (float)v10) >= v29)
    goto LABEL_82;
  v31 = 1;
  if (v10 >= 3)
    v31 = (v10 & (v10 - 1)) != 0;
  v32 = v31 | (2 * v10);
  v33 = vcvtps_u32_f32(v29 / v30);
  if (v32 <= v33)
    prime = v33;
  else
    prime = v32;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v35 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v35)
    goto LABEL_66;
  if (prime < *(_QWORD *)&v35)
  {
    v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      v36 = std::__next_prime(v36);
    }
    else
    {
      v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2)
        v36 = v38;
    }
    if (prime <= v36)
      prime = v36;
    if (prime < *(_QWORD *)&v35)
LABEL_66:
      std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(a1, prime);
  }
  v10 = *(_QWORD *)(a1 + 8);
  v39 = v10 - 1;
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v9 >= v10)
    {
      v12 = v9 % v10;
      v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
      v41 = (_QWORD *)v43[0];
      if (!v40)
        goto LABEL_85;
      goto LABEL_83;
    }
    v12 = v9;
LABEL_82:
    v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
    v41 = (_QWORD *)v43[0];
    if (!v40)
      goto LABEL_85;
    goto LABEL_83;
  }
  v12 = v39 & v9;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v9));
  v41 = (_QWORD *)v43[0];
  if (!v40)
  {
LABEL_85:
    *v41 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v42 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v42 >= v10)
          v42 %= v10;
      }
      else
      {
        v42 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v43[0];
    }
    goto LABEL_91;
  }
LABEL_83:
  *v41 = *v40;
  *v40 = v43[0];
LABEL_91:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BF48D7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BF48D7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::create(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = operator new(0xB8uLL);
  CircularFileLogWriter::CircularFileLogWriter((uint64_t)v4, a1);
  *a2 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_1E79083A8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v5;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 2);
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *((_QWORD *)v4 + 1) = v4;
    *((_QWORD *)v4 + 2) = v5;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *((_QWORD *)v4 + 1) = v4;
    *((_QWORD *)v4 + 2) = v5;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF48D908(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF48D928(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BF48D93C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::CircularFileLogWriter(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = MEMORY[0x1E0DE3B50] + 16;
  v4 = dispatch_queue_create("CircularFileLogWriter", 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    *(_QWORD *)(a1 + 32) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)a1 = off_1E7908218;
  *(_QWORD *)(a1 + 40) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 72) = v7;
  }
  v8 = (std::string *)(a1 + 96);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 88);
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 144) = 1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return a1;
}

void sub_1BF48DA90(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  uint64_t v6;

  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_QWORD *)(v1 + 40);
      *(_QWORD *)(v1 + 40) = 0;
      if (!v6)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (!v6)
  {
LABEL_4:
    ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::open(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_31;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_3;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN21CircularFileLogWriter4openEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  unint64_t v6;
  void **v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  timespec v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  DIR *v34;
  DIR *v35;
  dirent *v36;
  std::string __dst;
  stat v38;
  _QWORD v39[5];

  v39[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 156) = 0;
  if (*(_QWORD *)(v1 + 40))
  {
    std::ostream::flush();
    v2 = *(_QWORD **)(v1 + 40);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    v3 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    *(_QWORD *)(v1 + 40) = 0;
  }
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v1 + 120) / *(_QWORD *)(v1 + 128);
  v4 = *(char *)(v1 + 95);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(v1 + 95);
  else
    v5 = *(_QWORD *)(v1 + 80);
  v6 = v5 + 8;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 8 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void **)(v1 + 72);
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 8;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5 + 8;
    if (!v5)
      goto LABEL_21;
  }
  if (v4 >= 0)
    v11 = (void *)(v1 + 72);
  else
    v11 = *v7;
  memmove(p_dst, v11, v5);
LABEL_21:
  strcpy((char *)p_dst + v5, "/latest-");
  v12 = *(char *)(v1 + 71);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)(v1 + 48);
  else
    v13 = *(const std::string::value_type **)(v1 + 48);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v1 + 71);
  else
    v14 = *(_QWORD *)(v1 + 56);
  v15 = std::string::append(&__dst, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(_QWORD *)&v38.st_uid = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)&v38.st_dev = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = *(char *)(v1 + 119);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)(v1 + 96);
  else
    v18 = *(const std::string::value_type **)(v1 + 96);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(v1 + 119);
  else
    v19 = *(_QWORD *)(v1 + 104);
  v20 = std::string::append((std::string *)&v38, v18, v19);
  v21 = v20->__r_.__value_.__r.__words[0];
  v39[0] = v20->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v1 + 183) < 0)
    operator delete(*(void **)(v1 + 160));
  v23 = v39[0];
  *(_QWORD *)(v1 + 160) = v21;
  *(_QWORD *)(v1 + 168) = v23;
  *(_QWORD *)(v1 + 175) = *(_QWORD *)((char *)v39 + 7);
  *(_BYTE *)(v1 + 183) = v22;
  if (SHIBYTE(v38.st_gid) < 0)
  {
    operator delete(*(void **)&v38.st_dev);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_37:
  v24 = *(char *)(v1 + 95);
  if (v24 >= 0)
    v25 = *(unsigned __int8 *)(v1 + 95);
  else
    v25 = *(_QWORD *)(v1 + 80);
  v26 = v25 + 1;
  memset(&v38, 170, 24);
  if (v25 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v27 = (char *)operator new(v30 + 1);
    v38.st_ino = v25 + 1;
    *(_QWORD *)&v38.st_uid = v31 | 0x8000000000000000;
    *(_QWORD *)&v38.st_dev = v27;
  }
  else
  {
    memset(&v38, 0, 24);
    v27 = (char *)&v38;
    HIBYTE(v38.st_gid) = v25 + 1;
    if (!v25)
    {
      LOWORD(v38.st_dev) = 47;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_57;
    }
  }
  if (v24 >= 0)
    v32 = (void *)(v1 + 72);
  else
    v32 = *v7;
  memmove(v27, v32, v25);
  *(_WORD *)&v27[v25] = 47;
  if (v24 < 0)
LABEL_57:
    operator delete(*v7);
LABEL_44:
  *(_OWORD *)v7 = *(_OWORD *)&v38.st_dev;
  *(_QWORD *)(v1 + 88) = *(_QWORD *)&v38.st_uid;
  v28.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v28.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v38.st_blksize = v28;
  *(timespec *)v38.st_qspare = v28;
  v38.st_birthtimespec = v28;
  *(timespec *)&v38.st_size = v28;
  v38.st_mtimespec = v28;
  v38.st_ctimespec = v28;
  *(timespec *)&v38.st_uid = v28;
  v38.st_atimespec = v28;
  *(timespec *)&v38.st_dev = v28;
  if (*(char *)(v1 + 95) >= 0)
    v29 = (const char *)(v1 + 72);
  else
    v29 = *(const char **)(v1 + 72);
  if (!stat(v29, &v38)
    && (*(char *)(v1 + 95) >= 0 ? (v33 = (const char *)(v1 + 72)) : (v33 = *(const char **)(v1 + 72)),
        (v34 = opendir(v33), (v35 = v34) != 0) && (v36 = readdir(v34), closedir(v35), v36)))
  {
    CircularFileLogWriter::getFileIndex_sync((CircularFileLogWriter *)v1, (unsigned int *)(v1 + 156), (unsigned int *)(v1 + 152));
  }
  else
  {
    support::fs::createDir((const char *)(v1 + 72), 0x1EDu, 1);
  }
  CircularFileLogWriter::openNewLog_sync((CircularFileLogWriter *)v1);
}

void sub_1BF48DFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::close_sync(CircularFileLogWriter *this)
{
  uint64_t result;
  _QWORD *v3;

  *((_QWORD *)this + 19) = 0;
  result = *((_QWORD *)this + 5);
  if (!result)
  {
    *((_QWORD *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (std::filebuf::close())
  {
    result = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularFileLogWriter::getFileIndex_sync(CircularFileLogWriter *this, unsigned int *a2, unsigned int *a3)
{
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  std::sub_match<const char *> *v13;
  std::sub_match<const char *> *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  __int128 v18;
  const char *second;
  std::sub_match<const char *> *first;
  int v21;
  const char *v22;
  uint64_t v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  std::string::value_type **v28;
  std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string *v32;
  std::string::value_type *v33;
  __int128 *v34;
  std::string::size_type *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::string::value_type v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  std::sub_match<const char *> *v44;
  std::__shared_weak_count *v45;
  void **v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unsigned int *v49;
  char v50;
  unsigned int v51;
  _BYTE v52[40];
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void *__p;
  std::sub_match<const char *> *v60;
  uint64_t v61;
  std::locale v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::string __str[2];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v64 = v6;
  v65 = v6;
  *(_OWORD *)&v62[0].__locale_ = v6;
  v63 = v6;
  v52[23] = 10;
  strcpy(v52, "([0-9]{8})");
  v7 = *((char *)this + 119);
  if (v7 >= 0)
    v8 = (char *)this + 96;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 12);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 119);
  else
    v9 = *((_QWORD *)this + 13);
  v10 = std::string::append((std::string *)v52, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __str[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v62, (uint64_t)__str, 0);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str[0].__r_.__value_.__l.__data_);
    if ((v52[23] & 0x80000000) == 0)
      goto LABEL_9;
LABEL_66:
    operator delete(*(void **)v52);
    goto LABEL_9;
  }
  if ((v52[23] & 0x80000000) != 0)
    goto LABEL_66;
LABEL_9:
  __p = 0;
  v60 = 0;
  v61 = 0;
  support::fs::readDir((const char *)this + 72, (uint64_t)&__p);
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = 0xAAAAAAAAAAAAAAAALL;
  v55 = 0xAAAAAAAAAAAAAA00;
  v57 = v12;
  v54 = 0;
  v56 = 0uLL;
  LOBYTE(v57) = 0;
  BYTE8(v57) = 0;
  v58 = 0;
  memset(v52, 0, sizeof(v52));
  v13 = (std::sub_match<const char *> *)__p;
  v14 = v60;
  if (__p == v60)
  {
    *a2 = 0;
    *a3 = 0;
    v44 = (std::sub_match<const char *> *)__p;
    if (!__p)
      goto LABEL_63;
    goto LABEL_68;
  }
  v49 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  do
  {
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v72 = v18;
    v69 = 0xAAAAAAAAAAAAAA00;
    __str[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    v67 = 0;
    v68 = 0;
    v70 = 0;
    v71 = 0;
    LOBYTE(v72) = 0;
    BYTE8(v72) = 0;
    v73 = 0;
    memset(__str, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)second >= 0)
      first = v13;
    else
      first = (std::sub_match<const char *> *)v13->first;
    if ((char)second < 0)
      second = v13->second;
    v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v62, first, (std::sub_match<const char *> *)&second[(_QWORD)first], (std::vector<std::csub_match> *)__str, 0);
    v22 = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)v22 >= 0)
      v23 = (uint64_t)v13;
    else
      v23 = (uint64_t)v13->first;
    if ((char)v22 < 0)
      v22 = v13->second;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v52, v23, (std::sub_match<std::__wrap_iter<const char *>> *)&v22[v23], (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      memset(__str, 170, 24);
      v24 = &v53;
      if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        v24 = (__int128 *)(*(_QWORD *)v52 + 16);
      if (!*(_BYTE *)v24)
      {
        memset(__str, 0, 24);
LABEL_50:
        v41 = std::stoul(__str, 0, 10);
        if ((v17 & 1) != 0)
          v42 = v41;
        else
          v42 = v16;
        if (v42 >= v41)
          v16 = v41;
        else
          v16 = v42;
        if (v15 < v41)
          v15 = v41 + 1;
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str[0].__r_.__value_.__l.__data_);
        v17 = 0;
        goto LABEL_12;
      }
      v50 = v17;
      v51 = v15;
      v25 = v16;
      v26 = (uint64_t *)&v52[24];
      if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        v26 = *(uint64_t **)v52;
      v27 = *v26;
      v28 = (std::string::value_type **)(*(_QWORD *)v52 + 8);
      if (*(_QWORD *)&v52[8] == *(_QWORD *)v52)
        v28 = (std::string::value_type **)&v52[32];
      v29 = *v28;
      v30 = (std::string::size_type)&(*v28)[-v27];
      if (v30 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v30 > 0x16)
      {
        v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v38 = v30 | 7;
        v39 = v38 + 1;
        v31 = (std::string *)operator new(v38 + 1);
        __str[0].__r_.__value_.__l.__size_ = v30;
        __str[0].__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if ((std::string::value_type *)v27 != v29)
          goto LABEL_36;
      }
      else
      {
        *((_BYTE *)&__str[0].__r_.__value_.__s + 23) = *(_BYTE *)v28 - v27;
        v31 = __str;
        if ((std::string::value_type *)v27 != v29)
        {
LABEL_36:
          if (v30 < 0x20 || (unint64_t)v31 - v27 < 0x20)
          {
            v32 = v31;
            v33 = (std::string::value_type *)v27;
          }
          else
          {
            v32 = (std::string *)((char *)v31 + (v30 & 0xFFFFFFFFFFFFFFE0));
            v33 = (std::string::value_type *)(v27 + (v30 & 0xFFFFFFFFFFFFFFE0));
            v34 = (__int128 *)(v27 + 16);
            v35 = &v31->__r_.__value_.__r.__words[2];
            v36 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_49;
          }
          do
          {
            v40 = *v33++;
            v32->__r_.__value_.__s.__data_[0] = v40;
            v32 = (std::string *)((char *)v32 + 1);
          }
          while (v33 != v29);
LABEL_49:
          v32->__r_.__value_.__s.__data_[0] = 0;
          v16 = v25;
          v17 = v50;
          v15 = v51;
          goto LABEL_50;
        }
      }
      v32 = v31;
      goto LABEL_49;
    }
LABEL_12:
    ++v13;
  }
  while (v13 != v14);
  v43 = *(void **)v52;
  *v49 = v16;
  *a3 = v15;
  if (v43)
  {
    *(_QWORD *)&v52[8] = v43;
    operator delete(v43);
  }
  v44 = (std::sub_match<const char *> *)__p;
  if (!__p)
  {
LABEL_63:
    v45 = (std::__shared_weak_count *)v65;
    if (!(_QWORD)v65)
      goto LABEL_79;
LABEL_75:
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_79;
  }
LABEL_68:
  v46 = (void **)v60;
  if (v60 == v44)
  {
    v60 = v44;
    operator delete(v44);
    v45 = (std::__shared_weak_count *)v65;
    if (!(_QWORD)v65)
      goto LABEL_79;
    goto LABEL_75;
  }
  do
  {
    if (*((char *)v46 - 1) < 0)
      operator delete(*(v46 - 3));
    v46 -= 3;
  }
  while (v46 != (void **)v44);
  v60 = v44;
  operator delete(__p);
  v45 = (std::__shared_weak_count *)v65;
  if ((_QWORD)v65)
    goto LABEL_75;
LABEL_79:
  std::locale::~locale(v62);
}

void sub_1BF48E4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::locale a36)
{
  std::vector<std::string>::~vector[abi:ne180100](&a33);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a36);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::openNewLog_sync(CircularFileLogWriter *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  std::string *v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;

  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 0;
    v4 = (char *)this + 160;
    v5 = (char *)this + 160;
    if ((*((char *)this + 183) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
  std::ostream::flush();
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (char *)this + 160;
  v5 = (char *)this + 160;
  if (*((char *)this + 183) < 0)
LABEL_31:
    v5 = *(const char **)v4;
LABEL_7:
  unlink(v5);
  v6 = *((unsigned int *)this + 38);
  *((_DWORD *)this + 38) = v6 + 1;
  CircularFileLogWriter::generateFileName_sync(this, v6, &v20);
  v7 = *((char *)this + 95);
  if (v7 >= 0)
    v8 = (char *)this + 72;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 9);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 95);
  else
    v9 = *((_QWORD *)this + 10);
  v10 = std::string::insert(&v20, 0, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v12 = operator new(0x238uLL);
  v13 = MEMORY[0x1E0DE4FB0];
  v14 = MEMORY[0x1E0DE4FB0] + 64;
  v12[52] = MEMORY[0x1E0DE4FB0] + 64;
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *v12 = v15;
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v15 - 24)) = v16;
  v17 = (std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24));
  std::ios_base::init(v17, v12 + 1);
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  *v12 = v13 + 24;
  v12[52] = v14;
  MEMORY[0x1C3B89C60](v12 + 1);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)), *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 32) | 4);
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v12;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v12 = (_QWORD *)*((_QWORD *)this + 5);
  }
  if (v12[16])
  {
    support::fs::getFileName(&v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v20;
    else
      v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (*((char *)this + 183) < 0)
      v4 = *(const char **)v4;
    symlink((const char *)v19, v4);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  CircularFileLogWriter::clearOldLogs_sync(this);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void sub_1BF48E7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::close(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5closeEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4_2;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_3;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t ___ZN21CircularFileLogWriter5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 152) = 0;
  result = *(_QWORD *)(v1 + 40);
  if (!result)
  {
    *(_QWORD *)(v1 + 40) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = *(_QWORD **)(v1 + 40);
  if (std::filebuf::close())
  {
    result = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularFileLogWriter::clear(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5clearEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5_14;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_3;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t ___ZN21CircularFileLogWriter5clearEv_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::clear_sync(*(CircularFileLogWriter **)(a1 + 32));
}

uint64_t CircularFileLogWriter::clear_sync(CircularFileLogWriter *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char **v4;

  *((_QWORD *)this + 19) = 0;
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 0;
    goto LABEL_8;
  }
  std::ostream::flush();
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (!std::filebuf::close())
  {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    v3 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_8:
  v4 = (const char **)((char *)this + 160);
  if (*((char *)this + 183) < 0)
    unlink(*v4);
  else
    unlink((const char *)v4);
  return support::fs::removeDir((const char *)this + 72);
}

void CircularFileLogWriter::write(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[6];
  std::__shared_weak_count *v12;

  v3 = (uint64_t *)(a1 + 8);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke;
  v11[3] = &__block_descriptor_tmp_6_8;
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v11[4] = a1;
  v11[5] = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(v3, (uint64_t)v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  v2 = a1[4];
  v3 = (std::__shared_weak_count *)a1[6];
  v8[0] = a1[5];
  v8[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  CircularFileLogWriter::write_sync(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF48EC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::write_sync(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  CircularFileLogWriter *v3;
  uint64_t v4;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  size_t v23;
  std::locale::__imp *p_dst;
  uint64_t v25;
  const void **v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  std::locale::__imp *locale;
  uint64_t v31;
  const std::locale::facet *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  _OWORD v42[9];
  unint64_t v43;
  std::locale __dst;
  size_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return result;
  v3 = (CircularFileLogWriter *)result;
  v4 = *(_QWORD *)(result + 40);
  if (!v4 || !*(_QWORD *)(v4 + 128))
    return result;
  if (*(char *)(v2 + 71) < 0)
  {
    v6 = *(_QWORD *)(v2 + 56) + 1;
    if (v6 < 2)
      return result;
  }
  else
  {
    v6 = *(unsigned __int8 *)(v2 + 71) + 1;
    if (v6 < 2)
      return result;
  }
  v43 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[7] = v7;
  v42[8] = v7;
  v42[5] = v7;
  v42[6] = v7;
  v42[3] = v7;
  v42[4] = v7;
  v42[1] = v7;
  v42[2] = v7;
  v41 = v7;
  v42[0] = v7;
  *(_OWORD *)__p = v7;
  v40 = v7;
  v37 = v7;
  v38 = v7;
  v35 = v7;
  v36 = v7;
  v34 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  v8 = v35;
  *(_DWORD *)((char *)&v35 + *(_QWORD *)(v35 - 24) + 8) |= 4u;
  *(_QWORD *)((char *)&v35 + *(_QWORD *)(v8 - 24) + 16) = 3;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" [", 2);
  LOBYTE(__dst.__locale_) = ctu::asChar();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__dst, 1);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
  v13 = *(char *)(*a2 + 47);
  if (v13 >= 0)
    v14 = *a2 + 24;
  else
    v14 = *(_QWORD *)(*a2 + 24);
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(*a2 + 47);
  else
    v15 = *(_QWORD *)(*a2 + 32);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
  v17 = (char *)&v35 + *(_QWORD *)(v35 - 24);
  if ((v17[32] & 5) != 0)
  {
    v18 = v6 - 1;
    v19 = *((_QWORD *)v3 + 16);
    if (v6 - 1 > v19)
      goto LABEL_52;
LABEL_18:
    v20 = *((_QWORD *)v3 + 5) + *(_QWORD *)(**((_QWORD **)v3 + 5) - 24);
    if ((*(_BYTE *)(v20 + 32) & 5) != 0)
    {
      if (v18 - 1 <= v19)
      {
LABEL_23:
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(_QWORD *)(*a2 + 56))
            goto LABEL_27;
        }
        else if (*(_BYTE *)(*a2 + 71))
        {
LABEL_27:
          v21 = (_QWORD *)*((_QWORD *)v3 + 5);
          v22 = BYTE8(v41);
          if ((BYTE8(v41) & 0x10) == 0)
          {
LABEL_28:
            if ((v22 & 8) == 0)
            {
              v23 = 0;
              HIBYTE(v46) = 0;
              p_dst = (std::locale::__imp *)&__dst;
              goto LABEL_43;
            }
            v26 = (const void **)&v36 + 1;
            v25 = *((_QWORD *)&v37 + 1);
LABEL_35:
            v27 = *v26;
            v23 = v25 - (_QWORD)*v26;
            if (v23 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v23 >= 0x17)
            {
              v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17)
                v28 = v23 | 7;
              v29 = v28 + 1;
              p_dst = (std::locale::__imp *)operator new(v28 + 1);
              v45 = v23;
              v46 = v29 | 0x8000000000000000;
              __dst.__locale_ = p_dst;
            }
            else
            {
              HIBYTE(v46) = v25 - *(_BYTE *)v26;
              p_dst = (std::locale::__imp *)&__dst;
              if (!v23)
                goto LABEL_43;
            }
            memmove(p_dst, v27, v23);
LABEL_43:
            *((_BYTE *)p_dst + v23) = 0;
            if (v46 >= 0)
              locale = (std::locale::__imp *)&__dst;
            else
              locale = __dst.__locale_;
            if (v46 >= 0)
              v31 = HIBYTE(v46);
            else
              v31 = v45;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)locale, v31);
            if (SHIBYTE(v46) < 0)
              operator delete(__dst.__locale_);
            std::ostream::write();
            std::ios_base::getloc((const std::ios_base *)(*((_QWORD *)v3 + 5) + *(_QWORD *)(**((_QWORD **)v3 + 5) - 24)));
            v32 = std::locale::use_facet(&__dst, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
            std::locale::~locale(&__dst);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_52;
          }
LABEL_31:
          v25 = v41;
          if ((unint64_t)v41 < *((_QWORD *)&v38 + 1))
          {
            *(_QWORD *)&v41 = *((_QWORD *)&v38 + 1);
            v25 = *((_QWORD *)&v38 + 1);
          }
          v26 = (const void **)&v38;
          goto LABEL_35;
        }
        v21 = (_QWORD *)*((_QWORD *)v3 + 5);
        v22 = BYTE8(v41);
        if ((BYTE8(v41) & 0x10) == 0)
          goto LABEL_28;
        goto LABEL_31;
      }
    }
    else
    {
      (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v20 + 40)
                                                                                          + 32))(&__dst, *(_QWORD *)(v20 + 40), 0, 1, 16);
      if (v47 + v18 <= *((_QWORD *)v3 + 16))
        goto LABEL_23;
    }
    CircularFileLogWriter::openNewLog_sync(v3);
    goto LABEL_23;
  }
  (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5) + 32))(&__dst, *((_QWORD *)v17 + 5), 0, 1, 16);
  v18 = v47 + v6;
  v19 = *((_QWORD *)v3 + 16);
  if (v47 + v6 <= v19)
    goto LABEL_18;
LABEL_52:
  *(_QWORD *)&v34 = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v35 = v33;
  *((_QWORD *)&v35 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v40) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B89E4C](v42);
}

void sub_1BF48F120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF48F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF48F148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF48F15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 217) < 0)
  {
    operator delete(*(void **)(v9 - 240));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void CircularFileLogWriter::write(CircularFileLogWriter *this, const char *a2, uint64_t a3)
{
  NSObject *v3;
  char *v4;
  _QWORD v5[7];
  _QWORD *v6;
  _QWORD block[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke;
  v5[3] = &__block_descriptor_tmp_7_6;
  v5[4] = this;
  v5[5] = a2;
  v5[6] = a3;
  v6 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_3;
  block[4] = (char *)this + 8;
  block[5] = &v6;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
}

uint64_t ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::write_sync(*(_QWORD *)(a1 + 32), *(const char **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t CircularFileLogWriter::write_sync(uint64_t this, const char *a2, uint64_t a3)
{
  uint64_t v3;
  CircularFileLogWriter *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = a3;
    if (a3)
    {
      v4 = (CircularFileLogWriter *)this;
      v5 = *(_QWORD **)(this + 40);
      if (v5)
      {
        if (v5[16])
        {
          v6 = a2;
          if (*(_BYTE *)(this + 136))
          {
            while (1)
            {
              v9 = (char *)v5 + *(_QWORD *)(*v5 - 24);
              if ((v9[32] & 5) != 0)
              {
                v10 = *((_QWORD *)v4 + 16);
                if (v3 - 1 <= v10)
                  goto LABEL_20;
              }
              else
              {
                (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v9 + 5)
                                                                                               + 32))(v13, *((_QWORD *)v9 + 5), 0, 1, 16);
                v10 = *((_QWORD *)v4 + 16);
                if (v14 + v3 <= v10)
                  goto LABEL_20;
              }
              v11 = *((_QWORD *)v4 + 5) + *(_QWORD *)(**((_QWORD **)v4 + 5) - 24);
              if ((*(_BYTE *)(v11 + 32) & 5) != 0)
                break;
              (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 40)
                                                                                             + 32))(v13, *(_QWORD *)(v11 + 40), 0, 1, 16);
              v7 = v14;
              if (v10 != v14)
                goto LABEL_8;
LABEL_9:
              CircularFileLogWriter::openNewLog_sync(v4);
              v5 = (_QWORD *)*((_QWORD *)v4 + 5);
            }
            v7 = -1;
LABEL_8:
            v8 = v10 - v7;
            std::ostream::write();
            v6 += v8;
            v3 -= v8;
            goto LABEL_9;
          }
          v12 = (char *)v5 + *(_QWORD *)(*v5 - 24);
          if ((v12[32] & 5) != 0)
          {
            if ((unint64_t)(a3 - 1) <= *(_QWORD *)(this + 128))
              goto LABEL_20;
          }
          else
          {
            (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5)
                                                                                           + 32))(v13, *((_QWORD *)v12 + 5), 0, 1, 16);
            if ((unint64_t)(v14 + v3) <= *((_QWORD *)v4 + 16))
            {
LABEL_20:
              this = *((_QWORD *)v4 + 5);
              if (this)
                return std::ostream::write();
              return this;
            }
          }
          CircularFileLogWriter::openNewLog_sync(v4);
          goto LABEL_20;
        }
      }
    }
  }
  return this;
}

void CircularFileLogWriter::setCapacity(CircularFileLogWriter *this, uint64_t a2)
{
  _QWORD v2[6];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke;
  v2[3] = &__block_descriptor_tmp_8_9;
  v2[4] = this;
  v2[5] = a2;
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v2);
}

void ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke(uint64_t a1)
{
  CircularFileLogWriter *v1;
  unint64_t v2;

  v1 = *(CircularFileLogWriter **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v1 + 15) = v2;
  *((_QWORD *)v1 + 18) = v2 / *((_QWORD *)v1 + 16);
  CircularFileLogWriter::clearOldLogs_sync(v1);
}

void CircularFileLogWriter::clearOldLogs_sync(CircularFileLogWriter *this)
{
  unsigned int v1;
  const std::string::value_type *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  std::error_code *v8;
  int v9;
  void *v10;
  const std::__fs::filesystem::path *v11;
  std::string v12;
  std::string v13;

  v1 = *((_DWORD *)this + 39);
  if (*((_QWORD *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1))
  {
    v3 = (char *)this + 72;
    do
    {
      *((_DWORD *)this + 39) = v1 + 1;
      CircularFileLogWriter::generateFileName_sync(this, v1, &v12);
      v4 = *((char *)this + 95);
      if (v4 >= 0)
        v5 = v3;
      else
        v5 = (const std::string::value_type *)*((_QWORD *)this + 9);
      if (v4 >= 0)
        v6 = *((unsigned __int8 *)this + 95);
      else
        v6 = *((_QWORD *)this + 10);
      v7 = std::string::insert(&v12, 0, v5, v6);
      v13 = *v7;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      v9 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
      v10 = (void *)v13.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = (const std::__fs::filesystem::path *)&v13;
      else
        v11 = (const std::__fs::filesystem::path *)v13.__r_.__value_.__r.__words[0];
      if (remove(v11, v8))
        unlink((const char *)v11);
      if (v9 < 0)
        operator delete(v10);
      v1 = *((_DWORD *)this + 39);
    }
    while (*((_QWORD *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1));
  }
}

void sub_1BF48F664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::closeRunningLog_sync(CircularFileLogWriter *this)
{
  uint64_t result;
  _QWORD *v3;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    *((_QWORD *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (std::filebuf::close())
  {
    result = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularFileLogWriter::generateFileName_sync(CircularFileLogWriter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  __int128 v5;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  char *v17;
  const std::string::value_type *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string __dst;
  std::string v24;
  char __s[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v5;
  v28 = v5;
  *(_OWORD *)__s = v5;
  v26 = v5;
  sprintf(__s, "%08zu", a2);
  v6 = *((char *)this + 71);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)this + 71);
  else
    v7 = *((_QWORD *)this + 7);
  v8 = v7 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
    if (!v7)
      goto LABEL_15;
  }
  if (v6 >= 0)
    v12 = (char *)this + 48;
  else
    v12 = (char *)*((_QWORD *)this + 6);
  memmove(p_dst, v12, v7);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 46;
  v13 = strlen(__s);
  v14 = std::string::append(&__dst, __s, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v18 = (const std::string::value_type *)*((_QWORD *)this + 12);
  v17 = (char *)this + 96;
  v16 = v18;
  v19 = v17[23];
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = v17[23];
  else
    v21 = *((_QWORD *)v17 + 1);
  v22 = std::string::append(&v24, v20, v21);
  *a3 = *v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void sub_1BF48F8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::~CircularFileLogWriter(void **this)
{
  void *v1;

  CircularFileLogWriter::~CircularFileLogWriter(this);
  operator delete(v1);
}

{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = off_1E7908218;
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(this[9]);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = this[5];
    this[5] = 0;
    if (!v2)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  operator delete(this[6]);
  v2 = this[5];
  this[5] = 0;
  if (v2)
LABEL_6:
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
LABEL_7:
  v3 = this[4];
  if (v3)
    dispatch_release(v3);
  v4 = this[3];
  if (v4)
    dispatch_release(v4);
  v5 = (std::__shared_weak_count *)this[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7908410;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void CMHandDetectionDelegate::create(NSObject **a1@<X0>, NSObject **a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char isCMHandDetectionSupported;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  NSObject *v22;
  dispatch_object_t v23[2];
  NSObject *v24;

  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v6 = qword_1ED70FAA0;
  if (!qword_1ED70FAA0)
  {
    v7 = operator new(1uLL);
    v8 = operator new(0x20uLL);
    *v8 = off_1E7903F88;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    v9 = (std::__shared_weak_count *)off_1ED70FAA8;
    qword_1ED70FAA0 = (uint64_t)v7;
    off_1ED70FAA8 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 = qword_1ED70FAA0;
  }
  v12 = (std::__shared_weak_count *)off_1ED70FAA8;
  v23[0] = v6;
  v23[1] = (dispatch_object_t)off_1ED70FAA8;
  if (off_1ED70FAA8)
  {
    v13 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported((Capabilities *)v6);
  v16 = isCMHandDetectionSupported;
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if ((v16 & 1) != 0)
        goto LABEL_16;
LABEL_26:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
  }
  if ((isCMHandDetectionSupported & 1) == 0)
    goto LABEL_26;
LABEL_16:
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v19 = operator new(0x28uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = off_1E79084D0;
  v20 = v19 + 3;
  v21 = *a1;
  v23[0] = v21;
  if (v21)
    dispatch_retain(v21);
  v22 = *a2;
  v24 = v22;
  if (v22)
    dispatch_retain(v22);
  CMHandDetectionDelegate::CMHandDetectionDelegate(v20, v23, &v24);
  if (v22)
    dispatch_release(v22);
  if (v21)
    dispatch_release(v21);
  *a3 = v20;
  a3[1] = v19;
}

void sub_1BF48FED4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF48FF00(_Unwind_Exception *a1)
{
  NSObject *v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  void *v5;
  void *v6;

  if (v1)
  {
    dispatch_release(v1);
    if (!v2)
    {
LABEL_3:
      std::__shared_weak_count::~__shared_weak_count(v3);
      operator delete(v5);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  dispatch_release(v2);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_1BF48FF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *CMHandDetectionDelegate::CMHandDetectionDelegate(_QWORD *a1, dispatch_object_t *a2, NSObject **a3)
{
  NSObject *v5;
  NSObject *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v5 = *a2;
  if (*a2)
    dispatch_retain(*a2);
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  *a1 = 0;
  a1[1] = 0;
  if (objc_msgSend(MEMORY[0x1E0CA5600], "isCallHandednessAvailable"))
  {
    v7 = operator new(0x40uLL);
    if (v5)
      dispatch_retain(v5);
    if (v6)
      dispatch_retain(v6);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v5;
    if (v5)
      dispatch_retain(v5);
    *((_QWORD *)v7 + 3) = v6;
    if (v6)
      dispatch_retain(v6);
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_BYTE *)v7 + 56) = 0;
    *((_QWORD *)v7 + 4) = objc_alloc_init(MEMORY[0x1E0CA5600]);
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908450;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v10 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      if (v10->__shared_owners_ != -1)
      {
LABEL_27:
        *a1 = v7;
        a1[1] = v8;
        if (v6)
          dispatch_release(v6);
        if (v5)
          dispatch_release(v5);
        goto LABEL_31;
      }
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
      *(_QWORD *)v7 = v7;
      *((_QWORD *)v7 + 1) = v8;
      std::__shared_weak_count::__release_weak(v10);
    }
    else
    {
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v15 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      *(_QWORD *)v7 = v7;
      *((_QWORD *)v7 + 1) = v8;
    }
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_27;
  }
LABEL_31:
  if (v6)
    dispatch_release(v6);
  if (v5)
    dispatch_release(v5);
  return a1;
}

void sub_1BF490118(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF490138(_Unwind_Exception *a1)
{
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;

  __cxa_end_catch();
  if (v3)
  {
    dispatch_release(v3);
    if (!v1)
      goto LABEL_3;
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  dispatch_release(v1);
LABEL_3:
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v3)
  {
    dispatch_release(v3);
    if (!v1)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else if (!v1)
  {
    goto LABEL_5;
  }
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void CMHandDetectionDelegate::~CMHandDetectionDelegate(CMHandDetectionDelegate *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t CMHandDetectionDelegate::isSupported(CMHandDetectionDelegate *this)
{
  unsigned __int8 v1;
  Capabilities *v3;
  unint64_t *v4;
  unint64_t v5;
  char v6;
  Capabilities *v7;
  void *v8;
  __int128 v9;

  v1 = atomic_load((unsigned __int8 *)&qword_1ED70FFD8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_1ED70FFD8))
    return _MergedGlobals_9;
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v3 = (Capabilities *)qword_1ED70FAA0;
  if (!qword_1ED70FAA0)
  {
    Capabilities::create_default_global(&v9);
    std::shared_ptr<Capabilities>::operator=[abi:ne180100](&v9);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v9);
    v3 = (Capabilities *)qword_1ED70FAA0;
  }
  v7 = v3;
  v8 = off_1ED70FAA8;
  if (off_1ED70FAA8)
  {
    v4 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported(v3))
    v6 = objc_msgSend(MEMORY[0x1E0CA5600], "isCallHandednessAvailable", v7, v8);
  else
    v6 = 0;
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v7);
  _MergedGlobals_9 = v6;
  __cxa_guard_release(&qword_1ED70FFD8);
  return _MergedGlobals_9;
}

void sub_1BF4903C0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  __cxa_guard_abort(&qword_1ED70FFD8);
  _Unwind_Resume(a1);
}

void CMHandDetectionDelegate::start(uint64_t **this)
{
  uint64_t v1;

  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(*this, &v1);
}

void CMHandDetectionDelegate::stop(uint64_t **this)
{
  uint64_t v1;

  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(*this, &v1);
}

void CMHandDetectionDelegate::registerCallback(uint64_t **a1, const void **a2)
{
  uint64_t *v2;
  void *v3;
  const void *v4;
  char v5;
  void *v6;
  uint64_t *v7;
  void *aBlock;

  v2 = *a1;
  if (!*a2)
  {
    v4 = 0;
    v7 = *a1;
LABEL_6:
    v5 = 1;
    aBlock = 0;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(v2, (uint64_t)&v7);
    v6 = aBlock;
    if (!aBlock)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = _Block_copy(*a2);
  v4 = v3;
  v7 = v2;
  if (!v3)
    goto LABEL_6;
  v5 = 0;
  aBlock = _Block_copy(v3);
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(v2, (uint64_t)&v7);
  v6 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v6);
LABEL_8:
  if ((v5 & 1) == 0)
    _Block_release(v4);
}

void CMHandDetectionDelegate::shutdown(uint64_t **this)
{
  uint64_t v1;

  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(*this, &v1);
}

const char *CMHandDetectionDelegate::toString(unsigned int a1)
{
  if (a1 > 2)
    return "Unknown Hand Detection";
  else
    return off_1E7908510[a1];
}

void std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110sh"
                                "ared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  if (__p)
  {
    v2 = (const void *)__p[6];
    if (v2)
      _Block_release(v2);
    v3 = __p[3];
    if (v3)
      dispatch_release(v3);
    v4 = __p[2];
    if (v4)
      dispatch_release(v4);
    v5 = (std::__shared_weak_count *)__p[1];
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete(__p);
  }
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(8uLL);
  *v8 = *a2;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(CMHandDetectionHandler::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(CMHandDetectionHandler::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = *(void **)(v3 + 32);
  if (v4 && !*(_BYTE *)(v3 + 56))
  {
    objc_msgSend(v4, "startCallHandednessUpdates");
    *(_BYTE *)(v3 + 56) = 1;
  }
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_8:
    operator delete(a1);
  }
}

void sub_1BF4907F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(8uLL);
  *v8 = *a2;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(CMHandDetectionHandler::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(CMHandDetectionHandler::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = *(void **)(v3 + 32);
  if (v4 && *(_BYTE *)(v3 + 56))
  {
    objc_msgSend(v4, "stopCallHandednessUpdates");
    *(_BYTE *)(v3 + 56) = 0;
  }
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_8:
    operator delete(a1);
  }
}

void sub_1BF4909C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _OWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t ***a1)
{
  uint64_t **v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  const void *v13;
  CMHandDetectionDelegateInternal *v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *, uint64_t);
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *aBlock;

  v2 = *a1;
  v3 = **a1;
  if (!v3[4] || !v2[1])
    goto LABEL_23;
  v4 = (std::__shared_weak_count *)v3[1];
  if (!v4 || (v5 = *v3, (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = v2[1];
    if (!v12)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = v2[1];
  if (v12)
LABEL_13:
    v12 = (uint64_t *)_Block_copy(v12);
LABEL_14:
  v13 = (const void *)v3[6];
  v3[6] = (uint64_t)v12;
  if (v13)
    _Block_release(v13);
  v14 = objc_alloc_init(CMHandDetectionDelegateInternal);
  v3[5] = (uint64_t)v14;
  v20 = MEMORY[0x1E0C809B0];
  v21 = 3321888768;
  v22 = ___ZZN22CMHandDetectionHandler16registerCallbackEN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEv_block_invoke;
  v23 = &__block_descriptor_56_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE_e8_v16__0q8l;
  v24 = v3;
  v25 = v5;
  v26 = v7;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  aBlock = _Block_copy(&v20);
  -[CMHandDetectionDelegateInternal registerHandler:](v14, "registerHandler:", &aBlock, v20, v21, v22, v23, v24, v25);
  if (aBlock)
    _Block_release(aBlock);
  objc_msgSend((id)v3[4], "setDelegate:", v3[5]);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v7);
LABEL_23:
  v16 = v2[1];
  if (v16)
    _Block_release(v16);
  operator delete(v2);
  v17 = (std::__shared_weak_count *)a1[2];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(a1);
}

void sub_1BF490CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock)
{
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  const void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v18);
  v20 = (const void *)v17[1];
  if (v20)
    _Block_release(v20);
  operator delete(v17);
  v21 = (std::__shared_weak_count *)v16[2];
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZZN22CMHandDetectionHandler16registerCallbackEN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (uint64_t *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = (std::__shared_weak_count *)v5[1];
        if (!v8 || (v9 = *v5, (v10 = std::__shared_weak_count::lock(v8)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v11 = v10;
        v12 = operator new(0x10uLL);
        *v12 = v5;
        v12[1] = a2;
        v13 = v5[2];
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = operator new(0x18uLL);
        *v16 = v12;
        v16[1] = v9;
        v16[2] = v11;
        dispatch_async_f(v13, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15execute_wrappedIZZZNS3_16registerCallbackENS_5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISE_NSJ_14default_deleteISE_EEEEENUlPvE_8__invokeESO_);
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15execute_wrappedIZZZNS3_16registerCallbackENS_5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISE_NSJ_14default_deleteISE_EEEEENUlPvE_8__invokeESO_(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)*a1;
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)*a1 + 48) + 16))();
  operator delete(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF490F94(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(8uLL);
  *v8 = *a2;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(CMHandDetectionHandler::shutdown(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(CMHandDetectionHandler::shutdown(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = *(void **)(v3 + 32);
  if (v4)
  {

    *(_QWORD *)(v3 + 32) = 0;
  }
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_7:
    operator delete(a1);
  }
}

void sub_1BF491164(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<Capabilities>::operator=[abi:ne180100](__int128 *a1)
{
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = (std::__shared_weak_count *)off_1ED70FAA8;
  *(_OWORD *)&qword_1ED70FAA0 = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E79084D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E79084D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t util::apfs::is_transcription_pending(util::apfs *this)
{
  NSObject *v1;
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  NSObject *v5;
  uint32_t v6;
  NSObject *v7;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[4];
  _BYTE v12[12];
  statfs v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  bzero(&v13, 0x878uLL);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  v1 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "Checking if disk requires APFS transcription", buf, 2u);
  }
  if (statfs("/private/var", &v13))
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v2 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v12 = "/private/var";
    v3 = "Failed to statfs: %s";
    v4 = v2;
LABEL_9:
    v6 = 12;
LABEL_10:
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v6);
    goto LABEL_11;
  }
  if (strlen(v13.f_mntfromname) - 1024 <= 0xFFFFFFFFFFFFFC00)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v5 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v12 = v13.f_mntfromname;
    v3 = "Failed to get mount point: %s";
    v4 = v5;
    goto LABEL_9;
  }
  if (APFSVolumeRole())
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v9 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v12 = 0;
      v3 = "APFS volume role error: %d";
      v4 = v9;
      v6 = 8;
      goto LABEL_10;
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v10 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v3 = "APFS volume role does not match";
      v4 = v10;
      v6 = 2;
      goto LABEL_10;
    }
  }
LABEL_11:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  v7 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v12 = 0;
    _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "APFS needs crypto migration: %d", buf, 8u);
  }
  return 0;
}

uint64_t awd::metrics::protobuf_ShutdownFile_CCMetricsABMPower_2eproto(awd::metrics *this)
{
  uint64_t result;

  if (awd::metrics::CommCenterPowerVotingRecord::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterPowerVotingRecord::default_instance_ + 8))(awd::metrics::CommCenterPowerVotingRecord::default_instance_);
  if (awd::metrics::CommCenterPowerTransitionSuccess::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterPowerTransitionSuccess::default_instance_ + 8))(awd::metrics::CommCenterPowerTransitionSuccess::default_instance_);
  if (awd::metrics::CommCenterPowerTransitionFailure::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterPowerTransitionFailure::default_instance_ + 8))(awd::metrics::CommCenterPowerTransitionFailure::default_instance_);
  if (awd::metrics::CommCenterMissedMTMessage::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterMissedMTMessage::default_instance_ + 8))(awd::metrics::CommCenterMissedMTMessage::default_instance_);
  if (awd::metrics::CommCenterLowPowerEvent::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterLowPowerEvent::default_instance_ + 8))(awd::metrics::CommCenterLowPowerEvent::default_instance_);
  if (awd::metrics::CommCenterWakeInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterWakeInfo::default_instance_ + 8))(awd::metrics::CommCenterWakeInfo::default_instance_);
  if (awd::metrics::CommCenterLowPowerStats::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterLowPowerStats::default_instance_ + 8))(awd::metrics::CommCenterLowPowerStats::default_instance_);
  result = awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  if (awd::metrics::CommCenterWakeReasonInfo::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterWakeReasonInfo::default_instance_
                                              + 8))(awd::metrics::CommCenterWakeReasonInfo::default_instance_);
  return result;
}

void awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  void (*v13)(void);

  if ((awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(void)::already_here & 1) == 0)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(void)::already_here = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Server/AWD/Generated/CCMetricsABMPower.pb.cc", a4);
    v4 = operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = off_1E7908538;
    awd::metrics::CommCenterPowerVotingRecord::default_instance_ = (uint64_t)v4;
    v5 = operator new(0x38uLL);
    v5[5] = 0;
    v5[6] = 0;
    *v5 = off_1E79085B0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    *((_DWORD *)v5 + 8) = 0;
    awd::metrics::CommCenterPowerTransitionSuccess::default_instance_ = (uint64_t)v5;
    v6 = operator new(0x38uLL);
    v6[5] = 0;
    v6[6] = 0;
    *v6 = off_1E7908628;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    *((_DWORD *)v6 + 8) = 0;
    awd::metrics::CommCenterPowerTransitionFailure::default_instance_ = (uint64_t)v6;
    v7 = operator new(0x20uLL);
    *v7 = off_1E79086A0;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    awd::metrics::CommCenterMissedMTMessage::default_instance_ = (uint64_t)v7;
    v8 = operator new(0x28uLL);
    *v8 = off_1E7908718;
    v8[1] = 0;
    v9 = MEMORY[0x1E0DE8338];
    v8[2] = 0;
    v8[3] = v9;
    v8[4] = 0;
    awd::metrics::CommCenterLowPowerEvent::default_instance_ = (uint64_t)v8;
    v10 = operator new(0x28uLL);
    *v10 = off_1E7908790;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = 0;
    *((_DWORD *)v10 + 8) = 0;
    awd::metrics::CommCenterWakeInfo::default_instance_ = (uint64_t)v10;
    v11 = (char *)operator new(0x50uLL);
    *(_QWORD *)v11 = off_1E7908808;
    *((_QWORD *)v11 + 8) = 0;
    *((_DWORD *)v11 + 18) = 0;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((_DWORD *)v11 + 14) = 0;
    awd::metrics::CommCenterLowPowerStats::default_instance_ = (uint64_t)v11;
    v12 = operator new(0x68uLL);
    *v12 = off_1E7908880;
    v12[1] = 0;
    *((_WORD *)v12 + 26) = 0;
    v12[2] = v9;
    v12[3] = v9;
    *((_DWORD *)v12 + 12) = 0;
    v12[4] = v9;
    v12[5] = v9;
    v12[7] = v9;
    v12[8] = v9;
    v12[9] = v9;
    v12[10] = 0;
    v12[11] = 0;
    *((_DWORD *)v12 + 24) = 0;
    awd::metrics::CommCenterWakeReasonInfo::default_instance_ = (uint64_t)v12;
    wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)awd::metrics::protobuf_ShutdownFile_CCMetricsABMPower_2eproto, v13);
  }
}

_QWORD *awd::metrics::CommCenterPowerVotingRecord::CommCenterPowerVotingRecord(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E7908538;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E7908538;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::CommCenterPowerTransitionSuccess(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E79085B0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E79085B0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::CommCenterPowerTransitionFailure(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E7908628;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E7908628;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterMissedMTMessage::CommCenterMissedMTMessage(_QWORD *this)
{
  *this = off_1E79086A0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1E79086A0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterLowPowerEvent::CommCenterLowPowerEvent(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = off_1E7908718;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = off_1E7908718;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::CommCenterWakeInfo(uint64_t this)
{
  *(_QWORD *)this = off_1E7908790;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E7908790;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double awd::metrics::CommCenterLowPowerStats::CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this)
{
  double result;

  *(_QWORD *)this = off_1E7908808;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1E7908808;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::CommCenterWakeReasonInfo(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E7908880;
  *(_QWORD *)(this + 8) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_WORD *)(this + 52) = 0;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = v1;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = v1;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  uint64_t v1;

  *(_QWORD *)this = off_1E7908880;
  *(_QWORD *)(this + 8) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_WORD *)(this + 52) = 0;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = v1;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = v1;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

BOOL awd::metrics::CommCenterMissedMTType_IsValid(awd::metrics *this)
{
  return this < 3;
}

BOOL awd::metrics::CommCenterSleepType_IsValid(awd::metrics *this)
{
  return this < 2;
}

BOOL awd::metrics::CommCenterLowPowerEventType_IsValid(awd::metrics *this)
{
  return this < 3;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

awd::metrics::CommCenterPowerVotingRecord *awd::metrics::CommCenterPowerVotingRecord::CommCenterPowerVotingRecord(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E7908538;
  awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E7908538;
  awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  return this;
}

void sub_1BF491BE0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerVotingRecord::MergeFrom(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  int v4;
  int v5;
  int v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 20);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 20) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_DWORD *)a2 + 3);
      *((_DWORD *)this + 5) |= 2u;
      *((_DWORD *)this + 3) = v6;
    }
  }
}

void sub_1BF491C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF491CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF491CF8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerVotingRecord::~CommCenterPowerVotingRecord(awd::metrics::CommCenterPowerVotingRecord *this)
{
  *(_QWORD *)this = off_1E7908538;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E7908538;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E7908538;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::default_instance(awd::metrics::CommCenterPowerVotingRecord *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterPowerVotingRecord::default_instance_;
  if (!awd::metrics::CommCenterPowerVotingRecord::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerVotingRecord::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterPowerVotingRecord::New(awd::metrics::CommCenterPowerVotingRecord *this)
{
  _QWORD *result;

  result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  *result = off_1E7908538;
  return result;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(awd::metrics::CommCenterPowerVotingRecord *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v12 < v9)
            goto LABEL_23;
        }
        else
        {
          *v4 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v12 < v9)
          {
LABEL_23:
            if (*v12 == 16)
            {
              v10 = v12 + 1;
              *((_QWORD *)a2 + 1) = v10;
              if ((unint64_t)v10 < v9)
                goto LABEL_25;
LABEL_28:
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
              if (!(_DWORD)result)
                return result;
              v15 = *((_QWORD *)a2 + 1);
              v14 = *((_QWORD *)a2 + 2);
              *((_DWORD *)this + 5) |= 2u;
              if (v15 == v14)
                goto LABEL_30;
            }
          }
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_18;
      v10 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v10 >= v9)
        goto LABEL_28;
LABEL_25:
      if ((char)*v10 < 0)
        goto LABEL_28;
      *v5 = *v10;
      v13 = (char *)(v10 + 1);
      *((_QWORD *)a2 + 1) = v13;
      *((_DWORD *)this + 5) |= 2u;
      if (v13 == (char *)v9)
      {
LABEL_30:
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::ByteSize(awd::metrics::CommCenterPowerVotingRecord *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;

  v2 = *((_BYTE *)this + 20);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_11;
LABEL_6:
    *((_DWORD *)this + 4) = v3;
    return v3;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v5 < 0x80)
  {
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_11;
    goto LABEL_6;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  if ((*((_DWORD *)this + 5) & 2) == 0)
    goto LABEL_6;
LABEL_11:
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6)
       + 1
       + v3;
  else
    v7 = (v3 + 2);
  *((_DWORD *)this + 4) = v7;
  return v7;
}

void awd::metrics::CommCenterPowerVotingRecord::CopyFrom(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerVotingRecord *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::IsInitialized(awd::metrics::CommCenterPowerVotingRecord *this)
{
  return 1;
}

awd::metrics::CommCenterPowerVotingRecord *awd::metrics::CommCenterPowerVotingRecord::Swap(awd::metrics::CommCenterPowerVotingRecord *this, awd::metrics::CommCenterPowerVotingRecord *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return this;
}

char *awd::metrics::CommCenterPowerVotingRecord::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF545B30;
  strcpy(result, "awd.metrics.CommCenterPowerVotingRecord");
  return result;
}

_QWORD *awd::metrics::CommCenterPowerTransitionSuccess::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

awd::metrics::CommCenterPowerTransitionSuccess *awd::metrics::CommCenterPowerTransitionSuccess::CommCenterPowerTransitionSuccess(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_1E79085B0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_1E79085B0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  return this;
}

void sub_1BF492204(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  uint64_t v4;
  awd::metrics::CommCenterPowerVotingRecord *v5;
  uint64_t v6;
  uint64_t v7;
  const awd::metrics::CommCenterPowerVotingRecord *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BYTE v16[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    v4 = 0;
    do
    {
      while (1)
      {
        v8 = *(const awd::metrics::CommCenterPowerVotingRecord **)(*((_QWORD *)a2 + 2) + 8 * v4);
        v9 = *((_DWORD *)this + 7);
        v10 = *((int *)this + 6);
        if ((int)v10 >= v9)
          break;
        v11 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v10 + 1;
        awd::metrics::CommCenterPowerVotingRecord::MergeFrom(*(awd::metrics::CommCenterPowerVotingRecord **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 6))
          goto LABEL_11;
      }
      if (v9 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16));
        v9 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v9 + 1;
      v5 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)v5 = off_1E7908538;
      v6 = *((_QWORD *)this + 2);
      v7 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v7 + 1;
      *(_QWORD *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterPowerVotingRecord::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  LOBYTE(v12) = *((_BYTE *)a2 + 52);
  if ((_BYTE)v12)
  {
    if ((*((_BYTE *)a2 + 52) & 1) != 0)
    {
      v14 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 13) |= 1u;
      *((_DWORD *)this + 2) = v14;
      v12 = *((_DWORD *)a2 + 13);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 8) == 0)
          return;
        goto LABEL_15;
      }
    }
    else if ((*((_BYTE *)a2 + 52) & 2) == 0)
    {
      goto LABEL_14;
    }
    v15 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 2u;
    *((_DWORD *)this + 3) = v15;
    if ((*((_DWORD *)a2 + 13) & 8) == 0)
      return;
LABEL_15:
    v13 = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 13) |= 8u;
    *((_QWORD *)this + 5) = v13;
  }
}

void sub_1BF4923DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF4923F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF492448(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;

  v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  v6 = *(void **)(v1 + 16);
  if (v6)
    operator delete[](v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionSuccess::~CommCenterPowerTransitionSuccess(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E79085B0;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E79085B0;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E79085B0;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v6);
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::default_instance(awd::metrics::CommCenterPowerTransitionSuccess *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterPowerTransitionSuccess::default_instance_;
  if (!awd::metrics::CommCenterPowerTransitionSuccess::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerTransitionSuccess::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterPowerTransitionSuccess::New(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  _QWORD *result;

  result = operator new(0x38uLL);
  result[5] = 0;
  result[6] = 0;
  *result = off_1E79085B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 52))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 40) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::MergePartialFromCodedStream(awd::metrics::CommCenterPowerTransitionSuccess *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unint64_t *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  awd::metrics::CommCenterPowerVotingRecord *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t result;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = (awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16);
  v7 = (unint64_t *)((char *)this + 40);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
        goto LABEL_30;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
LABEL_30:
        if (*v14 < 0)
        {
LABEL_33:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v23)
            continue;
        }
        else
        {
          *v5 = *v14;
          v22 = v14 + 1;
          *((_QWORD *)a2 + 1) = v22;
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v11)
            continue;
        }
        if (*v22 != 26)
          continue;
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_21;
        v15 = *((_DWORD *)this + 7);
        v16 = *((int *)this + 6);
        if ((int)v16 < v15)
          goto LABEL_19;
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v20 >= v19)
          goto LABEL_56;
        goto LABEL_53;
      default:
        v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
    do
    {
      *((_QWORD *)a2 + 1) = v22 + 1;
      v15 = *((_DWORD *)this + 7);
      v16 = *((int *)this + 6);
      if ((int)v16 < v15)
      {
LABEL_19:
        v17 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v16 + 1;
        v18 = *(awd::metrics::CommCenterPowerVotingRecord **)(v17 + 8 * v16);
      }
      else
      {
LABEL_37:
        if (v15 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
          v15 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v15 + 1;
        v18 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_QWORD *)v18 = off_1E7908538;
        v24 = *((_QWORD *)this + 2);
        v25 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25) = v18;
      }
      v36 = -1431655766;
      v26 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))
          return 0;
      }
      else
      {
        v36 = *v26;
        *((_QWORD *)a2 + 1) = v26 + 1;
      }
      v27 = *((_DWORD *)a2 + 14);
      v28 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v27 + 1;
      if (v27 >= v28)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(v18, a2)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v29 = *((_DWORD *)a2 + 14);
      v30 = __OFSUB__(v29, 1);
      v31 = v29 - 1;
      if (v31 < 0 == v30)
        *((_DWORD *)a2 + 14) = v31;
      v22 = (_BYTE *)*((_QWORD *)a2 + 1);
      v19 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v22 >= v19)
        goto LABEL_2;
      v32 = *v22;
    }
    while (v32 == 26);
    if (v32 != 32)
      continue;
    v20 = v22 + 1;
    *((_QWORD *)a2 + 1) = v20;
    if ((unint64_t)v20 >= v19)
      break;
LABEL_53:
    if ((char)*v20 < 0)
      break;
    *v7 = *v20;
    v33 = (char *)(v20 + 1);
    *((_QWORD *)a2 + 1) = v33;
    *((_DWORD *)this + 13) |= 8u;
    if (v33 == (char *)v19)
      goto LABEL_58;
  }
LABEL_56:
  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
  if ((_DWORD)result)
  {
    v35 = *((_QWORD *)a2 + 1);
    v34 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 13) |= 8u;
    if (v35 != v34)
      goto LABEL_2;
LABEL_58:
    if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
      goto LABEL_2;
    *((_DWORD *)a2 + 8) = 0;
    result = 1;
    *((_BYTE *)a2 + 36) = 1;
  }
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
    if (*(int *)(v5 + 24) < 1)
      goto LABEL_9;
LABEL_7:
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
    goto LABEL_9;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(int *)(v5 + 24) >= 1)
    goto LABEL_7;
LABEL_9:
  if ((*(_BYTE *)(v5 + 52) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 40), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::ByteSize(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;

  LOBYTE(v2) = *((_BYTE *)this + 52);
  if (!(_BYTE)v2)
  {
    v6 = *((_DWORD *)this + 6);
    v5 = v6;
    if (v6 < 1)
      goto LABEL_35;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_4;
LABEL_13:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v8 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      if ((*((_DWORD *)this + 13) & 8) != 0)
        goto LABEL_17;
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0)
        goto LABEL_17;
    }
LABEL_5:
    v4 = *((_DWORD *)this + 6);
    v5 = (v4 + v3);
    if (v4 < 1)
      goto LABEL_35;
    goto LABEL_18;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v7 >= 0x80)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_4:
  if ((v2 & 8) == 0)
    goto LABEL_5;
LABEL_17:
  v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 5));
  v10 = *((_DWORD *)this + 6);
  v5 = (v10 + v3 + v9 + 1);
  if (v10 >= 1)
  {
LABEL_18:
    for (i = 0; i < *((int *)this + 6); ++i)
    {
      while (1)
      {
        v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
        if (!*(_BYTE *)(v13 + 20))
        {
          LODWORD(v12) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          goto LABEL_20;
        }
        if ((*(_BYTE *)(v13 + 20) & 1) != 0)
          break;
        v12 = 0;
        if ((*(_BYTE *)(v13 + 20) & 2) == 0)
          goto LABEL_24;
LABEL_30:
        v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 12);
        if (v15 < 0x80)
        {
          v12 = (v12 + 2);
          *(_DWORD *)(v13 + 16) = v12;
          if (v12 >= 0x80)
            goto LABEL_34;
          goto LABEL_20;
        }
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15)
            + 1
            + v12;
        *(_DWORD *)(v13 + 16) = v12;
        if (v12 < 0x80)
          goto LABEL_20;
LABEL_34:
        v5 = (_DWORD)v12
           + (_DWORD)v5
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
        if (++i >= *((int *)this + 6))
          goto LABEL_35;
      }
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 8);
      if (v14 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
        if ((*(_DWORD *)(v13 + 20) & 2) != 0)
          goto LABEL_30;
      }
      else
      {
        v12 = 2;
        if ((*(_BYTE *)(v13 + 20) & 2) != 0)
          goto LABEL_30;
      }
LABEL_24:
      *(_DWORD *)(v13 + 16) = v12;
      if (v12 >= 0x80)
        goto LABEL_34;
LABEL_20:
      v5 = (v12 + v5 + 1);
    }
  }
LABEL_35:
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void awd::metrics::CommCenterPowerTransitionSuccess::CopyFrom(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerTransitionSuccess *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::IsInitialized(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  return 1;
}

awd::metrics::CommCenterPowerTransitionSuccess *awd::metrics::CommCenterPowerTransitionSuccess::Swap(awd::metrics::CommCenterPowerTransitionSuccess *this, awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  awd::metrics::CommCenterPowerTransitionSuccess *v3;
  int v4;
  int v5;
  uint64_t v6;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    v5 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    this = (awd::metrics::CommCenterPowerTransitionSuccess *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v6 = *((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

double awd::metrics::CommCenterPowerTransitionSuccess::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF545B40;
  strcpy(v3, "awd.metrics.CommCenterPowerTransitionSuccess");
  return *(double *)"ransitionSuccess";
}

_QWORD *awd::metrics::CommCenterPowerTransitionFailure::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

awd::metrics::CommCenterPowerTransitionFailure *awd::metrics::CommCenterPowerTransitionFailure::CommCenterPowerTransitionFailure(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_1E7908628;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_1E7908628;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  return this;
}

void sub_1BF492EF0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  uint64_t v4;
  awd::metrics::CommCenterPowerVotingRecord *v5;
  uint64_t v6;
  uint64_t v7;
  const awd::metrics::CommCenterPowerVotingRecord *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BYTE v16[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    v4 = 0;
    do
    {
      while (1)
      {
        v8 = *(const awd::metrics::CommCenterPowerVotingRecord **)(*((_QWORD *)a2 + 2) + 8 * v4);
        v9 = *((_DWORD *)this + 7);
        v10 = *((int *)this + 6);
        if ((int)v10 >= v9)
          break;
        v11 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v10 + 1;
        awd::metrics::CommCenterPowerVotingRecord::MergeFrom(*(awd::metrics::CommCenterPowerVotingRecord **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 6))
          goto LABEL_11;
      }
      if (v9 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16));
        v9 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v9 + 1;
      v5 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)v5 = off_1E7908538;
      v6 = *((_QWORD *)this + 2);
      v7 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v7 + 1;
      *(_QWORD *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterPowerVotingRecord::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  LOBYTE(v12) = *((_BYTE *)a2 + 52);
  if ((_BYTE)v12)
  {
    if ((*((_BYTE *)a2 + 52) & 1) != 0)
    {
      v14 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 13) |= 1u;
      *((_DWORD *)this + 2) = v14;
      v12 = *((_DWORD *)a2 + 13);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 8) == 0)
          return;
        goto LABEL_15;
      }
    }
    else if ((*((_BYTE *)a2 + 52) & 2) == 0)
    {
      goto LABEL_14;
    }
    v15 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 2u;
    *((_DWORD *)this + 3) = v15;
    if ((*((_DWORD *)a2 + 13) & 8) == 0)
      return;
LABEL_15:
    v13 = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 13) |= 8u;
    *((_QWORD *)this + 5) = v13;
  }
}

void sub_1BF4930C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF4930DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF493134(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;

  v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  v6 = *(void **)(v1 + 16);
  if (v6)
    operator delete[](v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionFailure::~CommCenterPowerTransitionFailure(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7908628;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7908628;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E7908628;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v6);
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::default_instance(awd::metrics::CommCenterPowerTransitionFailure *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterPowerTransitionFailure::default_instance_;
  if (!awd::metrics::CommCenterPowerTransitionFailure::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerTransitionFailure::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterPowerTransitionFailure::New(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  _QWORD *result;

  result = operator new(0x38uLL);
  result[5] = 0;
  result[6] = 0;
  *result = off_1E7908628;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 52))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 40) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::MergePartialFromCodedStream(awd::metrics::CommCenterPowerTransitionFailure *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unint64_t *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  awd::metrics::CommCenterPowerVotingRecord *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t result;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = (awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16);
  v7 = (unint64_t *)((char *)this + 40);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
        goto LABEL_30;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
LABEL_30:
        if (*v14 < 0)
        {
LABEL_33:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v23)
            continue;
        }
        else
        {
          *v5 = *v14;
          v22 = v14 + 1;
          *((_QWORD *)a2 + 1) = v22;
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v11)
            continue;
        }
        if (*v22 != 26)
          continue;
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_21;
        v15 = *((_DWORD *)this + 7);
        v16 = *((int *)this + 6);
        if ((int)v16 < v15)
          goto LABEL_19;
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v20 >= v19)
          goto LABEL_56;
        goto LABEL_53;
      default:
        v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
    do
    {
      *((_QWORD *)a2 + 1) = v22 + 1;
      v15 = *((_DWORD *)this + 7);
      v16 = *((int *)this + 6);
      if ((int)v16 < v15)
      {
LABEL_19:
        v17 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v16 + 1;
        v18 = *(awd::metrics::CommCenterPowerVotingRecord **)(v17 + 8 * v16);
      }
      else
      {
LABEL_37:
        if (v15 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
          v15 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v15 + 1;
        v18 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_QWORD *)v18 = off_1E7908538;
        v24 = *((_QWORD *)this + 2);
        v25 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25) = v18;
      }
      v36 = -1431655766;
      v26 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))
          return 0;
      }
      else
      {
        v36 = *v26;
        *((_QWORD *)a2 + 1) = v26 + 1;
      }
      v27 = *((_DWORD *)a2 + 14);
      v28 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v27 + 1;
      if (v27 >= v28)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(v18, a2)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v29 = *((_DWORD *)a2 + 14);
      v30 = __OFSUB__(v29, 1);
      v31 = v29 - 1;
      if (v31 < 0 == v30)
        *((_DWORD *)a2 + 14) = v31;
      v22 = (_BYTE *)*((_QWORD *)a2 + 1);
      v19 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v22 >= v19)
        goto LABEL_2;
      v32 = *v22;
    }
    while (v32 == 26);
    if (v32 != 32)
      continue;
    v20 = v22 + 1;
    *((_QWORD *)a2 + 1) = v20;
    if ((unint64_t)v20 >= v19)
      break;
LABEL_53:
    if ((char)*v20 < 0)
      break;
    *v7 = *v20;
    v33 = (char *)(v20 + 1);
    *((_QWORD *)a2 + 1) = v33;
    *((_DWORD *)this + 13) |= 8u;
    if (v33 == (char *)v19)
      goto LABEL_58;
  }
LABEL_56:
  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
  if ((_DWORD)result)
  {
    v35 = *((_QWORD *)a2 + 1);
    v34 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 13) |= 8u;
    if (v35 != v34)
      goto LABEL_2;
LABEL_58:
    if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
      goto LABEL_2;
    *((_DWORD *)a2 + 8) = 0;
    result = 1;
    *((_BYTE *)a2 + 36) = 1;
  }
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
    if (*(int *)(v5 + 24) < 1)
      goto LABEL_9;
LABEL_7:
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
    goto LABEL_9;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(int *)(v5 + 24) >= 1)
    goto LABEL_7;
LABEL_9:
  if ((*(_BYTE *)(v5 + 52) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 40), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::ByteSize(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;

  LOBYTE(v2) = *((_BYTE *)this + 52);
  if (!(_BYTE)v2)
  {
    v6 = *((_DWORD *)this + 6);
    v5 = v6;
    if (v6 < 1)
      goto LABEL_35;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_4;
LABEL_13:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v8 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      if ((*((_DWORD *)this + 13) & 8) != 0)
        goto LABEL_17;
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0)
        goto LABEL_17;
    }
LABEL_5:
    v4 = *((_DWORD *)this + 6);
    v5 = (v4 + v3);
    if (v4 < 1)
      goto LABEL_35;
    goto LABEL_18;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v7 >= 0x80)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_4:
  if ((v2 & 8) == 0)
    goto LABEL_5;
LABEL_17:
  v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 5));
  v10 = *((_DWORD *)this + 6);
  v5 = (v10 + v3 + v9 + 1);
  if (v10 >= 1)
  {
LABEL_18:
    for (i = 0; i < *((int *)this + 6); ++i)
    {
      while (1)
      {
        v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
        if (!*(_BYTE *)(v13 + 20))
        {
          LODWORD(v12) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          goto LABEL_20;
        }
        if ((*(_BYTE *)(v13 + 20) & 1) != 0)
          break;
        v12 = 0;
        if ((*(_BYTE *)(v13 + 20) & 2) == 0)
          goto LABEL_24;
LABEL_30:
        v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 12);
        if (v15 < 0x80)
        {
          v12 = (v12 + 2);
          *(_DWORD *)(v13 + 16) = v12;
          if (v12 >= 0x80)
            goto LABEL_34;
          goto LABEL_20;
        }
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15)
            + 1
            + v12;
        *(_DWORD *)(v13 + 16) = v12;
        if (v12 < 0x80)
          goto LABEL_20;
LABEL_34:
        v5 = (_DWORD)v12
           + (_DWORD)v5
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
        if (++i >= *((int *)this + 6))
          goto LABEL_35;
      }
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 8);
      if (v14 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
        if ((*(_DWORD *)(v13 + 20) & 2) != 0)
          goto LABEL_30;
      }
      else
      {
        v12 = 2;
        if ((*(_BYTE *)(v13 + 20) & 2) != 0)
          goto LABEL_30;
      }
LABEL_24:
      *(_DWORD *)(v13 + 16) = v12;
      if (v12 >= 0x80)
        goto LABEL_34;
LABEL_20:
      v5 = (v12 + v5 + 1);
    }
  }
LABEL_35:
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void awd::metrics::CommCenterPowerTransitionFailure::CopyFrom(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerTransitionFailure *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::IsInitialized(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  return 1;
}

awd::metrics::CommCenterPowerTransitionFailure *awd::metrics::CommCenterPowerTransitionFailure::Swap(awd::metrics::CommCenterPowerTransitionFailure *this, awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  awd::metrics::CommCenterPowerTransitionFailure *v3;
  int v4;
  int v5;
  uint64_t v6;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    v5 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    this = (awd::metrics::CommCenterPowerTransitionFailure *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v6 = *((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

double awd::metrics::CommCenterPowerTransitionFailure::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF545B40;
  strcpy(v3, "awd.metrics.CommCenterPowerTransitionFailure");
  return *(double *)"ransitionFailure";
}

_QWORD *awd::metrics::CommCenterMissedMTMessage::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

awd::metrics::CommCenterMissedMTMessage *awd::metrics::CommCenterMissedMTMessage::CommCenterMissedMTMessage(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  *(_QWORD *)this = off_1E79086A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E79086A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  return this;
}

void sub_1BF493BCC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterMissedMTMessage::MergeFrom(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BYTE v9[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 1u;
      *((_DWORD *)this + 2) = v6;
      v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*((_BYTE *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 3) = v7;
    v4 = *((_DWORD *)a2 + 7);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v8 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) |= 4u;
    *((_DWORD *)this + 4) = v8;
    if ((*((_DWORD *)a2 + 7) & 8) == 0)
      return;
LABEL_8:
    v5 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 7) |= 8u;
    *((_DWORD *)this + 5) = v5;
  }
}

void sub_1BF493CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF493CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF493D2C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterMissedMTMessage::~CommCenterMissedMTMessage(awd::metrics::CommCenterMissedMTMessage *this)
{
  *(_QWORD *)this = off_1E79086A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E79086A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E79086A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::default_instance(awd::metrics::CommCenterMissedMTMessage *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterMissedMTMessage::default_instance_;
  if (!awd::metrics::CommCenterMissedMTMessage::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterMissedMTMessage::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterMissedMTMessage::New(awd::metrics::CommCenterMissedMTMessage *this)
{
  _QWORD *result;

  result = operator new(0x20uLL);
  *result = off_1E79086A0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 28))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::MergePartialFromCodedStream(awd::metrics::CommCenterMissedMTMessage *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (unsigned int *)((char *)this + 20);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
        goto LABEL_30;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
LABEL_30:
        if ((*v14 & 0x80000000) == 0)
        {
          *v5 = *v14;
          v17 = v14 + 1;
          *((_QWORD *)a2 + 1) = v17;
          *((_DWORD *)this + 7) |= 2u;
          if ((unint64_t)v17 < v11)
            goto LABEL_35;
          continue;
        }
LABEL_33:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v17 >= v11)
          continue;
LABEL_35:
        if (*v17 != 24)
          continue;
        v15 = v17 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11)
          goto LABEL_40;
LABEL_37:
        if ((*v15 & 0x80000000) == 0)
        {
          *v6 = *v15;
          v18 = v15 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 7) |= 4u;
          if ((unint64_t)v18 < v11)
            goto LABEL_42;
          continue;
        }
LABEL_40:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!(_DWORD)result)
          return result;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 7) |= 4u;
        if ((unint64_t)v18 >= v11)
          continue;
LABEL_42:
        if (*v18 != 32)
          continue;
        v16 = v18 + 1;
        *((_QWORD *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v11)
          goto LABEL_47;
LABEL_44:
        if ((*v16 & 0x80000000) == 0)
        {
          *v7 = *v16;
          v19 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)a2 + 1) = v19;
          *((_DWORD *)this + 7) |= 8u;
          if (v19 == (unsigned __int8 *)v11)
            goto LABEL_49;
          continue;
        }
LABEL_47:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
        if (!(_DWORD)result)
          return result;
        v21 = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 7) |= 8u;
        if (v21 != v20)
          continue;
LABEL_49:
        if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_40;
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v11)
          goto LABEL_47;
        goto LABEL_44;
      default:
        v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
  }
}

unsigned int *awd::metrics::CommCenterMissedMTMessage::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = this;
  v6 = this[7];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (uint64_t)a2, a4);
    v6 = v5[7];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], (uint64_t)a2, a4);
  v6 = v5[7];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], (uint64_t)a2, a4);
  }
LABEL_8:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], (uint64_t)a2, a4);
  if ((v5[7] & 8) != 0)
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::ByteSize(awd::metrics::CommCenterMissedMTMessage *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  uint64_t v10;

  LOBYTE(v2) = *((_BYTE *)this + 28);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 7);
      if ((v2 & 2) == 0)
        goto LABEL_15;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_15;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_15;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    v2 = *((_DWORD *)this + 7);
  }
  else
  {
    v7 = 2;
  }
  v3 = (v7 + v3);
LABEL_15:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0)
      goto LABEL_22;
LABEL_6:
    *((_DWORD *)this + 6) = v3;
    return v3;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v8 < 0x80)
  {
    v3 = (v3 + 2);
    if ((v2 & 8) != 0)
      goto LABEL_22;
    goto LABEL_6;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
     + 1
     + v3;
  if ((*((_DWORD *)this + 7) & 8) == 0)
    goto LABEL_6;
LABEL_22:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v9 >= 0x80)
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9)
        + 1
        + v3;
  else
    v10 = (v3 + 2);
  *((_DWORD *)this + 6) = v10;
  return v10;
}

void awd::metrics::CommCenterMissedMTMessage::CopyFrom(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterMissedMTMessage *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterMissedMTMessage::IsInitialized(awd::metrics::CommCenterMissedMTMessage *this)
{
  return 1;
}

awd::metrics::CommCenterMissedMTMessage *awd::metrics::CommCenterMissedMTMessage::Swap(awd::metrics::CommCenterMissedMTMessage *this, awd::metrics::CommCenterMissedMTMessage *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v5;
    v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
    v7 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v7;
  }
  return this;
}

char *awd::metrics::CommCenterMissedMTMessage::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF545B50;
  strcpy(result, "awd.metrics.CommCenterMissedMTMessage");
  return result;
}

_QWORD *awd::metrics::CommCenterLowPowerEvent::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = MEMORY[0x1E0DE8338];
  this[4] = 0;
  return this;
}

awd::metrics::CommCenterLowPowerEvent *awd::metrics::CommCenterLowPowerEvent::CommCenterLowPowerEvent(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E7908718;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E7908718;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  return this;
}

void sub_1BF49445C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerEvent::MergeFrom(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  void **v8;
  void **v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;
  char v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((_QWORD *)this + 1) = v5;
      v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((*((_BYTE *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v6 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 4) = v6;
    v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        return;
LABEL_12:
      v8 = (void **)*((_QWORD *)a2 + 3);
      *((_DWORD *)this + 9) |= 8u;
      v9 = (void **)*((_QWORD *)this + 3);
      if (v9 == (void **)MEMORY[0x1E0DE8338])
      {
        v9 = (void **)operator new(0x18uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        *((_QWORD *)this + 3) = v9;
      }
      if (v9 != v8)
      {
        v10 = *((_BYTE *)v8 + 23);
        if (*((char *)v9 + 23) < 0)
        {
          if (v10 >= 0)
            v12 = v8;
          else
            v12 = *v8;
          if (v10 >= 0)
            v13 = *((unsigned __int8 *)v8 + 23);
          else
            v13 = (size_t)v8[1];
          std::string::__assign_no_alias<false>(v9, v12, v13);
        }
        else if ((*((_BYTE *)v8 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v9, *v8, (size_t)v8[1]);
        }
        else
        {
          v11 = *(_OWORD *)v8;
          v9[2] = v8[2];
          *(_OWORD *)v9 = v11;
        }
      }
      return;
    }
LABEL_11:
    v7 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 9) |= 4u;
    *((_DWORD *)this + 5) = v7;
    if ((*((_DWORD *)a2 + 9) & 8) == 0)
      return;
    goto LABEL_12;
  }
}

void sub_1BF4945F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF49460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF494660(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerEvent::~CommCenterLowPowerEvent(awd::metrics::CommCenterLowPowerEvent *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E7908718;
  v2 = *((_QWORD *)this + 3);
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E7908718;
  v2 = *((_QWORD *)this + 3);
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  void *v4;

  *(_QWORD *)this = off_1E7908718;
  v2 = *((_QWORD *)this + 3);
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v4);
}

void awd::metrics::CommCenterLowPowerEvent::SharedDtor(awd::metrics::CommCenterLowPowerEvent *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1 != MEMORY[0x1E0DE8338] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      operator delete((void *)v1);
    }
    else
    {
      operator delete(*((void **)this + 3));
    }
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::default_instance(awd::metrics::CommCenterLowPowerEvent *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterLowPowerEvent::default_instance_;
  if (!awd::metrics::CommCenterLowPowerEvent::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterLowPowerEvent::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterLowPowerEvent::New(awd::metrics::CommCenterLowPowerEvent *this)
{
  _QWORD *result;
  uint64_t v2;

  result = operator new(0x28uLL);
  v2 = MEMORY[0x1E0DE8338];
  *result = off_1E7908718;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 36);
  if (!v1)
    goto LABEL_6;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  if ((v1 & 8) == 0)
    goto LABEL_6;
  v2 = *(_QWORD *)(this + 24);
  if (v2 == MEMORY[0x1E0DE8338])
    goto LABEL_6;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
LABEL_6:
    *(_DWORD *)(this + 36) = 0;
    return this;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::MergePartialFromCodedStream(awd::metrics::CommCenterLowPowerEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t result;
  _BYTE *v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 < v11 && (*v12 & 0x80000000) == 0)
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
          goto LABEL_33;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if ((_DWORD)result)
        {
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
LABEL_33:
          if (*v13 != 16)
            continue;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
          if ((unint64_t)v14 >= v11)
            goto LABEL_38;
          goto LABEL_35;
        }
        break;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_38;
LABEL_35:
        if (*v14 < 0)
        {
LABEL_38:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v18 >= v11)
            continue;
        }
        else
        {
          *v5 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v18 >= v11)
            continue;
        }
        if (*v18 != 24)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11)
          goto LABEL_45;
LABEL_42:
        if (*v15 < 0)
        {
LABEL_45:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v20 = *((_DWORD *)this + 9) | 4;
          *((_DWORD *)this + 9) = v20;
          if ((unint64_t)v19 >= v21)
            continue;
        }
        else
        {
          *v6 = *v15;
          v19 = v15 + 1;
          *((_QWORD *)a2 + 1) = v19;
          v20 = *((_DWORD *)this + 9) | 4;
          *((_DWORD *)this + 9) = v20;
          if ((unint64_t)v19 >= v11)
            continue;
        }
        if (*v19 == 34)
        {
          *((_QWORD *)a2 + 1) = v19 + 1;
          *((_DWORD *)this + 9) = v20 | 8;
          if (*((_QWORD *)this + 3) == v7)
          {
LABEL_22:
            v16 = operator new(0x18uLL);
            v16[1] = 0;
            v16[2] = 0;
            *v16 = 0;
            *((_QWORD *)this + 3) = v16;
          }
LABEL_23:
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
        }
        continue;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_45;
        goto LABEL_42;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_28;
        *((_DWORD *)this + 9) |= 8u;
        if (*((_QWORD *)this + 3) == v7)
          goto LABEL_22;
        goto LABEL_23;
      default:
        v10 = TagFallback & 7;
LABEL_28:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
    return result;
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = v5[9];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  v6 = v5[9];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  if ((v5[9] & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::ByteSize(awd::metrics::CommCenterLowPowerEvent *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;

  LOBYTE(v2) = *((_BYTE *)this + 36);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 9);
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 9);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0)
      goto LABEL_19;
LABEL_6:
    *((_DWORD *)this + 8) = v3;
    return v3;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 < 0x80)
  {
    v3 = (v3 + 2);
    if ((v2 & 8) != 0)
      goto LABEL_19;
    goto LABEL_6;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
     + 1
     + v3;
  if ((*((_DWORD *)this + 9) & 8) == 0)
    goto LABEL_6;
LABEL_19:
  v8 = *((_QWORD *)this + 3);
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = v9;
  v11 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = v11;
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v11 = *(_QWORD *)(v8 + 8);
    v10 = *(_BYTE *)(v8 + 23);
  }
  else
  {
    v13 = 1;
  }
  if (v10 < 0)
    v9 = v11;
  v14 = v3 + v13 + v9;
  *((_DWORD *)this + 8) = v14 + 1;
  return (v14 + 1);
}

void awd::metrics::CommCenterLowPowerEvent::CopyFrom(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterLowPowerEvent *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::IsInitialized(awd::metrics::CommCenterLowPowerEvent *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::Swap(uint64_t this, awd::metrics::CommCenterLowPowerEvent *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::metrics::CommCenterLowPowerEvent *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    v3 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

char *awd::metrics::CommCenterLowPowerEvent::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF544D50;
  strcpy(result, "awd.metrics.CommCenterLowPowerEvent");
  return result;
}

uint64_t awd::metrics::CommCenterWakeInfo::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

awd::metrics::CommCenterWakeInfo *awd::metrics::CommCenterWakeInfo::CommCenterWakeInfo(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  *(_QWORD *)this = off_1E7908790;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E7908790;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  return this;
}

void sub_1BF494F28(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeInfo::MergeFrom(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE v9[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 8);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*((_BYTE *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 8) |= 2u;
    *((_DWORD *)this + 4) = v7;
    v4 = *((_DWORD *)a2 + 8);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v8 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 8) |= 4u;
    *((_DWORD *)this + 5) = v8;
    if ((*((_DWORD *)a2 + 8) & 8) == 0)
      return;
LABEL_8:
    v5 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 8) |= 8u;
    *((_DWORD *)this + 6) = v5;
  }
}

void sub_1BF49502C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF495040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF49508C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeInfo::~CommCenterWakeInfo(awd::metrics::CommCenterWakeInfo *this)
{
  *(_QWORD *)this = off_1E7908790;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E7908790;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E7908790;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterWakeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::default_instance(awd::metrics::CommCenterWakeInfo *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterWakeInfo::default_instance_;
  if (!awd::metrics::CommCenterWakeInfo::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterWakeInfo::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterWakeInfo::New(awd::metrics::CommCenterWakeInfo *this)
{
  _QWORD *result;

  result = operator new(0x28uLL);
  *result = off_1E7908790;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeInfo::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 32))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::MergePartialFromCodedStream(awd::metrics::CommCenterWakeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = (unsigned int *)((char *)this + 24);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
        goto LABEL_30;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
LABEL_30:
        if ((*v14 & 0x80000000) == 0)
        {
          *v5 = *v14;
          v17 = v14 + 1;
          *((_QWORD *)a2 + 1) = v17;
          *((_DWORD *)this + 8) |= 2u;
          if ((unint64_t)v17 < v11)
            goto LABEL_35;
          continue;
        }
LABEL_33:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 8) |= 2u;
        if ((unint64_t)v17 >= v11)
          continue;
LABEL_35:
        if (*v17 != 24)
          continue;
        v15 = v17 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11)
          goto LABEL_40;
LABEL_37:
        if ((*v15 & 0x80000000) == 0)
        {
          *v6 = *v15;
          v18 = v15 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 8) |= 4u;
          if ((unint64_t)v18 < v11)
            goto LABEL_42;
          continue;
        }
LABEL_40:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!(_DWORD)result)
          return result;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 8) |= 4u;
        if ((unint64_t)v18 >= v11)
          continue;
LABEL_42:
        if (*v18 != 32)
          continue;
        v16 = v18 + 1;
        *((_QWORD *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v11)
          goto LABEL_47;
LABEL_44:
        if ((*v16 & 0x80000000) == 0)
        {
          *v7 = *v16;
          v19 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)a2 + 1) = v19;
          *((_DWORD *)this + 8) |= 8u;
          if (v19 == (unsigned __int8 *)v11)
            goto LABEL_49;
          continue;
        }
LABEL_47:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
        if (!(_DWORD)result)
          return result;
        v21 = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 8) |= 8u;
        if (v21 != v20)
          continue;
LABEL_49:
        if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_40;
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v11)
          goto LABEL_47;
        goto LABEL_44;
      default:
        v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
  }
}

uint64_t awd::metrics::CommCenterWakeInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  v6 = v5[8];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], (uint64_t)a2, a4);
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  if ((v5[8] & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::ByteSize(awd::metrics::CommCenterWakeInfo *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0)
      goto LABEL_19;
LABEL_6:
    *((_DWORD *)this + 7) = v3;
    return v3;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 < 0x80)
  {
    v3 = (v3 + 2);
    if ((v2 & 8) != 0)
      goto LABEL_19;
    goto LABEL_6;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
     + 1
     + v3;
  if ((*((_DWORD *)this + 8) & 8) == 0)
    goto LABEL_6;
LABEL_19:
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v8 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
       + 1
       + v3;
  else
    v9 = (v3 + 2);
  *((_DWORD *)this + 7) = v9;
  return v9;
}

void awd::metrics::CommCenterWakeInfo::CopyFrom(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterWakeInfo *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterWakeInfo::IsInitialized(awd::metrics::CommCenterWakeInfo *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterWakeInfo::Swap(uint64_t this, awd::metrics::CommCenterWakeInfo *a2)
{
  uint64_t v2;

  if (a2 != (awd::metrics::CommCenterWakeInfo *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
  }
  return this;
}

double awd::metrics::CommCenterWakeInfo::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF545B60;
  strcpy(v3, "awd.metrics.CommCenterWakeInfo");
  return *(double *)"mmCenterWakeInfo";
}

double awd::metrics::CommCenterLowPowerStats::SharedCtor(awd::metrics::CommCenterLowPowerStats *this)
{
  double result;

  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

awd::metrics::CommCenterLowPowerStats *awd::metrics::CommCenterLowPowerStats::CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  *(_QWORD *)this = off_1E7908808;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E7908808;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  return this;
}

void sub_1BF4957CC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 40);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerStats::MergeFrom(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  uint64_t v4;
  awd::metrics::CommCenterMissedMTMessage *v5;
  uint64_t v6;
  uint64_t v7;
  const awd::metrics::CommCenterMissedMTMessage *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BYTE v21[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterLowPowerStats *)((char *)this + 40));
  if (*((int *)a2 + 12) >= 1)
  {
    v4 = 0;
    do
    {
      while (1)
      {
        v8 = *(const awd::metrics::CommCenterMissedMTMessage **)(*((_QWORD *)a2 + 5) + 8 * v4);
        v9 = *((_DWORD *)this + 13);
        v10 = *((int *)this + 12);
        if ((int)v10 >= v9)
          break;
        v11 = *((_QWORD *)this + 5);
        *((_DWORD *)this + 12) = v10 + 1;
        awd::metrics::CommCenterMissedMTMessage::MergeFrom(*(awd::metrics::CommCenterMissedMTMessage **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 12))
          goto LABEL_11;
      }
      if (v9 == *((_DWORD *)this + 14))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterLowPowerStats *)((char *)this + 40));
        v9 = *((_DWORD *)this + 13);
      }
      *((_DWORD *)this + 13) = v9 + 1;
      v5 = (awd::metrics::CommCenterMissedMTMessage *)operator new(0x20uLL);
      *(_QWORD *)v5 = off_1E79086A0;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = *((_QWORD *)this + 5);
      v7 = *((int *)this + 12);
      *((_DWORD *)this + 12) = v7 + 1;
      *(_QWORD *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterMissedMTMessage::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 12));
  }
LABEL_11:
  LOBYTE(v12) = *((_BYTE *)a2 + 72);
  if ((_BYTE)v12)
  {
    if ((*((_BYTE *)a2 + 72) & 1) != 0)
    {
      v14 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 18) |= 1u;
      *((_QWORD *)this + 1) = v14;
      v12 = *((_DWORD *)a2 + 18);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0)
          goto LABEL_15;
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)a2 + 72) & 2) == 0)
    {
      goto LABEL_14;
    }
    v15 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 18) |= 2u;
    *((_DWORD *)this + 4) = v15;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 4) == 0)
    {
LABEL_15:
      if ((v12 & 8) == 0)
        goto LABEL_16;
      goto LABEL_25;
    }
LABEL_24:
    v16 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 18) |= 4u;
    *((_DWORD *)this + 5) = v16;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 8) == 0)
    {
LABEL_16:
      if ((v12 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_26;
    }
LABEL_25:
    v17 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 18) |= 8u;
    *((_DWORD *)this + 6) = v17;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x10) == 0)
    {
LABEL_17:
      if ((v12 & 0x20) == 0)
        goto LABEL_18;
      goto LABEL_27;
    }
LABEL_26:
    v18 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 18) |= 0x10u;
    *((_DWORD *)this + 7) = v18;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x20) == 0)
    {
LABEL_18:
      if ((v12 & 0x40) == 0)
        goto LABEL_19;
      goto LABEL_28;
    }
LABEL_27:
    v19 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_DWORD *)this + 8) = v19;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x40) == 0)
    {
LABEL_19:
      if ((v12 & 0x80) == 0)
        return;
      goto LABEL_20;
    }
LABEL_28:
    v20 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 18) |= 0x40u;
    *((_DWORD *)this + 9) = v20;
    if ((*((_DWORD *)a2 + 18) & 0x80) == 0)
      return;
LABEL_20:
    v13 = *((_DWORD *)a2 + 16);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 16) = v13;
  }
}

void sub_1BF495A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF495A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF495AC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;

  v3 = *(_DWORD *)(v1 + 52);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(v1 + 52);
      }
    }
  }
  v6 = *(void **)(v1 + 40);
  if (v6)
    operator delete[](v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerStats::~CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7908808;
  v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 13);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7908808;
  v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 13);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E7908808;
  v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 13);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v6);
}

uint64_t awd::metrics::CommCenterLowPowerStats::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::default_instance(awd::metrics::CommCenterLowPowerStats *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterLowPowerStats::default_instance_;
  if (!awd::metrics::CommCenterLowPowerStats::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterLowPowerStats::default_instance_;
  }
  return result;
}

double awd::metrics::CommCenterLowPowerStats::New(awd::metrics::CommCenterLowPowerStats *this)
{
  char *v1;
  double result;

  v1 = (char *)operator new(0x50uLL);
  *(_QWORD *)v1 = off_1E7908808;
  *((_QWORD *)v1 + 8) = 0;
  *((_DWORD *)v1 + 18) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *((_DWORD *)v1 + 14) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterLowPowerStats::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 72))
  {
    *(_DWORD *)(this + 64) = 0;
    *(_OWORD *)(this + 8) = 0u;
    *(_OWORD *)(this + 24) = 0u;
  }
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::MergePartialFromCodedStream(awd::metrics::CommCenterLowPowerStats *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  uint64_t TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t result;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  awd::metrics::CommCenterMissedMTMessage *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  _BYTE *v43;
  unint64_t *v44;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;

  v46 = (unsigned int *)((char *)this + 16);
  v47 = (unsigned int *)((char *)this + 20);
  v4 = (unsigned int *)((char *)this + 24);
  v5 = (unsigned int *)((char *)this + 28);
  v6 = (unsigned int *)((char *)this + 32);
  v7 = (unsigned int *)((char *)this + 36);
  v8 = (unsigned int *)((char *)this + 64);
  v44 = (unint64_t *)((char *)this + 8);
  v45 = (awd::metrics::CommCenterLowPowerStats *)((char *)this + 40);
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v44);
          if (!(_DWORD)result)
            return result;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v14 >= v12)
            continue;
        }
        else
        {
          *v44 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v14 >= v12)
            continue;
        }
        if (*v14 != 16)
          continue;
        v15 = v14 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v12)
          goto LABEL_44;
        goto LABEL_41;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v12)
          goto LABEL_44;
LABEL_41:
        if ((char)*v15 < 0)
        {
LABEL_44:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v46);
          if (!(_DWORD)result)
            return result;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 2u;
          if ((unint64_t)v23 < v12)
            goto LABEL_46;
          continue;
        }
        *v46 = *v15;
        v23 = v15 + 1;
        *((_QWORD *)a2 + 1) = v23;
        *((_DWORD *)this + 18) |= 2u;
        if ((unint64_t)v23 >= v12)
          continue;
LABEL_46:
        if (*v23 != 24)
          continue;
        v16 = v23 + 1;
        *((_QWORD *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v12)
          goto LABEL_51;
LABEL_48:
        if ((char)*v16 < 0)
        {
LABEL_51:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 4u;
          if ((unint64_t)v24 < v12)
            goto LABEL_53;
          continue;
        }
        *v47 = *v16;
        v24 = v16 + 1;
        *((_QWORD *)a2 + 1) = v24;
        *((_DWORD *)this + 18) |= 4u;
        if ((unint64_t)v24 >= v12)
          continue;
LABEL_53:
        if (*v24 != 32)
          continue;
        v17 = v24 + 1;
        *((_QWORD *)a2 + 1) = v17;
        if ((unint64_t)v17 >= v12)
          goto LABEL_58;
LABEL_55:
        if ((char)*v17 < 0)
        {
LABEL_58:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 8u;
          if ((unint64_t)v25 < v12)
            goto LABEL_60;
          continue;
        }
        *v4 = *v17;
        v25 = v17 + 1;
        *((_QWORD *)a2 + 1) = v25;
        *((_DWORD *)this + 18) |= 8u;
        if ((unint64_t)v25 >= v12)
          continue;
LABEL_60:
        if (*v25 != 40)
          continue;
        v18 = v25 + 1;
        *((_QWORD *)a2 + 1) = v18;
        if ((unint64_t)v18 >= v12)
          goto LABEL_65;
LABEL_62:
        if ((char)*v18 < 0)
        {
LABEL_65:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x10u;
          if ((unint64_t)v26 < v12)
            goto LABEL_67;
          continue;
        }
        *v5 = *v18;
        v26 = v18 + 1;
        *((_QWORD *)a2 + 1) = v26;
        *((_DWORD *)this + 18) |= 0x10u;
        if ((unint64_t)v26 >= v12)
          continue;
LABEL_67:
        if (*v26 != 48)
          continue;
        v19 = v26 + 1;
        *((_QWORD *)a2 + 1) = v19;
        if ((unint64_t)v19 >= v12)
          goto LABEL_72;
LABEL_69:
        if ((char)*v19 < 0)
        {
LABEL_72:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x20u;
          if ((unint64_t)v27 < v12)
            goto LABEL_74;
          continue;
        }
        *v6 = *v19;
        v27 = v19 + 1;
        *((_QWORD *)a2 + 1) = v27;
        *((_DWORD *)this + 18) |= 0x20u;
        if ((unint64_t)v27 >= v12)
          continue;
LABEL_74:
        if (*v27 != 56)
          continue;
        v20 = v27 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_76:
        if ((unint64_t)v20 >= v12 || (char)*v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x40u;
          if ((unint64_t)v28 < v12)
            goto LABEL_82;
          continue;
        }
        *v7 = *v20;
        v28 = v20 + 1;
        *((_QWORD *)a2 + 1) = v28;
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v28 >= v12)
          continue;
LABEL_82:
        if (*v28 != 64)
          continue;
        v21 = v28 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_84:
        if ((unint64_t)v21 >= v12 || (char)*v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x80u;
          if ((unint64_t)v29 < v30)
            goto LABEL_90;
          continue;
        }
        *v8 = *v21;
        v29 = v21 + 1;
        *((_QWORD *)a2 + 1) = v29;
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v29 >= v12)
          continue;
LABEL_90:
        if (*v29 != 74)
          continue;
        while (1)
        {
          *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_92:
          v31 = *((_DWORD *)this + 13);
          v32 = *((int *)this + 12);
          if ((int)v32 >= v31)
          {
            if (v31 == *((_DWORD *)this + 14))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v45);
              v31 = *((_DWORD *)this + 13);
            }
            *((_DWORD *)this + 13) = v31 + 1;
            v34 = (awd::metrics::CommCenterMissedMTMessage *)operator new(0x20uLL);
            *(_QWORD *)v34 = off_1E79086A0;
            *((_QWORD *)v34 + 1) = 0;
            *((_QWORD *)v34 + 2) = 0;
            *((_QWORD *)v34 + 3) = 0;
            v35 = *((_QWORD *)this + 5);
            v36 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v36 + 1;
            *(_QWORD *)(v35 + 8 * v36) = v34;
          }
          else
          {
            v33 = *((_QWORD *)this + 5);
            *((_DWORD *)this + 12) = v32 + 1;
            v34 = *(awd::metrics::CommCenterMissedMTMessage **)(v33 + 8 * v32);
          }
          v48 = -1431655766;
          v37 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0;
          }
          else
          {
            v48 = *v37;
            *((_QWORD *)a2 + 1) = v37 + 1;
          }
          v38 = *((_DWORD *)a2 + 14);
          v39 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v38 + 1;
          if (v38 >= v39)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::metrics::CommCenterMissedMTMessage::MergePartialFromCodedStream(v34, a2)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v40 = *((_DWORD *)a2 + 14);
          v41 = __OFSUB__(v40, 1);
          v42 = v40 - 1;
          if (v42 < 0 == v41)
            *((_DWORD *)a2 + 14) = v42;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v43 = (_BYTE *)*((_QWORD *)a2 + 2);
          if (v29 >= v43 || *v29 != 74)
          {
            if (v29 == v43 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              result = 1;
              *((_BYTE *)a2 + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
        }
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v12)
          goto LABEL_51;
        goto LABEL_48;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 >= v12)
          goto LABEL_58;
        goto LABEL_55;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v18 >= v12)
          goto LABEL_65;
        goto LABEL_62;
      case 6u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v19 >= v12)
          goto LABEL_72;
        goto LABEL_69;
      case 7u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_76;
      case 8u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_84;
      case 9u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_34;
        goto LABEL_92;
      default:
        v11 = TagFallback & 7;
LABEL_34:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t awd::metrics::CommCenterLowPowerStats::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) == 0)
  {
LABEL_9:
    if (*(int *)(v5 + 48) < 1)
      return this;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  if (*(int *)(v5 + 48) < 1)
    return this;
LABEL_19:
  v7 = 0;
  do
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * v7++), a2, a4);
  while (v7 < *(int *)(v5 + 48));
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::ByteSize(awd::metrics::CommCenterLowPowerStats *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;

  LOBYTE(v2) = *((_BYTE *)this + 72);
  if (!(_BYTE)v2)
  {
    v4 = *((_DWORD *)this + 12);
    v5 = v4;
    if (v4 < 1)
      goto LABEL_48;
    goto LABEL_44;
  }
  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                     + 1))
       + 1;
    v2 = *((_DWORD *)this + 18);
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 72) & 2) == 0)
      goto LABEL_12;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v7 = 2;
  }
  v3 += v7;
LABEL_12:
  if ((v2 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
      v2 = *((_DWORD *)this + 18);
      v3 += v10 + 1;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
LABEL_28:
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if (v13 >= 0x80)
    {
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
      v2 = *((_DWORD *)this + 18);
      v3 += v14 + 1;
      if ((v2 & 0x20) != 0)
        goto LABEL_32;
    }
    else
    {
      v3 += 2;
      if ((v2 & 0x20) != 0)
        goto LABEL_32;
    }
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
LABEL_36:
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v17 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17) + 1;
      if ((*((_DWORD *)this + 18) & 0x80) != 0)
        goto LABEL_40;
    }
    else
    {
      v3 += 2;
      if ((v2 & 0x80) != 0)
        goto LABEL_40;
    }
LABEL_18:
    v8 = *((_DWORD *)this + 12);
    v5 = (v8 + v3);
    if (v8 < 1)
      goto LABEL_48;
    goto LABEL_44;
  }
  if ((v2 & 8) == 0)
    goto LABEL_14;
LABEL_24:
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    v2 = *((_DWORD *)this + 18);
    v3 += v12 + 1;
    if ((v2 & 0x10) != 0)
      goto LABEL_28;
  }
  else
  {
    v3 += 2;
    if ((v2 & 0x10) != 0)
      goto LABEL_28;
  }
LABEL_15:
  if ((v2 & 0x20) == 0)
    goto LABEL_16;
LABEL_32:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
    v2 = *((_DWORD *)this + 18);
    v3 += v16 + 1;
    if ((v2 & 0x40) != 0)
      goto LABEL_36;
  }
  else
  {
    v3 += 2;
    if ((v2 & 0x40) != 0)
      goto LABEL_36;
  }
LABEL_17:
  if ((v2 & 0x80) == 0)
    goto LABEL_18;
LABEL_40:
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v18 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
    v21 = *((_DWORD *)this + 12);
    v5 = (v21 + v20 + 1 + v3);
    if (v21 < 1)
      goto LABEL_48;
  }
  else
  {
    v19 = *((_DWORD *)this + 12);
    v5 = (v19 + v3 + 2);
    if (v19 < 1)
      goto LABEL_48;
  }
LABEL_44:
  v22 = 0;
  do
  {
    while (1)
    {
      v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::CommCenterMissedMTMessage::ByteSize(*(awd::metrics::CommCenterMissedMTMessage **)(*((_QWORD *)this + 5) + 8 * v22));
      if (v23 < 0x80)
        break;
      v5 = (_DWORD)v23
         + (_DWORD)v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
      if (++v22 >= *((int *)this + 12))
        goto LABEL_48;
    }
    v5 = ((_DWORD)v23 + v5 + 1);
    ++v22;
  }
  while (v22 < *((int *)this + 12));
LABEL_48:
  *((_DWORD *)this + 17) = v5;
  return v5;
}

void awd::metrics::CommCenterLowPowerStats::CopyFrom(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterLowPowerStats *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterLowPowerStats::IsInitialized(awd::metrics::CommCenterLowPowerStats *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterLowPowerStats::Swap(uint64_t this, awd::metrics::CommCenterLowPowerStats *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  if (a2 != (awd::metrics::CommCenterLowPowerStats *)this)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v4;
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v5 = *(_DWORD *)(v3 + 72);
    *(_DWORD *)(v3 + 72) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v5;
    v6 = *(_DWORD *)(v3 + 68);
    *(_DWORD *)(v3 + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v6;
  }
  return this;
}

char *awd::metrics::CommCenterLowPowerStats::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF544D50;
  strcpy(result, "awd.metrics.CommCenterLowPowerStats");
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SharedCtor(uint64_t this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = v1;
  *(_WORD *)(this + 52) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 24) = v1;
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = v1;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

awd::metrics::CommCenterWakeReasonInfo *awd::metrics::CommCenterWakeReasonInfo::CommCenterWakeReasonInfo(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E7908880;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_WORD *)this + 26) = 0;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = v3;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = v3;
  *((_QWORD *)this + 5) = v3;
  *((_QWORD *)this + 7) = v3;
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E7908880;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_WORD *)this + 26) = 0;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = v3;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = v3;
  *((_QWORD *)this + 5) = v3;
  *((_QWORD *)this + 7) = v3;
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  return this;
}

void sub_1BF496A08(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeReasonInfo::MergeFrom(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  int v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  int v11;
  void *v12;
  size_t v13;
  char v14;
  void **v15;
  void **v16;
  char v17;
  __int128 v18;
  int v19;
  void *v20;
  size_t v21;
  int v22;
  void **v23;
  void **v24;
  char v25;
  __int128 v26;
  void *v27;
  size_t v28;
  void **v29;
  void **v30;
  char v31;
  __int128 v32;
  void *v33;
  size_t v34;
  void **v35;
  void **v36;
  char v37;
  __int128 v38;
  int v39;
  void *v40;
  size_t v41;
  void **v42;
  void **v43;
  char v44;
  __int128 v45;
  int v46;
  void *v47;
  size_t v48;
  int v49;
  void **v50;
  void **v51;
  char v52;
  __int128 v53;
  int v54;
  void *v55;
  size_t v56;
  int v57;
  int v58;
  char v59;
  char v60[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v60);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 96);
  if (!(_BYTE)v4)
  {
LABEL_91:
    v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0)
      return;
    goto LABEL_92;
  }
  if ((*((_BYTE *)a2 + 96) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 24) |= 1u;
    *((_QWORD *)this + 1) = v5;
    v4 = *((_DWORD *)a2 + 24);
  }
  v6 = (void **)MEMORY[0x1E0DE8338];
  if ((v4 & 2) != 0)
  {
    v7 = (void **)*((_QWORD *)a2 + 2);
    *((_DWORD *)this + 24) |= 2u;
    v8 = (void **)*((_QWORD *)this + 2);
    if (v8 == v6)
    {
      v8 = (void **)operator new(0x18uLL);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      *((_QWORD *)this + 2) = v8;
    }
    if (v8 != v7)
    {
      v9 = *((_BYTE *)v7 + 23);
      if ((*((char *)v8 + 23) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)v7 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v8, *v7, (size_t)v7[1]);
          v11 = *((_DWORD *)a2 + 24);
          if ((v11 & 4) == 0)
            goto LABEL_23;
        }
        else
        {
          v10 = *(_OWORD *)v7;
          v8[2] = v7[2];
          *(_OWORD *)v8 = v10;
          v11 = *((_DWORD *)a2 + 24);
          if ((v11 & 4) == 0)
            goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v9 >= 0)
        v12 = v7;
      else
        v12 = *v7;
      if (v9 >= 0)
        v13 = *((unsigned __int8 *)v7 + 23);
      else
        v13 = (size_t)v7[1];
      std::string::__assign_no_alias<false>(v8, v12, v13);
    }
  }
  v11 = *((_DWORD *)a2 + 24);
  if ((v11 & 4) != 0)
  {
LABEL_22:
    v14 = *((_BYTE *)a2 + 52);
    *((_DWORD *)this + 24) |= 4u;
    *((_BYTE *)this + 52) = v14;
    v11 = *((_DWORD *)a2 + 24);
  }
LABEL_23:
  if ((v11 & 8) != 0)
  {
    v15 = (void **)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 24) |= 8u;
    v16 = (void **)*((_QWORD *)this + 3);
    if (v16 == v6)
    {
      v16 = (void **)operator new(0x18uLL);
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      *((_QWORD *)this + 3) = v16;
    }
    if (v16 != v15)
    {
      v17 = *((_BYTE *)v15 + 23);
      if ((*((char *)v16 + 23) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)v15 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v16, *v15, (size_t)v15[1]);
          v19 = *((_DWORD *)a2 + 24);
          if ((v19 & 0x10) == 0)
            goto LABEL_40;
        }
        else
        {
          v18 = *(_OWORD *)v15;
          v16[2] = v15[2];
          *(_OWORD *)v16 = v18;
          v19 = *((_DWORD *)a2 + 24);
          if ((v19 & 0x10) == 0)
            goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v17 >= 0)
        v20 = v15;
      else
        v20 = *v15;
      if (v17 >= 0)
        v21 = *((unsigned __int8 *)v15 + 23);
      else
        v21 = (size_t)v15[1];
      std::string::__assign_no_alias<false>(v16, v20, v21);
    }
  }
  v19 = *((_DWORD *)a2 + 24);
  if ((v19 & 0x10) != 0)
  {
LABEL_39:
    v22 = *((_DWORD *)a2 + 12);
    *((_DWORD *)this + 24) |= 0x10u;
    *((_DWORD *)this + 12) = v22;
    v19 = *((_DWORD *)a2 + 24);
  }
LABEL_40:
  if ((v19 & 0x20) == 0)
    goto LABEL_55;
  v23 = (void **)*((_QWORD *)a2 + 4);
  *((_DWORD *)this + 24) |= 0x20u;
  v24 = (void **)*((_QWORD *)this + 4);
  if (v24 == v6)
  {
    v24 = (void **)operator new(0x18uLL);
    v24[1] = 0;
    v24[2] = 0;
    *v24 = 0;
    *((_QWORD *)this + 4) = v24;
  }
  if (v24 == v23)
  {
LABEL_55:
    if ((*((_BYTE *)a2 + 96) & 0x40) == 0)
      goto LABEL_76;
    goto LABEL_56;
  }
  v25 = *((_BYTE *)v23 + 23);
  if (*((char *)v24 + 23) < 0)
  {
    if (v25 >= 0)
      v27 = v23;
    else
      v27 = *v23;
    if (v25 >= 0)
      v28 = *((unsigned __int8 *)v23 + 23);
    else
      v28 = (size_t)v23[1];
    std::string::__assign_no_alias<false>(v24, v27, v28);
    goto LABEL_55;
  }
  if ((*((_BYTE *)v23 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v24, *v23, (size_t)v23[1]);
    if ((*((_BYTE *)a2 + 96) & 0x40) == 0)
      goto LABEL_76;
  }
  else
  {
    v26 = *(_OWORD *)v23;
    v24[2] = v23[2];
    *(_OWORD *)v24 = v26;
    if ((*((_BYTE *)a2 + 96) & 0x40) == 0)
      goto LABEL_76;
  }
LABEL_56:
  v29 = (void **)*((_QWORD *)a2 + 5);
  *((_DWORD *)this + 24) |= 0x40u;
  v30 = (void **)*((_QWORD *)this + 5);
  if (v30 == v6)
  {
    v30 = (void **)operator new(0x18uLL);
    v30[1] = 0;
    v30[2] = 0;
    *v30 = 0;
    *((_QWORD *)this + 5) = v30;
  }
  if (v30 != v29)
  {
    v31 = *((_BYTE *)v29 + 23);
    if (*((char *)v30 + 23) < 0)
    {
      if (v31 >= 0)
        v33 = v29;
      else
        v33 = *v29;
      if (v31 >= 0)
        v34 = *((unsigned __int8 *)v29 + 23);
      else
        v34 = (size_t)v29[1];
      std::string::__assign_no_alias<false>(v30, v33, v34);
    }
    else if ((*((_BYTE *)v29 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v30, *v29, (size_t)v29[1]);
    }
    else
    {
      v32 = *(_OWORD *)v29;
      v30[2] = v29[2];
      *(_OWORD *)v30 = v32;
    }
  }
LABEL_76:
  if ((*((_BYTE *)a2 + 96) & 0x80) == 0)
    goto LABEL_91;
  v35 = (void **)*((_QWORD *)a2 + 7);
  *((_DWORD *)this + 24) |= 0x80u;
  v36 = (void **)*((_QWORD *)this + 7);
  if (v36 == v6)
  {
    v36 = (void **)operator new(0x18uLL);
    v36[1] = 0;
    v36[2] = 0;
    *v36 = 0;
    *((_QWORD *)this + 7) = v36;
  }
  if (v36 == v35)
    goto LABEL_91;
  v37 = *((_BYTE *)v35 + 23);
  if (*((char *)v36 + 23) < 0)
  {
    if (v37 >= 0)
      v40 = v35;
    else
      v40 = *v35;
    if (v37 >= 0)
      v41 = *((unsigned __int8 *)v35 + 23);
    else
      v41 = (size_t)v35[1];
    std::string::__assign_no_alias<false>(v36, v40, v41);
    goto LABEL_91;
  }
  if ((*((_BYTE *)v35 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v36, *v35, (size_t)v35[1]);
    v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0)
      return;
  }
  else
  {
    v38 = *(_OWORD *)v35;
    v36[2] = v35[2];
    *(_OWORD *)v36 = v38;
    v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0)
      return;
  }
LABEL_92:
  if ((v39 & 0x100) != 0)
  {
    v42 = (void **)*((_QWORD *)a2 + 8);
    *((_DWORD *)this + 24) |= 0x100u;
    v43 = (void **)*((_QWORD *)this + 8);
    if (v43 == (void **)MEMORY[0x1E0DE8338])
    {
      v43 = (void **)operator new(0x18uLL);
      v43[1] = 0;
      v43[2] = 0;
      *v43 = 0;
      *((_QWORD *)this + 8) = v43;
    }
    if (v43 != v42)
    {
      v44 = *((_BYTE *)v42 + 23);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)v42 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v43, *v42, (size_t)v42[1]);
          v46 = *((_DWORD *)a2 + 24);
          if ((v46 & 0x200) == 0)
            goto LABEL_109;
        }
        else
        {
          v45 = *(_OWORD *)v42;
          v43[2] = v42[2];
          *(_OWORD *)v43 = v45;
          v46 = *((_DWORD *)a2 + 24);
          if ((v46 & 0x200) == 0)
            goto LABEL_109;
        }
        goto LABEL_108;
      }
      if (v44 >= 0)
        v47 = v42;
      else
        v47 = *v42;
      if (v44 >= 0)
        v48 = *((unsigned __int8 *)v42 + 23);
      else
        v48 = (size_t)v42[1];
      std::string::__assign_no_alias<false>(v43, v47, v48);
    }
  }
  v46 = *((_DWORD *)a2 + 24);
  if ((v46 & 0x200) != 0)
  {
LABEL_108:
    v49 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 24) |= 0x200u;
    *((_DWORD *)this + 20) = v49;
    v46 = *((_DWORD *)a2 + 24);
  }
LABEL_109:
  if ((v46 & 0x400) == 0)
    goto LABEL_124;
  v50 = (void **)*((_QWORD *)a2 + 9);
  *((_DWORD *)this + 24) |= 0x400u;
  v51 = (void **)*((_QWORD *)this + 9);
  if (v51 == (void **)MEMORY[0x1E0DE8338])
  {
    v51 = (void **)operator new(0x18uLL);
    v51[1] = 0;
    v51[2] = 0;
    *v51 = 0;
    *((_QWORD *)this + 9) = v51;
  }
  if (v51 == v50)
  {
LABEL_124:
    v54 = *((_DWORD *)a2 + 24);
    if ((v54 & 0x800) != 0)
      goto LABEL_133;
    goto LABEL_125;
  }
  v52 = *((_BYTE *)v50 + 23);
  if (*((char *)v51 + 23) < 0)
  {
    if (v52 >= 0)
      v55 = v50;
    else
      v55 = *v50;
    if (v52 >= 0)
      v56 = *((unsigned __int8 *)v50 + 23);
    else
      v56 = (size_t)v50[1];
    std::string::__assign_no_alias<false>(v51, v55, v56);
    goto LABEL_124;
  }
  if ((*((_BYTE *)v50 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v51, *v50, (size_t)v50[1]);
    v54 = *((_DWORD *)a2 + 24);
    if ((v54 & 0x800) != 0)
      goto LABEL_133;
LABEL_125:
    if ((v54 & 0x1000) != 0)
      goto LABEL_134;
    goto LABEL_126;
  }
  v53 = *(_OWORD *)v50;
  v51[2] = v50[2];
  *(_OWORD *)v51 = v53;
  v54 = *((_DWORD *)a2 + 24);
  if ((v54 & 0x800) == 0)
    goto LABEL_125;
LABEL_133:
  v57 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 24) |= 0x800u;
  *((_DWORD *)this + 21) = v57;
  v54 = *((_DWORD *)a2 + 24);
  if ((v54 & 0x1000) != 0)
  {
LABEL_134:
    v58 = *((_DWORD *)a2 + 22);
    *((_DWORD *)this + 24) |= 0x1000u;
    *((_DWORD *)this + 22) = v58;
    if ((*((_DWORD *)a2 + 24) & 0x2000) != 0)
      goto LABEL_135;
    return;
  }
LABEL_126:
  if ((v54 & 0x2000) != 0)
  {
LABEL_135:
    v59 = *((_BYTE *)a2 + 53);
    *((_DWORD *)this + 24) |= 0x2000u;
    *((_BYTE *)this + 53) = v59;
  }
}

void sub_1BF496FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF496FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF497030(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeReasonInfo::~CommCenterWakeReasonInfo(awd::metrics::CommCenterWakeReasonInfo *this)
{
  *(_QWORD *)this = off_1E7908880;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E7908880;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E7908880;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v2);
}

void awd::metrics::CommCenterWakeReasonInfo::SharedDtor(awd::metrics::CommCenterWakeReasonInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 == MEMORY[0x1E0DE8338] || v2 == 0)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5 != MEMORY[0x1E0DE8338] && v5 != 0)
      goto LABEL_29;
LABEL_11:
    v7 = *((_QWORD *)this + 4);
    if (v7 != v3 && v7 != 0)
      goto LABEL_35;
LABEL_16:
    v9 = *((_QWORD *)this + 5);
    if (v9 != v3 && v9 != 0)
      goto LABEL_41;
LABEL_21:
    v11 = *((_QWORD *)this + 7);
    if (v11 == v3)
      goto LABEL_48;
    goto LABEL_44;
  }
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  operator delete((void *)v2);
  v5 = *((_QWORD *)this + 3);
  if (v5 == v3 || v5 == 0)
    goto LABEL_11;
LABEL_29:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  v7 = *((_QWORD *)this + 4);
  if (v7 == v3 || v7 == 0)
    goto LABEL_16;
LABEL_35:
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  operator delete((void *)v7);
  v9 = *((_QWORD *)this + 5);
  if (v9 == v3 || v9 == 0)
    goto LABEL_21;
LABEL_41:
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  operator delete((void *)v9);
  v11 = *((_QWORD *)this + 7);
  if (v11 != v3)
  {
LABEL_44:
    if (v11)
    {
      if (*(char *)(v11 + 23) < 0)
        operator delete(*(void **)v11);
      operator delete((void *)v11);
    }
  }
LABEL_48:
  v15 = *((_QWORD *)this + 8);
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    operator delete((void *)v15);
  }
  v16 = *((_QWORD *)this + 9);
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    operator delete((void *)v16);
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 92) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::default_instance(awd::metrics::CommCenterWakeReasonInfo *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  if (!awd::metrics::CommCenterWakeReasonInfo::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterWakeReasonInfo::New(awd::metrics::CommCenterWakeReasonInfo *this)
{
  _QWORD *result;
  uint64_t v2;

  result = operator new(0x68uLL);
  *result = off_1E7908880;
  result[1] = 0;
  v2 = MEMORY[0x1E0DE8338];
  *((_WORD *)result + 26) = 0;
  result[2] = v2;
  result[3] = v2;
  *((_DWORD *)result + 12) = 0;
  result[4] = v2;
  result[5] = v2;
  result[7] = v2;
  result[8] = v2;
  result[9] = v2;
  result[10] = 0;
  result[11] = 0;
  *((_DWORD *)result + 24) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_BYTE *)(this + 96);
  if (!v1)
    goto LABEL_28;
  *(_QWORD *)(this + 8) = 0;
  v2 = MEMORY[0x1E0DE8338];
  if ((v1 & 2) == 0 || (v3 = *(_QWORD *)(this + 16), v3 == MEMORY[0x1E0DE8338]))
  {
LABEL_6:
    *(_BYTE *)(this + 52) = 0;
    if ((*(_BYTE *)(this + 96) & 8) == 0)
      goto LABEL_13;
    goto LABEL_7;
  }
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    goto LABEL_6;
  }
  **(_BYTE **)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(this + 52) = 0;
  if ((*(_BYTE *)(this + 96) & 8) == 0)
    goto LABEL_13;
LABEL_7:
  v4 = *(_QWORD *)(this + 24);
  if (v4 != v2)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_13:
  *(_DWORD *)(this + 48) = 0;
  if ((*(_BYTE *)(this + 96) & 0x20) == 0 || (v5 = *(_QWORD *)(this + 32), v5 == v2))
  {
LABEL_17:
    if ((*(_BYTE *)(this + 96) & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_18;
  }
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    goto LABEL_17;
  }
  **(_BYTE **)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  if ((*(_BYTE *)(this + 96) & 0x40) == 0)
    goto LABEL_24;
LABEL_18:
  v6 = *(_QWORD *)(this + 40);
  if (v6 != v2)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
LABEL_24:
  if ((*(_BYTE *)(this + 96) & 0x80) != 0)
  {
    v7 = *(_QWORD *)(this + 56);
    if (v7 != v2)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v8 = *(_DWORD *)(this + 96);
        if ((v8 & 0xFF00) != 0)
          goto LABEL_29;
LABEL_39:
        *(_DWORD *)(this + 96) = 0;
        return this;
      }
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
LABEL_28:
  v8 = *(_DWORD *)(this + 96);
  if ((v8 & 0xFF00) == 0)
    goto LABEL_39;
LABEL_29:
  if ((v8 & 0x100) != 0)
  {
    v9 = *(_QWORD *)(this + 64);
    if (v9 != MEMORY[0x1E0DE8338])
    {
      if (*(char *)(v9 + 23) < 0)
      {
        **(_BYTE **)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(this + 80) = 0;
        if ((*(_BYTE *)(this + 97) & 4) == 0)
          goto LABEL_41;
        goto LABEL_34;
      }
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 80) = 0;
  if ((*(_BYTE *)(this + 97) & 4) == 0)
  {
LABEL_41:
    *(_DWORD *)(this + 84) = 0;
    *(_DWORD *)(this + 88) = 0;
    *(_BYTE *)(this + 53) = 0;
    *(_DWORD *)(this + 96) = 0;
    return this;
  }
LABEL_34:
  v10 = *(_QWORD *)(this + 72);
  if (v10 == MEMORY[0x1E0DE8338])
    goto LABEL_41;
  if (*(char *)(v10 + 23) < 0)
  {
    **(_BYTE **)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v10 = 0;
    *(_BYTE *)(v10 + 23) = 0;
  }
  *(_DWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_BYTE *)(this + 53) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::MergePartialFromCodedStream(awd::metrics::CommCenterWakeReasonInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  char *v10;
  uint64_t TagFallback;
  int v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  int v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  unsigned int v22;
  _BYTE *v23;
  _QWORD *v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  _BYTE *v28;
  int v29;
  _QWORD *v30;
  _BYTE *v31;
  _QWORD *v32;
  _BYTE *v33;
  _QWORD *v34;
  _BYTE *v35;
  _QWORD *v36;
  unint64_t v37;
  _BYTE *v38;
  char *v39;
  _BYTE *v40;
  int v41;
  _QWORD *v42;
  unint64_t v43;
  _BYTE *v44;
  char *v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 48);
  v6 = (unsigned int *)((char *)this + 80);
  v7 = (unsigned int *)((char *)this + 84);
  v8 = (unsigned int *)((char *)this + 88);
  v9 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v10 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v10 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 < v13 && (*v14 & 0x80000000) == 0)
        {
          *v4 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
          v16 = *((_DWORD *)this + 24) | 1;
          *((_DWORD *)this + 24) = v16;
          if ((unint64_t)v15 >= v13)
            continue;
          goto LABEL_132;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if ((_DWORD)result)
        {
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v55 = *((_QWORD *)a2 + 2);
          v16 = *((_DWORD *)this + 24) | 1;
          *((_DWORD *)this + 24) = v16;
          if ((unint64_t)v15 >= v55)
            continue;
LABEL_132:
          if (*v15 != 18)
            continue;
          *((_QWORD *)a2 + 1) = v15 + 1;
          *((_DWORD *)this + 24) = v16 | 2;
          if (*((_QWORD *)this + 2) != v9)
            goto LABEL_17;
          goto LABEL_16;
        }
        break;
      case 2u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_89;
        *((_DWORD *)this + 24) |= 2u;
        if (*((_QWORD *)this + 2) == v9)
        {
LABEL_16:
          v17 = operator new(0x18uLL);
          v17[1] = 0;
          v17[2] = 0;
          *v17 = 0;
          *((_QWORD *)this + 2) = v17;
        }
LABEL_17:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v20 >= v19 || *v20 != 24)
          continue;
        v21 = v20 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_23:
        v57 = -1431655766;
        if ((unint64_t)v21 >= v19 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v57);
          if (!(_DWORD)result)
            return result;
          v22 = v57;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v22 = *v21;
          v23 = v21 + 1;
          *((_QWORD *)a2 + 1) = v23;
        }
        *((_BYTE *)this + 52) = v22 != 0;
        v54 = *((_DWORD *)this + 24) | 4;
        *((_DWORD *)this + 24) = v54;
        if ((unint64_t)v23 >= v19 || *v23 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v23 + 1;
        *((_DWORD *)this + 24) = v54 | 8;
        if (*((_QWORD *)this + 3) == v9)
        {
LABEL_28:
          v24 = operator new(0x18uLL);
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          *((_QWORD *)this + 3) = v24;
        }
LABEL_29:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v26 >= v25 || *v26 != 40)
          continue;
        v27 = v26 + 1;
        *((_QWORD *)a2 + 1) = v27;
        if ((unint64_t)v27 >= v25)
          goto LABEL_106;
LABEL_36:
        if (*v27 < 0)
        {
LABEL_106:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)a2 + 1);
          v51 = *((_QWORD *)a2 + 2);
          v29 = *((_DWORD *)this + 24) | 0x10;
          *((_DWORD *)this + 24) = v29;
          if ((unint64_t)v28 >= v51)
            continue;
        }
        else
        {
          *v5 = *v27;
          v28 = v27 + 1;
          *((_QWORD *)a2 + 1) = v28;
          v29 = *((_DWORD *)this + 24) | 0x10;
          *((_DWORD *)this + 24) = v29;
          if ((unint64_t)v28 >= v25)
            continue;
        }
        if (*v28 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
        *((_DWORD *)this + 24) = v29 | 0x20;
        if (*((_QWORD *)this + 4) == v9)
        {
LABEL_41:
          v30 = operator new(0x18uLL);
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          *((_QWORD *)this + 4) = v30;
        }
LABEL_42:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 1;
LABEL_47:
        *((_DWORD *)this + 24) |= 0x40u;
        if (*((_QWORD *)this + 5) == v9)
        {
          v32 = operator new(0x18uLL);
          v32[1] = 0;
          v32[2] = 0;
          *v32 = 0;
          *((_QWORD *)this + 5) = v32;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_54:
        *((_DWORD *)this + 24) |= 0x80u;
        if (*((_QWORD *)this + 7) == v9)
        {
          v34 = operator new(0x18uLL);
          v34[1] = 0;
          v34[2] = 0;
          *v34 = 0;
          *((_QWORD *)this + 7) = v34;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 1;
LABEL_61:
        *((_DWORD *)this + 24) |= 0x100u;
        if (*((_QWORD *)this + 8) == v9)
        {
          v36 = operator new(0x18uLL);
          v36[1] = 0;
          v36[2] = 0;
          *v36 = 0;
          *((_QWORD *)this + 8) = v36;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v38 = (_BYTE *)*((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v38 >= v37 || *v38 != 80)
          continue;
        v39 = v38 + 1;
        *((_QWORD *)a2 + 1) = v39;
        if ((unint64_t)v39 >= v37)
          goto LABEL_93;
LABEL_70:
        if (*v39 < 0)
        {
LABEL_93:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
          v41 = *((_DWORD *)this + 24) | 0x200;
          *((_DWORD *)this + 24) = v41;
          if ((unint64_t)v40 >= v49)
            continue;
        }
        else
        {
          *v6 = *v39;
          v40 = v39 + 1;
          *((_QWORD *)a2 + 1) = v40;
          v41 = *((_DWORD *)this + 24) | 0x200;
          *((_DWORD *)this + 24) = v41;
          if ((unint64_t)v40 >= v37)
            continue;
        }
        if (*v40 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v40 + 1;
        *((_DWORD *)this + 24) = v41 | 0x400;
        if (*((_QWORD *)this + 9) == v9)
        {
LABEL_75:
          v42 = operator new(0x18uLL);
          v42[1] = 0;
          v42[2] = 0;
          *v42 = 0;
          *((_QWORD *)this + 9) = v42;
        }
LABEL_76:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v44 = (_BYTE *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v44 >= v43 || *v44 != 96)
          continue;
        v45 = v44 + 1;
        *((_QWORD *)a2 + 1) = v45;
        if ((unint64_t)v45 >= v43)
          goto LABEL_98;
LABEL_83:
        if (*v45 < 0)
        {
LABEL_98:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v46 = (_BYTE *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 24) |= 0x800u;
          if ((unint64_t)v46 >= v43)
            continue;
        }
        else
        {
          *v7 = *v45;
          v46 = v45 + 1;
          *((_QWORD *)a2 + 1) = v46;
          *((_DWORD *)this + 24) |= 0x800u;
          if ((unint64_t)v46 >= v43)
            continue;
        }
        if (*v46 != 104)
          continue;
        v47 = v46 + 1;
        *((_QWORD *)a2 + 1) = v47;
LABEL_102:
        if ((unint64_t)v47 >= v43 || *v47 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v50 = (_BYTE *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 24) |= 0x1000u;
          if ((unint64_t)v50 >= v43)
            continue;
        }
        else
        {
          *v8 = *v47;
          v50 = v47 + 1;
          *((_QWORD *)a2 + 1) = v50;
          *((_DWORD *)this + 24) |= 0x1000u;
          if ((unint64_t)v50 >= v43)
            continue;
        }
        if (*v50 == 112)
        {
          v48 = v50 + 1;
          *((_QWORD *)a2 + 1) = v48;
LABEL_115:
          v56 = -1431655766;
          if ((unint64_t)v48 >= v43 || *v48 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56);
            if (!(_DWORD)result)
              return result;
            v52 = v56;
            v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v43 = *((_QWORD *)a2 + 2);
          }
          else
          {
            v52 = *v48;
            v53 = (unsigned __int8 *)(v48 + 1);
            *((_QWORD *)a2 + 1) = v53;
          }
          *((_BYTE *)this + 53) = v52 != 0;
          *((_DWORD *)this + 24) |= 0x2000u;
          if (v53 == (unsigned __int8 *)v43 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
        }
        continue;
      case 3u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_23;
      case 4u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_89;
        *((_DWORD *)this + 24) |= 8u;
        if (*((_QWORD *)this + 3) == v9)
          goto LABEL_28;
        goto LABEL_29;
      case 5u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v27 < v25)
          goto LABEL_36;
        goto LABEL_106;
      case 6u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_89;
        *((_DWORD *)this + 24) |= 0x20u;
        if (*((_QWORD *)this + 4) == v9)
          goto LABEL_41;
        goto LABEL_42;
      case 7u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_47;
        goto LABEL_89;
      case 8u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_54;
        goto LABEL_89;
      case 9u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_61;
        goto LABEL_89;
      case 0xAu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v39 = (char *)*((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v39 < v37)
          goto LABEL_70;
        goto LABEL_93;
      case 0xBu:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_89;
        *((_DWORD *)this + 24) |= 0x400u;
        if (*((_QWORD *)this + 9) == v9)
          goto LABEL_75;
        goto LABEL_76;
      case 0xCu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v45 = (char *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v45 < v43)
          goto LABEL_83;
        goto LABEL_98;
      case 0xDu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v47 = (char *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_102;
      case 0xEu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v48 = (char *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_115;
      default:
        v12 = TagFallback & 7;
LABEL_89:
        if (v12 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 96);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 52), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned __int8 *)(v5 + 53), (uint64_t)a2, a4);
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 96) & 0x2000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned __int8 *)(v5 + 53), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::ByteSize(awd::metrics::CommCenterWakeReasonInfo *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v50;
  int v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  int v53;

  v2 = *((_DWORD *)this + 24);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    if ((v2 & 0xFF00) == 0)
      goto LABEL_106;
LABEL_67:
    if ((v2 & 0x100) != 0)
    {
      v36 = *((_QWORD *)this + 8);
      v37 = *(unsigned __int8 *)(v36 + 23);
      v38 = v37;
      v39 = *(_QWORD *)(v36 + 8);
      if ((v37 & 0x80u) == 0)
        v40 = *(unsigned __int8 *)(v36 + 23);
      else
        v40 = v39;
      if (v40 >= 0x80)
      {
        v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
        v37 = *(unsigned __int8 *)(v36 + 23);
        v39 = *(_QWORD *)(v36 + 8);
        v2 = *((_DWORD *)this + 24);
        v38 = *(_BYTE *)(v36 + 23);
      }
      else
      {
        v41 = 1;
      }
      if (v38 < 0)
        v37 = v39;
      LODWORD(v3) = v3 + v41 + v37 + 1;
      if ((v2 & 0x200) == 0)
      {
LABEL_69:
        if ((v2 & 0x400) == 0)
          goto LABEL_70;
LABEL_86:
        v44 = *((_QWORD *)this + 9);
        v45 = *(unsigned __int8 *)(v44 + 23);
        v46 = v45;
        v47 = *(_QWORD *)(v44 + 8);
        if ((v45 & 0x80u) == 0)
          v48 = *(unsigned __int8 *)(v44 + 23);
        else
          v48 = v47;
        if (v48 >= 0x80)
        {
          v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v48);
          v45 = *(unsigned __int8 *)(v44 + 23);
          v47 = *(_QWORD *)(v44 + 8);
          v2 = *((_DWORD *)this + 24);
          v46 = *(_BYTE *)(v44 + 23);
        }
        else
        {
          v49 = 1;
        }
        if (v46 < 0)
          v45 = v47;
        LODWORD(v3) = v3 + v49 + v45 + 1;
        if ((v2 & 0x800) == 0)
        {
LABEL_71:
          if ((v2 & 0x1000) == 0)
            goto LABEL_103;
          goto LABEL_99;
        }
LABEL_95:
        v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
        if (v50 >= 0x80)
        {
          v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50);
          v2 = *((_DWORD *)this + 24);
          LODWORD(v3) = v51 + 1 + v3;
          if ((v2 & 0x1000) == 0)
            goto LABEL_103;
        }
        else
        {
          LODWORD(v3) = v3 + 2;
          if ((v2 & 0x1000) == 0)
          {
LABEL_103:
            if ((v2 & 0x2000) != 0)
              v3 = (v3 + 2);
            else
              v3 = v3;
            goto LABEL_106;
          }
        }
LABEL_99:
        v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
        if (v52 >= 0x80)
        {
          v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52) + 1;
          v2 = *((_DWORD *)this + 24);
        }
        else
        {
          v53 = 2;
        }
        LODWORD(v3) = v53 + v3;
        goto LABEL_103;
      }
    }
    else if ((v2 & 0x200) == 0)
    {
      goto LABEL_69;
    }
    v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
    if (v42 >= 0x80)
    {
      v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      v2 = *((_DWORD *)this + 24);
      LODWORD(v3) = v43 + 1 + v3;
      if ((v2 & 0x400) != 0)
        goto LABEL_86;
    }
    else
    {
      LODWORD(v3) = v3 + 2;
      if ((v2 & 0x400) != 0)
        goto LABEL_86;
    }
LABEL_70:
    if ((v2 & 0x800) == 0)
      goto LABEL_71;
    goto LABEL_95;
  }
  if ((v2 & 1) != 0)
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    v2 = *((_DWORD *)this + 24);
    if ((v2 & 2) == 0)
      goto LABEL_17;
  }
  else
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0)
      goto LABEL_17;
  }
  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *((_DWORD *)this + 24);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 1;
  }
  if (v6 < 0)
    v5 = v7;
  LODWORD(v3) = v3 + v9 + v5 + 1;
LABEL_17:
  if ((v2 & 4) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
LABEL_36:
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      v2 = *((_DWORD *)this + 24);
      v3 = (v3 + v17 + 1);
      if ((v2 & 0x20) != 0)
        goto LABEL_40;
    }
    else
    {
      v3 = (v3 + 2);
      if ((v2 & 0x20) != 0)
        goto LABEL_40;
    }
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
  v10 = *((_QWORD *)this + 3);
  v11 = *(unsigned __int8 *)(v10 + 23);
  v12 = v11;
  v13 = *(_QWORD *)(v10 + 8);
  if ((v11 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = v13;
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14);
    v11 = *(unsigned __int8 *)(v10 + 23);
    v13 = *(_QWORD *)(v10 + 8);
    v2 = *((_DWORD *)this + 24);
    v12 = *(_BYTE *)(v10 + 23);
  }
  else
  {
    v15 = 1;
  }
  if (v12 < 0)
    v11 = v13;
  v3 = (v3 + v15 + v11 + 1);
  if ((v2 & 0x10) != 0)
    goto LABEL_36;
LABEL_22:
  if ((v2 & 0x20) == 0)
    goto LABEL_23;
LABEL_40:
  v18 = *((_QWORD *)this + 4);
  v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = v21;
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v21 = *(_QWORD *)(v18 + 8);
    v2 = *((_DWORD *)this + 24);
    v20 = *(_BYTE *)(v18 + 23);
  }
  else
  {
    v23 = 1;
  }
  if (v20 < 0)
    v19 = v21;
  v3 = (v3 + v23 + v19 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_49:
  v24 = *((_QWORD *)this + 5);
  v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = v27;
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v27 = *(_QWORD *)(v24 + 8);
    v2 = *((_DWORD *)this + 24);
    v26 = *(_BYTE *)(v24 + 23);
  }
  else
  {
    v29 = 1;
  }
  if (v26 < 0)
    v25 = v27;
  v3 = (v3 + v29 + v25 + 1);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0xFF00) == 0)
      goto LABEL_106;
    goto LABEL_67;
  }
LABEL_58:
  v30 = *((_QWORD *)this + 7);
  v31 = *(unsigned __int8 *)(v30 + 23);
  v32 = v31;
  v33 = *(_QWORD *)(v30 + 8);
  if ((v31 & 0x80u) == 0)
    v34 = *(unsigned __int8 *)(v30 + 23);
  else
    v34 = v33;
  if (v34 >= 0x80)
  {
    v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v33 = *(_QWORD *)(v30 + 8);
    v2 = *((_DWORD *)this + 24);
    v32 = *(_BYTE *)(v30 + 23);
  }
  else
  {
    v35 = 1;
  }
  if (v32 < 0)
    v31 = v33;
  v3 = (v3 + v35 + v31 + 1);
  if ((v2 & 0xFF00) != 0)
    goto LABEL_67;
LABEL_106:
  *((_DWORD *)this + 23) = v3;
  return v3;
}

void awd::metrics::CommCenterWakeReasonInfo::CopyFrom(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterWakeReasonInfo *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::IsInitialized(awd::metrics::CommCenterWakeReasonInfo *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::Swap(uint64_t this, awd::metrics::CommCenterWakeReasonInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != (awd::metrics::CommCenterWakeReasonInfo *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    v3 = *(_QWORD *)(this + 16);
    v4 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(this + 16) = v4;
    *((_QWORD *)a2 + 1) = v2;
    *((_QWORD *)a2 + 2) = v3;
    LOBYTE(v2) = *(_BYTE *)(this + 52);
    *(_BYTE *)(this + 52) = *((_BYTE *)a2 + 52);
    *((_BYTE *)a2 + 52) = v2;
    v5 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v5;
    v6 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v6;
    v7 = *(_QWORD *)(this + 40);
    *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v7;
    v8 = *(_QWORD *)(this + 56);
    *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v8;
    v9 = *(_QWORD *)(this + 64);
    *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 80);
    *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = v9;
    v10 = *(_QWORD *)(this + 72);
    *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 84);
    *(_DWORD *)(this + 84) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 88);
    *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = v10;
    LOBYTE(v10) = *(_BYTE *)(this + 53);
    *(_BYTE *)(this + 53) = *((_BYTE *)a2 + 53);
    *((_BYTE *)a2 + 53) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 96);
    *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
    *((_DWORD *)a2 + 24) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 92);
    *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
    *((_DWORD *)a2 + 23) = v10;
  }
  return this;
}

char *awd::metrics::CommCenterWakeReasonInfo::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF545700;
  strcpy(result, "awd.metrics.CommCenterWakeReasonInfo");
  return result;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::GetCachedSize(awd::metrics::CommCenterPowerVotingRecord *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::GetCachedSize(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::GetCachedSize(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::GetCachedSize(awd::metrics::CommCenterMissedMTMessage *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t awd::metrics::CommCenterLowPowerEvent::GetCachedSize(awd::metrics::CommCenterLowPowerEvent *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterWakeInfo::GetCachedSize(awd::metrics::CommCenterWakeInfo *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t awd::metrics::CommCenterLowPowerStats::GetCachedSize(awd::metrics::CommCenterLowPowerStats *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::GetCachedSize(awd::metrics::CommCenterWakeReasonInfo *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t abm::ParseWakeDataIP(xpc_object_t *a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t value;
  int v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  std::string *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  int v29;
  size_t v30;
  std::string *v31;
  xpc::dict *v32;
  std::string *v33;
  unsigned __int8 *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  int v43;
  std::string *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  int v47;
  size_t size;
  std::string *v49;
  xpc::dict *v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  void *v55[3];
  xpc_object_t xdict;
  std::string v57;
  xpc_object_t object[2];
  _BYTE v59[31];
  std::string __p[2];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1C3B8A86C](*a1);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8] || MEMORY[0x1C3B8A86C](*a2) != v5)
    return 0;
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4C0]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5A0]);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB7B0], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v11;
  if (v11)
  {
    xdict = v11;
  }
  else
  {
    v12 = xpc_null_create();
    xdict = v12;
    if (!v12)
    {
      v13 = xpc_null_create();
      v12 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x1C3B8A86C](v12) == v5)
  {
    xpc_retain(v12);
    goto LABEL_16;
  }
  v13 = xpc_null_create();
LABEL_15:
  xdict = v13;
LABEL_16:
  xpc_release(v12);
  memset(v55, 170, sizeof(v55));
  value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB408]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  if (v55[1] == v55[0])
  {
    v35 = xpc_BOOL_create(1);
    if (!v35)
      v35 = xpc_null_create();
  }
  else
  {
    v15 = *(unsigned __int8 *)v55[0] >> 4;
    if (v15 == 6)
    {
      v37 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB88]);
      if (!v37)
        v37 = xpc_null_create();
      v17 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB9F8], v37);
      v38 = xpc_null_create();
      xpc_release(v37);
      xpc_release(v38);
      if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x28)
      {
        memset(__p, 0, 47);
        *(_OWORD *)object = 0u;
        memset(v59, 0, sizeof(v59));
        inet_ntop(30, (char *)v55[0] + 8, (char *)__p, 0x2Eu);
        inet_ntop(30, (char *)v55[0] + 24, (char *)object, 0x2Eu);
        v39 = xpc_string_create((const char *)__p);
        if (!v39)
          v39 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBE60], v39);
        v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        v41 = xpc_string_create((const char *)object);
        if (!v41)
          v41 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFC048], v41);
        v42 = xpc_null_create();
        xpc_release(v41);
        xpc_release(v42);
        v43 = *((unsigned __int8 *)v55[0] + 6);
        memset(&v57, 170, sizeof(v57));
        abm::_ProtocolAsString(&v57, v43);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = &v57;
        else
          v44 = (std::string *)v57.__r_.__value_.__r.__words[0];
        v45 = xpc_string_create((const char *)v44);
        if (!v45)
          v45 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBB18], v45);
        v46 = xpc_null_create();
        xpc_release(v45);
        xpc_release(v46);
        v47 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          size = v57.__r_.__value_.__l.__size_;
        if (size == strlen((const char *)*MEMORY[0x1E0CFBB70])
          && ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (v49 = &v57)
            : (v49 = (std::string *)v57.__r_.__value_.__r.__words[0]),
              !memcmp(v49, (const void *)*MEMORY[0x1E0CFBB70], size))
          || size == strlen((const char *)*MEMORY[0x1E0CFBB78])
          && (v47 >= 0 ? (v51 = &v57) : (v51 = (std::string *)v57.__r_.__value_.__r.__words[0]),
              !memcmp(v51, (const void *)*MEMORY[0x1E0CFBB78], size)))
        {
          if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x2C)
          {
            abm::_ParsePortData((abm *)v55[0], (unsigned __int8 *)0x28, &xdict, v50);
            LOBYTE(v47) = *((_BYTE *)&v57.__r_.__value_.__s + 23);
          }
        }
        if ((v47 & 0x80) != 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        goto LABEL_92;
      }
      v52 = xpc_BOOL_create(1);
      if (!v52)
        v52 = xpc_null_create();
LABEL_91:
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CFBF78], v52);
      v53 = xpc_null_create();
      xpc_release(v52);
      xpc_release(v53);
      goto LABEL_92;
    }
    if (v15 == 4)
    {
      v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB80]);
      if (!v16)
        v16 = xpc_null_create();
      v17 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB9F8], v16);
      v18 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v18);
      if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x14)
      {
        memset(__p, 170, 24);
        abm::_ProtocolAsString(__p, *((unsigned __int8 *)v55[0] + 9));
        v20 = *((_DWORD *)v55[0] + 3);
        v19 = *((_DWORD *)v55[0] + 4);
        v21 = *(_BYTE *)v55[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = __p;
        else
          v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        v23 = xpc_string_create((const char *)v22);
        if (!v23)
          v23 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBB18], v23);
        v24 = xpc_null_create();
        xpc_release(v23);
        xpc_release(v24);
        v25 = xpc_int64_create(bswap32(v20));
        if (!v25)
          v25 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBE60], v25);
        v26 = xpc_null_create();
        xpc_release(v25);
        xpc_release(v26);
        v27 = xpc_int64_create(bswap32(v19));
        if (!v27)
          v27 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFC048], v27);
        v28 = xpc_null_create();
        xpc_release(v27);
        xpc_release(v28);
        v29 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        else
          v30 = __p[0].__r_.__value_.__l.__size_;
        if (v30 == strlen((const char *)*MEMORY[0x1E0CFBB70])
          && ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (v31 = __p)
            : (v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0]),
              !memcmp(v31, (const void *)*MEMORY[0x1E0CFBB70], v30))
          || v30 == strlen((const char *)*MEMORY[0x1E0CFBB78])
          && (v29 >= 0 ? (v33 = __p) : (v33 = (std::string *)__p[0].__r_.__value_.__r.__words[0]),
              !memcmp(v33, (const void *)*MEMORY[0x1E0CFBB78], v30)))
        {
          v34 = (unsigned __int8 *)(4 * (v21 & 0xF));
          if ((void *)((char *)v55[1] - (char *)v55[0]) >= v34 + 4)
          {
            abm::_ParsePortData((abm *)v55[0], v34, &xdict, v32);
            LOBYTE(v29) = *((_BYTE *)&__p[0].__r_.__value_.__s + 23);
          }
        }
        if ((v29 & 0x80) != 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        goto LABEL_92;
      }
      v52 = xpc_BOOL_create(1);
      if (!v52)
        v52 = xpc_null_create();
      goto LABEL_91;
    }
    v35 = xpc_BOOL_create(1);
    if (!v35)
      v35 = xpc_null_create();
  }
  v17 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBF78], v35);
  v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
LABEL_92:
  if (v17)
    xpc_retain(v17);
  else
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFBB10], v17);
  v54 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v54);
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  xpc_release(xdict);
  return 1;
}

void sub_1BF498CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

std::string *abm::_ProtocolAsString(std::string *this, int a2)
{
  const std::string::value_type **v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  __int128 *v12;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__p[2];
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 > 16)
  {
    if (a2 == 17)
    {
      v3 = (const std::string::value_type **)MEMORY[0x1E0CFBB78];
      return std::string::__assign_external(this, *v3);
    }
    if (a2 == 58)
    {
      v3 = (const std::string::value_type **)MEMORY[0x1E0CFBF20];
      return std::string::__assign_external(this, *v3);
    }
  }
  else
  {
    if (a2 == 1)
    {
      v3 = (const std::string::value_type **)MEMORY[0x1E0CFBC18];
      return std::string::__assign_external(this, *v3);
    }
    if (a2 == 6)
    {
      v3 = (const std::string::value_type **)MEMORY[0x1E0CFBB70];
      return std::string::__assign_external(this, *v3);
    }
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = 0xAAAAAAAAAAAAAAAALL;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33 = v4;
  v32 = v4;
  v31 = v4;
  v30 = v4;
  v29 = v4;
  *(_OWORD *)__p = v4;
  v26 = v4;
  v23 = v4;
  v24 = v4;
  v21 = v4;
  v22 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v20 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v20 + *(_QWORD *)(v20 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v20 + *(_QWORD *)(v20 - 24));
  std::ios_base::init(v9, &v21);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v20 = v5 + 24;
  v28 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v21 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  LODWORD(v27) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Protocol #", 10);
  std::ostream::operator<<();
  if ((v27 & 0x10) != 0)
  {
    v14 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) < (unint64_t)v24)
    {
      *((_QWORD *)&v26 + 1) = v24;
      v14 = v24;
    }
    v15 = (const void *)*((_QWORD *)&v23 + 1);
    v11 = v14 - *((_QWORD *)&v23 + 1);
    if ((unint64_t)(v14 - *((_QWORD *)&v23 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v27 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v19) = 0;
      v12 = &v18;
      goto LABEL_24;
    }
    v15 = (const void *)v22;
    v11 = v23 - v22;
    if ((_QWORD)v23 - (_QWORD)v22 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_30:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v12 = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&v18 + 1) = v11;
    v19 = v17 | 0x8000000000000000;
    *(_QWORD *)&v18 = v12;
  }
  else
  {
    HIBYTE(v19) = v11;
    v12 = &v18;
    if (!v11)
      goto LABEL_24;
  }
  memmove(v12, v15, v11);
LABEL_24:
  *((_BYTE *)v12 + v11) = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = v18;
  this->__r_.__value_.__r.__words[2] = v19;
  v20 = *v7;
  *(uint64_t *)((char *)&v20 + *(_QWORD *)(v20 - 24)) = v7[3];
  *(_QWORD *)&v21 = v10 + 16;
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (std::string *)MEMORY[0x1C3B89E4C](&v28);
}

void sub_1BF4991B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C](v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void abm::_ParsePortData(abm *this, unsigned __int8 *a2, xpc_object_t *a3, xpc::dict *a4)
{
  unsigned __int16 *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  v5 = (unsigned __int16 *)((char *)this + a2);
  v6 = xpc_int64_create(bswap32(*v5) >> 16);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFBCB0], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_int64_create(bswap32(v5[1]) >> 16);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFBF80], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
}

void Timestamp::Timestamp(Timestamp *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  char *v11;
  unsigned __int128 v12;
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = *v2;
    v4 = v2;
    if (*v2)
      goto LABEL_4;
LABEL_10:
    v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v4;
    *v2 = v7;
    v8 = **(_QWORD **)this;
    v9 = (uint64_t *)v7;
    if (v8)
    {
      *(_QWORD *)this = v8;
      v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((_QWORD *)this + 2);
    goto LABEL_13;
  }
  v10 = __error();
  v11 = strerror(*v10);
  *(_DWORD *)buf = 136315138;
  v14 = v11;
  _os_log_error_impl(&dword_1BF335000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  v3 = *v2;
  v4 = v2;
  if (!*v2)
    goto LABEL_10;
LABEL_4:
  v5 = v3;
  while (1)
  {
    while (1)
    {
      v4 = (_QWORD *)v5;
      v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1)
        break;
      v5 = *v4;
      v2 = v4;
      if (!*v4)
        goto LABEL_10;
    }
    if ((v6 & 0x80000000) == 0)
      break;
    v5 = v4[1];
    if (!v5)
    {
      v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_1BF499488(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1BF4994A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_1BF4994FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1BF499550(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, _OWORD *a2, int a3)
{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  __n128 result;

  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 1);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 6) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  const char *v5;
  uint64_t **v7;
  int *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  uint64_t **v13;
  int v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  int *v19;
  char *v20;
  int *v21;
  char *v22;
  unsigned __int128 v23;
  tm v24;
  void *__p[4];
  uint8_t buf[4];
  char *v27;
  uint64_t v28;

  v5 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)__p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0)
    v5 = *(const char **)a2;
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(_QWORD *)&v23 = mktime(&v24);
    if ((_QWORD)v23 != -1)
      goto LABEL_15;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)buf = 136315138;
      v27 = v20;
      _os_log_error_impl(&dword_1BF335000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    else
    {
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v8 = __error();
    v9 = strerror(*v8);
    *(_DWORD *)buf = 136315138;
    v27 = v9;
    v10 = MEMORY[0x1E0C81028];
    v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v21 = __error();
    v22 = strerror(*v21);
    *(_DWORD *)buf = 136315138;
    v27 = v22;
    v10 = MEMORY[0x1E0C81028];
    v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  v12 = *v7;
  v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v12;
        v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4)
          break;
        v12 = *v13;
        v7 = v13;
        if (!*v13)
          goto LABEL_22;
      }
      if (v14 >= a4)
        break;
      v12 = v13[1];
      if (!v12)
      {
        v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_25;
  }
  else
  {
LABEL_22:
    v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13;
    *v7 = (uint64_t *)v15;
    v16 = (uint64_t *)**a1;
    v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0)
LABEL_25:
      operator delete(__p[0]);
  }
  return a1;
}

void sub_1BF499B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v24, *(_QWORD **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a3;
    if (v7 >= a3)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3)
    return 0;
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  time_t v16;
  __int128 v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  const std::locale::facet *v22;
  size_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  tm v31;
  time_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *__p[2];
  __int128 v39;
  __int128 v40;
  _OWORD v41[9];
  unint64_t v42;
  std::locale v43;
  char __s[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v42 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[7] = v8;
  v41[8] = v8;
  v41[5] = v8;
  v41[6] = v8;
  v41[3] = v8;
  v41[4] = v8;
  v41[1] = v8;
  v41[2] = v8;
  v40 = v8;
  v41[0] = v8;
  *(_OWORD *)__p = v8;
  v39 = v8;
  v36 = v8;
  v37 = v8;
  v34 = v8;
  v35 = v8;
  v33 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 8;
  v9 = v11;
  if (!v11)
    goto LABEL_11;
  v12 = v10;
  do
  {
    v13 = *(_DWORD *)(v9 + 32);
    v14 = v13 < a2;
    if (v13 >= a2)
      v15 = (uint64_t *)v9;
    else
      v15 = (uint64_t *)(v9 + 8);
    if (!v14)
      v12 = v9;
    v9 = *v15;
  }
  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v12 + 40);
    if ((a3 & 0x11) != 0)
    {
LABEL_12:
      v31.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      v32 = v16;
      *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v31.tm_mon = v17;
      *(_OWORD *)&v31.tm_isdst = v17;
      *(_OWORD *)&v31.tm_sec = v17;
      localtime_r(&v32, &v31);
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)__s = 0u;
      v45 = 0u;
      if ((a3 & 0x10) != 0)
        v18 = "%Y.%m.%d_%H-%M-%S%z";
      else
        v18 = "%Y-%m-%d-%H-%M-%S";
      strftime(__s, 0x40uLL, v18, &v31);
      v19 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)__s, v19);
      if ((a3 & 8) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"-", 1);
        v20 = v34;
        v21 = (char *)&v34 + *(_QWORD *)(v34 - 24);
        if (*((_DWORD *)v21 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24)));
          v22 = std::locale::use_facet(&v43, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 32);
          std::locale::~locale(&v43);
          v20 = v34;
        }
        *((_DWORD *)v21 + 36) = 48;
        *(_QWORD *)((char *)&v35 + *(_QWORD *)(v20 - 24) + 8) = 3;
        std::ostream::operator<<();
      }
      goto LABEL_23;
    }
  }
  else
  {
LABEL_11:
    v16 = 0;
    if ((a3 & 0x11) != 0)
      goto LABEL_12;
  }
  std::ostream::operator<<();
  if ((a3 & 4) != 0 || (a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_23:
  if ((BYTE8(v40) & 0x10) != 0)
  {
    v24 = v40;
    if ((unint64_t)v40 < *((_QWORD *)&v37 + 1))
    {
      *(_QWORD *)&v40 = *((_QWORD *)&v37 + 1);
      v24 = *((_QWORD *)&v37 + 1);
    }
    v25 = (const void *)v37;
    v23 = v24 - v37;
    if ((unint64_t)(v24 - v37) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_40;
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      v23 = 0;
      a4[23] = 0;
      goto LABEL_36;
    }
    v25 = (const void *)*((_QWORD *)&v35 + 1);
    v23 = *((_QWORD *)&v36 + 1) - *((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v36 + 1) - *((_QWORD *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_40:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a4 + 1) = v23;
    *((_QWORD *)a4 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a4 = v28;
    a4 = v28;
    goto LABEL_35;
  }
  a4[23] = v23;
  if (v23)
LABEL_35:
    memmove(a4, v25, v23);
LABEL_36:
  a4[v23] = 0;
  *(_QWORD *)&v33 = *MEMORY[0x1E0DE4F50];
  v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v34 = v29;
  *((_QWORD *)&v34 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B89E4C](v41);
}

void sub_1BF499F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF499FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF499FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF499FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF499FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  uint64_t *v8;
  std::string __p;
  uint64_t *v11[3];

  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v1 = v11[1];
    if (!v11[1])
      goto LABEL_18;
  }
  v2 = &v11[1];
  v3 = v1;
  do
  {
    v4 = (uint64_t **)v3;
    v5 = v2;
    v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0)
      v2 = (uint64_t **)v3;
    else
      ++v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1])
    goto LABEL_18;
  v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0)
    goto LABEL_18;
  if (v6 < 0)
    v4 = v5;
  v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_1BF49A108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v6;
        if (v8)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v8;
              v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7)
                break;
              v8 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v7)
              goto LABEL_29;
            v8 = v13[1];
            if (!v8)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = operator new(0x38uLL);
      v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((_QWORD *)v16 + 6) = v17;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v13;
      *v14 = (uint64_t *)v16;
      v18 = *(_QWORD *)*v5;
      if (v18)
      {
        *v5 = v18;
        v19 = *v14;
      }
      else
      {
        v19 = (uint64_t *)v16;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v12 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v12);
      }
      v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

PowerStats *PowerStats::create@<X0>(PowerStats **a1@<X8>)
{
  PowerStats *v3;
  PowerStats *result;

  v3 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v3);
  *a1 = v3;
  result = (PowerStats *)operator new(0x20uLL);
  *(_QWORD *)result = off_1E79089B8;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_1BF49A2F8()
{
  PowerStats *v0;

  PowerStats::~PowerStats(v0);
}

void sub_1BF49A304(void *a1)
{
  _Unwind_Exception *v1;

  operator delete(a1);
  _Unwind_Resume(v1);
}

void sub_1BF49A310(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PowerStats::PowerStats(PowerStats *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v10;
  __int128 v11;
  _BYTE v12[8];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v11, "com.apple.telephony.abm", "power.stats");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger(this, (const ctu::OsLogLogger *)v12);
  MEMORY[0x1C3B89240](v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v11);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *(_QWORD *)((char *)this + 92) = 0x200000001;
  *((_DWORD *)this + 25) = -536870144;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, 0);
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  v10 = 11;
  strcpy((char *)__p, "power.stats");
  AppleBasebandManager::create();
  v2 = v11;
  v11 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *(_OWORD *)((char *)this + 120) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_1BF49A4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v17);
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(v18);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v16, *(_QWORD **)(v15 + 48));
  MEMORY[0x1C3B89240](v15);
  _Unwind_Resume(a1);
}

const char *PowerStats::getName(PowerStats *this)
{
  return "power.stats";
}

void PowerStats::clear(PowerStats *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 48);
  v1 = (_QWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, v1);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
}

void PowerStats::~PowerStats(PowerStats *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const void *v6;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 14);
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)*((_QWORD *)this + 13);
  if (v6)
    _Block_release(v6);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  JUMPOUT(0x1C3B89240);
}

void PowerStats::gotAssertion(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  std::string *v5;
  std::string v6;
  std::string v7;
  std::string v8;

  *(_BYTE *)(a1 + 88) = 1;
  v4 = *(_DWORD *)(a1 + 96);
  if (v4 == 1)
  {
    ++*(_DWORD *)(a1 + 16);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v6 = *(std::string *)a2;
    v5 = &v6;
    PowerStats::submitLowPowerEventMetric_sync(a1, 0, 1u, (const char *)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_18;
  }
  else if (!v4)
  {
    if (a3 == 1)
    {
      ++*(_DWORD *)(a1 + 12);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v8 = *(std::string *)a2;
      v5 = &v8;
      PowerStats::submitLowPowerEventMetric_sync(a1, 2u, 0, (const char *)&v8);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
        operator delete(v5->__r_.__value_.__l.__data_);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v7 = *(std::string *)a2;
      v5 = &v7;
      PowerStats::submitLowPowerEventMetric_sync(a1, 0, 0, (const char *)&v7);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
    }
  }
}

void PowerStats::submitLowPowerEventMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, const char *a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  _QWORD v30[4];
  void *aBlock;
  xpc_object_t object;

  v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power event stats", (uint8_t *)v30, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x1E0C812F8];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB510], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB520], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (a4[23] < 0)
    a4 = *(const char **)a4;
  v18 = xpc_string_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB270], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB020], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524464);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB0E8], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB018], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      v26 = v11;
      v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_34:
        v28 = _Block_copy(v27);
        goto LABEL_37;
      }
    }
    else
    {
      v26 = xpc_null_create();
      v27 = *(const void **)(a1 + 104);
      if (v27)
        goto LABEL_34;
    }
    v28 = 0;
LABEL_37:
    v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v30[3] = &__block_descriptor_tmp_32;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      object = v26;
      if (v26)
      {
LABEL_39:
        xpc_retain(v26);
LABEL_42:
        dispatch_async(v29, v30);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v28)
          _Block_release(v28);
        xpc_release(v26);
        goto LABEL_47;
      }
    }
    else
    {
      aBlock = 0;
      object = v26;
      if (v26)
        goto LABEL_39;
    }
    object = xpc_null_create();
    goto LABEL_42;
  }
LABEL_47:
  xpc_release(v13);
  xpc_release(v11);
}

uint64_t PowerStats::noPendingAssertion(uint64_t this)
{
  *(_BYTE *)(this + 88) = 0;
  return this;
}

void PowerStats::reportSystemStateChange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t SystemTime;
  uint64_t v11;
  unsigned int v12;
  void *__p;
  char v14;
  uint8_t buf[16];

  v4 = *a3;
  *(_DWORD *)(a1 + 100) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 92) = v4;
  v5 = *((_DWORD *)a3 + 2);
  if (v5 == -536870112)
  {
    ++*(_DWORD *)(a1 + 24);
    SystemTime = TelephonyUtilGetSystemTime();
    *(_QWORD *)(a1 + 64) = SystemTime;
    v11 = *(_QWORD *)(a1 + 72);
    if (v11)
    {
      v12 = ((int)SystemTime - (int)v11) / 0x3E8u;
      *(_DWORD *)(a1 + 84) = v12;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 84);
    }
    PowerStats::submitWakeInfoMetric_sync(a1, *(_DWORD *)(a2 + 4) == 1, v12, *(_DWORD *)(a1 + 80));
    return;
  }
  if (v5 != -536870272)
    return;
  if (*((_DWORD *)a3 + 1) != 1)
  {
    ++*(_DWORD *)(a1 + 32);
    v7 = TelephonyUtilGetSystemTime();
    *(_QWORD *)(a1 + 72) = v7;
    v8 = *(_QWORD *)(a1 + 64);
    if (!v8)
      return;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v6 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Forced sleep while power assertion(s) held ", buf, 2u);
    }
    ++*(_DWORD *)(a1 + 20);
    v14 = 0;
    LOBYTE(__p) = 0;
    PowerStats::submitLowPowerEventMetric_sync(a1, 1u, 1u, (const char *)&__p);
    if (v14 < 0)
      operator delete(__p);
  }
  ++*(_DWORD *)(a1 + 28);
  v7 = TelephonyUtilGetSystemTime();
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
LABEL_14:
    *(_DWORD *)(a1 + 80) = ((int)v7 - (int)v8) / 0x3E8u;
}

void PowerStats::submitWakeInfoMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  _QWORD v30[4];
  void *aBlock;
  xpc_object_t object;

  v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of wake info", (uint8_t *)v30, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x1E0C812F8];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB9C0], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFBD70], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_int64_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFBC78], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB020], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524465);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB0E8], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB018], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      v26 = v11;
      v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_32:
        v28 = _Block_copy(v27);
        goto LABEL_35;
      }
    }
    else
    {
      v26 = xpc_null_create();
      v27 = *(const void **)(a1 + 104);
      if (v27)
        goto LABEL_32;
    }
    v28 = 0;
LABEL_35:
    v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v30[3] = &__block_descriptor_tmp_32;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      object = v26;
      if (v26)
      {
LABEL_37:
        xpc_retain(v26);
LABEL_40:
        dispatch_async(v29, v30);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v28)
          _Block_release(v28);
        xpc_release(v26);
        goto LABEL_45;
      }
    }
    else
    {
      aBlock = 0;
      object = v26;
      if (v26)
        goto LABEL_37;
    }
    object = xpc_null_create();
    goto LABEL_40;
  }
LABEL_45:
  xpc_release(v13);
  xpc_release(v11);
}

void PowerStats::setPowerdownMessage(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  const object *v4;
  const __CFArray *v5;
  CFTypeID v6;
  CFTypeRef v7;
  CFIndex v8;
  uint64_t **v9;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  CFTypeID v13;
  const __CFDictionary *v14;
  unsigned int Int;
  uint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  char v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  CFTypeRef cf[2];
  CFArrayRef theArray;
  xpc_object_t object;

  theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  value = xpc_dictionary_get_value(*a2, abm::kKeyPowerDownMessageList[0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v4);
  v5 = (const __CFArray *)cf[0];
  if (cf[0])
  {
    v6 = CFGetTypeID(cf[0]);
    if (v6 == CFArrayGetTypeID())
    {
      theArray = (CFArrayRef)cf[0];
      CFRetain(cf[0]);
      v7 = cf[0];
LABEL_8:
      CFRelease(v7);
      goto LABEL_9;
    }
  }
  v5 = 0;
  theArray = 0;
  v7 = cf[0];
  if (cf[0])
    goto LABEL_8;
LABEL_9:
  xpc_release(object);
  v8 = 0;
  v9 = (uint64_t **)(a1 + 48);
  while (1)
  {
    Count = CFArrayGetCount(v5);
    v5 = theArray;
    if (Count <= v8)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
    v12 = ValueAtIndex;
    if (!ValueAtIndex)
      goto LABEL_12;
    cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    cf[1] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    v13 = CFGetTypeID(ValueAtIndex);
    if (v13 == CFDictionaryGetTypeID())
      v14 = v12;
    else
      v14 = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)cf, v14);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageQMISvc[0]);
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x1C3B8936C](&object);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageId[0]);
    v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x1C3B8936C](&object);
    v17 = *v9;
    v18 = (uint64_t **)(a1 + 48);
    v19 = (uint64_t *)(a1 + 48);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          v19 = v17;
          v20 = *((_DWORD *)v17 + 7);
          if (Int == v20)
            break;
          if (Int >= v20)
          {
            if (v20 >= Int)
              v24 = 1;
            else
              v24 = -1;
            if ((v24 & 0x80) == 0)
              goto LABEL_39;
            goto LABEL_35;
          }
LABEL_20:
          v17 = (uint64_t *)*v19;
          v18 = (uint64_t **)v19;
          if (!*v19)
            goto LABEL_37;
        }
        v21 = *((_DWORD *)v19 + 8);
        if (v16 < v21)
          goto LABEL_20;
        v22 = v21 == (_DWORD)v16;
        if (v21 >= v16)
          v23 = 1;
        else
          v23 = -1;
        if (v22)
          v23 = 0;
        if ((v23 & 0x80) == 0)
        {
LABEL_39:
          v25 = (char *)v19;
          goto LABEL_11;
        }
LABEL_35:
        v17 = (uint64_t *)v19[1];
        if (!v17)
        {
          v18 = (uint64_t **)(v19 + 1);
          break;
        }
      }
    }
LABEL_37:
    v25 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v25 + 28) = Int | (unint64_t)(v16 << 32);
    *((_DWORD *)v25 + 9) = 0;
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = v19;
    *v18 = (uint64_t *)v25;
    v26 = **(_QWORD **)(a1 + 40);
    v27 = (uint64_t *)v25;
    if (v26)
    {
      *(_QWORD *)(a1 + 40) = v26;
      v27 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v27);
    ++*(_QWORD *)(a1 + 56);
    v5 = theArray;
LABEL_11:
    ++*((_DWORD *)v25 + 9);
    MEMORY[0x1C3B893A8](cf);
LABEL_12:
    ++v8;
  }
  if (theArray)
    CFRelease(theArray);
}

void sub_1BF49B598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void PowerStats::submitLowPowerStatsMetric_sync(os_log_t *this)
{
  NSObject *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  os_log_t v21;
  NSObject *v22;
  unsigned int v23;
  const char *v24;
  int64_t isa_low;
  int64_t isa_high;
  int64_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  NSObject *isa;
  NSObject *v39;
  BOOL v40;
  xpc_object_t v41;
  void *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  os_log_t v53;
  void *v54;
  NSObject *v55;
  os_log_t *v56;
  void *v57;
  xpc_object_t xdict;
  char *v59;
  char *v60;
  char *key;
  xpc_object_t xarray;
  uint8_t buf[8];
  uint64_t v64;
  void (*v65)(uint64_t);
  void *v66;
  void *aBlock;
  xpc_object_t object;

  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power stats", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v5);
      v6 = v5;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v7 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBBC0], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create((*((_DWORD *)this + 4) + *((_DWORD *)this + 2)));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB518], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(*((unsigned int *)this + 5));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB8B8], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*((unsigned int *)this + 6));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB200], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(*((unsigned int *)this + 8));
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB638], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(*((unsigned int *)this + 7));
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB740], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_array_create(0, 0);
  if (v19 || (v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v19) == MEMORY[0x1E0C812C8])
    {
      xpc_retain(v19);
      v20 = v19;
    }
    else
    {
      v20 = xpc_null_create();
    }
  }
  else
  {
    v20 = xpc_null_create();
    v19 = 0;
  }
  xpc_release(v19);
  xarray = v20;
  v57 = v4;
  xdict = v6;
  v21 = this[5];
  v56 = this;
  v22 = (this + 6);
  if (v21 == (os_log_t)(this + 6))
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    key = (char *)*MEMORY[0x1E0CFB8B0];
    v60 = (char *)*MEMORY[0x1E0CFB750];
    v59 = (char *)*MEMORY[0x1E0CFB1F8];
    v24 = (const char *)*MEMORY[0x1E0CFB1F0];
    do
    {
      isa_high = HIDWORD(v21[3].isa);
      isa_low = LODWORD(v21[4].isa);
      v27 = HIDWORD(v21[4].isa);
      v28 = xpc_dictionary_create(0, 0, 0);
      if (v28 || (v28 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v28) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v28);
          v29 = v28;
        }
        else
        {
          v29 = xpc_null_create();
        }
      }
      else
      {
        v29 = xpc_null_create();
        v28 = 0;
      }
      xpc_release(v28);
      v30 = xpc_int64_create(0);
      if (!v30)
        v30 = xpc_null_create();
      xpc_dictionary_set_value(v29, key, v30);
      v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      v32 = xpc_int64_create(isa_high);
      if (!v32)
        v32 = xpc_null_create();
      xpc_dictionary_set_value(v29, v60, v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      v34 = xpc_int64_create(isa_low);
      if (!v34)
        v34 = xpc_null_create();
      xpc_dictionary_set_value(v29, v59, v34);
      v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
      v36 = xpc_int64_create(v27);
      if (!v36)
        v36 = xpc_null_create();
      xpc_dictionary_set_value(v29, v24, v36);
      v37 = xpc_null_create();
      xpc_release(v36);
      xpc_release(v37);
      xpc_array_append_value(xarray, v29);
      xpc_release(v29);
      isa = v21[1].isa;
      if (isa)
      {
        do
        {
          v39 = isa;
          isa = isa->isa;
        }
        while (isa);
      }
      else
      {
        do
        {
          v39 = v21[2].isa;
          v40 = v39->isa == (Class)v21;
          v21 = v39;
        }
        while (!v40);
      }
      v23 += v27;
      v21 = v39;
    }
    while (v39 != v22);
  }
  if (xarray)
  {
    xpc_retain(xarray);
    v41 = xarray;
    v42 = xdict;
  }
  else
  {
    v42 = xdict;
    v41 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E0CFB748], v41);
  v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  v44 = xpc_int64_create(v23);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E0CFBAD8], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  v46 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v46)
    v46 = xpc_null_create();
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E0CFB020], v46);
  v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  v48 = xpc_int64_create(524466);
  if (!v48)
    v48 = xpc_null_create();
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E0CFB0E8], v48);
  v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  if (v42)
  {
    xpc_retain(v42);
    v50 = v42;
  }
  else
  {
    v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E0CFB018], v50);
  v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v56[13] && v56[14])
  {
    if (v57)
    {
      xpc_retain(v57);
      v52 = v57;
      v53 = v56[13];
      if (v53)
      {
LABEL_73:
        v54 = _Block_copy(v53);
        goto LABEL_76;
      }
    }
    else
    {
      v52 = xpc_null_create();
      v53 = v56[13];
      if (v53)
        goto LABEL_73;
    }
    v54 = 0;
LABEL_76:
    v55 = v56[14];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v64 = 1174405120;
    v65 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v66 = &__block_descriptor_tmp_32;
    if (v54)
    {
      aBlock = _Block_copy(v54);
      object = v52;
      if (v52)
      {
LABEL_78:
        xpc_retain(v52);
LABEL_81:
        dispatch_async(v55, buf);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v54)
          _Block_release(v54);
        xpc_release(v52);
        goto LABEL_86;
      }
    }
    else
    {
      aBlock = 0;
      object = v52;
      if (v52)
        goto LABEL_78;
    }
    object = xpc_null_create();
    goto LABEL_81;
  }
LABEL_86:
  xpc_release(xarray);
  xpc_release(v42);
  xpc_release(v57);
}

void sub_1BF49BFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  xpc_release(v16);
  xpc_release(object);
  xpc_release(a12);
  xpc_release(a11);
  _Unwind_Resume(a1);
}

void PowerStats::reportStats(os_log_t *this, int a2)
{
  if (a2 == 524466)
    PowerStats::submitLowPowerStatsMetric_sync(this);
}

void PowerStats::registerStatsHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  if (v7)
    dispatch_release(v7);
}

void PowerStats::dumpState(os_log_t *this)
{
  NSObject *v2;
  _QWORD *v3;
  char *v4;
  os_log_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  int isa_high;
  int isa;
  int v19;
  NSObject *v20;
  NSObject *v21;
  BOOL v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Power state ---------------", buf, 2u);
    v2 = *this;
    v3 = &unk_1BF53B000;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      v4 = "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"
         + 111;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = (_QWORD *)&unk_1BF53B000;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_3;
  }
  v7 = *((_DWORD *)this + 3);
  *(_DWORD *)buf = v3[345];
  v24 = v7;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Idle sleep reverted due to BB events: %u", buf, 8u);
  v2 = *this;
  v4 = "7_EUlPS4_E_";
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v8 = *((_DWORD *)this + 2);
  v9 = *((_DWORD *)this + 4);
  *(_DWORD *)buf = *((_QWORD *)v4 + 384);
  v24 = v8;
  v25 = 1024;
  v26 = v9;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I BB events deferred on idle sleep: %u, on forced sleep: %u", buf, 0xEu);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v10 = *((_DWORD *)this + 5);
  *(_DWORD *)buf = v3[345];
  v24 = v10;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Forced sleep during BB event handling: %u", buf, 8u);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  v12 = *((_DWORD *)this + 7);
  v11 = *((_DWORD *)this + 8);
  v13 = *((_DWORD *)this + 6);
  *(_DWORD *)buf = 67109632;
  v24 = v11;
  v25 = 1024;
  v26 = v12;
  v27 = 1024;
  v28 = v13;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Number of idle sleeps: %u, forced sleeps: %u, wakes: %u", buf, 0x14u);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    v5 = this[5];
    v6 = (this + 6);
    if (v5 == (os_log_t)(this + 6))
      return;
    goto LABEL_17;
  }
LABEL_14:
  v14 = *((_DWORD *)this + 20);
  v15 = *((_DWORD *)this + 21);
  *(_DWORD *)buf = *((_QWORD *)v4 + 384);
  v24 = v14;
  v25 = 1024;
  v26 = v15;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Last wake duration: %u, sleep duration: %u", buf, 0xEu);
  v5 = this[5];
  v6 = (this + 6);
  if (v5 == (os_log_t)(this + 6))
    return;
  do
  {
LABEL_17:
    v16 = *this;
    if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
      isa = (int)v5[4].isa;
      isa_high = HIDWORD(v5[4].isa);
      v19 = HIDWORD(v5[3].isa);
      *(_DWORD *)buf = 67109632;
      v24 = v19;
      v25 = 1024;
      v26 = isa;
      v27 = 1024;
      v28 = isa_high;
      _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Received message QMI_SVC 0x%x, ID 0x%x, %u times after powerdown", buf, 0x14u);
    }
    v20 = v5[1].isa;
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = v20->isa;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = v5[2].isa;
        v22 = v21->isa == (Class)v5;
        v5 = v21;
      }
      while (!v22);
    }
    v5 = v21;
  }
  while (v21 != v6);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

PowerStats *std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__on_zero_shared(uint64_t a1)
{
  PowerStats *result;

  result = *(PowerStats **)(a1 + 24);
  if (result)
    PowerStats::~PowerStats(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF545E2FLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF545E2FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF545E2FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF545E2FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::dict)>::operator()<xpc::dict const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40));
}

void dispatch::block<void({block_pointer})(xpc::dict)>::operator()<xpc::dict const&>(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  xpc_object_t object;

  v2 = *a1;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1BF49C568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

uint64_t __cxx_global_var_init_17()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

_QWORD *Service::Service(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_1E7908A38;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  return result;
}

void Service::~Service(Service *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)this = off_1E7908A38;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

std::__shared_weak_count *Service::getServiceManager@<X0>(Service *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *((_QWORD *)this + 1);
  }
  return result;
}

void Service::registerCommandHandler(uint64_t a1, uint64_t a2, const void **a3)
{
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15[3];

  v6 = *(_QWORD *)(a1 + 32);
  if (v6 >= *(_QWORD *)(a1 + 40))
  {
    *(_QWORD *)(a1 + 32) = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)(a1 + 24), a2);
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      return;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v7 = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v6 = v7;
    }
    *(_QWORD *)(a1 + 32) = v6 + 24;
    *(_QWORD *)(a1 + 32) = v6 + 24;
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      return;
  }
  v9 = std::__shared_weak_count::lock(v8);
  v15[2] = v9;
  if (v9)
  {
    v10 = v9;
    v11 = *(void **)(a1 + 8);
    v15[1] = v11;
    if (v11)
    {
      if (*a3)
        v12 = _Block_copy(*a3);
      else
        v12 = 0;
      v15[0] = v12;
      ServiceManager::registerCommandHandler((uint64_t)v11, a2, v15);
      if (v12)
        _Block_release(v12);
    }
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF49C8A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = v1;
  _Unwind_Resume(a1);
}

void sub_1BF49C8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;

  if (v11)
    _Block_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ServiceManager::registerCommandHandler(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4;
  void *v5;
  void *aBlock;

  v4 = *(_QWORD *)(a1 + 168);
  v5 = *a3;
  if (*a3)
    v5 = _Block_copy(v5);
  aBlock = v5;
  ServiceCtrl::registerCommandHandler(v4, a2, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1BF49C928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void Service::runCommand(uint64_t a1, uint64_t a2, xpc_object_t *a3, const void **a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  xpc_object_t v12;
  const void *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  void *v18[3];

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v18[2] = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *(void **)(a1 + 8);
      v18[1] = v11;
      if (!v11)
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      v12 = *a3;
      v18[0] = v12;
      if (v12)
      {
        xpc_retain(v12);
        v13 = *a4;
        if (*a4)
        {
LABEL_6:
          v14 = _Block_copy(v13);
LABEL_9:
          v17 = v14;
          ServiceManager::runCommand((uint64_t)v11, a2, v18, &v17);
          if (v14)
            _Block_release(v14);
          xpc_release(v12);
          v18[0] = 0;
          goto LABEL_12;
        }
      }
      else
      {
        v12 = xpc_null_create();
        v18[0] = v12;
        v13 = *a4;
        if (*a4)
          goto LABEL_6;
      }
      v14 = 0;
      goto LABEL_9;
    }
  }
}

void sub_1BF49CA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  const void *v12;

  if (v12)
    _Block_release(v12);
  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ServiceManager::broadcastEvent(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 184);
  if (v4)
    dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v4, a2, a3, a4);
}

void Service::broadcastEvent(uint64_t a1, uint64_t a2, void **a3, const void **a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  void *v12;
  const object *v13;
  CFTypeRef v14;
  CFTypeID v15;
  CFTypeRef v16;
  void *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  const void *v22;
  std::string v23;
  xpc_object_t object;
  CFTypeRef cf;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v28 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      v27 = v11;
      if (!v11)
        goto LABEL_32;
      v26 = 0xAAAAAAAAAAAAAAAALL;
      v12 = *a3;
      object = v12;
      if (v12)
        xpc_retain(v12);
      else
        object = xpc_null_create();
      xpc::bridge((xpc *)&object, v13);
      v14 = cf;
      if (cf && (v15 = CFGetTypeID(cf), v15 == CFDictionaryGetTypeID()))
      {
        v26 = (unint64_t)v14;
        CFRetain(v14);
        v16 = cf;
        if (!cf)
        {
LABEL_13:
          xpc_release(object);
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v23 = *(std::string *)a2;
          v22 = v14;
          if (v14)
            CFRetain(v14);
          if (*a4)
          {
            v17 = _Block_copy(*a4);
            v21 = v17;
            v18 = *(_QWORD *)(v11 + 184);
            if (!v18)
            {
LABEL_23:
              if (v17)
                _Block_release(v17);
              if (v14)
                CFRelease(v14);
              if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v23.__r_.__value_.__l.__data_);
                if (!v14)
                  goto LABEL_32;
              }
              else if (!v14)
              {
LABEL_32:
                p_shared_owners = (unint64_t *)&v10->__shared_owners_;
                do
                  v20 = __ldaxr(p_shared_owners);
                while (__stlxr(v20 - 1, p_shared_owners));
                if (!v20)
                {
                  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                  std::__shared_weak_count::__release_weak(v10);
                }
                return;
              }
              CFRelease(v14);
              goto LABEL_32;
            }
          }
          else
          {
            v17 = 0;
            v21 = 0;
            v18 = *(_QWORD *)(v11 + 184);
            if (!v18)
              goto LABEL_23;
          }
          dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v18, (uint64_t)&v23, &v22, &v21);
          goto LABEL_23;
        }
      }
      else
      {
        v14 = 0;
        v26 = 0;
        v16 = cf;
        if (!cf)
          goto LABEL_13;
      }
      CFRelease(v16);
      goto LABEL_13;
    }
  }
}

void sub_1BF49CC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a19);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1BF49CCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, char a17)
{
  xpc_release(object);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Service::getRegisteredCommands(Service *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *((_QWORD *)this + 3), *((_QWORD *)this + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3));
}

void ServiceManager::~ServiceManager(ServiceManager *this)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  std::__shared_weak_count *v23;

  *(_QWORD *)this = off_1E7908AA8;
  v2 = (const void *)*((_QWORD *)this + 23);
  if (v2)
    _Block_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 18);
  if (v6)
  {
    v7 = *((_QWORD *)this + 19);
    v8 = (void *)*((_QWORD *)this + 18);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v6;
    operator delete(v8);
  }
  v12 = *((_QWORD *)this + 15);
  if (v12)
  {
    v13 = *((_QWORD *)this + 16);
    v14 = (void *)*((_QWORD *)this + 15);
    if (v13 != v12)
    {
      do
      {
        v15 = *(std::__shared_weak_count **)(v13 - 8);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v12;
    operator delete(v14);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)this = off_1E7908BE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v21 = *((_QWORD *)this + 12);
  if (v21)
    dispatch_release(v21);
  v22 = *((_QWORD *)this + 11);
  if (v22)
    dispatch_release(v22);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
}

void ServiceManager::ServiceManager(ServiceManager *this, const char *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _BYTE v13[16];
  dispatch_object_t object[5];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, "com.apple.telephony.abm", a2);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_2;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *(_QWORD *)algn_1ED710088;
    v11 = GetABMLogServer(void)::sLogServer;
    v12 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v5 = *(_QWORD *)algn_1ED710088;
    v11 = GetABMLogServer(void)::sLogServer;
    v12 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  object[0] = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable((_QWORD *)this + 9, a2, QOS_CLASS_DEFAULT, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v13, &v11);
  *(_QWORD *)this = off_1E7908E78;
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(_QWORD *)this = off_1E7908AA8;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 1;
}

void sub_1BF49D0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF49D120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

void ServiceManager::init(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  const void *(__cdecl *v5)(const std::__shared_weak_count *__hidden, const std::type_info *);
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count_vtbl *v13;
  unint64_t v14;
  unsigned __int8 v15;
  void (__cdecl *v16)(std::__shared_count *__hidden);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *initially_inactive;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD aBlock[5];
  void *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  _BYTE v67[16];
  uint64_t block;
  uint64_t v69;
  void (*v70)(uint64_t);
  void *v71;
  __int128 *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3
    || (v5 = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))a1[9],
        (v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v64 = 0xAAAAAAAAAAAAAAAALL;
  v65 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  v13 = v12;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7908C70;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v67, "com.apple.telephony.abm", "svc.ctrl");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block = MEMORY[0x1E0C809B0];
  v69 = 0x40000000;
  v70 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v71 = &__block_descriptor_tmp_13_2;
  v72 = &GetABMLogServer(void)::sLogServer;
  v61 = a2;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v16 = (void (__cdecl *)(std::__shared_count *__hidden))GetABMLogServer(void)::sLogServer;
    v66 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_14;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v16 = (void (__cdecl *)(std::__shared_count *__hidden))GetABMLogServer(void)::sLogServer;
    v66 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_14:
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v21 = dispatch_queue_create_with_target_V2("svc.ctrl", initially_inactive, 0);
  dispatch_set_qos_class_floor(v21, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v21);
  v13[1].__on_zero_shared_weak = 0;
  v13[2].~__shared_weak_count = 0;
  v13[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  if (v21)
  {
    dispatch_retain(v21);
    v13[2].__on_zero_shared = 0;
    dispatch_release(v21);
  }
  else
  {
    v13[2].__on_zero_shared = 0;
  }
  v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7908D80;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  v13->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1E78FB900;
  v13[1].__on_zero_shared = v16;
  v13[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v17;
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v73);
    v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7908D40;
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v73);
    v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7908D40;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v67);
  v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7908C70;
  v13[2].__get_deleter = v5;
  v13[2].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v13[3].__on_zero_shared = 0;
  v13[3].~__shared_weak_count_0 = 0;
  v13[3].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v13[3].~__shared_weak_count_0;
  v64 = (unint64_t)v13;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908C20;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v13;
  v65 = v26;
  v28 = (std::__shared_weak_count *)v13[2].~__shared_weak_count;
  if (v28)
  {
    if (v28->__shared_owners_ != -1)
      goto LABEL_41;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    v30 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v13[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    v13[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
    std::__shared_weak_count::__release_weak(v28);
  }
  else
  {
    do
      v32 = __ldxr(v27);
    while (__stxr(v32 + 1, v27));
    v33 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v13[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    v13[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  }
  do
    v35 = __ldaxr(v27);
  while (__stlxr(v35 - 1, v27));
  if (v35)
  {
LABEL_41:
    v36 = (_QWORD *)v64;
    if (!*(_QWORD *)(v64 + 56))
      goto LABEL_55;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  v36 = (_QWORD *)v64;
  if (!*(_QWORD *)(v64 + 56))
    goto LABEL_55;
LABEL_42:
  v37 = (std::__shared_weak_count *)v36[10];
  if (!v37 || (v38 = v36[9], (v39 = std::__shared_weak_count::lock(v37)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v40 = v39;
  block = v38;
  v69 = (uint64_t)v39;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v36 + 1));
  v73 = v38;
  v74 = v40;
  block = 0;
  v69 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v41 = v74;
  if (v74)
  {
    v42 = (unint64_t *)&v74->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)v69;
  if (v69)
  {
    v45 = (unint64_t *)(v69 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v36 = (_QWORD *)v64;
LABEL_55:
  std::__shared_weak_count::__release_weak(v7);
  v47 = v65;
  v64 = 0;
  v65 = 0;
  v48 = (std::__shared_weak_count *)a1[22];
  a1[21] = v36;
  a1[22] = v47;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (!v65)
    goto LABEL_64;
  v51 = &v65->__shared_owners_;
  do
    v52 = __ldaxr((unint64_t *)v51);
  while (__stlxr(v52 - 1, (unint64_t *)v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    std::__shared_weak_count::__release_weak(v7);
    v53 = *v61;
    if (!*v61)
      return;
  }
  else
  {
LABEL_64:
    std::__shared_weak_count::__release_weak(v7);
    v53 = *v61;
    if (!*v61)
      return;
  }
  v54 = v61[1];
  if (v54)
  {
    v55 = (unint64_t *)(v54 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = (std::__shared_weak_count *)a1[14];
  a1[13] = v53;
  a1[14] = v54;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = a1[13];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN14ServiceManager4initENSt3__110shared_ptrI14PowerInterfaceEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_33;
  aBlock[4] = a1;
  v63 = _Block_copy(aBlock);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v60 + 16))(v60, &v63);
  if (v63)
    _Block_release(v63);
}

void sub_1BF49D764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void sub_1BF49D77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v9 - 120);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::__release_weak(v8);
  std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x1BF49D83CLL);
}

void sub_1BF49D7A0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl*)#1}::operator() const(ServiceCtrl*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF49D7C0()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF49D82CLL);
}

void sub_1BF49D7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  std::__shared_weak_count *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v13 - 120));
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v12);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  std::__shared_weak_count::__release_weak(v10);
  operator delete(v11);
  JUMPOUT(0x1BF49D834);
}

void sub_1BF49D818()
{
  JUMPOUT(0x1BF49D834);
}

void ___ZN14ServiceManager4initENSt3__110shared_ptrI14PowerInterfaceEE_block_invoke(uint64_t a1, int a2, NSObject **a3)
{
  _QWORD *v3;
  NSObject *v4;
  dispatch_object_t v5;
  dispatch_object_t v6;

  v3 = *(_QWORD **)(a1 + 32);
  if (a2 == 1)
  {
    v4 = *a3;
    v5 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
      ServiceManager::wake(v3, &v5);
      goto LABEL_7;
    }
    ServiceManager::wake(v3, &v5);
  }
  else if (!a2)
  {
    v4 = *a3;
    v6 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
      ServiceManager::sleep(v3, &v6);
LABEL_7:
      dispatch_group_leave(v4);
      dispatch_release(v4);
      return;
    }
    ServiceManager::sleep(v3, &v6);
  }
}

void ServiceManager::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::sleep(dispatch::group_session)::$_0>(ServiceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ServiceManager::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::wake(dispatch::group_session)::$_0>(ServiceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ServiceManager::createPowerAssertion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 104);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v4 + 24))(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF49DB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServiceManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 104);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v2 + 32))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF49DC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServiceCtrl::registerCommandHandler(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  std::string __p;
  void *aBlock;
  _QWORD block[6];

  v8 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v5 = *a3;
    if (!*a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v5 = *a3;
  if (*a3)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_22registerCommandHandlerERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvN3xpc4dictENSE_IU13block_pointerFviSG_EEEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSO__block_invoke;
  block[3] = &__block_descriptor_tmp_7_7;
  block[4] = a1 + 72;
  block[5] = &v8;
  v6 = *(NSObject **)(a1 + 88);
  if (!*(_QWORD *)(a1 + 96))
  {
    dispatch_sync(v6, block);
    v7 = aBlock;
    if (!aBlock)
      goto LABEL_11;
    goto LABEL_10;
  }
  dispatch_async_and_wait(v6, block);
  v7 = aBlock;
  if (aBlock)
LABEL_10:
    _Block_release(v7);
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ServiceManager::registerEventDispatcher(uint64_t a1, void **a2)
{
  void *v3;
  const void *v4;

  v3 = *a2;
  if (*a2)
    v3 = _Block_copy(v3);
  v4 = *(const void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v3;
  if (v4)
    _Block_release(v4);
}

void ServiceManager::initializeGlobalServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = dispatch_group_create();
  v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v6 || (v7 = *((_QWORD *)this + 9), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *v10 = this;
  v10[1] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = *((_QWORD *)this + 11);
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeGlobalServices(void)::$_0>(ServiceManager::initializeGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::initializeGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ServiceManager::shutdownGlobalServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = dispatch_group_create();
  v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v6 || (v7 = *((_QWORD *)this + 9), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *v10 = this;
  v10[1] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = *((_QWORD *)this + 11);
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownGlobalServices(void)::$_0>(ServiceManager::shutdownGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::shutdownGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ServiceManager::initializeDynamicServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  dispatch_object_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  void *__p;
  __int128 v11;
  dispatch_object_t object;

  v4 = dispatch_group_create();
  *a2 = v4;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v5 = *((_QWORD *)this + 13);
  __p = operator new(0x30uLL);
  v11 = xmmword_1BF53F3E0;
  strcpy((char *)__p, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v5 + 24))(&object, v5, &__p, 0);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  v6 = object;
  if (object)
    dispatch_retain(object);
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v7 = object;
  v8 = *((_QWORD *)this + 11);
  v9 = operator new(0x18uLL);
  *v9 = this;
  v9[1] = v6;
  v9[2] = v4;
  dispatch_group_notify_f(v7, v8, v9, (dispatch_function_t)dispatch::detail::group_notify<ServiceManager::initializeDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::initializeDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (object)
    dispatch_release(object);
}

void sub_1BF49E0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, dispatch_object_t object)
{
  NSObject *v19;

  ServiceManager::initializeDynamicServices(void)::$_0::~$_0((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  if (v19)
    dispatch_release(v19);
  _Unwind_Resume(a1);
}

uint64_t ServiceManager::initializeDynamicServices(void)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(NSObject **)(a1 + 8);
  if (v4)
    dispatch_release(v4);
  return a1;
}

void ServiceManager::shutdownDynamicServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  dispatch_object_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  void *__p;
  __int128 v11;
  dispatch_object_t object;

  v4 = dispatch_group_create();
  *a2 = v4;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v5 = *((_QWORD *)this + 13);
  __p = operator new(0x30uLL);
  v11 = xmmword_1BF53F3E0;
  strcpy((char *)__p, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v5 + 24))(&object, v5, &__p, 0);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  v6 = object;
  if (object)
    dispatch_retain(object);
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v7 = object;
  v8 = *((_QWORD *)this + 11);
  v9 = operator new(0x18uLL);
  *v9 = this;
  v9[1] = v6;
  v9[2] = v4;
  dispatch_group_notify_f(v7, v8, v9, (dispatch_function_t)dispatch::detail::group_notify<ServiceManager::shutdownDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::shutdownDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (object)
    dispatch_release(object);
}

void sub_1BF49E254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, dispatch_object_t object)
{
  NSObject *v19;

  ServiceManager::initializeDynamicServices(void)::$_0::~$_0((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  if (v19)
    dispatch_release(v19);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (std::string *)&v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1BF49E384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1BF49E398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7908BE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7908BE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl*)#1}::operator() const(ServiceCtrl*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl*)#1}::operator() const(ServiceCtrl*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ServiceCtrl::~ServiceCtrl(char **this)
{
  void *v1;

  ServiceCtrl::~ServiceCtrl(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = (char *)off_1E7908C70;
  std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(this[16]);
  v2 = (std::__shared_weak_count *)this[14];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *this = (char *)off_1E7908D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v3 = this[12];
  if (v3)
    dispatch_release(v3);
  v4 = this[11];
  if (v4)
    dispatch_release(v4);
  v5 = (std::__shared_weak_count *)this[10];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "svc.ctrl");
}

uint64_t ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::SharedLoggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7908D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7908D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7908D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7908D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(char *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (const void *)*((_QWORD *)a1 + 7);
    if (v2)
      _Block_release(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_22registerCommandHandlerERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvN3xpc4dictENSE_IU13block_pointerFviSG_EEEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSO__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  const void *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  const void *v26;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = (const void *)v1[4];
  if (v3)
  {
    v4 = _Block_copy(v3);
    v5 = v1 + 1;
    v7 = (_QWORD *)(v2 + 128);
    v6 = *(_QWORD **)(v2 + 128);
    if (v6)
    {
LABEL_3:
      v8 = *((char *)v1 + 31);
      if (v8 >= 0)
        v9 = v5;
      else
        v9 = (const void *)v1[1];
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v1 + 31);
      else
        v10 = v1[2];
      while (1)
      {
        v11 = v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = v12;
        else
          v16 = v13;
        if (v15 >= 0)
          v17 = *((unsigned __int8 *)v12 + 23);
        else
          v17 = v12[1];
        if (v17 >= v10)
          v18 = v10;
        else
          v18 = v17;
        v19 = memcmp(v9, v16, v18);
        if (v19)
        {
          if (v19 < 0)
            goto LABEL_9;
LABEL_23:
          v20 = memcmp(v16, v9, v18);
          if (v20)
          {
            if ((v20 & 0x80000000) == 0)
              goto LABEL_38;
          }
          else if (v17 >= v10)
          {
LABEL_38:
            v26 = (const void *)v11[7];
            v11[7] = v4;
            if (v26)
              goto LABEL_39;
            return;
          }
          v6 = (_QWORD *)v11[1];
          if (!v6)
          {
            v7 = v11 + 1;
            goto LABEL_31;
          }
        }
        else
        {
          if (v10 >= v17)
            goto LABEL_23;
LABEL_9:
          v6 = (_QWORD *)*v11;
          v7 = v11;
          if (!*v11)
            goto LABEL_31;
        }
      }
    }
  }
  else
  {
    v4 = 0;
    v5 = v1 + 1;
    v7 = (_QWORD *)(v2 + 128);
    v6 = *(_QWORD **)(v2 + 128);
    if (v6)
      goto LABEL_3;
  }
  v11 = v7;
LABEL_31:
  v21 = operator new(0x40uLL);
  v22 = (std::string *)(v21 + 4);
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    v23 = *(_OWORD *)v5;
    v21[6] = v5[2];
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  v21[7] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v24 = **(_QWORD **)(v2 + 120);
  v25 = v21;
  if (v24)
  {
    *(_QWORD *)(v2 + 120) = v24;
    v25 = (uint64_t *)*v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 128), v25);
  ++*(_QWORD *)(v2 + 136);
  v26 = (const void *)v21[7];
  v21[7] = v4;
  if (v26)
LABEL_39:
    _Block_release(v26);
}

void sub_1BF49E96C(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    _Block_release(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v8 + 3) = v9;
  *((_QWORD *)v8 + 4) = v10;
  v11 = xpc_null_create();
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v8;
  v15[1] = v5;
  v15[2] = v7;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_10(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3;

  v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

void ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_12(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;

  v9 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(_QWORD *)(v4 + 40);
  v5 = (uint64_t *)(v4 + 40);
  if (v6)
  {
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v5, &v9, a3);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(const void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = 0;
    if (v8)
      _Block_release(v8);
  }
}

uint64_t *std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 40);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7908BE0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF49EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7908BE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7908BE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::sleep(dispatch::group_session)::$_0>(ServiceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject **v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  size_t v18;
  __int128 *p_buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  dispatch_time_t v26;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::string *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  std::string *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::string *v40;
  std::string *v41;
  NSObject *v42;
  unint64_t v43;
  NSObject *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::string *p_p;
  std::__shared_weak_count *v51;
  uint64_t *v52;
  uint64_t **v53;
  std::string __p;
  dispatch_group_t group;
  uint8_t v56[4];
  unint64_t v57;
  __int16 v58;
  std::string *v59;
  __int128 v60;
  unint64_t v61;
  __int128 buf;
  unint64_t v63;
  uint64_t v64;

  v1 = a1;
  v64 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = atomic_load((unsigned __int8 *)(v3 + 192));
  v5 = *(NSObject **)(v3 + 40);
  if ((v4 & 1) == 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (uint64_t)(*(_QWORD *)(v3 + 152) - *(_QWORD *)(v3 + 144)) >> 4;
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Request %zd services to sleep", (uint8_t *)&buf, 0xCu);
    }
    v52 = v2;
    v53 = v1;
    v7 = dispatch_group_create();
    v8 = (std::__shared_weak_count *)operator new(0x38uLL);
    v9 = &v8->__vftable;
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908EB8;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v11 = (NSObject **)&v8[1];
    v51 = v8;
    if (v7)
    {
      dispatch_retain(v7);
      v9[4] = 0;
      v9[5] = 0;
      v9[6] = 0;
      dispatch_release(v7);
      v12 = *(_QWORD **)(v3 + 144);
      v13 = *(_QWORD **)(v3 + 152);
      if (v12 != v13)
        goto LABEL_12;
LABEL_33:
      v24 = *v11;
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
      v26 = dispatch_time(0, 1000000000 * v25);
      if (dispatch_group_wait(v24, v26))
      {
        v60 = 0uLL;
        v61 = 0;
        shared_owners = (uint64_t *)v51[1].__shared_owners_;
        shared_weak_owners = (uint64_t *)v51[1].__shared_weak_owners_;
        if (shared_owners == shared_weak_owners)
        {
          v29 = 0;
        }
        else
        {
          do
          {
            v30 = (std::__shared_weak_count *)shared_owners[1];
            if (v30)
            {
              v31 = std::__shared_weak_count::lock(v30);
              if (v31)
              {
                v32 = v31;
                v33 = *shared_owners;
                if (*shared_owners)
                {
                  v34 = (_OWORD *)*((_QWORD *)&v60 + 1);
                  if (*((_QWORD *)&v60 + 1) >= v61)
                  {
                    v36 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v60, v33);
                  }
                  else
                  {
                    if (*(char *)(v33 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(*((std::string **)&v60 + 1), *(const std::string::value_type **)v33, *(_QWORD *)(v33 + 8));
                    }
                    else
                    {
                      v35 = *(_OWORD *)v33;
                      *(_QWORD *)(*((_QWORD *)&v60 + 1) + 16) = *(_QWORD *)(v33 + 16);
                      *v34 = v35;
                    }
                    v36 = (std::string *)((char *)v34 + 24);
                  }
                  *((_QWORD *)&v60 + 1) = v36;
                }
                v37 = (unint64_t *)&v32->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
            }
            shared_owners += 2;
          }
          while (shared_owners != shared_weak_owners);
          v29 = (std::string *)v60;
        }
        v39 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v49 = *((_QWORD *)&v60 + 1);
          ctu::join<std::__wrap_iter<std::string *>>(&__p, v29, *((__int128 **)&v60 + 1));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v56 = 134218242;
          v57 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v29) >> 3);
          v58 = 2080;
          v59 = p_p;
          _os_log_error_impl(&dword_1BF335000, v39, OS_LOG_TYPE_ERROR, "Sleep TIMEOUT: %zd clients failed to complete sleep request: %s", v56, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v29 = (std::string *)v60;
          if (!(_QWORD)v60)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (v29)
        {
LABEL_54:
          v40 = (std::string *)*((_QWORD *)&v60 + 1);
          v41 = v29;
          if (*((std::string **)&v60 + 1) != v29)
          {
            do
            {
              if (SHIBYTE(v40[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v40[-1].__r_.__value_.__l.__data_);
              --v40;
            }
            while (v40 != v29);
            v41 = (std::string *)v60;
          }
          *((_QWORD *)&v60 + 1) = v29;
          operator delete(v41);
        }
      }
LABEL_61:
      v42 = *(NSObject **)(v3 + 40);
      v2 = v52;
      v1 = v53;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v60) = 0;
        _os_log_impl(&dword_1BF335000, v42, OS_LOG_TYPE_DEFAULT, "#I All services acknowledged for sleep request", (uint8_t *)&v60, 2u);
      }
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      goto LABEL_66;
    }
    v8[1].__shared_owners_ = 0;
    v8[1].__shared_weak_owners_ = 0;
    v8[2].__vftable = 0;
    v12 = *(_QWORD **)(v3 + 144);
    v13 = *(_QWORD **)(v3 + 152);
    if (v12 == v13)
      goto LABEL_33;
    while (1)
    {
LABEL_12:
      v14 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
        LODWORD(v60) = 136315138;
        *(_QWORD *)((char *)&v60 + 4) = v15;
        _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Requesting '%s' to sleep", (uint8_t *)&v60, 0xCu);
      }
      *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
      v16 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
      v17 = strlen(v16);
      if (v17 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v18 = v17;
      if (v17 >= 0x17)
        break;
      HIBYTE(v63) = v17;
      p_buf = &buf;
      if (v17)
        goto LABEL_21;
LABEL_22:
      *((_BYTE *)p_buf + v18) = 0;
      ctu::TrackedGroup::fork((NSObject **)&v60, (uint64_t)v11, (uint64_t)&buf);
      if (SHIBYTE(v63) < 0)
      {
        operator delete((void *)buf);
        v22 = *v12;
        v23 = v60;
        group = (dispatch_group_t)v60;
        if ((_QWORD)v60)
        {
LABEL_26:
          dispatch_retain(v23);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v22 = *v12;
        v23 = v60;
        group = (dispatch_group_t)v60;
        if ((_QWORD)v60)
          goto LABEL_26;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v22 + 48))(v22, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v23)
      {
        dispatch_group_leave(v23);
        dispatch_release(v23);
      }
      v12 += 2;
      if (v12 == v13)
        goto LABEL_33;
    }
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_buf = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&buf + 1) = v18;
    v63 = v21 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_21:
    memmove(p_buf, v16, v18);
    goto LABEL_22;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEBUG, "#D Server is down; ignoring sleep request",
      (uint8_t *)&buf,
      2u);
  }
LABEL_66:
  v44 = v2[1];
  if (v44)
  {
    dispatch_group_leave(v44);
    v45 = v2[1];
    if (v45)
      dispatch_release(v45);
  }
  operator delete(v2);
  v46 = (std::__shared_weak_count *)v1[2];
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  operator delete(v1);
}

void sub_1BF49F2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, _QWORD *a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_group_t group, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **__p,uint64_t a24)
{
  unint64_t *v24;
  std::__shared_weak_count *v25;
  void **v26;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void **v30;
  void **v31;
  unint64_t v32;
  NSObject *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (__p)
  {
    v30 = v26;
    v31 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  do
    v32 = __ldaxr(v24);
  while (__stlxr(v32 - 1, v24));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  v33 = a11[1];
  if (v33)
  {
    dispatch_group_leave(v33);
    v34 = a11[1];
    if (v34)
      dispatch_release(v34);
  }
  operator delete(a11);
  v35 = (std::__shared_weak_count *)a12[2];
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void ctu::TrackedGroup::fork(NSObject **a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  void *v9;
  void *v10;
  void *object[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)object = 0u;
  v12 = 0u;
  v13 = 0u;
  ctu::TrackedGroup::fork(a1, a2, (uint64_t)__p, (dispatch_group_t *)object);
  if (*((_QWORD *)&v13 + 1) && object[0])
  {
    v9 = object[0];
    v10 = object[1];
    (*(void (**)(void))(**((_QWORD **)&v13 + 1) + 48))();
  }
  if (object[1])
    os_release(object[1]);
  v3 = &v12;
  v4 = (__int128 *)*((_QWORD *)&v13 + 1);
  object[1] = 0;
  *((_QWORD *)&v13 + 1) = 0;
  if (v4 == &v12)
  {
    v5 = 4;
    v4 = &v12;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
    object[0] = 0;
    if (*((__int128 **)&v13 + 1) == &v12)
    {
      v6 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v13 + 1))
        goto LABEL_15;
      v6 = 5;
      v3 = (__int128 *)*((_QWORD *)&v13 + 1);
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v3 + 8 * v6))(v3);
LABEL_15:
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return;
    goto LABEL_16;
  }
  if (v4)
  {
    v5 = 5;
    goto LABEL_10;
  }
  object[0] = 0;
  if (SHIBYTE(v8) < 0)
LABEL_16:
    operator delete(__p[0]);
}

void sub_1BF49F5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;

  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v6 = a1[3];
  if (v6)
    dispatch_release(v6);
}

void ctu::TrackedGroup::fork(NSObject **a1, uint64_t a2, uint64_t a3, dispatch_group_t *a4)
{
  NSObject *v8;
  NSObject *v9;
  char *v10;
  unint64_t *v11;
  NSObject *v12;
  NSObject *global_queue;
  NSObject *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *p_isa;
  dispatch_group_t v18;
  dispatch_group_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  __int128 v44;
  char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  dispatch_group_t group[2];
  dispatch_group_t object;
  _QWORD v53[3];
  _QWORD *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = dispatch_group_create();
  v9 = v8;
  *a1 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
    dispatch_release(v9);
  }
  v10 = (char *)operator new(0x30uLL);
  *((_QWORD *)v10 + 1) = 0;
  v11 = (unint64_t *)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = off_1E7908F08;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)&v49 = v10 + 24;
  *((_QWORD *)&v49 + 1) = v10;
  v12 = *(NSObject **)a2;
  if (*(_QWORD *)a2)
  {
    dispatch_retain(*(dispatch_object_t *)a2);
    dispatch_group_enter(v12);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v14 = global_queue;
  if (global_queue)
    dispatch_retain(global_queue);
  *(_QWORD *)&v50 = v10 + 24;
  *((_QWORD *)&v50 + 1) = v10;
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  group[0] = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(v12);
  }
  group[1] = *a4;
  object = a4[1];
  v16 = v53;
  p_isa = a4 + 2;
  v18 = a4[5];
  if (v18)
  {
    if (v18 == (dispatch_group_t)p_isa)
    {
      v54 = v53;
      (*(void (**)(dispatch_group_t *, _QWORD *))(*p_isa + 24))(a4 + 2, v53);
    }
    else
    {
      v54 = a4[5];
      a4[5] = 0;
    }
  }
  else
  {
    v54 = 0;
  }
  *a4 = 0;
  a4[1] = 0;
  v19 = a4[5];
  a4[5] = 0;
  if (v19 == (dispatch_group_t)p_isa)
  {
    v20 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_21;
    v20 = 5;
    p_isa = &v19->isa;
  }
  (*(void (**)(_QWORD *))(*p_isa + 8 * v20))(p_isa);
LABEL_21:
  v21 = (char *)operator new(0x48uLL);
  v22 = v21;
  *(_OWORD *)v21 = v50;
  *((_OWORD *)v21 + 1) = *(_OWORD *)group;
  v23 = v54;
  *((_QWORD *)v21 + 4) = object;
  if (v23)
  {
    if (v23 == v53)
    {
      *((_QWORD *)v21 + 8) = v21 + 40;
      (*(void (**)(_QWORD *))(v53[0] + 24))(v53);
    }
    else
    {
      *((_QWORD *)v21 + 8) = v23;
      v54 = 0;
    }
  }
  else
  {
    *((_QWORD *)v21 + 8) = 0;
  }
  v24 = v54;
  v54 = 0;
  if (v24 == v53)
  {
    v25 = 4;
    v24 = v53;
  }
  else
  {
    if (!v24)
      goto LABEL_31;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_31:
  dispatch_group_notify_f(v9, v14, v22, (dispatch_function_t)dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  v26 = v54;
  v54 = 0;
  if (v26 == v53)
  {
    v27 = 4;
    v26 = v53;
  }
  else
  {
    if (!v26)
      goto LABEL_40;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
  if (v54 == v53)
  {
    v28 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_40;
    v28 = 5;
    v16 = v54;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v28))(v16);
LABEL_40:
  if (v14)
    dispatch_release(v14);
  v30 = *(char **)(a2 + 16);
  v29 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)v30 >= v29)
  {
    v34 = *(char **)(a2 + 8);
    v35 = (v30 - v34) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v37 = v29 - (_QWORD)v34;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v39 = (char *)operator new(16 * v38);
    v40 = &v39[16 * v35];
    *(_OWORD *)v40 = v49;
    if (*((_QWORD *)&v49 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 16);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      v34 = *(char **)(a2 + 8);
      v30 = *(char **)(a2 + 16);
    }
    v43 = &v39[16 * v38];
    v33 = v40 + 16;
    if (v30 == v34)
    {
      *(_QWORD *)(a2 + 8) = v40;
      *(_QWORD *)(a2 + 16) = v33;
      *(_QWORD *)(a2 + 24) = v43;
    }
    else
    {
      do
      {
        v44 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v40 - 1) = v44;
        v40 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v34);
      v34 = *(char **)(a2 + 8);
      v45 = *(char **)(a2 + 16);
      *(_QWORD *)(a2 + 8) = v40;
      *(_QWORD *)(a2 + 16) = v33;
      *(_QWORD *)(a2 + 24) = v43;
      while (v45 != v34)
      {
        v46 = (std::__shared_weak_count *)*((_QWORD *)v45 - 1);
        if (v46)
          std::__shared_weak_count::__release_weak(v46);
        v45 -= 16;
      }
    }
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_OWORD *)v30 = v49;
    if (*((_QWORD *)&v49 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 16);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = v30 + 16;
  }
  *(_QWORD *)(a2 + 16) = v33;
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  if (*((_QWORD *)&v49 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
    }
  }
}

void sub_1BF49FBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}::~signpost_interval(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
  v2 = a1[2];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = a1[2];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a1)
  {
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
    v2 = a1[2];
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = a1[2];
      if (v3)
        dispatch_release(v3);
    }
    v4 = (std::__shared_weak_count *)a1[1];
    if (!v4)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a1);
    }
    else
    {
LABEL_9:
      operator delete(a1);
    }
  }
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  ctu::os::signpost_interval *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v10 = *(_QWORD *)this;
    v11 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v11, &v10);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
    os_release(v4);
  v5 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 1) = 0;
  v6 = (ctu::os::signpost_interval *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6 == (ctu::os::signpost_interval *)((char *)this + 16))
  {
    v7 = 4;
    v6 = (ctu::os::signpost_interval *)((char *)this + 16);
  }
  else
  {
    if (!v6)
    {
      *(_QWORD *)this = 0;
      return;
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  v8 = (_QWORD *)*((_QWORD *)this + 5);
  *(_QWORD *)this = 0;
  if (v8 == v5)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
    v5 = v8;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
}

std::string *ctu::join<std::__wrap_iter<std::string *>>(std::string *__dst, std::string *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  std::string *j;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *i;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  std::string::size_type v16;
  std::string::value_type __s[8];
  std::string::size_type v18;
  uint64_t v19;

  __dst->__r_.__value_.__r.__words[0] = 0;
  __dst->__r_.__value_.__l.__size_ = 0;
  __dst->__r_.__value_.__r.__words[2] = 0;
  if (a2 != (std::string *)a3)
  {
    v5 = __dst;
    if (a2 != __dst)
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        __dst = (std::string *)std::string::__assign_no_alias<true>(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        v6 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v6;
      }
    }
    if (",")
    {
      for (i = a2 + 1; i != (std::string *)a3; ++i)
      {
        HIBYTE(v19) = 1;
        memmove(__s, ",", 1uLL);
        __s[1] = 0;
        if (v19 >= 0)
          v15 = __s;
        else
          v15 = *(std::string::value_type **)__s;
        if (v19 >= 0)
          v16 = HIBYTE(v19);
        else
          v16 = v18;
        std::string::append(v5, v15, v16);
        if (SHIBYTE(v19) < 0)
          operator delete(*(void **)__s);
        v12 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
        if (v12 >= 0)
          v13 = (const std::string::value_type *)i;
        else
          v13 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
        if (v12 >= 0)
          size = HIBYTE(i->__r_.__value_.__r.__words[2]);
        else
          size = i->__r_.__value_.__l.__size_;
        __dst = std::string::append(v5, v13, size);
      }
    }
    else
    {
      for (j = a2 + 1; j != (std::string *)a3; ++j)
      {
        *(_QWORD *)__s = 0;
        v18 = 0;
        v19 = 0;
        std::string::append(v5, __s, 0);
        if (SHIBYTE(v19) < 0)
          operator delete(*(void **)__s);
        v8 = SHIBYTE(j->__r_.__value_.__r.__words[2]);
        if (v8 >= 0)
          v9 = (const std::string::value_type *)j;
        else
          v9 = (const std::string::value_type *)j->__r_.__value_.__r.__words[0];
        if (v8 >= 0)
          v10 = HIBYTE(j->__r_.__value_.__r.__words[2]);
        else
          v10 = j->__r_.__value_.__l.__size_;
        __dst = std::string::append(v5, v9, v10);
      }
    }
  }
  return __dst;
}

void sub_1BF4A0154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
  {
    operator delete(*(void **)v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::wake(dispatch::group_session)::$_0>(ServiceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject **v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  size_t v18;
  __int128 *p_buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  dispatch_time_t v26;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::string *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  std::string *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::string *v40;
  std::string *v41;
  NSObject *v42;
  unint64_t v43;
  NSObject *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::string *p_p;
  std::__shared_weak_count *v51;
  uint64_t *v52;
  uint64_t **v53;
  std::string __p;
  dispatch_group_t group;
  uint8_t v56[4];
  unint64_t v57;
  __int16 v58;
  std::string *v59;
  __int128 v60;
  unint64_t v61;
  __int128 buf;
  unint64_t v63;
  uint64_t v64;

  v1 = a1;
  v64 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = atomic_load((unsigned __int8 *)(v3 + 192));
  v5 = *(NSObject **)(v3 + 40);
  if ((v4 & 1) == 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (uint64_t)(*(_QWORD *)(v3 + 152) - *(_QWORD *)(v3 + 144)) >> 4;
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Request %zd services to wake", (uint8_t *)&buf, 0xCu);
    }
    v52 = v2;
    v53 = v1;
    v7 = dispatch_group_create();
    v8 = (std::__shared_weak_count *)operator new(0x38uLL);
    v9 = &v8->__vftable;
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908EB8;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v11 = (NSObject **)&v8[1];
    v51 = v8;
    if (v7)
    {
      dispatch_retain(v7);
      v9[4] = 0;
      v9[5] = 0;
      v9[6] = 0;
      dispatch_release(v7);
      v12 = *(_QWORD **)(v3 + 144);
      v13 = *(_QWORD **)(v3 + 152);
      if (v12 != v13)
        goto LABEL_12;
LABEL_33:
      v24 = *v11;
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
      v26 = dispatch_time(0, 2000000000 * v25);
      if (dispatch_group_wait(v24, v26))
      {
        v60 = 0uLL;
        v61 = 0;
        shared_owners = (uint64_t *)v51[1].__shared_owners_;
        shared_weak_owners = (uint64_t *)v51[1].__shared_weak_owners_;
        if (shared_owners == shared_weak_owners)
        {
          v29 = 0;
        }
        else
        {
          do
          {
            v30 = (std::__shared_weak_count *)shared_owners[1];
            if (v30)
            {
              v31 = std::__shared_weak_count::lock(v30);
              if (v31)
              {
                v32 = v31;
                v33 = *shared_owners;
                if (*shared_owners)
                {
                  v34 = (_OWORD *)*((_QWORD *)&v60 + 1);
                  if (*((_QWORD *)&v60 + 1) >= v61)
                  {
                    v36 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v60, v33);
                  }
                  else
                  {
                    if (*(char *)(v33 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(*((std::string **)&v60 + 1), *(const std::string::value_type **)v33, *(_QWORD *)(v33 + 8));
                    }
                    else
                    {
                      v35 = *(_OWORD *)v33;
                      *(_QWORD *)(*((_QWORD *)&v60 + 1) + 16) = *(_QWORD *)(v33 + 16);
                      *v34 = v35;
                    }
                    v36 = (std::string *)((char *)v34 + 24);
                  }
                  *((_QWORD *)&v60 + 1) = v36;
                }
                v37 = (unint64_t *)&v32->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
            }
            shared_owners += 2;
          }
          while (shared_owners != shared_weak_owners);
          v29 = (std::string *)v60;
        }
        v39 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v49 = *((_QWORD *)&v60 + 1);
          ctu::join<std::__wrap_iter<std::string *>>(&__p, v29, *((__int128 **)&v60 + 1));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v56 = 134218242;
          v57 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v29) >> 3);
          v58 = 2080;
          v59 = p_p;
          _os_log_error_impl(&dword_1BF335000, v39, OS_LOG_TYPE_ERROR, "Wake TIMEOUT: %zd clients failed to complete wake request: %s", v56, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v29 = (std::string *)v60;
          if (!(_QWORD)v60)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (v29)
        {
LABEL_54:
          v40 = (std::string *)*((_QWORD *)&v60 + 1);
          v41 = v29;
          if (*((std::string **)&v60 + 1) != v29)
          {
            do
            {
              if (SHIBYTE(v40[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v40[-1].__r_.__value_.__l.__data_);
              --v40;
            }
            while (v40 != v29);
            v41 = (std::string *)v60;
          }
          *((_QWORD *)&v60 + 1) = v29;
          operator delete(v41);
        }
      }
LABEL_61:
      v42 = *(NSObject **)(v3 + 40);
      v2 = v52;
      v1 = v53;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v60) = 0;
        _os_log_impl(&dword_1BF335000, v42, OS_LOG_TYPE_DEFAULT, "#I All services acknowledged for wake request", (uint8_t *)&v60, 2u);
      }
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      goto LABEL_66;
    }
    v8[1].__shared_owners_ = 0;
    v8[1].__shared_weak_owners_ = 0;
    v8[2].__vftable = 0;
    v12 = *(_QWORD **)(v3 + 144);
    v13 = *(_QWORD **)(v3 + 152);
    if (v12 == v13)
      goto LABEL_33;
    while (1)
    {
LABEL_12:
      v14 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
        LODWORD(v60) = 136315138;
        *(_QWORD *)((char *)&v60 + 4) = v15;
        _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Requesting '%s' to wake", (uint8_t *)&v60, 0xCu);
      }
      *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
      v16 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
      v17 = strlen(v16);
      if (v17 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v18 = v17;
      if (v17 >= 0x17)
        break;
      HIBYTE(v63) = v17;
      p_buf = &buf;
      if (v17)
        goto LABEL_21;
LABEL_22:
      *((_BYTE *)p_buf + v18) = 0;
      ctu::TrackedGroup::fork((NSObject **)&v60, (uint64_t)v11, (uint64_t)&buf);
      if (SHIBYTE(v63) < 0)
      {
        operator delete((void *)buf);
        v22 = *v12;
        v23 = v60;
        group = (dispatch_group_t)v60;
        if ((_QWORD)v60)
        {
LABEL_26:
          dispatch_retain(v23);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v22 = *v12;
        v23 = v60;
        group = (dispatch_group_t)v60;
        if ((_QWORD)v60)
          goto LABEL_26;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v22 + 56))(v22, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v23)
      {
        dispatch_group_leave(v23);
        dispatch_release(v23);
      }
      v12 += 2;
      if (v12 == v13)
        goto LABEL_33;
    }
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_buf = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&buf + 1) = v18;
    v63 = v21 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_21:
    memmove(p_buf, v16, v18);
    goto LABEL_22;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEBUG, "#D Server is down; ignoring wake request",
      (uint8_t *)&buf,
      2u);
  }
LABEL_66:
  v44 = v2[1];
  if (v44)
  {
    dispatch_group_leave(v44);
    v45 = v2[1];
    if (v45)
      dispatch_release(v45);
  }
  operator delete(v2);
  v46 = (std::__shared_weak_count *)v1[2];
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  operator delete(v1);
}

void sub_1BF4A07B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, _QWORD *a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_group_t group, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **__p,uint64_t a24)
{
  unint64_t *v24;
  std::__shared_weak_count *v25;
  void **v26;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void **v30;
  void **v31;
  unint64_t v32;
  NSObject *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (__p)
  {
    v30 = v26;
    v31 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  do
    v32 = __ldaxr(v24);
  while (__stlxr(v32 - 1, v24));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  v33 = a11[1];
  if (v33)
  {
    dispatch_group_leave(v33);
    v34 = a11[1];
    if (v34)
      dispatch_release(v34);
  }
  operator delete(a11);
  v35 = (std::__shared_weak_count *)a12[2];
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeGlobalServices(void)::$_0>(ServiceManager::initializeGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::initializeGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v6;
  NSObject **v7;
  _QWORD *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  dispatch_time_t v22;
  std::__shared_weak_count *v23;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  __int128 *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  std::ios_base *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  std::string *p_p;
  size_t v45;
  NSObject *v46;
  __int128 *v47;
  std::string *v48;
  void *v49;
  NSObject *v50;
  unint64_t v51;
  NSObject *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string::size_type v57;
  std::string *v58;
  uint64_t v59;
  const void **v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  _QWORD *v65;
  std::__shared_weak_count *v67;
  _QWORD *v68;
  std::string __p;
  void *v70;
  std::string *v71;
  unint64_t v72;
  dispatch_group_t group;
  void *__dst[2];
  unint64_t v75;
  uint8_t v76[4];
  std::string *v77;
  _BYTE buf[24];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v65 = (_QWORD *)*a1;
  v68 = *(_QWORD **)*a1;
  v1 = v68[5];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = (uint64_t)(v68[16] - v68[15]) >> 4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v2;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing %zd global services", buf, 0xCu);
  }
  v3 = dispatch_group_create();
  v4 = operator new(0x38uLL);
  v5 = v4;
  v4[1] = 0;
  v6 = v4 + 1;
  v4[2] = 0;
  *v4 = off_1E7908EB8;
  v4[3] = v3;
  v7 = (NSObject **)(v4 + 3);
  v67 = (std::__shared_weak_count *)v4;
  if (!v3)
  {
    v4[4] = 0;
    v4[5] = 0;
    v4[6] = 0;
    v8 = (_QWORD *)v68[15];
    v9 = (_QWORD *)v68[16];
    if (v8 == v9)
      goto LABEL_30;
    while (1)
    {
LABEL_9:
      v10 = v68[5];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Initializing '%s'", buf, 0xCu);
      }
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      v12 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
      v13 = strlen(v12);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = (_BYTE *)v13;
      if (v13 >= 0x17)
        break;
      HIBYTE(v75) = v13;
      v15 = __dst;
      if (v13)
        goto LABEL_18;
LABEL_19:
      v14[(_QWORD)v15] = 0;
      ctu::TrackedGroup::fork((NSObject **)buf, (uint64_t)v7, (uint64_t)__dst);
      if (SHIBYTE(v75) < 0)
      {
        operator delete(__dst[0]);
        v18 = *v8;
        v19 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_23:
          dispatch_retain(v19);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v18 = *v8;
        v19 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_23;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v18 + 32))(v18, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v19)
      {
        dispatch_group_leave(v19);
        dispatch_release(v19);
      }
      v8 += 2;
      if (v8 == v9)
        goto LABEL_30;
    }
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    v75 = v17 | 0x8000000000000000;
    __dst[0] = v15;
LABEL_18:
    memmove(v15, v12, (size_t)v14);
    goto LABEL_19;
  }
  dispatch_retain(v3);
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  dispatch_release(v3);
  v8 = (_QWORD *)v68[15];
  v9 = (_QWORD *)v68[16];
  if (v8 != v9)
    goto LABEL_9;
LABEL_30:
  v20 = *v7;
  v21 = (*(uint64_t (**)(_QWORD *))(*v68 + 88))(v68);
  v22 = dispatch_time(0, 1000000000 * v21);
  v23 = v67;
  if (!dispatch_group_wait(v20, v22))
    goto LABEL_63;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  shared_owners = (uint64_t *)v67[1].__shared_owners_;
  shared_weak_owners = (uint64_t *)v67[1].__shared_weak_owners_;
  while (shared_owners != shared_weak_owners)
  {
    v26 = (std::__shared_weak_count *)shared_owners[1];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = *shared_owners;
        if (*shared_owners)
        {
          v30 = v71;
          if ((unint64_t)v71 >= v72)
          {
            v32 = (__int128 *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v70, v29);
          }
          else
          {
            if (*(char *)(v29 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v71, *(const std::string::value_type **)v29, *(_QWORD *)(v29 + 8));
            }
            else
            {
              v31 = *(_OWORD *)v29;
              v71->__r_.__value_.__r.__words[2] = *(_QWORD *)(v29 + 16);
              *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
            }
            v32 = (__int128 *)&v30[1];
          }
          v71 = (std::string *)v32;
        }
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    shared_owners += 2;
  }
  *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84 = 0xAAAAAAAAAAAAAAAALL;
  v94 = v35;
  v93 = v35;
  v92 = v35;
  v91 = v35;
  v90 = v35;
  v89 = v35;
  v88 = v35;
  v87 = v35;
  v86 = v35;
  v83 = v35;
  v82 = v35;
  v81 = v35;
  v80 = v35;
  v79 = v35;
  *(_OWORD *)&buf[8] = v35;
  v36 = MEMORY[0x1E0DE4FE0];
  v37 = MEMORY[0x1E0DE4FE0] + 64;
  v85 = MEMORY[0x1E0DE4FE0] + 64;
  v38 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v39 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)buf = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v39;
  v40 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v40, &buf[8]);
  v40[1].__vftable = 0;
  v40[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v36 + 24;
  v85 = v37;
  std::streambuf::basic_streambuf();
  v41 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  v82 = 0u;
  v83 = 0u;
  LODWORD(v84) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Initialization TIMEOUT: ", 24);
  v42 = (_QWORD *)std::ostream::operator<<();
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" clients failed to complete init stage: ", 40);
  p_p = &__p;
  ctu::join<std::__wrap_iter<std::string *>>(&__p, (std::string *)v70, (__int128 *)v71);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v45 = strlen((const char *)p_p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)p_p, v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = v68[5];
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    if ((v84 & 0x10) != 0)
    {
      v59 = *((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1) < (unint64_t)v81)
      {
        *((_QWORD *)&v83 + 1) = v81;
        v59 = v81;
      }
      v60 = (const void **)&v80 + 1;
    }
    else
    {
      if ((v84 & 8) == 0)
      {
        v57 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v58 = &__p;
        goto LABEL_92;
      }
      v60 = (const void **)&v79;
      v59 = v80;
    }
    v61 = *v60;
    v57 = v59 - (_QWORD)*v60;
    if (v57 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v57 >= 0x17)
    {
      v62 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17)
        v62 = v57 | 7;
      v63 = v62 + 1;
      v58 = (std::string *)operator new(v62 + 1);
      __p.__r_.__value_.__l.__size_ = v57;
      __p.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v59 - *(_BYTE *)v60;
      v58 = &__p;
      if (!v57)
        goto LABEL_92;
    }
    memmove(v58, v61, v57);
LABEL_92:
    v58->__r_.__value_.__s.__data_[v57] = 0;
    v64 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v76 = 136315138;
    v77 = v64;
    _os_log_error_impl(&dword_1BF335000, v46, OS_LOG_TYPE_ERROR, "%s", v76, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v23 = v67;
  }
  *(_QWORD *)buf = *v38;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v38[3];
  *(_QWORD *)&buf[8] = v41 + 16;
  if (SBYTE7(v83) < 0)
    operator delete((void *)v82);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C](&v85);
  v47 = (__int128 *)v70;
  if (v70)
  {
    v48 = v71;
    v49 = v70;
    if (v71 != v70)
    {
      do
      {
        if (SHIBYTE(v48[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48[-1].__r_.__value_.__l.__data_);
        --v48;
      }
      while (v48 != (std::string *)v47);
      v49 = v70;
    }
    v71 = (std::string *)v47;
    operator delete(v49);
  }
LABEL_63:
  v50 = v68[5];
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v50, OS_LOG_TYPE_DEFAULT, "#I All global services initialized", buf, 2u);
  }
  do
    v51 = __ldaxr(v6);
  while (__stlxr(v51 - 1, v6));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  v52 = v65[1];
  if (v52)
  {
    dispatch_group_leave(v52);
    v53 = v65[1];
    if (v53)
      dispatch_release(v53);
  }
  operator delete(v65);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF4A1158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **__p,uint64_t a24,uint64_t a25,dispatch_group_t group,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  unint64_t *v49;
  std::__shared_weak_count *v50;
  void **v51;
  unint64_t *p_shared_owners;
  unint64_t v54;
  void **v55;
  void **v56;
  unint64_t v57;
  NSObject *v58;
  NSObject *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;

  p_shared_owners = (unint64_t *)&v50->__shared_owners_;
  do
    v54 = __ldaxr(p_shared_owners);
  while (__stlxr(v54 - 1, p_shared_owners));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  if (__p)
  {
    v55 = v51;
    v56 = __p;
    if (v51 != __p)
    {
      do
      {
        if (*((char *)v55 - 1) < 0)
          operator delete(*(v55 - 3));
        v55 -= 3;
      }
      while (v55 != __p);
      v56 = __p;
    }
    operator delete(v56);
  }
  do
    v57 = __ldaxr(v49);
  while (__stlxr(v57 - 1, v49));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  v58 = a10[1];
  if (v58)
  {
    dispatch_group_leave(v58);
    v59 = a10[1];
    if (v59)
      dispatch_release(v59);
  }
  operator delete(a10);
  v60 = a11;
  v61 = (std::__shared_weak_count *)a11[2];
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    v60 = a11;
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  operator delete(v60);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownGlobalServices(void)::$_0>(ServiceManager::shutdownGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::shutdownGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  NSObject **v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  dispatch_time_t v23;
  std::__shared_weak_count *v24;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  __int128 *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::ios_base *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  std::string *p_p;
  size_t v46;
  NSObject *v47;
  __int128 *v48;
  std::string *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  std::string *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  unint64_t v63;
  NSObject *v64;
  NSObject *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::string::size_type v73;
  std::string *v74;
  uint64_t v75;
  const void **v76;
  const void *v77;
  uint64_t v78;
  std::string *v79;
  _QWORD *v80;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::string __p;
  void *v85;
  std::string *v86;
  unint64_t v87;
  dispatch_group_t group;
  void *__dst[2];
  unint64_t v90;
  uint8_t v91[4];
  std::string *v92;
  uint8_t buf[24];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v80 = (_QWORD *)*a1;
  v1 = *(_QWORD **)*a1;
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (uint64_t)(v1[16] - v1[15]) >> 4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Shutdown %zd global services", buf, 0xCu);
  }
  v4 = dispatch_group_create();
  v5 = operator new(0x38uLL);
  v6 = v5;
  v5[1] = 0;
  v7 = v5 + 1;
  v5[2] = 0;
  *v5 = off_1E7908EB8;
  v5[3] = v4;
  v8 = (NSObject **)(v5 + 3);
  v82 = (std::__shared_weak_count *)v5;
  if (!v4)
  {
    v5[4] = 0;
    v5[5] = 0;
    v5[6] = 0;
    v9 = (_QWORD *)v1[15];
    v10 = (_QWORD *)v1[16];
    if (v9 == v10)
      goto LABEL_30;
    while (1)
    {
LABEL_9:
      v11 = v1[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Shutdown global service '%s'", buf, 0xCu);
      }
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      v13 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
      v14 = strlen(v13);
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = (_BYTE *)v14;
      if (v14 >= 0x17)
        break;
      HIBYTE(v90) = v14;
      v16 = __dst;
      if (v14)
        goto LABEL_18;
LABEL_19:
      v15[(_QWORD)v16] = 0;
      ctu::TrackedGroup::fork((NSObject **)buf, (uint64_t)v8, (uint64_t)__dst);
      if (SHIBYTE(v90) < 0)
      {
        operator delete(__dst[0]);
        v19 = *v9;
        v20 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_23:
          dispatch_retain(v20);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v19 = *v9;
        v20 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_23;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v19 + 64))(v19, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v20)
      {
        dispatch_group_leave(v20);
        dispatch_release(v20);
      }
      v9 += 2;
      if (v9 == v10)
        goto LABEL_30;
    }
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    v90 = v18 | 0x8000000000000000;
    __dst[0] = v16;
LABEL_18:
    memmove(v16, v13, (size_t)v15);
    goto LABEL_19;
  }
  dispatch_retain(v4);
  v6[4] = 0;
  v6[5] = 0;
  v6[6] = 0;
  dispatch_release(v4);
  v9 = (_QWORD *)v1[15];
  v10 = (_QWORD *)v1[16];
  if (v9 != v10)
    goto LABEL_9;
LABEL_30:
  v21 = *v8;
  v22 = (*(uint64_t (**)(_QWORD *))(*v1 + 112))(v1);
  v23 = dispatch_time(0, 1000000000 * v22);
  v24 = v82;
  if (!dispatch_group_wait(v21, v23))
    goto LABEL_63;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  shared_owners = (uint64_t *)v82[1].__shared_owners_;
  shared_weak_owners = (uint64_t *)v82[1].__shared_weak_owners_;
  while (shared_owners != shared_weak_owners)
  {
    v27 = (std::__shared_weak_count *)shared_owners[1];
    if (v27)
    {
      v28 = std::__shared_weak_count::lock(v27);
      if (v28)
      {
        v29 = v28;
        v30 = *shared_owners;
        if (*shared_owners)
        {
          v31 = v86;
          if ((unint64_t)v86 >= v87)
          {
            v33 = (__int128 *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v85, v30);
          }
          else
          {
            if (*(char *)(v30 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)v30, *(_QWORD *)(v30 + 8));
            }
            else
            {
              v32 = *(_OWORD *)v30;
              v86->__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
            }
            v33 = (__int128 *)&v31[1];
          }
          v86 = (std::string *)v33;
        }
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    shared_owners += 2;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v99 = 0xAAAAAAAAAAAAAAAALL;
  v109 = v36;
  v108 = v36;
  v107 = v36;
  v106 = v36;
  v105 = v36;
  v104 = v36;
  v103 = v36;
  v102 = v36;
  v101 = v36;
  v98 = v36;
  v97 = v36;
  v96 = v36;
  v95 = v36;
  v94 = v36;
  *(_OWORD *)&buf[8] = v36;
  v37 = MEMORY[0x1E0DE4FE0];
  v38 = MEMORY[0x1E0DE4FE0] + 64;
  v100 = MEMORY[0x1E0DE4FE0] + 64;
  v39 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)buf = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v40;
  v41 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v41, &buf[8]);
  v41[1].__vftable = 0;
  v41[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v37 + 24;
  v100 = v38;
  std::streambuf::basic_streambuf();
  v42 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  v97 = 0u;
  v98 = 0u;
  LODWORD(v99) = 16;
  v24 = v82;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Shutdown global service: TIMEOUT: ", 34);
  v43 = (_QWORD *)std::ostream::operator<<();
  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" clients failed to complete shutdown: ", 38);
  p_p = &__p;
  ctu::join<std::__wrap_iter<std::string *>>(&__p, (std::string *)v85, (__int128 *)v86);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v46 = strlen((const char *)p_p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)p_p, v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = v1[5];
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    if ((v99 & 0x10) != 0)
    {
      v75 = *((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1) < (unint64_t)v96)
      {
        *((_QWORD *)&v98 + 1) = v96;
        v75 = v96;
      }
      v76 = (const void **)&v95 + 1;
    }
    else
    {
      if ((v99 & 8) == 0)
      {
        v73 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v74 = &__p;
        goto LABEL_118;
      }
      v76 = (const void **)&v94;
      v75 = v95;
    }
    v77 = *v76;
    v73 = v75 - (_QWORD)*v76;
    if (v73 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v73 >= 0x17)
    {
      v78 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v73 | 7) != 0x17)
        v78 = v73 | 7;
      v83 = v78 + 1;
      v74 = (std::string *)operator new(v78 + 1);
      __p.__r_.__value_.__l.__size_ = v73;
      __p.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v75 - *(_BYTE *)v76;
      v74 = &__p;
      if (!v73)
        goto LABEL_118;
    }
    memmove(v74, v77, v73);
LABEL_118:
    v74->__r_.__value_.__s.__data_[v73] = 0;
    v79 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v79 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v91 = 136315138;
    v92 = v79;
    _os_log_error_impl(&dword_1BF335000, v47, OS_LOG_TYPE_ERROR, "%s", v91, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v24 = v82;
  }
  *(_QWORD *)buf = *v39;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v39[3];
  *(_QWORD *)&buf[8] = v42 + 16;
  if (SBYTE7(v98) < 0)
    operator delete((void *)v97);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C](&v100);
  v48 = (__int128 *)v85;
  if (v85)
  {
    v49 = v86;
    v50 = v85;
    if (v86 != v85)
    {
      do
      {
        if (SHIBYTE(v49[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49[-1].__r_.__value_.__l.__data_);
        --v49;
      }
      while (v49 != (std::string *)v48);
      v50 = v85;
    }
    v86 = (std::string *)v48;
    operator delete(v50);
  }
LABEL_63:
  v51 = v1[16];
  if (v51 != v1[15])
  {
    do
    {
      v53 = v51;
      v54 = *(_QWORD *)(v51 - 16);
      v51 -= 16;
      memset(buf, 0, sizeof(buf));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(buf, *(_QWORD *)(v54 + 24), *(_QWORD *)(v54 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v54 + 32) - *(_QWORD *)(v54 + 24)) >> 3));
      v55 = v1[21];
      v86 = 0;
      v87 = 0;
      v85 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
      ServiceCtrl::clearCommandHandlers(v55, (uint64_t)v85, (uint64_t)v86);
      v56 = (__int128 *)v85;
      if (v85)
      {
        v57 = v86;
        v58 = v85;
        if (v86 != v85)
        {
          do
          {
            if (SHIBYTE(v57[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v57[-1].__r_.__value_.__l.__data_);
            --v57;
          }
          while (v57 != (std::string *)v56);
          v58 = v85;
        }
        v86 = (std::string *)v56;
        operator delete(v58);
      }
      v59 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v60 = *(_QWORD *)&buf[8];
        v52 = *(void **)buf;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          do
          {
            if (*(char *)(v60 - 1) < 0)
              operator delete(*(void **)(v60 - 24));
            v60 -= 24;
          }
          while (v60 != v59);
          v52 = *(void **)buf;
        }
        *(_QWORD *)&buf[8] = v59;
        operator delete(v52);
      }
    }
    while (v51 != v1[15]);
    v61 = v1[16];
    if (v61 != v51)
    {
      do
      {
        v70 = *(std::__shared_weak_count **)(v61 - 8);
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v69 = v61 == v53;
        v61 -= 16;
      }
      while (!v69);
    }
  }
  v1[16] = v51;
  v62 = v1[5];
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v62, OS_LOG_TYPE_DEFAULT, "#I All global services have shutdown", buf, 2u);
  }
  do
    v63 = __ldaxr(v7);
  while (__stlxr(v63 - 1, v7));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  v64 = v80[1];
  if (v64)
  {
    dispatch_group_leave(v64);
    v65 = v80[1];
    if (v65)
      dispatch_release(v65);
  }
  operator delete(v80);
  v66 = (std::__shared_weak_count *)a1[2];
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  operator delete(a1);
}

void sub_1BF4A1CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void **__p,uint64_t a22,uint64_t a23,dispatch_group_t group,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  unint64_t *v47;
  std::__shared_weak_count *v48;
  void **v49;
  unint64_t *p_shared_owners;
  unint64_t v52;
  void **v53;
  void **v54;
  unint64_t v55;
  NSObject *v56;
  NSObject *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;

  p_shared_owners = (unint64_t *)&v48->__shared_owners_;
  do
    v52 = __ldaxr(p_shared_owners);
  while (__stlxr(v52 - 1, p_shared_owners));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  if (__p)
  {
    v53 = v49;
    v54 = __p;
    if (v49 != __p)
    {
      do
      {
        if (*((char *)v53 - 1) < 0)
          operator delete(*(v53 - 3));
        v53 -= 3;
      }
      while (v53 != __p);
      v54 = __p;
    }
    operator delete(v54);
  }
  do
    v55 = __ldaxr(v47);
  while (__stlxr(v55 - 1, v47));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  v56 = a10[1];
  if (v56)
  {
    dispatch_group_leave(v56);
    v57 = a10[1];
    if (v57)
      dispatch_release(v57);
  }
  operator delete(a10);
  v58 = (std::__shared_weak_count *)a11[2];
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void ServiceCtrl::clearCommandHandlers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void *__p;
  void **v11;
  uint64_t v12;
  _QWORD block[6];

  v4 = a1 + 72;
  v9 = a1;
  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, a2, a3, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3));
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_20clearCommandHandlersENSt3__16vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke;
  block[3] = &__block_descriptor_tmp_19_5;
  block[4] = v4;
  block[5] = &v9;
  v5 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v5, block);
    v6 = (void **)__p;
    if (!__p)
      return;
  }
  else
  {
    dispatch_sync(v5, block);
    v6 = (void **)__p;
    if (!__p)
      return;
  }
  v7 = v11;
  v8 = v6;
  if (v11 != v6)
  {
    do
    {
      if (*((char *)v7 - 1) < 0)
        operator delete(*(v7 - 3));
      v7 -= 3;
    }
    while (v7 != v6);
    v8 = __p;
  }
  v11 = v6;
  operator delete(v8);
}

void ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_20clearCommandHandlersENSt3__16vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke(uint64_t a1)
{
  _QWORD *v1;
  const void **v2;
  const void **v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  const void *v14;

  v1 = *(_QWORD **)(a1 + 40);
  v2 = (const void **)v1[1];
  v3 = (const void **)v1[2];
  if (v2 != v3)
  {
    v4 = *v1;
    v5 = (uint64_t **)(*v1 + 120);
    v6 = *v1 + 128;
    do
    {
      v7 = std::__tree<std::string>::find<std::string>((uint64_t)v5, v2);
      if ((uint64_t *)v6 != v7)
      {
        v8 = v7;
        v9 = (uint64_t *)v7[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          v11 = v7;
          do
          {
            v10 = (uint64_t *)v11[2];
            v12 = *v10 == (_QWORD)v11;
            v11 = v10;
          }
          while (!v12);
        }
        if (*v5 == v7)
          *v5 = v10;
        v13 = *(uint64_t **)(v4 + 128);
        --*(_QWORD *)(v4 + 136);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v13, v8);
        v14 = (const void *)v8[7];
        if (v14)
          _Block_release(v14);
        if (*((char *)v8 + 55) < 0)
          operator delete((void *)v8[4]);
        operator delete(v8);
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void dispatch::detail::group_notify<ServiceManager::initializeDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::initializeDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  _QWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;

  v2 = *(_QWORD **)a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3)
  {
    dispatch_retain(*((dispatch_object_t *)a1 + 2));
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)v2[10];
  if (!v4 || (v5 = v2[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = v2;
  v8[1] = v3;
  v9 = v2[11];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v14 = *((_QWORD *)a1 + 2);
  if (v14)
  {
    dispatch_group_leave(v14);
    v15 = *((_QWORD *)a1 + 2);
    if (v15)
      dispatch_release(v15);
  }
  v16 = *((_QWORD *)a1 + 1);
  if (v16)
    dispatch_release(v16);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  NSObject **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  dispatch_time_t v25;
  intptr_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  __int128 *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  std::ios_base *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *p_p;
  size_t v47;
  NSObject *v48;
  __int128 *v49;
  std::string *v50;
  void *v51;
  NSObject *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  _QWORD *v55;
  unint64_t *v56;
  NSObject **v57;
  _QWORD *v58;
  _QWORD *v59;
  NSObject *v60;
  uint64_t v61;
  const char *v62;
  size_t v63;
  __int128 *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  NSObject *v70;
  uint64_t v71;
  dispatch_time_t v72;
  intptr_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  _OWORD *size;
  __int128 v82;
  std::string *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::ios_base *v91;
  _QWORD *v92;
  _QWORD *v93;
  std::string *v94;
  size_t v95;
  NSObject *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  void *v99;
  NSObject *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  NSObject *v104;
  NSObject *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::string::size_type v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  uint64_t v113;
  const void **v114;
  uint64_t v115;
  const void **v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  std::string *v120;
  const void *v121;
  uint64_t v122;
  uint64_t v123;
  std::string *v124;
  std::__shared_weak_count *v125;
  uint64_t *v126;
  uint64_t **v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  dispatch_group_t object;
  std::string __p;
  void *v132;
  std::string *v133;
  unint64_t v134;
  dispatch_group_t group;
  void *__dst[2];
  unint64_t v137;
  uint8_t v138[4];
  std::string *v139;
  std::string v140;
  _BYTE buf[24];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  (***(void (****)(_QWORD))(v3 + 104))(*(_QWORD *)(v3 + 104));
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(*(_QWORD *)(v3 + 152) - *(_QWORD *)(v3 + 144)) >> 4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing %zd services", buf, 0xCu);
  }
  v126 = v2;
  v127 = a1;
  v6 = dispatch_group_create();
  v7 = (std::__shared_weak_count *)operator new(0x38uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908EB8;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v9 = (NSObject **)&v7[1];
  v125 = v7;
  if (!v6)
  {
    v7[1].__shared_owners_ = 0;
    v7[1].__shared_weak_owners_ = 0;
    v7[2].__vftable = 0;
    v11 = *(_QWORD **)(v3 + 144);
    v12 = *(_QWORD **)(v3 + 152);
    v129 = v3;
    if (v11 == v12)
      goto LABEL_30;
    while (1)
    {
LABEL_9:
      v13 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 16))(*v11);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v14;
        _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Initializing '%s'", buf, 0xCu);
      }
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      v15 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 16))(*v11);
      v16 = strlen(v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v17 = (_BYTE *)v16;
      if (v16 >= 0x17)
        break;
      HIBYTE(v137) = v16;
      v18 = __dst;
      if (v16)
        goto LABEL_18;
LABEL_19:
      v3 = v129;
      v17[(_QWORD)v18] = 0;
      ctu::TrackedGroup::fork((NSObject **)buf, (uint64_t)v9, (uint64_t)__dst);
      if (SHIBYTE(v137) < 0)
      {
        operator delete(__dst[0]);
        v21 = *v11;
        v22 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_23:
          dispatch_retain(v22);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v21 = *v11;
        v22 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_23;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v21 + 32))(v21, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v22)
      {
        dispatch_group_leave(v22);
        dispatch_release(v22);
      }
      v11 += 2;
      if (v11 == v12)
        goto LABEL_30;
    }
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void **)operator new(v19 + 1);
    __dst[1] = v17;
    v137 = v20 | 0x8000000000000000;
    __dst[0] = v18;
LABEL_18:
    memmove(v18, v15, (size_t)v17);
    goto LABEL_19;
  }
  v10 = &v7->__vftable;
  dispatch_retain(v6);
  v10[4] = 0;
  v10[5] = 0;
  v10[6] = 0;
  dispatch_release(v6);
  v11 = *(_QWORD **)(v3 + 144);
  v12 = *(_QWORD **)(v3 + 152);
  v129 = v3;
  if (v11 != v12)
    goto LABEL_9;
LABEL_30:
  v23 = *v9;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  v25 = dispatch_time(0, 1000000000 * v24);
  v26 = dispatch_group_wait(v23, v25);
  v27 = MEMORY[0x1E0DE4FE0];
  v28 = (_QWORD *)MEMORY[0x1E0DE4F60];
  if (!v26)
    goto LABEL_63;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  shared_owners = (uint64_t *)v125[1].__shared_owners_;
  shared_weak_owners = (uint64_t *)v125[1].__shared_weak_owners_;
  while (shared_owners != shared_weak_owners)
  {
    v31 = (std::__shared_weak_count *)shared_owners[1];
    if (v31)
    {
      v32 = std::__shared_weak_count::lock(v31);
      if (v32)
      {
        v33 = v32;
        v34 = *shared_owners;
        if (*shared_owners)
        {
          v35 = v133;
          if ((unint64_t)v133 >= v134)
          {
            v37 = (__int128 *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v132, v34);
          }
          else
          {
            if (*(char *)(v34 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v133, *(const std::string::value_type **)v34, *(_QWORD *)(v34 + 8));
            }
            else
            {
              v36 = *(_OWORD *)v34;
              v133->__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 + 16);
              *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
            }
            v37 = (__int128 *)&v35[1];
          }
          v133 = (std::string *)v37;
        }
        v38 = (unint64_t *)&v33->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    shared_owners += 2;
  }
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v147 = v40;
  v156 = v40;
  v155 = v40;
  v154 = v40;
  v153 = v40;
  v152 = v40;
  v151 = v40;
  v150 = v40;
  v149 = v40;
  v148 = v40;
  v146 = v40;
  v145 = v40;
  v144 = v40;
  v143 = v40;
  v142 = v40;
  *(_OWORD *)&buf[8] = v40;
  v41 = v28[1];
  v42 = v28[2];
  *((_QWORD *)&v147 + 1) = v27 + 64;
  *(_QWORD *)buf = v41;
  *(_QWORD *)&buf[*(_QWORD *)(v41 - 24)] = v42;
  v43 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v43, &buf[8]);
  v43[1].__vftable = 0;
  v43[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v27 + 24;
  *((_QWORD *)&v147 + 1) = v27 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  v145 = 0u;
  v146 = 0u;
  LODWORD(v147) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Initialization TIMEOUT: ", 24);
  v44 = (_QWORD *)std::ostream::operator<<();
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" clients failed to complete init stage: ", 40);
  p_p = &__p;
  ctu::join<std::__wrap_iter<std::string *>>(&__p, (std::string *)v132, (__int128 *)v133);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v47 = strlen((const char *)p_p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_p, v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v48 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    if ((v147 & 0x10) != 0)
    {
      v113 = *((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1) < (unint64_t)v144)
      {
        *((_QWORD *)&v146 + 1) = v144;
        v113 = v144;
      }
      v114 = (const void **)&v143 + 1;
    }
    else
    {
      if ((v147 & 8) == 0)
      {
        v109 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v110 = &__p;
LABEL_166:
        v110->__r_.__value_.__s.__data_[v109] = 0;
        v120 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v120 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v140.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4) = (std::string::size_type)v120;
        _os_log_error_impl(&dword_1BF335000, v48, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v140, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v28 = (_QWORD *)MEMORY[0x1E0DE4F60];
        goto LABEL_53;
      }
      v114 = (const void **)&v142;
      v113 = v143;
    }
    v117 = *v114;
    v109 = v113 - (_QWORD)*v114;
    if (v109 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v109 >= 0x17)
    {
      v118 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v109 | 7) != 0x17)
        v118 = v109 | 7;
      v119 = v118 + 1;
      v110 = (std::string *)operator new(v118 + 1);
      __p.__r_.__value_.__l.__size_ = v109;
      __p.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v113 - *(_BYTE *)v114;
      v110 = &__p;
      if (!v109)
        goto LABEL_165;
    }
    memmove(v110, v117, v109);
LABEL_165:
    v3 = v129;
    goto LABEL_166;
  }
LABEL_53:
  *(_QWORD *)buf = *v28;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v28[3];
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v146) < 0)
    operator delete((void *)v145);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C]((char *)&v147 + 8);
  v49 = (__int128 *)v132;
  if (v132)
  {
    v50 = v133;
    v51 = v132;
    if (v133 != v132)
    {
      do
      {
        if (SHIBYTE(v50[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50[-1].__r_.__value_.__l.__data_);
        --v50;
      }
      while (v50 != (std::string *)v49);
      v51 = v132;
    }
    v133 = (std::string *)v49;
    operator delete(v51);
  }
LABEL_63:
  v52 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v52, OS_LOG_TYPE_DEFAULT, "#I All services initialized; Starting them now!", buf, 2u);
  }
  v53 = dispatch_group_create();
  v54 = (std::__shared_weak_count *)operator new(0x38uLL);
  v55 = &v54->__vftable;
  v54->__shared_owners_ = 0;
  v56 = (unint64_t *)&v54->__shared_owners_;
  v54->__shared_weak_owners_ = 0;
  v54->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908EB8;
  v54[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
  v57 = (NSObject **)&v54[1];
  v128 = v54;
  if (!v53)
  {
    v54[1].__shared_owners_ = 0;
    v54[1].__shared_weak_owners_ = 0;
    v54[2].__vftable = 0;
    v58 = *(_QWORD **)(v3 + 144);
    v59 = *(_QWORD **)(v3 + 152);
    if (v58 == v59)
      goto LABEL_92;
    while (1)
    {
LABEL_71:
      v60 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        v61 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 16))(*v58);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v61;
        _os_log_impl(&dword_1BF335000, v60, OS_LOG_TYPE_DEFAULT, "#I Starting '%s'", buf, 0xCu);
      }
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      v62 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 16))(*v58);
      v63 = strlen(v62);
      if (v63 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v64 = (__int128 *)v63;
      if (v63 >= 0x17)
        break;
      HIBYTE(v134) = v63;
      v65 = &v132;
      if (v63)
        goto LABEL_80;
LABEL_81:
      *((_BYTE *)v64 + (_QWORD)v65) = 0;
      ctu::TrackedGroup::fork((NSObject **)buf, (uint64_t)v57, (uint64_t)&v132);
      if (SHIBYTE(v134) < 0)
      {
        operator delete(v132);
        v68 = *v58;
        v69 = *(NSObject **)buf;
        object = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_85:
          dispatch_retain(v69);
          if (object)
            dispatch_group_enter(object);
        }
      }
      else
      {
        v68 = *v58;
        v69 = *(NSObject **)buf;
        object = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_85;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v68 + 40))(v68, &object);
      if (object)
      {
        dispatch_group_leave(object);
        if (object)
          dispatch_release(object);
      }
      if (v69)
      {
        dispatch_group_leave(v69);
        dispatch_release(v69);
      }
      v58 += 2;
      v3 = v129;
      if (v58 == v59)
        goto LABEL_92;
    }
    v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v66 = v63 | 7;
    v67 = v66 + 1;
    v65 = operator new(v66 + 1);
    v133 = (std::string *)v64;
    v134 = v67 | 0x8000000000000000;
    v132 = v65;
LABEL_80:
    memmove(v65, v62, (size_t)v64);
    goto LABEL_81;
  }
  dispatch_retain(v53);
  v55[4] = 0;
  v55[5] = 0;
  v55[6] = 0;
  dispatch_release(v53);
  v58 = *(_QWORD **)(v3 + 144);
  v59 = *(_QWORD **)(v3 + 152);
  if (v58 != v59)
    goto LABEL_71;
LABEL_92:
  atomic_store(0, (unsigned __int8 *)(v3 + 192));
  v70 = *v57;
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
  v72 = dispatch_time(0, 1000000000 * v71);
  v73 = dispatch_group_wait(v70, v72);
  v74 = MEMORY[0x1E0DE4F60];
  if (!v73)
    goto LABEL_125;
  memset(&__p, 0, sizeof(__p));
  v75 = (uint64_t *)v128[1].__shared_owners_;
  v76 = (uint64_t *)v128[1].__shared_weak_owners_;
  while (v75 != v76)
  {
    v77 = (std::__shared_weak_count *)v75[1];
    if (v77)
    {
      v78 = std::__shared_weak_count::lock(v77);
      if (v78)
      {
        v79 = v78;
        v80 = *v75;
        if (*v75)
        {
          size = (_OWORD *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v83 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&__p.__r_.__value_.__l.__data_, v80);
          }
          else
          {
            if (*(char *)(v80 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, *(const std::string::value_type **)v80, *(_QWORD *)(v80 + 8));
            }
            else
            {
              v82 = *(_OWORD *)v80;
              *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v80 + 16);
              *size = v82;
            }
            v83 = (std::string *)((char *)size + 24);
          }
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
        }
        v84 = (unint64_t *)&v79->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
    }
    v75 += 2;
  }
  *(_QWORD *)&v86 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v86 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v147 = v86;
  v156 = v86;
  v155 = v86;
  v154 = v86;
  v153 = v86;
  v152 = v86;
  v151 = v86;
  v150 = v86;
  v149 = v86;
  v148 = v86;
  v146 = v86;
  v145 = v86;
  v144 = v86;
  v143 = v86;
  v142 = v86;
  *(_OWORD *)&buf[8] = v86;
  v87 = MEMORY[0x1E0DE4FE0];
  v88 = MEMORY[0x1E0DE4FE0] + 64;
  v89 = *(_QWORD *)(v74 + 8);
  v90 = *(_QWORD *)(v74 + 16);
  *((_QWORD *)&v147 + 1) = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)buf = v89;
  *(_QWORD *)&buf[*(_QWORD *)(v89 - 24)] = v90;
  v91 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v91, &buf[8]);
  v91[1].__vftable = 0;
  v91[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v87 + 24;
  *((_QWORD *)&v147 + 1) = v88;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  v145 = 0u;
  v146 = 0u;
  LODWORD(v147) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Start TIMEOUT: ", 15);
  v92 = (_QWORD *)std::ostream::operator<<();
  v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" clients failed to complete start stage: ", 41);
  v94 = &v140;
  ctu::join<std::__wrap_iter<std::string *>>(&v140, (std::string *)__p.__r_.__value_.__l.__data_, (__int128 *)__p.__r_.__value_.__l.__size_);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v94 = (std::string *)v140.__r_.__value_.__r.__words[0];
  v95 = strlen((const char *)v94);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  v96 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
  {
    if ((v147 & 0x10) != 0)
    {
      v115 = *((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1) < (unint64_t)v144)
      {
        *((_QWORD *)&v146 + 1) = v144;
        v115 = v144;
      }
      v116 = (const void **)&v143 + 1;
    }
    else
    {
      if ((v147 & 8) == 0)
      {
        v111 = 0;
        *((_BYTE *)&v140.__r_.__value_.__s + 23) = 0;
        v112 = &v140;
        goto LABEL_180;
      }
      v116 = (const void **)&v142;
      v115 = v143;
    }
    v121 = *v116;
    v111 = v115 - (_QWORD)*v116;
    if (v111 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v111 >= 0x17)
    {
      v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v111 | 7) != 0x17)
        v122 = v111 | 7;
      v123 = v122 + 1;
      v112 = (std::string *)operator new(v122 + 1);
      v140.__r_.__value_.__l.__size_ = v111;
      v140.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
    }
    else
    {
      *((_BYTE *)&v140.__r_.__value_.__s + 23) = v115 - *(_BYTE *)v116;
      v112 = &v140;
      if (!v111)
        goto LABEL_180;
    }
    memmove(v112, v121, v111);
LABEL_180:
    v112->__r_.__value_.__s.__data_[v111] = 0;
    v124 = &v140;
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v124 = (std::string *)v140.__r_.__value_.__r.__words[0];
    *(_DWORD *)v138 = 136315138;
    v139 = v124;
    _os_log_error_impl(&dword_1BF335000, v96, OS_LOG_TYPE_ERROR, "%s", v138, 0xCu);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    v3 = v129;
  }
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v146) < 0)
    operator delete((void *)v145);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C]((char *)&v147 + 8);
  v97 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v98 = __p.__r_.__value_.__l.__size_;
    v99 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v98 - 1) < 0)
          operator delete(*(void **)(v98 - 24));
        v98 -= 24;
      }
      while (v98 != v97);
      v99 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v97;
    operator delete(v99);
  }
LABEL_125:
  v100 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v100, OS_LOG_TYPE_DEFAULT, "#I All services started", buf, 2u);
  }
  v101 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)buf = operator new(0x30uLL);
  *(_OWORD *)&buf[8] = xmmword_1BF53F3E0;
  strcpy(*(char **)buf, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v101 + 32))(v101, buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  do
    v102 = __ldaxr(v56);
  while (__stlxr(v102 - 1, v56));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
  }
  do
    v103 = __ldaxr(p_shared_owners);
  while (__stlxr(v103 - 1, p_shared_owners));
  if (!v103)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
  }
  v104 = v126[1];
  if (v104)
  {
    dispatch_group_leave(v104);
    v105 = v126[1];
    if (v105)
      dispatch_release(v105);
  }
  operator delete(v126);
  v106 = (std::__shared_weak_count *)v127[2];
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  operator delete(v127);
}

void sub_1BF4A31E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, _QWORD *a10, _QWORD *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_group_t object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  unint64_t *v62;
  unint64_t *v63;
  std::__shared_weak_count *v64;
  void **v65;
  unint64_t *p_shared_owners;
  unint64_t v68;
  void **v69;
  void **v70;
  unint64_t v71;
  unint64_t v72;
  NSObject *v73;
  NSObject *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;

  p_shared_owners = (unint64_t *)&v64->__shared_owners_;
  do
    v68 = __ldaxr(p_shared_owners);
  while (__stlxr(v68 - 1, p_shared_owners));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  if (__p)
  {
    v69 = v65;
    v70 = __p;
    if (v65 != __p)
    {
      do
      {
        if (*((char *)v69 - 1) < 0)
          operator delete(*(v69 - 3));
        v69 -= 3;
      }
      while (v69 != __p);
      v70 = __p;
    }
    operator delete(v70);
  }
  do
    v71 = __ldaxr(v63);
  while (__stlxr(v71 - 1, v63));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  do
    v72 = __ldaxr(v62);
  while (__stlxr(v72 - 1, v62));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  v73 = a10[1];
  if (v73)
  {
    dispatch_group_leave(v73);
    v74 = a10[1];
    if (v74)
      dispatch_release(v74);
  }
  operator delete(a10);
  v75 = (std::__shared_weak_count *)a11[2];
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<ServiceManager::shutdownDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::shutdownDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  _QWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;

  v2 = *(_QWORD **)a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3)
  {
    dispatch_retain(*((dispatch_object_t *)a1 + 2));
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)v2[10];
  if (!v4 || (v5 = v2[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = v2;
  v8[1] = v3;
  v9 = v2[11];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v14 = *((_QWORD *)a1 + 2);
  if (v14)
  {
    dispatch_group_leave(v14);
    v15 = *((_QWORD *)a1 + 2);
    if (v15)
      dispatch_release(v15);
  }
  v16 = *((_QWORD *)a1 + 1);
  if (v16)
    dispatch_release(v16);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count **a1)
{
  std::__shared_weak_count_vtbl *v1;
  NSObject *v2;
  uint64_t v3;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD **v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  void (__cdecl *v32)(std::__shared_weak_count *__hidden);
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD **v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  _QWORD *v55;
  unint64_t *p_shared_owners;
  NSObject **v57;
  _QWORD *v58;
  _QWORD *v59;
  NSObject *v60;
  unint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  size_t v65;
  size_t v66;
  __int128 *p_dst;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  NSObject *v77;
  uint64_t v78;
  dispatch_time_t v79;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 v87;
  std::string *v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  std::ios_base *v92;
  _QWORD *v93;
  unint64_t v94;
  const char *v95;
  size_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  std::string *v100;
  size_t v101;
  NSObject *v102;
  NSObject *v103;
  unint64_t v104;
  const char *v105;
  uint64_t v106;
  uint8_t *v107;
  const void *v108;
  std::string::size_type v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  std::string *v113;
  void **v114;
  void **v115;
  void *v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD **v119;
  void *v120;
  void (__cdecl *v121)(std::__shared_weak_count *__hidden);
  uint64_t v122;
  uint64_t v123;
  void **v124;
  void **v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void (__cdecl *v129)(std::__shared_weak_count *__hidden);
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  NSObject *v131;
  NSObject *v132;
  NSObject *v133;
  std::__shared_weak_count **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unsigned __int8 *v150;
  std::__shared_weak_count_vtbl *v151;
  std::string v152;
  dispatch_group_t group;
  __int128 __dst;
  unint64_t v155;
  dispatch_object_t object;
  _QWORD **v157;
  _QWORD *v158;
  uint64_t v159;
  void *__p[2];
  void *v161;
  uint8_t v162[16];
  uint8_t buf[56];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v141 = *a1;
  v1 = (*a1)->__vftable;
  v2 = v1[1].~__shared_weak_count;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = ((char *)v1[3].__on_zero_shared_weak - (char *)v1[3].__get_deleter) >> 4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Shutdown %zd dynamic services", buf, 0xCu);
  }
  atomic_store(1u, (unsigned __int8 *)&v1[4].__on_zero_shared_weak);
  v158 = 0;
  v159 = 0;
  v151 = v1;
  v157 = &v158;
  on_zero_shared_weak = v1[3].__on_zero_shared_weak;
  if (on_zero_shared_weak == (void (__cdecl *)(std::__shared_weak_count *__hidden))v1[3].__get_deleter)
    goto LABEL_191;
  while (2)
  {
    memset(buf, 170, 24);
    v5 = *((_QWORD *)on_zero_shared_weak - 2);
    on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)on_zero_shared_weak - 16);
    (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v5 + 24))(buf);
    v6 = *(unsigned __int8 **)buf;
    v7 = *(unsigned __int8 **)&buf[8];
    v150 = *(unsigned __int8 **)&buf[8];
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    {
      if (*(_QWORD *)buf)
        goto LABEL_73;
      goto LABEL_5;
    }
    do
    {
      while (1)
      {
        v8 = *v6;
        v9 = v158;
        v10 = &v158;
LABEL_12:
        v11 = v10;
        if (v9)
          break;
LABEL_17:
        v13 = operator new(0x40uLL);
        v14 = v13;
        *((_BYTE *)v13 + 32) = v8;
        v13[6] = 0;
        v13[7] = 0;
        v13[5] = 0;
        *v13 = 0;
        v13[1] = 0;
        v13[2] = v10;
        *v11 = v13;
        v15 = v13;
        if (*v157)
        {
          v157 = (_QWORD **)*v157;
          v15 = (_QWORD *)*v11;
        }
        v16 = v158;
        v17 = v15 == v158;
        *((_BYTE *)v15 + 24) = v15 == v158;
        if (!v17)
        {
          do
          {
            v18 = v15[2];
            if (*(_BYTE *)(v18 + 24))
              break;
            v19 = *(_QWORD **)(v18 + 16);
            v20 = *v19;
            if (*v19 == v18)
            {
              v23 = v19[1];
              if (!v23 || (v24 = *(unsigned __int8 *)(v23 + 24), v21 = (_BYTE *)(v23 + 24), v24))
              {
                if (*(_QWORD **)v18 == v15)
                {
                  *(_BYTE *)(v18 + 24) = 1;
                  *((_BYTE *)v19 + 24) = 0;
                  v27 = *(_QWORD *)(v18 + 8);
                  *v19 = v27;
                  if (v27)
                    goto LABEL_34;
                }
                else
                {
                  v25 = *(uint64_t **)(v18 + 8);
                  v26 = *v25;
                  *(_QWORD *)(v18 + 8) = *v25;
                  if (v26)
                  {
                    *(_QWORD *)(v26 + 16) = v18;
                    v19 = *(_QWORD **)(v18 + 16);
                  }
                  v25[2] = (uint64_t)v19;
                  *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * (**(_QWORD **)(v18 + 16) != v18)) = v25;
                  *v25 = v18;
                  *(_QWORD *)(v18 + 16) = v25;
                  v19 = (_QWORD *)v25[2];
                  v18 = *v19;
                  *((_BYTE *)v25 + 24) = 1;
                  *((_BYTE *)v19 + 24) = 0;
                  v27 = *(_QWORD *)(v18 + 8);
                  *v19 = v27;
                  if (v27)
LABEL_34:
                    *(_QWORD *)(v27 + 16) = v19;
                }
                *(_QWORD *)(v18 + 16) = v19[2];
                *(_QWORD *)(v19[2] + 8 * (*(_QWORD *)v19[2] != (_QWORD)v19)) = v18;
                *(_QWORD *)(v18 + 8) = v19;
LABEL_42:
                v19[2] = v18;
                break;
              }
            }
            else if (!v20 || (v22 = *(unsigned __int8 *)(v20 + 24), v21 = (_BYTE *)(v20 + 24), v22))
            {
              if (*(_QWORD **)v18 == v15)
              {
                v51 = v15[1];
                *(_QWORD *)v18 = v51;
                if (v51)
                {
                  *(_QWORD *)(v51 + 16) = v18;
                  v19 = *(_QWORD **)(v18 + 16);
                }
                v15[2] = v19;
                *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * (**(_QWORD **)(v18 + 16) != v18)) = v15;
                v15[1] = v18;
                *(_QWORD *)(v18 + 16) = v15;
                v19 = (_QWORD *)v15[2];
                *((_BYTE *)v15 + 24) = 1;
                *((_BYTE *)v19 + 24) = 0;
                v18 = v19[1];
                v31 = *(_QWORD **)v18;
                v19[1] = *(_QWORD *)v18;
                if (v31)
LABEL_40:
                  v31[2] = v19;
              }
              else
              {
                *(_BYTE *)(v18 + 24) = 1;
                *((_BYTE *)v19 + 24) = 0;
                v18 = v19[1];
                v31 = *(_QWORD **)v18;
                v19[1] = *(_QWORD *)v18;
                if (v31)
                  goto LABEL_40;
              }
              *(_QWORD *)(v18 + 16) = v19[2];
              *(_QWORD *)(v19[2] + 8 * (*(_QWORD *)v19[2] != (_QWORD)v19)) = v18;
              *(_QWORD *)v18 = v19;
              goto LABEL_42;
            }
            *(_BYTE *)(v18 + 24) = 1;
            v15 = v19;
            *((_BYTE *)v19 + 24) = v19 == v16;
            *v21 = 1;
          }
          while (v19 != v16);
        }
        ++v159;
        v28 = *(_QWORD *)on_zero_shared_weak;
        v30 = (char *)v13[6];
        v29 = (char *)v13[7];
        if (v30 >= v29)
          goto LABEL_44;
LABEL_9:
        *(_QWORD *)v30 = v28;
        v14[6] = v30 + 8;
        if (++v6 == v7)
          goto LABEL_72;
      }
      while (1)
      {
        v10 = (_QWORD **)v9;
        v12 = *((unsigned __int8 *)v9 + 32);
        if (v8 < v12)
        {
          v9 = *v10;
          goto LABEL_12;
        }
        if (v12 >= v8)
          break;
        v9 = v10[1];
        if (!v9)
        {
          v11 = v10 + 1;
          goto LABEL_17;
        }
      }
      v14 = v10;
      v28 = *(_QWORD *)on_zero_shared_weak;
      v30 = (char *)v10[6];
      v29 = (char *)v10[7];
      if (v30 < v29)
        goto LABEL_9;
LABEL_44:
      v32 = on_zero_shared_weak;
      v33 = (char *)v14[5];
      v34 = (v30 - v33) >> 3;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v36 = v29 - v33;
      if (v36 >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = (char *)operator new(8 * v37);
        v39 = &v38[8 * v34];
        *(_QWORD *)v39 = v28;
        v40 = (uint64_t)(v39 + 8);
        v41 = (char *)(v30 - v33);
        if (v30 == v33)
        {
LABEL_62:
          v14[5] = v39;
          v14[6] = v40;
          v14[7] = &v38[8 * v37];
          on_zero_shared_weak = v32;
          v7 = v150;
          if (!v30)
            goto LABEL_64;
LABEL_63:
          operator delete(v30);
          goto LABEL_64;
        }
      }
      else
      {
        v38 = 0;
        v39 = (char *)(8 * v34);
        *(_QWORD *)(8 * v34) = v28;
        v40 = 8 * v34 + 8;
        v41 = (char *)(v30 - v33);
        if (v30 == v33)
          goto LABEL_62;
      }
      v42 = (unint64_t)(v41 - 8);
      if (v42 < 0x58)
        goto LABEL_236;
      if ((unint64_t)(v33 - v38) < 0x20)
        goto LABEL_236;
      v43 = (v42 >> 3) + 1;
      v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      v45 = &v30[-v44];
      v39 -= v44;
      v46 = &v38[8 * v34 - 16];
      v47 = v30 - 16;
      v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v49 = *(_OWORD *)v47;
        *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
        *(_OWORD *)v46 = v49;
        v46 -= 32;
        v47 -= 32;
        v48 -= 4;
      }
      while (v48);
      v30 = v45;
      if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_236:
        do
        {
          v50 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v39 - 1) = v50;
          v39 -= 8;
        }
        while (v30 != v33);
      }
      v30 = (char *)v14[5];
      v14[5] = v39;
      v14[6] = v40;
      v14[7] = &v38[8 * v37];
      on_zero_shared_weak = v32;
      v7 = v150;
      if (v30)
        goto LABEL_63;
LABEL_64:
      v14[6] = v40;
      ++v6;
    }
    while (v6 != v7);
LABEL_72:
    v6 = *(unsigned __int8 **)buf;
    if (*(_QWORD *)buf)
    {
LABEL_73:
      *(_QWORD *)&buf[8] = v6;
      operator delete(v6);
    }
LABEL_5:
    if (on_zero_shared_weak != (void (__cdecl *)(std::__shared_weak_count *__hidden))v151[3].__get_deleter)
      continue;
    break;
  }
  v52 = v157;
  if (v157 == &v158)
    goto LABEL_191;
  v145 = *MEMORY[0x1E0DE4F60];
  v147 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v148 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v144 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v146 = MEMORY[0x1E0DE4FE0] + 64;
  v143 = MEMORY[0x1E0DE4FB8] + 16;
  while (2)
  {
    v53 = dispatch_group_create();
    v54 = (std::__shared_weak_count *)operator new(0x38uLL);
    v55 = &v54->__vftable;
    v54->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    v54->__shared_weak_owners_ = 0;
    v54->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908EB8;
    v54[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
    v57 = (NSObject **)&v54[1];
    v149 = v54;
    if (v53)
    {
      dispatch_retain(v53);
      v55[4] = 0;
      v55[5] = 0;
      v55[6] = 0;
      dispatch_release(v53);
    }
    else
    {
      v54[1].__shared_owners_ = 0;
      v54[1].__shared_weak_owners_ = 0;
      v54[2].__vftable = 0;
    }
    v58 = v52[5];
    v59 = v52[6];
    while (2)
    {
      if (v58 != v59)
      {
        v60 = v151[1].~__shared_weak_count;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          v61 = *((char *)v52 + 32);
          v62 = "???";
          if (v61 <= 3)
            v62 = off_1E7908F80[v61];
          v63 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 16))(*v58);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v62;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v63;
          _os_log_impl(&dword_1BF335000, v60, OS_LOG_TYPE_DEFAULT, "#I Shutdown dynamic service: Stage=%s Service=%s", buf, 0x16u);
        }
        object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
        v64 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 16))(*v58);
        v65 = strlen(v64);
        if (v65 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v66 = v65;
        if (v65 >= 0x17)
        {
          v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17)
            v68 = v65 | 7;
          v69 = v68 + 1;
          p_dst = (__int128 *)operator new(v68 + 1);
          *((_QWORD *)&__dst + 1) = v66;
          v155 = v69 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v155) = v65;
          p_dst = &__dst;
          if (!v65)
            goto LABEL_95;
        }
        memmove(p_dst, v64, v66);
LABEL_95:
        *((_BYTE *)p_dst + v66) = 0;
        *(_OWORD *)__p = __dst;
        v161 = (void *)v155;
        __dst = 0uLL;
        v155 = 0;
        memset(buf, 0, 48);
        ctu::TrackedGroup::fork(&object, (uint64_t)v57, (uint64_t)__p, (dispatch_group_t *)buf);
        if (*(_QWORD *)&buf[40] && *(_QWORD *)buf)
        {
          v152.__r_.__value_.__r.__words[0] = *(_QWORD *)&buf[8];
          *(_QWORD *)v162 = *(_QWORD *)buf;
          (*(void (**)(void))(**(_QWORD **)&buf[40] + 48))();
        }
        if (*(_QWORD *)&buf[8])
          os_release(*(void **)&buf[8]);
        v70 = *(uint8_t **)&buf[40];
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[40] = 0;
        if (v70 != &buf[16])
        {
          if (v70)
          {
            v71 = 5;
            goto LABEL_104;
          }
          *(_QWORD *)buf = 0;
          if (SHIBYTE(v161) < 0)
          {
LABEL_113:
            operator delete(__p[0]);
            v74 = *v58;
            v75 = *((unsigned __int8 *)v52 + 32);
            v76 = object;
            group = object;
            if (object)
              goto LABEL_114;
            goto LABEL_116;
          }
LABEL_110:
          v74 = *v58;
          v75 = *((unsigned __int8 *)v52 + 32);
          v76 = object;
          group = object;
          if (object)
          {
LABEL_114:
            dispatch_retain(v76);
            if (group)
              dispatch_group_enter(group);
          }
LABEL_116:
          (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(_QWORD *)v74 + 72))(v74, v75, &group);
          if (group)
          {
            dispatch_group_leave(group);
            if (group)
              dispatch_release(group);
          }
          if (v76)
          {
            dispatch_group_leave(v76);
            dispatch_release(v76);
          }
          ++v58;
          continue;
        }
        v70 = &buf[16];
        v71 = 4;
LABEL_104:
        (*(void (**)(void))(*(_QWORD *)v70 + 8 * v71))();
        v72 = *(uint8_t **)&buf[40];
        *(_QWORD *)buf = 0;
        if (*(uint8_t **)&buf[40] == &buf[16])
        {
          v72 = &buf[16];
          v73 = 4;
LABEL_108:
          (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
        }
        else if (*(_QWORD *)&buf[40])
        {
          v73 = 5;
          goto LABEL_108;
        }
        if (SHIBYTE(v161) < 0)
          goto LABEL_113;
        goto LABEL_110;
      }
      break;
    }
    v77 = *v57;
    v78 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *, _QWORD))v151->~__shared_weak_count + 15))(v151, *((unsigned __int8 *)v52 + 32));
    v79 = dispatch_time(0, 1000000000 * v78);
    if (dispatch_group_wait(v77, v79))
    {
      __p[0] = 0;
      __p[1] = 0;
      v161 = 0;
      shared_owners = (uint64_t *)v149[1].__shared_owners_;
      shared_weak_owners = (uint64_t *)v149[1].__shared_weak_owners_;
      while (shared_owners != shared_weak_owners)
      {
        v82 = (std::__shared_weak_count *)shared_owners[1];
        if (v82)
        {
          v83 = std::__shared_weak_count::lock(v82);
          if (v83)
          {
            v84 = v83;
            v85 = *shared_owners;
            if (*shared_owners)
            {
              v86 = __p[1];
              if (__p[1] >= v161)
              {
                v88 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)__p, v85);
              }
              else
              {
                if (*(char *)(v85 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__p[1], *(const std::string::value_type **)v85, *(_QWORD *)(v85 + 8));
                }
                else
                {
                  v87 = *(_OWORD *)v85;
                  *((_QWORD *)__p[1] + 2) = *(_QWORD *)(v85 + 16);
                  *v86 = v87;
                }
                v88 = (std::string *)((char *)v86 + 24);
              }
              __p[1] = v88;
            }
            v89 = (unint64_t *)&v84->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
        shared_owners += 2;
      }
      *(_QWORD *)&v91 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v91 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v176 = v91;
      v177 = v91;
      v174 = v91;
      v175 = v91;
      v172 = v91;
      v173 = v91;
      v170 = v91;
      v171 = v91;
      v167 = 0xAAAAAAAAAAAAAAAALL;
      v169 = v91;
      v165 = v91;
      v166 = v91;
      *(_OWORD *)&buf[40] = v91;
      v164 = v91;
      *(_OWORD *)&buf[8] = v91;
      *(_OWORD *)&buf[24] = v91;
      v168 = v146;
      *(_QWORD *)buf = v148;
      *(_QWORD *)&buf[*(_QWORD *)(v148 - 24)] = v147;
      v92 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
      std::ios_base::init(v92, &buf[8]);
      v92[1].__vftable = 0;
      v92[1].__fmtflags_ = -1;
      *(_QWORD *)buf = MEMORY[0x1E0DE4FE0] + 24;
      v168 = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&buf[8] = v143;
      v165 = 0u;
      v166 = 0u;
      LODWORD(v167) = 16;
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Shutdown dynamic service: Stage=", 32);
      v94 = *((char *)v52 + 32);
      v95 = "???";
      if (v94 <= 3)
        v95 = off_1E7908F80[v94];
      v96 = strlen(v95);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v95, v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" TIMEOUT: ", 10);
      v98 = (_QWORD *)std::ostream::operator<<();
      v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" clients failed to complete shutdown stage: ", 44);
      ctu::join<std::__wrap_iter<std::string *>>(&v152, (std::string *)__p[0], (__int128 *)__p[1]);
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v152;
      else
        v100 = (std::string *)v152.__r_.__value_.__r.__words[0];
      v101 = strlen((const char *)v100);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v152.__r_.__value_.__l.__data_);
        v102 = v151[1].~__shared_weak_count;
        if (!os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          goto LABEL_169;
      }
      else
      {
        v102 = v151[1].~__shared_weak_count;
        if (!os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          goto LABEL_169;
      }
      if ((v167 & 0x10) != 0)
      {
        v106 = *((_QWORD *)&v166 + 1);
        v107 = &buf[48];
        if (*((_QWORD *)&v166 + 1) < (unint64_t)v164)
        {
          *((_QWORD *)&v166 + 1) = v164;
          v106 = v164;
          v107 = &buf[48];
        }
LABEL_157:
        v108 = *(const void **)v107;
        v109 = v106 - *(_QWORD *)v107;
        if (v109 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v109 >= 0x17)
        {
          v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v109 | 7) != 0x17)
            v111 = v109 | 7;
          v112 = v111 + 1;
          v110 = (std::string *)operator new(v111 + 1);
          v152.__r_.__value_.__l.__size_ = v109;
          v152.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
          v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
        }
        else
        {
          *((_BYTE *)&v152.__r_.__value_.__s + 23) = v106 - *v107;
          v110 = &v152;
          if (!v109)
            goto LABEL_165;
        }
        memmove(v110, v108, v109);
      }
      else
      {
        if ((v167 & 8) != 0)
        {
          v106 = *(_QWORD *)&buf[40];
          v107 = &buf[24];
          goto LABEL_157;
        }
        v109 = 0;
        *((_BYTE *)&v152.__r_.__value_.__s + 23) = 0;
        v110 = &v152;
      }
LABEL_165:
      v110->__r_.__value_.__s.__data_[v109] = 0;
      v113 = &v152;
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v113 = (std::string *)v152.__r_.__value_.__r.__words[0];
      *(_DWORD *)v162 = 136315138;
      *(_QWORD *)&v162[4] = v113;
      _os_log_error_impl(&dword_1BF335000, v102, OS_LOG_TYPE_ERROR, "%s", v162, 0xCu);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
LABEL_169:
      *(_QWORD *)buf = v145;
      *(_QWORD *)&buf[*(_QWORD *)(v145 - 24)] = v144;
      *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v166) < 0)
        operator delete((void *)v165);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B89E4C](&v168);
      v114 = (void **)__p[0];
      if (__p[0])
      {
        v115 = (void **)__p[1];
        v116 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v115 - 1) < 0)
              operator delete(*(v115 - 3));
            v115 -= 3;
          }
          while (v115 != v114);
          v116 = __p[0];
        }
        __p[1] = v114;
        operator delete(v116);
      }
    }
    else
    {
      v103 = v151[1].~__shared_weak_count;
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        v104 = *((char *)v52 + 32);
        v105 = "???";
        if (v104 <= 3)
          v105 = off_1E7908F80[v104];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v105;
        _os_log_impl(&dword_1BF335000, v103, OS_LOG_TYPE_DEFAULT, "#I Shutdown dynamic service: Stage=%s SUCCESS", buf, 0xCu);
      }
    }
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (v117)
    {
      v118 = v52[1];
      if (!v118)
        goto LABEL_186;
      do
      {
LABEL_184:
        v119 = (_QWORD **)v118;
        v118 = (_QWORD *)*v118;
      }
      while (v118);
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
      v118 = v52[1];
      if (v118)
        goto LABEL_184;
      do
      {
LABEL_186:
        v119 = (_QWORD **)v52[2];
        v17 = *v119 == v52;
        v52 = v119;
      }
      while (!v17);
    }
    v52 = v119;
    if (v119 != &v158)
      continue;
    break;
  }
  on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v151[3].__get_deleter;
LABEL_191:
  if (v151[3].__on_zero_shared_weak != on_zero_shared_weak)
  {
    on_zero_shared_weak = v151[3].__on_zero_shared_weak;
    do
    {
      v121 = on_zero_shared_weak;
      v122 = *((_QWORD *)on_zero_shared_weak - 2);
      on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)on_zero_shared_weak - 16);
      memset(buf, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(buf, *(_QWORD *)(v122 + 24), *(_QWORD *)(v122 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v122 + 32) - *(_QWORD *)(v122 + 24)) >> 3));
      v123 = (uint64_t)v151[4].~__shared_weak_count_0;
      __p[1] = 0;
      v161 = 0;
      __p[0] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
      ServiceCtrl::clearCommandHandlers(v123, (uint64_t)__p[0], (uint64_t)__p[1]);
      v124 = (void **)__p[0];
      if (__p[0])
      {
        v125 = (void **)__p[1];
        v126 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v125 - 1) < 0)
              operator delete(*(v125 - 3));
            v125 -= 3;
          }
          while (v125 != v124);
          v126 = __p[0];
        }
        __p[1] = v124;
        operator delete(v126);
      }
      v127 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v128 = *(_QWORD *)&buf[8];
        v120 = *(void **)buf;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          do
          {
            if (*(char *)(v128 - 1) < 0)
              operator delete(*(void **)(v128 - 24));
            v128 -= 24;
          }
          while (v128 != v127);
          v120 = *(void **)buf;
        }
        *(_QWORD *)&buf[8] = v127;
        operator delete(v120);
      }
    }
    while (on_zero_shared_weak != (void (__cdecl *)(std::__shared_weak_count *__hidden))v151[3].__get_deleter);
    v129 = v151[3].__on_zero_shared_weak;
    if (v129 != on_zero_shared_weak)
    {
      do
      {
        v138 = (std::__shared_weak_count *)*((_QWORD *)v129 - 1);
        if (v138)
        {
          v139 = (unint64_t *)&v138->__shared_owners_;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        v17 = v129 == v121;
        v129 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v129 - 16);
      }
      while (!v17);
    }
  }
  v151[3].__on_zero_shared_weak = on_zero_shared_weak;
  get_deleter = v151[2].__get_deleter;
  *(_QWORD *)buf = operator new(0x30uLL);
  *(_OWORD *)&buf[8] = xmmword_1BF53F3E0;
  strcpy(*(char **)buf, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *), uint8_t *))(*(_QWORD *)get_deleter + 32))(get_deleter, buf);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  (*(void (**)(const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *)))(*(_QWORD *)v151[2].__get_deleter + 8))(v151[2].__get_deleter);
  v131 = v151[1].~__shared_weak_count;
  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v152.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v131, OS_LOG_TYPE_DEFAULT, "#I All dynamic services have shutdown", (uint8_t *)&v152, 2u);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v158);
  v132 = v141->__shared_owners_;
  if (v132)
  {
    dispatch_group_leave(v132);
    v133 = v141->__shared_owners_;
    if (v133)
      dispatch_release(v133);
  }
  operator delete(v141);
  v134 = a1;
  v135 = a1[2];
  if (v135)
  {
    v136 = (unint64_t *)&v135->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
      v134 = a1;
    }
  }
  operator delete(v134);
}

void sub_1BF4A47E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, std::__shared_weak_count **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,dispatch_group_t group,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,void *object,int a49,__int16 a50,char a51,char a52)
{
  NSObject *v53;
  NSObject *v54;
  std::__shared_weak_count **v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;

  if (a52 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a39);
  v53 = a9[1];
  if (v53)
  {
    dispatch_group_leave(v53);
    v54 = a9[1];
    if (v54)
      dispatch_release(v54);
  }
  operator delete(a9);
  v55 = a11;
  v56 = a11[2];
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
      v55 = a11;
    }
  }
  operator delete(v55);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::create@<X0>(AudioManager *this@<X0>, AudioManager **a2@<X8>)
{
  AudioManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = (AudioManager *)operator new(0x98uLL);
  AudioManager::AudioManager(v5, (const char *)this);
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1E7908FB0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 2);
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  result = 0;
  *a2 = v5;
  a2[1] = (AudioManager *)v6;
  return result;
}

void sub_1BF4A4CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AudioManager>::~unique_ptr[abi:ne180100]((AudioManager **)va);
  _Unwind_Resume(a1);
}

void sub_1BF4A4D0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::init(AudioManager *this)
{
  return 1;
}

void AudioManager::AudioManager(AudioManager *this, const char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string __dst;
  std::string v15;
  void *__p[2];
  int64_t v17;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::append(&__dst, ".", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "AudioManager", 0xCuLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_15:
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 120) = 0;
}

void sub_1BF4A4ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void AudioManager::~AudioManager(AudioManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  uint64_t j;
  NSObject *v8;
  const void *v9;
  uint64_t v10;
  uint64_t k;
  NSObject *v12;
  const void *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  const void *v21;
  NSObject *v22;
  const void *v23;
  void *v24;
  char *v25;
  NSObject *v26;
  const void *v27;
  void *v28;
  char *v29;
  NSObject *v30;
  const void *v31;
  void *v32;
  char *v33;
  NSObject *v34;
  const void *v35;
  void *v36;

  v2 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 5) = v2;
  v6 = *((_QWORD *)this + 8);
  for (j = *((_QWORD *)this + 9); j != v6; j -= 16)
  {
    v8 = *(NSObject **)(j - 8);
    if (v8)
      dispatch_release(v8);
    v9 = *(const void **)(j - 16);
    if (v9)
      _Block_release(v9);
  }
  *((_QWORD *)this + 9) = v6;
  v10 = *((_QWORD *)this + 12);
  for (k = *((_QWORD *)this + 13); k != v10; k -= 16)
  {
    v12 = *(NSObject **)(k - 8);
    if (v12)
      dispatch_release(v12);
    v13 = *(const void **)(k - 16);
    if (v13)
      _Block_release(v13);
  }
  *((_QWORD *)this + 13) = v10;
  v14 = (char *)*((_QWORD *)this + 16);
  v15 = (char *)*((_QWORD *)this + 17);
  if (v15 == v14)
  {
    *((_QWORD *)this + 17) = v14;
    if (!v15)
      goto LABEL_24;
  }
  else
  {
    do
    {
      v20 = *((_QWORD *)v15 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v15 - 2);
      if (v21)
        _Block_release(v21);
      v15 -= 16;
    }
    while (v15 != v14);
    v15 = (char *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 17) = v14;
    if (!v15)
    {
LABEL_24:
      v16 = (char *)*((_QWORD *)this + 12);
      if (!v16)
        goto LABEL_25;
LABEL_45:
      v25 = (char *)*((_QWORD *)this + 13);
      if (v25 == v16)
      {
        *((_QWORD *)this + 13) = v16;
        operator delete(v16);
        v17 = (char *)*((_QWORD *)this + 8);
        if (v17)
          goto LABEL_54;
      }
      else
      {
        do
        {
          v26 = *((_QWORD *)v25 - 1);
          if (v26)
            dispatch_release(v26);
          v27 = (const void *)*((_QWORD *)v25 - 2);
          if (v27)
            _Block_release(v27);
          v25 -= 16;
        }
        while (v25 != v16);
        v28 = (void *)*((_QWORD *)this + 12);
        *((_QWORD *)this + 13) = v16;
        operator delete(v28);
        v17 = (char *)*((_QWORD *)this + 8);
        if (v17)
          goto LABEL_54;
      }
LABEL_26:
      v18 = (char *)*((_QWORD *)this + 4);
      if (!v18)
        goto LABEL_27;
LABEL_63:
      v33 = (char *)*((_QWORD *)this + 5);
      if (v33 == v18)
      {
        *((_QWORD *)this + 5) = v18;
        operator delete(v18);
        v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        if (!v19)
          goto LABEL_72;
      }
      else
      {
        do
        {
          v34 = *((_QWORD *)v33 - 1);
          if (v34)
            dispatch_release(v34);
          v35 = (const void *)*((_QWORD *)v33 - 2);
          if (v35)
            _Block_release(v35);
          v33 -= 16;
        }
        while (v33 != v18);
        v36 = (void *)*((_QWORD *)this + 4);
        *((_QWORD *)this + 5) = v18;
        operator delete(v36);
        v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        if (!v19)
LABEL_72:
          JUMPOUT(0x1C3B89240);
      }
LABEL_28:
      std::__shared_weak_count::__release_weak(v19);
      goto LABEL_72;
    }
  }
  if (v14 == v15)
  {
    *((_QWORD *)this + 17) = v15;
    operator delete(v14);
    v16 = (char *)*((_QWORD *)this + 12);
    if (v16)
      goto LABEL_45;
  }
  else
  {
    do
    {
      v22 = *((_QWORD *)v14 - 1);
      if (v22)
        dispatch_release(v22);
      v23 = (const void *)*((_QWORD *)v14 - 2);
      if (v23)
        _Block_release(v23);
      v14 -= 16;
    }
    while (v14 != v15);
    v24 = (void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 17) = v15;
    operator delete(v24);
    v16 = (char *)*((_QWORD *)this + 12);
    if (v16)
      goto LABEL_45;
  }
LABEL_25:
  v17 = (char *)*((_QWORD *)this + 8);
  if (!v17)
    goto LABEL_26;
LABEL_54:
  v29 = (char *)*((_QWORD *)this + 9);
  if (v29 == v17)
  {
    *((_QWORD *)this + 9) = v17;
    operator delete(v17);
    v18 = (char *)*((_QWORD *)this + 4);
    if (v18)
      goto LABEL_63;
  }
  else
  {
    do
    {
      v30 = *((_QWORD *)v29 - 1);
      if (v30)
        dispatch_release(v30);
      v31 = (const void *)*((_QWORD *)v29 - 2);
      if (v31)
        _Block_release(v31);
      v29 -= 16;
    }
    while (v29 != v17);
    v32 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 9) = v17;
    operator delete(v32);
    v18 = (char *)*((_QWORD *)this + 4);
    if (v18)
      goto LABEL_63;
  }
LABEL_27:
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v19)
    goto LABEL_72;
  goto LABEL_28;
}

uint64_t AudioManager::getAudioOutputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t AudioManager::getAudioInputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

void AudioManager::registerAudioInputCallback(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  NSObject *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  NSObject *v26;
  const void *v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  double *v35;
  const double *v36;
  uint64_t v37;
  float64x2x2_t v38;

  v5 = (_QWORD *)a1[5];
  v4 = a1[6];
  if ((unint64_t)v5 < v4)
  {
    v6 = *(void **)a2;
    if (*(_QWORD *)a2)
      v6 = _Block_copy(v6);
    v7 = *(NSObject **)(a2 + 8);
    *v5 = v6;
    v5[1] = v7;
    if (v7)
      dispatch_retain(v7);
    v8 = v5 + 2;
    goto LABEL_35;
  }
  v9 = a1[4];
  v10 = (char *)v5 - v9;
  v11 = ((uint64_t)v5 - v9) >> 4;
  if ((unint64_t)(v11 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v12 = v4 - v9;
  v13 = v12 >> 3;
  if (v12 >> 3 <= (unint64_t)(v11 + 1))
    v13 = v11 + 1;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v14 = 0xFFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
  {
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_19;
    goto LABEL_18;
  }
  v15 = 0;
  v16 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_18:
    v16 = _Block_copy(v16);
LABEL_19:
  v17 = *(NSObject **)(a2 + 8);
  v18 = &v15[16 * v11];
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  if (v17)
    dispatch_retain(v17);
  v19 = &v15[16 * v14];
  v8 = v18 + 16;
  v20 = (char *)a1[4];
  v21 = (char *)a1[5];
  if (v21 == v20)
  {
    a1[4] = v18;
    a1[5] = v8;
    a1[6] = v19;
  }
  else
  {
    v22 = v21 - v20 - 16;
    if (v22 < 0xD0)
      goto LABEL_23;
    v28 = &v21[-(v22 & 0xFFFFFFFFFFFFFFF0)];
    v29 = &v10[(_QWORD)v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF0)] >= v21 || v28 - 8 >= v18;
    v30 = !v29;
    if (v28 - 16 < &v10[(_QWORD)v15 - 8] && &v10[(_QWORD)v15 - (v22 & 0xFFFFFFFFFFFFFFF0) - 16] < v21 - 8)
      goto LABEL_23;
    if (v30)
      goto LABEL_23;
    v32 = (v22 >> 4) + 1;
    v33 = 16 * (v32 & 0x1FFFFFFFFFFFFFFELL);
    v23 = &v18[-v33];
    v34 = &v21[-v33];
    v35 = (double *)(v18 - 32);
    v36 = (const double *)(v21 - 32);
    v37 = v32 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v38 = vld2q_f64(v36);
      vst2q_f64(v35, v38);
      *(_OWORD *)v36 = 0uLL;
      *((_OWORD *)v36 + 1) = 0uLL;
      v36 -= 4;
      v35 -= 4;
      v37 -= 2;
    }
    while (v37);
    v18 = v23;
    v21 = v34;
    if (v32 != (v32 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v23 = v18;
      do
      {
        v24 = *((_OWORD *)v21 - 1);
        v21 -= 16;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
      }
      while (v21 != v20);
    }
    v21 = (char *)a1[4];
    v25 = (char *)a1[5];
    a1[4] = v23;
    a1[5] = v8;
    a1[6] = v19;
    while (v25 != v21)
    {
      v26 = *((_QWORD *)v25 - 1);
      if (v26)
        dispatch_release(v26);
      v27 = (const void *)*((_QWORD *)v25 - 2);
      if (v27)
        _Block_release(v27);
      v25 -= 16;
    }
  }
  if (v21)
    operator delete(v21);
LABEL_35:
  a1[5] = v8;
}

_QWORD *AudioManager::registerAudioOutputCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[9];
  if ((unint64_t)v4 >= a1[10])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(a1 + 8, (uint64_t)a2);
    a1[9] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[9] = v4 + 2;
  }
  return result;
}

_QWORD *AudioManager::registerAudioSpeakerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[13];
  if ((unint64_t)v4 >= a1[14])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 12, (uint64_t)a2);
    a1[13] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[13] = v4 + 2;
  }
  return result;
}

_QWORD *AudioManager::registerAudioWiredPortCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[17];
  if ((unint64_t)v4 >= a1[18])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 16, (uint64_t)a2);
    a1[17] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[17] = v4 + 2;
  }
  return result;
}

uint64_t AudioManager::isAudioInputReportSupported(AudioManager *this)
{
  return 0;
}

BOOL AudioManager::isAudioOutputReportSupported(AudioManager *this)
{
  unsigned __int8 v1;
  capabilities::txpower *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1ED70FFE8);
  if ((v1 & 1) == 0)
  {
    v3 = (capabilities::txpower *)__cxa_guard_acquire(&qword_1ED70FFE8);
    if ((_DWORD)v3)
    {
      _MergedGlobals_10 = capabilities::txpower::supportedControlInput(v3);
      __cxa_guard_release(&qword_1ED70FFE8);
    }
  }
  return capabilities::txpower::operator&() != 0;
}

void sub_1BF4A5654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED70FFE8);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::isAudioSpeakerSupported(AudioManager *this)
{
  unsigned __int8 v1;
  capabilities::txpower *v3;

  if ((v1 & 1) != 0)
    return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
  if (!(_DWORD)v3)
    return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
  AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported = capabilities::txpower::supportsAudioSpeaker(v3);
  return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
}

void sub_1BF4A56D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioManager::isAudioWiredPortSupported(AudioManager *this)
{
  unsigned __int8 v1;
  capabilities::txpower *v3;

  if ((v1 & 1) != 0)
    return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
  if (!(_DWORD)v3)
    return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
  AudioManager::isAudioWiredPortSupported(void)::audioJackSupported = capabilities::txpower::supportsAudioJackReport(v3);
  return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
}

void sub_1BF4A574C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioWiredPortClients(NSObject **this)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *isa;
  char v8;
  void *v9;
  const void *v10;
  void *v11;
  char v12;
  __int128 v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  void *aBlock;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 120))
      v3 = "YES";
    else
      v3 = "NO";
    LODWORD(v13) = 136315138;
    *(_QWORD *)((char *)&v13 + 4) = v3;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Wired State: %s", (uint8_t *)&v13, 0xCu);
  }
  v4 = this[16];
  v5 = this[17];
  if (v4 != v5)
  {
    while (v4->isa)
    {
      v6 = _Block_copy(v4->isa);
      isa = v4[1].isa;
      if (isa)
        goto LABEL_11;
LABEL_12:
      v8 = *((_BYTE *)this + 120);
      if (v6)
      {
        v9 = _Block_copy(v6);
        v10 = v9;
        *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v13 + 1) = 3321888768;
        v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
        if (v9)
        {
          v11 = _Block_copy(v9);
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v13 + 1) = 3321888768;
        v12 = 1;
        v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      }
      aBlock = v11;
      v17 = v8;
      dispatch_async(isa, &v13);
      if (aBlock)
        _Block_release(aBlock);
      if ((v12 & 1) == 0)
        _Block_release(v10);
      if (isa)
        dispatch_release(isa);
      if (v6)
        _Block_release(v6);
      v4 += 2;
      if (v4 == v5)
        return;
    }
    v6 = 0;
    isa = v4[1].isa;
    if (!isa)
      goto LABEL_12;
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1BF4A5954(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::getCurrentAudioOutputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

const char *AudioManager::toString(unsigned int a1)
{
  if (a1 > 3)
    return "Unknown Audio Output";
  else
    return off_1E7909050[(char)a1];
}

{
  if (a1 > 6)
    return "Unknown Audio Input";
  else
    return off_1E7909070[(char)a1];
}

void AudioManager::notifyClients(os_log_t *this)
{
  AudioManager::notifyAudioInputClients(this);
  AudioManager::notifyAudioOutputClients(this);
  AudioManager::notifyAudioSpeakerClients(this);
  AudioManager::notifyAudioWiredPortClients(this);
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

AudioManager **std::unique_ptr<AudioManager>::~unique_ptr[abi:ne180100](AudioManager **a1)
{
  AudioManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    AudioManager::~AudioManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

AudioManager *std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::__on_zero_shared(uint64_t a1)
{
  AudioManager *result;

  result = *(AudioManager **)(a1 + 24);
  if (result)
    AudioManager::~AudioManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF5462FCLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF5462FCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF5462FCLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF5462FCLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

const char *AccessoryModule::getName(AccessoryModule *this)
{
  return "accessories-new.mod";
}

void AccessoryModule::create(capabilities::abs *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  NSObject *get_deleter;
  uint64_t v22[2];
  _QWORD v23[5];
  _QWORD *v24;
  _QWORD block[6];

  *a2 = 0;
  a2[1] = 0;
  v4 = capabilities::abs::supportsAccessoryModule(a1);
  if ((v4 & 1) == 0)
  {
    capabilities::abs::supportedSARFeatures((capabilities::abs *)v4);
    if (!capabilities::abs::operator&())
      return;
  }
  v5 = (std::__shared_weak_count_vtbl *)operator new(0xA8uLL);
  v6 = v5;
  v7 = *(_QWORD *)a1;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v22[0] = v7;
  v22[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  AccessoryModule::AccessoryModule((uint64_t)v5, v22);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E79092B0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6[1].__on_zero_shared;
  if (!on_zero_shared)
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    do
LABEL_16:
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_19;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v6[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    goto LABEL_16;
  }
LABEL_19:
  *a2 = v6;
  a2[1] = (std::__shared_weak_count_vtbl *)v11;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v23[2] = ___ZN15AccessoryModule4initEv_block_invoke;
  v23[3] = &__block_descriptor_tmp_34;
  v23[4] = v6;
  v24 = v23;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_27_5;
  block[4] = (char *)v6 + 48;
  block[5] = &v24;
  get_deleter = v6[1].__get_deleter;
  if (v6[1].__on_zero_shared_weak)
    dispatch_async_and_wait(get_deleter, block);
  else
    dispatch_sync(get_deleter, block);
}

void sub_1BF4A5F5C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[8], v1, (dispatch_function_t)std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF4A5F7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  __cxa_end_catch();
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF4A5FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF4A5FE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AccessoryModule::init(AccessoryModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15AccessoryModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_34;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_27_5;
  block[4] = (char *)this + 48;
  block[5] = &v4;
  v2 = (char *)this + 64;
  v1 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t AccessoryModule::AccessoryModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E79090B8;
  v9 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v10 = dispatch_queue_create("accessories-new.mod", v9);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = v10;
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 72) = 0;
    dispatch_release(v11);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 80), "com.apple.telephony.abm", "accessories-new.mod");
  *(_QWORD *)a1 = off_1E79090B8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void sub_1BF4A61DC(_Unwind_Exception *a1)
{
  Service *v1;
  _QWORD *v2;

  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void AccessoryModule::~AccessoryModule(AccessoryModule *this)
{
  char *v2;
  NSObject *v3;
  AccessoryModule *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint8_t v22[16];

  *(_QWORD *)this = off_1E79090B8;
  v2 = (char *)this + 80;
  v3 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone", v22, 2u);
  }
  v4 = (AccessoryModule *)*((_QWORD *)this + 19);
  if (v4 == (AccessoryModule *)((char *)this + 128))
  {
    v5 = 4;
    v4 = (AccessoryModule *)((char *)this + 128);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_8:
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    v7 = *((_QWORD *)this + 14);
    v8 = (void *)*((_QWORD *)this + 13);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v6;
    operator delete(v8);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v12)
    goto LABEL_23;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_23:
    MEMORY[0x1C3B89240](v2);
    v15 = *((_QWORD *)this + 9);
    if (!v15)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  MEMORY[0x1C3B89240](v2);
  v15 = *((_QWORD *)this + 9);
  if (v15)
LABEL_24:
    dispatch_release(v15);
LABEL_25:
  v16 = *((_QWORD *)this + 8);
  if (v16)
    dispatch_release(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  *(_QWORD *)this = off_1E7908A38;
  v18 = *((_QWORD *)this + 3);
  if (v18)
  {
    v19 = *((_QWORD *)this + 4);
    v20 = (void *)*((_QWORD *)this + 3);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v18;
    operator delete(v20);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

{
  void *v1;

  AccessoryModule::~AccessoryModule(this);
  operator delete(v1);
}

_BYTE *AccessoryModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void ___ZN15AccessoryModule4initEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t (***v12)(_QWORD, uint64_t);
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t v29;
  uint8_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint8_t **v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  dispatch_object_t v64;
  dispatch_object_t v65;
  dispatch_object_t v66;
  dispatch_object_t object;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  uint8_t buf[8];
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  uint8_t *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  _QWORD v83[3];
  _QWORD *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[10];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = (std::__shared_weak_count *)v1[7];
  if (!v3 || (v4 = v1[6], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
  {
LABEL_12:
    v12 = (uint64_t (***)(_QWORD, uint64_t))qword_1ED70FAF0;
    v11 = off_1ED70FAF8;
    v68 = qword_1ED70FAF0;
    v69 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (uint64_t (***)(_QWORD, uint64_t))operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v12, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v11 = operator new(0x20uLL);
  *v11 = &unk_1E78FFBE0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v12;
  v13 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v12;
  off_1ED70FAF8 = v11;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_12;
  }
  v68 = (uint64_t)v12;
  v69 = (std::__shared_weak_count *)v11;
LABEL_20:
  v16 = v11 + 1;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
LABEL_22:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v18 = (const void *)*MEMORY[0x1E0CFB978];
  v19 = strlen((const char *)*MEMORY[0x1E0CFB978]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    v77 = (std::__shared_weak_count *)v20;
    v78 = (std::__shared_weak_count_vtbl *)(v23 | 0x8000000000000000);
    *(_QWORD *)buf = v21;
    goto LABEL_29;
  }
  HIBYTE(v78) = v19;
  v21 = buf;
  if (v19)
LABEL_29:
    memmove(v21, v18, v20);
  *((_BYTE *)v21 + v20) = 0;
  v24 = Preferences::getPreference<BOOL>(v12, (const char *)buf, (ctu::cf *)(v1 + 20));
  if (SHIBYTE(v78) < 0)
  {
    operator delete(*(void **)buf);
    v25 = v69;
    if (!v69)
      goto LABEL_37;
  }
  else
  {
    v25 = v69;
    if (!v69)
      goto LABEL_37;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((v24 & 1) != 0)
      goto LABEL_40;
    goto LABEL_38;
  }
LABEL_37:
  if ((v24 & 1) != 0)
    goto LABEL_40;
LABEL_38:
  v28 = v1[10];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v28, OS_LOG_TYPE_ERROR, "Failed getting AccessorySimulate status from ABMProperties", buf, 2u);
  }
  do
LABEL_40:
    v29 = __ldxr(p_shared_weak_owners);
  while (__stxr(v29 + 1, p_shared_weak_owners));
  v79 = 0;
  v30 = (uint8_t *)operator new(0x20uLL);
  *(_QWORD *)v30 = &off_1E7909338;
  *((_QWORD *)v30 + 1) = v1;
  *((_QWORD *)v30 + 2) = v4;
  *((_QWORD *)v30 + 3) = v6;
  v79 = v30;
  v31 = v1 + 16;
  v33 = v1 + 19;
  v32 = (_QWORD *)v1[19];
  v1[19] = 0;
  if (v32 == v1 + 16)
  {
    v34 = 4;
    v32 = v1 + 16;
  }
  else
  {
    if (!v32)
      goto LABEL_47;
    v34 = 5;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v34))(v32);
  v30 = v79;
  v35 = (uint8_t **)(v1 + 19);
  if (!v79)
  {
LABEL_48:
    *v35 = 0;
    goto LABEL_49;
  }
  if (v79 != buf)
  {
LABEL_47:
    v35 = &v79;
    *v33 = (uint64_t)v30;
    goto LABEL_48;
  }
  *v33 = (uint64_t)v31;
  (*(void (**)(uint8_t *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v1 + 16);
LABEL_49:
  v36 = v79;
  if (v79 == buf)
  {
    v37 = 4;
    v36 = buf;
  }
  else
  {
    if (!v79)
      goto LABEL_54;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_54:
  if (!*((_BYTE *)v1 + 160))
  {
    v39 = *v33;
    if (*v33)
    {
      if ((_QWORD *)v39 == v31)
      {
        v75 = v74;
        (*(void (**)(_QWORD *, _QWORD *))(*v31 + 24))(v1 + 16, v74);
LABEL_79:
        v46 = v1[8];
        v66 = v46;
        if (v46)
          dispatch_retain(v46);
        CoreAccessoriesDelegate::create(v74, &v66, (std::__shared_weak_count_vtbl **)buf);
        v47 = *v33;
        if (*v33)
        {
          if ((_QWORD *)v47 == v31)
          {
            v73 = v72;
            (*(void (**)(_QWORD *, _QWORD *))(*v31 + 24))(v1 + 16, v72);
LABEL_86:
            v48 = v1[8];
            v65 = v48;
            if (v48)
              dispatch_retain(v48);
            IOKitAccessoriesDelegate::create(v72, &v65, &v78);
            v49 = *v33;
            if (*v33)
            {
              if ((_QWORD *)v49 == v31)
              {
                v71 = v70;
                (*(void (**)(_QWORD *, _QWORD *))(*v31 + 24))(v1 + 16, v70);
LABEL_93:
                v50 = v1[8];
                v64 = v50;
                if (v50)
                  dispatch_retain(v50);
                IOPortUSBCAccessoriesDelegate::create(v70, &v64, &v80);
                std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>((uint64_t)(v1 + 13), buf, &v82, 3uLL);
                v51 = v81;
                if (v81)
                {
                  v52 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v54 = (std::__shared_weak_count *)v79;
                if (v79)
                {
                  v55 = (unint64_t *)(v79 + 8);
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                v57 = v77;
                if (v77)
                {
                  v58 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                if (v64)
                  dispatch_release(v64);
                v60 = v71;
                if (v71 == v70)
                {
                  v61 = 4;
                  v60 = v70;
                }
                else
                {
                  if (!v71)
                    goto LABEL_117;
                  v61 = 5;
                }
                (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_117:
                if (v65)
                  dispatch_release(v65);
                v62 = v73;
                if (v73 == v72)
                {
                  v63 = 4;
                  v62 = v72;
                }
                else
                {
                  if (!v73)
                    goto LABEL_124;
                  v63 = 5;
                }
                (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_124:
                if (v66)
                  dispatch_release(v66);
                v44 = v75;
                if (v75 == v74)
                {
                  v45 = 4;
                  v44 = v74;
                  goto LABEL_130;
                }
                goto LABEL_127;
              }
              v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
            }
            v71 = (_QWORD *)v49;
            goto LABEL_93;
          }
          v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
        }
        v73 = (_QWORD *)v47;
        goto LABEL_86;
      }
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
    }
    v75 = (_QWORD *)v39;
    goto LABEL_79;
  }
  v38 = *v33;
  if (!*v33)
  {
LABEL_58:
    v84 = (_QWORD *)v38;
    goto LABEL_67;
  }
  if ((_QWORD *)v38 != v31)
  {
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
    goto LABEL_58;
  }
  v84 = v83;
  (*(void (**)(_QWORD *, _QWORD *))(*v31 + 24))(v1 + 16, v83);
LABEL_67:
  v40 = v1[8];
  object = v40;
  if (v40)
    dispatch_retain(v40);
  AccessorySimulatorDelegate::create(v83, &object, (std::__shared_weak_count_vtbl **)buf);
  std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>((uint64_t)(v1 + 13), buf, &v78, 1uLL);
  v41 = v77;
  if (v77)
  {
    v42 = (unint64_t *)&v77->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (object)
    dispatch_release(object);
  v44 = v84;
  if (v84 == v83)
  {
    v45 = 4;
    v44 = v83;
LABEL_130:
    (*(void (**)(void))(*v44 + 8 * v45))();
    goto LABEL_131;
  }
LABEL_127:
  if (v44)
  {
    v45 = 5;
    goto LABEL_130;
  }
LABEL_131:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF4A6BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, dispatch_object_t a11, dispatch_object_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AccessoryModule::shutdown(uint64_t a1, uint64_t a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  _QWORD v5[5];
  dispatch_group_t group;

  v3 = (uint64_t *)(a1 + 48);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN15AccessoryModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v5[3] = &__block_descriptor_tmp_4_3;
  v4 = *a3;
  v5[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v3, (uint64_t)v5);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN15AccessoryModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 96);
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void AccessoryModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[7];
  if (!v4 || (v5 = a1[6], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[8];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped<AccessoryModule::initialize(dispatch::group_session)::$_0>(AccessoryModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AccessoryModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AccessoryModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AccessoryModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  __int128 v42;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v41 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v41) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v8 = v42;
  v42 = 0uLL;
  v9 = this[12];
  *(_OWORD *)(this + 11) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = cf;
    if (!cf)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = cf;
  if (cf)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v16 = this[7];
  if (!v16 || (v17 = this[6], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v38 = v29 | 0x8000000000000000;
    __p[0] = v27;
  }
  else
  {
    HIBYTE(v38) = v25;
    v27 = __p;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 1174405120;
  v33[2] = ___ZN15AccessoryModule25finishInitialization_syncEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_6_9;
  v33[4] = this;
  v33[5] = v17;
  v34 = v19;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(v33);
  v32 = this[8];
  if (v32)
    dispatch_retain((dispatch_object_t)this[8]);
  aBlock = v31;
  object = v32;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[11]);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF4A73A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN15AccessoryModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFTypeRef v8;
  size_t v9;
  void **v10;
  void **v11;
  void **v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *j;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *i;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[2];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  uint64_t v29;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v28 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v25[0] = 0xAAAAAAAAAAAAAAAALL;
          v25[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v25, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          __p[0] = 0;
          __p[1] = 0;
          v24 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8936C](&v29);
          v24 = v22;
          *(_OWORD *)__p = v21;
          if (v22 >= 0)
            v9 = HIBYTE(v22);
          else
            v9 = *((_QWORD *)&v21 + 1);
          if (v9 == strlen((const char *)*MEMORY[0x1E0CFB980])
            && (v22 >= 0 ? (v10 = __p) : (v10 = (void **)__p[0]), !memcmp(v10, (const void *)*MEMORY[0x1E0CFB980], v9)))
          {
            v16 = v5[10];
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v21) = 0;
              _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Starting all delegates", (uint8_t *)&v21, 2u);
            }
            v17 = (_QWORD *)v5[13];
            for (i = (_QWORD *)v5[14]; v17 != i; v17 += 2)
              (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 32))(*v17);
          }
          else if (v9 == strlen((const char *)*MEMORY[0x1E0CFBB68])
                 && (v22 >= 0 ? (v11 = __p) : (v11 = (void **)__p[0]),
                     !memcmp(v11, (const void *)*MEMORY[0x1E0CFBB68], v9))
                 || v9 == strlen((const char *)*MEMORY[0x1E0CFBD98])
                 && (v22 >= 0 ? (v12 = __p) : (v12 = (void **)__p[0]),
                     !memcmp(v12, (const void *)*MEMORY[0x1E0CFBD98], v9)))
          {
            v13 = v5[10];
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v21) = 0;
              _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", (uint8_t *)&v21, 2u);
            }
            v14 = (_QWORD *)v5[13];
            for (j = (_QWORD *)v5[14]; v14 != j; v14 += 2)
              (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 40))(*v14);
          }
          if (SHIBYTE(v24) < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B893A8](v25);
          v8 = cf;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void AccessoryModule::startDelegates_sync(AccessoryModule *this)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint8_t v6[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting all delegates", v6, 2u);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 13);
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  while (v4 != v3)
  {
    v5 = *v4;
    v4 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
}

void AccessoryModule::stopDelegates_sync(AccessoryModule *this)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint8_t v6[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", v6, 2u);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 13);
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  while (v4 != v3)
  {
    v5 = *v4;
    v4 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15AccessoryModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15AccessoryModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AccessoryModule::handleAccessoryConnectionEvent_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  NSObject *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  capabilities::abs *v22;
  capabilities::abs *v23;
  NSObject *v24;
  xpc_object_t v25;
  uint64_t v26;
  xpc_object_t v27;
  CommandDriverFactory *v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  const void *v44;
  int64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  const void *v52;
  int64_t v53;
  char *v54;
  char *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  const void *v58;
  size_t v59;
  size_t v60;
  __int128 *p_buf;
  uint64_t v62;
  uint64_t v63;
  xpc_object_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  _QWORD v71[5];
  void *v72;
  void *v73;
  char *v74;
  void *v75;
  dispatch_object_t object;
  void *__p;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  void *v86;
  dispatch_object_t v87;
  xpc_object_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  _QWORD aBlock[6];
  std::__shared_weak_count *v92;
  capabilities::abs *v93;
  dispatch_object_t v94;
  __int128 buf;
  unint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 48);
  v5 = *(std::__shared_weak_count **)(a1 + 56);
  v6 = (uint64_t *)(a1 + 48);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
    v16 = *a2;
    v17 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v16)
      v17 = 0;
    if (v17)
    {
LABEL_11:
      v18 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v16;
        _os_log_error_impl(&dword_1BF335000, v18, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_90;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    v16 = *a2;
    v19 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v16)
      v19 = 0;
    if (v19)
      goto LABEL_11;
  }
  v93 = (capabilities::abs *)0xAAAAAAAAAAAAAAAALL;
  v94 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v20 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_8_10;
  aBlock[4] = a1;
  aBlock[5] = v7;
  v92 = v11;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (capabilities::abs *)_Block_copy(aBlock);
  v23 = v22;
  v24 = *(NSObject **)(a1 + 64);
  if (v24)
    dispatch_retain(*(dispatch_object_t *)(a1 + 64));
  v93 = v23;
  v94 = v24;
  capabilities::abs::supportedSARFeatures(v22);
  if (!capabilities::abs::operator&())
  {
    v89 = 0xAAAAAAAAAAAAAAAALL;
    v90 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    v28 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v29 = off_1ED70FD08;
    if (!off_1ED70FD08)
    {
      CommandDriverFactory::create_default_global(v28);
      v30 = buf;
      buf = 0uLL;
      v31 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
      off_1ED70FD08 = v30;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v29 = off_1ED70FD08;
    }
    v37 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    v80 = v29;
    v81 = *(&off_1ED70FD08 + 1);
    if (*(&off_1ED70FD08 + 1))
    {
      v38 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v29 + 16))(&v82, v29);
    v89 = 0;
    v90 = 0;
    if (v83)
    {
      v90 = std::__shared_weak_count::lock(v83);
      if (v90)
        v89 = v82;
      if (v83)
        std::__shared_weak_count::__release_weak(v83);
    }
    if (v37)
    {
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v42 = v89;
    if (v89)
    {
      __p = 0;
      v78 = 0;
      v79 = 0;
      v44 = *(const void **)a3;
      v43 = *(_QWORD *)(a3 + 8);
      v45 = v43 - *(_QWORD *)a3;
      if (v43 != *(_QWORD *)a3)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v45 >> 2) > 0x1555555555555555)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        __p = operator new(v45);
        v79 = (char *)__p + 4 * (v45 >> 2);
        memcpy(__p, v44, v45);
        v78 = v79;
      }
      v46 = v93;
      if (v93)
        v46 = _Block_copy(v93);
      v75 = v46;
      object = v94;
      if (v94)
        dispatch_retain(v94);
      (*(void (**)(unint64_t, void **, void **))(*(_QWORD *)v42 + 376))(v42, &__p, &v75);
      if (object)
        dispatch_release(object);
      if (v75)
        _Block_release(v75);
      if (__p)
      {
        v78 = __p;
        operator delete(__p);
      }
    }
    v47 = v90;
    if (v90)
    {
      v48 = &v90->__shared_owners_;
      do
        v49 = __ldaxr((unint64_t *)v48);
      while (__stlxr(v49 - 1, (unint64_t *)v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    goto LABEL_79;
  }
  v25 = xpc_dictionary_create(0, 0, 0);
  v26 = MEMORY[0x1E0C812F8];
  if (v25 || (v25 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v25) == v26)
    {
      xpc_retain(v25);
      v27 = v25;
    }
    else
    {
      v27 = xpc_null_create();
    }
  }
  else
  {
    v27 = xpc_null_create();
    v25 = 0;
  }
  xpc_release(v25);
  v50 = MEMORY[0x1C3B8A86C](v27);
  if (v50 != v26)
  {
    v51 = *(NSObject **)(a1 + 80);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BF335000, v51, OS_LOG_TYPE_ERROR, "Failed to create accessory input dictionary!", (uint8_t *)&buf, 2u);
    }
    goto LABEL_74;
  }
  v56 = xpc_data_create(*(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E0CFB208], v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  v89 = 0xAAAAAAAAAAAAAAAALL;
  v90 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v58 = (const void *)*MEMORY[0x1E0CFB998];
  v59 = strlen((const char *)*MEMORY[0x1E0CFB998]);
  if (v59 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v60 = v59;
  if (v59 >= 0x17)
  {
    v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v62 = v59 | 7;
    v63 = v62 + 1;
    p_buf = (__int128 *)operator new(v62 + 1);
    *((_QWORD *)&buf + 1) = v60;
    v96 = v63 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
    v20 = MEMORY[0x1E0C809B0];
  }
  else
  {
    HIBYTE(v96) = v59;
    p_buf = &buf;
    if (!v59)
      goto LABEL_101;
  }
  memmove(p_buf, v58, v60);
LABEL_101:
  *((_BYTE *)p_buf + v60) = 0;
  v88 = v27;
  if (v27)
  {
    xpc_retain(v27);
    v26 = MEMORY[0x1E0C812F8];
  }
  else
  {
    v64 = xpc_null_create();
    v26 = MEMORY[0x1E0C812F8];
    v88 = v64;
  }
  v86 = 0;
  v87 = 0;
  abm::client::Command::create();
  xpc_release(v88);
  v88 = 0;
  if (SHIBYTE(v96) < 0)
    operator delete((void *)buf);
  v84 = v89;
  v85 = v90;
  if (v90)
  {
    v65 = &v90->__shared_owners_;
    do
      v66 = __ldxr((unint64_t *)v65);
    while (__stxr(v66 + 1, (unint64_t *)v65));
  }
  AppleBasebandManager::perform();
  if (v85)
  {
    v67 = &v85->__shared_owners_;
    do
      v68 = __ldaxr((unint64_t *)v67);
    while (__stlxr(v68 - 1, (unint64_t *)v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v90)
  {
    v69 = &v90->__shared_owners_;
    do
      v70 = __ldaxr((unint64_t *)v69);
    while (__stlxr(v70 - 1, (unint64_t *)v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
LABEL_74:
  xpc_release(v27);
  if (v50 == v26)
  {
LABEL_79:
    v71[0] = v20;
    v71[1] = 1174405120;
    v71[2] = ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke_9;
    v71[3] = &__block_descriptor_tmp_19_6;
    v71[4] = a1;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v52 = *(const void **)a3;
    v53 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v53)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v53 >> 2) > 0x1555555555555555)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v54 = (char *)operator new(v53);
      v55 = &v54[4 * (v53 >> 2)];
      v72 = v54;
      v74 = v55;
      memcpy(v54, v52, v53);
      v73 = v55;
    }
    ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v6, (uint64_t)v71);
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
    }
    if (v94)
      dispatch_release(v94);
    if (v93)
      _Block_release(v93);
    goto LABEL_88;
  }
  if (v94)
    dispatch_release(v94);
  if (v93)
    _Block_release(v93);
LABEL_88:
  if (v92)
    std::__shared_weak_count::__release_weak(v92);
LABEL_90:
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1BF4A80C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,xpc_object_t object,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 80);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed sending accessory info update: %@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending accessory info update", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke_9(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  const char *v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  const char *v46;
  size_t v47;
  NSObject *v48;
  size_t v49;
  void **p_dst;
  uint64_t v51;
  const void **v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  xpc_object_t v59;
  xpc_object_t v60;
  const char *v61;
  xpc_object_t v62;
  xpc_object_t v63;
  const char *v64;
  xpc_object_t v65;
  xpc_object_t v66;
  const char *v67;
  xpc_object_t v68;
  xpc_object_t v69;
  const char *v70;
  xpc_object_t v71;
  xpc_object_t v72;
  const char *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  const char *v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  xpc_object_t v92;
  xpc_object_t v93;
  xpc_object_t v94;
  size_t v95;
  size_t v96;
  void **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  const char *v102;
  char *v103;
  const char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *string;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *key;
  char *__s;
  int v119;
  const void *v120;
  xpc_object_t object;
  void **__dst;
  size_t v123;
  int64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 __p;
  __int128 v131;
  unint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint8_t buf[4];
  void **v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v132 = 0xAAAAAAAAAAAAAAAALL;
  v142 = v3;
  v141 = v3;
  v140 = v3;
  v139 = v3;
  v138 = v3;
  v137 = v3;
  v136 = v3;
  v135 = v3;
  v134 = v3;
  v131 = v3;
  __p = v3;
  v129 = v3;
  v128 = v3;
  v127 = v3;
  v126 = v3;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v133 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v125 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v125 + *(_QWORD *)(v125 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v125 + *(_QWORD *)(v125 - 24));
  std::ios_base::init(v7, &v126);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v125 = v4 + 24;
  v133 = v5;
  std::streambuf::basic_streambuf();
  v101 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)&v126 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v131 = 0u;
  LODWORD(v132) = 16;
  v8 = a1[5];
  v9 = a1[6];
  if (v8 != v9)
  {
    v10 = (const char *)*MEMORY[0x1E0CFB340];
    key = (char *)*MEMORY[0x1E0CFB428];
    v116 = (char *)*MEMORY[0x1E0CFB418];
    v115 = (char *)*MEMORY[0x1E0CFB420];
    v114 = (char *)*MEMORY[0x1E0CFB7B8];
    v113 = (char *)*MEMORY[0x1E0CFBA08];
    string = (char *)*MEMORY[0x1E0CFB368];
    v111 = (char *)*MEMORY[0x1E0CFB3E8];
    v110 = (char *)*MEMORY[0x1E0CFB658];
    v119 = 1;
    v108 = (char *)*MEMORY[0x1E0CFBCB8];
    v109 = (char *)*MEMORY[0x1E0CFB3F0];
    v106 = (char *)*MEMORY[0x1E0CFB9D8];
    v107 = (char *)*MEMORY[0x1E0CFB278];
    v104 = (const char *)*MEMORY[0x1E0CFB020];
    v105 = (char *)*MEMORY[0x1E0CFAFE8];
    v103 = (char *)*MEMORY[0x1E0CFB018];
    __s = (char *)*MEMORY[0x1E0CFB5E0];
    v102 = (const char *)*MEMORY[0x1E0CFB340];
    while (1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v125, (uint64_t)"[", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] Accessory Info:", 17);
      LOBYTE(__dst) = 10;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&__dst, 1);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"    ", 4);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ID:           ", 14);
      v16 = (const char *)abm::asString();
      v17 = strlen(v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      LOBYTE(__dst) = 10;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&__dst, 1);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"    ", 4);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"State:        ", 14);
      v22 = (const char *)abm::asString();
      v23 = strlen(v22);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      LOBYTE(__dst) = 10;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&__dst, 1);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"    ", 4);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Color:        ", 14);
      v28 = (const char *)abm::asString();
      v29 = strlen(v28);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      LOBYTE(__dst) = 10;
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&__dst, 1);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"    ", 4);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Power:        ", 14);
      v34 = (const char *)abm::asString();
      v35 = strlen(v34);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      LOBYTE(__dst) = 10;
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)&__dst, 1);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"    ", 4);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Material:     ", 14);
      v40 = (const char *)abm::asString();
      v41 = strlen(v40);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
      LOBYTE(__dst) = 10;
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)&__dst, 1);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"    ", 4);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Connection:   ", 14);
      v46 = (const char *)abm::asString();
      v47 = strlen(v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
      v48 = *(NSObject **)(v2 + 80);
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      if ((v132 & 0x10) != 0)
        break;
      if ((v132 & 8) != 0)
      {
        v51 = v128;
        v52 = (const void **)&v127;
        goto LABEL_10;
      }
      v49 = 0;
      HIBYTE(v124) = 0;
      p_dst = (void **)&__dst;
LABEL_19:
      *((_BYTE *)p_dst + v49) = 0;
      v58 = (void **)&__dst;
      if (v124 < 0)
        v58 = __dst;
      *(_DWORD *)buf = 136315138;
      v144 = v58;
      _os_log_impl(&dword_1BF335000, v48, OS_LOG_TYPE_DEFAULT, "#I Sending accessory info update:\n%s", buf, 0xCu);
      if (SHIBYTE(v124) < 0)
        operator delete(__dst);
LABEL_23:
      v59 = xpc_dictionary_create(0, 0, 0);
      if (v59 || (v59 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v59) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v59);
          v60 = v59;
        }
        else
        {
          v60 = xpc_null_create();
        }
      }
      else
      {
        v60 = xpc_null_create();
        v59 = 0;
      }
      xpc_release(v59);
      v61 = (const char *)abm::asString();
      v62 = xpc_string_create(v61);
      if (!v62)
        v62 = xpc_null_create();
      xpc_dictionary_set_value(v60, v10, v62);
      v63 = xpc_null_create();
      xpc_release(v62);
      xpc_release(v63);
      v64 = (const char *)abm::asString();
      v65 = xpc_string_create(v64);
      if (!v65)
        v65 = xpc_null_create();
      xpc_dictionary_set_value(v60, key, v65);
      v66 = xpc_null_create();
      xpc_release(v65);
      xpc_release(v66);
      v67 = (const char *)abm::asString();
      v68 = xpc_string_create(v67);
      if (!v68)
        v68 = xpc_null_create();
      xpc_dictionary_set_value(v60, v116, v68);
      v69 = xpc_null_create();
      xpc_release(v68);
      xpc_release(v69);
      v70 = (const char *)abm::asString();
      v71 = xpc_string_create(v70);
      if (!v71)
        v71 = xpc_null_create();
      xpc_dictionary_set_value(v60, v115, v71);
      v72 = xpc_null_create();
      xpc_release(v71);
      xpc_release(v72);
      v73 = (const char *)abm::asString();
      v74 = xpc_string_create(v73);
      if (!v74)
        v74 = xpc_null_create();
      xpc_dictionary_set_value(v60, v114, v74);
      v75 = xpc_null_create();
      xpc_release(v74);
      xpc_release(v75);
      v76 = (const char *)abm::asString();
      v77 = xpc_string_create(v76);
      if (!v77)
        v77 = xpc_null_create();
      xpc_dictionary_set_value(v60, v113, v77);
      v78 = xpc_null_create();
      xpc_release(v77);
      xpc_release(v78);
      v79 = xpc_dictionary_create(0, 0, 0);
      if (v79 || (v79 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v79) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v79);
          v80 = v79;
        }
        else
        {
          v80 = xpc_null_create();
        }
      }
      else
      {
        v80 = xpc_null_create();
        v79 = 0;
      }
      xpc_release(v79);
      v81 = xpc_string_create(string);
      if (!v81)
        v81 = xpc_null_create();
      xpc_dictionary_set_value(v80, v111, v81);
      v82 = xpc_null_create();
      xpc_release(v81);
      xpc_release(v82);
      v83 = xpc_string_create(v110);
      if (!v83)
        v83 = xpc_null_create();
      xpc_dictionary_set_value(v80, v109, v83);
      v84 = xpc_null_create();
      xpc_release(v83);
      xpc_release(v84);
      v85 = xpc_string_create(v108);
      if (!v85)
        v85 = xpc_null_create();
      xpc_dictionary_set_value(v80, v107, v85);
      v86 = xpc_null_create();
      xpc_release(v85);
      xpc_release(v86);
      if (v60)
      {
        xpc_retain(v60);
        v87 = v60;
      }
      else
      {
        v87 = xpc_null_create();
      }
      xpc_dictionary_set_value(v80, v106, v87);
      v88 = xpc_null_create();
      xpc_release(v87);
      xpc_release(v88);
      v89 = xpc_dictionary_create(0, 0, 0);
      if (v89 || (v89 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v89) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v89);
          v90 = v89;
        }
        else
        {
          v90 = xpc_null_create();
        }
      }
      else
      {
        v90 = xpc_null_create();
        v89 = 0;
      }
      xpc_release(v89);
      v91 = xpc_string_create(v105);
      if (!v91)
        v91 = xpc_null_create();
      xpc_dictionary_set_value(v90, v104, v91);
      v92 = xpc_null_create();
      xpc_release(v91);
      xpc_release(v92);
      if (v80)
      {
        xpc_retain(v80);
        v93 = v80;
      }
      else
      {
        v93 = xpc_null_create();
      }
      xpc_dictionary_set_value(v90, v103, v93);
      v94 = xpc_null_create();
      xpc_release(v93);
      xpc_release(v94);
      v95 = strlen(__s);
      if (v95 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v96 = v95;
      if (v95 >= 0x17)
      {
        v98 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v95 | 7) != 0x17)
          v98 = v95 | 7;
        v99 = v98 + 1;
        v97 = (void **)operator new(v98 + 1);
        v123 = v96;
        v124 = v99 | 0x8000000000000000;
        __dst = v97;
      }
      else
      {
        HIBYTE(v124) = v95;
        v97 = (void **)&__dst;
        if (!v95)
        {
          LOBYTE(__dst) = 0;
          object = v90;
          if (!v90)
            goto LABEL_76;
          goto LABEL_71;
        }
      }
      memmove(v97, __s, v96);
      *((_BYTE *)v97 + v96) = 0;
      object = v90;
      if (!v90)
      {
LABEL_76:
        object = xpc_null_create();
        goto LABEL_77;
      }
LABEL_71:
      xpc_retain(v90);
LABEL_77:
      v120 = 0;
      Service::runCommand(v2, (uint64_t)&__dst, &object, &v120);
      xpc_release(object);
      object = 0;
      if (SHIBYTE(v124) < 0)
        operator delete(__dst);
      xpc_release(v90);
      xpc_release(v80);
      xpc_release(v60);
      ++v119;
      v8 += 12;
      if (v8 == v9)
        goto LABEL_80;
    }
    v51 = *((_QWORD *)&v131 + 1);
    v52 = (const void **)&v128 + 1;
    if (*((_QWORD *)&v131 + 1) < (unint64_t)v129)
    {
      *((_QWORD *)&v131 + 1) = v129;
      v51 = v129;
      v52 = (const void **)&v128 + 1;
    }
LABEL_10:
    v53 = *v52;
    v49 = v51 - (_QWORD)*v52;
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v49 >= 0x17)
    {
      v54 = v9;
      v55 = v2;
      v56 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v56 = v49 | 7;
      v57 = v56 + 1;
      p_dst = (void **)operator new(v56 + 1);
      v123 = v49;
      v124 = v57 | 0x8000000000000000;
      __dst = p_dst;
      v2 = v55;
      v9 = v54;
    }
    else
    {
      HIBYTE(v124) = v51 - *(_BYTE *)v52;
      p_dst = (void **)&__dst;
      if (!v49)
        goto LABEL_18;
    }
    memmove(p_dst, v53, v49);
LABEL_18:
    v10 = v102;
    goto LABEL_19;
  }
LABEL_80:
  v125 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v125 + *(_QWORD *)(v125 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v126 = v101;
  if (SBYTE7(v131) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B89E4C](&v133);
}

void sub_1BF4A8F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C](a11);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 40);
  v2 = *(_BYTE **)(a2 + 48);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 2) >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v4);
    v5[5] = v6;
    v5[6] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[7] = v7;
    result = memcpy(v6, v3, v4);
    v5[6] = v7;
  }
  return result;
}

void sub_1BF4A9224(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_57:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_57;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_57;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 64), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79092F8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15AccessoryModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15AccessoryModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *_ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E7909338;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEED0Ev(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E7909338;
  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E7909338;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E7909338;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEEclEOSA_OSF_(_QWORD *a1, const void **a2, uint64_t a3)
{
  const void *v4;
  _BYTE *v5;
  _BYTE *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  int64_t v11;
  char *v12;
  char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[5];
  CFTypeRef cf;
  void *__p;
  void *v19;
  char *v20;

  v4 = *a2;
  *a2 = 0;
  v5 = *(_BYTE **)a3;
  v6 = *(_BYTE **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v7 = (std::__shared_weak_count *)a1[3];
  if (v7)
  {
    v8 = a1[1];
    v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      v10 = v9;
      if (a1[2])
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 1174405120;
        v16[2] = ___ZZZN15AccessoryModule4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS6_9allocatorIS9_EEEE_block_invoke;
        v16[3] = &__block_descriptor_tmp_26_2;
        v16[4] = v8;
        cf = v4;
        if (v4)
          CFRetain(v4);
        __p = 0;
        v19 = 0;
        v20 = 0;
        v11 = v6 - v5;
        if (v6 != v5)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v12 = (char *)operator new(v11);
          v13 = &v12[4 * (v11 >> 2)];
          __p = v12;
          v20 = v13;
          memcpy(v12, v5, v11);
          v19 = v13;
        }
        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v8 + 48), (uint64_t)v16);
        if (__p)
        {
          v19 = __p;
          operator delete(__p);
        }
        if (cf)
          CFRelease(cf);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v5)
    operator delete(v5);
  if (v4)
    CFRelease(v4);
}

void sub_1BF4A9AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, void *__p, uint64_t a17)
{
  const void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (__p)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (v22)
  {
    if (!v18)
      goto LABEL_9;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v18)
    {
LABEL_9:
      if (!v17)
LABEL_14:
        _Unwind_Resume(exception_object);
LABEL_13:
      CFRelease(v17);
      goto LABEL_14;
    }
  }
  operator delete(v18);
  if (!v17)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t _ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN15AccessoryModule4initEvEUb_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN15AccessoryModule4initEvEUb_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN15AccessoryModule4initEvEUb_E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN15AccessoryModule4initEvEUb_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE11target_typeEv()
{
  return &_ZTIZZN15AccessoryModule4initEvEUb_E3__0;
}

void ___ZZZN15AccessoryModule4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS6_9allocatorIS9_EEEE_block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  const void *v11;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  v11 = v2;
  if (v2)
    CFRetain(v2);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v5 = (_BYTE *)a1[6];
  v4 = (_BYTE *)a1[7];
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v7 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v6);
    v8 = v7;
    v10 = &v7[4 * (v6 >> 2)];
    memcpy(v7, v5, v6);
    v9 = v10;
  }
  AccessoryModule::handleAccessoryConnectionEvent_sync(v3, (uint64_t *)&v11, (uint64_t)&v8);
  if (v7)
    operator delete(v7);
  if (v2)
    CFRelease(v2);
}

void sub_1BF4A9C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

const void *__copy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(_QWORD *a1, _QWORD *a2)
{
  const void *result;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  result = (const void *)a2[5];
  a1[5] = result;
  if (result)
    result = CFRetain(result);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v6 = (_BYTE *)a2[6];
  v5 = (_BYTE *)a2[7];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v7);
    a1[6] = v8;
    a1[7] = v8;
    v9 = &v8[4 * (v7 >> 2)];
    a1[8] = v9;
    result = memcpy(v8, v6, v7);
    a1[7] = v9;
  }
  return result;
}

void sub_1BF4A9D8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(_QWORD *a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
}

void dispatch::async<void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped<AccessoryModule::initialize(dispatch::group_session)::$_0>(AccessoryModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AccessoryModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AccessoryModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *p_p;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v41;
  void *__p;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  const void *v49;
  void *v50[2];
  unint64_t v51;
  void **__dst;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  const void *v59;
  _QWORD aBlock[6];
  std::__shared_weak_count *v61;
  const void *v62;

  v41 = *(uint64_t **)a1;
  v1 = **(_QWORD **)a1;
  v2 = *(std::__shared_weak_count **)(v1 + 56);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 48), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFBFB8];
  v11 = strlen((const char *)*MEMORY[0x1E0CFBFB8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v53 = v12;
    v54 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v54) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = (void **)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_31_4;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v61 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v62 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v62);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v54) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBFC8];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBFC8]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    p_p = operator new(v23 + 1);
    v43 = v21;
    v44 = v24 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v44) = v20;
    p_p = &__p;
    if (!v20)
      goto LABEL_31;
  }
  memmove(p_p, v19, v21);
LABEL_31:
  *((_BYTE *)p_p + v21) = 0;
  __dst = v16;
  v53 = 1174405120;
  v54 = (unint64_t)___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_32;
  v55 = &__block_descriptor_tmp_43_1;
  v56 = v1;
  v57 = v3;
  v58 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(&__dst);
  v59 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__p, &v59);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v44) < 0)
    operator delete(__p);
  v27 = (const void *)*MEMORY[0x1E0CFBA98];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBA98]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = operator new(v31 + 1);
    v50[1] = v29;
    v51 = v32 | 0x8000000000000000;
    v50[0] = v30;
  }
  else
  {
    HIBYTE(v51) = v28;
    v30 = v50;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, (size_t)v29);
LABEL_45:
  *((_BYTE *)v29 + (_QWORD)v30) = 0;
  __p = v16;
  v43 = 1174405120;
  v44 = (unint64_t)___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_44;
  v45 = &__block_descriptor_tmp_47_2;
  v46 = v1;
  v47 = v3;
  v48 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(&__p);
  v49 = v34;
  Service::registerCommandHandler(v1, (uint64_t)v50, &v49);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  AccessoryModule::finishInitialization_sync((std::__shared_weak_count **)v1);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
  if (v58)
    std::__shared_weak_count::__release_weak(v58);
  if (v61)
    std::__shared_weak_count::__release_weak(v61);
  std::__shared_weak_count::__release_weak(v5);
  v35 = v41[1];
  if (v35)
  {
    dispatch_group_leave(v35);
    v36 = v41[1];
    if (v36)
      dispatch_release(v36);
  }
  operator delete(v41);
  v37 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  operator delete(a1);
}

void sub_1BF4AA25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, _QWORD *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;
  NSObject *v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;

  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  if (a37)
    std::__shared_weak_count::__release_weak(a37);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  std::__shared_weak_count::__release_weak(v45);
  v47 = __p[1];
  if (v47)
  {
    dispatch_group_leave(v47);
    v48 = __p[1];
    if (v48)
      dispatch_release(v48);
  }
  operator delete(__p);
  v49 = (std::__shared_weak_count *)a9[2];
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  operator delete(a9);
  _Unwind_Resume(a1);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
        v12[3] = &__block_descriptor_tmp_29_1;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v6 + 48), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  xpc_object_t *v16;
  uint64_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  void *v22;
  xpc_object_t *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  unsigned int v26;
  xpc_object_t object[4];
  std::string __dst;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2))
  {
    LOWORD(v26) = abm::AccessorySimulate::create((abm::AccessorySimulate *)*(unsigned __int8 *)(v2 + 160));
    abm::AccessorySimulate::toDict((abm::AccessorySimulate *)&v26);
    v7 = *(_QWORD *)(a1 + 40);
    object[0] = __dst.__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v7 + 16))(v7, 0, object);
    xpc_release(object[0]);
    xpc_release(__dst.__r_.__value_.__l.__data_);
    return;
  }
  memset(object, 170, 24);
  v3 = (const void *)*MEMORY[0x1E0CFBFB8];
  v4 = strlen((const char *)*MEMORY[0x1E0CFBFB8]);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_10:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, " rejected; ABM is shutting down ");
  v11 = std::string::append(&__dst, v10, 0x20uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  object[2] = (xpc_object_t)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)object = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  operator delete(v10);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v13 = *(NSObject **)(v2 + 80);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
LABEL_16:
    v16 = object;
    if (SHIBYTE(object[2]) < 0)
      v16 = (xpc_object_t *)object[0];
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
    v17 = *(_QWORD *)(a1 + 40);
    v14 = (uint64_t *)(a1 + 40);
    if (!v17)
      goto LABEL_35;
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  v13 = *(NSObject **)(v2 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    goto LABEL_16;
LABEL_13:
  v15 = *(_QWORD *)(a1 + 40);
  v14 = (uint64_t *)(a1 + 40);
  if (v15)
  {
LABEL_19:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v18 = (xpc_object_t)HIBYTE(object[2]);
    if (SHIBYTE(object[2]) < 0)
      v18 = object[1];
    if (v18)
    {
      v19 = xpc_dictionary_create(0, 0, 0);
      if (v19 || (v19 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v19) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v19);
          v20 = v19;
        }
        else
        {
          v20 = xpc_null_create();
        }
      }
      else
      {
        v20 = xpc_null_create();
        v19 = 0;
      }
      xpc_release(v19);
      v21 = xpc_null_create();
      v22 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      xpc_release(v22);
      xpc_release(v21);
      if (SHIBYTE(object[2]) >= 0)
        v23 = object;
      else
        v23 = (xpc_object_t *)object[0];
      v24 = xpc_string_create((const char *)v23);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB0D0], v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
    }
    v26 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v14, &v26, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(object[2]) < 0)
    operator delete(object[0]);
}

void sub_1BF4AA848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_32(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *aBlock;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_33;
      v14[3] = &__block_descriptor_tmp_42;
      v14[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v7 + 48), (uint64_t)v14);
      xpc_release(object);
      object = 0;
      if (aBlock)
        _Block_release(aBlock);
      goto LABEL_11;
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_33(_QWORD *a1)
{
  uint64_t *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  int v20;
  void **v21;
  uint64_t v22;
  void *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  xpc_object_t v31;
  void *v32;
  void **v33;
  xpc_object_t v34;
  xpc_object_t v35;
  unint64_t *v36;
  unint64_t v37;
  const char *v38;
  size_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _BOOL4 v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t (***v49)(_QWORD, uint64_t);
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  size_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  NSObject *v64;
  const char *v65;
  _QWORD *v66;
  _QWORD *i;
  xpc_object_t v68;
  uint64_t v69;
  xpc_object_t v70;
  _QWORD v71[5];
  xpc_object_t object;
  unsigned int v73;
  std::string __dst;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)a1[4];
  if (!(*(unsigned int (**)(uint64_t *))(*v2 + 88))(v2))
  {
    v7 = (void *)a1[6];
    object = v7;
    if (v7)
      xpc_retain(v7);
    else
      object = xpc_null_create();
    v16 = abm::AccessorySimulate::create();
    xpc_release(object);
    object = 0;
    if ((v16 & 0x100) == 0)
    {
      v17 = 3760250880;
      v18 = v2[10];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v19 = "Failed setting AccessorySimulate status, bad argument";
LABEL_115:
        _os_log_error_impl(&dword_1BF335000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)__p, 2u);
        goto LABEL_112;
      }
      goto LABEL_112;
    }
    v20 = v16 & 1;
    if (v20 == *((unsigned __int8 *)v2 + 160))
    {
LABEL_21:
      v17 = 0;
      goto LABEL_112;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!(_QWORD)xmmword_1ED70FAF0)
    {
      v27 = operator new(0x18uLL);
      MEMORY[0x1C3B893B4](v27, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
      v26 = operator new(0x20uLL);
      *v26 = &unk_1E78FFBE0;
      v26[1] = 0;
      v26[2] = 0;
      v26[3] = v27;
      v28 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FAF0 + 1);
      *(_QWORD *)&xmmword_1ED70FAF0 = v27;
      *((_QWORD *)&xmmword_1ED70FAF0 + 1) = v26;
      if (!v28)
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
LABEL_53:
        v36 = v26 + 1;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
LABEL_55:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v38 = (const char *)*MEMORY[0x1E0CFB978];
        v39 = strlen((const char *)*MEMORY[0x1E0CFB978]);
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v40 = (void *)v39;
        if (v39 >= 0x17)
        {
          v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v42 = v39 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          __p[1] = v40;
          __p[2] = (void *)(v43 | 0x8000000000000000);
          __p[0] = v41;
        }
        else
        {
          HIBYTE(__p[2]) = v39;
          v41 = __p;
          if (!v39)
          {
LABEL_63:
            *((_BYTE *)v40 + (_QWORD)v41) = 0;
            if (SHIBYTE(__p[2]) >= 0)
              v44 = (char *)__p;
            else
              v44 = (char *)__p[0];
            v45 = ctu::cf::plist_adapter::set<BOOL>((uint64_t)v27, v20, v44, 1);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            if (__dst.__r_.__value_.__l.__size_)
            {
              v46 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                (*(void (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__size_ + 16))(__dst.__r_.__value_.__l.__size_);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
              }
            }
            if (!v45)
              goto LABEL_111;
            pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
            if (!(_QWORD)xmmword_1ED70FAF0)
            {
              v49 = (uint64_t (***)(_QWORD, uint64_t))operator new(0x18uLL);
              MEMORY[0x1C3B893B4](v49, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
              v48 = operator new(0x20uLL);
              *v48 = &unk_1E78FFBE0;
              v48[1] = 0;
              v48[2] = 0;
              v48[3] = v49;
              v50 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FAF0 + 1);
              *(_QWORD *)&xmmword_1ED70FAF0 = v49;
              *((_QWORD *)&xmmword_1ED70FAF0 + 1) = v48;
              if (!v50)
              {
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
LABEL_83:
                v53 = v48 + 1;
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 1, v53));
LABEL_85:
                pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
                v55 = strlen(v38);
                if (v55 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v56 = (void *)v55;
                if (v55 >= 0x17)
                {
                  v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v55 | 7) != 0x17)
                    v58 = v55 | 7;
                  v59 = v58 + 1;
                  v57 = operator new(v58 + 1);
                  __p[1] = v56;
                  __p[2] = (void *)(v59 | 0x8000000000000000);
                  __p[0] = v57;
                }
                else
                {
                  HIBYTE(__p[2]) = v55;
                  v57 = __p;
                  if (!v55)
                  {
LABEL_93:
                    *((_BYTE *)v56 + (_QWORD)v57) = 0;
                    v60 = Preferences::getPreference<BOOL>(v49, (const char *)__p, (ctu::cf *)(v2 + 20));
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    if (__dst.__r_.__value_.__l.__size_)
                    {
                      v61 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
                      do
                        v62 = __ldaxr(v61);
                      while (__stlxr(v62 - 1, v61));
                      if (!v62)
                      {
                        (*(void (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__size_
                                                                       + 16))(__dst.__r_.__value_.__l.__size_);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
                      }
                    }
                    if (v60)
                    {
                      v63 = *((unsigned __int8 *)v2 + 160);
                      if (v20 == v63)
                      {
                        v64 = v2[10];
                        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                        {
                          v65 = "Enabling";
                          if (!v63)
                            v65 = "Disabling";
                          LODWORD(__p[0]) = 136315138;
                          *(void **)((char *)__p + 4) = (void *)v65;
                          _os_log_impl(&dword_1BF335000, v64, OS_LOG_TYPE_DEFAULT, "#I %s accessory simulation", (uint8_t *)__p, 0xCu);
                          v64 = v2[10];
                        }
                        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__p[0]) = 0;
                          _os_log_impl(&dword_1BF335000, v64, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", (uint8_t *)__p, 2u);
                        }
                        v66 = (_QWORD *)v2[13];
                        for (i = (_QWORD *)v2[14]; v66 != i; v66 += 2)
                          (*(void (**)(_QWORD))(*(_QWORD *)*v66 + 40))(*v66);
                        v71[0] = MEMORY[0x1E0C809B0];
                        v71[1] = 0x40000000;
                        v71[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_36;
                        v71[3] = &__block_descriptor_tmp_41_1;
                        v71[4] = v2;
                        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v2 + 6, (uint64_t)v71);
                        goto LABEL_21;
                      }
                    }
LABEL_111:
                    v17 = 3760250880;
                    v18 = v2[10];
                    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__p[0]) = 0;
                      v19 = "Failed setting AccessorySimulate status to preferences";
                      goto LABEL_115;
                    }
LABEL_112:
                    v68 = xpc_null_create();
                    v69 = a1[5];
                    __p[0] = v68;
                    v70 = xpc_null_create();
                    (*(void (**)(uint64_t, uint64_t, void **))(v69 + 16))(v69, v17, __p);
                    xpc_release(__p[0]);
                    xpc_release(v70);
                    return;
                  }
                }
                memmove(v57, v38, (size_t)v56);
                goto LABEL_93;
              }
              p_shared_owners = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(p_shared_owners);
              while (__stlxr(v52 - 1, p_shared_owners));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v48 = (_QWORD *)*((_QWORD *)&xmmword_1ED70FAF0 + 1);
            v49 = (uint64_t (***)(_QWORD, uint64_t))xmmword_1ED70FAF0;
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1ED70FAF0;
            if (!*((_QWORD *)&xmmword_1ED70FAF0 + 1))
              goto LABEL_85;
            goto LABEL_83;
          }
        }
        memmove(v41, v38, (size_t)v40);
        goto LABEL_63;
      }
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v26 = (_QWORD *)*((_QWORD *)&xmmword_1ED70FAF0 + 1);
    v27 = (void *)xmmword_1ED70FAF0;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1ED70FAF0;
    if (!*((_QWORD *)&xmmword_1ED70FAF0 + 1))
      goto LABEL_55;
    goto LABEL_53;
  }
  memset(__p, 170, 24);
  v3 = (const void *)*MEMORY[0x1E0CFBFC8];
  v4 = strlen((const char *)*MEMORY[0x1E0CFBFC8]);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_11:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, " rejected; ABM is shutting down ");
  v11 = std::string::append(&__dst, v10, 0x20uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __p[2] = (void *)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  operator delete(v10);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v13 = v2[10];
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
LABEL_23:
    v21 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v21 = (void **)__p[0];
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
    v22 = a1[5];
    v14 = a1 + 5;
    if (!v22)
      goto LABEL_50;
    goto LABEL_26;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  v13 = v2[10];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    goto LABEL_23;
LABEL_14:
  v15 = a1[5];
  v14 = a1 + 5;
  if (v15)
  {
LABEL_26:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v23 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0)
      v23 = __p[1];
    if (v23)
    {
      v24 = xpc_dictionary_create(0, 0, 0);
      if (v24 || (v24 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v24) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v24);
          v25 = v24;
        }
        else
        {
          v25 = xpc_null_create();
        }
      }
      else
      {
        v25 = xpc_null_create();
        v24 = 0;
      }
      xpc_release(v24);
      v31 = xpc_null_create();
      v32 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      xpc_release(v32);
      xpc_release(v31);
      if (SHIBYTE(__p[2]) >= 0)
        v33 = __p;
      else
        v33 = (void **)__p[0];
      v34 = xpc_string_create((const char *)v33);
      if (!v34)
        v34 = xpc_null_create();
      xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E0CFB0D0], v34);
      v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
    }
    v73 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v14, &v73, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_50:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_36(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  __int128 v28;
  const char *v29;
  uint64_t v30;
  size_t v31;
  void **p_dst;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const void *v40;
  size_t v41;
  size_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  xpc_object_t v48;
  void **__dst;
  size_t v50;
  int64_t v51;
  dispatch_object_t v52;
  dispatch_object_t v53;
  dispatch_object_t object;
  uint8_t buf[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  _OWORD v63[9];
  unint64_t v64;
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 160))
  {
    v2 = *(_QWORD *)(v1 + 152);
    if (v2)
    {
      if (v2 == v1 + 128)
      {
        v70 = v69;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 24))(v2, v69);
        goto LABEL_11;
      }
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
    v70 = (_QWORD *)v2;
LABEL_11:
    v5 = *(NSObject **)(v1 + 64);
    object = v5;
    if (v5)
      dispatch_retain(v5);
    AccessorySimulatorDelegate::create(v69, &object, (std::__shared_weak_count_vtbl **)buf);
    std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(v1 + 104, buf, &v56, 1uLL);
    v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v7 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (object)
      dispatch_release(object);
    v9 = v70;
    if (v70 == v69)
    {
      (*(void (**)(void))(v69[0] + 32))();
      if (!*(_QWORD *)(v1 + 88))
        return;
      goto LABEL_58;
    }
    if (v70)
      goto LABEL_22;
    goto LABEL_57;
  }
  v3 = v1 + 128;
  v4 = *(_QWORD *)(v1 + 152);
  if (!v4)
    goto LABEL_9;
  if (v4 != v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_9:
    v68 = (_QWORD *)v4;
    goto LABEL_27;
  }
  v68 = v67;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v1 + 128, v67);
LABEL_27:
  v10 = *(NSObject **)(v1 + 64);
  v53 = v10;
  if (v10)
    dispatch_retain(v10);
  CoreAccessoriesDelegate::create(v67, &v53, (std::__shared_weak_count_vtbl **)buf);
  v11 = *(_QWORD *)(v1 + 152);
  if (!v11)
    goto LABEL_32;
  if (v11 != v3)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_32:
    v66 = (_QWORD *)v11;
    goto LABEL_34;
  }
  v66 = v65;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v1 + 128, v65);
LABEL_34:
  v12 = *(NSObject **)(v1 + 64);
  v52 = v12;
  if (v12)
    dispatch_retain(v12);
  IOKitAccessoriesDelegate::create(v65, &v52, (std::__shared_weak_count_vtbl **)&v56);
  std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(v1 + 104, buf, &v57, 2uLL);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v52)
    dispatch_release(v52);
  v19 = v66;
  if (v66 == v65)
  {
    v20 = 4;
    v19 = v65;
    goto LABEL_52;
  }
  if (v66)
  {
    v20 = 5;
LABEL_52:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  if (v53)
    dispatch_release(v53);
  v9 = v68;
  if (v68 == v67)
  {
    (*(void (**)(void))(v67[0] + 32))();
    if (!*(_QWORD *)(v1 + 88))
      return;
    goto LABEL_58;
  }
  if (v68)
  {
LABEL_22:
    (*(void (**)(_QWORD *))(*v9 + 40))(v9);
    if (!*(_QWORD *)(v1 + 88))
      return;
    goto LABEL_58;
  }
LABEL_57:
  if (!*(_QWORD *)(v1 + 88))
    return;
LABEL_58:
  v21 = *(NSObject **)(v1 + 80);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEFAULT, "#I Requesting modem soft reset due to accessory mode change", buf, 2u);
  }
  v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v22) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v22);
      v23 = v22;
    }
    else
    {
      v23 = xpc_null_create();
    }
  }
  else
  {
    v23 = xpc_null_create();
    v22 = 0;
  }
  xpc_release(v22);
  v24 = xpc_string_create((const char *)*MEMORY[0x1E0CFB598]);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB538], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_string_create((const char *)*MEMORY[0x1E0CFBFA0]);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB8D0], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v64 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v63[7] = v28;
  v63[8] = v28;
  v63[5] = v28;
  v63[6] = v28;
  v63[3] = v28;
  v63[4] = v28;
  v63[1] = v28;
  v63[2] = v28;
  v62 = v28;
  v63[0] = v28;
  *(_OWORD *)__p = v28;
  v61 = v28;
  v58 = v28;
  v59 = v28;
  v56 = v28;
  v57 = v28;
  *(_OWORD *)buf = v28;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"User requested to ", 18);
  if (*(_BYTE *)(v1 + 160))
    v29 = "enable";
  else
    v29 = "disable";
  if (*(_BYTE *)(v1 + 160))
    v30 = 6;
  else
    v30 = 7;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)v29, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Accessory Simulation", 20);
  if ((BYTE8(v62) & 0x10) != 0)
  {
    v33 = v62;
    if ((unint64_t)v62 < *((_QWORD *)&v59 + 1))
    {
      *(_QWORD *)&v62 = *((_QWORD *)&v59 + 1);
      v33 = *((_QWORD *)&v59 + 1);
    }
    v34 = (const void *)v59;
    v31 = v33 - v59;
    if ((unint64_t)(v33 - v59) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_115;
  }
  else
  {
    if ((BYTE8(v62) & 8) == 0)
    {
      v31 = 0;
      HIBYTE(v51) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_91;
    }
    v34 = (const void *)*((_QWORD *)&v57 + 1);
    v31 = *((_QWORD *)&v58 + 1) - *((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v58 + 1) - *((_QWORD *)&v57 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_115:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v31 >= 0x17)
  {
    v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v35 = v31 | 7;
    v36 = v35 + 1;
    p_dst = (void **)operator new(v35 + 1);
    v50 = v31;
    v51 = v36 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_90;
  }
  HIBYTE(v51) = v31;
  p_dst = (void **)&__dst;
  if (v31)
LABEL_90:
    memmove(p_dst, v34, v31);
LABEL_91:
  *((_BYTE *)p_dst + v31) = 0;
  if (v51 >= 0)
    v37 = (const char *)&__dst;
  else
    v37 = (const char *)__dst;
  v38 = xpc_string_create(v37);
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB788], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(v51) < 0)
    operator delete(__dst);
  v40 = (const void *)*MEMORY[0x1E0CFB4E0];
  v41 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = (void **)operator new(v44 + 1);
    v50 = v42;
    v51 = v45 | 0x8000000000000000;
    __dst = v43;
LABEL_106:
    memmove(v43, v40, v42);
    *((_BYTE *)v43 + v42) = 0;
    v48 = v23;
    if (v23)
      goto LABEL_102;
LABEL_107:
    v48 = xpc_null_create();
    goto LABEL_108;
  }
  HIBYTE(v51) = v41;
  v43 = (void **)&__dst;
  if (v41)
    goto LABEL_106;
  LOBYTE(__dst) = 0;
  v48 = v23;
  if (!v23)
    goto LABEL_107;
LABEL_102:
  xpc_retain(v23);
LABEL_108:
  v47 = 0;
  Service::runCommand(v1, (uint64_t)&__dst, &v48, &v47);
  xpc_release(v48);
  v48 = 0;
  if (SHIBYTE(v51) < 0)
    operator delete(__dst);
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
  v46 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v56 = v46;
  *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v61) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B89E4C](v63);
  xpc_release(v23);
}

void sub_1BF4ABCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t object, dispatch_object_t a18, dispatch_object_t a19, char a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 40);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 40);
  if (v2)
    _Block_release(v2);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_44(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *aBlock;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_45;
      v14[3] = &__block_descriptor_tmp_46_0;
      v14[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v7 + 48), (uint64_t)v14);
      xpc_release(object);
      object = 0;
      if (aBlock)
        _Block_release(aBlock);
      goto LABEL_11;
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_45(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  xpc_object_t *v8;
  const char *v9;
  xpc_object_t value;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  void *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  std::string *v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  void *v35;
  void **v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  std::string v40;
  xpc_object_t object;
  void *__p[4];
  std::string __dst;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBA98];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBA98]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v11 = v4 | 7;
      v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_14:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v13 = (char *)operator new(0x28uLL);
        strcpy(v13, " rejected; ABM is shutting down ");
        v14 = std::string::append(&__dst, v13, 0x20uLL);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        operator delete(v13);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v16 = v2[10];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
LABEL_16:
            v18 = a1[5];
            v17 = a1 + 5;
            if (!v18)
            {
LABEL_62:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_22:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v21 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v21 = __p[1];
            if (v21)
            {
              v22 = xpc_dictionary_create(0, 0, 0);
              if (v22 || (v22 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v22) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v22);
                  v23 = v22;
                }
                else
                {
                  v23 = xpc_null_create();
                }
              }
              else
              {
                v23 = xpc_null_create();
                v22 = 0;
              }
              xpc_release(v22);
              v34 = xpc_null_create();
              v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0)
                v36 = __p;
              else
                v36 = (void **)__p[0];
              v37 = xpc_string_create((const char *)v36);
              if (!v37)
                v37 = xpc_null_create();
              xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB0D0], v37);
              v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v17, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_62;
          }
        }
        else
        {
          v16 = v2[10];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            goto LABEL_16;
        }
        v19 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v19 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
        _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v20 = a1[5];
        v17 = a1 + 5;
        if (!v20)
          goto LABEL_62;
        goto LABEL_22;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_14;
  }
  v7 = 3760250880;
  v8 = (xpc_object_t *)(a1 + 6);
  if (MEMORY[0x1C3B8A86C](a1[6]) == MEMORY[0x1E0C812F8])
  {
    v9 = (const char *)*MEMORY[0x1E0CFBA98];
    if (xpc_dictionary_get_value(*v8, (const char *)*MEMORY[0x1E0CFBA98]))
    {
      memset(&__dst, 170, sizeof(__dst));
      value = xpc_dictionary_get_value(*v8, v9);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      __p[1] = 0;
      __p[2] = 0;
      xpc::dyn_cast_or_default();
      xpc_release(object);
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      __p[0] = a1 + 6;
      v24 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      __p[1] = v24;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, &object);
      v25 = (uint64_t *)v2[13];
      v26 = (uint64_t *)v2[14];
      if (v25 == v26)
      {
        v30 = 0;
      }
      else
      {
        v27 = 0;
        do
        {
          v28 = *v25;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v40, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            v40 = __dst;
          v39 = object;
          if (object)
            xpc_retain(object);
          else
            v39 = xpc_null_create();
          v29 = (*(uint64_t (**)(uint64_t, std::string *, xpc_object_t *))(*(_QWORD *)v28 + 24))(v28, &v40, &v39);
          xpc_release(v39);
          v39 = 0;
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          if (v29)
            v27 = 1;
          v25 += 2;
        }
        while (v25 != v26);
        v30 = v27;
      }
      xpc_release(object);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (v30)
        v7 = 0;
      else
        v7 = 3760250880;
    }
  }
  v31 = xpc_null_create();
  v32 = a1[5];
  __p[0] = v31;
  v33 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v32 + 16))(v32, v7, __p);
  xpc_release(__p[0]);
  xpc_release(v33);
}

void sub_1BF4AC5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __cxx_global_var_init_20()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_21()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void antenna::Service::Internal::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, NSObject **a3@<X2>, antenna::Service::Internal **a4@<X8>)
{
  antenna::Service::Internal *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  antenna::Service::Internal *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  dispatch_object_t v39;
  void *v40;
  NSObject *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  *a4 = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  v8 = (antenna::Service::Internal *)operator new(0x2E8uLL);
  v9 = (std::__shared_weak_count *)a1[1];
  v42 = *a1;
  v43 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (*(_QWORD *)a2)
  {
    v12 = _Block_copy(*(const void **)a2);
    v13 = *(NSObject **)(a2 + 8);
    v40 = v12;
    v41 = v13;
    if (!v13)
      goto LABEL_7;
    goto LABEL_6;
  }
  v12 = 0;
  v13 = *(NSObject **)(a2 + 8);
  v40 = 0;
  v41 = v13;
  if (v13)
LABEL_6:
    dispatch_retain(v13);
LABEL_7:
  v14 = *a3;
  v39 = v14;
  if (v14)
    dispatch_retain(v14);
  antenna::Service::Internal::Internal(v8, &v42, (uint64_t)&v40, &v39);
  *a4 = v8;
  a4[1] = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1E7909818;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (antenna::Service::Internal *)v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)v8 + 10);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(v16);
    while (__stxr(v21 + 1, v16));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v15;
  }
  do
    v24 = __ldaxr(v16);
  while (__stlxr(v24 - 1, v16));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v25 = *a4;
    if (!*((_QWORD *)*a4 + 7))
      goto LABEL_37;
    goto LABEL_22;
  }
LABEL_21:
  v25 = *a4;
  if (!*((_QWORD *)*a4 + 7))
    goto LABEL_37;
LABEL_22:
  v26 = (std::__shared_weak_count *)*((_QWORD *)v25 + 10);
  if (!v26 || (v27 = *((_QWORD *)v25 + 9), (v28 = std::__shared_weak_count::lock(v26)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v29 = v28;
  v46 = v27;
  v47 = v28;
  ctu::LoggerCommonBase::getLogDomain((antenna::Service::Internal *)((char *)v25 + 8));
  v44 = v27;
  v45 = v29;
  v46 = 0;
  v47 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v30 = v45;
  if (v45)
  {
    v31 = (unint64_t *)&v45->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v47;
  if (v47)
  {
    v34 = (unint64_t *)&v47->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_37:
  if (v14)
    dispatch_release(v14);
  if (v13)
    dispatch_release(v13);
  if (v12)
    _Block_release(v12);
  v36 = v43;
  if (v43)
  {
    v37 = (unint64_t *)&v43->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (*a4)
    antenna::Service::Internal::init(*a4);
}

void sub_1BF4ACA88()
{
  __break(1u);
}

void sub_1BF4ACAD4()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF4ACAFCLL);
}

void sub_1BF4ACAE4()
{
  JUMPOUT(0x1BF4ACB00);
}

void antenna::Service::Internal::init(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::init(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

_QWORD *antenna::Service::Internal::Internal(_QWORD *a1, _QWORD *a2, uint64_t a3, dispatch_object_t *a4)
{
  NSObject *v7;
  NSObject *initially_inactive;
  NSObject *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  xpc_object_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v51[16];
  char v52[16];
  char v53[16];

  *a1 = off_1E7909558;
  v7 = *a4;
  if (*a4)
    dispatch_retain(*a4);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v51, "com.apple.telephony.abm", "antenna.svc");
  if (v7)
    dispatch_retain(v7);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v9 = dispatch_queue_create_with_target_V2("antenna.svc", initially_inactive, v7);
  dispatch_set_qos_class_floor(v9, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v9);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v9;
  if (v9)
    dispatch_retain(v9);
  a1[12] = v7;
  if (v7)
    dispatch_retain(v7);
  if (v9)
    dispatch_release(v9);
  if (v7)
    dispatch_release(v7);
  *a1 = off_1E7909778;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v53);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a2;
  v10 = a2[1];
  a1[8] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v52);
  *a1 = off_1E7909868;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v51);
  if (v7)
    dispatch_release(v7);
  *a1 = off_1E7909558;
  v13 = *(void **)a3;
  if (*(_QWORD *)a3)
    v13 = _Block_copy(v13);
  a1[13] = v13;
  v14 = *(NSObject **)(a3 + 8);
  a1[14] = v14;
  if (v14)
    dispatch_retain(v14);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = *a2;
  v15 = a2[1];
  a1[18] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *((_BYTE *)a1 + 164) = 0;
  *((_BYTE *)a1 + 168) = 0;
  a1[23] = 0;
  a1[25] = 0;
  *((_BYTE *)a1 + 216) = 0;
  v18 = xpc_null_create();
  a1[29] = 0;
  a1[28] = v18;
  a1[32] = 0;
  a1[36] = 0;
  a1[30] = 0;
  *((_BYTE *)a1 + 248) = 0;
  a1[33] = 0;
  *((_DWORD *)a1 + 68) = 0;
  a1[35] = a1 + 36;
  a1[39] = 0;
  a1[40] = 0;
  a1[41] = 0;
  a1[37] = 0;
  a1[38] = a1 + 39;
  *((_DWORD *)a1 + 88) = 255;
  a1[45] = 0;
  a1[47] = 0;
  *((_BYTE *)a1 + 368) = 0;
  a1[48] = 0;
  v19 = (const void *)*MEMORY[0x1E0CFC120];
  v20 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    a1[50] = v21;
    a1[51] = v24 | 0x8000000000000000;
    a1[49] = v22;
    goto LABEL_32;
  }
  *((_BYTE *)a1 + 415) = v20;
  v22 = a1 + 49;
  if (v20)
LABEL_32:
    memmove(v22, v19, v21);
  *((_BYTE *)v22 + v21) = 0;
  v25 = a1 + 52;
  v26 = strlen((const char *)v19);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = v26;
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    v25 = operator new(v28 + 1);
    a1[53] = v27;
    a1[54] = v29 | 0x8000000000000000;
    a1[52] = v25;
    goto LABEL_40;
  }
  *((_BYTE *)a1 + 439) = v26;
  if (v26)
LABEL_40:
    memmove(v25, v19, v27);
  *((_BYTE *)v25 + v27) = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[55] = a1 + 56;
  *((_BYTE *)a1 + 476) = 0;
  *((_DWORD *)a1 + 120) = 0;
  *((_BYTE *)a1 + 488) = 0;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  v30 = a1 + 67;
  *((_DWORD *)a1 + 132) = 255;
  v31 = strlen((const char *)v19);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v30 = operator new(v33 + 1);
    a1[67] = v30;
    a1[69] = v34 | 0x8000000000000000;
    a1[68] = v32;
    goto LABEL_48;
  }
  *((_BYTE *)a1 + 559) = v31;
  if (v31)
LABEL_48:
    memmove(v30, v19, v32);
  *((_BYTE *)v30 + v32) = 0;
  *((_WORD *)a1 + 280) = 0;
  *(_QWORD *)((char *)a1 + 564) = 0xFFFFFFFF00000001;
  *((_BYTE *)a1 + 572) = 0;
  *((_OWORD *)a1 + 36) = 0u;
  v35 = strlen((const char *)v19);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    a1[74] = v37;
    a1[76] = v39 | 0x8000000000000000;
    a1[75] = v36;
    goto LABEL_56;
  }
  *((_BYTE *)a1 + 615) = v35;
  v37 = a1 + 74;
  if (v35)
LABEL_56:
    memmove(v37, v19, v36);
  *((_BYTE *)v37 + v36) = 0;
  a1[79] = 0;
  a1[78] = 0;
  a1[77] = a1 + 78;
  v40 = strlen((const char *)v19);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    a1[80] = v42;
    a1[82] = v44 | 0x8000000000000000;
    a1[81] = v41;
    goto LABEL_64;
  }
  *((_BYTE *)a1 + 663) = v40;
  v42 = a1 + 80;
  if (v40)
LABEL_64:
    v40 = (size_t)memmove(v42, v19, v41);
  *((_BYTE *)v42 + v41) = 0;
  *((_OWORD *)a1 + 42) = 0u;
  *((_BYTE *)a1 + 688) = config::hw::watch((config::hw *)v40);
  v45 = a1 + 87;
  v46 = strlen((const char *)v19);
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v47 = v46;
  if (v46 >= 0x17)
  {
    v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v48 = v46 | 7;
    v49 = v48 + 1;
    v45 = operator new(v48 + 1);
    a1[87] = v45;
    a1[89] = v49 | 0x8000000000000000;
    a1[88] = v47;
  }
  else
  {
    *((_BYTE *)a1 + 719) = v46;
    if (!v46)
      goto LABEL_73;
  }
  memmove(v45, v19, v47);
LABEL_73:
  *((_BYTE *)v45 + v47) = 0;
  *((_WORD *)a1 + 368) = 0;
  return a1;
}

void sub_1BF4AD24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v13 - 96));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  if (v11)
  {
    dispatch_release(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

const char *antenna::Service::Internal::getName(antenna::Service::Internal *this)
{
  return "antenna.svc";
}

_QWORD *ctu::SharedLoggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7909778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7909778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void antenna::Service::Internal::shutdown(antenna::Service::Internal *this)
{
  IOKitEventNotifier *v2;
  uint64_t **v3;
  PPMHandler **v4;
  uint64_t *v5;

  v2 = (IOKitEventNotifier *)*((_QWORD *)this + 47);
  if (v2)
    IOKitEventNotifier::shutdown(v2);
  v3 = (uint64_t **)*((_QWORD *)this + 64);
  if (v3)
  {
    v5 = *v3;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(v5, &v5);
  }
  v4 = (PPMHandler **)*((_QWORD *)this + 72);
  if (v4)
    PPMHandler::shutdown(*v4);
  if (*((_QWORD *)this + 15))
    antenna::CommandDriver::registerHandler();
}

void sub_1BF4AD58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setupTxPower_sync(antenna::Service::Internal *this)
{
  ctu::iokit::IOHIDController *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (*((_BYTE *)this + 153))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 1u);
  if (!*((_BYTE *)this + 664))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
  if (*((_BYTE *)this + 152))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 3u);
  if (*((_BYTE *)this + 153) || *((_BYTE *)this + 152))
  {
    antenna::Service::Internal::enableTxPowerCapping_sync(this, 1);
    antenna::Service::Internal::enableTxPowerCappingNotification_sync(this, 1);
    antenna::Service::Internal::enableTxPowerCappingIndication_sync(this);
  }
  *((_BYTE *)this + 216) = 0;
  *((_BYTE *)this + 168) = 0;
  if (*((_BYTE *)this + 163))
    antenna::Service::Internal::sendVideoAccessory_sync(this, *((unsigned __int8 *)this + 164));
  if (*((_BYTE *)this + 160))
    antenna::Service::Internal::sendAudioAccessory_sync(this);
  if (*((_BYTE *)this + 156) || *((_BYTE *)this + 158))
  {
    if (*((_BYTE *)this + 192))
    {
      v2 = (ctu::iokit::IOHIDController *)*((_QWORD *)this + 62);
      if (v2)
        ctu::iokit::IOHIDController::queryHIDEventTrigger(v2);
    }
    antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)this);
  }
  if (*((_BYTE *)this + 169))
    antenna::Service::Internal::sendPowerSource_sync(this);
  if (*((_BYTE *)this + 572))
    antenna::Service::Internal::enablePPM_sync(this, 1);
  if (*((_BYTE *)this + 170))
  {
    if (!*((_QWORD *)this + 79))
    {
      config::hw::deviceMaterial(this);
      if ((_QWORD **)((char *)this + 616) != &v3)
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)this + 77, v3, &v4);
      std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v4);
    }
    antenna::Service::Internal::sendDeviceMaterial_sync(this);
  }
}

void sub_1BF4AD6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::configTxPower_sync(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  _QWORD v19[2];
  xpc_object_t object;
  uint8_t buf[4];
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v22 = a2;
    _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D  Configuration tx power for %d", buf, 8u);
  }
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB70], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB90]);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    v11 = xpc_int64_create(*(unsigned int *)(a1 + 336));
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFBE8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
  }
  else if (a2 == 2)
  {
    v13 = xpc_int64_create(*(unsigned int *)(a1 + 464));
    if (!v13)
      v13 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFC00], v13);
    v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    v15 = xpc_int64_create(*(unsigned int *)(a1 + 468));
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFBF8], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    v17 = xpc_int64_create(*(unsigned int *)(a1 + 472));
    if (!v17)
      v17 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFC10], v17);
    v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  v19[0] = 0;
  v19[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync((_QWORD *)a1, &object, (uint64_t)v19);
  xpc_release(object);
  object = 0;
  xpc_release(v5);
}

void sub_1BF4ADA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::enableTxPowerCapping_sync(antenna::Service::Internal *this, BOOL a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  _QWORD v12[2];
  xpc_object_t object;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB88]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_BOOL_create(a2);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB60], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (*((_BYTE *)this + 152))
  {
    v10 = xpc_int64_create(1);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB70], v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
  }
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  v12[0] = 0;
  v12[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v12);
  xpc_release(object);
  object = 0;
  xpc_release(v5);
}

void sub_1BF4ADD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::enableTxPowerCappingNotification_sync(antenna::Service::Internal *this, BOOL a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  config::hw *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  _QWORD v15[2];
  xpc_object_t object;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBD0]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_BOOL_create(a2);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB98], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (config::hw::watch(v10))
  {
    v11 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBC0]);
    if (!v11)
      v11 = xpc_null_create();
  }
  else
  {
    v11 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBB8]);
    if (!v11)
      v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFBB0], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  if (*((_BYTE *)this + 152))
  {
    v13 = xpc_int64_create(1);
    if (!v13)
      v13 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB70], v13);
    v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
  }
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  v15[0] = 0;
  v15[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v15);
  xpc_release(object);
  object = 0;
  xpc_release(v5);
}

void sub_1BF4AE068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::enableTxPowerCappingIndication_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  _QWORD v6[2];
  xpc_object_t object;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = xpc_string_create((const char *)*MEMORY[0x1E0DDFC08]);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFA68], v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v6[0] = 0;
  v6[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v6);
  xpc_release(object);
  object = 0;
  xpc_release(v3);
}

void sub_1BF4AE214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendVideoAccessory_sync(antenna::Service::Internal *this, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  capabilities::radio *v8;
  NSObject *v9;
  _BOOL4 v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  _QWORD v19[2];
  xpc_object_t object;
  uint8_t buf[16];

  if (*((unsigned __int8 *)this + 164) != a2)
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB08]);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    if (capabilities::radio::maverick(v8))
    {
      v9 = *((_QWORD *)this + 5);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (a2)
      {
        if (v10)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Video link started", buf, 2u);
        }
        v11 = xpc_int64_create(1);
        if (!v11)
          v11 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB40], v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        v13 = xpc_int64_create(0);
        if (!v13)
          v13 = xpc_null_create();
      }
      else
      {
        if (v10)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Video link stopped or terminated", buf, 2u);
        }
        v16 = xpc_int64_create(0);
        if (!v16)
          v16 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB40], v16);
        v17 = xpc_null_create();
        xpc_release(v16);
        xpc_release(v17);
        v13 = xpc_int64_create(1);
        if (!v13)
          v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB80], v13);
      v18 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v18);
    }
    else
    {
      v14 = xpc_BOOL_create(a2);
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB68], v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
    *((_BYTE *)this + 164) = a2;
    object = v5;
    if (v5)
      xpc_retain(v5);
    else
      object = xpc_null_create();
    v19[0] = 0;
    v19[1] = 0;
    antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v19);
    xpc_release(object);
    object = 0;
    xpc_release(v5);
  }
}

void sub_1BF4AE61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAudioAccessory_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD v8[2];
  xpc_object_t object;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBA8]);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFA68], v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v6 = xpc_BOOL_create(*((_BYTE *)this + 334));
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFAA8], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v8[0] = 0;
  v8[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v8);
  xpc_release(object);
  object = 0;
  xpc_release(v3);
}

void sub_1BF4AE800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAccessoryStatus_sync(NSObject **this)
{
  unint64_t AccessoryState_sync;
  NSObject *v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  const char **v7;
  const char **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  NSObject *v15;
  _BYTE *v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  NSObject *v20;
  _BYTE *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  NSObject *v28;
  xpc_object_t v29;
  xpc_object_t v30;
  NSObject *v31;
  _BYTE *v32;
  _BYTE *v33;
  _QWORD v34[2];
  xpc_object_t v35;
  _QWORD v36[2];
  xpc_object_t object;
  _BYTE buf[12];
  char v39;
  uint8_t v40[4];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  AccessoryState_sync = antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)this);
  if (*((_BYTE *)this + 168))
  {
    v3 = this[5];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Ignore sending accessory status to BB in low power mode", buf, 2u);
    }
  }
  else
  {
    v4 = AccessoryState_sync;
    v5 = HIDWORD(AccessoryState_sync);
    v6 = MEMORY[0x1E0C812F8];
    v7 = (const char **)MEMORY[0x1E0DDFA68];
    v8 = (const char **)MEMORY[0x1E0DDFB28];
    if (*((_BYTE *)this + 156) || *((_BYTE *)this + 192))
    {
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v9) == v6)
        {
          xpc_retain(v9);
          v10 = v9;
        }
        else
        {
          v10 = xpc_null_create();
        }
      }
      else
      {
        v10 = xpc_null_create();
        v9 = 0;
      }
      xpc_release(v9);
      v11 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBC8]);
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v10, *v7, v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      v13 = xpc_int64_create(v4 & 1);
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(v10, *v8, v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = this[5];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        ctu::iokit::asString();
        if (v39 >= 0)
          v16 = buf;
        else
          v16 = *(_BYTE **)buf;
        *(_DWORD *)v40 = 136315138;
        v41 = v16;
        _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending accessory attachment for RF: %s", v40, 0xCu);
        if (v39 < 0)
          operator delete(*(void **)buf);
        v15 = this[5];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (*((_BYTE *)this + 561))
          v17 = "CLOSED";
        else
          v17 = "OPENED";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", buf, 0xCu);
      }
      if ((v4 & 1) != 0 && (*((_BYTE *)this + 157) || *((_BYTE *)this + 192)))
      {
        v18 = xpc_int64_create(v5);
        if (!v18)
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0DDFAF8], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        v20 = this[5];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          ctu::iokit::asString();
          v21 = v39 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v40 = 136315138;
          v41 = v21;
          _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I Sending accessory type for RF: %s", v40, 0xCu);
          if (v39 < 0)
            operator delete(*(void **)buf);
        }
      }
      object = v10;
      if (v10)
        xpc_retain(v10);
      else
        object = xpc_null_create();
      v36[0] = 0;
      v36[1] = 0;
      antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v36);
      xpc_release(object);
      object = 0;
      xpc_release(v10);
    }
    if (*((_BYTE *)this + 158) || *((_BYTE *)this + 192))
    {
      v22 = xpc_dictionary_create(0, 0, 0);
      if (v22 || (v22 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v22) == v6)
        {
          xpc_retain(v22);
          v23 = v22;
        }
        else
        {
          v23 = xpc_null_create();
        }
      }
      else
      {
        v23 = xpc_null_create();
        v22 = 0;
      }
      xpc_release(v22);
      v24 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBD8]);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v23, *v7, v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      v26 = xpc_int64_create(v4 & 1);
      if (!v26)
        v26 = xpc_null_create();
      xpc_dictionary_set_value(v23, *v8, v26);
      v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      v28 = this[5];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        ctu::iokit::asString();
        v32 = v39 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v40 = 136315138;
        v41 = v32;
        _os_log_debug_impl(&dword_1BF335000, v28, OS_LOG_TYPE_DEBUG, "#D Sending accessory attachment for ARTD: %s", v40, 0xCu);
        if (v39 < 0)
          operator delete(*(void **)buf);
      }
      if ((v4 & 1) != 0 && (*((_BYTE *)this + 157) || *((_BYTE *)this + 192)))
      {
        v29 = xpc_int64_create(v5);
        if (!v29)
          v29 = xpc_null_create();
        xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0DDFAF8], v29);
        v30 = xpc_null_create();
        xpc_release(v29);
        xpc_release(v30);
        v31 = this[5];
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          ctu::iokit::asString();
          v33 = v39 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v40 = 136315138;
          v41 = v33;
          _os_log_debug_impl(&dword_1BF335000, v31, OS_LOG_TYPE_DEBUG, "#D Sending accessory type for ARTD: %s", v40, 0xCu);
          if (v39 < 0)
            operator delete(*(void **)buf);
        }
      }
      v35 = v23;
      if (v23)
        xpc_retain(v23);
      else
        v35 = xpc_null_create();
      v34[0] = 0;
      v34[1] = 0;
      antenna::Service::Internal::performCommandDriver_sync(this, &v35, (uint64_t)v34);
      xpc_release(v35);
      v35 = 0;
      xpc_release(v23);
    }
    antenna::Service::Internal::reportAccessory_sync((uint64_t)this, v4);
  }
}

void sub_1BF4AEED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::sendPowerSource_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  char *v4;
  int64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  void **v11;
  _QWORD v12[2];
  xpc_object_t object;
  void *__p;
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  if (*((_DWORD *)this + 142) == -1
    || (v4 = (char *)this + 568, (TelephonyUtilIsInternalBuild() & 1) == 0) && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v4 = (char *)this + 564;
  }
  v5 = *(unsigned int *)v4;
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB58]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFA68], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_int64_create(v5);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFB00], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    v11 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v17 = v11;
    _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Sending power source state: %s\n", buf, 0xCu);
    if (v15 < 0)
    {
      operator delete(__p);
      object = v3;
      if (v3)
        goto LABEL_21;
LABEL_23:
      object = xpc_null_create();
      goto LABEL_24;
    }
  }
  object = v3;
  if (!v3)
    goto LABEL_23;
LABEL_21:
  xpc_retain(v3);
LABEL_24:
  v12[0] = 0;
  v12[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v12);
  xpc_release(object);
  object = 0;
  xpc_release(v3);
}

void sub_1BF4AF278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::enablePPM_sync(antenna::Service::Internal *this, _BOOL4 a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  xpc_object_t v28;
  BOOL v29;
  _QWORD v30[2];
  xpc_object_t object;
  uint8_t buf[4];
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 572) && *((_QWORD *)this + 72))
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v7 = xpc_string_create((const char *)*MEMORY[0x1E0DDFAD8]);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v9 = xpc_BOOL_create(a2);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFAA0], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (a2)
    {
      v11 = xpc_int64_create(5);
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFAB8], v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v13 || (v14 = *((_QWORD *)this + 9), (v15 = std::__shared_weak_count::lock(v13)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v16 = v15;
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (v20)
    {
      object = v5;
      if (v5)
      {
LABEL_27:
        xpc_retain(v5);
        goto LABEL_30;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
      object = v5;
      if (v5)
        goto LABEL_27;
    }
    object = xpc_null_create();
LABEL_30:
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 1174405120;
    v26[2] = ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke;
    v26[3] = &__block_descriptor_tmp_24_2;
    v26[4] = this;
    v26[5] = v14;
    v27 = v16;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v29 = a2;
    v28 = v5;
    if (v5)
      xpc_retain(v5);
    else
      v28 = xpc_null_create();
    v22 = _Block_copy(v26);
    v23 = *((_QWORD *)this + 11);
    if (v23)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v30[0] = v22;
    v30[1] = v23;
    antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v30);
    if (v23)
      dispatch_release(v23);
    if (v22)
      _Block_release(v22);
    xpc_release(object);
    object = 0;
    PPMHandler::start(**((PPMHandler ***)this + 72));
    v24 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = "Disabled";
      if (a2)
        v25 = "Enabled";
      *(_DWORD *)buf = 136315138;
      v33 = v25;
      _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s PPM", buf, 0xCu);
    }
    xpc_release(v28);
    v28 = 0;
    if (v27)
      std::__shared_weak_count::__release_weak(v27);
    std::__shared_weak_count::__release_weak(v16);
    xpc_release(v5);
    return;
  }
  v6 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#E PPM is not supported or PPM Manager is not created properly", buf, 2u);
  }
}

void sub_1BF4AF6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, uint64_t a17, char a18, uint64_t a19, xpc_object_t a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::sendDeviceMaterial_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t *v35;
  uint64_t **v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  NSObject *v44;
  void *p_p;
  _QWORD v46[2];
  xpc_object_t v47;
  void *__p;
  char v49;
  xpc_object_t xdict;
  uint8_t buf[4];
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    xdict = v2;
  }
  else
  {
    v3 = xpc_null_create();
    xdict = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  xdict = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB18]);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFA68], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (uint64_t **)((char *)this + 624);
  v8 = (uint64_t *)*((_QWORD *)this + 78);
  v9 = (uint64_t **)((char *)this + 624);
  v10 = (uint64_t **)((char *)this + 624);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = *((_DWORD *)v8 + 7);
        if (v11 < 2)
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_18;
      }
      if (v11)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v9 = v10 + 1;
        goto LABEL_18;
      }
    }
    v12 = (uint64_t *)v10;
  }
  else
  {
LABEL_18:
    v12 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v12 + 28) = 1;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *v9 = v12;
    v13 = **((_QWORD **)this + 77);
    v14 = v12;
    if (v13)
    {
      *((_QWORD *)this + 77) = v13;
      v14 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v14);
    ++*((_QWORD *)this + 79);
  }
  v15 = xpc_int64_create(*((unsigned int *)v12 + 8));
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFB10], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = *v7;
  v18 = (uint64_t **)((char *)this + 624);
  v19 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v19 = (uint64_t **)v17;
        v20 = *((_DWORD *)v17 + 7);
        if (v20 < 3)
          break;
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_31;
      }
      if (v20 == 2)
        break;
      v17 = v19[1];
      if (!v17)
      {
        v18 = v19 + 1;
        goto LABEL_31;
      }
    }
    v21 = (uint64_t *)v19;
  }
  else
  {
LABEL_31:
    v21 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v21 + 28) = 2;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v19;
    *v18 = v21;
    v22 = **((_QWORD **)this + 77);
    v23 = v21;
    if (v22)
    {
      *((_QWORD *)this + 77) = v22;
      v23 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v23);
    ++*((_QWORD *)this + 79);
  }
  v24 = xpc_int64_create(*((unsigned int *)v21 + 8));
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFAE0], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = *v7;
  v27 = (uint64_t **)((char *)this + 624);
  v28 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v28 = (uint64_t **)v26;
        v29 = *((_DWORD *)v26 + 7);
        if (v29 < 4)
          break;
        v26 = *v28;
        v27 = v28;
        if (!*v28)
          goto LABEL_44;
      }
      if (v29 == 3)
        break;
      v26 = v28[1];
      if (!v26)
      {
        v27 = v28 + 1;
        goto LABEL_44;
      }
    }
    v30 = (uint64_t *)v28;
  }
  else
  {
LABEL_44:
    v30 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v30 + 28) = 3;
    *v30 = 0;
    v30[1] = 0;
    v30[2] = (uint64_t)v28;
    *v27 = v30;
    v31 = **((_QWORD **)this + 77);
    v32 = v30;
    if (v31)
    {
      *((_QWORD *)this + 77) = v31;
      v32 = *v27;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v32);
    ++*((_QWORD *)this + 79);
  }
  v33 = xpc_int64_create(*((unsigned int *)v30 + 8));
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFA98], v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = *v7;
  v36 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v35;
        v37 = *((_DWORD *)v35 + 7);
        if (v37 < 5)
          break;
        v35 = *v36;
        v7 = v36;
        if (!*v36)
          goto LABEL_57;
      }
      if (v37 == 4)
        break;
      v35 = v36[1];
      if (!v35)
      {
        v7 = v36 + 1;
        goto LABEL_57;
      }
    }
    v38 = (uint64_t *)v36;
  }
  else
  {
LABEL_57:
    v38 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v38 + 28) = 4;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = (uint64_t)v36;
    *v7 = v38;
    v39 = **((_QWORD **)this + 77);
    v40 = v38;
    if (v39)
    {
      *((_QWORD *)this + 77) = v39;
      v40 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v40);
    ++*((_QWORD *)this + 79);
  }
  v41 = xpc_int64_create(*((unsigned int *)v38 + 8));
  if (!v41)
    v41 = xpc_null_create();
  v42 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFA90], v41);
  v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  v44 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)&xdict);
    if (v49 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v52 = p_p;
    _os_log_impl(&dword_1BF335000, v44, OS_LOG_TYPE_DEFAULT, "#I Sending device material: %s\n", buf, 0xCu);
    if (v49 < 0)
      operator delete(__p);
    v42 = xdict;
  }
  v47 = v42;
  if (v42)
  {
    xpc_retain(v42);
  }
  else
  {
    v42 = xpc_null_create();
    v47 = v42;
  }
  v46[0] = 0;
  v46[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &v47, (uint64_t)v46);
  xpc_release(v42);
  v47 = 0;
  xpc_release(xdict);
}

void sub_1BF4AFD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t antenna::Service::Internal::configuration_sync(antenna::Service::Internal *this)
{
  capabilities::txpower *v2;
  BOOL v3;
  capabilities::txpower *v4;
  capabilities::txpower *v5;
  capabilities::radio *v6;
  capabilities::radio *v7;
  capabilities::radio *v8;
  capabilities::radio *v9;
  capabilities::txpower *v10;
  capabilities::txpower *v11;
  capabilities::radio *v12;
  capabilities::txpower *v13;
  capabilities::radio *v14;
  capabilities::radio *v15;
  capabilities::txpower *v16;
  capabilities::txpower *v17;
  uint64_t v18;
  uint64_t **v19;
  char *v20;
  uint64_t **v21;
  uint64_t **v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char v48;
  uint64_t **v49;
  char *v50;
  uint64_t **v51;
  uint64_t **v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t **v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  char v78;
  uint64_t *v79;
  uint64_t **v80;
  int v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  capabilities::radio *v85;
  config::hw *v86;
  capabilities::abs *v87;
  capabilities::txpower *CPMSVariant;
  capabilities::txpower *v89;
  capabilities::txpower *v90;
  capabilities::txpower *v91;
  uint64_t result;

  *((_DWORD *)this + 49) = capabilities::txpower::supportedControlInput(this);
  v2 = (capabilities::txpower *)capabilities::txpower::operator&();
  if ((_DWORD)v2)
  {
    v2 = (capabilities::txpower *)capabilities::txpower::operator&();
    v3 = (_DWORD)v2 != 0;
  }
  else
  {
    v3 = 0;
  }
  *((_BYTE *)this + 152) = v3;
  v4 = (capabilities::txpower *)capabilities::txpower::supportsMotion(v2);
  *((_BYTE *)this + 153) = (_BYTE)v4;
  v5 = (capabilities::txpower *)capabilities::txpower::supportsAntennaFreeSpaceConfig(v4);
  *((_BYTE *)this + 154) = (_BYTE)v5;
  v6 = (capabilities::radio *)capabilities::txpower::supportsMotionAlways(v5);
  *((_BYTE *)this + 155) = (_BYTE)v6;
  v7 = (capabilities::radio *)capabilities::radio::supportsAccessoryDetection(v6);
  *((_BYTE *)this + 156) = (_BYTE)v7;
  v8 = (capabilities::radio *)capabilities::radio::supportsAccessoryTypeDetectionForRF(v7);
  *((_BYTE *)this + 157) = (_BYTE)v8;
  v9 = (capabilities::radio *)capabilities::radio::supportsAccessoryDetectionForARTD(v8);
  *((_BYTE *)this + 158) = (_BYTE)v9;
  v10 = (capabilities::txpower *)capabilities::radio::supportsAccessoryTypeDetectionForARTD(v9);
  *((_BYTE *)this + 159) = (_BYTE)v10;
  v11 = (capabilities::txpower *)capabilities::txpower::supportsAudioJackReport(v10);
  *((_BYTE *)this + 160) = (_BYTE)v11;
  v12 = (capabilities::radio *)capabilities::txpower::supportsAudioSpeaker(v11);
  *((_BYTE *)this + 161) = (_BYTE)v12;
  v13 = (capabilities::txpower *)capabilities::radio::supportsMESA(v12);
  *((_BYTE *)this + 162) = (_BYTE)v13;
  v14 = (capabilities::radio *)capabilities::txpower::supportsVideoAntennaSwitching(v13);
  *((_BYTE *)this + 163) = (_BYTE)v14;
  v15 = (capabilities::radio *)capabilities::radio::supportsUMTS(v14);
  *((_BYTE *)this + 166) = (_BYTE)v15;
  v16 = (capabilities::txpower *)capabilities::radio::C2KDevice(v15);
  *((_BYTE *)this + 167) = (_BYTE)v16;
  v17 = (capabilities::txpower *)capabilities::txpower::timeoutConfig(v16);
  *((_QWORD *)this + 42) = v17;
  *((_QWORD *)this + 43) = v18;
  *((_QWORD *)this + 58) = 0x7F0000007FLL;
  *((_DWORD *)this + 118) = 0x7FFF;
  v19 = (uint64_t **)((char *)this + 312);
  v20 = (char *)*((_QWORD *)this + 39);
  v21 = (uint64_t **)((char *)this + 312);
  v22 = (uint64_t **)((char *)this + 312);
  if (v20)
  {
    v23 = (char *)*((_QWORD *)this + 39);
    while (1)
    {
      while (1)
      {
        v22 = (uint64_t **)v23;
        v24 = *((_DWORD *)v23 + 7);
        if (v24 < 1)
          break;
        v23 = (char *)*v22;
        v21 = v22;
        if (!*v22)
          goto LABEL_11;
      }
      if ((v24 & 0x80000000) == 0)
        break;
      v23 = (char *)v22[1];
      if (!v23)
      {
        v21 = v22 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v25 = (char *)v22;
    v22 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v22 + 7) = 0;
    *((_BYTE *)v22 + 32) = 0;
    *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t *)v25;
    *v21 = (uint64_t *)v22;
    v26 = **((_QWORD **)this + 38);
    v27 = (uint64_t *)v22;
    if (v26)
    {
      *((_QWORD *)this + 38) = v26;
      v27 = *v21;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v27);
    v20 = (char *)*((_QWORD *)this + 39);
    ++*((_QWORD *)this + 40);
  }
  *((_BYTE *)v22 + 32) = 0;
  v28 = (uint64_t **)((char *)this + 312);
  v29 = (uint64_t **)((char *)this + 312);
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        v29 = (uint64_t **)v20;
        v30 = *((_DWORD *)v20 + 7);
        if (v30 < 2)
          break;
        v20 = (char *)*v29;
        v28 = v29;
        if (!*v29)
          goto LABEL_21;
      }
      if (v30 == 1)
        break;
      v20 = (char *)v29[1];
      if (!v20)
      {
        v28 = v29 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    v31 = (char *)v29;
    v29 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v29 + 7) = 1;
    *((_BYTE *)v29 + 32) = 0;
    *v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t *)v31;
    *v28 = (uint64_t *)v29;
    v32 = **((_QWORD **)this + 38);
    v33 = (uint64_t *)v29;
    if (v32)
    {
      *((_QWORD *)this + 38) = v32;
      v33 = *v28;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v33);
    ++*((_QWORD *)this + 40);
  }
  *((_BYTE *)v29 + 32) = 0;
  v34 = *v19;
  v35 = (uint64_t **)((char *)this + 312);
  v36 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    v37 = *v19;
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v37;
        v38 = *((_DWORD *)v37 + 7);
        if (v38 < 4)
          break;
        v37 = *v36;
        v35 = v36;
        if (!*v36)
          goto LABEL_31;
      }
      if (v38 == 3)
        break;
      v37 = v36[1];
      if (!v37)
      {
        v35 = v36 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    v39 = (char *)v36;
    v36 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v36 + 7) = 3;
    *((_BYTE *)v36 + 32) = 0;
    *v36 = 0;
    v36[1] = 0;
    v36[2] = (uint64_t *)v39;
    *v35 = (uint64_t *)v36;
    v40 = **((_QWORD **)this + 38);
    v41 = (uint64_t *)v36;
    if (v40)
    {
      *((_QWORD *)this + 38) = v40;
      v41 = *v35;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v41);
    v34 = (uint64_t *)*((_QWORD *)this + 39);
    ++*((_QWORD *)this + 40);
  }
  *((_BYTE *)v36 + 32) = 0;
  v42 = (uint64_t **)((char *)this + 312);
  v43 = (uint64_t **)((char *)this + 312);
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        v43 = (uint64_t **)v34;
        v44 = *((_DWORD *)v34 + 7);
        if (v44 < 1)
          break;
        v34 = *v43;
        v42 = v43;
        if (!*v43)
          goto LABEL_41;
      }
      if ((v44 & 0x80000000) == 0)
        break;
      v34 = v43[1];
      if (!v34)
      {
        v42 = v43 + 1;
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    v45 = (char *)v43;
    v43 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v43 + 7) = 0;
    *((_BYTE *)v43 + 32) = 0;
    *v43 = 0;
    v43[1] = 0;
    v43[2] = (uint64_t *)v45;
    *v42 = (uint64_t *)v43;
    v46 = **((_QWORD **)this + 38);
    v47 = (uint64_t *)v43;
    if (v46)
    {
      *((_QWORD *)this + 38) = v46;
      v47 = *v42;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v47);
    ++*((_QWORD *)this + 40);
  }
  v48 = *((_BYTE *)v43 + 32);
  v49 = (uint64_t **)((char *)this + 288);
  v50 = (char *)*((_QWORD *)this + 36);
  v51 = (uint64_t **)((char *)this + 288);
  v52 = (uint64_t **)((char *)this + 288);
  if (v50)
  {
    while (1)
    {
      while (1)
      {
        v52 = (uint64_t **)v50;
        v53 = *((_DWORD *)v50 + 7);
        if (v53 < 1)
          break;
        v50 = (char *)*v52;
        v51 = v52;
        if (!*v52)
          goto LABEL_51;
      }
      if ((v53 & 0x80000000) == 0)
        break;
      v50 = (char *)v52[1];
      if (!v50)
      {
        v51 = v52 + 1;
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    v54 = (char *)v52;
    v52 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v52 + 7) = 0;
    *((_BYTE *)v52 + 32) = 0;
    *v52 = 0;
    v52[1] = 0;
    v52[2] = (uint64_t *)v54;
    *v51 = (uint64_t *)v52;
    v55 = **((_QWORD **)this + 35);
    v56 = (uint64_t *)v52;
    if (v55)
    {
      *((_QWORD *)this + 35) = v55;
      v56 = *v51;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v56);
    ++*((_QWORD *)this + 37);
  }
  *((_BYTE *)v52 + 32) = v48;
  v57 = *v19;
  v58 = (uint64_t **)((char *)this + 312);
  v59 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    while (1)
    {
      while (1)
      {
        v59 = (uint64_t **)v57;
        v60 = *((_DWORD *)v57 + 7);
        if (v60 < 2)
          break;
        v57 = *v59;
        v58 = v59;
        if (!*v59)
          goto LABEL_61;
      }
      if (v60 == 1)
        break;
      v57 = v59[1];
      if (!v57)
      {
        v58 = v59 + 1;
        goto LABEL_61;
      }
    }
  }
  else
  {
LABEL_61:
    v61 = (char *)v59;
    v59 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v59 + 7) = 1;
    *((_BYTE *)v59 + 32) = 0;
    *v59 = 0;
    v59[1] = 0;
    v59[2] = (uint64_t *)v61;
    *v58 = (uint64_t *)v59;
    v62 = **((_QWORD **)this + 38);
    v63 = (uint64_t *)v59;
    if (v62)
    {
      *((_QWORD *)this + 38) = v62;
      v63 = *v58;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v63);
    ++*((_QWORD *)this + 40);
  }
  v64 = *((_BYTE *)v59 + 32);
  v65 = *v49;
  v66 = (uint64_t **)((char *)this + 288);
  v67 = (uint64_t **)((char *)this + 288);
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        v67 = (uint64_t **)v65;
        v68 = *((_DWORD *)v65 + 7);
        if (v68 < 2)
          break;
        v65 = *v67;
        v66 = v67;
        if (!*v67)
          goto LABEL_71;
      }
      if (v68 == 1)
        break;
      v65 = v67[1];
      if (!v65)
      {
        v66 = v67 + 1;
        goto LABEL_71;
      }
    }
  }
  else
  {
LABEL_71:
    v69 = (char *)v67;
    v67 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v67 + 7) = 1;
    *((_BYTE *)v67 + 32) = 0;
    *v67 = 0;
    v67[1] = 0;
    v67[2] = (uint64_t *)v69;
    *v66 = (uint64_t *)v67;
    v70 = **((_QWORD **)this + 35);
    v71 = (uint64_t *)v67;
    if (v70)
    {
      *((_QWORD *)this + 35) = v70;
      v71 = *v66;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v71);
    ++*((_QWORD *)this + 37);
  }
  *((_BYTE *)v67 + 32) = v64;
  v72 = *v19;
  v73 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    while (1)
    {
      while (1)
      {
        v73 = (uint64_t **)v72;
        v74 = *((_DWORD *)v72 + 7);
        if (v74 < 4)
          break;
        v72 = *v73;
        v19 = v73;
        if (!*v73)
          goto LABEL_81;
      }
      if (v74 == 3)
        break;
      v72 = v73[1];
      if (!v72)
      {
        v19 = v73 + 1;
        goto LABEL_81;
      }
    }
  }
  else
  {
LABEL_81:
    v75 = (char *)v73;
    v73 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v73 + 7) = 3;
    *((_BYTE *)v73 + 32) = 0;
    *v73 = 0;
    v73[1] = 0;
    v73[2] = (uint64_t *)v75;
    *v19 = (uint64_t *)v73;
    v76 = **((_QWORD **)this + 38);
    v77 = (uint64_t *)v73;
    if (v76)
    {
      *((_QWORD *)this + 38) = v76;
      v77 = *v19;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v77);
    ++*((_QWORD *)this + 40);
  }
  v78 = *((_BYTE *)v73 + 32);
  v79 = *v49;
  v80 = (uint64_t **)((char *)this + 288);
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        v80 = (uint64_t **)v79;
        v81 = *((_DWORD *)v79 + 7);
        if (v81 < 4)
          break;
        v79 = *v80;
        v49 = v80;
        if (!*v80)
          goto LABEL_91;
      }
      if (v81 == 3)
        break;
      v79 = v80[1];
      if (!v79)
      {
        v49 = v80 + 1;
        goto LABEL_91;
      }
    }
  }
  else
  {
LABEL_91:
    v82 = (char *)v80;
    v80 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v80 + 7) = 3;
    *((_BYTE *)v80 + 32) = 0;
    *v80 = 0;
    v80[1] = 0;
    v80[2] = (uint64_t *)v82;
    *v49 = (uint64_t *)v80;
    v83 = **((_QWORD **)this + 35);
    v84 = (uint64_t *)v80;
    if (v83)
    {
      *((_QWORD *)this + 35) = v83;
      v84 = *v49;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v84);
    ++*((_QWORD *)this + 37);
  }
  *((_BYTE *)v80 + 32) = v78;
  *((_QWORD *)this + 26) = 0xFF00000004;
  v85 = (capabilities::radio *)capabilities::txpower::supportsPowerSourceDetection(v17);
  *((_BYTE *)this + 169) = (_BYTE)v85;
  v86 = (config::hw *)capabilities::radio::supportsDeviceMaterial(v85);
  *((_BYTE *)this + 170) = (_BYTE)v86;
  v87 = (capabilities::abs *)config::hw::watch(v86);
  *((_BYTE *)this + 688) = (_BYTE)v87;
  CPMSVariant = (capabilities::txpower *)capabilities::abs::getCPMSVariant(v87);
  *((_BYTE *)this + 664) = (_BYTE)CPMSVariant;
  if ((_DWORD)CPMSVariant)
    v89 = 0;
  else
    v89 = (capabilities::txpower *)capabilities::txpower::supportsPPM(CPMSVariant);
  *((_BYTE *)this + 572) = (_BYTE)v89;
  v90 = (capabilities::txpower *)capabilities::txpower::supportsKeyboard(v89);
  *((_BYTE *)this + 192) = (_BYTE)v90;
  v91 = (capabilities::txpower *)capabilities::txpower::supportedFaceID(v90);
  *((_DWORD *)this + 43) = (_DWORD)v91;
  result = capabilities::txpower::supportsFrontCamera(v91);
  *((_BYTE *)this + 176) = result;
  return result;
}

void antenna::Service::Internal::stopService_sync(antenna::Service::Internal *this)
{
  antenna::Service::Internal::enableTxPowerCappingNotification_sync(this, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync(this);
}

void antenna::Service::Internal::stopTxPowerCapping_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  if (*((_BYTE *)this + 152))
  {
    v2 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping Stop", buf, 2u);
      v3 = *((_QWORD *)this + 25);
      if (v3)
      {
LABEL_4:
        dispatch_source_cancel(v3);
        v4 = *((_QWORD *)this + 25);
        *((_QWORD *)this + 25) = 0;
        if (v4)
          dispatch_release(v4);
      }
    }
    else
    {
      v3 = *((_QWORD *)this + 25);
      if (v3)
        goto LABEL_4;
    }
    *((_BYTE *)this + 333) = 0;
    antenna::Service::Internal::stopMotionDetection_sync(this);
    antenna::Service::Internal::stopHandDetection_sync(this);
    *((_DWORD *)this + 132) = 255;
  }
  if (*((_BYTE *)this + 153))
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v8 = 0;
      _os_log_debug_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEBUG, "#D iPad Tx Power Capping based on Motion Sensor Stop", v8, 2u);
      antenna::Service::Internal::stopMotionDetection_sync(this);
      v6 = *((_QWORD *)this + 45);
      if (v6)
      {
LABEL_10:
        dispatch_source_cancel(v6);
        v7 = *((_QWORD *)this + 45);
        *((_QWORD *)this + 45) = 0;
        if (v7)
          dispatch_release(v7);
      }
    }
    else
    {
      antenna::Service::Internal::stopMotionDetection_sync(this);
      v6 = *((_QWORD *)this + 45);
      if (v6)
        goto LABEL_10;
    }
    *((_DWORD *)this + 88) = 255;
  }
  *((_BYTE *)this + 216) = 0;
}

void antenna::Service::Internal::stopService(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::stopService(void)::$_0>(antenna::Service::Internal::stopService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::stopService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::stopService(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::startService(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::startService(void)::$_0>(antenna::Service::Internal::startService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::startService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::startService(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::enterLowPower(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::enterLowPower(void)::$_0>(antenna::Service::Internal::enterLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::enterLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::enterLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::exitLowPower(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::exitLowPower(void)::$_0>(antenna::Service::Internal::exitLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::exitLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::exitLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::performCommandDriver_sync(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  xpc_object_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  _QWORD aBlock[6];
  std::__shared_weak_count *v22;
  xpc_object_t v23;
  void *v24;
  dispatch_object_t v25;
  void *v26;
  dispatch_object_t object;
  xpc_object_t v28;

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (MEMORY[0x1C3B8A86C](*a2) == MEMORY[0x1E0C812F8])
  {
    v14 = a1[15];
    v28 = (xpc_object_t)*a2;
    if (v28)
      xpc_retain(v28);
    else
      v28 = xpc_null_create();
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN7antenna7Service8Internal25performCommandDriver_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS2_6objectEEEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_32_4;
    aBlock[4] = a1;
    aBlock[5] = v7;
    v22 = v9;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v16 = (xpc_object_t)*a2;
    v23 = v16;
    if (v16)
    {
      xpc_retain(v16);
      v17 = *(void **)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_20;
    }
    else
    {
      v23 = xpc_null_create();
      v17 = *(void **)a3;
      if (!*(_QWORD *)a3)
      {
LABEL_20:
        v18 = *(NSObject **)(a3 + 8);
        v24 = v17;
        v25 = v18;
        if (v18)
          dispatch_retain(v18);
        v19 = _Block_copy(aBlock);
        v20 = a1[11];
        if (v20)
          dispatch_retain(v20);
        v26 = v19;
        object = v20;
        (*(void (**)(uint64_t, xpc_object_t *, void **))(*(_QWORD *)v14 + 48))(v14, &v28, &v26);
        if (object)
          dispatch_release(object);
        if (v26)
          _Block_release(v26);
        xpc_release(v28);
        v28 = 0;
        if (v25)
          dispatch_release(v25);
        if (v24)
          _Block_release(v24);
        xpc_release(v23);
        v23 = 0;
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        goto LABEL_34;
      }
    }
    v17 = _Block_copy(v17);
    goto LABEL_20;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF4B0BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, xpc_object_t object, uint64_t a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;

  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a20);
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback(v21);
  xpc_release(object);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  xpc_release(*(xpc_object_t *)(v22 - 72));
  *(_QWORD *)(v22 - 72) = 0;
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void sub_1BF4B0C40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void antenna::Service::Internal::transmitStateHandler(_QWORD *a1, int a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *(_QWORD *)v10 = a1;
  v10[2] = a2;
  v10[3] = a3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[11];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void antenna::Service::Internal::createTransmitStateDict_sync(int a1@<W1>, int a2@<W2>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v6) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  if (a1 == 1)
  {
    v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFBF28]);
    if (!v8)
      v8 = xpc_null_create();
  }
  else
  {
    if (a1)
    {
      *a3 = xpc_null_create();
      goto LABEL_31;
    }
    v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC28]);
    if (!v8)
      v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFBBD8], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  switch(a2)
  {
    case 0:
      v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD40]);
      if (!v10)
        v10 = xpc_null_create();
      goto LABEL_27;
    case 1:
      v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB90]);
      if (!v10)
        v10 = xpc_null_create();
      goto LABEL_27;
    case 2:
      v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC20]);
      if (!v10)
        v10 = xpc_null_create();
      goto LABEL_27;
    case 3:
      v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA78]);
      if (!v10)
        v10 = xpc_null_create();
LABEL_27:
      xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFBD88], v10);
      v11 = xpc_null_create();
      xpc_release(v10);
      xpc_release(v11);
      break;
    default:
      break;
  }
  v12 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5F8]);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFB680], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  *a3 = v7;
  v7 = xpc_null_create();
LABEL_31:
  xpc_release(v7);
}

void antenna::Service::Internal::startTxPowerCapping_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  Capabilities *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int isCMHandDetectionSupported;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[2];

  if (*((_BYTE *)this + 216) || *((_BYTE *)this + 168))
    return;
  *((_BYTE *)this + 216) = 1;
  if (*((_BYTE *)this + 152))
  {
    v2 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18[0]) = 0;
      _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping Start", (uint8_t *)v18, 2u);
      pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
      v3 = (Capabilities *)qword_1ED70FAA0;
      if (!qword_1ED70FAA0)
      {
LABEL_7:
        v4 = operator new(1uLL);
        v5 = operator new(0x20uLL);
        *v5 = off_1E7903F88;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = v4;
        v6 = (std::__shared_weak_count *)off_1ED70FAA8;
        qword_1ED70FAA0 = (uint64_t)v4;
        off_1ED70FAA8 = v5;
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v3 = (Capabilities *)qword_1ED70FAA0;
      }
    }
    else
    {
      pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
      v3 = (Capabilities *)qword_1ED70FAA0;
      if (!qword_1ED70FAA0)
        goto LABEL_7;
    }
    v9 = (std::__shared_weak_count *)off_1ED70FAA8;
    v18[0] = v3;
    v18[1] = off_1ED70FAA8;
    if (off_1ED70FAA8)
    {
      v10 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
    isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v3);
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (isCMHandDetectionSupported)
    {
      antenna::Service::Internal::processHandDetection_sync(this);
      antenna::Service::Internal::checkStartHandDetection_sync(this);
    }
    antenna::Service::Internal::startTxPowerCappingIPhone_sync(this);
  }
  if (*((_BYTE *)this + 153))
  {
    v15 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18[0]) = 0;
      _os_log_debug_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEBUG, "#D iPad Tx Power Capping based on Motion Sensor Start", (uint8_t *)v18, 2u);
      if (*((_BYTE *)this + 248))
      {
LABEL_27:
        v16 = *((_QWORD *)this + 45);
        if (!v16)
          goto LABEL_35;
        goto LABEL_33;
      }
    }
    else if (*((_BYTE *)this + 248))
    {
      goto LABEL_27;
    }
    antenna::Service::Internal::startMotionDetection_sync(this);
    v16 = *((_QWORD *)this + 45);
    if (!v16)
    {
LABEL_35:
      antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
      antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
      return;
    }
LABEL_33:
    dispatch_source_cancel(v16);
    v17 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v17)
      dispatch_release(v17);
    goto LABEL_35;
  }
}

void sub_1BF4B13C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF4B13EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::processHandDetection_sync(antenna::Service::Internal *this)
{
  Capabilities *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int isCMHandDetectionSupported;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  const char **v15;
  int v16;
  const char *v17;
  size_t v18;
  NSObject *v19;
  _BOOL4 isHandednessCondition;
  NSObject *v21;
  _BOOL4 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v2 = (Capabilities *)qword_1ED70FAA0;
  if (!qword_1ED70FAA0)
  {
    v3 = operator new(1uLL);
    v4 = operator new(0x20uLL);
    *v4 = off_1E7903F88;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_1ED70FAA8;
    qword_1ED70FAA0 = (uint64_t)v3;
    off_1ED70FAA8 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (Capabilities *)qword_1ED70FAA0;
  }
  v8 = (std::__shared_weak_count *)off_1ED70FAA8;
  *(_QWORD *)&v23 = v2;
  *((_QWORD *)&v23 + 1) = off_1ED70FAA8;
  if (off_1ED70FAA8)
  {
    v9 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v2);
  v12 = isCMHandDetectionSupported;
  if (!v8)
    goto LABEL_15;
  v13 = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v12)
      return;
  }
  else
  {
LABEL_15:
    if (!isCMHandDetectionSupported)
      return;
  }
  v15 = (const char **)((char *)this + 536);
  v16 = *((char *)this + 559);
  v17 = (char *)this + 536;
  if (v16 < 0)
    v17 = *v15;
  v18 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v17, (const char *)*MEMORY[0x1E0CFC120], v18))
  {
    isHandednessCondition = antenna::Service::Internal::isHandednessCondition(this);
    v21 = *((_QWORD *)this + 5);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
    if (isHandednessCondition)
    {
      if (v22)
      {
        LOWORD(v23) = 0;
        _os_log_debug_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEBUG, "#D Handedness condition is met", (uint8_t *)&v23, 2u);
      }
      antenna::Service::Internal::sendMotionHandDetectionState_sync(this, *((_DWORD *)this + 132));
    }
    else
    {
      if (v22)
      {
        LOWORD(v23) = 0;
        _os_log_debug_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEBUG, "#D Handedness condition is not met. Default handedness state is sending.", (uint8_t *)&v23, 2u);
      }
      antenna::Service::Internal::sendMotionHandDetectionState_sync(this, 0);
    }
  }
  else
  {
    v19 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      if (v16 < 0)
        v15 = (const char **)*v15;
      LODWORD(v23) = 136315138;
      *(_QWORD *)((char *)&v23 + 4) = v15;
      _os_log_debug_impl(&dword_1BF335000, v19, OS_LOG_TYPE_DEBUG, "#D Hand Detection Overriding Mode is %s, and sending is skipped", (uint8_t *)&v23, 0xCu);
    }
  }
}

void sub_1BF4B168C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::checkStartHandDetection_sync(antenna::Service::Internal *this)
{
  uint64_t *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t *v18[2];

  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v2 = (uint64_t *)qword_1ED70FAA0;
  if (!qword_1ED70FAA0)
  {
    v3 = operator new(1uLL);
    v4 = operator new(0x20uLL);
    *v4 = off_1E7903F88;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_1ED70FAA8;
    qword_1ED70FAA0 = (uint64_t)v3;
    off_1ED70FAA8 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (uint64_t *)qword_1ED70FAA0;
  }
  v8 = (std::__shared_weak_count *)off_1ED70FAA8;
  v18[0] = v2;
  v18[1] = (uint64_t *)off_1ED70FAA8;
  if (off_1ED70FAA8)
  {
    v9 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported((Capabilities *)v2))
  {
    v11 = *((_QWORD *)this + 64);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v11)
    {
      if (*((_BYTE *)this + 560))
      {
        v18[0] = **((uint64_t ***)this + 64);
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(v18[0], v18);
        v14 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v18[0]) = 0;
          _os_log_debug_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEBUG, "#D Hand Detection Started!", (uint8_t *)v18, 2u);
        }
      }
      else
      {
        v17 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v18[0]) = 0;
          _os_log_debug_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEBUG, "#D Uncovered prox is detected. Set the detection state as default.", (uint8_t *)v18, 2u);
        }
        antenna::Service::Internal::processHandDetection_sync(this);
        antenna::Service::Internal::stopHandDetection_sync(this);
      }
    }
  }
  else if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF4B1918(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF4B1944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::startTxPowerCappingIPhone_sync(antenna::Service::Internal *this)
{
  uint64_t **v2;
  char *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  NSObject *v16;
  unsigned int TxPowerCappingForWatch;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unsigned int v27;
  xpc_object_t v28;
  xpc_object_t v29;
  NSObject *v30;
  std::string *v31;
  _QWORD v32[2];
  xpc_object_t object;
  std::string v34;
  uint8_t buf[4];
  std::string *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (capabilities::txpower::operator&())
  {
    if (!*((_BYTE *)this + 155))
    {
      v2 = (uint64_t **)((char *)this + 288);
      v3 = (char *)*((_QWORD *)this + 36);
      v4 = (uint64_t **)((char *)this + 288);
      v5 = (uint64_t **)((char *)this + 288);
      if (v3)
      {
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v3;
            v6 = *((_DWORD *)v3 + 7);
            if (v6 < 2)
              break;
            v3 = (char *)*v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_10;
          }
          if (v6 == 1)
            break;
          v3 = (char *)v5[1];
          if (!v3)
          {
            v4 = v5 + 1;
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        v7 = (char *)v5;
        v5 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v5 + 7) = 1;
        *((_BYTE *)v5 + 32) = 0;
        *v5 = 0;
        v5[1] = 0;
        v5[2] = (uint64_t *)v7;
        *v4 = (uint64_t *)v5;
        v8 = **((_QWORD **)this + 35);
        v9 = (uint64_t *)v5;
        if (v8)
        {
          *((_QWORD *)this + 35) = v8;
          v9 = *v4;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
        ++*((_QWORD *)this + 37);
      }
      if (!*((_BYTE *)v5 + 32))
      {
        v10 = *v2;
        v11 = (uint64_t **)((char *)this + 288);
        if (*v2)
        {
          while (1)
          {
            while (1)
            {
              v11 = (uint64_t **)v10;
              v12 = *((_DWORD *)v10 + 7);
              if (v12 < 4)
                break;
              v10 = *v11;
              v2 = v11;
              if (!*v11)
                goto LABEL_21;
            }
            if (v12 == 3)
              break;
            v10 = v11[1];
            if (!v10)
            {
              v2 = v11 + 1;
              goto LABEL_21;
            }
          }
        }
        else
        {
LABEL_21:
          v13 = (char *)v11;
          v11 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v11 + 7) = 3;
          *((_BYTE *)v11 + 32) = 0;
          *v11 = 0;
          v11[1] = 0;
          v11[2] = (uint64_t *)v13;
          *v2 = (uint64_t *)v11;
          v14 = **((_QWORD **)this + 35);
          v15 = (uint64_t *)v11;
          if (v14)
          {
            *((_QWORD *)this + 35) = v14;
            v15 = *v2;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v15);
          ++*((_QWORD *)this + 37);
        }
        if (!*((_BYTE *)v11 + 32))
        {
          antenna::Service::Internal::stopMotionDetection_sync(this);
          v16 = *((_QWORD *)this + 25);
          if (!v16)
            goto LABEL_29;
          goto LABEL_27;
        }
      }
    }
    antenna::Service::Internal::startMotionDetection_sync(this);
  }
  v16 = *((_QWORD *)this + 25);
  if (!v16)
    goto LABEL_29;
LABEL_27:
  dispatch_source_cancel(v16);
  v16 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v16)
    dispatch_release(v16);
LABEL_29:
  if (config::hw::watch((config::hw *)v16))
  {
    TxPowerCappingForWatch = antenna::Service::Internal::getTxPowerCappingForWatch(this);
  }
  else if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
         || (TxPowerCappingForWatch = *((_DWORD *)this + 52), TxPowerCappingForWatch == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((_BYTE *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      TxPowerCappingForWatch = 2;
    }
    else
    {
      TxPowerCappingForWatch = 3;
    }
  }
  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v18) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
  }
  else
  {
    v19 = xpc_null_create();
    v18 = 0;
  }
  xpc_release(v18);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB20]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0DDFA68], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_BOOL_create(1);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0DDFB48], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_int64_create(TxPowerCappingForWatch);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0DDFBE0], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    memset(&v34, 0, sizeof(v34));
    if (TxPowerCappingForWatch - 1 < 3)
      std::string::__assign_external(&v34, **((const std::string::value_type ***)&unk_1E7909CB8 + (int)(TxPowerCappingForWatch - 1)));
    v31 = &v34;
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v36 = v31;
    _os_log_debug_impl(&dword_1BF335000, v26, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping: %s", buf, 0xCu);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 154))
  {
    if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
      || (v27 = *((_DWORD *)this + 53), v27 == 255))
    {
      v27 = antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
    }
    v28 = xpc_int64_create(v27);
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0DDFC18], v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    v30 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v34.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v34.__r_.__value_.__r.__words[0]) = v27;
      _os_log_debug_impl(&dword_1BF335000, v30, OS_LOG_TYPE_DEBUG, "#D iPhone Tx Power Free Space: 0x%x", (uint8_t *)&v34, 8u);
      object = v19;
      if (v19)
        goto LABEL_66;
LABEL_74:
      object = xpc_null_create();
      goto LABEL_75;
    }
  }
  object = v19;
  if (!v19)
    goto LABEL_74;
LABEL_66:
  xpc_retain(v19);
LABEL_75:
  v32[0] = 0;
  v32[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v32);
  xpc_release(object);
  object = 0;
  antenna::Service::Internal::startTxPowerCappingIPhoneTimer_sync(this);
  if (*((_BYTE *)this + 332) && *((_BYTE *)this + 333))
  {
    AudioServicesPlaySystemSound(0x452u);
    *((_BYTE *)this + 333) = 0;
  }
  xpc_release(v19);
}

void sub_1BF4B1EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::startTxPowerCappingIPadWithMotion_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  if (*((_BYTE *)this + 248))
  {
    v2 = *((_QWORD *)this + 45);
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    antenna::Service::Internal::startMotionDetection_sync(this);
    v2 = *((_QWORD *)this + 45);
    if (!v2)
      goto LABEL_3;
  }
  dispatch_source_cancel(v2);
  v3 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v3)
  {
    dispatch_release(v3);
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
    antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
    return;
  }
LABEL_3:
  antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
  antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
}

void antenna::Service::Internal::stopTxPowerCappingIPhone_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v3)
      dispatch_release(v3);
  }
  *((_BYTE *)this + 333) = 0;
  antenna::Service::Internal::stopMotionDetection_sync(this);
  antenna::Service::Internal::stopHandDetection_sync(this);
  *((_DWORD *)this + 132) = 255;
}

void antenna::Service::Internal::stopTxPowerCappingIPadWithMotion_sync(NSObject **this)
{
  NSObject *v2;
  NSObject *v3;

  antenna::Service::Internal::stopMotionDetection_sync((antenna::Service::Internal *)this);
  v2 = this[45];
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = this[45];
    this[45] = 0;
    if (v3)
      dispatch_release(v3);
  }
  *((_DWORD *)this + 88) = 255;
}

unint64_t antenna::Service::Internal::systemElapsedTime(antenna::Service::Internal *this)
{
  return ctu::Clock::now_in_nanoseconds(this) / 0xF4240uLL;
}

uint64_t antenna::Service::Internal::systemTimeDifference(antenna::Service::Internal *this, int a2, int a3)
{
  return (a2 - a3);
}

uint64_t antenna::Service::Internal::lqmState_sync(uint64_t a1, int a2)
{
  if (a2 == 100)
    return 2;
  else
    return a2 == 50;
}

void antenna::Service::Internal::setLinkQualityMetric_sync(uint64_t a1, int a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 162))
  {
    if (a2 == 100)
      v2 = 2;
    else
      v2 = a2 == 50;
    *(_DWORD *)(a1 + 484) = v2;
    v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_debug_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEBUG, "#D fLQMState has set to %d", (uint8_t *)v4, 8u);
    }
  }
}

void antenna::Service::Internal::setMaxPower_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  const char *v4;
  xpc_object_t value;
  unsigned int v6;
  int v7;
  const char *v8;
  xpc_object_t v9;
  unsigned int v10;
  int v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t object;

  v4 = (const char *)*MEMORY[0x1E0CFB308];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB308]))
  {
    value = xpc_dictionary_get_value(*a2, v4);
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (v6 <= 0x3E8)
      v7 = v6;
    else
      v7 = 0x7FFF;
    *((_DWORD *)this + 116) = v7;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB4C8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB4C8]))
  {
    v9 = xpc_dictionary_get_value(*a2, v8);
    object = v9;
    if (v9)
      xpc_retain(v9);
    else
      object = xpc_null_create();
    v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (v10 <= 0x3E8)
      v11 = v10;
    else
      v11 = 0x7FFF;
    *((_DWORD *)this + 117) = v11;
  }
  v12 = (const char *)*MEMORY[0x1E0CFB120];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB120]))
  {
    v13 = xpc_dictionary_get_value(*a2, v12);
    object = v13;
    if (v13)
      xpc_retain(v13);
    else
      object = xpc_null_create();
    *((_DWORD *)this + 118) = (unsigned __int16)xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (!*((_BYTE *)this + 664))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
}

void sub_1BF4B2380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

unint64_t antenna::Service::Internal::calculateTxValue(antenna::Service::Internal *this, int a2, int a3)
{
  unint64_t result;

  result = 0x7FFFLL;
  if (a3 != 0x7FFF)
    return (a3 * a2) / 0x64uLL;
  return result;
}

void antenna::Service::Internal::setMaxPower_sync(antenna::Service::Internal *this)
{
  if (!*((_BYTE *)this + 664))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
}

void antenna::Service::Internal::callActive(antenna::Service::Internal *this)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Active!", v4, 2u);
  }
  *((_BYTE *)this + 165) = 1;
  if (*((_BYTE *)this + 162))
  {
    v3 = *((_QWORD *)this + 47);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 72))
        ctu::iokit::Controller::setMesaQuality();
    }
  }
}

void antenna::Service::Internal::callInactive(antenna::Service::Internal *this)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Inactive!", v4, 2u);
  }
  *((_BYTE *)this + 165) = 0;
  if (*((_BYTE *)this + 162))
  {
    v3 = *((_QWORD *)this + 47);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 72))
        ctu::iokit::Controller::setMesaQuality();
    }
  }
}

BOOL antenna::Service::Internal::isAudioReceiverOutputOnlyActive(antenna::Service::Internal *this)
{
  int **v2;
  char *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  uint64_t **v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  int *v18;
  int **v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t *v23;

  v2 = (int **)((char *)this + 288);
  v3 = (char *)*((_QWORD *)this + 36);
  v4 = (uint64_t **)((char *)this + 288);
  v5 = (uint64_t **)((char *)this + 288);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v3;
        v6 = *((_DWORD *)v3 + 7);
        if (v6 < 1)
          break;
        v3 = (char *)*v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if ((v6 & 0x80000000) == 0)
        break;
      v3 = (char *)v5[1];
      if (!v3)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v7 = (char *)v5;
    v5 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v5 + 7) = 0;
    *((_BYTE *)v5 + 32) = 0;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t *)v7;
    *v4 = (uint64_t *)v5;
    v8 = **((_QWORD **)this + 35);
    v9 = (uint64_t *)v5;
    if (v8)
    {
      *((_QWORD *)this + 35) = v8;
      v9 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
    ++*((_QWORD *)this + 37);
  }
  if (!*((_BYTE *)v5 + 32))
    return 0;
  v10 = *v2;
  v11 = (uint64_t **)v2;
  v12 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        v12 = v10;
        v13 = v10[7];
        if (v13 < 2)
          break;
        v10 = (int *)*v12;
        v11 = (uint64_t **)v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 == 1)
        break;
      v10 = (int *)v12[1];
      if (!v10)
      {
        v11 = (uint64_t **)(v12 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v14 = v12;
    v12 = operator new(0x28uLL);
    *((_DWORD *)v12 + 7) = 1;
    *((_BYTE *)v12 + 32) = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v11 = v12;
    v15 = **((_QWORD **)this + 35);
    v16 = v12;
    if (v15)
    {
      *((_QWORD *)this + 35) = v15;
      v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v16);
    ++*((_QWORD *)this + 37);
  }
  if (*((_BYTE *)v12 + 32))
    return 0;
  v18 = *v2;
  v19 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        v19 = (int **)v18;
        v20 = v18[7];
        if (v20 < 4)
          break;
        v18 = *v19;
        v2 = v19;
        if (!*v19)
          goto LABEL_31;
      }
      if (v20 == 3)
        break;
      v18 = v19[1];
      if (!v18)
      {
        v2 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    v21 = (int *)v19;
    v19 = (int **)operator new(0x28uLL);
    *((_DWORD *)v19 + 7) = 3;
    *((_BYTE *)v19 + 32) = 0;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v21;
    *v2 = (int *)v19;
    v22 = **((_QWORD **)this + 35);
    v23 = (uint64_t *)v19;
    if (v22)
    {
      *((_QWORD *)this + 35) = v22;
      v23 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v23);
    ++*((_QWORD *)this + 37);
  }
  return *((_BYTE *)v19 + 32) == 0;
}

BOOL antenna::Service::Internal::isAudioAnyOutputActive(antenna::Service::Internal *this)
{
  int **v2;
  char *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v11;
  uint64_t **v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  int *v18;
  int **v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t *v23;

  v2 = (int **)((char *)this + 288);
  v3 = (char *)*((_QWORD *)this + 36);
  v4 = (uint64_t **)((char *)this + 288);
  v5 = (uint64_t **)((char *)this + 288);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v3;
        v6 = *((_DWORD *)v3 + 7);
        if (v6 < 1)
          break;
        v3 = (char *)*v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if ((v6 & 0x80000000) == 0)
        break;
      v3 = (char *)v5[1];
      if (!v3)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v7 = (char *)v5;
    v5 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v5 + 7) = 0;
    *((_BYTE *)v5 + 32) = 0;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t *)v7;
    *v4 = (uint64_t *)v5;
    v8 = **((_QWORD **)this + 35);
    v9 = (uint64_t *)v5;
    if (v8)
    {
      *((_QWORD *)this + 35) = v8;
      v9 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
    ++*((_QWORD *)this + 37);
  }
  if (*((_BYTE *)v5 + 32))
    return 1;
  v11 = *v2;
  v12 = (uint64_t **)v2;
  v13 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        v13 = v11;
        v14 = v11[7];
        if (v14 < 2)
          break;
        v11 = (int *)*v13;
        v12 = (uint64_t **)v13;
        if (!*v13)
          goto LABEL_20;
      }
      if (v14 == 1)
        break;
      v11 = (int *)v13[1];
      if (!v11)
      {
        v12 = (uint64_t **)(v13 + 1);
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    v15 = v13;
    v13 = operator new(0x28uLL);
    *((_DWORD *)v13 + 7) = 1;
    *((_BYTE *)v13 + 32) = 0;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = v15;
    *v12 = v13;
    v16 = **((_QWORD **)this + 35);
    v17 = v13;
    if (v16)
    {
      *((_QWORD *)this + 35) = v16;
      v17 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v17);
    ++*((_QWORD *)this + 37);
  }
  if (*((_BYTE *)v13 + 32))
    return 1;
  v18 = *v2;
  v19 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        v19 = (int **)v18;
        v20 = v18[7];
        if (v20 < 4)
          break;
        v18 = *v19;
        v2 = v19;
        if (!*v19)
          goto LABEL_31;
      }
      if (v20 == 3)
        break;
      v18 = v19[1];
      if (!v18)
      {
        v2 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    v21 = (int *)v19;
    v19 = (int **)operator new(0x28uLL);
    *((_DWORD *)v19 + 7) = 3;
    *((_BYTE *)v19 + 32) = 0;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v21;
    *v2 = (int *)v19;
    v22 = **((_QWORD **)this + 35);
    v23 = (uint64_t *)v19;
    if (v22)
    {
      *((_QWORD *)this + 35) = v22;
      v23 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v23);
    ++*((_QWORD *)this + 37);
  }
  return *((_BYTE *)v19 + 32) != 0;
}

uint64_t antenna::Service::Internal::isAudioOtherOutputActive(antenna::Service::Internal *this)
{
  char *v2;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = (char *)*((_QWORD *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t **)v2;
        v5 = *((_DWORD *)v2 + 7);
        if (v5 < 2)
          break;
        v2 = (char *)*v4;
        v3 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      if (v5 == 1)
        break;
      v2 = (char *)v4[1];
      if (!v2)
      {
        v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v3 = (uint64_t **)((char *)this + 288);
    v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    v6 = (char *)v4;
    v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 1;
    *((_BYTE *)v4 + 32) = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t *)v6;
    *v3 = (uint64_t *)v4;
    v7 = **((_QWORD **)this + 35);
    v8 = (uint64_t *)v4;
    if (v7)
    {
      *((_QWORD *)this + 35) = v7;
      v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((_QWORD *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::isAudioSpeakerOutputActive(antenna::Service::Internal *this)
{
  char *v2;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = (char *)*((_QWORD *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t **)v2;
        v5 = *((_DWORD *)v2 + 7);
        if (v5 < 4)
          break;
        v2 = (char *)*v4;
        v3 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      if (v5 == 3)
        break;
      v2 = (char *)v4[1];
      if (!v2)
      {
        v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v3 = (uint64_t **)((char *)this + 288);
    v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    v6 = (char *)v4;
    v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 3;
    *((_BYTE *)v4 + 32) = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t *)v6;
    *v3 = (uint64_t *)v4;
    v7 = **((_QWORD **)this + 35);
    v8 = (uint64_t *)v4;
    if (v7)
    {
      *((_QWORD *)this + 35) = v7;
      v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((_QWORD *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::isAudioReceiverOutputActive(antenna::Service::Internal *this)
{
  char *v2;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = (char *)*((_QWORD *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t **)v2;
        v5 = *((_DWORD *)v2 + 7);
        if (v5 < 1)
          break;
        v2 = (char *)*v4;
        v3 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      if ((v5 & 0x80000000) == 0)
        break;
      v2 = (char *)v4[1];
      if (!v2)
      {
        v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v3 = (uint64_t **)((char *)this + 288);
    v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    v6 = (char *)v4;
    v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 0;
    *((_BYTE *)v4 + 32) = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t *)v6;
    *v3 = (uint64_t *)v4;
    v7 = **((_QWORD **)this + 35);
    v8 = (uint64_t *)v4;
    if (v7)
    {
      *((_QWORD *)this + 35) = v7;
      v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((_QWORD *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

void antenna::Service::Internal::setAudioState(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  xpc_object_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v4 = (std::__shared_weak_count *)a1[10];
    if (!v4)
LABEL_13:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v3 = xpc_null_create();
    v4 = (std::__shared_weak_count *)a1[10];
    if (!v4)
      goto LABEL_13;
  }
  v5 = a1[9];
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    goto LABEL_13;
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  v9 = xpc_null_create();
  v10 = a1[11];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>(antenna::Service::Internal::setAudioState(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::setAudioState(xpc::dict)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

uint64_t antenna::Service::Internal::setTxPowerPlayAlert_sync(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;

  *(_BYTE *)(result + 333) = 0;
  if (!*(_BYTE *)(result + 332))
    return result;
  v3 = result;
  result = TelephonyUtilIsInternalBuild();
  if ((result & 1) != 0 || (result = TelephonyUtilIsCarrierBuild(), (_DWORD)result))
  {
    v4 = *(_DWORD *)(v3 + 208);
    if (v4 != 4)
    {
LABEL_7:
      if (v4 == a2)
        return result;
      goto LABEL_8;
    }
  }
  result = antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)v3);
  if ((result & 1) != 0
    || (result = antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)v3), (_DWORD)result)
    && !*(_DWORD *)(v3 + 252)
    || *(_BYTE *)(v3 + 155)
    && (result = antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)v3), (result & 1) == 0)
    && !*(_DWORD *)(v3 + 252))
  {
    v4 = 2;
    goto LABEL_7;
  }
  if (a2 != 3)
LABEL_8:
    *(_BYTE *)(v3 + 333) = 1;
  return result;
}

uint64_t antenna::Service::Internal::getTxPowerCappingForIPhone(antenna::Service::Internal *this)
{
  uint64_t result;

  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (result = *((unsigned int *)this + 52), (_DWORD)result == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((_BYTE *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

BOOL antenna::Service::Internal::isMotionOnTablePosition(antenna::Service::Internal *this)
{
  return *((_DWORD *)this + 63) == 0;
}

void antenna::Service::Internal::stopTxMotionCallbackTimer_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v3)
      dispatch_release(v3);
  }
}

void antenna::Service::Internal::startTxMotionCallbackTimer_sync(dispatch_queue_t *this)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  std::__shared_weak_count *v5;
  dispatch_queue_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  unint64_t v14;
  _QWORD handler[6];
  std::__shared_weak_count *v16;

  v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, this[11]);
  v3 = this[32];
  this[32] = v2;
  if (v3)
  {
    dispatch_release(v3);
    v2 = this[32];
  }
  v4 = dispatch_time(0, 5120000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v5 = (std::__shared_weak_count *)this[10];
  if (!v5 || (v6 = this[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v13 = this[32];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal31startTxMotionCallbackTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_35;
  handler[4] = this;
  handler[5] = v6;
  v16 = v8;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v13, handler);
  dispatch_activate(this[32]);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN7antenna7Service8Internal31startTxMotionCallbackTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  antenna::Service::Internal *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (antenna::Service::Internal *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        antenna::Service::Internal::handleMotionCallbackTimerExpiry_sync(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF4B3030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::handleMotionCallbackTimerExpiry_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I WARNING - Motion callback missing", v7, 2u);
  }
  v3 = *((_QWORD *)this + 32);
  if (v3)
  {
    dispatch_source_cancel(v3);
    v4 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v4)
      dispatch_release(v4);
  }
  ++*((_QWORD *)this + 33);
  *((_DWORD *)this + 63) = 1;
  antenna::Service::Internal::startTxMotionCallbackTimer_sync(this);
  if (*((_BYTE *)this + 153))
  {
    if (*((_BYTE *)this + 248))
    {
      v5 = *((_QWORD *)this + 45);
      if (!v5)
        goto LABEL_13;
    }
    else
    {
      antenna::Service::Internal::startMotionDetection_sync(this);
      v5 = *((_QWORD *)this + 45);
      if (!v5)
      {
LABEL_13:
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
        return;
      }
    }
    dispatch_source_cancel(v5);
    v6 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v6)
      dispatch_release(v6);
    goto LABEL_13;
  }
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void antenna::Service::Internal::setMotionThresholds(CMOnBodyDelegate **a1, ctu **a2)
{
  void *v4;
  const void *v5;
  CFTypeID v6;
  const void *v7;
  CFTypeRef cf;

  if (a1[29] && CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)a1))
  {
    ctu::xpc_to_cf(*a2, v4);
    v5 = cf;
    if (cf && (v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
    {
      CFRetain(cf);
      v7 = cf;
    }
    else
    {
      v5 = 0;
      v7 = cf;
      if (!cf)
        goto LABEL_8;
    }
    CFRelease(v7);
LABEL_8:
    CMOnBodyDelegate::setThresholds(a1[29], v5);
    if (v5)
      CFRelease(v5);
  }
}

void sub_1BF4B321C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF4B3230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::startMotionDetection_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  CMOnBodyDelegate *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v2 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v2)
      dispatch_release(v2);
  }
  if (*((_BYTE *)this + 216))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)v2))
    {
      if (!*((_BYTE *)this + 248))
      {
        v3 = (CMOnBodyDelegate *)*((_QWORD *)this + 29);
        if (v3)
        {
          *((_BYTE *)this + 248) = 1;
          *((_DWORD *)this + 63) = 1;
          CMOnBodyDelegate::startMotionDetection(v3);
          antenna::Service::Internal::startTxMotionCallbackTimer_sync(this);
          v4 = *((_QWORD *)this + 5);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v5 = 0;
            _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Motion Detection has been started!", v5, 2u);
          }
        }
      }
    }
  }
}

void antenna::Service::Internal::stopMotionDetection_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v2 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v2)
      dispatch_release(v2);
  }
  if (*((_BYTE *)this + 248)
    && *((_QWORD *)this + 29)
    && CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)v2)
    && (*((_BYTE *)this + 248) = 0,
        CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 29)),
        *((_QWORD *)this + 33) = 0,
        v3 = *((_QWORD *)this + 5),
        os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEBUG, "#D Motion Detection has been stopped!", v4, 2u);
    *((_DWORD *)this + 63) = 1;
  }
  else
  {
    *((_DWORD *)this + 63) = 1;
  }
}

void antenna::Service::Internal::motionDetectCallback_sync(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t buf[16];

  if (!*(_BYTE *)(a1 + 248))
    return;
  v4 = *(NSObject **)(a1 + 256);
  if (v4)
  {
    dispatch_source_cancel(v4);
    v5 = *(NSObject **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
    if (v5)
      dispatch_release(v5);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    v6 = *(_DWORD *)(a1 + 208);
    if (v6 != 4)
    {
LABEL_10:
      if (!*(_BYTE *)(a1 + 152))
        goto LABEL_23;
      goto LABEL_11;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1) && !*(_DWORD *)(a1 + 252)
    || *(_BYTE *)(a1 + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
    && !*(_DWORD *)(a1 + 252))
  {
    v6 = 2;
    goto LABEL_10;
  }
  v6 = 3;
  if (!*(_BYTE *)(a1 + 152))
    goto LABEL_23;
LABEL_11:
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    v6 = *(_DWORD *)(a1 + 208);
    if (v6 != 4)
    {
LABEL_23:
      v7 = *(NSObject **)(a1 + 40);
      v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if (a2)
        goto LABEL_24;
      goto LABEL_33;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1) && !*(_DWORD *)(a1 + 252)
    || *(_BYTE *)(a1 + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
    && !*(_DWORD *)(a1 + 252))
  {
    v6 = 2;
    v7 = *(NSObject **)(a1 + 40);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (a2)
    {
LABEL_24:
      if (!v8)
      {
        v9 = 1;
        if (!*(_BYTE *)(a1 + 152))
          goto LABEL_46;
LABEL_35:
        *(_BYTE *)(a1 + 333) = 0;
        if (*(_BYTE *)(a1 + 332))
        {
          if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
            || (v10 = *(_DWORD *)(a1 + 208), v10 == 4))
          {
            if (!antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
              && (!antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
               || *(_DWORD *)(a1 + 252))
              && (!*(_BYTE *)(a1 + 155)
               || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
               || *(_DWORD *)(a1 + 252)))
            {
              if (v6 == 3)
                goto LABEL_43;
              goto LABEL_42;
            }
            v10 = 2;
          }
          if (v10 != v6)
LABEL_42:
            *(_BYTE *)(a1 + 333) = 1;
        }
LABEL_43:
        if (capabilities::txpower::operator&() && v9 != *(_DWORD *)(a1 + 252))
          antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)a1);
        goto LABEL_46;
      }
      *(_WORD *)v13 = 0;
      _os_log_debug_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEBUG, "#D Motion Other Position Detected.", v13, 2u);
      v9 = 1;
      if (*(_BYTE *)(a1 + 152))
        goto LABEL_35;
      goto LABEL_46;
    }
  }
  else
  {
    v6 = 3;
    v7 = *(NSObject **)(a1 + 40);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (a2)
      goto LABEL_24;
  }
LABEL_33:
  if (!v8)
  {
    v9 = 0;
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_46;
    goto LABEL_35;
  }
  *(_WORD *)buf = 0;
  _os_log_debug_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEBUG, "#D Motion On Table Detected.", buf, 2u);
  v9 = 0;
  if (*(_BYTE *)(a1 + 152))
    goto LABEL_35;
LABEL_46:
  if (*(_BYTE *)(a1 + 153) && *(_DWORD *)(a1 + 252) != v9)
  {
    if (!*(_BYTE *)(a1 + 248))
      antenna::Service::Internal::startMotionDetection_sync((antenna::Service::Internal *)a1);
    v11 = *(NSObject **)(a1 + 360);
    if (v11)
    {
      dispatch_source_cancel(v11);
      v12 = *(NSObject **)(a1 + 360);
      *(_QWORD *)(a1 + 360) = 0;
      if (v12)
        dispatch_release(v12);
    }
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync((antenna::Service::Internal *)a1);
    antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)a1);
  }
  *(_DWORD *)(a1 + 252) = v9;
  antenna::Service::Internal::startTxMotionCallbackTimer_sync((dispatch_queue_t *)a1);
}

void antenna::Service::Internal::sendMotionHandDetectionState_sync(_QWORD *a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  _QWORD v11[2];
  xpc_object_t object;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB78]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_int64_create((unsigned __int16)a2);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB30], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  v11[0] = 0;
  v11[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(a1, &object, (uint64_t)v11);
  xpc_release(object);
  object = 0;
  v10 = a1[5];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = a2;
    _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Sent Hand Detection: %d", buf, 8u);
  }
  xpc_release(v5);
}

void sub_1BF4B38C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL antenna::Service::Internal::isHandednessCondition(antenna::Service::Internal *this)
{
  NSObject *v2;
  int v3;
  char *v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _DWORD v22[2];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 216);
    v4 = (char *)*((_QWORD *)this + 36);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = *((_DWORD *)v4 + 7);
          if (v7 < 1)
            break;
          v4 = (char *)*v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_9;
        }
        if ((v7 & 0x80000000) == 0)
          break;
        v4 = (char *)v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v5 = (uint64_t **)((char *)this + 288);
      v6 = (uint64_t **)((char *)this + 288);
LABEL_9:
      v8 = (char *)v6;
      v6 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v6 + 7) = 0;
      *((_BYTE *)v6 + 32) = 0;
      *v6 = 0;
      v6[1] = 0;
      v6[2] = (uint64_t *)v8;
      *v5 = (uint64_t *)v6;
      v9 = **((_QWORD **)this + 35);
      v10 = (uint64_t *)v6;
      if (v9)
      {
        *((_QWORD *)this + 35) = v9;
        v10 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v10);
      ++*((_QWORD *)this + 37);
    }
    v11 = *((unsigned __int8 *)v6 + 32);
    v12 = *((_DWORD *)this + 63);
    v13 = *((unsigned __int8 *)this + 560);
    v22[0] = 67109888;
    v22[1] = v3;
    v23 = 1024;
    v24 = v11;
    v25 = 1024;
    v26 = v12;
    v27 = 1024;
    v28 = v13;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I HandedCondition: fTxPowerTransmitStarted: %u, isAudioReceiverOutputActive(): %u, fMotionState: %u, fHandDetectionProxCovered: %u", (uint8_t *)v22, 0x1Au);
  }
  if (!*((_BYTE *)this + 216))
    return 0;
  v14 = (char *)*((_QWORD *)this + 36);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v16 = (uint64_t **)v14;
        v17 = *((_DWORD *)v14 + 7);
        if (v17 < 1)
          break;
        v14 = (char *)*v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_21;
      }
      if ((v17 & 0x80000000) == 0)
        break;
      v14 = (char *)v16[1];
      if (!v14)
      {
        v15 = v16 + 1;
        goto LABEL_21;
      }
    }
    if (!*((_BYTE *)v16 + 32))
      return 0;
  }
  else
  {
    v15 = (uint64_t **)((char *)this + 288);
    v16 = (uint64_t **)((char *)this + 288);
LABEL_21:
    v18 = operator new(0x28uLL);
    v18[7] = 0;
    *((_BYTE *)v18 + 32) = 0;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = (uint64_t *)v18;
    v19 = **((_QWORD **)this + 35);
    v20 = (uint64_t *)v18;
    if (v19)
    {
      *((_QWORD *)this + 35) = v19;
      v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v20);
    ++*((_QWORD *)this + 37);
    if (!*((_BYTE *)v18 + 32))
      return 0;
  }
  return *((_DWORD *)this + 63) && *((_BYTE *)this + 560);
}

void antenna::Service::Internal::handDetectCallback(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _DWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = a1;
  v8[2] = a2;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>(antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void antenna::Service::Internal::stopHandDetection_sync(antenna::Service::Internal *this)
{
  uint64_t *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17[2];

  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v2 = (uint64_t *)qword_1ED70FAA0;
  if (!qword_1ED70FAA0)
  {
    v3 = operator new(1uLL);
    v4 = operator new(0x20uLL);
    *v4 = off_1E7903F88;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_1ED70FAA8;
    qword_1ED70FAA0 = (uint64_t)v3;
    off_1ED70FAA8 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (uint64_t *)qword_1ED70FAA0;
  }
  v8 = (std::__shared_weak_count *)off_1ED70FAA8;
  v17[0] = v2;
  v17[1] = (uint64_t *)off_1ED70FAA8;
  if (off_1ED70FAA8)
  {
    v9 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported((Capabilities *)v2))
  {
    v11 = *((_QWORD *)this + 64);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v11)
    {
      v17[0] = **((uint64_t ***)this + 64);
      ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v17[0], v17);
      v14 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v17[0]) = 0;
        _os_log_debug_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEBUG, "#D Hand Detection Stopped!", (uint8_t *)v17, 2u);
      }
    }
  }
  else if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF4B3E24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF4B3E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::stopTxPowerCappingIPhoneTimer_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v3)
      dispatch_release(v3);
  }
}

uint64_t antenna::Service::Internal::getTxPowerCappingForWatch(antenna::Service::Internal *this)
{
  uint64_t result;
  char *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;

  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (result = *((unsigned int *)this + 52), (_DWORD)result == 4))
  {
    v3 = (char *)*((_QWORD *)this + 36);
    if (v3)
    {
      while (1)
      {
        while (1)
        {
          v5 = (uint64_t **)v3;
          v6 = *((_DWORD *)v3 + 7);
          if (v6 < 4)
            break;
          v3 = (char *)*v5;
          v4 = v5;
          if (!*v5)
            goto LABEL_11;
        }
        if (v6 == 3)
          break;
        v3 = (char *)v5[1];
        if (!v3)
        {
          v4 = v5 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v4 = (uint64_t **)((char *)this + 288);
      v5 = (uint64_t **)((char *)this + 288);
LABEL_11:
      v7 = (char *)v5;
      v5 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v5 + 7) = 3;
      *((_BYTE *)v5 + 32) = 0;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = (uint64_t *)v7;
      *v4 = (uint64_t *)v5;
      v8 = **((_QWORD **)this + 35);
      v9 = (uint64_t *)v5;
      if (v8)
      {
        *((_QWORD *)this + 35) = v8;
        v9 = *v4;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
      ++*((_QWORD *)this + 37);
    }
    result = 2;
    if (*((_BYTE *)v5 + 32))
    {
      if (*((_BYTE *)this + 165))
        return 3;
      else
        return 2;
    }
  }
  return result;
}

std::string *antenna::Service::Internal::getTxPowerCappingIPhoneModeString_sync@<X0>(_DWORD *a1@<X1>, std::string *a2@<X8>)
{
  int v3;
  std::string *result;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *a1 - 1;
  if (v3 < 4)
    return std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E7909CF0 + v3));
  return result;
}

void sub_1BF4B3FE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t antenna::Service::Internal::getTxPowerCappingAntennaFreeSpaceMode(antenna::Service::Internal *this)
{
  uint64_t result;

  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild())
    return antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
  result = *((unsigned int *)this + 53);
  if ((_DWORD)result == 255)
    return antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
  return result;
}

void antenna::Service::Internal::startTxPowerCappingIPhoneTimer_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  dispatch_time_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD handler[6];
  std::__shared_weak_count *v18;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v3)
      dispatch_release(v3);
  }
  v4 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 11));
  v5 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v4;
  if (v5)
  {
    dispatch_release(v5);
    v4 = *((_QWORD *)this + 25);
  }
  v6 = dispatch_time(0, 2000000000);
  dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v7 || (v8 = *((_QWORD *)this + 9), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  v15 = *((_QWORD *)this + 25);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal35startTxPowerCappingIPhoneTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_4_4;
  handler[4] = this;
  handler[5] = v8;
  v18 = v10;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v15, handler);
  dispatch_activate(*((dispatch_object_t *)this + 25));
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v10);
}

void ___ZN7antenna7Service8Internal35startTxPowerCappingIPhoneTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  antenna::Service::Internal *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (antenna::Service::Internal *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5] && *((_BYTE *)v3 + 216))
        antenna::Service::Internal::startTxPowerCappingIPhone_sync(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF4B4270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::handleTxPowerCappingIPhoneTimerExpiry_sync(antenna::Service::Internal *this)
{
  if (*((_BYTE *)this + 216))
    antenna::Service::Internal::startTxPowerCappingIPhone_sync(this);
}

void antenna::Service::Internal::setTxPowerCappingIPhoneMode_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  xpc_object_t value;
  const char *v4;
  const void **v5;
  const void **v6;
  int v7;
  size_t v8;
  const void *v9;
  const void *v10;
  const void **v11;
  const void *v12;
  size_t v13;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  size_t v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  size_t v31;
  const void *v32;
  int v33;
  xpc_object_t object;
  const void *__s1[3];

  memset(__s1, 170, sizeof(__s1));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0E8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v4);
  xpc_release(object);
  if (SHIBYTE(__s1[2]) >= 0)
    v5 = (const void **)((char *)__s1 + HIBYTE(__s1[2]));
  else
    v5 = (const void **)((char *)__s1[0] + (unint64_t)__s1[1]);
  if (SHIBYTE(__s1[2]) >= 0)
    v6 = __s1;
  else
    v6 = (const void **)__s1[0];
  for (; v6 != v5; v6 = (const void **)((char *)v6 + 1))
    *(_BYTE *)v6 = __toupper(*(char *)v6);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (v7 = *((_DWORD *)this + 52), v7 == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((_BYTE *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      v7 = 2;
    }
    else
    {
      v7 = 3;
    }
  }
  v8 = strlen((const char *)*MEMORY[0x1E0CFB960]);
  v9 = (const void *)v8;
  v10 = (const void *)HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v8 != -1)
    {
      v11 = __s1;
      v12 = (const void *)HIBYTE(__s1[2]);
      goto LABEL_28;
    }
LABEL_96:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 == -1)
    goto LABEL_96;
  v11 = (const void **)__s1[0];
  v12 = __s1[1];
LABEL_28:
  if (v12 >= v9)
    v13 = (size_t)v9;
  else
    v13 = (size_t)v12;
  if (!memcmp(v11, (const void *)*MEMORY[0x1E0CFB960], v13) && v12 == v9)
  {
    v20 = 1;
    goto LABEL_78;
  }
  v15 = (const void *)*MEMORY[0x1E0CFC120];
  v16 = (const void *)strlen((const char *)*MEMORY[0x1E0CFC120]);
  v17 = v16;
  if ((v10 & 0x80) != 0)
  {
    if (v16 != (const void *)-1)
    {
      v18 = __s1[1];
      if (__s1[1] >= v16)
        v21 = v16;
      else
        v21 = __s1[1];
      if (memcmp(__s1[0], v15, (size_t)v21))
        goto LABEL_50;
      goto LABEL_48;
    }
LABEL_97:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 == (const void *)-1)
    goto LABEL_97;
  v18 = v10;
  if (v10 >= v16)
    v19 = (size_t)v16;
  else
    v19 = (size_t)v10;
  if (memcmp(__s1, v15, v19))
    goto LABEL_50;
LABEL_48:
  if (v18 == v17)
  {
    v20 = 4;
    goto LABEL_78;
  }
LABEL_50:
  v22 = (const void *)*MEMORY[0x1E0CFBA50];
  v23 = (const void *)strlen((const char *)*MEMORY[0x1E0CFBA50]);
  v24 = v23;
  if ((v10 & 0x80) == 0)
  {
    if (v23 != (const void *)-1)
    {
      v25 = v10;
      if (v10 >= v23)
        v26 = (size_t)v23;
      else
        v26 = (size_t)v10;
      if (memcmp(__s1, v22, v26))
        goto LABEL_64;
      goto LABEL_62;
    }
LABEL_98:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == (const void *)-1)
    goto LABEL_98;
  v25 = __s1[1];
  if (__s1[1] >= v23)
    v27 = v23;
  else
    v27 = __s1[1];
  if (!memcmp(__s1[0], v22, (size_t)v27))
  {
LABEL_62:
    if (v25 != v24)
      goto LABEL_64;
    v20 = 3;
LABEL_78:
    *((_DWORD *)this + 52) = v20;
    goto LABEL_79;
  }
LABEL_64:
  v28 = (const void *)*MEMORY[0x1E0CFBA58];
  v29 = (const void *)strlen((const char *)*MEMORY[0x1E0CFBA58]);
  v30 = v29;
  if ((v10 & 0x80) == 0)
  {
    if (v29 != (const void *)-1)
    {
      if (v10 >= v29)
        v31 = (size_t)v29;
      else
        v31 = (size_t)v10;
      if (memcmp(__s1, v28, v31))
        goto LABEL_79;
      goto LABEL_76;
    }
LABEL_99:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v29 == (const void *)-1)
    goto LABEL_99;
  v10 = __s1[1];
  if (__s1[1] >= v29)
    v32 = v29;
  else
    v32 = __s1[1];
  if (!memcmp(__s1[0], v28, (size_t)v32))
  {
LABEL_76:
    if (v10 != v30)
      goto LABEL_79;
    v20 = 2;
    goto LABEL_78;
  }
LABEL_79:
  *((_BYTE *)this + 333) = 0;
  if (!*((_BYTE *)this + 332))
    goto LABEL_87;
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    v33 = *((_DWORD *)this + 52);
    if (v33 != 4)
    {
LABEL_85:
      if (v33 == v7)
        goto LABEL_87;
      goto LABEL_86;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
    || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
    || *((_BYTE *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
  {
    v33 = 2;
    goto LABEL_85;
  }
  if (v7 != 3)
LABEL_86:
    *((_BYTE *)this + 333) = 1;
LABEL_87:
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
}

void sub_1BF4B4668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::copyTxPowerCappingIPhoneMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  int v9;
  std::string *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  std::string v25;

  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  v8 = *a2;
  if (MEMORY[0x1C3B8A86C](*a2) == v6)
  {
    memset(&v25, 0, sizeof(v25));
    v9 = *((_DWORD *)this + 52) - 1;
    if (v9 < 4)
      std::string::__assign_external(&v25, **((const std::string::value_type ***)&unk_1E7909CF0 + v9));
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v25;
    else
      v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
    v11 = xpc_string_create((const char *)v10);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFC0E8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((_BYTE *)this + 152))
    {
      v13 = xpc_dictionary_create(0, 0, 0);
      if (v13 || (v13 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v13) == v6)
        {
          xpc_retain(v13);
          v14 = v13;
        }
        else
        {
          v14 = xpc_null_create();
        }
      }
      else
      {
        v14 = xpc_null_create();
        v13 = 0;
      }
      xpc_release(v13);
      if (MEMORY[0x1C3B8A86C](v14) == v6)
      {
        v15 = xpc_string_create((const char *)*MEMORY[0x1E0CFB960]);
        if (!v15)
          v15 = xpc_null_create();
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFBDA8], v15);
        v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        v17 = xpc_string_create((const char *)*MEMORY[0x1E0CFC120]);
        if (!v17)
          v17 = xpc_null_create();
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFBE20], v17);
        v18 = xpc_null_create();
        xpc_release(v17);
        xpc_release(v18);
        v19 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA50]);
        if (!v19)
          v19 = xpc_null_create();
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFBE28], v19);
        v20 = xpc_null_create();
        xpc_release(v19);
        xpc_release(v20);
        v21 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA58]);
        if (!v21)
          v21 = xpc_null_create();
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFBE30], v21);
        v22 = xpc_null_create();
        xpc_release(v21);
        xpc_release(v22);
        if (v14)
        {
          xpc_retain(v14);
          v23 = v14;
        }
        else
        {
          v23 = xpc_null_create();
        }
        xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC0F0], v23);
        v24 = xpc_null_create();
        xpc_release(v23);
        xpc_release(v24);
      }
      xpc_release(v14);
    }
  }
}

void sub_1BF4B4A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_object_t *v15;
  void *v16;

  xpc_release(v16);
  xpc::dict::~dict(v15);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerCappingIPhoneOverrideFreeSpace_sync(antenna::Service::Internal *this, const xpc::object *a2)
{
  const char *v4;
  const void **v5;
  unsigned __int8 v6;
  const void **v7;
  NSObject *v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  const void **v12;
  size_t v13;
  size_t v15;
  unint64_t v16;
  size_t v17;
  const void **v18;
  int v19;
  size_t v20;
  const void *v22;
  const void *v23;
  const void *v24;
  unint64_t v25;
  size_t v26;
  const void *v27;
  NSObject *v28;
  const void **v29;
  int v30;
  const void *__s1[3];
  uint8_t buf[4];
  const void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || !*((_BYTE *)this + 154))
  {
    return;
  }
  v5 = __s1;
  memset(__s1, 170, sizeof(__s1));
  xpc::dyn_cast_or_default(a2, (const object *)"", v4);
  v6 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0)
    v7 = (const void **)((char *)__s1 + HIBYTE(__s1[2]));
  else
    v7 = (const void **)((char *)__s1[0] + (unint64_t)__s1[1]);
  if (SHIBYTE(__s1[2]) < 0)
    v5 = (const void **)__s1[0];
  if (v5 != v7)
  {
    do
    {
      *(_BYTE *)v5 = __toupper(*(char *)v5);
      v5 = (const void **)((char *)v5 + 1);
    }
    while (v5 != v7);
    v6 = HIBYTE(__s1[2]);
  }
  v8 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v29 = __s1;
    if ((v6 & 0x80u) != 0)
      v29 = (const void **)__s1[0];
    *(_DWORD *)buf = 136315138;
    v33 = v29;
    _os_log_debug_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEBUG, "#D Overridding Free Space as %s", buf, 0xCu);
    v6 = HIBYTE(__s1[2]);
  }
  v9 = strlen((const char *)*MEMORY[0x1E0CFBE08]);
  v10 = v9;
  if ((v6 & 0x80) == 0)
  {
    if (v9 != -1)
    {
      v11 = v6;
      v12 = __s1;
      goto LABEL_18;
    }
LABEL_63:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v9 == -1)
    goto LABEL_63;
  v12 = (const void **)__s1[0];
  v11 = (size_t)__s1[1];
LABEL_18:
  if (v11 >= v10)
    v13 = v10;
  else
    v13 = v11;
  if (!memcmp(v12, (const void *)*MEMORY[0x1E0CFBE08], v13) && v11 == v10)
  {
    v19 = 0;
LABEL_53:
    *((_DWORD *)this + 53) = v19;
    goto LABEL_54;
  }
  v15 = strlen((const char *)*MEMORY[0x1E0CFBF90]);
  v16 = v15;
  if ((v6 & 0x80) == 0)
  {
    if (v15 != -1)
    {
      v17 = v6;
      v18 = __s1;
      goto LABEL_31;
    }
LABEL_64:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 == -1)
    goto LABEL_64;
  v18 = (const void **)__s1[0];
  v17 = (size_t)__s1[1];
LABEL_31:
  if (v17 >= v16)
    v20 = v16;
  else
    v20 = v17;
  if (!memcmp(v18, (const void *)*MEMORY[0x1E0CFBF90], v20) && v17 == v16)
  {
    v19 = 1;
    goto LABEL_53;
  }
  v22 = (const void *)*MEMORY[0x1E0CFBFE8];
  v23 = (const void *)strlen((const char *)*MEMORY[0x1E0CFBFE8]);
  v24 = v23;
  if ((v6 & 0x80) != 0)
  {
    if (v23 != (const void *)-1)
    {
      v25 = (unint64_t)__s1[1];
      if (__s1[1] >= v23)
        v27 = v23;
      else
        v27 = __s1[1];
      if (memcmp(__s1[0], v22, (size_t)v27))
        goto LABEL_54;
      goto LABEL_51;
    }
LABEL_65:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == (const void *)-1)
    goto LABEL_65;
  v25 = v6;
  if (v6 >= (unint64_t)v23)
    v26 = (size_t)v23;
  else
    v26 = v6;
  if (memcmp(__s1, v22, v26))
    goto LABEL_54;
LABEL_51:
  if ((const void *)v25 == v24)
  {
    v19 = 255;
    goto LABEL_53;
  }
LABEL_54:
  v28 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    if ((v6 & 0x80) == 0)
      return;
    goto LABEL_56;
  }
  v30 = *((_DWORD *)this + 53);
  *(_DWORD *)buf = 67109120;
  LODWORD(v33) = v30;
  _os_log_debug_impl(&dword_1BF335000, v28, OS_LOG_TYPE_DEBUG, "#D Overridden Free Space as 0x%x", buf, 8u);
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
LABEL_56:
    operator delete((void *)__s1[0]);
}

void sub_1BF4B4E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync(antenna::Service::Internal *this@<X0>, std::string *a2@<X8>)
{
  const void *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::string::value_type **v11;
  NSObject *v12;
  std::string *v13;
  int v14;
  std::string *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, sizeof(std::string));
  v4 = (const void *)*MEMORY[0x1E0CFBFE8];
  v5 = strlen((const char *)*MEMORY[0x1E0CFBFE8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    a2->__r_.__value_.__l.__size_ = v6;
    a2->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_8;
  }
  *((_BYTE *)&a2->__r_.__value_.__s + 23) = v5;
  v7 = a2;
  if (v5)
LABEL_8:
    memmove(v7, v4, v6);
  *((_BYTE *)v7 + v6) = 0;
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || !*((_BYTE *)this + 154))
  {
    return;
  }
  v10 = *((_DWORD *)this + 53);
  if (v10)
  {
    if (v10 != 1)
      goto LABEL_17;
    v11 = (const std::string::value_type **)MEMORY[0x1E0CFBF90];
  }
  else
  {
    v11 = (const std::string::value_type **)MEMORY[0x1E0CFBE08];
  }
  std::string::__assign_external(a2, *v11);
LABEL_17:
  v12 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = a2;
    else
      v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v14 = 136315138;
    v15 = v13;
    _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D Overridden Free Space as %s", (uint8_t *)&v14, 0xCu);
  }
}

void sub_1BF4B5000(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::setTxPowerAudioMode_sync(uint64_t **this, xpc_object_t *a2)
{
  xpc_object_t value;
  const char *v4;
  const void **v5;
  const void **v6;
  int v7;
  size_t v8;
  const void *v9;
  const void *v10;
  const void **v11;
  const void *v12;
  size_t v13;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  size_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  char v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  const void *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  int v38;
  _DWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  size_t v48;
  const void *v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t *v53;
  int v54;
  _DWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  const void *v60;
  const void *v61;
  const void *v62;
  size_t v63;
  int v64;
  _DWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t **v70;
  int v71;
  _DWORD *v72;
  uint64_t *v73;
  uint64_t *v74;
  char v75;
  uint64_t *v76;
  uint64_t **v77;
  uint64_t **v78;
  int v79;
  _DWORD *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t **v84;
  int v85;
  void *v86;
  uint64_t *v87;
  uint64_t *v88;
  char v89;
  char *v90;
  uint64_t *v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  const void *v96;
  uint64_t *v97;
  uint64_t **v98;
  uint64_t **v99;
  uint64_t *v100;
  int v101;
  _DWORD *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t **v105;
  uint64_t **v106;
  int v107;
  _DWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  char *v111;
  int v112;
  int v113;
  _DWORD *v114;
  uint64_t *v115;
  uint64_t *v116;
  char *v117;
  int v118;
  NSObject *v119;
  xpc_object_t v120;
  uint64_t v121;
  xpc_object_t v122;
  xpc_object_t v123;
  xpc_object_t v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t **v128;
  int v129;
  void *v130;
  uint64_t *v131;
  uint64_t *v132;
  xpc_object_t v133;
  xpc_object_t v134;
  uint64_t *v135;
  uint64_t **v136;
  uint64_t **v137;
  int v138;
  void *v139;
  uint64_t *v140;
  uint64_t *v141;
  xpc_object_t v142;
  xpc_object_t v143;
  uint64_t *v144;
  uint64_t **v145;
  int v146;
  void *v147;
  uint64_t *v148;
  uint64_t *v149;
  xpc_object_t v150;
  xpc_object_t v151;
  xpc_object_t v152;
  xpc_object_t v153;
  xpc_object_t v154;
  int v155;
  uint64_t *v156;
  uint64_t **v157;
  uint64_t **v158;
  int v159;
  _DWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  int v163;
  uint64_t *v164;
  uint64_t **v165;
  uint64_t **v166;
  int v167;
  _DWORD *v168;
  uint64_t *v169;
  uint64_t *v170;
  int v171;
  uint64_t *v172;
  uint64_t **v173;
  uint64_t **v174;
  int v175;
  _DWORD *v176;
  uint64_t *v177;
  uint64_t *v178;
  int v179;
  int v180;
  _DWORD *v181;
  uint64_t *v182;
  uint64_t *v183;
  char *v184;
  int v185;
  uint64_t *v186;
  uint64_t *v187;
  xpc_object_t v188;
  const void *__s1[3];
  xpc_object_t object[2];

  object[1] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  memset(__s1, 170, sizeof(__s1));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBF30]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v4);
  xpc_release(object[0]);
  if (SHIBYTE(__s1[2]) >= 0)
    v5 = (const void **)((char *)__s1 + HIBYTE(__s1[2]));
  else
    v5 = (const void **)((char *)__s1[0] + (unint64_t)__s1[1]);
  if (SHIBYTE(__s1[2]) >= 0)
    v6 = __s1;
  else
    v6 = (const void **)__s1[0];
  for (; v6 != v5; v6 = (const void **)((char *)v6 + 1))
    *(_BYTE *)v6 = __toupper(*(char *)v6);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (v7 = *((_DWORD *)this + 52), v7 == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)this)
      || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
      && !*((_DWORD *)this + 63)
      || *((_BYTE *)this + 155)
      && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
      && !*((_DWORD *)this + 63))
    {
      v7 = 2;
    }
    else
    {
      v7 = 3;
    }
  }
  v8 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  v9 = (const void *)v8;
  v10 = (const void *)HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v8 != -1)
    {
      v11 = __s1;
      v12 = (const void *)HIBYTE(__s1[2]);
      goto LABEL_28;
    }
LABEL_349:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 == -1)
    goto LABEL_349;
  v11 = (const void **)__s1[0];
  v12 = __s1[1];
LABEL_28:
  if (v12 >= v9)
    v13 = (size_t)v9;
  else
    v13 = (size_t)v12;
  if (!memcmp(v11, (const void *)*MEMORY[0x1E0CFC120], v13) && v12 == v9)
  {
    *((_DWORD *)this + 82) = 0;
    v20 = this + 39;
    v21 = this[39];
    v22 = this + 39;
    v23 = this + 39;
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          v23 = (uint64_t **)v21;
          v24 = *((_DWORD *)v21 + 7);
          if (v24 < 1)
            break;
          v21 = *v23;
          v22 = v23;
          if (!*v23)
            goto LABEL_49;
        }
        if ((v24 & 0x80000000) == 0)
          break;
        v21 = v23[1];
        if (!v21)
        {
          v22 = v23 + 1;
          goto LABEL_49;
        }
      }
      v28 = *((_BYTE *)v23 + 32);
      v29 = this + 36;
      v30 = this[36];
      v31 = this + 36;
      v32 = this + 36;
      if (v30)
        goto LABEL_104;
    }
    else
    {
LABEL_49:
      v25 = operator new(0x28uLL);
      v25[7] = 0;
      *((_BYTE *)v25 + 32) = 0;
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = v23;
      *v22 = (uint64_t *)v25;
      v26 = (uint64_t *)*this[38];
      v27 = (uint64_t *)v25;
      if (v26)
      {
        this[38] = v26;
        v27 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v27);
      this[40] = (uint64_t *)((char *)this[40] + 1);
      v28 = *((_BYTE *)v25 + 32);
      v29 = this + 36;
      v30 = this[36];
      v31 = this + 36;
      v32 = this + 36;
      if (v30)
      {
        while (1)
        {
LABEL_104:
          while (1)
          {
            v32 = (uint64_t **)v30;
            v64 = *((_DWORD *)v30 + 7);
            if (v64 < 1)
              break;
            v30 = *v32;
            v31 = v32;
            if (!*v32)
              goto LABEL_108;
          }
          if ((v64 & 0x80000000) == 0)
            break;
          v30 = v32[1];
          if (!v30)
          {
            v31 = v32 + 1;
            goto LABEL_108;
          }
        }
        *((_BYTE *)v32 + 32) = v28;
        v68 = *v20;
        v69 = this + 39;
        v70 = this + 39;
        if (*v20)
          goto LABEL_115;
        goto LABEL_119;
      }
    }
LABEL_108:
    v65 = operator new(0x28uLL);
    v65[7] = 0;
    *((_BYTE *)v65 + 32) = 0;
    *(_QWORD *)v65 = 0;
    *((_QWORD *)v65 + 1) = 0;
    *((_QWORD *)v65 + 2) = v32;
    *v31 = (uint64_t *)v65;
    v66 = (uint64_t *)*this[35];
    v67 = (uint64_t *)v65;
    if (v66)
    {
      this[35] = v66;
      v67 = *v31;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v67);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v65 + 32) = v28;
    v68 = *v20;
    v69 = this + 39;
    v70 = this + 39;
    if (*v20)
    {
      while (1)
      {
LABEL_115:
        while (1)
        {
          v70 = (uint64_t **)v68;
          v71 = *((_DWORD *)v68 + 7);
          if (v71 < 2)
            break;
          v68 = *v70;
          v69 = v70;
          if (!*v70)
            goto LABEL_119;
        }
        if (v71 == 1)
          break;
        v68 = v70[1];
        if (!v68)
        {
          v69 = v70 + 1;
          goto LABEL_119;
        }
      }
      v75 = *((_BYTE *)v70 + 32);
      v76 = *v29;
      v77 = v29;
      v78 = v29;
      if (*v29)
        goto LABEL_126;
      goto LABEL_130;
    }
LABEL_119:
    v72 = operator new(0x28uLL);
    v72[7] = 1;
    *((_BYTE *)v72 + 32) = 0;
    *(_QWORD *)v72 = 0;
    *((_QWORD *)v72 + 1) = 0;
    *((_QWORD *)v72 + 2) = v70;
    *v69 = (uint64_t *)v72;
    v73 = (uint64_t *)*this[38];
    v74 = (uint64_t *)v72;
    if (v73)
    {
      this[38] = v73;
      v74 = *v69;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v74);
    this[40] = (uint64_t *)((char *)this[40] + 1);
    v75 = *((_BYTE *)v72 + 32);
    v76 = *v29;
    v77 = v29;
    v78 = v29;
    if (*v29)
    {
      while (1)
      {
LABEL_126:
        while (1)
        {
          v78 = (uint64_t **)v76;
          v79 = *((_DWORD *)v76 + 7);
          if (v79 < 2)
            break;
          v76 = *v78;
          v77 = v78;
          if (!*v78)
            goto LABEL_130;
        }
        if (v79 == 1)
          break;
        v76 = v78[1];
        if (!v76)
        {
          v77 = v78 + 1;
          goto LABEL_130;
        }
      }
      *((_BYTE *)v78 + 32) = v75;
      v83 = *v20;
      v84 = this + 39;
      if (*v20)
        goto LABEL_137;
      goto LABEL_141;
    }
LABEL_130:
    v80 = operator new(0x28uLL);
    v80[7] = 1;
    *((_BYTE *)v80 + 32) = 0;
    *(_QWORD *)v80 = 0;
    *((_QWORD *)v80 + 1) = 0;
    *((_QWORD *)v80 + 2) = v78;
    *v77 = (uint64_t *)v80;
    v81 = (uint64_t *)*this[35];
    v82 = (uint64_t *)v80;
    if (v81)
    {
      this[35] = v81;
      v82 = *v77;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v82);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v80 + 32) = v75;
    v83 = *v20;
    v84 = this + 39;
    if (*v20)
    {
      while (1)
      {
LABEL_137:
        while (1)
        {
          v84 = (uint64_t **)v83;
          v85 = *((_DWORD *)v83 + 7);
          if (v85 < 4)
            break;
          v83 = *v84;
          v20 = v84;
          if (!*v84)
            goto LABEL_141;
        }
        if (v85 == 3)
          break;
        v83 = v84[1];
        if (!v83)
        {
          v20 = v84 + 1;
          goto LABEL_141;
        }
      }
      v89 = *((_BYTE *)v84 + 32);
      v90 = (char *)*v29;
      v91 = (uint64_t *)v29;
      if (*v29)
        goto LABEL_148;
      goto LABEL_152;
    }
LABEL_141:
    v86 = operator new(0x28uLL);
    *((_DWORD *)v86 + 7) = 3;
    *((_BYTE *)v86 + 32) = 0;
    *(_QWORD *)v86 = 0;
    *((_QWORD *)v86 + 1) = 0;
    *((_QWORD *)v86 + 2) = v84;
    *v20 = (uint64_t *)v86;
    v87 = (uint64_t *)*this[38];
    v88 = (uint64_t *)v86;
    if (v87)
    {
      this[38] = v87;
      v88 = *v20;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v88);
    this[40] = (uint64_t *)((char *)this[40] + 1);
    v89 = *((_BYTE *)v86 + 32);
    v90 = (char *)*v29;
    v91 = (uint64_t *)v29;
    if (*v29)
    {
      while (1)
      {
LABEL_148:
        while (1)
        {
          v91 = (uint64_t *)v90;
          v92 = *((_DWORD *)v90 + 7);
          if (v92 < 4)
            break;
          v90 = (char *)*v91;
          v29 = (uint64_t **)v91;
          if (!*v91)
            goto LABEL_152;
        }
        if (v92 == 3)
          goto LABEL_211;
        v90 = (char *)v91[1];
        if (!v90)
        {
          v29 = (uint64_t **)(v91 + 1);
          break;
        }
      }
    }
LABEL_152:
    v93 = (uint64_t *)operator new(0x28uLL);
    v94 = v93;
    *((_DWORD *)v93 + 7) = 3;
    *((_BYTE *)v93 + 32) = 0;
    *v93 = 0;
    v93[1] = 0;
    v93[2] = (uint64_t)v91;
    *v29 = v93;
    v95 = (uint64_t *)*this[35];
    if (!v95)
    {
      v91 = v93;
LABEL_210:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v94);
      this[37] = (uint64_t *)((char *)this[37] + 1);
LABEL_211:
      *((_BYTE *)v91 + 32) = v89;
      goto LABEL_212;
    }
    goto LABEL_208;
  }
  v15 = (const void *)*MEMORY[0x1E0CFB958];
  v16 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB958]);
  v17 = v16;
  if ((v10 & 0x80) != 0)
  {
    if (v16 != (const void *)-1)
    {
      v18 = __s1[1];
      if (__s1[1] >= v16)
        v33 = v16;
      else
        v33 = __s1[1];
      if (memcmp(__s1[0], v15, (size_t)v33))
        goto LABEL_70;
      goto LABEL_58;
    }
LABEL_350:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 == (const void *)-1)
    goto LABEL_350;
  v18 = v10;
  if (v10 >= v16)
    v19 = (size_t)v16;
  else
    v19 = (size_t)v10;
  if (memcmp(__s1, v15, v19))
    goto LABEL_70;
LABEL_58:
  if (v18 == v17)
  {
    *((_DWORD *)this + 82) = 1;
    v29 = this + 36;
    v34 = this[36];
    v35 = this + 36;
    v36 = this + 36;
    if (v34)
    {
      v37 = this[36];
      do
      {
        while (1)
        {
          v36 = (uint64_t **)v37;
          v38 = *((_DWORD *)v37 + 7);
          if (v38 < 1)
            break;
          v37 = *v36;
          v35 = v36;
          if (!*v36)
            goto LABEL_66;
        }
        if ((v38 & 0x80000000) == 0)
        {
          *((_BYTE *)v36 + 32) = 1;
          goto LABEL_173;
        }
        v37 = v36[1];
      }
      while (v37);
      v35 = v36 + 1;
    }
LABEL_66:
    v39 = operator new(0x28uLL);
    v39[7] = 0;
    *((_BYTE *)v39 + 32) = 0;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = v36;
    *v35 = (uint64_t *)v39;
    v40 = (uint64_t *)*this[35];
    v41 = (uint64_t *)v39;
    if (v40)
    {
      this[35] = v40;
      v41 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v41);
    v34 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v39 + 32) = 1;
    v42 = this + 36;
    v43 = this + 36;
    if (v34)
    {
      while (1)
      {
LABEL_173:
        while (1)
        {
          v43 = (uint64_t **)v34;
          v107 = *((_DWORD *)v34 + 7);
          if (v107 < 2)
            break;
          v34 = *v43;
          v42 = v43;
          if (!*v43)
            goto LABEL_177;
        }
        if (v107 == 1)
          break;
        v34 = v43[1];
        if (!v34)
        {
          v42 = v43 + 1;
          goto LABEL_177;
        }
      }
      *((_BYTE *)v43 + 32) = 0;
      v111 = (char *)*v29;
      v91 = (uint64_t *)(this + 36);
      if (*v29)
        goto LABEL_184;
      goto LABEL_206;
    }
LABEL_177:
    v108 = operator new(0x28uLL);
    v108[7] = 1;
    *((_BYTE *)v108 + 32) = 0;
    *(_QWORD *)v108 = 0;
    *((_QWORD *)v108 + 1) = 0;
    *((_QWORD *)v108 + 2) = v43;
    *v42 = (uint64_t *)v108;
    v109 = (uint64_t *)*this[35];
    v110 = (uint64_t *)v108;
    if (v109)
    {
      this[35] = v109;
      v110 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v110);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v108 + 32) = 0;
    v111 = (char *)*v29;
    v91 = (uint64_t *)(this + 36);
    if (!*v29)
      goto LABEL_206;
    while (1)
    {
LABEL_184:
      while (1)
      {
        v91 = (uint64_t *)v111;
        v112 = *((_DWORD *)v111 + 7);
        if (v112 < 4)
          break;
        v111 = (char *)*v91;
        v29 = (uint64_t **)v91;
        if (!*v91)
          goto LABEL_206;
      }
      if (v112 == 3)
        goto LABEL_291;
      v111 = (char *)v91[1];
      if (!v111)
      {
        v29 = (uint64_t **)(v91 + 1);
        goto LABEL_206;
      }
    }
  }
LABEL_70:
  v44 = (const void *)*MEMORY[0x1E0CFB6D0];
  v45 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB6D0]);
  v46 = v45;
  if ((v10 & 0x80) == 0)
  {
    if (v45 != (const void *)-1)
    {
      v47 = v10;
      if (v10 >= v45)
        v48 = (size_t)v45;
      else
        v48 = (size_t)v10;
      if (memcmp(__s1, v44, v48))
        goto LABEL_94;
      goto LABEL_82;
    }
LABEL_351:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v45 == (const void *)-1)
    goto LABEL_351;
  v47 = __s1[1];
  if (__s1[1] >= v45)
    v49 = v45;
  else
    v49 = __s1[1];
  if (!memcmp(__s1[0], v44, (size_t)v49))
  {
LABEL_82:
    if (v47 != v46)
      goto LABEL_94;
    *((_DWORD *)this + 82) = 2;
    v29 = this + 36;
    v50 = this[36];
    v51 = this + 36;
    v52 = this + 36;
    if (v50)
    {
      v53 = this[36];
      do
      {
        while (1)
        {
          v52 = (uint64_t **)v53;
          v54 = *((_DWORD *)v53 + 7);
          if (v54 < 1)
            break;
          v53 = *v52;
          v51 = v52;
          if (!*v52)
            goto LABEL_90;
        }
        if ((v54 & 0x80000000) == 0)
        {
          *((_BYTE *)v52 + 32) = 0;
          goto LABEL_191;
        }
        v53 = v52[1];
      }
      while (v53);
      v51 = v52 + 1;
    }
LABEL_90:
    v55 = operator new(0x28uLL);
    v55[7] = 0;
    *((_BYTE *)v55 + 32) = 0;
    *(_QWORD *)v55 = 0;
    *((_QWORD *)v55 + 1) = 0;
    *((_QWORD *)v55 + 2) = v52;
    *v51 = (uint64_t *)v55;
    v56 = (uint64_t *)*this[35];
    v57 = (uint64_t *)v55;
    if (v56)
    {
      this[35] = v56;
      v57 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v57);
    v50 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v55 + 32) = 0;
    v58 = this + 36;
    v59 = this + 36;
    if (v50)
    {
      while (1)
      {
LABEL_191:
        while (1)
        {
          v59 = (uint64_t **)v50;
          v113 = *((_DWORD *)v50 + 7);
          if (v113 < 2)
            break;
          v50 = *v59;
          v58 = v59;
          if (!*v59)
            goto LABEL_195;
        }
        if (v113 == 1)
          break;
        v50 = v59[1];
        if (!v50)
        {
          v58 = v59 + 1;
          goto LABEL_195;
        }
      }
      *((_BYTE *)v59 + 32) = 1;
      v117 = (char *)*v29;
      v91 = (uint64_t *)(this + 36);
      if (*v29)
        goto LABEL_202;
      goto LABEL_206;
    }
LABEL_195:
    v114 = operator new(0x28uLL);
    v114[7] = 1;
    *((_BYTE *)v114 + 32) = 0;
    *(_QWORD *)v114 = 0;
    *((_QWORD *)v114 + 1) = 0;
    *((_QWORD *)v114 + 2) = v59;
    *v58 = (uint64_t *)v114;
    v115 = (uint64_t *)*this[35];
    v116 = (uint64_t *)v114;
    if (v115)
    {
      this[35] = v115;
      v116 = *v58;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v116);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v114 + 32) = 1;
    v117 = (char *)*v29;
    v91 = (uint64_t *)(this + 36);
    if (!*v29)
    {
LABEL_206:
      v94 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v94 + 7) = 3;
      *((_BYTE *)v94 + 32) = 0;
      *v94 = 0;
      v94[1] = 0;
      v94[2] = (uint64_t)v91;
      *v29 = v94;
      v95 = (uint64_t *)*this[35];
      if (!v95)
      {
        v89 = 0;
        v91 = v94;
        goto LABEL_210;
      }
      v89 = 0;
LABEL_208:
      this[35] = v95;
LABEL_209:
      v91 = v94;
      v94 = *v29;
      goto LABEL_210;
    }
    while (1)
    {
LABEL_202:
      while (1)
      {
        v91 = (uint64_t *)v117;
        v118 = *((_DWORD *)v117 + 7);
        if (v118 < 4)
          break;
        v117 = (char *)*v91;
        v29 = (uint64_t **)v91;
        if (!*v91)
          goto LABEL_206;
      }
      if (v118 == 3)
        break;
      v117 = (char *)v91[1];
      if (!v117)
      {
        v29 = (uint64_t **)(v91 + 1);
        goto LABEL_206;
      }
    }
LABEL_291:
    v89 = 0;
    goto LABEL_211;
  }
LABEL_94:
  v60 = (const void *)*MEMORY[0x1E0CFB4A8];
  v61 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB4A8]);
  v62 = v61;
  if ((v10 & 0x80) == 0)
  {
    if (v61 != (const void *)-1)
    {
      if (v10 >= v61)
        v63 = (size_t)v61;
      else
        v63 = (size_t)v10;
      if (memcmp(__s1, v60, v63))
        goto LABEL_212;
      goto LABEL_159;
    }
LABEL_352:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v61 == (const void *)-1)
    goto LABEL_352;
  v10 = __s1[1];
  if (__s1[1] >= v61)
    v96 = v61;
  else
    v96 = __s1[1];
  if (!memcmp(__s1[0], v60, (size_t)v96))
  {
LABEL_159:
    if (v10 != v62)
      goto LABEL_212;
    *((_DWORD *)this + 82) = 3;
    v29 = this + 36;
    v97 = this[36];
    v98 = this + 36;
    v99 = this + 36;
    if (v97)
    {
      v100 = this[36];
      do
      {
        while (1)
        {
          v99 = (uint64_t **)v100;
          v101 = *((_DWORD *)v100 + 7);
          if (v101 < 1)
            break;
          v100 = *v99;
          v98 = v99;
          if (!*v99)
            goto LABEL_167;
        }
        if ((v101 & 0x80000000) == 0)
        {
          *((_BYTE *)v99 + 32) = 0;
          goto LABEL_327;
        }
        v100 = v99[1];
      }
      while (v100);
      v98 = v99 + 1;
    }
LABEL_167:
    v102 = operator new(0x28uLL);
    v102[7] = 0;
    *((_BYTE *)v102 + 32) = 0;
    *(_QWORD *)v102 = 0;
    *((_QWORD *)v102 + 1) = 0;
    *((_QWORD *)v102 + 2) = v99;
    *v98 = (uint64_t *)v102;
    v103 = (uint64_t *)*this[35];
    v104 = (uint64_t *)v102;
    if (v103)
    {
      this[35] = v103;
      v104 = *v98;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v104);
    v97 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v102 + 32) = 0;
    v105 = this + 36;
    v106 = this + 36;
    if (v97)
    {
      while (1)
      {
LABEL_327:
        while (1)
        {
          v106 = (uint64_t **)v97;
          v180 = *((_DWORD *)v97 + 7);
          if (v180 < 2)
            break;
          v97 = *v106;
          v105 = v106;
          if (!*v106)
            goto LABEL_331;
        }
        if (v180 == 1)
          break;
        v97 = v106[1];
        if (!v97)
        {
          v105 = v106 + 1;
          goto LABEL_331;
        }
      }
      *((_BYTE *)v106 + 32) = 0;
      v184 = (char *)*v29;
      v91 = (uint64_t *)(this + 36);
      if (*v29)
        goto LABEL_338;
    }
    else
    {
LABEL_331:
      v181 = operator new(0x28uLL);
      v181[7] = 1;
      *((_BYTE *)v181 + 32) = 0;
      *(_QWORD *)v181 = 0;
      *((_QWORD *)v181 + 1) = 0;
      *((_QWORD *)v181 + 2) = v106;
      *v105 = (uint64_t *)v181;
      v182 = (uint64_t *)*this[35];
      v183 = (uint64_t *)v181;
      if (v182)
      {
        this[35] = v182;
        v183 = *v105;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v183);
      this[37] = (uint64_t *)((char *)this[37] + 1);
      *((_BYTE *)v181 + 32) = 0;
      v184 = (char *)*v29;
      v91 = (uint64_t *)(this + 36);
      if (*v29)
      {
        while (1)
        {
LABEL_338:
          while (1)
          {
            v91 = (uint64_t *)v184;
            v185 = *((_DWORD *)v184 + 7);
            if (v185 < 4)
              break;
            v184 = (char *)*v91;
            v29 = (uint64_t **)v91;
            if (!*v91)
              goto LABEL_342;
          }
          if (v185 == 3)
            break;
          v184 = (char *)v91[1];
          if (!v184)
          {
            v29 = (uint64_t **)(v91 + 1);
            goto LABEL_342;
          }
        }
        v89 = 1;
        goto LABEL_211;
      }
    }
LABEL_342:
    v186 = (uint64_t *)operator new(0x28uLL);
    v94 = v186;
    *((_DWORD *)v186 + 7) = 3;
    *((_BYTE *)v186 + 32) = 0;
    *v186 = 0;
    v186[1] = 0;
    v186[2] = (uint64_t)v91;
    *v29 = v186;
    v187 = (uint64_t *)*this[35];
    if (!v187)
    {
      v89 = 1;
      v91 = v186;
      goto LABEL_210;
    }
    this[35] = v187;
    v89 = 1;
    goto LABEL_209;
  }
LABEL_212:
  v119 = this[5];
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    v156 = this[36];
    if (v156)
    {
      while (1)
      {
        while (1)
        {
          v158 = (uint64_t **)v156;
          v159 = *((_DWORD *)v156 + 7);
          if (v159 < 1)
            break;
          v156 = *v158;
          v157 = v158;
          if (!*v158)
            goto LABEL_299;
        }
        if ((v159 & 0x80000000) == 0)
          break;
        v156 = v158[1];
        if (!v156)
        {
          v157 = v158 + 1;
          goto LABEL_299;
        }
      }
      v160 = v158;
    }
    else
    {
      v157 = this + 36;
      v158 = this + 36;
LABEL_299:
      v160 = operator new(0x28uLL);
      v160[7] = 0;
      *((_BYTE *)v160 + 32) = 0;
      *(_QWORD *)v160 = 0;
      *((_QWORD *)v160 + 1) = 0;
      *((_QWORD *)v160 + 2) = v158;
      *v157 = (uint64_t *)v160;
      v161 = (uint64_t *)*this[35];
      v162 = (uint64_t *)v160;
      if (v161)
      {
        this[35] = v161;
        v162 = *v157;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v162);
      this[37] = (uint64_t *)((char *)this[37] + 1);
    }
    v163 = *((unsigned __int8 *)v160 + 32);
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v163;
    _os_log_debug_impl(&dword_1BF335000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Receiver: %d", (uint8_t *)object, 8u);
    v119 = this[5];
    if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
    {
LABEL_214:
      if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
        goto LABEL_215;
      goto LABEL_314;
    }
  }
  else if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_214;
  }
  v164 = this[36];
  if (v164)
  {
    while (1)
    {
      while (1)
      {
        v166 = (uint64_t **)v164;
        v167 = *((_DWORD *)v164 + 7);
        if (v167 < 2)
          break;
        v164 = *v166;
        v165 = v166;
        if (!*v166)
          goto LABEL_310;
      }
      if (v167 == 1)
        break;
      v164 = v166[1];
      if (!v164)
      {
        v165 = v166 + 1;
        goto LABEL_310;
      }
    }
    v168 = v166;
  }
  else
  {
    v165 = this + 36;
    v166 = this + 36;
LABEL_310:
    v168 = operator new(0x28uLL);
    v168[7] = 1;
    *((_BYTE *)v168 + 32) = 0;
    *(_QWORD *)v168 = 0;
    *((_QWORD *)v168 + 1) = 0;
    *((_QWORD *)v168 + 2) = v166;
    *v165 = (uint64_t *)v168;
    v169 = (uint64_t *)*this[35];
    v170 = (uint64_t *)v168;
    if (v169)
    {
      this[35] = v169;
      v170 = *v165;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v170);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  v171 = *((unsigned __int8 *)v168 + 32);
  LODWORD(object[0]) = 67109120;
  HIDWORD(object[0]) = v171;
  _os_log_debug_impl(&dword_1BF335000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Other: %d", (uint8_t *)object, 8u);
  v119 = this[5];
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
LABEL_314:
    v172 = this[36];
    if (v172)
    {
      while (1)
      {
        while (1)
        {
          v174 = (uint64_t **)v172;
          v175 = *((_DWORD *)v172 + 7);
          if (v175 < 4)
            break;
          v172 = *v174;
          v173 = v174;
          if (!*v174)
            goto LABEL_321;
        }
        if (v175 == 3)
          break;
        v172 = v174[1];
        if (!v172)
        {
          v173 = v174 + 1;
          goto LABEL_321;
        }
      }
      v176 = v174;
    }
    else
    {
      v173 = this + 36;
      v174 = this + 36;
LABEL_321:
      v176 = operator new(0x28uLL);
      v176[7] = 3;
      *((_BYTE *)v176 + 32) = 0;
      *(_QWORD *)v176 = 0;
      *((_QWORD *)v176 + 1) = 0;
      *((_QWORD *)v176 + 2) = v174;
      *v173 = (uint64_t *)v176;
      v177 = (uint64_t *)*this[35];
      v178 = (uint64_t *)v176;
      if (v177)
      {
        this[35] = v177;
        v178 = *v173;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v178);
      this[37] = (uint64_t *)((char *)this[37] + 1);
    }
    v179 = *((unsigned __int8 *)v176 + 32);
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v179;
    _os_log_debug_impl(&dword_1BF335000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Speaker: %d", (uint8_t *)object, 8u);
  }
LABEL_215:
  v120 = xpc_dictionary_create(0, 0, 0);
  v121 = MEMORY[0x1E0C812F8];
  if (v120 || (v120 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v120) == v121)
    {
      xpc_retain(v120);
      v122 = v120;
    }
    else
    {
      v122 = xpc_null_create();
    }
  }
  else
  {
    v122 = xpc_null_create();
    v120 = 0;
  }
  xpc_release(v120);
  v123 = xpc_dictionary_create(0, 0, 0);
  if (v123 || (v123 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v123) == v121)
    {
      xpc_retain(v123);
      v124 = v123;
    }
    else
    {
      v124 = xpc_null_create();
    }
  }
  else
  {
    v124 = xpc_null_create();
    v123 = 0;
  }
  xpc_release(v123);
  v125 = this + 36;
  v126 = this[36];
  v127 = this + 36;
  v128 = this + 36;
  if (v126)
  {
    while (1)
    {
      while (1)
      {
        v128 = (uint64_t **)v126;
        v129 = *((_DWORD *)v126 + 7);
        if (v129 < 1)
          break;
        v126 = *v128;
        v127 = v128;
        if (!*v128)
          goto LABEL_234;
      }
      if ((v129 & 0x80000000) == 0)
        break;
      v126 = v128[1];
      if (!v126)
      {
        v127 = v128 + 1;
        goto LABEL_234;
      }
    }
    v130 = v128;
  }
  else
  {
LABEL_234:
    v130 = operator new(0x28uLL);
    *((_DWORD *)v130 + 7) = 0;
    *((_BYTE *)v130 + 32) = 0;
    *(_QWORD *)v130 = 0;
    *((_QWORD *)v130 + 1) = 0;
    *((_QWORD *)v130 + 2) = v128;
    *v127 = (uint64_t *)v130;
    v131 = (uint64_t *)*this[35];
    v132 = (uint64_t *)v130;
    if (v131)
    {
      this[35] = v131;
      v132 = *v127;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v132);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  v133 = xpc_BOOL_create(*((_BYTE *)v130 + 32));
  if (!v133)
    v133 = xpc_null_create();
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E0CFB8C0], v133);
  v134 = xpc_null_create();
  xpc_release(v133);
  xpc_release(v134);
  v135 = *v125;
  v136 = this + 36;
  v137 = this + 36;
  if (*v125)
  {
    while (1)
    {
      while (1)
      {
        v137 = (uint64_t **)v135;
        v138 = *((_DWORD *)v135 + 7);
        if (v138 < 2)
          break;
        v135 = *v137;
        v136 = v137;
        if (!*v137)
          goto LABEL_246;
      }
      if (v138 == 1)
        break;
      v135 = v137[1];
      if (!v135)
      {
        v136 = v137 + 1;
        goto LABEL_246;
      }
    }
    v139 = v137;
  }
  else
  {
LABEL_246:
    v139 = operator new(0x28uLL);
    *((_DWORD *)v139 + 7) = 1;
    *((_BYTE *)v139 + 32) = 0;
    *(_QWORD *)v139 = 0;
    *((_QWORD *)v139 + 1) = 0;
    *((_QWORD *)v139 + 2) = v137;
    *v136 = (uint64_t *)v139;
    v140 = (uint64_t *)*this[35];
    v141 = (uint64_t *)v139;
    if (v140)
    {
      this[35] = v140;
      v141 = *v136;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v141);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  v142 = xpc_BOOL_create(*((_BYTE *)v139 + 32));
  if (!v142)
    v142 = xpc_null_create();
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E0CFB528], v142);
  v143 = xpc_null_create();
  xpc_release(v142);
  xpc_release(v143);
  v144 = *v125;
  v145 = this + 36;
  if (*v125)
  {
    while (1)
    {
      while (1)
      {
        v145 = (uint64_t **)v144;
        v146 = *((_DWORD *)v144 + 7);
        if (v146 < 4)
          break;
        v144 = *v145;
        v125 = v145;
        if (!*v145)
          goto LABEL_259;
      }
      if (v146 == 3)
        break;
      v144 = v145[1];
      if (!v144)
      {
        v125 = v145 + 1;
        goto LABEL_259;
      }
    }
    v147 = v145;
  }
  else
  {
LABEL_259:
    v147 = operator new(0x28uLL);
    *((_DWORD *)v147 + 7) = 3;
    *((_BYTE *)v147 + 32) = 0;
    *(_QWORD *)v147 = 0;
    *((_QWORD *)v147 + 1) = 0;
    *((_QWORD *)v147 + 2) = v145;
    *v125 = (uint64_t *)v147;
    v148 = (uint64_t *)*this[35];
    v149 = (uint64_t *)v147;
    if (v148)
    {
      this[35] = v148;
      v149 = *v125;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v149);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  v150 = xpc_BOOL_create(*((_BYTE *)v147 + 32));
  if (!v150)
    v150 = xpc_null_create();
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E0CFB768], v150);
  v151 = xpc_null_create();
  xpc_release(v150);
  xpc_release(v151);
  if (v124)
  {
    xpc_retain(v124);
    v152 = v124;
  }
  else
  {
    v152 = xpc_null_create();
  }
  xpc_dictionary_set_value(v122, (const char *)*MEMORY[0x1E0CFB140], v152);
  v153 = xpc_null_create();
  xpc_release(v152);
  xpc_release(v153);
  v188 = v122;
  if (v122)
  {
    xpc_retain(v122);
    v154 = v188;
  }
  else
  {
    v154 = xpc_null_create();
    v188 = v154;
  }
  antenna::Service::Internal::setAudioState(this, &v188);
  xpc_release(v154);
  v188 = 0;
  *((_BYTE *)this + 333) = 0;
  if (!*((_BYTE *)this + 332))
    goto LABEL_279;
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    v155 = *((_DWORD *)this + 52);
    if (v155 != 4)
    {
LABEL_277:
      if (v155 == v7)
        goto LABEL_279;
      goto LABEL_278;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)this)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this) && !*((_DWORD *)this + 63)
    || *((_BYTE *)this + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
    && !*((_DWORD *)this + 63))
  {
    v155 = 2;
    goto LABEL_277;
  }
  if (v7 != 3)
LABEL_278:
    *((_BYTE *)this + 333) = 1;
LABEL_279:
  xpc_release(v124);
  xpc_release(v122);
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
}

void sub_1BF4B6470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t object)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::getTxPowerAudioModeString(antenna::Service::Internal *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  std::string *v6;
  int v7;
  std::string *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = *((int *)this + 82);
  if (v4 < 4)
    std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E7909CD0 + v4));
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = a2;
    else
      v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v7 = 136315138;
    v8 = v6;
    _os_log_debug_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEBUG, "#D Audio Selected Mode: %s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1BF4B66B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::copyTxPowerAudioMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  std::string *p_p;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  std::string __p;

  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  v8 = *a2;
  if (MEMORY[0x1C3B8A86C](*a2) == v6)
  {
    antenna::Service::Internal::getTxPowerAudioModeString(this, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = xpc_string_create((const char *)p_p);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFBF30], v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((_BYTE *)this + 152))
    {
      v12 = xpc_dictionary_create(0, 0, 0);
      if (v12 || (v12 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v12) == v6)
        {
          xpc_retain(v12);
          v13 = v12;
        }
        else
        {
          v13 = xpc_null_create();
        }
      }
      else
      {
        v13 = xpc_null_create();
        v12 = 0;
      }
      xpc_release(v12);
      if (MEMORY[0x1C3B8A86C](v13) == v6)
      {
        v14 = xpc_string_create((const char *)*MEMORY[0x1E0CFC120]);
        if (!v14)
          v14 = xpc_null_create();
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB710], v14);
        v15 = xpc_null_create();
        xpc_release(v14);
        xpc_release(v15);
        v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFB958]);
        if (!v16)
          v16 = xpc_null_create();
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFBA88], v16);
        v17 = xpc_null_create();
        xpc_release(v16);
        xpc_release(v17);
        v18 = xpc_string_create((const char *)*MEMORY[0x1E0CFB6D0]);
        if (!v18)
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB850], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4A8]);
        if (!v20)
          v20 = xpc_null_create();
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFBA90], v20);
        v21 = xpc_null_create();
        xpc_release(v20);
        xpc_release(v21);
        if (v13)
        {
          xpc_retain(v13);
          v22 = v13;
        }
        else
        {
          v22 = xpc_null_create();
        }
        xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFBF38], v22);
        v23 = xpc_null_create();
        xpc_release(v22);
        xpc_release(v23);
      }
      xpc_release(v13);
    }
  }
}

void sub_1BF4B6AAC(_Unwind_Exception *a1)
{
  xpc_object_t *v1;
  void *v2;

  xpc_release(v2);
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerAudioAlert_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  uint64_t IsInternalBuild;
  xpc_object_t value;
  const char *v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  size_t v10;
  void *v11;
  size_t v12;
  void **v13;
  size_t v14;
  BOOL v15;
  xpc_object_t object;
  void *__p[3];

  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
    {
      memset(__p, 170, sizeof(__p));
      value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBFA8]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v6);
      xpc_release(object);
      v7 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0)
        v8 = (void **)((char *)__p + HIBYTE(__p[2]));
      else
        v8 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
      if (SHIBYTE(__p[2]) >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if (v9 != v8)
      {
        do
        {
          *(_BYTE *)v9 = __toupper(*(char *)v9);
          v9 = (void **)((char *)v9 + 1);
        }
        while (v9 != v8);
        v7 = HIBYTE(__p[2]);
      }
      v10 = strlen((const char *)*MEMORY[0x1E0CFB4A0]);
      v11 = (void *)v10;
      if ((v7 & 0x80) != 0)
      {
        if (v10 != -1)
        {
          v13 = (void **)__p[0];
          v12 = (size_t)__p[1];
          goto LABEL_21;
        }
      }
      else if (v10 != -1)
      {
        v12 = v7;
        v13 = __p;
LABEL_21:
        if (v12 >= (unint64_t)v11)
          v14 = (size_t)v11;
        else
          v14 = v12;
        v15 = memcmp(v13, (const void *)*MEMORY[0x1E0CFB4A0], v14) == 0;
        if ((void *)v12 != v11)
          v15 = 0;
        *((_BYTE *)this + 332) = v15;
        *((_BYTE *)this + 333) = v15;
        if ((v7 & 0x80) != 0)
          operator delete(__p[0]);
        return;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
}

void sub_1BF4B6C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::copyTxPowerAudioAlert_sync(antenna::Service::Internal *this@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  v8 = (void *)*a2;
  if (MEMORY[0x1C3B8A86C](*a2) == v6)
  {
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((_BYTE *)this + 152))
    {
      if (*((_BYTE *)this + 332))
      {
        v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4A0]);
        if (!v9)
          v9 = xpc_null_create();
      }
      else
      {
        v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFB578]);
        if (!v9)
          v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFB578]);
      if (!v9)
        v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFBFA8], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
}

void sub_1BF4B6EDC(_Unwind_Exception *a1)
{
  xpc_object_t *v1;

  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerMotionMode_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  uint64_t IsInternalBuild;
  xpc_object_t value;
  const char *v6;
  unsigned __int8 v7;
  const void **v8;
  const void **v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  const void **v13;
  size_t v14;
  size_t v16;
  unint64_t v17;
  size_t v18;
  const void **v19;
  int v20;
  size_t v21;
  const void *v23;
  const void *v24;
  const void *v25;
  unint64_t v26;
  size_t v27;
  const void *v28;
  xpc_object_t object;
  const void *__s1[3];

  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
    {
      memset(__s1, 170, sizeof(__s1));
      value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0C8]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v6);
      xpc_release(object);
      v7 = HIBYTE(__s1[2]);
      if (SHIBYTE(__s1[2]) >= 0)
        v8 = (const void **)((char *)__s1 + HIBYTE(__s1[2]));
      else
        v8 = (const void **)((char *)__s1[0] + (unint64_t)__s1[1]);
      if (SHIBYTE(__s1[2]) >= 0)
        v9 = __s1;
      else
        v9 = (const void **)__s1[0];
      if (v9 != v8)
      {
        do
        {
          *(_BYTE *)v9 = __toupper(*(char *)v9);
          v9 = (const void **)((char *)v9 + 1);
        }
        while (v9 != v8);
        v7 = HIBYTE(__s1[2]);
      }
      v10 = strlen((const char *)*MEMORY[0x1E0CFC120]);
      v11 = v10;
      if ((v7 & 0x80) != 0)
      {
        if (v10 != -1)
        {
          v13 = (const void **)__s1[0];
          v12 = (size_t)__s1[1];
LABEL_21:
          if (v12 >= v11)
            v14 = v11;
          else
            v14 = v12;
          if (!memcmp(v13, (const void *)*MEMORY[0x1E0CFC120], v14) && v12 == v11)
          {
            v20 = 0;
            goto LABEL_56;
          }
          v16 = strlen((const char *)*MEMORY[0x1E0CFB970]);
          v17 = v16;
          if ((v7 & 0x80) != 0)
          {
            if (v16 != -1)
            {
              v19 = (const void **)__s1[0];
              v18 = (size_t)__s1[1];
LABEL_34:
              if (v18 >= v17)
                v21 = v17;
              else
                v21 = v18;
              if (!memcmp(v19, (const void *)*MEMORY[0x1E0CFB970], v21) && v18 == v17)
              {
                v20 = 1;
                goto LABEL_56;
              }
              v23 = (const void *)*MEMORY[0x1E0CFB968];
              v24 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB968]);
              v25 = v24;
              if ((v7 & 0x80) != 0)
              {
                if (v24 != (const void *)-1)
                {
                  v26 = (unint64_t)__s1[1];
                  if (__s1[1] >= v24)
                    v28 = v24;
                  else
                    v28 = __s1[1];
                  if (memcmp(__s1[0], v23, (size_t)v28))
                    goto LABEL_57;
LABEL_54:
                  if ((const void *)v26 != v25)
                    goto LABEL_57;
                  v20 = 2;
LABEL_56:
                  *((_DWORD *)this + 68) = v20;
LABEL_57:
                  if ((v7 & 0x80) != 0)
                    operator delete((void *)__s1[0]);
                  return;
                }
              }
              else if (v24 != (const void *)-1)
              {
                v26 = v7;
                if (v7 >= (unint64_t)v24)
                  v27 = (size_t)v24;
                else
                  v27 = v7;
                if (memcmp(__s1, v23, v27))
                  goto LABEL_57;
                goto LABEL_54;
              }
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          else if (v16 != -1)
          {
            v18 = v7;
            v19 = __s1;
            goto LABEL_34;
          }
          std::string::__throw_out_of_range[abi:ne180100]();
        }
      }
      else if (v10 != -1)
      {
        v12 = v7;
        v13 = __s1;
        goto LABEL_21;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
}

void sub_1BF4B7160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

std::string *antenna::Service::Internal::getTxPowerMotionModeString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = SLODWORD(this[11].__r_.__value_.__r.__words[1]);
  if (v3 < 3)
    return std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E7909D10 + v3));
  return this;
}

void sub_1BF4B71DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::copyTxPowerMotionMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t v9;
  std::string *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t IsInternalBuild;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  std::string v24;

  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  v8 = *a2;
  if (MEMORY[0x1C3B8A86C](*a2) == v6)
  {
    memset(&v24, 0, sizeof(v24));
    v9 = *((int *)this + 68);
    if (v9 < 3)
      std::string::__assign_external(&v24, **((const std::string::value_type ***)&unk_1E7909D10 + v9));
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v24;
    else
      v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
    v11 = xpc_string_create((const char *)v10);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFC0C8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    {
      if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
      {
        v14 = xpc_dictionary_create(0, 0, 0);
        if (v14 || (v14 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v14) == v6)
          {
            xpc_retain(v14);
            v15 = v14;
          }
          else
          {
            v15 = xpc_null_create();
          }
        }
        else
        {
          v15 = xpc_null_create();
          v14 = 0;
        }
        xpc_release(v14);
        if (MEMORY[0x1C3B8A86C](v15) == v6)
        {
          v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFC120]);
          if (!v16)
            v16 = xpc_null_create();
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E0CFBFB0], v16);
          v17 = xpc_null_create();
          xpc_release(v16);
          xpc_release(v17);
          v18 = xpc_string_create((const char *)*MEMORY[0x1E0CFB970]);
          if (!v18)
            v18 = xpc_null_create();
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E0CFC038], v18);
          v19 = xpc_null_create();
          xpc_release(v18);
          xpc_release(v19);
          v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFB968]);
          if (!v20)
            v20 = xpc_null_create();
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E0CFC030], v20);
          v21 = xpc_null_create();
          xpc_release(v20);
          xpc_release(v21);
          if (v15)
          {
            xpc_retain(v15);
            v22 = v15;
          }
          else
          {
            v22 = xpc_null_create();
          }
          xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC0A8], v22);
          v23 = xpc_null_create();
          xpc_release(v22);
          xpc_release(v23);
        }
        xpc_release(v15);
      }
    }
  }
}

void sub_1BF4B7580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_object_t *v15;
  void *v16;

  xpc_release(v16);
  xpc::dict::~dict(v15);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerMotionHandDetection_sync(uint64_t a1, uint64_t a2)
{
  const char *v2;
  int v4;
  const char *v5;
  const std::string::value_type *v6;
  size_t v7;
  const char *v8;
  const std::string::value_type *v9;
  size_t v10;
  const std::string::value_type *v11;
  size_t v12;
  int v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = (const char *)a2;
  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(char *)(a2 + 23);
  v5 = (const char *)a2;
  if (v4 < 0)
    v5 = *(const char **)a2;
  v6 = (const std::string::value_type *)*MEMORY[0x1E0CFC120];
  v7 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v5, (const char *)*MEMORY[0x1E0CFC120], v7))
  {
    std::string::__assign_external((std::string *)(a1 + 536), v6);
    v13 = *(_DWORD *)(a1 + 528);
    v14 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
  }
  else
  {
    v8 = v2;
    if (v4 < 0)
      v8 = *(const char **)v2;
    v9 = (const std::string::value_type *)*MEMORY[0x1E0CFBE98];
    v10 = strlen((const char *)*MEMORY[0x1E0CFBE98]);
    if (!strncasecmp(v8, (const char *)*MEMORY[0x1E0CFBE98], v10))
    {
      std::string::__assign_external((std::string *)(a1 + 536), v9);
      v13 = 1;
      v14 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        goto LABEL_20;
    }
    else
    {
      if (v4 < 0)
        v2 = *(const char **)v2;
      v11 = (const std::string::value_type *)*MEMORY[0x1E0CFBF18];
      v12 = strlen((const char *)*MEMORY[0x1E0CFBF18]);
      if (!strncasecmp(v2, (const char *)*MEMORY[0x1E0CFBF18], v12))
      {
        std::string::__assign_external((std::string *)(a1 + 536), v11);
        v13 = 2;
        v14 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          goto LABEL_20;
      }
      else
      {
        v13 = 0;
        v14 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          goto LABEL_20;
      }
    }
  }
  v15 = (_QWORD *)(a1 + 536);
  if (*(char *)(a1 + 559) < 0)
    v15 = (_QWORD *)*v15;
  v16 = 136315138;
  v17 = v15;
  _os_log_debug_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEBUG, "#D Hand Detection Overriding: %s", (uint8_t *)&v16, 0xCu);
LABEL_20:
  antenna::Service::Internal::sendMotionHandDetectionState_sync((_QWORD *)a1, v13);
}

void antenna::Service::Internal::antennaSetProperty(antenna::Service::Internal *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v4)
LABEL_16:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v3 = xpc_null_create();
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v4)
      goto LABEL_16;
  }
  v5 = *((_QWORD *)this + 9);
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    goto LABEL_16;
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = this;
  v8[1] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v8[1] = xpc_null_create();
  v9 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>(antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v3);
}

void antenna::Service::Internal::antennaGetProperty(NSObject **this@<X0>, void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  NSObject *v11;
  void *v12;
  _BOOL4 v13;
  NSObject *v14;
  xpc_object_t *v15;
  xpc_object_t object;
  antenna::Service::Internal *v17;
  xpc_object_t v18;
  _QWORD block[6];

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  v8 = MEMORY[0x1E0C812F8];
  if (v6)
  {
    v18 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v18 = v7;
    if (!v7)
    {
      v9 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v7) == v8)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v9 = xpc_null_create();
LABEL_8:
  v18 = v9;
LABEL_9:
  xpc_release(v7);
  v10 = v18;
  if (MEMORY[0x1C3B8A86C](v18) == v8)
  {
    v12 = *a2;
    v15 = &v18;
    object = v12;
    if (v12)
    {
      xpc_retain(v12);
      v17 = (antenna::Service::Internal *)this;
      if (this[12])
      {
LABEL_15:
        if ((dispatch_workloop_is_current() & 1) != 0)
        {
          antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()((uint64_t)&v15);
LABEL_23:
          xpc_release(object);
          *a3 = v18;
          v10 = xpc_null_create();
          v18 = v10;
          goto LABEL_24;
        }
        v13 = this[12] == 0;
LABEL_20:
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE20execute_wrapped_syncIZNS3_18antennaGetPropertyERKN3xpc4dictEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSB__block_invoke;
        block[3] = &__block_descriptor_tmp_72_0;
        block[4] = this + 9;
        block[5] = &v15;
        v14 = this[11];
        if (v13)
          dispatch_sync(v14, block);
        else
          dispatch_async_and_wait(v14, block);
        goto LABEL_23;
      }
    }
    else
    {
      object = xpc_null_create();
      v17 = (antenna::Service::Internal *)this;
      if (this[12])
        goto LABEL_15;
    }
    v13 = 1;
    goto LABEL_20;
  }
  v11 = this[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block[0]) = 0;
    _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Failed to create a xpc dictionary!", (uint8_t *)block, 2u);
  }
  *a3 = xpc_null_create();
LABEL_24:
  xpc_release(v10);
}

void sub_1BF4B7AF4(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(antenna::Service::Internal *this)
{
  int v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  NSObject *v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  _QWORD aBlock[6];
  std::__shared_weak_count *v28;
  uint8_t buf[8];
  dispatch_object_t object;
  xpc_object_t v31;

  v2 = *((_DWORD *)this + 68);
  if (v2 != 2)
  {
    if (v2)
    {
      v2 = 0;
    }
    else if (*((_DWORD *)this + 63))
    {
      v2 = 2;
    }
    else
    {
      v2 = 2 * (*((_BYTE *)this + 736) == 1);
    }
  }
  *((_DWORD *)this + 88) = v2;
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB20]);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFA68], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  if (*((_DWORD *)this + 88))
  {
    v7 = xpc_BOOL_create(1);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFB48], v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v10 = "#D iPad Tx Power Capping Start";
LABEL_48:
      _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, v10, buf, 2u);
    }
  }
  else
  {
    v11 = xpc_BOOL_create(1);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFB38], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v10 = "#D iPad Tx Power Capping Stop";
      goto LABEL_48;
    }
  }
  v13 = xpc_int64_create(*((unsigned int *)this + 85));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFA70], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15 || (v16 = *((_QWORD *)this + 9), (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
    v23 = *((_QWORD *)this + 15);
    v31 = v4;
    if (v4)
      goto LABEL_33;
LABEL_35:
    v31 = xpc_null_create();
    goto LABEL_36;
  }
  v23 = *((_QWORD *)this + 15);
  v31 = v4;
  if (!v4)
    goto LABEL_35;
LABEL_33:
  xpc_retain(v4);
LABEL_36:
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN7antenna7Service8Internal31sendTxPowerCappingIPadMode_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_7_8;
  aBlock[4] = this;
  aBlock[5] = v16;
  v28 = v18;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v25 = _Block_copy(aBlock);
  v26 = *((_QWORD *)this + 11);
  if (v26)
    dispatch_retain(v26);
  *(_QWORD *)buf = v25;
  object = v26;
  (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(_QWORD *)v23 + 48))(v23, &v31, buf);
  if (object)
    dispatch_release(object);
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  xpc_release(v31);
  v31 = 0;
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  std::__shared_weak_count::__release_weak(v18);
  xpc_release(v4);
}

void sub_1BF4B7F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  void *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(_QWORD *)(v19 - 56) = 0;
  std::__shared_weak_count::__release_weak(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

uint64_t antenna::Service::Internal::getTxPowerIPadWithMotionCappingMode_sync(antenna::Service::Internal *this)
{
  int v1;

  v1 = *((_DWORD *)this + 68);
  if (v1 == 2)
    return 2;
  if (v1)
    return 0;
  if (*((_DWORD *)this + 63))
    return 2;
  return 2 * (*((_BYTE *)this + 736) == 1);
}

void ___ZN7antenna7Service8Internal31sendTxPowerCappingIPadMode_syncEv_block_invoke(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && (a2 & 1) == 0)
      {
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v14 = *MEMORY[0x1E0DDFB20];
          v15 = 136315138;
          v16 = v14;
          _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", (uint8_t *)&v15, 0xCu);
          if (!*(_BYTE *)(v5 + 153))
            return;
        }
        else if (!*(_BYTE *)(v5 + 153))
        {
          return;
        }
        antenna::Service::Internal::stopMotionDetection_sync((antenna::Service::Internal *)v5);
        v12 = *(NSObject **)(v5 + 360);
        if (v12)
        {
          dispatch_source_cancel(v12);
          v13 = *(NSObject **)(v5 + 360);
          *(_QWORD *)(v5 + 360) = 0;
          if (v13)
            dispatch_release(v13);
        }
        *(_DWORD *)(v5 + 352) = 255;
      }
    }
  }
}

void antenna::Service::Internal::stopTxPowerCappingIPadWithMotionTimer_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v3)
      dispatch_release(v3);
  }
}

void antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync(dispatch_queue_t *this)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  std::__shared_weak_count *v5;
  dispatch_queue_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  unint64_t v14;
  _QWORD handler[6];
  std::__shared_weak_count *v16;

  v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, this[11]);
  v3 = this[45];
  this[45] = v2;
  if (v3)
  {
    dispatch_release(v3);
    v2 = this[45];
  }
  v4 = dispatch_time(0, 2000000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v5 = (std::__shared_weak_count *)this[10];
  if (!v5 || (v6 = this[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v13 = this[45];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal43startTxPowerCappingIPadWithMotionTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_8_11;
  handler[4] = this;
  handler[5] = v6;
  v16 = v8;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v13, handler);
  dispatch_activate(this[45]);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN7antenna7Service8Internal43startTxPowerCappingIPadWithMotionTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5] && *(_BYTE *)(v3 + 216))
      {
        if (!*(_BYTE *)(v3 + 248))
          antenna::Service::Internal::startMotionDetection_sync((antenna::Service::Internal *)v3);
        v6 = *(NSObject **)(v3 + 360);
        if (v6)
        {
          dispatch_source_cancel(v6);
          v7 = *(NSObject **)(v3 + 360);
          *(_QWORD *)(v3 + 360) = 0;
          if (v7)
            dispatch_release(v7);
        }
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync((antenna::Service::Internal *)v3);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((antenna::Service::Internal *)v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF4B8394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::handleTxPowerCappingIPadWithMotionTimerExpiry_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  if (*((_BYTE *)this + 216))
  {
    if (*((_BYTE *)this + 248))
    {
      v2 = *((_QWORD *)this + 45);
      if (!v2)
      {
LABEL_4:
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
        return;
      }
    }
    else
    {
      antenna::Service::Internal::startMotionDetection_sync(this);
      v2 = *((_QWORD *)this + 45);
      if (!v2)
        goto LABEL_4;
    }
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (!v3)
      goto LABEL_4;
    dispatch_release(v3);
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
    antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
  }
}

uint64_t antenna::Service::Internal::getAccessoryState_sync(antenna::Service::Internal *this)
{
  const char *v2;
  const char *v3;
  size_t v4;
  int v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int v20;
  int v21;
  std::string::size_type v22;
  std::string *v23;
  char *v24;
  std::string *v25;
  std::string::size_type v26;
  int v27;
  void *v28;
  std::string *v29;
  size_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t **v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t **v44;
  unsigned int AccessoryPrimaryPortNumber;
  unsigned int v46;
  char *v47;
  uint64_t **v48;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  __int128 *v54;
  __int128 *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 *v67;
  std::string v68;
  _QWORD v69[3];

  v2 = (char *)this + 392;
  v3 = (char *)this + 392;
  if (*((char *)this + 415) < 0)
    v3 = *(const char **)v2;
  v4 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v3, (const char *)*MEMORY[0x1E0CFC120], v4)
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild())
  {
    v31 = (uint64_t *)*((_QWORD *)this + 55);
    v32 = (uint64_t **)((char *)this + 448);
    if (v31 == (uint64_t *)((char *)this + 448))
    {
LABEL_97:
      v10 = 0;
      goto LABEL_98;
    }
    v33 = (uint64_t *)*((_QWORD *)this + 55);
    while (1)
    {
      if ((v33[4] & 1) != 0)
      {
        v34 = *((_DWORD *)v33 + 9);
        if ((v34 & 0x1000) != 0)
          break;
      }
      v35 = (uint64_t *)v33[1];
      if (v35)
      {
        do
        {
          v36 = (uint64_t **)v35;
          v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (uint64_t **)v33[2];
          v37 = *v36 == v33;
          v33 = (uint64_t *)v36;
        }
        while (!v37);
      }
      v33 = (uint64_t *)v36;
      if (v36 == v32)
      {
        v10 = 0;
        v39 = 1;
        goto LABEL_103;
      }
    }
    v39 = 0;
    v40 = v34 & 0xFFFFEFFF;
    if (*((_BYTE *)this + 561))
      v10 = 4096;
    else
      v10 = v40;
LABEL_103:
    v38 = 1;
    while (1)
    {
      if (v39)
      {
        if ((v31[4] & 2) != 0)
        {
          v41 = *((_DWORD *)v31 + 7);
          if (v41 == ctu::iokit::Controller::getAccessoryPrimaryPortNumber(*(ctu::iokit::Controller **)(*((_QWORD *)this + 47) + 72)))
            break;
        }
      }
      if ((v31[4] & 1) != 0)
      {
        v42 = *((_DWORD *)v31 + 9);
        if ((v42 & 0x1000) != 0)
          v42 = 0;
        v10 = v42 | v10;
      }
      v43 = (uint64_t *)v31[1];
      if (v43)
      {
        do
        {
          v44 = (uint64_t **)v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t **)v31[2];
          v37 = *v44 == v31;
          v31 = (uint64_t *)v44;
        }
        while (!v37);
      }
      v31 = (uint64_t *)v44;
      if (v44 == v32)
        return v38 | (v10 << 32);
    }
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((_QWORD **)this + 56));
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 57) = 0;
    *((_QWORD *)this + 55) = v32;
    AccessoryPrimaryPortNumber = ctu::iokit::Controller::getAccessoryPrimaryPortNumber(*(ctu::iokit::Controller **)(*((_QWORD *)this + 47) + 72));
    v46 = AccessoryPrimaryPortNumber;
    v47 = (char *)*((_QWORD *)this + 56);
    v48 = (uint64_t **)((char *)this + 448);
    if (v47)
    {
      while (1)
      {
        while (1)
        {
          v48 = (uint64_t **)v47;
          v49 = *((_DWORD *)v47 + 7);
          if (AccessoryPrimaryPortNumber >= v49)
            break;
          v47 = (char *)*v48;
          v32 = v48;
          if (!*v48)
            goto LABEL_127;
        }
        if (v49 >= AccessoryPrimaryPortNumber)
          break;
        v47 = (char *)v48[1];
        if (!v47)
        {
          v32 = v48 + 1;
          goto LABEL_127;
        }
      }
    }
    else
    {
LABEL_127:
      v50 = (char *)v48;
      v48 = (uint64_t **)operator new(0x28uLL);
      v48[4] = 0;
      *((_DWORD *)v48 + 7) = v46;
      *v48 = 0;
      v48[1] = 0;
      v48[2] = (uint64_t *)v50;
      *v32 = (uint64_t *)v48;
      v51 = **((_QWORD **)this + 55);
      v52 = (uint64_t *)v48;
      if (v51)
      {
        *((_QWORD *)this + 55) = v51;
        v52 = *v32;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 56), v52);
      ++*((_QWORD *)this + 57);
    }
    v48[4] = (uint64_t *)0x100000002;
LABEL_131:
    v10 = 1;
    v38 = 2;
    return v38 | (v10 << 32);
  }
  v5 = *((char *)this + 415);
  v6 = v2;
  if (v5 < 0)
    v6 = *(const char **)v2;
  v7 = strlen((const char *)*MEMORY[0x1E0CFB1D8]);
  if (!strncasecmp(v6, (const char *)*MEMORY[0x1E0CFB1D8], v7))
    goto LABEL_131;
  if (v5 < 0)
    v2 = *(const char **)v2;
  v8 = strlen((const char *)*MEMORY[0x1E0CFB1D0]);
  if (strncasecmp(v2, (const char *)*MEMORY[0x1E0CFB1D0], v8))
    goto LABEL_97;
  memset(v69, 170, sizeof(v69));
  ctu::split_any_copy();
  v9 = (__int128 *)v69[0];
  v67 = (__int128 *)v69[1];
  if (v69[0] != v69[1])
  {
    LODWORD(v10) = 0;
    v66 = (char *)*MEMORY[0x1E0CFAF98];
    v65 = (char *)*MEMORY[0x1E0CFAFA8];
    v64 = (char *)*MEMORY[0x1E0CFAF08];
    v63 = (char *)*MEMORY[0x1E0CFAF18];
    v62 = (char *)*MEMORY[0x1E0CFAFA0];
    v61 = (char *)*MEMORY[0x1E0CFAF20];
    v60 = (char *)*MEMORY[0x1E0CFAF28];
    v59 = (char *)*MEMORY[0x1E0CFAF30];
    v58 = (char *)*MEMORY[0x1E0CFAF38];
    v57 = (char *)*MEMORY[0x1E0CFAF40];
    v56 = (char *)*MEMORY[0x1E0CFAF48];
    v11 = (const char *)*MEMORY[0x1E0CFB130];
    v12 = MEMORY[0x1E0C80978];
    do
    {
      memset(&v68, 170, sizeof(v68));
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v13 = *v9;
        v68.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v13;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v68;
      else
        v14 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        size = v68.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_40;
      v16 = (std::string *)((char *)v14 + size);
      do
      {
        v17 = v14->__r_.__value_.__s.__data_[0];
        if ((v17 & 0x80000000) != 0 ? __maskrune(v17, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v17 + 60) & 0x4000)
          break;
        v14 = (std::string *)((char *)v14 + 1);
        --size;
      }
      while (size);
      if (size == 1)
      {
LABEL_40:
        v16 = v14;
      }
      else
      {
        v19 = 1;
        v16 = v14;
        do
        {
          v20 = v14->__r_.__value_.__s.__data_[v19];
          if ((v20 & 0x80000000) != 0)
            v21 = __maskrune(v20, 0x4000uLL);
          else
            v21 = *(_DWORD *)(v12 + 4 * v20 + 60) & 0x4000;
          if (!v21)
          {
            v16->__r_.__value_.__s.__data_[0] = v14->__r_.__value_.__s.__data_[v19];
            v16 = (std::string *)((char *)v16 + 1);
          }
          ++v19;
        }
        while (size != v19);
      }
      v22 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      v23 = (std::string *)v68.__r_.__value_.__r.__words[0];
      v24 = (char *)(v68.__r_.__value_.__r.__words[0] + v68.__r_.__value_.__l.__size_);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v25 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      else
      {
        v24 = (char *)&v68 + HIBYTE(v68.__r_.__value_.__r.__words[2]);
        v25 = &v68;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = v68.__r_.__value_.__l.__size_;
      v26 = (char *)v16 - (char *)v25;
      if (v22 < (char *)v16 - (char *)v25)
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v24 - (char *)v16 == -1)
      {
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          v68.__r_.__value_.__l.__size_ = (char *)v16 - (char *)v25;
        }
        else
        {
          *((_BYTE *)&v68.__r_.__value_.__s + 23) = v26 & 0x7F;
          v23 = &v68;
        }
        v23->__r_.__value_.__s.__data_[v26] = 0;
      }
      else
      {
        std::string::__erase_external_with_move(&v68, v26, v24 - (char *)v16);
      }
      v27 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
      v28 = (void *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v68;
      else
        v29 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v30 = v68.__r_.__value_.__l.__size_;
      if (!strncasecmp((const char *)v29, v66, v30))
        LODWORD(v10) = v10 | 2;
      if (!strncasecmp((const char *)v29, v65, v30))
        LODWORD(v10) = v10 | 4;
      if (!strncasecmp((const char *)v29, v64, v30))
        LODWORD(v10) = v10 | 8;
      if (!strncasecmp((const char *)v29, v63, v30))
        LODWORD(v10) = v10 | 0x10;
      if (!strncasecmp((const char *)v29, v62, v30))
        LODWORD(v10) = v10 | 0x20;
      if (!strncasecmp((const char *)v29, v61, v30))
        LODWORD(v10) = v10 | 0x40;
      if (!strncasecmp((const char *)v29, v60, v30))
        LODWORD(v10) = v10 | 0x80;
      if (!strncasecmp((const char *)v29, v59, v30))
        LODWORD(v10) = v10 | 0x100;
      if (!strncasecmp((const char *)v29, v58, v30))
        LODWORD(v10) = v10 | 0x200;
      if (!strncasecmp((const char *)v29, v57, v30))
        LODWORD(v10) = v10 | 0x400;
      if (!strncasecmp((const char *)v29, v56, v30))
        LODWORD(v10) = v10 | 0x800;
      if (!strncasecmp((const char *)v29, v11, v30))
        v10 = v10 | 0x1000;
      else
        v10 = v10;
      if (v27 < 0)
        operator delete(v28);
      v9 = (__int128 *)((char *)v9 + 24);
    }
    while (v9 != v67);
    v9 = (__int128 *)v69[0];
    if (!v69[0])
      goto LABEL_98;
    goto LABEL_134;
  }
  v10 = 0;
  if (v69[0])
  {
LABEL_134:
    v54 = (__int128 *)v69[1];
    v55 = v9;
    if ((__int128 *)v69[1] != v9)
    {
      do
      {
        if (*((char *)v54 - 1) < 0)
          operator delete(*((void **)v54 - 3));
        v54 = (__int128 *)((char *)v54 - 24);
      }
      while (v54 != v9);
      v55 = (__int128 *)v69[0];
    }
    v69[1] = v9;
    operator delete(v55);
  }
LABEL_98:
  v38 = 1;
  return v38 | (v10 << 32);
}

void sub_1BF4B8B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::string>::~vector[abi:ne180100]((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1BF4B8B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v26 - 104));
  _Unwind_Resume(a1);
}

BOOL antenna::Service::Internal::isAccessoryOverridden(antenna::Service::Internal *this)
{
  const char *v1;
  size_t v2;

  v1 = (char *)this + 392;
  if (*((char *)this + 415) < 0)
    v1 = *(const char **)v1;
  v2 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v1, (const char *)*MEMORY[0x1E0CFC120], v2))
    return 0;
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  return (TelephonyUtilIsCarrierBuild() & 1) != 0;
}

void antenna::Service::Internal::accessoryNotification_sync(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  void **v7;
  void **v8;
  const char *v9;
  size_t v10;
  uint64_t AccessoryState_sync;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  NSObject *v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a3;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Port Number: %u", (uint8_t *)__p, 8u);
    v6 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v21 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v23 = v7;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Status: %s", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p[0]);
    v6 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    v8 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v23 = v8;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Type: %s", buf, 0xCu);
    if (v21 < 0)
    {
      operator delete(__p[0]);
      v9 = (const char *)(a1 + 392);
      if ((*(char *)(a1 + 415) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v9 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
LABEL_16:
    v9 = *(const char **)v9;
LABEL_17:
  v10 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v9, (const char *)*MEMORY[0x1E0CFC120], v10)
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    AccessoryState_sync = antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)a1);
    v12 = *(uint64_t **)(a1 + 448);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v12;
          v15 = *((_DWORD *)v12 + 7);
          if (v15 <= a3)
            break;
          v12 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_27;
        }
        if (v15 >= a3)
          break;
        v12 = v14[1];
        if (!v12)
        {
          v13 = v14 + 1;
          goto LABEL_27;
        }
      }
      v16 = v14;
    }
    else
    {
      v13 = (uint64_t **)(a1 + 448);
      v14 = (uint64_t **)(a1 + 448);
LABEL_27:
      v16 = operator new(0x28uLL);
      v16[4] = 0;
      *((_DWORD *)v16 + 7) = a3;
      *v16 = 0;
      v16[1] = 0;
      v16[2] = v14;
      *v13 = v16;
      v17 = **(_QWORD **)(a1 + 440);
      v18 = v16;
      if (v17)
      {
        *(_QWORD *)(a1 + 440) = v17;
        v18 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 448), v18);
      ++*(_QWORD *)(a1 + 456);
    }
    v16[4] = a2;
    if (AccessoryState_sync == antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)a1))
    {
      v19 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF335000, v19, OS_LOG_TYPE_DEBUG, "#D Skip sending accessory since previous and current states are same", (uint8_t *)__p, 2u);
      }
    }
    else
    {
      antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)a1);
    }
  }
}

void antenna::Service::Internal::mesaNotification_sync(uint64_t a1, char a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5;
  uint8_t buf[2];

  if ((a2 & 1) != 0)
  {
    v2 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v3 = "#I ctu::iokit::kTelephonyIOKitMesaStartShort";
    v4 = buf;
    goto LABEL_7;
  }
  if ((a2 & 2) != 0)
  {
    v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 0;
      v3 = "#I ctu::iokit::kTelephonyIOKitMesaStartLong";
      v4 = (uint8_t *)&v5;
LABEL_7:
      _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    }
  }
}

void antenna::Service::Internal::videoNotification_sync(antenna::Service::Internal *a1, unsigned int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Display evnet: 0x%x\n", (uint8_t *)v5, 8u);
  }
  antenna::Service::Internal::sendVideoAccessory_sync(a1, (a2 >> 2) & 1);
}

void antenna::Service::Internal::powerSourceNotification_sync(uint64_t a1, int a2)
{
  NSObject *v4;
  void *p_p;
  void *__p;
  char v7;
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 564) != a2)
  {
    v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      ctu::iokit::asString();
      if (v7 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315138;
      v9 = p_p;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Power Source: %s", buf, 0xCu);
      if (v7 < 0)
        operator delete(__p);
    }
    *(_DWORD *)(a1 + 564) = a2;
    antenna::Service::Internal::sendPowerSource_sync((antenna::Service::Internal *)a1);
  }
}

void antenna::Service::Internal::sendSensorID_sync(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD aBlock[6];
  std::__shared_weak_count *v17;
  void *v18;
  dispatch_object_t object;
  uint8_t buf[4];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 43) == 1)
  {
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
  }
  else
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    v10 = *((_BYTE *)this + 736) & 7 | (8 * (*((_BYTE *)this + 737) & 7u));
    v11 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v21 = v10;
      _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Sending sensor-state to BB: 0x%x", buf, 8u);
    }
    v12 = *((_QWORD *)this + 15);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN7antenna7Service8Internal17sendSensorID_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_10_5;
    aBlock[4] = this;
    aBlock[5] = v3;
    v17 = v5;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = _Block_copy(aBlock);
    v15 = *((_QWORD *)this + 11);
    if (v15)
      dispatch_retain(v15);
    v18 = v14;
    object = v15;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v12 + 56))(v12, v10, &v18);
    if (object)
      dispatch_release(object);
    if (v18)
      _Block_release(v18);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF4B9350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN7antenna7Service8Internal17sendSensorID_syncEv_block_invoke(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && (a2 & 1) == 0)
      {
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v12 = 0;
          _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Failed to send sensor ID to BB", v12, 2u);
        }
      }
    }
  }
}

void antenna::Service::Internal::reportAccessory_sync(uint64_t a1, unint64_t a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  const void *v26;
  void *v27;
  NSObject *v28;
  _QWORD v29[4];
  void *aBlock;
  xpc_object_t object;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == v5)
    {
      xpc_retain(v4);
      v6 = v4;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v7 = xpc_int64_create(HIDWORD(a2));
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB3D0], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a2);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB4F8], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v11) == v5)
    {
      xpc_retain(v11);
      v12 = v11;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB020], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(524584);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB0E8], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  if (v6)
  {
    xpc_retain(v6);
    v17 = v6;
  }
  else
  {
    v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB018], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_dictionary_create(0, 0, 0);
  if (v19 || (v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v19) == v5)
    {
      xpc_retain(v19);
      v20 = v19;
    }
    else
    {
      v20 = xpc_null_create();
    }
  }
  else
  {
    v20 = xpc_null_create();
    v19 = 0;
  }
  xpc_release(v19);
  v21 = xpc_string_create((const char *)*MEMORY[0x1E0CFB1C0]);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB680], v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  if (v12)
  {
    xpc_retain(v12);
    v23 = v12;
  }
  else
  {
    v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB1E8], v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  if (v20)
  {
    xpc_retain(v20);
    v25 = v20;
    v26 = *(const void **)(a1 + 104);
    if (v26)
    {
LABEL_37:
      v27 = _Block_copy(v26);
      goto LABEL_40;
    }
  }
  else
  {
    v25 = xpc_null_create();
    v26 = *(const void **)(a1 + 104);
    if (v26)
      goto LABEL_37;
  }
  v27 = 0;
LABEL_40:
  v28 = *(NSObject **)(a1 + 112);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v29[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
  v29[3] = &__block_descriptor_tmp_68_2;
  if (v27)
  {
    aBlock = _Block_copy(v27);
    object = v25;
    if (v25)
    {
LABEL_42:
      xpc_retain(v25);
      goto LABEL_45;
    }
  }
  else
  {
    aBlock = 0;
    object = v25;
    if (v25)
      goto LABEL_42;
  }
  object = xpc_null_create();
LABEL_45:
  dispatch_async(v28, v29);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v27)
    _Block_release(v27);
  xpc_release(v25);
  xpc_release(v20);
  xpc_release(v12);
  xpc_release(v6);
}

void antenna::Service::Internal::sendAudioSpeaker_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD v8[2];
  xpc_object_t object;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = xpc_string_create((const char *)*MEMORY[0x1E0DDFAF0]);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFA68], v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v6 = xpc_BOOL_create(*((_BYTE *)this + 335));
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFAD0], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v8[0] = 0;
  v8[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v8);
  xpc_release(object);
  object = 0;
  xpc_release(v3);
}

void sub_1BF4B9B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAudioSpeaker(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>(antenna::Service::Internal::sendAudioSpeaker(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::sendAudioSpeaker(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

BOOL antenna::Service::Internal::isPowerSourceOverridden_sync(antenna::Service::Internal *this)
{
  if (*((_DWORD *)this + 142) == -1)
    return 0;
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  return (TelephonyUtilIsCarrierBuild() & 1) != 0;
}

uint64_t antenna::Service::Internal::getPowerSourceState_sync(antenna::Service::Internal *this)
{
  char *v2;

  if (*((_DWORD *)this + 142) == -1
    || (v2 = (char *)this + 568, (TelephonyUtilIsInternalBuild() & 1) == 0) && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v2 = (char *)this + 564;
  }
  return *(unsigned int *)v2;
}

uint64_t **std::map<unsigned int,unsigned int>::operator[](uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((_DWORD *)v4 + 7);
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v6 + 7) = a2;
    *((_DWORD *)v6 + 8) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 4;
}

void antenna::Service::Internal::sendWorkoutInfo_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  NSObject *v16;
  void *p_p;
  _QWORD v18[2];
  xpc_object_t v19;
  void *__p;
  char v21;
  xpc_object_t xdict;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    xdict = v2;
  }
  else
  {
    v3 = xpc_null_create();
    xdict = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  xdict = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0DDFAE8]);
  if (!v5)
    v5 = xpc_null_create();
  v6 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFA68], v5);
  v7 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v7);
  v8 = xpc_int64_create(*((unsigned int *)this + 180));
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kKeyWorkoutType", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 181));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kKeyWorkoutState", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(*((unsigned int *)this + 182));
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kKeyWorkoutLocation", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(*((unsigned int *)this + 183));
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kKeySwimLocation", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)&xdict);
    if (v21 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v24 = p_p;
    _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Sending workout info: %s\n", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p);
    v6 = xdict;
  }
  v19 = v6;
  if (v6)
  {
    xpc_retain(v6);
  }
  else
  {
    v6 = xpc_null_create();
    v19 = v6;
  }
  v18[0] = 0;
  v18[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &v19, (uint64_t)v18);
  xpc_release(v6);
  v19 = 0;
  xpc_release(xdict);
}

void sub_1BF4BA0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::handleDumpState_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  int v3;
  const char *p_p;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  const char *v25;
  const char *v26;
  const char *v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  const char *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  const char *v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  const char *v58;
  NSObject *v59;
  const char *v60;
  NSObject *v61;
  int v62;
  const char *v63;
  const char *v64;
  const char *v65;
  Capabilities *v66;
  void *v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  int isCMHandDetectionSupported;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  NSObject *v79;
  _QWORD *v80;
  int v81;
  NSObject *v82;
  const char *v83;
  const char *v84;
  NSObject *v85;
  _QWORD *v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t **v89;
  uint64_t **v90;
  char *v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  unsigned int v96;
  uint64_t **v97;
  uint64_t **v98;
  char *v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  int v104;
  uint64_t **v105;
  uint64_t **v106;
  char *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  int v112;
  uint64_t **v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  NSObject *v119;
  _QWORD *v120;
  int v121;
  int v122;
  NSObject *v123;
  const char *v124;
  NSObject *v125;
  int v126;
  NSObject *v127;
  const char *v128;
  __int128 __p;
  _QWORD v130[2];
  uint8_t buf[4];
  const char *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Antenna state ---------------", (uint8_t *)&__p, 2u);
    v2 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
LABEL_19:
      xpc::object::to_string((antenna::Service::Internal *)((char *)this + 224));
      if (v130[0] >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      *(_DWORD *)buf = 136315138;
      v132 = p_p;
      _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Transmit state: %s", buf, 0xCu);
      if (SHIBYTE(v130[0]) < 0)
      {
        operator delete((void *)__p);
        v2 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          goto LABEL_26;
      }
      else
      {
        v2 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          goto LABEL_26;
      }
LABEL_5:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_6;
      goto LABEL_30;
    }
  }
  else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_3;
  }
  v3 = *((unsigned __int8 *)this + 216);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v3;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I fTransmitting=%u", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    goto LABEL_19;
LABEL_4:
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    goto LABEL_5;
LABEL_26:
  if (*((_BYTE *)this + 476))
    v5 = (uint64_t *)MEMORY[0x1E0CFAF88];
  else
    v5 = (uint64_t *)MEMORY[0x1E0CFC120];
  v6 = *v5;
  LODWORD(__p) = 136315138;
  *(_QWORD *)((char *)&__p + 4) = v6;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Overriding State: %s", (uint8_t *)&__p, 0xCu);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  LOWORD(__p) = 0;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM power/duty cycle (0.1%% units):", (uint8_t *)&__p, 2u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  v7 = *((_DWORD *)this + 116);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v7;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM power backoff : %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_8:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  v8 = *((_DWORD *)this + 117);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v8;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM duty cycle: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_9:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  LOWORD(__p) = 0;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Radio Max Power Unit: mW:", (uint8_t *)&__p, 2u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_10:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  v9 = *((_DWORD *)this + 118);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v9;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Radio Max Power: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_11:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  v10 = *((unsigned __int8 *)this + 156);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v10;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory support for RF: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  v11 = *((unsigned __int8 *)this + 158);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v11;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory support for ARTD: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_13:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  v12 = *((unsigned __int8 *)this + 157);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v12;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory type support for RF: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_14:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  v13 = *((unsigned __int8 *)this + 159);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v13;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory type support for ARTD: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_15:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_39:
  v14 = (_QWORD *)((char *)this + 392);
  if (*((char *)this + 415) < 0)
    v14 = (_QWORD *)*v14;
  LODWORD(__p) = 136315138;
  *(_QWORD *)((char *)&__p + 4) = v14;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory overridden state: %s", (uint8_t *)&__p, 0xCu);
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_42:
    v15 = (_QWORD *)((char *)this + 416);
    if (*((char *)this + 439) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v15;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory overridden type: %s", (uint8_t *)&__p, 0xCu);
  }
LABEL_45:
  antenna::Service::Internal::getAccessoryState_sync(this);
  v16 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v130[0] >= 0)
      v17 = (const char *)&__p;
    else
      v17 = (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v17;
    _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Accessory connected: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
    v16 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v130[0] >= 0)
      v18 = (const char *)&__p;
    else
      v18 = (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v18;
    _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Accessory type: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
    v16 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *((unsigned __int8 *)this + 163);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v19;
    _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Antenna Switching support: %d", (uint8_t *)&__p, 8u);
    v16 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
LABEL_61:
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_62;
      goto LABEL_67;
    }
  }
  else if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_61;
  }
  v20 = *((unsigned __int8 *)this + 164);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v20;
  _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Antenna switched: %d", (uint8_t *)&__p, 8u);
  v16 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
LABEL_62:
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_63;
    goto LABEL_68;
  }
LABEL_67:
  v21 = *((unsigned __int8 *)this + 162);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v21;
  _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I MESA supported: %d", (uint8_t *)&__p, 8u);
  v16 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
LABEL_63:
    if (!*((_BYTE *)this + 152))
      goto LABEL_143;
    goto LABEL_69;
  }
LABEL_68:
  v22 = *((_DWORD *)this + 121);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v22;
  _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I MESA level: %d", (uint8_t *)&__p, 8u);
  if (!*((_BYTE *)this + 152))
    goto LABEL_143;
LABEL_69:
  v23 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    __p = 0uLL;
    v130[0] = 0;
    v24 = *((_DWORD *)this + 52) - 1;
    if (v24 < 4)
      std::string::__assign_external((std::string *)&__p, **((const std::string::value_type ***)&unk_1E7909CF0 + v24));
    v25 = (const char *)&__p;
    if (v130[0] < 0)
      v25 = (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v25;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Enhanced Detection Mode: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    antenna::Service::Internal::getTxPowerAudioModeString(this, (std::string *)&__p);
    if (v130[0] >= 0)
      v26 = (const char *)&__p;
    else
      v26 = (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v26;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Audio Mode: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 333))
      v27 = "ON";
    else
      v27 = "OFF";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v27;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Audio Alert: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v28 = (uint64_t *)*((_QWORD *)this + 36);
    if (v28)
    {
      while (1)
      {
        while (1)
        {
          v30 = (uint64_t **)v28;
          v31 = *((_DWORD *)v28 + 7);
          if (v31 < 1)
            break;
          v28 = *v30;
          v29 = v30;
          if (!*v30)
            goto LABEL_97;
        }
        if ((v31 & 0x80000000) == 0)
          break;
        v28 = v30[1];
        if (!v28)
        {
          v29 = v30 + 1;
          goto LABEL_97;
        }
      }
      v32 = v30;
    }
    else
    {
      v29 = (uint64_t **)((char *)this + 288);
      v30 = (uint64_t **)((char *)this + 288);
LABEL_97:
      v32 = operator new(0x28uLL);
      v32[7] = 0;
      *((_BYTE *)v32 + 32) = 0;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = v30;
      *v29 = (uint64_t *)v32;
      v33 = **((_QWORD **)this + 35);
      v34 = (uint64_t *)v32;
      if (v33)
      {
        *((_QWORD *)this + 35) = v33;
        v34 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v34);
      ++*((_QWORD *)this + 37);
    }
    if (*((_BYTE *)v32 + 32))
      v35 = "ON";
    else
      v35 = "OFF";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v35;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Receiver Audio State: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v36 = (uint64_t *)*((_QWORD *)this + 36);
    if (v36)
    {
      while (1)
      {
        while (1)
        {
          v38 = (uint64_t **)v36;
          v39 = *((_DWORD *)v36 + 7);
          if (v39 < 2)
            break;
          v36 = *v38;
          v37 = v38;
          if (!*v38)
            goto LABEL_112;
        }
        if (v39 == 1)
          break;
        v36 = v38[1];
        if (!v36)
        {
          v37 = v38 + 1;
          goto LABEL_112;
        }
      }
      v40 = v38;
    }
    else
    {
      v37 = (uint64_t **)((char *)this + 288);
      v38 = (uint64_t **)((char *)this + 288);
LABEL_112:
      v40 = operator new(0x28uLL);
      v40[7] = 1;
      *((_BYTE *)v40 + 32) = 0;
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = v38;
      *v37 = (uint64_t *)v40;
      v41 = **((_QWORD **)this + 35);
      v42 = (uint64_t *)v40;
      if (v41)
      {
        *((_QWORD *)this + 35) = v41;
        v42 = *v37;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v42);
      ++*((_QWORD *)this + 37);
    }
    if (*((_BYTE *)v40 + 32))
      v43 = "ON";
    else
      v43 = "OFF";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v43;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Other Audio State: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v44 = (uint64_t *)*((_QWORD *)this + 36);
    if (v44)
    {
      while (1)
      {
        while (1)
        {
          v46 = (uint64_t **)v44;
          v47 = *((_DWORD *)v44 + 7);
          if (v47 < 4)
            break;
          v44 = *v46;
          v45 = v46;
          if (!*v46)
            goto LABEL_128;
        }
        if (v47 == 3)
          break;
        v44 = v46[1];
        if (!v44)
        {
          v45 = v46 + 1;
          goto LABEL_128;
        }
      }
      v48 = v46;
    }
    else
    {
      v45 = (uint64_t **)((char *)this + 288);
      v46 = (uint64_t **)((char *)this + 288);
LABEL_128:
      v48 = operator new(0x28uLL);
      v48[7] = 3;
      *((_BYTE *)v48 + 32) = 0;
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 1) = 0;
      *((_QWORD *)v48 + 2) = v46;
      *v45 = (uint64_t *)v48;
      v49 = **((_QWORD **)this + 35);
      v50 = (uint64_t *)v48;
      if (v49)
      {
        *((_QWORD *)this + 35) = v49;
        v50 = *v45;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v50);
      ++*((_QWORD *)this + 37);
    }
    if (*((_BYTE *)v48 + 32))
      v51 = "ON";
    else
      v51 = "OFF";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v51;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Speaker Audio State: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_DWORD *)this + 63))
      v52 = "On-Body";
    else
      v52 = "Off-Body";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v52;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Motion State: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v53 = *((_QWORD *)this + 33);
    LODWORD(__p) = 134217984;
    *(_QWORD *)((char *)&__p + 4) = v53;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Enhanced Motion fail counter: %lld", (uint8_t *)&__p, 0xCu);
  }
LABEL_143:
  if (*((_BYTE *)this + 153))
  {
    v54 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = "ON";
      _os_log_impl(&dword_1BF335000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad based on Motion support: %s", (uint8_t *)&__p, 0xCu);
      v54 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      __p = 0uLL;
      v130[0] = 0;
      v55 = *((int *)this + 68);
      if (v55 < 3)
        std::string::__assign_external((std::string *)&__p, **((const std::string::value_type ***)&unk_1E7909D10 + v55));
      v56 = (const char *)&__p;
      if (v130[0] < 0)
        v56 = (const char *)__p;
      *(_DWORD *)buf = 136315138;
      v132 = v56;
      _os_log_impl(&dword_1BF335000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion Mode: %s", buf, 0xCu);
      if (SHIBYTE(v130[0]) < 0)
        operator delete((void *)__p);
      v54 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_DWORD *)this + 63))
        v57 = "On-Body";
      else
        v57 = "Off-Body";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v57;
      _os_log_impl(&dword_1BF335000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion State: %s", (uint8_t *)&__p, 0xCu);
      v54 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 248))
        v58 = "RUNNING";
      else
        v58 = "OFF";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v58;
      _os_log_impl(&dword_1BF335000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion Algorithm: %s", (uint8_t *)&__p, 0xCu);
    }
  }
  if (*((_BYTE *)this + 155))
  {
    v59 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&__p = 0x104000100;
      _os_log_impl(&dword_1BF335000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion Always Supported: %d", (uint8_t *)&__p, 8u);
      v59 = *((_QWORD *)this + 5);
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
LABEL_167:
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          goto LABEL_172;
        goto LABEL_168;
      }
    }
    else if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      goto LABEL_167;
    }
    if (*((_DWORD *)this + 63))
      v64 = "On-Body";
    else
      v64 = "Off-Body";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v64;
    _os_log_impl(&dword_1BF335000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion State: %s", (uint8_t *)&__p, 0xCu);
    v59 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
LABEL_168:
      if (*((_BYTE *)this + 248))
        v60 = "RUNNING";
      else
        v60 = "OFF";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v60;
      _os_log_impl(&dword_1BF335000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion Algorithm: %s", (uint8_t *)&__p, 0xCu);
    }
  }
LABEL_172:
  if (!*((_BYTE *)this + 154))
    goto LABEL_198;
  v61 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&__p = 0x104000100;
    _os_log_impl(&dword_1BF335000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Antenna Free Space Configuration Support: %d", (uint8_t *)&__p, 8u);
    v61 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
      || (v62 = *((_DWORD *)this + 53), v62 == 255))
    {
      if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this))
      {
        v63 = "Not Free Space";
LABEL_191:
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v63;
        _os_log_impl(&dword_1BF335000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Antenna Free Space Config: %s", (uint8_t *)&__p, 0xCu);
        v61 = *((_QWORD *)this + 5);
        goto LABEL_192;
      }
      v62 = *((_DWORD *)this + 63) != 0;
    }
    if (v62)
      v63 = "Not Free Space";
    else
      v63 = "Free Space";
    goto LABEL_191;
  }
LABEL_192:
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync(this, (std::string *)&__p);
    v65 = v130[0] >= 0 ? (const char *)&__p : (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v65;
    _os_log_impl(&dword_1BF335000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Overridden Free Space: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
  }
LABEL_198:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v66 = (Capabilities *)qword_1ED70FAA0;
  if (!qword_1ED70FAA0)
  {
    v67 = operator new(1uLL);
    v68 = operator new(0x20uLL);
    *v68 = off_1E7903F88;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v67;
    v69 = (std::__shared_weak_count *)off_1ED70FAA8;
    qword_1ED70FAA0 = (uint64_t)v67;
    off_1ED70FAA8 = v68;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(p_shared_owners);
      while (__stlxr(v71 - 1, p_shared_owners));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v66 = (Capabilities *)qword_1ED70FAA0;
  }
  v72 = (std::__shared_weak_count *)off_1ED70FAA8;
  *(_QWORD *)&__p = v66;
  *((_QWORD *)&__p + 1) = off_1ED70FAA8;
  if (off_1ED70FAA8)
  {
    v73 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v66);
  v76 = isCMHandDetectionSupported;
  if (!v72)
    goto LABEL_212;
  v77 = (unint64_t *)&v72->__shared_owners_;
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v76)
      goto LABEL_220;
  }
  else
  {
LABEL_212:
    if (!isCMHandDetectionSupported)
      goto LABEL_220;
  }
  v79 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    v80 = (_QWORD *)((char *)this + 536);
    if (*((char *)this + 559) < 0)
      v80 = (_QWORD *)*v80;
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v80;
    _os_log_impl(&dword_1BF335000, v79, OS_LOG_TYPE_DEFAULT, "#I Motion Hand Detection Overriding: %s", (uint8_t *)&__p, 0xCu);
    v79 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    v81 = *((_DWORD *)this + 132);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v81;
    _os_log_impl(&dword_1BF335000, v79, OS_LOG_TYPE_DEFAULT, "#I Motion Hand Detection State: %d", (uint8_t *)&__p, 8u);
  }
LABEL_220:
  if (*((_BYTE *)this + 169))
  {
    v82 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      ctu::iokit::asString();
      if (v130[0] >= 0)
        v83 = (const char *)&__p;
      else
        v83 = (const char *)__p;
      *(_DWORD *)buf = 136315138;
      v132 = v83;
      _os_log_impl(&dword_1BF335000, v82, OS_LOG_TYPE_DEFAULT, "#I Current Power Source: %s", buf, 0xCu);
      if (SHIBYTE(v130[0]) < 0)
        operator delete((void *)__p);
      v82 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_DWORD *)this + 142) != -1
        && ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()))
      {
        ctu::iokit::asString();
        if (v130[0] >= 0)
          v84 = (const char *)&__p;
        else
          v84 = (const char *)__p;
        *(_DWORD *)buf = 136315138;
        v132 = v84;
        _os_log_impl(&dword_1BF335000, v82, OS_LOG_TYPE_DEFAULT, "#I Current Power Source Overridden Value: %s", buf, 0xCu);
        if (SHIBYTE(v130[0]) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_DWORD *)buf = 136315138;
        v132 = "AUTO";
        _os_log_impl(&dword_1BF335000, v82, OS_LOG_TYPE_DEFAULT, "#I Current Power Source Overridden Value: %s", buf, 0xCu);
      }
    }
  }
  if (!*((_BYTE *)this + 170))
    goto LABEL_288;
  v85 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    v86 = (_QWORD *)((char *)this + 640);
    if (*((char *)this + 663) < 0)
      v86 = (_QWORD *)*v86;
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v86;
    _os_log_impl(&dword_1BF335000, v85, OS_LOG_TYPE_DEFAULT, "#I Device Material Overridden State: %s", (uint8_t *)&__p, 0xCu);
    v85 = *((_QWORD *)this + 5);
  }
  if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    goto LABEL_288;
  v87 = (uint64_t **)((char *)this + 624);
  v88 = (uint64_t *)*((_QWORD *)this + 78);
  v89 = (uint64_t **)((char *)this + 624);
  v90 = (uint64_t **)((char *)this + 624);
  if (v88)
  {
    v91 = (char *)*((_QWORD *)this + 78);
    while (1)
    {
      while (1)
      {
        v90 = (uint64_t **)v91;
        v92 = *((_DWORD *)v91 + 7);
        if (v92 < 2)
          break;
        v91 = (char *)*v90;
        v89 = v90;
        if (!*v90)
          goto LABEL_251;
      }
      if (v92)
        break;
      v91 = (char *)v90[1];
      if (!v91)
      {
        v89 = v90 + 1;
        goto LABEL_251;
      }
    }
    v96 = *((_DWORD *)v90 + 8);
    goto LABEL_256;
  }
LABEL_251:
  v93 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v93 + 28) = 1;
  *v93 = 0;
  v93[1] = 0;
  v93[2] = (uint64_t)v90;
  *v89 = v93;
  v94 = **((_QWORD **)this + 77);
  v95 = v93;
  if (v94)
  {
    *((_QWORD *)this + 77) = v94;
    v95 = *v89;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v95);
  ++*((_QWORD *)this + 79);
  v88 = (uint64_t *)*((_QWORD *)this + 78);
  v96 = *((_DWORD *)v93 + 8);
  v97 = (uint64_t **)((char *)this + 624);
  v98 = (uint64_t **)((char *)this + 624);
  if (v88)
  {
LABEL_256:
    v99 = (char *)v88;
    while (1)
    {
      while (1)
      {
        v98 = (uint64_t **)v99;
        v100 = *((_DWORD *)v99 + 7);
        if (v100 < 3)
          break;
        v99 = (char *)*v98;
        v97 = v98;
        if (!*v98)
          goto LABEL_262;
      }
      if (v100 == 2)
        break;
      v99 = (char *)v98[1];
      if (!v99)
      {
        v97 = v98 + 1;
        goto LABEL_262;
      }
    }
    v104 = *((_DWORD *)v98 + 8);
    goto LABEL_267;
  }
LABEL_262:
  v101 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v101 + 28) = 2;
  *v101 = 0;
  v101[1] = 0;
  v101[2] = (uint64_t)v98;
  *v97 = v101;
  v102 = **((_QWORD **)this + 77);
  v103 = v101;
  if (v102)
  {
    *((_QWORD *)this + 77) = v102;
    v103 = *v97;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v103);
  ++*((_QWORD *)this + 79);
  v88 = (uint64_t *)*((_QWORD *)this + 78);
  v104 = *((_DWORD *)v101 + 8);
  v105 = (uint64_t **)((char *)this + 624);
  v106 = (uint64_t **)((char *)this + 624);
  if (v88)
  {
LABEL_267:
    v107 = (char *)v88;
    do
    {
      while (1)
      {
        v106 = (uint64_t **)v107;
        v108 = *((_DWORD *)v107 + 7);
        if (v108 < 4)
          break;
        v107 = (char *)*v106;
        v105 = v106;
        if (!*v106)
          goto LABEL_273;
      }
      if (v108 == 3)
      {
        v112 = *((_DWORD *)v106 + 8);
        goto LABEL_279;
      }
      v107 = (char *)v106[1];
    }
    while (v107);
    v105 = v106 + 1;
  }
LABEL_273:
  v109 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v109 + 28) = 3;
  *v109 = 0;
  v109[1] = 0;
  v109[2] = (uint64_t)v106;
  *v105 = v109;
  v110 = **((_QWORD **)this + 77);
  v111 = v109;
  if (v110)
  {
    *((_QWORD *)this + 77) = v110;
    v111 = *v105;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v111);
  ++*((_QWORD *)this + 79);
  v88 = (uint64_t *)*((_QWORD *)this + 78);
  v112 = *((_DWORD *)v109 + 8);
  v113 = (uint64_t **)((char *)this + 624);
  if (v88)
  {
    while (1)
    {
LABEL_279:
      while (1)
      {
        v113 = (uint64_t **)v88;
        v114 = *((_DWORD *)v88 + 7);
        if (v114 < 5)
          break;
        v88 = *v113;
        v87 = v113;
        if (!*v113)
          goto LABEL_283;
      }
      if (v114 == 4)
        break;
      v88 = v113[1];
      if (!v88)
      {
        v87 = v113 + 1;
        goto LABEL_283;
      }
    }
    v115 = (uint64_t *)v113;
  }
  else
  {
LABEL_283:
    v115 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v115 + 28) = 4;
    *v115 = 0;
    v115[1] = 0;
    v115[2] = (uint64_t)v113;
    *v87 = v115;
    v116 = **((_QWORD **)this + 77);
    v117 = v115;
    if (v116)
    {
      *((_QWORD *)this + 77) = v116;
      v117 = *v87;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v117);
    ++*((_QWORD *)this + 79);
  }
  v118 = *((_DWORD *)v115 + 8);
  *(_QWORD *)&__p = __PAIR64__(v96, 67109888);
  WORD4(__p) = 1024;
  *(_DWORD *)((char *)&__p + 10) = v104;
  HIWORD(__p) = 1024;
  LODWORD(v130[0]) = v112;
  WORD2(v130[0]) = 1024;
  *(_DWORD *)((char *)v130 + 6) = v118;
  _os_log_impl(&dword_1BF335000, v85, OS_LOG_TYPE_DEFAULT, "#I Current Device Material Values are as Bottom Enclosure: %d, Top Enclosure: %d, FCM Type: %d, BCM Type: %d", (uint8_t *)&__p, 0x1Au);
LABEL_288:
  if (*((_BYTE *)this + 688))
  {
    v119 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      v120 = (_QWORD *)((char *)this + 696);
      if (*((char *)this + 719) < 0)
        v120 = (_QWORD *)*v120;
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v120;
      _os_log_impl(&dword_1BF335000, v119, OS_LOG_TYPE_DEFAULT, "#I Workout info override: %s", (uint8_t *)&__p, 0xCu);
      v119 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      v121 = *((_DWORD *)this + 180);
      v122 = *((_DWORD *)this + 181);
      LODWORD(__p) = 67109376;
      DWORD1(__p) = v121;
      WORD4(__p) = 1024;
      *(_DWORD *)((char *)&__p + 10) = v122;
      _os_log_impl(&dword_1BF335000, v119, OS_LOG_TYPE_DEFAULT, "#I Workout info: Type=%d, State=%d", (uint8_t *)&__p, 0xEu);
    }
  }
  if (*((_BYTE *)this + 192))
  {
    v123 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 561))
        v124 = "CLOSED";
      else
        v124 = "OPENED";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v124;
      _os_log_impl(&dword_1BF335000, v123, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&__p, 0xCu);
    }
  }
  if (*((_DWORD *)this + 43))
  {
    v125 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
    {
      v126 = *((unsigned __int8 *)this + 736);
      LODWORD(__p) = 67109120;
      DWORD1(__p) = v126;
      _os_log_impl(&dword_1BF335000, v125, OS_LOG_TYPE_DEFAULT, "#I Face ID Support Version: %d", (uint8_t *)&__p, 8u);
    }
  }
  if (*((_BYTE *)this + 176))
  {
    v127 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 737))
        v128 = "ON";
      else
        v128 = "OFF";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v128;
      _os_log_impl(&dword_1BF335000, v127, OS_LOG_TYPE_DEFAULT, "#I Front Camera: %s", (uint8_t *)&__p, 0xCu);
    }
  }
}

void sub_1BF4BBBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::dumpState(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::dumpState(void)::$_0>(antenna::Service::Internal::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::dumpState(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  _QWORD aBlock[6];
  std::__shared_weak_count *v22;
  xpc_object_t v23;
  void *v24;
  dispatch_object_t object;
  xpc_object_t v26;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      if (*(_BYTE *)(a1 + 64))
      {
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9 || (v9 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v9);
            v10 = v9;
          }
          else
          {
            v10 = xpc_null_create();
          }
        }
        else
        {
          v10 = xpc_null_create();
          v9 = 0;
        }
        xpc_release(v9);
        v11 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBA0]);
        if (!v11)
          v11 = xpc_null_create();
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0DDFA68], v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        v13 = *(_QWORD *)(v3 + 120);
        v26 = v10;
        if (v10)
          xpc_retain(v10);
        else
          v26 = xpc_null_create();
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_22_5;
        v15 = *(_QWORD *)(a1 + 40);
        v14 = *(std::__shared_weak_count **)(a1 + 48);
        aBlock[4] = v3;
        aBlock[5] = v15;
        v22 = v14;
        if (v14)
        {
          p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
          do
            v17 = __ldxr(p_shared_weak_owners);
          while (__stxr(v17 + 1, p_shared_weak_owners));
        }
        v18 = *(void **)(a1 + 56);
        v23 = v18;
        if (v18)
          xpc_retain(v18);
        else
          v23 = xpc_null_create();
        v19 = _Block_copy(aBlock);
        v20 = *(NSObject **)(v3 + 88);
        if (v20)
          dispatch_retain(*(dispatch_object_t *)(v3 + 88));
        v24 = v19;
        object = v20;
        (*(void (**)(uint64_t, xpc_object_t *, void **))(*(_QWORD *)v13 + 48))(v13, &v26, &v24);
        if (object)
          dispatch_release(object);
        if (v24)
          _Block_release(v24);
        xpc_release(v26);
        v26 = 0;
        xpc_release(v23);
        v23 = 0;
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        xpc_release(v10);
      }
    }
  }
}

void sub_1BF4BBFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, xpc_object_t object, char a18)
{
  void *v18;
  uint64_t v19;

  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a18);
  xpc_release(object);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(_QWORD *)(v19 - 56) = 0;
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke_2(_QWORD *a1, char a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  uint64_t *v11;
  xpc_object_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  void **v22;
  void *v23;
  xpc_object_t object;
  void *__p[3];
  std::__shared_weak_count *v27;
  __int128 v28;
  uint8_t buf[4];
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v27 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        if ((a2 & 1) != 0)
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            v21 = (char *)MEMORY[0x1C3B8A7D0](*a3);
            memset(__p, 170, sizeof(__p));
            std::string::basic_string[abi:ne180100]<0>(__p, v21);
            free(v21);
            v22 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            LODWORD(v28) = 136315138;
            *(_QWORD *)((char *)&v28 + 4) = v22;
            _os_log_debug_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEBUG, "#D PPM telemetry from BB: %s", (uint8_t *)&v28, 0xCu);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
          }
          v11 = *(uint64_t **)(v7 + 576);
          v12 = (xpc_object_t)*a3;
          v23 = v12;
          if (v12 && MEMORY[0x1C3B8A86C](v12) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v12);
          }
          else
          {
            v12 = xpc_null_create();
            v23 = v12;
          }
          PPMManager::reportTelemetry(v11, &v23);
          xpc_release(v12);
          v23 = 0;
        }
        else
        {
          v14 = (void *)a1[7];
          v13 = a1 + 7;
          v15 = *MEMORY[0x1E0DDFA68];
          if (xpc_dictionary_get_value(v14, (const char *)*MEMORY[0x1E0DDFA68]))
          {
            v16 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_QWORD *)&v28 = v13;
              *((_QWORD *)&v28 + 1) = v15;
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&v28, &object);
              xpc::dyn_cast_or_default((xpc *)&object, (const object *)"None", v17);
              if (SHIBYTE(__p[2]) >= 0)
                v18 = __p;
              else
                v18 = (void **)__p[0];
              *(_DWORD *)buf = 136315138;
              v30 = v18;
              _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", buf, 0xCu);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              xpc_release(object);
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF4BC2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  xpc_object_t result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (void *)a2[7];
  a1[7] = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *antenna::Service::Service(_QWORD *a1, uint64_t *a2, uint64_t a3, NSObject **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  dispatch_object_t object;
  void *aBlock;
  dispatch_object_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;

  *a1 = 0;
  a1[1] = 0;
  v7 = a2[1];
  v27 = *a2;
  v28 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(void **)a3;
  if (*(_QWORD *)a3)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a3 + 8);
  aBlock = v10;
  v26 = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *a4;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  antenna::Service::Internal::create(&v27, (uint64_t)&aBlock, &object, (antenna::Service::Internal **)&v29);
  v13 = v29;
  v29 = 0uLL;
  v14 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (object)
    dispatch_release(object);
  if (v26)
    dispatch_release(v26);
  if (aBlock)
    _Block_release(aBlock);
  v20 = v28;
  if (!v28)
    return a1;
  v21 = (unint64_t *)&v28->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_1BF4BC54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  NSObject *v14;

  if (v14)
    dispatch_release(v14);
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void antenna::Service::~Service(antenna::Service *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void antenna::Service::startService(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::startService(v1);
}

void antenna::Service::stopService(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::stopService(v1);
}

void antenna::Service::exitLowPower(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::exitLowPower(v1);
}

void antenna::Service::enterLowPower(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::enterLowPower(v1);
}

void antenna::Service::setMotionThresholds(CMOnBodyDelegate ***a1, ctu **a2)
{
  CMOnBodyDelegate **v2;
  ctu *v3;
  ctu *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = *a2;
    v4 = v3;
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      v3 = (ctu *)xpc_null_create();
      v4 = v3;
    }
    antenna::Service::Internal::setMotionThresholds(v2, &v4);
    xpc_release(v3);
  }
}

void sub_1BF4BC6F4(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::setAudioState(_QWORD **a1, xpc_object_t *a2)
{
  _QWORD *v2;
  xpc_object_t v3;
  xpc_object_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = *a2;
    v4 = v3;
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      v3 = xpc_null_create();
      v4 = v3;
    }
    antenna::Service::Internal::setAudioState(v2, &v4);
    xpc_release(v3);
  }
}

void antenna::Service::callActive(antenna::Service *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Active!", v4, 2u);
    }
    *(_BYTE *)(v1 + 165) = 1;
    if (*(_BYTE *)(v1 + 162))
    {
      v3 = *(_QWORD *)(v1 + 376);
      if (v3)
      {
        if (*(_QWORD *)(v3 + 72))
          ctu::iokit::Controller::setMesaQuality();
      }
    }
  }
}

void antenna::Service::callInactive(antenna::Service *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Inactive!", v4, 2u);
    }
    *(_BYTE *)(v1 + 165) = 0;
    if (*(_BYTE *)(v1 + 162))
    {
      v3 = *(_QWORD *)(v1 + 376);
      if (v3)
      {
        if (*(_QWORD *)(v3 + 72))
          ctu::iokit::Controller::setMesaQuality();
      }
    }
  }
}

void antenna::Service::antennaSetProperty(antenna::Service::Internal **this, xpc_object_t *a2)
{
  antenna::Service::Internal *v2;

  v2 = *this;
  if (v2)
    antenna::Service::Internal::antennaSetProperty(v2, a2);
}

void antenna::Service::antennaGetProperty(NSObject ***this@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  v6 = xpc_null_create();
  *a3 = v6;
  if (*this)
  {
    antenna::Service::Internal::antennaGetProperty(*this, a2, &v9);
    v7 = v9;
    v8 = xpc_null_create();
    *a3 = v7;
    xpc_release(v6);
    xpc_release(v8);
  }
}

void sub_1BF4BC930(_Unwind_Exception *a1)
{
  xpc_object_t *v1;

  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::dumpState(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::dumpState(v1);
}

void antenna::Service::shutdown(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::shutdown(v1);
}

void antenna::Service::Internal::~Internal(xpc_object_t *this)
{
  void *v1;

  antenna::Service::Internal::~Internal(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  xpc_object_t v31;
  NSObject *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;

  *this = off_1E7909558;
  antenna::Service::Internal::stopTxPowerCapping_sync((antenna::Service::Internal *)this);
  if (*((char *)this + 719) < 0)
    operator delete(this[87]);
  v2 = (std::__shared_weak_count *)this[85];
  if (!v2)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*((char *)this + 663) & 0x80000000) == 0)
    {
LABEL_8:
      std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[78]);
      if ((*((char *)this + 615) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else
  {
LABEL_7:
    if ((*((char *)this + 663) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(this[80]);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[78]);
  if ((*((char *)this + 615) & 0x80000000) == 0)
  {
LABEL_9:
    v5 = (std::__shared_weak_count *)this[73];
    if (!v5)
      goto LABEL_17;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(this[74]);
  v5 = (std::__shared_weak_count *)this[73];
  if (!v5)
    goto LABEL_17;
LABEL_14:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((*((char *)this + 559) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_17:
  if (*((char *)this + 559) < 0)
LABEL_18:
    operator delete(this[67]);
LABEL_19:
  v8 = (std::__shared_weak_count *)this[65];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)this[63];
  if (!v11)
    goto LABEL_28;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[56]);
    if ((*((char *)this + 439) & 0x80000000) == 0)
    {
LABEL_29:
      if ((*((char *)this + 415) & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_36;
    }
  }
  else
  {
LABEL_28:
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[56]);
    if ((*((char *)this + 439) & 0x80000000) == 0)
      goto LABEL_29;
  }
  operator delete(this[52]);
  if ((*((char *)this + 415) & 0x80000000) == 0)
  {
LABEL_30:
    v14 = (std::__shared_weak_count *)this[48];
    if (!v14)
      goto LABEL_41;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(this[49]);
  v14 = (std::__shared_weak_count *)this[48];
  if (!v14)
    goto LABEL_41;
LABEL_37:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_41:
  v17 = this[45];
  if (v17)
    dispatch_release(v17);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[39]);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[36]);
  v18 = this[32];
  if (v18)
    dispatch_release(v18);
  v19 = (std::__shared_weak_count *)this[30];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  xpc_release(this[28]);
  this[28] = 0;
  v22 = this[25];
  if (v22)
    dispatch_release(v22);
  v23 = this[23];
  if (v23)
    dispatch_release(v23);
  v24 = (std::__shared_weak_count *)this[18];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)this[16];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = this[14];
  if (v30)
    dispatch_release(v30);
  v31 = this[13];
  if (v31)
    _Block_release(v31);
  *this = off_1E7909778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v32 = this[12];
  if (v32)
    dispatch_release(v32);
  v33 = this[11];
  if (v33)
    dispatch_release(v33);
  v34 = (std::__shared_weak_count *)this[10];
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
}

uint64_t ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "antenna.svc");
}

uint64_t ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7909778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7909778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZN7antenna7Service8Internal25performCommandDriver_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS2_6objectEEEE_block_invoke(uint64_t a1, char a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  xpc_object_t v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  void **v20;
  _QWORD v21[2];
  xpc_object_t v22;
  void *block[2];
  void (*v24)(uint64_t);
  void *v25;
  void *aBlock;
  xpc_object_t object;
  uint8_t buf[4];
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      if ((a2 & 1) == 0)
      {
        v13 = *MEMORY[0x1E0DDFA68];
        if (xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 56), (const char *)*MEMORY[0x1E0DDFA68]))
        {
          v14 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v21[0] = a1 + 56;
            v21[1] = v13;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, &v22);
            xpc::dyn_cast_or_default((xpc *)&v22, (const object *)"None", v19);
            if (SHIBYTE(v24) >= 0)
              v20 = block;
            else
              v20 = (void **)block[0];
            *(_DWORD *)buf = 136315138;
            v29 = v20;
            _os_log_error_impl(&dword_1BF335000, v14, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", buf, 0xCu);
            if (SHIBYTE(v24) < 0)
              operator delete(block[0]);
            xpc_release(v22);
          }
        }
      }
      if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
      {
        v15 = *a3;
        if (v15)
        {
          xpc_retain(v15);
          v16 = *(const void **)(a1 + 64);
          if (v16)
          {
LABEL_16:
            v17 = _Block_copy(v16);
            goto LABEL_19;
          }
        }
        else
        {
          v15 = xpc_null_create();
          v16 = *(const void **)(a1 + 64);
          if (v16)
            goto LABEL_16;
        }
        v17 = 0;
LABEL_19:
        v18 = *(NSObject **)(a1 + 72);
        block[0] = (void *)MEMORY[0x1E0C809B0];
        block[1] = (void *)1174405120;
        v24 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEclIJS2_EEEvDpT__block_invoke;
        v25 = &__block_descriptor_tmp_33_4;
        if (v17)
        {
          aBlock = _Block_copy(v17);
          object = v15;
          if (v15)
          {
LABEL_21:
            xpc_retain(v15);
LABEL_24:
            dispatch_async(v18, block);
            xpc_release(object);
            object = 0;
            if (aBlock)
              _Block_release(aBlock);
            if (v17)
              _Block_release(v17);
            xpc_release(v15);
            return;
          }
        }
        else
        {
          aBlock = 0;
          object = v15;
          if (v15)
            goto LABEL_21;
        }
        object = xpc_null_create();
        goto LABEL_24;
      }
    }
  }
}

void sub_1BF4BCC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c16_ZTSKN3xpc4dictE64c58_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  a1[7] = v7;
  if (!v7)
  {
    a1[7] = xpc_null_create();
    v8 = (void *)a2[8];
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  xpc_retain(v7);
  v8 = (void *)a2[8];
  if (v8)
LABEL_8:
    v8 = _Block_copy(v8);
LABEL_9:
  v9 = a2[9];
  a1[8] = v8;
  a1[9] = v9;
  if (v9)
    dispatch_retain(v9);
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c16_ZTSKN3xpc4dictE64c58_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    _Block_release(v3);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  object = v1;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1BF4BCE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal*)#1}::operator() const(antenna::Service::Internal*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptr"
                     "IT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__11"
                                "0shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal*)#1}::operator() const(antenna::Service::Internal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7909778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::init(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  CommandDriverFactory *v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  queue v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_weak_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  NSObject *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  NSObject *v89;
  void *v90;
  const void *v91;
  NSObject *v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  NSObject *v96;
  void *v97;
  const void *v98;
  NSObject *v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  NSObject *v103;
  void *v104;
  const void *v105;
  NSObject *v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  NSObject *v110;
  void *v111;
  const void *v112;
  NSObject *v113;
  ctu::iokit::Controller *v114;
  NSObject *v115;
  uint8_t *v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  NSObject *v120;
  void *v121;
  const void *v122;
  NSObject *v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  NSObject *v127;
  void *v128;
  const void *v129;
  NSObject *v130;
  Capabilities *v131;
  void *v132;
  _QWORD *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  int isCMHandDetectionSupported;
  int v141;
  unint64_t *v142;
  unint64_t v143;
  NSObject *v144;
  NSObject *v145;
  __int128 v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t **v153;
  unint64_t v154;
  void *v155;
  NSObject *v156;
  NSObject *v157;
  __int128 v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  NSObject *v166;
  NSObject *v167;
  __int128 v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  ctu::iokit::IOHIDController *v176;
  NSObject *v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  _QWORD v224[6];
  std::__shared_weak_count *v225;
  dispatch_object_t v226;
  _QWORD v227[6];
  std::__shared_weak_count *v228;
  void *v229;
  dispatch_object_t v230;
  dispatch_object_t v231;
  _QWORD v232[6];
  std::__shared_weak_count *v233;
  void *v234;
  dispatch_object_t v235;
  dispatch_object_t v236;
  _QWORD v237[6];
  std::__shared_weak_count *v238;
  const void *v239;
  dispatch_object_t object;
  dispatch_object_t v241;
  _QWORD v242[6];
  std::__shared_weak_count *v243;
  _QWORD v244[6];
  std::__shared_weak_count *v245;
  uint8_t buf[16];
  char v247;
  _QWORD v248[6];
  std::__shared_weak_count *v249;
  _QWORD v250[6];
  std::__shared_weak_count *v251;
  _QWORD v252[6];
  std::__shared_weak_count *v253;
  _QWORD v254[6];
  std::__shared_weak_count *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  _QWORD aBlock[6];
  std::__shared_weak_count *v259;
  const void *v260;
  dispatch_object_t v261;
  NSObject *v262;
  dispatch_object_t v263;
  _QWORD v264[3];
  _QWORD *v265;
  uint8_t v266[16];
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  v219 = *a1;
  antenna::Service::Internal::configuration_sync((antenna::Service::Internal *)v2);
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_null_create();
  v6 = *(void **)(v2 + 224);
  *(_QWORD *)(v2 + 224) = v4;
  xpc_release(v6);
  xpc_release(v5);
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC28]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 224), (const char *)*MEMORY[0x1E0CFBBD8], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v10 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v9);
    v11 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v12 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v10 = off_1ED70FD08;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v18 = *(NSObject **)(v2 + 96);
  v263 = v18;
  if (v18)
    dispatch_retain(v18);
  (*(void (**)(uint8_t *__return_ptr, uint64_t, dispatch_object_t *))(*(_QWORD *)v10 + 56))(v266, v10, &v263);
  v20 = *(_OWORD *)v266;
  memset(v266, 0, sizeof(v266));
  v21 = *(std::__shared_weak_count **)(v2 + 128);
  *(_OWORD *)(v2 + 120) = v20;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(std::__shared_weak_count **)&v266[8];
  if (*(_QWORD *)&v266[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v266[8] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v263)
    dispatch_release(v263);
  if (!v15)
    goto LABEL_437;
  v27 = (unint64_t *)&v15->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (*(_QWORD *)(v2 + 120))
      goto LABEL_41;
  }
  else
  {
LABEL_437:
    if (*(_QWORD *)(v2 + 120))
      goto LABEL_41;
  }
  v29 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v29, OS_LOG_TYPE_ERROR, "Failed to create command driver", buf, 2u);
  }
LABEL_41:
  v30 = MEMORY[0x1E0C809B0];
  if (!*(_BYTE *)(v2 + 152) && !*(_BYTE *)(v2 + 153))
    goto LABEL_85;
  v31 = *(NSObject **)(v2 + 88);
  v262 = v31;
  if (v31)
    dispatch_retain(v31);
  CMOnBodyDelegate::create(&v262, v19, buf);
  v32 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v33 = *(std::__shared_weak_count **)(v2 + 240);
  *(_OWORD *)(v2 + 232) = v32;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v37 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v262)
    dispatch_release(v262);
  if (*(_QWORD *)(v2 + 232))
  {
    v39 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v39 || (v40 = *(_QWORD *)(v2 + 72), (v41 = std::__shared_weak_count::lock(v39)) == 0))
LABEL_433:
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v42 = v41;
    p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v44 = __ldxr(p_shared_weak_owners);
    while (__stxr(v44 + 1, p_shared_weak_owners));
    v45 = (unint64_t *)&v41->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v42);
    }
    v47 = *(_QWORD **)(v2 + 232);
    aBlock[0] = v30;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_35_2;
    aBlock[4] = v2;
    aBlock[5] = v40;
    v259 = v42;
    do
      v48 = __ldxr(p_shared_weak_owners);
    while (__stxr(v48 + 1, p_shared_weak_owners));
    v49 = _Block_copy(aBlock);
    v50 = *(NSObject **)(v2 + 88);
    if (v50)
      dispatch_retain(*(dispatch_object_t *)(v2 + 88));
    v260 = v49;
    v261 = v50;
    v51 = (_QWORD *)v47[4];
    if ((unint64_t)v51 >= v47[5])
    {
      v53 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v47 + 3, (uint64_t)&v260);
      goto LABEL_78;
    }
    if (v49)
    {
      v52 = _Block_copy(v49);
      v50 = v261;
      *v51 = v52;
      v51[1] = v50;
      if (!v50)
      {
LABEL_74:
        v53 = v51 + 2;
LABEL_78:
        v47[4] = v53;
        if (v261)
          dispatch_release(v261);
        if (v260)
          _Block_release(v260);
        if (v259)
          std::__shared_weak_count::__release_weak(v259);
        std::__shared_weak_count::__release_weak(v42);
        goto LABEL_85;
      }
    }
    else
    {
      *v51 = 0;
      v51[1] = v50;
      if (!v50)
        goto LABEL_74;
    }
    dispatch_retain(v50);
    goto LABEL_74;
  }
  v54 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v54, OS_LOG_TYPE_ERROR, "Failed to create on-body handler", buf, 2u);
  }
LABEL_85:
  v55 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v55)
    goto LABEL_433;
  v56 = *(_QWORD *)(v2 + 72);
  v57 = std::__shared_weak_count::lock(v55);
  if (!v57)
    goto LABEL_433;
  v58 = v57;
  v59 = (unint64_t *)&v57->__shared_weak_owners_;
  do
    v60 = __ldxr(v59);
  while (__stxr(v60 + 1, v59));
  v61 = (unint64_t *)&v57->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (v62)
  {
    if (*(_BYTE *)(v2 + 156))
      goto LABEL_101;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v58);
    if (*(_BYTE *)(v2 + 156))
      goto LABEL_101;
  }
  if (*(_BYTE *)(v2 + 158)
    || *(_BYTE *)(v2 + 162)
    || *(_BYTE *)(v2 + 163)
    || *(_BYTE *)(v2 + 169)
    || *(_DWORD *)(v2 + 172)
    || *(_BYTE *)(v2 + 176))
  {
LABEL_101:
    v63 = *(std::__shared_weak_count **)(v2 + 144);
    v256 = *(_QWORD *)(v2 + 136);
    v257 = v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    v66 = off_1ED70FA00;
    if (!off_1ED70FA00)
    {
      ABMServer::create_default_global(buf);
      v67 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v68 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
      off_1ED70FA00 = v67;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v66 = off_1ED70FA00;
    }
    v74 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    if (*(&off_1ED70FA00 + 1))
    {
      v75 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v66 + 208);
    v77 = operator new(0xD8uLL);
    std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(v77, &v256, (uint64_t *)buf);
    v78 = *(std::__shared_weak_count **)(v2 + 384);
    *(_QWORD *)(v2 + 376) = v77 + 3;
    *(_QWORD *)(v2 + 384) = v77;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    if (!v74)
      goto LABEL_128;
    v81 = (unint64_t *)&v74->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
      v83 = v257;
      if (!v257)
        goto LABEL_132;
    }
    else
    {
LABEL_128:
      v83 = v257;
      if (!v257)
        goto LABEL_132;
    }
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
      if (*(_BYTE *)(v2 + 156))
        goto LABEL_138;
LABEL_133:
      if (!*(_BYTE *)(v2 + 158))
        goto LABEL_157;
LABEL_138:
      v86 = *(_QWORD *)(v2 + 376);
      v254[0] = v30;
      v254[1] = 1174405120;
      v254[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_36;
      v254[3] = &__block_descriptor_tmp_38_0;
      v254[4] = v2;
      v254[5] = v56;
      v255 = v58;
      do
        v87 = __ldxr(v59);
      while (__stxr(v87 + 1, v59));
      v88 = _Block_copy(v254);
      v89 = *(NSObject **)(v2 + 88);
      if (v89)
        dispatch_retain(*(dispatch_object_t *)(v2 + 88));
      if (v88)
      {
        v90 = _Block_copy(v88);
        v91 = *(const void **)(v86 + 88);
        *(_QWORD *)(v86 + 88) = v90;
        if (!v91)
          goto LABEL_147;
      }
      else
      {
        v91 = *(const void **)(v86 + 88);
        *(_QWORD *)(v86 + 88) = 0;
        if (!v91)
        {
LABEL_147:
          if (v89)
            dispatch_retain(v89);
          v92 = *(NSObject **)(v86 + 96);
          *(_QWORD *)(v86 + 96) = v89;
          if (v92)
            dispatch_release(v92);
          if (v89)
            dispatch_release(v89);
          if (v88)
            _Block_release(v88);
          if (v255)
            std::__shared_weak_count::__release_weak(v255);
LABEL_157:
          if (!*(_BYTE *)(v2 + 162))
            goto LABEL_177;
          v93 = *(_QWORD *)(v2 + 376);
          v252[0] = v30;
          v252[1] = 1174405120;
          v252[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_39;
          v252[3] = &__block_descriptor_tmp_41_2;
          v252[4] = v2;
          v252[5] = v56;
          v253 = v58;
          do
            v94 = __ldxr(v59);
          while (__stxr(v94 + 1, v59));
          v95 = _Block_copy(v252);
          v96 = *(NSObject **)(v2 + 88);
          if (v96)
            dispatch_retain(*(dispatch_object_t *)(v2 + 88));
          if (v95)
          {
            v97 = _Block_copy(v95);
            v98 = *(const void **)(v93 + 120);
            *(_QWORD *)(v93 + 120) = v97;
            if (!v98)
              goto LABEL_167;
          }
          else
          {
            v98 = *(const void **)(v93 + 120);
            *(_QWORD *)(v93 + 120) = 0;
            if (!v98)
            {
LABEL_167:
              if (v96)
                dispatch_retain(v96);
              v99 = *(NSObject **)(v93 + 128);
              *(_QWORD *)(v93 + 128) = v96;
              if (v99)
                dispatch_release(v99);
              if (v96)
                dispatch_release(v96);
              if (v95)
                _Block_release(v95);
              if (v253)
                std::__shared_weak_count::__release_weak(v253);
LABEL_177:
              if (!*(_BYTE *)(v2 + 163))
                goto LABEL_197;
              v100 = *(_QWORD *)(v2 + 376);
              v250[0] = v30;
              v250[1] = 1174405120;
              v250[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_42;
              v250[3] = &__block_descriptor_tmp_44_1;
              v250[4] = v2;
              v250[5] = v56;
              v251 = v58;
              do
                v101 = __ldxr(v59);
              while (__stxr(v101 + 1, v59));
              v102 = _Block_copy(v250);
              v103 = *(NSObject **)(v2 + 88);
              if (v103)
                dispatch_retain(*(dispatch_object_t *)(v2 + 88));
              if (v102)
              {
                v104 = _Block_copy(v102);
                v105 = *(const void **)(v100 + 104);
                *(_QWORD *)(v100 + 104) = v104;
                if (!v105)
                  goto LABEL_187;
              }
              else
              {
                v105 = *(const void **)(v100 + 104);
                *(_QWORD *)(v100 + 104) = 0;
                if (!v105)
                {
LABEL_187:
                  if (v103)
                    dispatch_retain(v103);
                  v106 = *(NSObject **)(v100 + 112);
                  *(_QWORD *)(v100 + 112) = v103;
                  if (v106)
                    dispatch_release(v106);
                  if (v103)
                    dispatch_release(v103);
                  if (v102)
                    _Block_release(v102);
                  if (v251)
                    std::__shared_weak_count::__release_weak(v251);
LABEL_197:
                  if (!*(_BYTE *)(v2 + 169))
                    goto LABEL_226;
                  v107 = *(_QWORD *)(v2 + 376);
                  v248[0] = v30;
                  v248[1] = 1174405120;
                  v248[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_45;
                  v248[3] = &__block_descriptor_tmp_46_1;
                  v248[4] = v2;
                  v248[5] = v56;
                  v249 = v58;
                  do
                    v108 = __ldxr(v59);
                  while (__stxr(v108 + 1, v59));
                  v109 = _Block_copy(v248);
                  v110 = *(NSObject **)(v2 + 88);
                  if (v110)
                    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                  if (v109)
                  {
                    v111 = _Block_copy(v109);
                    v112 = *(const void **)(v107 + 136);
                    *(_QWORD *)(v107 + 136) = v111;
                    if (!v112)
                    {
LABEL_207:
                      if (v110)
                        dispatch_retain(v110);
                      v113 = *(NSObject **)(v107 + 144);
                      *(_QWORD *)(v107 + 144) = v110;
                      if (v113)
                        dispatch_release(v113);
                      if (v110)
                        dispatch_release(v110);
                      if (v109)
                        _Block_release(v109);
                      v114 = *(ctu::iokit::Controller **)(*(_QWORD *)(v2 + 376) + 72);
                      if (v114)
                      {
                        *(_DWORD *)(v2 + 564) = ctu::iokit::Controller::queryPowerSource(v114);
                        v115 = *(NSObject **)(v2 + 40);
                        if (!os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                        {
LABEL_224:
                          if (v249)
                            std::__shared_weak_count::__release_weak(v249);
LABEL_226:
                          if (!*(_DWORD *)(v2 + 172))
                            goto LABEL_246;
                          *(_BYTE *)(v2 + 736) = 0;
                          v117 = *(_QWORD *)(v2 + 376);
                          v244[0] = v30;
                          v244[1] = 1174405120;
                          v244[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_47;
                          v244[3] = &__block_descriptor_tmp_49_2;
                          v244[4] = v2;
                          v244[5] = v56;
                          v245 = v58;
                          do
                            v118 = __ldxr(v59);
                          while (__stxr(v118 + 1, v59));
                          v119 = _Block_copy(v244);
                          v120 = *(NSObject **)(v2 + 88);
                          if (v120)
                            dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                          if (v119)
                          {
                            v121 = _Block_copy(v119);
                            v122 = *(const void **)(v117 + 152);
                            *(_QWORD *)(v117 + 152) = v121;
                            if (!v122)
                              goto LABEL_236;
                          }
                          else
                          {
                            v122 = *(const void **)(v117 + 152);
                            *(_QWORD *)(v117 + 152) = 0;
                            if (!v122)
                            {
LABEL_236:
                              if (v120)
                                dispatch_retain(v120);
                              v123 = *(NSObject **)(v117 + 160);
                              *(_QWORD *)(v117 + 160) = v120;
                              if (v123)
                                dispatch_release(v123);
                              if (v120)
                                dispatch_release(v120);
                              if (v119)
                                _Block_release(v119);
                              if (v245)
                                std::__shared_weak_count::__release_weak(v245);
LABEL_246:
                              if (!*(_BYTE *)(v2 + 176))
                              {
LABEL_266:
                                IOKitEventNotifier::start(*(IOKitEventNotifier **)(v2 + 376));
                                goto LABEL_267;
                              }
                              *(_BYTE *)(v2 + 737) = 0;
                              v124 = *(_QWORD *)(v2 + 376);
                              v242[0] = v30;
                              v242[1] = 1174405120;
                              v242[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_50;
                              v242[3] = &__block_descriptor_tmp_51_3;
                              v242[4] = v2;
                              v242[5] = v56;
                              v243 = v58;
                              do
                                v125 = __ldxr(v59);
                              while (__stxr(v125 + 1, v59));
                              v126 = _Block_copy(v242);
                              v127 = *(NSObject **)(v2 + 88);
                              if (v127)
                                dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                              if (v126)
                              {
                                v128 = _Block_copy(v126);
                                v129 = *(const void **)(v124 + 168);
                                *(_QWORD *)(v124 + 168) = v128;
                                if (!v129)
                                  goto LABEL_256;
                              }
                              else
                              {
                                v129 = *(const void **)(v124 + 168);
                                *(_QWORD *)(v124 + 168) = 0;
                                if (!v129)
                                {
LABEL_256:
                                  if (v127)
                                    dispatch_retain(v127);
                                  v130 = *(NSObject **)(v124 + 176);
                                  *(_QWORD *)(v124 + 176) = v127;
                                  if (v130)
                                    dispatch_release(v130);
                                  if (v127)
                                    dispatch_release(v127);
                                  if (v126)
                                    _Block_release(v126);
                                  if (v243)
                                    std::__shared_weak_count::__release_weak(v243);
                                  goto LABEL_266;
                                }
                              }
                              _Block_release(v129);
                              goto LABEL_256;
                            }
                          }
                          _Block_release(v122);
                          goto LABEL_236;
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v2 + 564) = 1;
                        v115 = *(NSObject **)(v2 + 40);
                        if (!os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                          goto LABEL_224;
                      }
                      ctu::iokit::asString();
                      if (v247 >= 0)
                        v116 = buf;
                      else
                        v116 = *(uint8_t **)buf;
                      *(_DWORD *)v266 = 136315138;
                      *(_QWORD *)&v266[4] = v116;
                      _os_log_impl(&dword_1BF335000, v115, OS_LOG_TYPE_DEFAULT, "#I Initial Power Source: %s", v266, 0xCu);
                      if (v247 < 0)
                        operator delete(*(void **)buf);
                      goto LABEL_224;
                    }
                  }
                  else
                  {
                    v112 = *(const void **)(v107 + 136);
                    *(_QWORD *)(v107 + 136) = 0;
                    if (!v112)
                      goto LABEL_207;
                  }
                  _Block_release(v112);
                  goto LABEL_207;
                }
              }
              _Block_release(v105);
              goto LABEL_187;
            }
          }
          _Block_release(v98);
          goto LABEL_167;
        }
      }
      _Block_release(v91);
      goto LABEL_147;
    }
LABEL_132:
    if (*(_BYTE *)(v2 + 156))
      goto LABEL_138;
    goto LABEL_133;
  }
LABEL_267:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v131 = (Capabilities *)qword_1ED70FAA0;
  if (!qword_1ED70FAA0)
  {
    v132 = operator new(1uLL);
    v133 = operator new(0x20uLL);
    *v133 = off_1E7903F88;
    v133[1] = 0;
    v133[2] = 0;
    v133[3] = v132;
    v134 = (std::__shared_weak_count *)off_1ED70FAA8;
    qword_1ED70FAA0 = (uint64_t)v132;
    off_1ED70FAA8 = v133;
    if (v134)
    {
      v135 = (unint64_t *)&v134->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    v131 = (Capabilities *)qword_1ED70FAA0;
  }
  v137 = (std::__shared_weak_count *)off_1ED70FAA8;
  if (off_1ED70FAA8)
  {
    v138 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v131);
  v141 = isCMHandDetectionSupported;
  if (!v137)
    goto LABEL_281;
  v142 = (unint64_t *)&v137->__shared_owners_;
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (!v143)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
    if (!v141)
      goto LABEL_301;
  }
  else
  {
LABEL_281:
    if (!isCMHandDetectionSupported)
      goto LABEL_301;
  }
  v144 = *(NSObject **)(v2 + 88);
  v241 = v144;
  if (v144)
    dispatch_retain(v144);
  v145 = *(NSObject **)(v2 + 96);
  object = v145;
  if (v145)
    dispatch_retain(v145);
  CMHandDetectionDelegate::create(&v241, &object, buf);
  v146 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v147 = *(std::__shared_weak_count **)(v2 + 520);
  *(_OWORD *)(v2 + 512) = v146;
  if (v147)
  {
    v148 = (unint64_t *)&v147->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v151 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (object)
    dispatch_release(object);
  if (v241)
    dispatch_release(v241);
LABEL_301:
  v153 = *(uint64_t ***)(v2 + 512);
  if (v153)
  {
    v237[0] = v30;
    v237[1] = 1174405120;
    v237[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_52;
    v237[3] = &__block_descriptor_tmp_53_2;
    v237[4] = v2;
    v237[5] = v56;
    v238 = v58;
    do
      v154 = __ldxr(v59);
    while (__stxr(v154 + 1, v59));
    v155 = _Block_copy(v237);
    v239 = v155;
    CMHandDetectionDelegate::registerCallback(v153, &v239);
    if (v155)
      _Block_release(v155);
    if (v238)
      std::__shared_weak_count::__release_weak(v238);
  }
  if (*(_QWORD *)(v2 + 496))
    goto LABEL_328;
  v156 = *(NSObject **)(v2 + 88);
  v236 = v156;
  if (v156)
    dispatch_retain(v156);
  v157 = *(NSObject **)(v2 + 96);
  v235 = v157;
  if (v157)
    dispatch_retain(v157);
  ctu::iokit::IOHIDController::create();
  v158 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v159 = *(std::__shared_weak_count **)(v2 + 504);
  *(_OWORD *)(v2 + 496) = v158;
  if (v159)
  {
    v160 = (unint64_t *)&v159->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v163 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  if (v235)
    dispatch_release(v235);
  if (v236)
    dispatch_release(v236);
  if (*(_QWORD *)(v2 + 496))
  {
LABEL_328:
    v232[0] = v30;
    v232[1] = 1174405120;
    v232[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_54;
    v232[3] = &__block_descriptor_tmp_55_2;
    v232[4] = v2;
    v232[5] = v56;
    v233 = v58;
    do
      v165 = __ldxr(v59);
    while (__stxr(v165 + 1, v59));
    v234 = _Block_copy(v232);
    ctu::iokit::IOHIDController::registerProxCallback();
    if (v234)
      _Block_release(v234);
    if (v233)
      std::__shared_weak_count::__release_weak(v233);
  }
  if (!*(_BYTE *)(v2 + 192))
    goto LABEL_361;
  if (*(_QWORD *)(v2 + 496))
    goto LABEL_355;
  v166 = *(NSObject **)(v2 + 88);
  v231 = v166;
  if (v166)
    dispatch_retain(v166);
  v167 = *(NSObject **)(v2 + 96);
  v230 = v167;
  if (v167)
    dispatch_retain(v167);
  ctu::iokit::IOHIDController::create();
  v168 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v169 = *(std::__shared_weak_count **)(v2 + 504);
  *(_OWORD *)(v2 + 496) = v168;
  if (v169)
  {
    v170 = (unint64_t *)&v169->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v173 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  if (v230)
    dispatch_release(v230);
  if (v231)
    dispatch_release(v231);
  if (*(_QWORD *)(v2 + 496))
  {
LABEL_355:
    v227[0] = v30;
    v227[1] = 1174405120;
    v227[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_56;
    v227[3] = &__block_descriptor_tmp_58_2;
    v227[4] = v2;
    v227[5] = v56;
    v228 = v58;
    do
      v175 = __ldxr(v59);
    while (__stxr(v175 + 1, v59));
    v229 = _Block_copy(v227);
    ctu::iokit::IOHIDController::registerKeyboardCallback();
    if (v229)
      _Block_release(v229);
    if (v228)
      std::__shared_weak_count::__release_weak(v228);
LABEL_361:
    v176 = *(ctu::iokit::IOHIDController **)(v2 + 496);
    if (v176)
      ctu::iokit::IOHIDController::start(v176);
  }
  if (*(_BYTE *)(v2 + 688))
  {
    v177 = *(NSObject **)(v2 + 96);
    v226 = v177;
    if (v177)
      dispatch_retain(v177);
    memset(buf, 170, sizeof(buf));
    std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(&v226, (uint64_t *)buf);
    v178 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v179 = *(std::__shared_weak_count **)(v2 + 680);
    *(_OWORD *)(v2 + 672) = v178;
    if (v179)
    {
      v180 = (unint64_t *)&v179->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    v182 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v183 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    if (v226)
      dispatch_release(v226);
    v185 = *(_QWORD **)(v2 + 672);
    if (v185)
    {
      v224[0] = v30;
      v224[1] = 1174405120;
      v224[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_59;
      v224[3] = &__block_descriptor_tmp_61_2;
      v224[4] = v2;
      v224[5] = v56;
      v225 = v58;
      do
        v186 = __ldxr(v59);
      while (__stxr(v186 + 1, v59));
      v265 = 0;
      v264[0] = off_1E7909B18;
      v264[1] = _Block_copy(v224);
      v265 = v264;
      HKWorkoutManager::registerCallback(v185, v264);
      v187 = v265;
      if (v265 == v264)
      {
        v188 = 4;
        v187 = v264;
      }
      else
      {
        if (!v265)
          goto LABEL_386;
        v188 = 5;
      }
      (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_386:
      if (v225)
        std::__shared_weak_count::__release_weak(v225);
    }
  }
  v189 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v189 || (v190 = *(_QWORD *)(v2 + 72), (v191 = std::__shared_weak_count::lock(v189)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v192 = v191;
  v193 = (std::__shared_weak_count *)operator new(0x30uLL);
  v193->__shared_owners_ = 0;
  v194 = (unint64_t *)&v193->__shared_owners_;
  v193->__shared_weak_owners_ = 0;
  v193->__vftable = (std::__shared_weak_count_vtbl *)off_1E7909BA8;
  v193[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7909C50;
  v193[1].__shared_owners_ = v190;
  v193[1].__shared_weak_owners_ = (uint64_t)v192;
  v195 = (unint64_t *)&v192->__shared_weak_owners_;
  do
    v196 = __ldxr(v195);
  while (__stxr(v196 + 1, v195));
  v197 = (unint64_t *)&v192->__shared_owners_;
  do
    v198 = __ldaxr(v197);
  while (__stlxr(v198 - 1, v197));
  if (!v198)
  {
    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
    std::__shared_weak_count::__release_weak(v192);
  }
  v193[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7909BF8;
  v222 = v193 + 1;
  v223 = v193;
  do
    v199 = __ldxr(v194);
  while (__stxr(v199 + 1, v194));
  antenna::CommandDriver::registerHandler();
  if (!v223)
    goto LABEL_402;
  v200 = &v223->__shared_owners_;
  do
    v201 = __ldaxr((unint64_t *)v200);
  while (__stlxr(v201 - 1, (unint64_t *)v200));
  if (!v201)
  {
    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
    std::__shared_weak_count::__release_weak(v223);
    if (!*(_BYTE *)(v2 + 572))
      goto LABEL_422;
  }
  else
  {
LABEL_402:
    if (!*(_BYTE *)(v2 + 572))
      goto LABEL_422;
  }
  v202 = *(std::__shared_weak_count **)(v2 + 144);
  v220 = *(_QWORD *)(v2 + 136);
  v221 = v202;
  if (v202)
  {
    v203 = (unint64_t *)&v202->__shared_owners_;
    do
      v204 = __ldxr(v203);
    while (__stxr(v204 + 1, v203));
  }
  PPMManager::create(&v220, buf);
  v205 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v206 = *(std::__shared_weak_count **)(v2 + 584);
  *(_OWORD *)(v2 + 576) = v205;
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v210 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = v221;
  if (v221)
  {
    v213 = (unint64_t *)&v221->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  do
LABEL_422:
    v215 = __ldaxr(v194);
  while (__stlxr(v215 - 1, v194));
  if (!v215)
  {
    ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
    std::__shared_weak_count::__release_weak(v193);
  }
  std::__shared_weak_count::__release_weak(v58);
  operator delete(v219);
  v216 = (std::__shared_weak_count *)a1[2];
  if (v216)
  {
    v217 = (unint64_t *)&v216->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  operator delete(a1);
}

void sub_1BF4BE6B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        antenna::Service::Internal::motionDetectCallback_sync(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_36(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
LABEL_7:
        antenna::Service::Internal::accessoryNotification_sync(v7, a2, a3);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_39(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  __int16 v14;
  uint8_t buf[2];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        if ((a2 & 1) != 0)
        {
          v11 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            return;
          *(_WORD *)buf = 0;
          v12 = "#I ctu::iokit::kTelephonyIOKitMesaStartShort";
          v13 = buf;
          goto LABEL_14;
        }
        if ((a2 & 2) != 0)
        {
          v11 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v14 = 0;
            v12 = "#I ctu::iokit::kTelephonyIOKitMesaStartLong";
            v13 = (uint8_t *)&v14;
LABEL_14:
            _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
          }
        }
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_42(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  antenna::Service::Internal *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (antenna::Service::Internal *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *((_QWORD *)v5 + 5);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109120;
          v12[1] = a2;
          _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Display evnet: 0x%x\n", (uint8_t *)v12, 8u);
        }
        antenna::Service::Internal::sendVideoAccessory_sync(v5, (a2 >> 2) & 1);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_45(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        antenna::Service::Internal::powerSourceNotification_sync(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_47(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  dispatch_time_t v26;
  NSObject *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(unsigned __int8 *)(v5 + 736);
        if (*(_QWORD *)(v5 + 184))
          v15 = "on";
        else
          v15 = "off";
        LODWORD(v29) = 67109634;
        HIDWORD(v29) = v14;
        LOWORD(v30) = 1024;
        *(_DWORD *)((char *)&v30 + 2) = a2;
        HIWORD(v30) = 2080;
        v31 = v15;
        _os_log_debug_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEBUG, "#D Cached State: %d, event: %d, Camera-Off-Timer: %s", (uint8_t *)&v29, 0x18u);
        v12 = *(unsigned __int8 *)(v5 + 736);
        v13 = *(_QWORD *)(v5 + 184);
        if (v12 == a2)
        {
LABEL_11:
          if (!v13)
            return;
          goto LABEL_18;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(v5 + 736);
        v13 = *(_QWORD *)(v5 + 184);
        if (v12 == a2)
          goto LABEL_11;
      }
      if (v13)
      {
LABEL_18:
        *(_BYTE *)(v5 + 736) = a2;
        return;
      }
      if (a2 || v12 != 1)
      {
        *(_BYTE *)(v5 + 736) = a2;
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v5);
      }
      else
      {
        *(_BYTE *)(v5 + 736) = 0;
        v16 = *(std::__shared_weak_count **)(v5 + 80);
        if (!v16 || (v17 = *(_QWORD *)(v5 + 72), (v18 = std::__shared_weak_count::lock(v16)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v19 = v18;
        p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
        do
          v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        v22 = (unint64_t *)&v18->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v19);
        }
        v24 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(v5 + 88));
        v25 = *(NSObject **)(v5 + 184);
        *(_QWORD *)(v5 + 184) = v24;
        if (v25)
        {
          dispatch_release(v25);
          v24 = *(NSObject **)(v5 + 184);
        }
        v26 = dispatch_time(0, 300000000);
        dispatch_source_set_timer(v24, v26, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
        v27 = *(NSObject **)(v5 + 184);
        v29 = MEMORY[0x1E0C809B0];
        v30 = 1174405120;
        v31 = (const char *)___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit25TelephonyIOKitFaceIDStateEEEvRT_S6__block_invoke;
        v32 = &__block_descriptor_tmp_64_2;
        v33 = v5;
        v34 = v17;
        v35 = v19;
        do
          v28 = __ldxr(p_shared_weak_owners);
        while (__stxr(v28 + 1, p_shared_weak_owners));
        dispatch_source_set_event_handler(v27, &v29);
        dispatch_activate(*(dispatch_object_t *)(v5 + 184));
        if (v35)
          std::__shared_weak_count::__release_weak(v35);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_50(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  dispatch_time_t v26;
  NSObject *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(unsigned __int8 *)(v5 + 737);
        if (*(_QWORD *)(v5 + 184))
          v15 = "on";
        else
          v15 = "off";
        LODWORD(v29) = 67109634;
        HIDWORD(v29) = v14;
        LOWORD(v30) = 1024;
        *(_DWORD *)((char *)&v30 + 2) = a2;
        HIWORD(v30) = 2080;
        v31 = v15;
        _os_log_debug_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEBUG, "#D Cached State: %d, event: %d, Camera-Off-Timer: %s", (uint8_t *)&v29, 0x18u);
        v12 = *(unsigned __int8 *)(v5 + 737);
        v13 = *(_QWORD *)(v5 + 184);
        if (v12 == a2)
        {
LABEL_11:
          if (!v13)
            return;
          goto LABEL_18;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(v5 + 737);
        v13 = *(_QWORD *)(v5 + 184);
        if (v12 == a2)
          goto LABEL_11;
      }
      if (v13)
      {
LABEL_18:
        *(_BYTE *)(v5 + 737) = a2;
        return;
      }
      if (a2 || v12 != 1)
      {
        *(_BYTE *)(v5 + 737) = a2;
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v5);
      }
      else
      {
        *(_BYTE *)(v5 + 737) = 0;
        v16 = *(std::__shared_weak_count **)(v5 + 80);
        if (!v16 || (v17 = *(_QWORD *)(v5 + 72), (v18 = std::__shared_weak_count::lock(v16)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v19 = v18;
        p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
        do
          v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        v22 = (unint64_t *)&v18->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v19);
        }
        v24 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(v5 + 88));
        v25 = *(NSObject **)(v5 + 184);
        *(_QWORD *)(v5 + 184) = v24;
        if (v25)
        {
          dispatch_release(v25);
          v24 = *(NSObject **)(v5 + 184);
        }
        v26 = dispatch_time(0, 300000000);
        dispatch_source_set_timer(v24, v26, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
        v27 = *(NSObject **)(v5 + 184);
        v29 = MEMORY[0x1E0C809B0];
        v30 = 1174405120;
        v31 = (const char *)___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit30TelephonyIOKitFrontCameraStateEEEvRT_S6__block_invoke;
        v32 = &__block_descriptor_tmp_67_0;
        v33 = v5;
        v34 = v17;
        v35 = v19;
        do
          v28 = __ldxr(p_shared_weak_owners);
        while (__stxr(v28 + 1, p_shared_weak_owners));
        dispatch_source_set_event_handler(v27, &v29);
        dispatch_activate(*(dispatch_object_t *)(v5 + 184));
        if (v35)
          std::__shared_weak_count::__release_weak(v35);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_52(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        antenna::Service::Internal::handDetectCallback(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_54(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int isProxCovered;
  int v12;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        isProxCovered = ctu::iokit::IOHIDController::isProxCovered(*(ctu::iokit::IOHIDController **)(v5 + 496));
        if (*(unsigned __int8 *)(v5 + 560) != isProxCovered)
        {
          v12 = isProxCovered;
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            v14[0] = 67109376;
            v14[1] = v12;
            v15 = 1024;
            v16 = a2;
            _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Prox Covered State: %d mask value: 0x%x", (uint8_t *)v14, 0xEu);
          }
          *(_BYTE *)(v5 + 560) = v12;
          antenna::Service::Internal::checkStartHandDetection_sync((antenna::Service::Internal *)v5);
        }
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_56(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && *(unsigned __int8 *)(v5 + 561) != a2)
      {
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = "OPENED";
          if (a2)
            v12 = "CLOSED";
          v13 = 136315138;
          v14 = v12;
          _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&v13, 0xCu);
        }
        *(_BYTE *)(v5 + 561) = a2;
        antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v5);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_59(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  std::__shared_weak_count *v6;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  _DWORD *v19;
  unint64_t *p_shared_owners;
  NSObject *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    v11 = a1[4];
    v12 = std::__shared_weak_count::lock(v6);
    if (v12)
    {
      v13 = v12;
      v14 = (_QWORD *)a1[5];
      if (v14)
      {
        v15 = (std::__shared_weak_count *)v14[10];
        if (!v15 || (v16 = v14[9], (v17 = std::__shared_weak_count::lock(v15)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v18 = v17;
        v19 = operator new(0x18uLL);
        *(_QWORD *)v19 = v11;
        v19[2] = a2;
        v19[3] = a3;
        v19[4] = a4;
        v19[5] = a5;
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        v21 = v14[11];
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = operator new(0x18uLL);
        *v23 = v19;
        v23[1] = v16;
        v23[2] = v18;
        dispatch_async_f(v21, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15execute_wrappedIZZZNS5_4initEvENK3__0clEvEUb9_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISA_NSF_14default_deleteISA_EEEEENUlPvE_8__invokeESK_);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v25 = (unint64_t *)&v13->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

uint64_t std::shared_ptr<PPMManager>::operator=[abi:ne180100](uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

void ___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit25TelephonyIOKitFaceIDStateEEEvRT_S6__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (NSObject **)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = v3[5];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v11 = 0;
          _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, "#D Camera state debounce timer is expired, sending last state to baseband", v11, 2u);
        }
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v3);
        dispatch_source_cancel(v3[23]);
        v10 = v3[23];
        v3[23] = 0;
        if (v10)
          dispatch_release(v10);
      }
    }
  }
}

void ___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit30TelephonyIOKitFrontCameraStateEEEvRT_S6__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (NSObject **)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = v3[5];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v11 = 0;
          _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, "#D Camera state debounce timer is expired, sending last state to baseband", v11, 2u);
        }
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v3);
        dispatch_source_cancel(v3[23]);
        v10 = v3[23];
        v3[23] = 0;
        if (v10)
          dispatch_release(v10);
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15execute_wrappedIZZZNS5_4initEvENK3__0clEvEUb9_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISA_NSF_14default_deleteISA_EEEEENUlPvE_8__invokeESK_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  void *v12;
  const char *v13;
  int v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD __dst[2];
  int64_t v20;

  v2 = *a1;
  v3 = **a1;
  v4 = (const void *)*MEMORY[0x1E0CFC120];
  v5 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst[1] = v6;
    v20 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v20) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, v6);
  *((_BYTE *)v7 + v6) = 0;
  if (*(char *)(v3 + 719) >= 0)
    v10 = (const char *)(v3 + 696);
  else
    v10 = *(const char **)(v3 + 696);
  v11 = SHIBYTE(v20);
  v12 = (void *)__dst[0];
  if (v20 >= 0)
    v13 = (const char *)__dst;
  else
    v13 = (const char *)__dst[0];
  v14 = strcasecmp(v10, v13);
  v15 = v14;
  if (v11 < 0)
  {
    operator delete(v12);
    if (!v15)
    {
LABEL_19:
      *(_OWORD *)(v3 + 720) = *(_OWORD *)(v2 + 1);
      antenna::Service::Internal::sendWorkoutInfo_sync((antenna::Service::Internal *)v3);
    }
  }
  else if (!v14)
  {
    goto LABEL_19;
  }
  operator delete(v2);
  v16 = (std::__shared_weak_count *)a1[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(a1);
}

void sub_1BF4BFC2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = off_1E7909B18;
  result = *(void **)(a1 + 8);
  if (result)
    result = _Block_copy(result);
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::destroy(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF546A2ALL)
    return a1 + 8;
  if (((v3 & 0x80000001BF546A2ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF546A2ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF546A2ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::target_type()
{
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7909BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7909BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler::~MakeSharedEnabler(antenna::AntennaCommandDriverDelegateInterface *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E7909C50;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(_QWORD *)this = off_1E7909C50;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
  operator delete(v3);
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::signalTransmitState(uint64_t a1, int a2, int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD **)(a1 + 8);
      if (v9)
        antenna::Service::Internal::transmitStateHandler(v9, a2, a3);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::~AntennaCommandDriverDelegate(antenna::AntennaCommandDriverDelegateInterface *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E7909C50;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(_QWORD *)this = off_1E7909C50;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
  operator delete(v3);
}

void std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t ***v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (a1[2])
  {
    v6 = (uint64_t **)*a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (_QWORD *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((_DWORD *)v13 + 7);
          *((_DWORD *)v12 + 7) = v14;
          *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
          v15 = *v8;
          v16 = a1 + 1;
          v17 = a1 + 1;
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = (uint64_t *)**a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (_QWORD *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (_QWORD *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (_QWORD *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (_QWORD *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (_QWORD *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = v15;
            if (v14 >= *((_DWORD *)v15 + 7))
              break;
            v15 = (uint64_t *)*v15;
            v17 = (uint64_t **)v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = (uint64_t **)(v16 + 1);
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = (uint64_t *)**a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v9);
      if (v10)
      {
        for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
          v10 = i;
        std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t ***)(a1 + 1);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x28uLL);
      v26 = v25;
      v27 = *(_QWORD *)((char *)v4 + 28);
      *(uint64_t *)((char *)v25 + 28) = v27;
      v28 = *v24;
      v29 = a1 + 1;
      v30 = a1 + 1;
      if (*v24)
        break;
LABEL_50:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = (uint64_t *)**a1;
      if (v31)
        goto LABEL_51;
LABEL_52:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
      if (v33 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v29 = v28;
        if (*((_DWORD *)v28 + 7) <= v27)
          break;
        v28 = (uint64_t **)*v28;
        v30 = v29;
        if (!*v29)
          goto LABEL_50;
      }
      v28 = (uint64_t **)v28[1];
    }
    while (v28);
    v30 = v29 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    v31 = (uint64_t *)**a1;
    if (!v31)
      goto LABEL_52;
LABEL_51:
    *a1 = v31;
    v26 = *v30;
    goto LABEL_52;
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::stopService(void)::$_0>(antenna::Service::Internal::stopService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::stopService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::stopService(void)::$_0>>)::{lambda(void *)#1}::__invoke(antenna::Service::Internal ***a1)
{
  antenna::Service::Internal **v2;
  antenna::Service::Internal *v3;
  HKWorkoutManager *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync(v3, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync(v3);
  v4 = (HKWorkoutManager *)*((_QWORD *)v3 + 84);
  if (v4)
    HKWorkoutManager::stop(v4);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_7:
    operator delete(a1);
  }
}

void sub_1BF4C0318(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::startService(void)::$_0>(antenna::Service::Internal::startService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::startService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::startService(void)::$_0>>)::{lambda(void *)#1}::__invoke(antenna::Service::Internal ***a1)
{
  antenna::Service::Internal **v2;
  antenna::Service::Internal *v3;
  HKWorkoutManager *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  antenna::Service::Internal::setupTxPower_sync(v3);
  v4 = (HKWorkoutManager *)*((_QWORD *)v3 + 84);
  if (v4)
    HKWorkoutManager::start(v4);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_7:
    operator delete(a1);
  }
}

void sub_1BF4C0408(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::enterLowPower(void)::$_0>(antenna::Service::Internal::enterLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::enterLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::enterLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint8_t v8[16];

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Enter Low Power ! ", v8, 2u);
  }
  *(_BYTE *)(v3 + 168) = 1;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync((antenna::Service::Internal *)v3, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync((antenna::Service::Internal *)v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF4C0538(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::exitLowPower(void)::$_0>(antenna::Service::Internal::exitLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::exitLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::exitLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint8_t v8[16];

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D EXIT Low Power ! ", v8, 2u);
  }
  *(_BYTE *)(v3 + 168) = 0;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync((antenna::Service::Internal *)v3, 1);
  antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF4C0660(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::dict)>::operator()<xpc::dict const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke(int **a1)
{
  int *v2;
  antenna::Service::Internal *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  const void *v8;
  void *v9;
  NSObject *v10;
  xpc_object_t value;
  const char *v12;
  xpc_object_t v13;
  const char *v14;
  int v15;
  size_t v16;
  void **v17;
  void **v18;
  NSObject *v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::ios_base *v26;
  uint64_t v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  xpc_object_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  void *__dst[2];
  int64_t v48;
  xpc_object_t block;
  __int128 v50;
  void *aBlock[2];
  xpc_object_t object[2];
  __int128 v53;
  void *__p[2];
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67[3];
  void *v68[3];
  unint64_t v69;
  uint8_t buf[4];
  void **v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(antenna::Service::Internal **)*a1;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  antenna::Service::Internal::createTransmitStateDict_sync(v2[2], v2[3], (xpc_object_t *)&v69);
  v4 = (xpc_object_t)v69;
  if (MEMORY[0x1C3B8A86C](v69) == MEMORY[0x1E0C812F8])
  {
    if (v4)
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
    v6 = (void *)*((_QWORD *)v3 + 28);
    *((_QWORD *)v3 + 28) = v5;
    xpc_release(v6);
    if (v4)
    {
      xpc_retain(v4);
      v7 = v4;
      v8 = (const void *)*((_QWORD *)v3 + 13);
      if (v8)
      {
LABEL_7:
        v9 = _Block_copy(v8);
        goto LABEL_10;
      }
    }
    else
    {
      v7 = xpc_null_create();
      v8 = (const void *)*((_QWORD *)v3 + 13);
      if (v8)
        goto LABEL_7;
    }
    v9 = 0;
LABEL_10:
    v10 = *((_QWORD *)v3 + 14);
    block = (xpc_object_t)MEMORY[0x1E0C809B0];
    *(_QWORD *)&v50 = 1174405120;
    *((_QWORD *)&v50 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
    aBlock[0] = &__block_descriptor_tmp_68_2;
    if (v9)
    {
      aBlock[1] = _Block_copy(v9);
      object[0] = v7;
      if (v7)
      {
LABEL_12:
        xpc_retain(v7);
        goto LABEL_15;
      }
    }
    else
    {
      aBlock[1] = 0;
      object[0] = v7;
      if (v7)
        goto LABEL_12;
    }
    object[0] = xpc_null_create();
LABEL_15:
    dispatch_async(v10, &block);
    xpc_release(object[0]);
    object[0] = 0;
    if (aBlock[1])
      _Block_release(aBlock[1]);
    if (v9)
      _Block_release(v9);
    xpc_release(v7);
    memset(v68, 170, sizeof(v68));
    value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFBBD8]);
    block = value;
    if (value)
      xpc_retain(value);
    else
      block = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&block, (const object *)"", v12);
    xpc_release(block);
    memset(v67, 170, sizeof(v67));
    v13 = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFBD88]);
    block = v13;
    if (v13)
      xpc_retain(v13);
    else
      block = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&block, (const object *)"", v14);
    xpc_release(block);
    v15 = SHIBYTE(v68[2]);
    if (SHIBYTE(v68[2]) >= 0)
      v16 = HIBYTE(v68[2]);
    else
      v16 = (size_t)v68[1];
    if (v16 == strlen((const char *)*MEMORY[0x1E0CFBF28])
      && (SHIBYTE(v68[2]) >= 0 ? (v17 = v68) : (v17 = (void **)v68[0]),
          !memcmp(v17, (const void *)*MEMORY[0x1E0CFBF28], v16)))
    {
      v20 = *((_QWORD *)v3 + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(block) = 0;
        _os_log_debug_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEBUG, "#D Tx Started", (uint8_t *)&block, 2u);
      }
      antenna::Service::Internal::startTxPowerCapping_sync(v3);
    }
    else if (v16 == strlen((const char *)*MEMORY[0x1E0CFBC28]))
    {
      v18 = v15 >= 0 ? v68 : (void **)v68[0];
      if (!memcmp(v18, (const void *)*MEMORY[0x1E0CFBC28], v16))
      {
        v19 = *((_QWORD *)v3 + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(block) = 0;
          _os_log_debug_impl(&dword_1BF335000, v19, OS_LOG_TYPE_DEBUG, "#D Tx Stopped", (uint8_t *)&block, 2u);
        }
        antenna::Service::Internal::stopTxPowerCapping_sync(v3);
      }
    }
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56 = 0xAAAAAAAAAAAAAAAALL;
    v66 = v21;
    v65 = v21;
    v64 = v21;
    v63 = v21;
    v62 = v21;
    v61 = v21;
    v60 = v21;
    v59 = v21;
    v58 = v21;
    v55 = v21;
    *(_OWORD *)__p = v21;
    v53 = v21;
    *(_OWORD *)object = v21;
    *(_OWORD *)aBlock = v21;
    v50 = v21;
    v22 = MEMORY[0x1E0DE4FE0];
    v23 = MEMORY[0x1E0DE4FE0] + 64;
    v57 = MEMORY[0x1E0DE4FE0] + 64;
    v24 = MEMORY[0x1E0DE4F60];
    v25 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
    block = *(xpc_object_t *)(MEMORY[0x1E0DE4F60] + 8);
    *(xpc_object_t *)((char *)&block + *((_QWORD *)block - 3)) = v25;
    v26 = (std::ios_base *)((char *)&block + *((_QWORD *)block - 3));
    std::ios_base::init(v26, &v50);
    v26[1].__vftable = 0;
    v26[1].__fmtflags_ = -1;
    block = (xpc_object_t)(v22 + 24);
    v57 = v23;
    std::streambuf::basic_streambuf();
    v27 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v50 = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v55 = 0u;
    LODWORD(v56) = 16;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&block, (uint64_t)"Transmit State: ", 16);
    if (SHIBYTE(v68[2]) >= 0)
      v29 = v68;
    else
      v29 = (void **)v68[0];
    if (SHIBYTE(v68[2]) >= 0)
      v30 = HIBYTE(v68[2]);
    else
      v30 = (uint64_t)v68[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    v31 = (void *)HIBYTE(v67[2]);
    if (SHIBYTE(v67[2]) < 0)
      v31 = v67[1];
    if (v31)
    {
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&block, (uint64_t)" (", 2);
      if (SHIBYTE(v67[2]) >= 0)
        v33 = v67;
      else
        v33 = (void **)v67[0];
      if (SHIBYTE(v67[2]) >= 0)
        v34 = HIBYTE(v67[2]);
      else
        v34 = (uint64_t)v67[1];
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)")", 1);
    }
    v36 = *((_QWORD *)v3 + 5);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
LABEL_79:
      block = *(xpc_object_t *)v24;
      *(xpc_object_t *)((char *)&block + *((_QWORD *)block - 3)) = *(xpc_object_t *)(v24 + 24);
      *(_QWORD *)&v50 = v27 + 16;
      if (SBYTE7(v55) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B89E4C](&v57);
      if (SHIBYTE(v67[2]) < 0)
      {
        operator delete(v67[0]);
        if ((SHIBYTE(v68[2]) & 0x80000000) == 0)
          goto LABEL_83;
      }
      else if ((SHIBYTE(v68[2]) & 0x80000000) == 0)
      {
LABEL_83:
        v4 = (xpc_object_t)v69;
        goto LABEL_84;
      }
      operator delete(v68[0]);
      goto LABEL_83;
    }
    if ((v56 & 0x10) != 0)
    {
      v39 = *((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1) < (unint64_t)v53)
      {
        *((_QWORD *)&v55 + 1) = v53;
        v39 = v53;
      }
      v40 = object[1];
      v37 = v39 - (unint64_t)object[1];
      if (v39 - (unint64_t)object[1] >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_93;
    }
    else
    {
      if ((v56 & 8) == 0)
      {
        v37 = 0;
        HIBYTE(v48) = 0;
        v38 = __dst;
LABEL_75:
        *((_BYTE *)v38 + v37) = 0;
        v43 = __dst;
        if (v48 < 0)
          v43 = (void **)__dst[0];
        *(_DWORD *)buf = 136315138;
        v71 = v43;
        _os_log_impl(&dword_1BF335000, v36, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
        if (SHIBYTE(v48) < 0)
          operator delete(__dst[0]);
        goto LABEL_79;
      }
      v40 = aBlock[0];
      v37 = (char *)object[0] - (char *)aBlock[0];
      if ((xpc_object_t)((char *)object[0] - (char *)aBlock[0]) >= (xpc_object_t)0x7FFFFFFFFFFFFFF8)
LABEL_93:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v37 >= 0x17)
    {
      v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17)
        v41 = v37 | 7;
      v42 = v41 + 1;
      v38 = (void **)operator new(v41 + 1);
      __dst[1] = (void *)v37;
      v48 = v42 | 0x8000000000000000;
      __dst[0] = v38;
    }
    else
    {
      HIBYTE(v48) = v37;
      v38 = __dst;
      if (!v37)
        goto LABEL_74;
    }
    memmove(v38, v40, v37);
LABEL_74:
    v27 = MEMORY[0x1E0DE4FB8];
    goto LABEL_75;
  }
LABEL_84:
  xpc_release(v4);
  operator delete(v2);
  v44 = (std::__shared_weak_count *)a1[2];
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  operator delete(a1);
}

void sub_1BF4C0DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (*(char *)(v30 - 161) < 0)
    operator delete(*(void **)(v30 - 184));
  if (*(char *)(v30 - 137) < 0)
    operator delete(*(void **)(v30 - 160));
  xpc_release(v29);
  operator delete(v28);
  v32 = (std::__shared_weak_count *)v27[2];
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>(antenna::Service::Internal::setAudioState(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::setAudioState(xpc::dict)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  xpc_object_t value;
  char v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  xpc_object_t v16;
  char v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  xpc_object_t v25;
  char v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t *v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t *v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  int v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  char v71;
  uint64_t *v72;
  uint64_t **v73;
  int v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t **v80;
  uint64_t *v81;
  int v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  void *v86;
  xpc_object_t v87;
  void *v88;
  xpc_object_t v89;
  size_t count;
  size_t v91;
  const char *v92;
  const object *v93;
  xpc_object_t v94;
  const char *v95;
  xpc_object_t v96;
  xpc_object_t v97;
  char v98;
  xpc_object_t v99;
  size_t v100;
  xpc_object_t v101;
  const object *v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t **v105;
  int v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t **v113;
  int v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t **v119;
  uint64_t **v120;
  int v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  NSObject *v125;
  int v126;
  uint64_t *v127;
  uint64_t **v128;
  uint64_t **v129;
  int v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t **v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t *v139;
  NSObject *v140;
  Capabilities *v141;
  void *v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  unint64_t *p_shared_owners;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  int v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t **v160;
  xpc_object_t *v161;
  uint64_t v162;
  uint64_t **v163;
  xpc_object_t v164;
  xpc_object_t v165;
  xpc_object_t xdict;
  xpc_object_t object[4];

  v1 = a1;
  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v161 = (xpc_object_t *)*a1;
  if (!*(_DWORD *)(v3 + 328))
  {
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v4 = v2 + 1;
    v5 = (void *)*MEMORY[0x1E0CFB140];
    object[0] = v4;
    object[1] = v5;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
    value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB8C0]);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
    v8 = (uint64_t **)(v3 + 288);
    v9 = *(uint64_t **)(v3 + 288);
    v10 = (uint64_t **)(v3 + 288);
    v11 = (uint64_t **)(v3 + 288);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v12 = *((_DWORD *)v9 + 7);
          if (v12 < 1)
            break;
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_12;
        }
        if ((v12 & 0x80000000) == 0)
          break;
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          goto LABEL_12;
        }
      }
      v13 = v11;
    }
    else
    {
LABEL_12:
      v13 = operator new(0x28uLL);
      v13[7] = 0;
      *((_BYTE *)v13 + 32) = 0;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = v11;
      *v10 = (uint64_t *)v13;
      v14 = **(_QWORD **)(v3 + 280);
      v15 = (uint64_t *)v13;
      if (v14)
      {
        *(_QWORD *)(v3 + 280) = v14;
        v15 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v15);
      ++*(_QWORD *)(v3 + 296);
    }
    *((_BYTE *)v13 + 32) = v7;
    xpc_release(object[0]);
    v16 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB528]);
    object[0] = v16;
    if (v16)
      xpc_retain(v16);
    else
      object[0] = xpc_null_create();
    v17 = xpc::dyn_cast_or_default((xpc *)object, 0);
    v18 = *v8;
    v19 = (uint64_t **)(v3 + 288);
    v20 = (uint64_t **)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v18;
          v21 = *((_DWORD *)v18 + 7);
          if (v21 < 2)
            break;
          v18 = *v20;
          v19 = v20;
          if (!*v20)
            goto LABEL_25;
        }
        if (v21 == 1)
          break;
        v18 = v20[1];
        if (!v18)
        {
          v19 = v20 + 1;
          goto LABEL_25;
        }
      }
      v22 = v20;
    }
    else
    {
LABEL_25:
      v22 = operator new(0x28uLL);
      v22[7] = 1;
      *((_BYTE *)v22 + 32) = 0;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v20;
      *v19 = (uint64_t *)v22;
      v23 = **(_QWORD **)(v3 + 280);
      v24 = (uint64_t *)v22;
      if (v23)
      {
        *(_QWORD *)(v3 + 280) = v23;
        v24 = *v19;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v24);
      ++*(_QWORD *)(v3 + 296);
    }
    *((_BYTE *)v22 + 32) = v17;
    xpc_release(object[0]);
    v25 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB768]);
    object[0] = v25;
    if (v25)
      xpc_retain(v25);
    else
      object[0] = xpc_null_create();
    v26 = xpc::dyn_cast_or_default((xpc *)object, 0);
    v27 = *v8;
    v28 = (uint64_t **)(v3 + 288);
    v29 = (uint64_t **)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v29 = (uint64_t **)v27;
          v30 = *((_DWORD *)v27 + 7);
          if (v30 < 4)
            break;
          v27 = *v29;
          v28 = v29;
          if (!*v29)
            goto LABEL_39;
        }
        if (v30 == 3)
          break;
        v27 = v29[1];
        if (!v27)
        {
          v28 = v29 + 1;
          goto LABEL_39;
        }
      }
      v31 = v29;
    }
    else
    {
LABEL_39:
      v31 = operator new(0x28uLL);
      v31[7] = 3;
      *((_BYTE *)v31 + 32) = 0;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = v29;
      *v28 = (uint64_t *)v31;
      v32 = **(_QWORD **)(v3 + 280);
      v33 = (uint64_t *)v31;
      if (v32)
      {
        *(_QWORD *)(v3 + 280) = v32;
        v33 = *v28;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v33);
      ++*(_QWORD *)(v3 + 296);
    }
    *((_BYTE *)v31 + 32) = v26;
    xpc_release(object[0]);
    v34 = *v8;
    v35 = (uint64_t **)(v3 + 288);
    v36 = (uint64_t *)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v36 = v34;
          v37 = *((_DWORD *)v34 + 7);
          if (v37 < 1)
            break;
          v34 = (uint64_t *)*v36;
          v35 = (uint64_t **)v36;
          if (!*v36)
            goto LABEL_50;
        }
        if ((v37 & 0x80000000) == 0)
          break;
        v34 = (uint64_t *)v36[1];
        if (!v34)
        {
          v35 = (uint64_t **)(v36 + 1);
          goto LABEL_50;
        }
      }
      v41 = *((_BYTE *)v36 + 32);
      v42 = (uint64_t **)(v3 + 312);
      v43 = *(uint64_t **)(v3 + 312);
      v44 = (uint64_t **)(v3 + 312);
      v45 = (uint64_t *)(v3 + 312);
      if (v43)
        goto LABEL_58;
    }
    else
    {
LABEL_50:
      v38 = operator new(0x28uLL);
      v38[7] = 0;
      *((_BYTE *)v38 + 32) = 0;
      *(_QWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = 0;
      *((_QWORD *)v38 + 2) = v36;
      *v35 = (uint64_t *)v38;
      v39 = **(_QWORD **)(v3 + 280);
      v40 = (uint64_t *)v38;
      if (v39)
      {
        *(_QWORD *)(v3 + 280) = v39;
        v40 = *v35;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v40);
      ++*(_QWORD *)(v3 + 296);
      v41 = *((_BYTE *)v38 + 32);
      v42 = (uint64_t **)(v3 + 312);
      v43 = *(uint64_t **)(v3 + 312);
      v44 = (uint64_t **)(v3 + 312);
      v45 = (uint64_t *)(v3 + 312);
      if (v43)
      {
        while (1)
        {
LABEL_58:
          while (1)
          {
            v45 = v43;
            v46 = *((_DWORD *)v43 + 7);
            if (v46 < 1)
              break;
            v43 = (uint64_t *)*v45;
            v44 = (uint64_t **)v45;
            if (!*v45)
              goto LABEL_62;
          }
          if ((v46 & 0x80000000) == 0)
            break;
          v43 = (uint64_t *)v45[1];
          if (!v43)
          {
            v44 = (uint64_t **)(v45 + 1);
            goto LABEL_62;
          }
        }
        *((_BYTE *)v45 + 32) = v41;
        v50 = *v8;
        v51 = (uint64_t **)(v3 + 288);
        v52 = (uint64_t *)(v3 + 288);
        if (*v8)
          goto LABEL_69;
        goto LABEL_73;
      }
    }
LABEL_62:
    v47 = operator new(0x28uLL);
    v47[7] = 0;
    *((_BYTE *)v47 + 32) = 0;
    *(_QWORD *)v47 = 0;
    *((_QWORD *)v47 + 1) = 0;
    *((_QWORD *)v47 + 2) = v45;
    *v44 = (uint64_t *)v47;
    v48 = **(_QWORD **)(v3 + 304);
    v49 = (uint64_t *)v47;
    if (v48)
    {
      *(_QWORD *)(v3 + 304) = v48;
      v49 = *v44;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 312), v49);
    ++*(_QWORD *)(v3 + 320);
    *((_BYTE *)v47 + 32) = v41;
    v50 = *v8;
    v51 = (uint64_t **)(v3 + 288);
    v52 = (uint64_t *)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
LABEL_69:
        while (1)
        {
          v52 = v50;
          v53 = *((_DWORD *)v50 + 7);
          if (v53 < 2)
            break;
          v50 = (uint64_t *)*v52;
          v51 = (uint64_t **)v52;
          if (!*v52)
            goto LABEL_73;
        }
        if (v53 == 1)
          break;
        v50 = (uint64_t *)v52[1];
        if (!v50)
        {
          v51 = (uint64_t **)(v52 + 1);
          goto LABEL_73;
        }
      }
      v57 = *((_BYTE *)v52 + 32);
      v58 = *v42;
      v59 = v42;
      v60 = v42;
      if (*v42)
        goto LABEL_80;
      goto LABEL_84;
    }
LABEL_73:
    v54 = operator new(0x28uLL);
    v54[7] = 1;
    *((_BYTE *)v54 + 32) = 0;
    *(_QWORD *)v54 = 0;
    *((_QWORD *)v54 + 1) = 0;
    *((_QWORD *)v54 + 2) = v52;
    *v51 = (uint64_t *)v54;
    v55 = **(_QWORD **)(v3 + 280);
    v56 = (uint64_t *)v54;
    if (v55)
    {
      *(_QWORD *)(v3 + 280) = v55;
      v56 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v56);
    ++*(_QWORD *)(v3 + 296);
    v57 = *((_BYTE *)v54 + 32);
    v58 = *v42;
    v59 = v42;
    v60 = v42;
    if (*v42)
    {
      while (1)
      {
LABEL_80:
        while (1)
        {
          v60 = (uint64_t **)v58;
          v61 = *((_DWORD *)v58 + 7);
          if (v61 < 2)
            break;
          v58 = *v60;
          v59 = v60;
          if (!*v60)
            goto LABEL_84;
        }
        if (v61 == 1)
          break;
        v58 = v60[1];
        if (!v58)
        {
          v59 = v60 + 1;
          goto LABEL_84;
        }
      }
      *((_BYTE *)v60 + 32) = v57;
      v65 = *v8;
      v66 = (uint64_t *)(v3 + 288);
      if (*v8)
        goto LABEL_91;
      goto LABEL_95;
    }
LABEL_84:
    v62 = operator new(0x28uLL);
    v62[7] = 1;
    *((_BYTE *)v62 + 32) = 0;
    *(_QWORD *)v62 = 0;
    *((_QWORD *)v62 + 1) = 0;
    *((_QWORD *)v62 + 2) = v60;
    *v59 = (uint64_t *)v62;
    v63 = **(_QWORD **)(v3 + 304);
    v64 = (uint64_t *)v62;
    if (v63)
    {
      *(_QWORD *)(v3 + 304) = v63;
      v64 = *v59;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 312), v64);
    ++*(_QWORD *)(v3 + 320);
    *((_BYTE *)v62 + 32) = v57;
    v65 = *v8;
    v66 = (uint64_t *)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
LABEL_91:
        while (1)
        {
          v66 = v65;
          v67 = *((_DWORD *)v65 + 7);
          if (v67 < 4)
            break;
          v65 = (uint64_t *)*v66;
          v8 = (uint64_t **)v66;
          if (!*v66)
            goto LABEL_95;
        }
        if (v67 == 3)
          break;
        v65 = (uint64_t *)v66[1];
        if (!v65)
        {
          v8 = (uint64_t **)(v66 + 1);
          goto LABEL_95;
        }
      }
      v71 = *((_BYTE *)v66 + 32);
      v72 = *v42;
      v73 = v42;
      if (*v42)
        goto LABEL_102;
      goto LABEL_106;
    }
LABEL_95:
    v68 = operator new(0x28uLL);
    v68[7] = 3;
    *((_BYTE *)v68 + 32) = 0;
    *(_QWORD *)v68 = 0;
    *((_QWORD *)v68 + 1) = 0;
    *((_QWORD *)v68 + 2) = v66;
    *v8 = (uint64_t *)v68;
    v69 = **(_QWORD **)(v3 + 280);
    v70 = (uint64_t *)v68;
    if (v69)
    {
      *(_QWORD *)(v3 + 280) = v69;
      v70 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v70);
    ++*(_QWORD *)(v3 + 296);
    v71 = *((_BYTE *)v68 + 32);
    v72 = *v42;
    v73 = v42;
    if (*v42)
    {
      while (1)
      {
LABEL_102:
        while (1)
        {
          v73 = (uint64_t **)v72;
          v74 = *((_DWORD *)v72 + 7);
          if (v74 < 4)
            break;
          v72 = *v73;
          v42 = v73;
          if (!*v73)
            goto LABEL_106;
        }
        if (v74 == 3)
          break;
        v72 = v73[1];
        if (!v72)
        {
          v42 = v73 + 1;
          goto LABEL_106;
        }
      }
      v75 = v73;
      goto LABEL_110;
    }
LABEL_106:
    v75 = operator new(0x28uLL);
    v75[7] = 3;
    *((_BYTE *)v75 + 32) = 0;
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0;
    *((_QWORD *)v75 + 2) = v73;
    *v42 = (uint64_t *)v75;
    v76 = **(_QWORD **)(v3 + 304);
    v77 = (uint64_t *)v75;
    if (v76)
    {
      *(_QWORD *)(v3 + 304) = v76;
      v77 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 312), v77);
    ++*(_QWORD *)(v3 + 320);
LABEL_110:
    *((_BYTE *)v75 + 32) = v71;
    xpc_release(xdict);
  }
  v78 = (uint64_t **)(v3 + 288);
  v79 = *(uint64_t **)(v3 + 288);
  v80 = (uint64_t **)(v3 + 288);
  v81 = (uint64_t *)(v3 + 288);
  if (!v79)
  {
LABEL_118:
    v83 = operator new(0x28uLL);
    v83[7] = 2;
    *((_BYTE *)v83 + 32) = 0;
    *(_QWORD *)v83 = 0;
    *((_QWORD *)v83 + 1) = 0;
    *((_QWORD *)v83 + 2) = v81;
    *v80 = (uint64_t *)v83;
    v84 = **(_QWORD **)(v3 + 280);
    v85 = (uint64_t *)v83;
    if (v84)
    {
      *(_QWORD *)(v3 + 280) = v84;
      v85 = *v80;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v85);
    ++*(_QWORD *)(v3 + 296);
    *((_BYTE *)v83 + 32) = 0;
    if (!*(_BYTE *)(v3 + 160))
      goto LABEL_198;
LABEL_123:
    v86 = (void *)*MEMORY[0x1E0CFB648];
    if (!xpc_dictionary_get_value(v161[1], (const char *)*MEMORY[0x1E0CFB648]))
      goto LABEL_198;
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    object[0] = v161 + 1;
    object[1] = v86;
    xpc::dict::object_proxy::operator xpc::array((uint64_t)object, &xdict);
    v87 = xdict;
    if (xdict)
    {
      xpc_retain(xdict);
    }
    else
    {
      v87 = xpc_null_create();
      if (!v87)
      {
        v87 = xpc_null_create();
        v88 = 0;
LABEL_128:
        v162 = v3;
        xpc_release(v88);
        v89 = xdict;
        if (xdict)
          xpc_retain(xdict);
        else
          v89 = xpc_null_create();
        v160 = v1;
        if (MEMORY[0x1C3B8A86C](xdict) == MEMORY[0x1E0C812C8])
        {
          count = xpc_array_get_count(xdict);
          if (v89)
            goto LABEL_133;
        }
        else
        {
          count = 0;
          if (v89)
          {
LABEL_133:
            xpc_retain(v89);
            v164 = v89;
LABEL_136:
            v163 = v78;
            xpc_release(v89);
            if (count || v87 != v164)
            {
              v91 = 0;
              v92 = (const char *)*MEMORY[0x1E0CFB2B0];
              v93 = (const object *)"";
              while (1)
              {
                memset(object, 170, 24);
                v94 = xpc_array_get_value(v87, v91);
                v165 = v94;
                if (v94)
                  xpc_retain(v94);
                else
                  v165 = xpc_null_create();
                xpc::dyn_cast_or_default((xpc *)&v165, v93, v95);
                xpc_release(v165);
                v96 = (xpc_object_t)strlen(v92);
                v97 = v96;
                v98 = HIBYTE(object[2]);
                if (SHIBYTE(object[2]) < 0)
                {
                  if (v96 == (xpc_object_t)-1)
LABEL_253:
                    std::string::__throw_out_of_range[abi:ne180100]();
                  v99 = object[1];
                  if (object[1] >= v96)
                    v101 = v96;
                  else
                    v101 = object[1];
                  if (memcmp(object[0], v92, (size_t)v101))
                    goto LABEL_166;
                }
                else
                {
                  if (v96 == (xpc_object_t)-1)
                    goto LABEL_253;
                  v99 = (xpc_object_t)HIBYTE(object[2]);
                  if (HIBYTE(object[2]) >= (unint64_t)v96)
                    v100 = (size_t)v96;
                  else
                    v100 = HIBYTE(object[2]);
                  if (memcmp(object, v92, v100))
                    goto LABEL_166;
                }
                if (v99 == v97)
                {
                  v102 = v93;
                  v103 = v163;
                  while (1)
                  {
                    v104 = *v103;
                    v105 = v103;
                    if (!*v103)
                      break;
                    while (1)
                    {
                      v103 = (uint64_t **)v104;
                      v106 = *((_DWORD *)v104 + 7);
                      if (v106 >= 3)
                        break;
                      if (v106 == 2)
                      {
                        v107 = v103;
                        goto LABEL_165;
                      }
                      v104 = v103[1];
                      if (!v104)
                      {
                        v105 = v103 + 1;
                        goto LABEL_161;
                      }
                    }
                  }
LABEL_161:
                  v107 = operator new(0x28uLL);
                  v107[7] = 2;
                  *((_BYTE *)v107 + 32) = 0;
                  *(_QWORD *)v107 = 0;
                  *((_QWORD *)v107 + 1) = 0;
                  *((_QWORD *)v107 + 2) = v103;
                  *v105 = (uint64_t *)v107;
                  v108 = **(_QWORD **)(v162 + 280);
                  v109 = (uint64_t *)v107;
                  if (v108)
                  {
                    *(_QWORD *)(v162 + 280) = v108;
                    v109 = *v105;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v162 + 288), v109);
                  ++*(_QWORD *)(v162 + 296);
                  v98 = HIBYTE(object[2]);
LABEL_165:
                  *((_BYTE *)v107 + 32) = 1;
                  v93 = v102;
                }
LABEL_166:
                if (v98 < 0)
                {
                  operator delete(object[0]);
                  if (++v91 == count)
                    goto LABEL_170;
                }
                else if (++v91 == count)
                {
LABEL_170:
                  if (v87 == v164)
                    break;
                }
              }
            }
            xpc_release(v164);
            xpc_release(v87);
            v1 = v160;
            v3 = v162;
            v78 = v163;
            v110 = *(unsigned __int8 *)(v162 + 334);
            v111 = *(uint64_t **)(v162 + 288);
            v112 = v163;
            v113 = v163;
            if (v111)
            {
              while (1)
              {
                while (1)
                {
                  v113 = (uint64_t **)v111;
                  v114 = *((_DWORD *)v111 + 7);
                  if (v114 < 3)
                    break;
                  v111 = *v113;
                  v112 = v113;
                  if (!*v113)
                    goto LABEL_178;
                }
                if (v114 == 2)
                  break;
                v111 = v113[1];
                if (!v111)
                {
                  v112 = v113 + 1;
                  goto LABEL_178;
                }
              }
              if (v110 == *((unsigned __int8 *)v113 + 32))
                goto LABEL_197;
            }
            else
            {
LABEL_178:
              v115 = operator new(0x28uLL);
              v115[7] = 2;
              *((_BYTE *)v115 + 32) = 0;
              *(_QWORD *)v115 = 0;
              *((_QWORD *)v115 + 1) = 0;
              *((_QWORD *)v115 + 2) = v113;
              *v112 = (uint64_t *)v115;
              v116 = **(_QWORD **)(v162 + 280);
              v117 = (uint64_t *)v115;
              if (v116)
              {
                *(_QWORD *)(v162 + 280) = v116;
                v117 = *v112;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v162 + 288), v117);
              ++*(_QWORD *)(v162 + 296);
              if (v110 == *((unsigned __int8 *)v115 + 32))
              {
LABEL_197:
                xpc_release(xdict);
                goto LABEL_198;
              }
            }
            v118 = *v163;
            v119 = v163;
            v120 = v163;
            if (*v163)
            {
              while (1)
              {
                while (1)
                {
                  v120 = (uint64_t **)v118;
                  v121 = *((_DWORD *)v118 + 7);
                  if (v121 < 3)
                    break;
                  v118 = *v120;
                  v119 = v120;
                  if (!*v120)
                    goto LABEL_190;
                }
                if (v121 == 2)
                  break;
                v118 = v120[1];
                if (!v118)
                {
                  v119 = v120 + 1;
                  goto LABEL_190;
                }
              }
              v122 = v120;
            }
            else
            {
LABEL_190:
              v122 = operator new(0x28uLL);
              v122[7] = 2;
              *((_BYTE *)v122 + 32) = 0;
              *(_QWORD *)v122 = 0;
              *((_QWORD *)v122 + 1) = 0;
              *((_QWORD *)v122 + 2) = v120;
              *v119 = (uint64_t *)v122;
              v123 = **(_QWORD **)(v162 + 280);
              v124 = (uint64_t *)v122;
              if (v123)
              {
                *(_QWORD *)(v162 + 280) = v123;
                v124 = *v119;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v162 + 288), v124);
              ++*(_QWORD *)(v162 + 296);
            }
            *(_BYTE *)(v162 + 334) = *((_BYTE *)v122 + 32);
            antenna::Service::Internal::sendAudioAccessory_sync((antenna::Service::Internal *)v162);
            v125 = *(NSObject **)(v162 + 40);
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
            {
              v159 = *(unsigned __int8 *)(v162 + 334);
              LODWORD(object[0]) = 67109120;
              HIDWORD(object[0]) = v159;
              _os_log_debug_impl(&dword_1BF335000, v125, OS_LOG_TYPE_DEBUG, "#D Sent audio wired port to baseband as %d", (uint8_t *)object, 8u);
            }
            goto LABEL_197;
          }
        }
        v164 = xpc_null_create();
        goto LABEL_136;
      }
    }
    xpc_retain(v87);
    v88 = v87;
    goto LABEL_128;
  }
  while (1)
  {
    while (1)
    {
      v81 = v79;
      v82 = *((_DWORD *)v79 + 7);
      if (v82 < 3)
        break;
      v79 = (uint64_t *)*v81;
      v80 = (uint64_t **)v81;
      if (!*v81)
        goto LABEL_118;
    }
    if (v82 == 2)
      break;
    v79 = (uint64_t *)v81[1];
    if (!v79)
    {
      v80 = (uint64_t **)(v81 + 1);
      goto LABEL_118;
    }
  }
  *((_BYTE *)v81 + 32) = 0;
  if (*(_BYTE *)(v3 + 160))
    goto LABEL_123;
LABEL_198:
  if (!*(_BYTE *)(v3 + 161))
    goto LABEL_224;
  v126 = *(unsigned __int8 *)(v3 + 335);
  v127 = *(uint64_t **)(v3 + 288);
  v128 = v78;
  v129 = v78;
  if (!v127)
  {
LABEL_206:
    v131 = operator new(0x28uLL);
    v131[7] = 3;
    *((_BYTE *)v131 + 32) = 0;
    *(_QWORD *)v131 = 0;
    *((_QWORD *)v131 + 1) = 0;
    *((_QWORD *)v131 + 2) = v129;
    *v128 = (uint64_t *)v131;
    v132 = **(_QWORD **)(v3 + 280);
    v133 = (uint64_t *)v131;
    if (v132)
    {
      *(_QWORD *)(v3 + 280) = v132;
      v133 = *v128;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v133);
    ++*(_QWORD *)(v3 + 296);
    if (v126 == *((unsigned __int8 *)v131 + 32))
      goto LABEL_224;
    goto LABEL_211;
  }
  while (1)
  {
    while (1)
    {
      v129 = (uint64_t **)v127;
      v130 = *((_DWORD *)v127 + 7);
      if (v130 < 4)
        break;
      v127 = *v129;
      v128 = v129;
      if (!*v129)
        goto LABEL_206;
    }
    if (v130 == 3)
      break;
    v127 = v129[1];
    if (!v127)
    {
      v128 = v129 + 1;
      goto LABEL_206;
    }
  }
  if (v126 != *((unsigned __int8 *)v129 + 32))
  {
LABEL_211:
    v134 = *v78;
    v135 = v78;
    if (*v78)
    {
      while (1)
      {
        while (1)
        {
          v135 = (uint64_t **)v134;
          v136 = *((_DWORD *)v134 + 7);
          if (v136 < 4)
            break;
          v134 = *v135;
          v78 = v135;
          if (!*v135)
            goto LABEL_218;
        }
        if (v136 == 3)
          break;
        v134 = v135[1];
        if (!v134)
        {
          v78 = v135 + 1;
          goto LABEL_218;
        }
      }
      v137 = v135;
    }
    else
    {
LABEL_218:
      v137 = operator new(0x28uLL);
      v137[7] = 3;
      *((_BYTE *)v137 + 32) = 0;
      *(_QWORD *)v137 = 0;
      *((_QWORD *)v137 + 1) = 0;
      *((_QWORD *)v137 + 2) = v135;
      *v78 = (uint64_t *)v137;
      v138 = **(_QWORD **)(v3 + 280);
      v139 = (uint64_t *)v137;
      if (v138)
      {
        *(_QWORD *)(v3 + 280) = v138;
        v139 = *v78;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v139);
      ++*(_QWORD *)(v3 + 296);
    }
    *(_BYTE *)(v3 + 335) = *((_BYTE *)v137 + 32);
    antenna::Service::Internal::sendAudioSpeaker((antenna::Service::Internal *)v3);
    v140 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
    {
      v158 = *(unsigned __int8 *)(v3 + 335);
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v158;
      _os_log_debug_impl(&dword_1BF335000, v140, OS_LOG_TYPE_DEBUG, "#D Sent audio speaker message to baseband as %d", (uint8_t *)object, 8u);
    }
  }
LABEL_224:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v141 = (Capabilities *)qword_1ED70FAA0;
  if (!qword_1ED70FAA0)
  {
    v142 = operator new(1uLL);
    v143 = operator new(0x20uLL);
    *v143 = off_1E7903F88;
    v143[1] = 0;
    v143[2] = 0;
    v143[3] = v142;
    v144 = (std::__shared_weak_count *)off_1ED70FAA8;
    qword_1ED70FAA0 = (uint64_t)v142;
    off_1ED70FAA8 = v143;
    if (v144)
    {
      p_shared_owners = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(p_shared_owners);
      while (__stlxr(v146 - 1, p_shared_owners));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v141 = (Capabilities *)qword_1ED70FAA0;
  }
  v147 = (std::__shared_weak_count *)off_1ED70FAA8;
  if (off_1ED70FAA8)
  {
    v148 = (unint64_t *)((char *)off_1ED70FAA8 + 8);
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported(v141))
  {
    v150 = *(unsigned __int8 *)(v3 + 216);
    if (v147)
    {
      v151 = (unint64_t *)&v147->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
        if (!v150)
          goto LABEL_247;
        goto LABEL_240;
      }
    }
    if (v150)
LABEL_240:
      antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)v3);
  }
  else if (v147)
  {
    v153 = (unint64_t *)&v147->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
LABEL_247:
  xpc_release(v161[1]);
  operator delete(v161);
  v155 = (std::__shared_weak_count *)v1[2];
  if (v155)
  {
    v156 = (unint64_t *)&v155->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  operator delete(v1);
}

void sub_1BF4C1F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, xpc_object_t *__p, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t a15, xpc_object_t object, xpc_object_t a17)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  xpc_release(object);
  xpc_release(__p[1]);
  operator delete(__p);
  v18 = (std::__shared_weak_count *)a10[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1BF4C2154(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>(antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v8 = *((_DWORD *)v2 + 2);
    v9[0] = 67109120;
    v9[1] = v8;
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Hand Detection State: %d", (uint8_t *)v9, 8u);
  }
  *(_DWORD *)(v3 + 528) = *((_DWORD *)v2 + 2);
  antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF4C2274(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>(antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(uint64_t **)a1;
  antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0::operator()(*(uint64_t **)a1);
  if (v2)
  {
    xpc_release((xpc_object_t)v2[1]);
    operator delete(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_7:
    operator delete((void *)a1);
  }
}

void sub_1BF4C2360(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  xpc_object_t *v3;
  xpc_object_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = v2;
  if (v3)
  {
    v5 = v3;
    xpc_release(v3[1]);
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;
  xpc_object_t *v5;
  void *v6;
  xpc_object_t value;
  const char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string *p_buf;
  std::string::size_type size;
  size_t v14;
  const void *v16;
  size_t v17;
  size_t v18;
  std::string::size_type v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  const char *v23;
  xpc_object_t v24;
  const void *v25;
  size_t v26;
  size_t v27;
  std::string::size_type v28;
  size_t v29;
  NSObject *v30;
  const char *v31;
  size_t v32;
  uint64_t v33;
  const void *v34;
  size_t v35;
  size_t v36;
  std::string::size_type v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  std::string::size_type v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  size_t v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  size_t v52;
  uint64_t v53;
  xpc_object_t v54;
  const char *v55;
  size_t v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  size_t v60;
  xpc_object_t v61;
  size_t v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  const object *v66;
  void **v67;
  xpc_object_t v68;
  const char *v69;
  void **v70;
  size_t v71;
  NSObject *v72;
  size_t v73;
  std::string::size_type v74;
  std::string *v75;
  size_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint8_t *v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  xpc_object_t *v86;
  size_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  NSObject *v91;
  void *v92;
  const char *v93;
  const char *v94;
  void **v95;
  NSObject *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  const char *v101;
  size_t v102;
  const char *v103;
  size_t v104;
  size_t v105;
  capabilities::txpower *v106;
  int v107;
  void *v108;
  const char *v109;
  const char *v110;
  uint64_t v111;
  size_t v112;
  config::hw *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  void *v122;
  char *v123;
  const char *v124;
  void **v125;
  BOOL v126;
  NSObject *v127;
  std::string *v128;
  std::string *v129;
  uint8_t *v130;
  void *v131;
  char *v132;
  xpc_object_t v133;
  uint64_t v134[2];
  void *__p;
  char v136;
  xpc_object_t p_xdict;
  uint64_t v138;
  xpc_object_t xdict;
  xpc_object_t object[4];
  std::string buf;
  uint8_t v142[24];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(NSObject **)(*a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)(a1 + 1));
    v4 = (v142[23] & 0x80u) == 0 ? v142 : *(uint8_t **)v142;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Set Property: %s", (uint8_t *)&buf, 0xCu);
    if ((char)v142[23] < 0)
      operator delete(*(void **)v142);
  }
  memset(&buf, 170, sizeof(buf));
  v6 = (void *)a1[1];
  v5 = (xpc_object_t *)(a1 + 1);
  value = xpc_dictionary_get_value(v6, (const char *)*MEMORY[0x1E0CFB718]);
  *(_QWORD *)v142 = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)v142 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)v142, (const object *)"", v8);
  xpc_release(*(xpc_object_t *)v142);
  v9 = strlen((const char *)*MEMORY[0x1E0CFB990]);
  v10 = v9;
  v11 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9 != -1)
    {
      p_buf = &buf;
      size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      goto LABEL_15;
    }
LABEL_259:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v9 == -1)
    goto LABEL_259;
  size = buf.__r_.__value_.__l.__size_;
  p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_15:
  if (size >= v10)
    v14 = v10;
  else
    v14 = size;
  if (!memcmp(p_buf, (const void *)*MEMORY[0x1E0CFB990], v14) && size == v10)
  {
    v21 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v21;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setTxPowerCappingIPhoneMode_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
  v16 = (const void *)*MEMORY[0x1E0CFB3B0];
  v17 = strlen((const char *)*MEMORY[0x1E0CFB3B0]);
  v18 = v17;
  if ((v11 & 0x80) != 0)
  {
    if (v17 != -1)
    {
      v19 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v17)
        v22 = v17;
      else
        v22 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v16, v22))
        goto LABEL_40;
      goto LABEL_36;
    }
LABEL_260:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v17 == -1)
    goto LABEL_260;
  v19 = v11;
  if (v11 >= v17)
    v20 = v17;
  else
    v20 = v11;
  if (memcmp(&buf, v16, v20))
    goto LABEL_40;
LABEL_36:
  if (v19 == v18)
  {
    v23 = (const char *)*MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      v24 = xpc_dictionary_get_value(*v5, v23);
      *(_QWORD *)v142 = v24;
      if (v24)
        xpc_retain(v24);
      else
        *(_QWORD *)v142 = xpc_null_create();
      antenna::Service::Internal::setTxPowerCappingIPhoneOverrideFreeSpace_sync((antenna::Service::Internal *)v2, (const xpc::object *)v142);
      xpc_release(*(xpc_object_t *)v142);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_40:
  v25 = (const void *)*MEMORY[0x1E0CFB5B8];
  v26 = strlen((const char *)*MEMORY[0x1E0CFB5B8]);
  v27 = v26;
  if ((v11 & 0x80) != 0)
  {
    if (v26 != -1)
    {
      v28 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v26)
        v32 = v26;
      else
        v32 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v25, v32))
        goto LABEL_57;
      goto LABEL_54;
    }
LABEL_261:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 == -1)
    goto LABEL_261;
  v28 = v11;
  if (v11 >= v26)
    v29 = v26;
  else
    v29 = v11;
  if (memcmp(&buf, v25, v29))
    goto LABEL_57;
LABEL_54:
  if (v28 == v27)
  {
    v33 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v33;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setTxPowerAudioMode_sync((uint64_t **)v2, object);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_57:
  v34 = (const void *)*MEMORY[0x1E0CFB708];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB708]);
  v36 = v35;
  if ((v11 & 0x80) != 0)
  {
    if (v35 != -1)
    {
      v37 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v35)
        v39 = v35;
      else
        v39 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v34, v39))
        goto LABEL_76;
      goto LABEL_73;
    }
LABEL_262:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v35 == -1)
    goto LABEL_262;
  v37 = v11;
  if (v11 >= v35)
    v38 = v35;
  else
    v38 = v11;
  if (memcmp(&buf, v34, v38))
    goto LABEL_76;
LABEL_73:
  if (v37 == v36)
  {
    v40 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v40;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setTxPowerAudioAlert_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_76:
  v41 = (const void *)*MEMORY[0x1E0CFBE18];
  v42 = strlen((const char *)*MEMORY[0x1E0CFBE18]);
  v43 = v42;
  if ((v11 & 0x80) != 0)
  {
    if (v42 != -1)
    {
      v44 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v42)
        v46 = v42;
      else
        v46 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v41, v46))
        goto LABEL_93;
      goto LABEL_90;
    }
LABEL_263:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v42 == -1)
    goto LABEL_263;
  v44 = v11;
  if (v11 >= v42)
    v45 = v42;
  else
    v45 = v11;
  if (memcmp(&buf, v41, v45))
    goto LABEL_93;
LABEL_90:
  if (v44 == v43)
  {
    v47 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v47;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setTxPowerMotionMode_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_93:
  v48 = strlen((const char *)*MEMORY[0x1E0CFBE40]);
  v49 = v48;
  if ((v11 & 0x80) == 0)
  {
    if (v48 != -1)
    {
      v50 = &buf;
      v51 = v11;
      goto LABEL_100;
    }
LABEL_264:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v48 == -1)
    goto LABEL_264;
  v51 = buf.__r_.__value_.__l.__size_;
  v50 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_100:
  if (v51 >= v49)
    v52 = v49;
  else
    v52 = v51;
  if (!memcmp(v50, (const void *)*MEMORY[0x1E0CFBE40], v52) && v51 == v49)
  {
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v53 = *MEMORY[0x1E0CFB4D0];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v53;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
    v54 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB1B8]);
    p_xdict = v54;
    if (v54)
      xpc_retain(v54);
    else
      p_xdict = xpc_null_create();
    v66 = (const object *)*MEMORY[0x1E0CFC120];
    xpc::dyn_cast_or_default((xpc *)&p_xdict, (const object *)*MEMORY[0x1E0CFC120], v55);
    v67 = (void **)(v2 + 392);
    if (*(char *)(v2 + 415) < 0)
      operator delete(*v67);
    *(_OWORD *)v67 = *(_OWORD *)v142;
    *(_QWORD *)(v2 + 408) = *(_QWORD *)&v142[16];
    v142[23] = 0;
    v142[0] = 0;
    xpc_release(p_xdict);
    v68 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB398]);
    p_xdict = v68;
    if (v68)
      xpc_retain(v68);
    else
      p_xdict = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&p_xdict, v66, v69);
    v70 = (void **)(v2 + 416);
    if (*(char *)(v2 + 439) < 0)
      operator delete(*v70);
    *(_OWORD *)v70 = *(_OWORD *)v142;
    *(_QWORD *)(v2 + 432) = *(_QWORD *)&v142[16];
    v142[23] = 0;
    v142[0] = 0;
    xpc_release(p_xdict);
    antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v2);
    xpc_release(object[0]);
    goto LABEL_247;
  }
  v56 = strlen((const char *)*MEMORY[0x1E0CFBC10]);
  v57 = v56;
  if ((v11 & 0x80) == 0)
  {
    if (v56 != -1)
    {
      v58 = &buf;
      v59 = v11;
      goto LABEL_115;
    }
LABEL_265:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v56 == -1)
    goto LABEL_265;
  v59 = buf.__r_.__value_.__l.__size_;
  v58 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_115:
  if (v59 >= v57)
    v60 = v57;
  else
    v60 = v59;
  if (!memcmp(v58, (const void *)*MEMORY[0x1E0CFBC10], v60) && v59 == v57)
  {
    v61 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]);
    *(_QWORD *)v142 = v61;
    if (v61)
      xpc_retain(v61);
    else
      *(_QWORD *)v142 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)v142, 0);
    xpc_release(*(xpc_object_t *)v142);
    if (!*(_BYTE *)(v2 + 664))
      antenna::Service::Internal::configTxPower_sync(v2, 2u);
    goto LABEL_247;
  }
  v62 = strlen((const char *)*MEMORY[0x1E0CFBE90]);
  v63 = v62;
  if ((v11 & 0x80) == 0)
  {
    if (v62 != -1)
    {
      v64 = &buf;
      v65 = v11;
      goto LABEL_136;
    }
LABEL_266:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v62 == -1)
    goto LABEL_266;
  v65 = buf.__r_.__value_.__l.__size_;
  v64 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_136:
  if (v65 >= v63)
    v71 = v63;
  else
    v71 = v65;
  if (!memcmp(v64, (const void *)*MEMORY[0x1E0CFBE90], v71) && v65 == v63)
  {
    if (*(_BYTE *)(v2 + 476))
    {
      v72 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v142 = 0;
        _os_log_impl(&dword_1BF335000, v72, OS_LOG_TYPE_DEFAULT, "#I Ignore to set CLTM/PPM since overriding is being used.", v142, 2u);
      }
    }
    else
    {
      v84 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v84;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setMaxPower_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
    }
    goto LABEL_247;
  }
  v73 = strlen((const char *)*MEMORY[0x1E0CFBD28]);
  v74 = v73;
  if ((v11 & 0x80) == 0)
  {
    if (v73 != -1)
    {
      v75 = &buf;
      goto LABEL_152;
    }
LABEL_267:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v73 == -1)
    goto LABEL_267;
  v11 = buf.__r_.__value_.__l.__size_;
  v75 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_152:
  if (v11 >= v74)
    v76 = v74;
  else
    v76 = v11;
  if (!memcmp(v75, (const void *)*MEMORY[0x1E0CFBD28], v76) && v11 == v74)
  {
    v77 = *MEMORY[0x1E0CFB4D0];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v77;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v78 = xpc::dyn_cast_or_default((xpc *)object, 0);
    antenna::Service::Internal::setLinkQualityMetric_sync(v2, v78);
    xpc_release(object[0]);
    goto LABEL_247;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFB6B0]))
  {
    memset(object, 170, 24);
    v85 = *MEMORY[0x1E0CFB4D0];
    p_xdict = v5;
    v138 = v85;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &xdict);
    memset(v142, 0, sizeof(v142));
    xpc::dyn_cast_or_default();
    if ((char)v142[23] < 0)
      operator delete(*(void **)v142);
    xpc_release(xdict);
    if (SHIBYTE(object[2]) >= 0)
      v86 = object;
    else
      v86 = (xpc_object_t *)object[0];
    v87 = strlen((const char *)*MEMORY[0x1E0CFB4B0]);
    *(_BYTE *)(v2 + 488) = strncasecmp((const char *)v86, (const char *)*MEMORY[0x1E0CFB4B0], v87) == 0;
    ctu::LoggerCommonBase::setLogLevel();
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_247;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE10]))
  {
    v88 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v88;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
      xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v89);
      antenna::Service::Internal::setTxPowerMotionHandDetection_sync(v2, (uint64_t)&__p);
      if (v136 < 0)
        operator delete(__p);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find the command data!";
    goto LABEL_112;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE00]))
  {
    v90 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v90;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
      *(_DWORD *)(v2 + 568) = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(object[0]);
      v91 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        ctu::iokit::asString();
        v130 = (v142[23] & 0x80u) == 0 ? v142 : *(uint8_t **)v142;
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v130;
        _os_log_debug_impl(&dword_1BF335000, v91, OS_LOG_TYPE_DEBUG, "#D Power source overriding as %s", (uint8_t *)object, 0xCu);
        if ((char)v142[23] < 0)
          operator delete(*(void **)v142);
      }
      antenna::Service::Internal::sendPowerSource_sync((antenna::Service::Internal *)v2);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find the command data!";
    goto LABEL_112;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFB6B8]))
  {
    v92 = (void *)*MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      object[0] = v5;
      object[1] = v92;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
      v93 = (const char *)*MEMORY[0x1E0CFC120];
      xpc::dyn_cast_or_default((xpc *)&p_xdict, (const object *)*MEMORY[0x1E0CFC120], v94);
      v95 = (void **)(v2 + 592);
      if (*(char *)(v2 + 615) < 0)
        operator delete(*v95);
      *(_OWORD *)v95 = *(_OWORD *)v142;
      *(_QWORD *)(v2 + 608) = *(_QWORD *)&v142[16];
      v142[23] = 0;
      v142[0] = 0;
      xpc_release(p_xdict);
      v96 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
      {
        v131 = (void *)(v2 + 592);
        if (*(char *)(v2 + 615) < 0)
          v131 = *v95;
        *(_DWORD *)v142 = 136315138;
        *(_QWORD *)&v142[4] = v131;
        _os_log_debug_impl(&dword_1BF335000, v96, OS_LOG_TYPE_DEBUG, "#D Overriding PPM: %s", v142, 0xCu);
        if (*(_QWORD *)(v2 + 576))
        {
LABEL_199:
          v100 = *(char *)(v2 + 615);
          v101 = (const char *)(v2 + 592);
          if (v100 < 0)
            v101 = (const char *)*v95;
          v102 = strlen((const char *)*MEMORY[0x1E0CFB488]);
          if (!strncasecmp(v101, (const char *)*MEMORY[0x1E0CFB488], v102))
          {
            v107 = 1;
          }
          else
          {
            v103 = (const char *)(v2 + 592);
            if (v100 < 0)
              v103 = (const char *)*v95;
            v104 = strlen((const char *)*MEMORY[0x1E0CFB560]);
            if (!strncasecmp(v103, (const char *)*MEMORY[0x1E0CFB560], v104))
            {
              v107 = 0;
              *(_BYTE *)(v2 + 572) = 0;
              goto LABEL_246;
            }
            if (v100 < 0)
              v95 = (void **)*v95;
            v105 = strlen(v93);
            v106 = (capabilities::txpower *)strncasecmp((const char *)v95, v93, v105);
            if ((_DWORD)v106)
            {
              v107 = *(_BYTE *)(v2 + 572) != 0;
LABEL_246:
              antenna::Service::Internal::enablePPM_sync((antenna::Service::Internal *)v2, v107);
              goto LABEL_247;
            }
            v107 = capabilities::txpower::supportsPPM(v106);
          }
          *(_BYTE *)(v2 + 572) = v107;
          goto LABEL_246;
        }
      }
      else if (*(_QWORD *)(v2 + 576))
      {
        goto LABEL_199;
      }
      v97 = *(_QWORD *)(v2 + 144);
      v134[0] = *(_QWORD *)(v2 + 136);
      v134[1] = v97;
      if (v97)
      {
        v98 = (unint64_t *)(v97 + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      PPMManager::create(v134, v142);
      std::shared_ptr<PPMManager>::operator=[abi:ne180100](v2 + 576, (__int128 *)v142);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v142);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v134);
      goto LABEL_199;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find the command data!";
LABEL_112:
    _os_log_error_impl(&dword_1BF335000, v30, OS_LOG_TYPE_ERROR, v31, v142, 2u);
    goto LABEL_247;
  }
  if (std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE88]))
  {
    if (std::string::compare(&buf, "kSetWorkoutInfo"))
    {
      if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFAF90]))
      {
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        v79 = *MEMORY[0x1E0CFB4D0];
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = v79;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, &xdict);
        memset(v142, 170, sizeof(v142));
        std::string::basic_string[abi:ne180100]<0>(v142, "");
        v80 = *MEMORY[0x1E0CFBB48];
        if (xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFBB48]))
        {
          p_xdict = &xdict;
          v138 = v80;
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &v133);
          xpc::dyn_cast_or_default((xpc *)&v133, (const object *)"", v81);
          if ((char)v142[23] < 0)
            operator delete(*(void **)v142);
          *(_OWORD *)v142 = *(_OWORD *)object;
          *(xpc_object_t *)&v142[16] = object[2];
          HIBYTE(object[2]) = 0;
          LOBYTE(object[0]) = 0;
          xpc_release(v133);
          if ((v142[23] & 0x80u) == 0)
            v82 = v142;
          else
            v82 = *(uint8_t **)v142;
          v83 = strlen((const char *)*MEMORY[0x1E0CFAF88]);
          *(_BYTE *)(v2 + 476) = strncmp((const char *)v82, (const char *)*MEMORY[0x1E0CFAF88], v83) == 0;
        }
        antenna::Service::Internal::setMaxPower_sync((antenna::Service::Internal *)v2, &xdict);
        if ((char)v142[23] < 0)
          operator delete(*(void **)v142);
        xpc_release(xdict);
      }
      goto LABEL_247;
    }
    if (*(_BYTE *)(v2 + 688))
    {
      v122 = (void *)*MEMORY[0x1E0CFB4D0];
      object[0] = v5;
      object[1] = v122;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
      v123 = (char *)*MEMORY[0x1E0CFC120];
      xpc::dyn_cast_or_default((xpc *)&p_xdict, (const object *)*MEMORY[0x1E0CFC120], v124);
      v125 = (void **)(v2 + 696);
      if (*(char *)(v2 + 719) < 0)
        operator delete(*v125);
      *(_OWORD *)v125 = *(_OWORD *)v142;
      *(_QWORD *)(v2 + 712) = *(_QWORD *)&v142[16];
      v142[23] = 0;
      v142[0] = 0;
      xpc_release(p_xdict);
      std::string::basic_string[abi:ne180100]<0>(v142, v123);
      v126 = util::equal_nocase((const char *)(v2 + 696), (const char *)v142);
      if ((char)v142[23] < 0)
        operator delete(*(void **)v142);
      if (!v126)
      {
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = "kKeyWorkoutType";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
        *(_DWORD *)(v2 + 720) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = "kKeyWorkoutState";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
        *(_DWORD *)(v2 + 724) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = "kKeyWorkoutLocation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
        *(_DWORD *)(v2 + 728) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = "kKeySwimLocation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
        *(_DWORD *)(v2 + 732) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        antenna::Service::Internal::sendWorkoutInfo_sync((antenna::Service::Internal *)v2);
      }
      goto LABEL_247;
    }
    v127 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    v129 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v129 = (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v142 = 136315138;
    *(_QWORD *)&v142[4] = v129;
LABEL_238:
    _os_log_error_impl(&dword_1BF335000, v127, OS_LOG_TYPE_ERROR, "%s is not supported in this device", v142, 0xCu);
    goto LABEL_247;
  }
  if (!*(_BYTE *)(v2 + 170))
  {
    v127 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    v128 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v128 = (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v142 = 136315138;
    *(_QWORD *)&v142[4] = v128;
    goto LABEL_238;
  }
  v108 = (void *)*MEMORY[0x1E0CFB4D0];
  object[0] = v5;
  object[1] = v108;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
  v109 = (const char *)*MEMORY[0x1E0CFC120];
  xpc::dyn_cast_or_default((xpc *)&p_xdict, (const object *)*MEMORY[0x1E0CFC120], v110);
  v111 = v2 + 640;
  v132 = (char *)(v2 + 640);
  if (*(char *)(v2 + 663) < 0)
  {
    operator delete(*(void **)v111);
    v111 = v2 + 640;
  }
  *(_OWORD *)v111 = *(_OWORD *)v142;
  *(_QWORD *)(v111 + 16) = *(_QWORD *)&v142[16];
  v142[23] = 0;
  v142[0] = 0;
  xpc_release(p_xdict);
  if (*(char *)(v2 + 663) < 0)
    v132 = *(char **)v132;
  v112 = strlen(v109);
  v113 = (config::hw *)strncasecmp(v132, v109, v112);
  if ((_DWORD)v113)
  {
    v114 = *MEMORY[0x1E0CFC0D0];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v114;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v115 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 1u) = v115;
    xpc_release(object[0]);
    v116 = *MEMORY[0x1E0CFC088];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v116;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v117 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 2u) = v117;
    xpc_release(object[0]);
    v118 = *MEMORY[0x1E0CFBEF0];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v118;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v119 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 3u) = v119;
    xpc_release(object[0]);
    v120 = *MEMORY[0x1E0CFBEE8];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v120;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v121 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 4u) = v121;
    xpc_release(object[0]);
  }
  else
  {
    config::hw::deviceMaterial(v113);
    if ((uint8_t *)(v2 + 616) != v142)
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)(v2 + 616), *(_QWORD **)v142, &v142[8]);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*(_QWORD **)&v142[8]);
  }
  antenna::Service::Internal::sendDeviceMaterial_sync((antenna::Service::Internal *)v2);
LABEL_247:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1BF4C37B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, uint64_t a20,xpc_object_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*(_QWORD **)(v34 - 88));
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  std::string::size_type v3;
  const char *v4;
  xpc_object_t value;
  const char *v6;
  size_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *p_s1;
  std::string::size_type size;
  size_t v12;
  const void *v14;
  size_t v15;
  size_t v16;
  std::string::size_type v17;
  size_t v18;
  std::string *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  std::string::size_type v22;
  xpc_object_t v23;
  size_t v24;
  std::string *p_buf;
  xpc_object_t v26;
  xpc_object_t v27;
  const void *v28;
  size_t v29;
  size_t v30;
  std::string::size_type v31;
  size_t v32;
  size_t v33;
  std::string *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  std::string::size_type v37;
  xpc_object_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  std::string::size_type v42;
  size_t v43;
  size_t v44;
  std::string *v45;
  xpc_object_t v46;
  xpc_object_t v47;
  std::string::size_type v48;
  xpc_object_t v49;
  const void *v50;
  size_t v51;
  size_t v52;
  std::string::size_type v53;
  size_t v54;
  size_t v55;
  std::string *v56;
  xpc_object_t v57;
  xpc_object_t v58;
  std::string::size_type v59;
  xpc_object_t v60;
  size_t v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  size_t v65;
  void **v66;
  xpc_object_t v67;
  size_t v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type v71;
  size_t v72;
  const char *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  const char *v76;
  xpc_object_t v77;
  xpc_object_t v78;
  size_t v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  void *v83;
  size_t v84;
  const char **v85;
  std::string::size_type v86;
  size_t v87;
  std::string::size_type v88;
  std::string *v89;
  size_t v90;
  const char *v91;
  std::string::size_type v92;
  xpc_object_t *v93;
  xpc_object_t *v94;
  std::string::size_type v95;
  const char *v96;
  std::string::size_type v97;
  const char *v98;
  const char *v99;
  std::string::size_type v100;
  size_t v101;
  uint64_t **v102;
  uint64_t **v103;
  std::string::size_type v104;
  uint64_t **v105;
  std::string::size_type v106;
  uint64_t **v107;
  std::string::size_type v108;
  uint64_t **v109;
  std::string::size_type v110;
  const char *v111;
  const char *v112;
  std::string::size_type v113;
  NSObject *v114;
  std::string *v115;
  std::string *v116;
  xpc_object_t *v117;
  const char **v118;
  std::string::size_type v119;
  std::string::size_type v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string::size_type v123;
  xpc_object_t v124;
  xpc_object_t v125;
  xpc_object_t v126;
  xpc_object_t v127;
  xpc_object_t v128;
  xpc_object_t v129;
  xpc_object_t v130;
  xpc_object_t v131;
  xpc_object_t v132;
  xpc_object_t v133;
  xpc_object_t v134;
  xpc_object_t v135;
  xpc_object_t v136;
  xpc_object_t v137;
  xpc_object_t v138;
  xpc_object_t v139;
  xpc_object_t v140;
  xpc_object_t v141;
  xpc_object_t v142;
  xpc_object_t v143;
  xpc_object_t v144;
  xpc_object_t v145;
  xpc_object_t v146;
  xpc_object_t v147;
  xpc_object_t v148;
  xpc_object_t v149;
  xpc_object_t v150;
  xpc_object_t v151;
  xpc_object_t v152;
  xpc_object_t v153;
  xpc_object_t object;
  xpc_object_t v155;
  xpc_object_t v156;
  xpc_object_t v157;
  xpc_object_t v158;
  xpc_object_t v159;
  xpc_object_t v160;
  xpc_object_t v161;
  xpc_object_t v162;
  xpc_object_t v163;
  xpc_object_t v164;
  xpc_object_t *v165;
  std::string::size_type v166;
  xpc_object_t v167;
  std::string __s1;
  std::string buf;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  memset(&__s1, 170, sizeof(__s1));
  v3 = a1 + 8;
  v4 = (const char *)*MEMORY[0x1E0CFB718];
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 8), (const char *)*MEMORY[0x1E0CFB718]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"", v6);
  xpc_release(buf.__r_.__value_.__l.__data_);
  v7 = strlen((const char *)*MEMORY[0x1E0CFBA80]);
  v8 = v7;
  v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7 != -1)
    {
      p_s1 = &__s1;
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      goto LABEL_9;
    }
LABEL_237:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 == -1)
    goto LABEL_237;
  size = __s1.__r_.__value_.__l.__size_;
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_9:
  if (size >= v8)
    v12 = v8;
  else
    v12 = size;
  if (!memcmp(p_s1, (const void *)*MEMORY[0x1E0CFBA80], v12) && size == v8)
  {
    if ((v9 & 0x80u) == 0)
      v19 = &__s1;
    else
      v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v20 = xpc_string_create((const char *)v19);
    if (!v20)
      v20 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v20);
    v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    v22 = *MEMORY[0x1E0CFB4D0];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v22;
    v165 = *(xpc_object_t **)a1;
    v166 = v22;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v167);
    xpc_release(v167);
    v167 = 0;
    antenna::Service::Internal::copyTxPowerCappingIPhoneMode_sync((antenna::Service::Internal *)v2, &v164);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v164);
    v23 = v164;
    v164 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v164);
    v164 = 0;
    goto LABEL_136;
  }
  v14 = (const void *)*MEMORY[0x1E0CFB3A8];
  v15 = strlen((const char *)*MEMORY[0x1E0CFB3A8]);
  v16 = v15;
  if ((v9 & 0x80) != 0)
  {
    if (v15 != -1)
    {
      v17 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v15)
        v24 = v15;
      else
        v24 = __s1.__r_.__value_.__l.__size_;
      if (memcmp(__s1.__r_.__value_.__l.__data_, v14, v24))
        goto LABEL_42;
      goto LABEL_34;
    }
LABEL_238:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 == -1)
    goto LABEL_238;
  v17 = v9;
  if (v9 >= v15)
    v18 = v15;
  else
    v18 = v9;
  if (memcmp(&__s1, v14, v18))
    goto LABEL_42;
LABEL_34:
  if (v17 == v16)
  {
    antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync((antenna::Service::Internal *)v2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v26 = xpc_string_create((const char *)p_buf);
    if (!v26)
      v26 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v26);
    v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_136;
  }
LABEL_42:
  v28 = (const void *)*MEMORY[0x1E0CFB700];
  v29 = strlen((const char *)*MEMORY[0x1E0CFB700]);
  v30 = v29;
  if ((v9 & 0x80) != 0)
  {
    if (v29 != -1)
    {
      v31 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v29)
        v33 = v29;
      else
        v33 = __s1.__r_.__value_.__l.__size_;
      if (memcmp(__s1.__r_.__value_.__l.__data_, v28, v33))
        goto LABEL_61;
      goto LABEL_54;
    }
LABEL_239:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v29 == -1)
    goto LABEL_239;
  v31 = v9;
  if (v9 >= v29)
    v32 = v29;
  else
    v32 = v9;
  if (memcmp(&__s1, v28, v32))
    goto LABEL_61;
LABEL_54:
  if (v31 == v30)
  {
    if ((v9 & 0x80u) == 0)
      v34 = &__s1;
    else
      v34 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v35 = xpc_string_create((const char *)v34);
    if (!v35)
      v35 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v35);
    v36 = xpc_null_create();
    xpc_release(v35);
    xpc_release(v36);
    v37 = *MEMORY[0x1E0CFB4D0];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v37;
    v165 = *(xpc_object_t **)a1;
    v166 = v37;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v163);
    xpc_release(v163);
    v163 = 0;
    antenna::Service::Internal::copyTxPowerAudioMode_sync((antenna::Service::Internal *)v2, &v162);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v162);
    v38 = v162;
    v162 = xpc_null_create();
    xpc_release(v38);
    xpc_release(v162);
    v162 = 0;
    goto LABEL_136;
  }
LABEL_61:
  v39 = (const void *)*MEMORY[0x1E0CFB848];
  v40 = strlen((const char *)*MEMORY[0x1E0CFB848]);
  v41 = v40;
  if ((v9 & 0x80) != 0)
  {
    if (v40 != -1)
    {
      v42 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v40)
        v44 = v40;
      else
        v44 = __s1.__r_.__value_.__l.__size_;
      if (memcmp(__s1.__r_.__value_.__l.__data_, v39, v44))
        goto LABEL_80;
      goto LABEL_73;
    }
LABEL_240:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v40 == -1)
    goto LABEL_240;
  v42 = v9;
  if (v9 >= v40)
    v43 = v40;
  else
    v43 = v9;
  if (memcmp(&__s1, v39, v43))
    goto LABEL_80;
LABEL_73:
  if (v42 == v41)
  {
    if ((v9 & 0x80u) == 0)
      v45 = &__s1;
    else
      v45 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v46 = xpc_string_create((const char *)v45);
    if (!v46)
      v46 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v46);
    v47 = xpc_null_create();
    xpc_release(v46);
    xpc_release(v47);
    v48 = *MEMORY[0x1E0CFB4D0];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v48;
    v165 = *(xpc_object_t **)a1;
    v166 = v48;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v161);
    xpc_release(v161);
    v161 = 0;
    antenna::Service::Internal::copyTxPowerAudioAlert_sync((antenna::Service::Internal *)v2, &v160);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v160);
    v49 = v160;
    v160 = xpc_null_create();
    xpc_release(v49);
    xpc_release(v160);
    v160 = 0;
    goto LABEL_136;
  }
LABEL_80:
  v50 = (const void *)*MEMORY[0x1E0CFBEB8];
  v51 = strlen((const char *)*MEMORY[0x1E0CFBEB8]);
  v52 = v51;
  if ((v9 & 0x80) != 0)
  {
    if (v51 != -1)
    {
      v53 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v51)
        v55 = v51;
      else
        v55 = __s1.__r_.__value_.__l.__size_;
      if (memcmp(__s1.__r_.__value_.__l.__data_, v50, v55))
        goto LABEL_100;
      goto LABEL_92;
    }
LABEL_241:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v51 == -1)
    goto LABEL_241;
  v53 = v9;
  if (v9 >= v51)
    v54 = v51;
  else
    v54 = v9;
  if (memcmp(&__s1, v50, v54))
    goto LABEL_100;
LABEL_92:
  if (v53 == v52)
  {
    if (*(_BYTE *)(v2 + 153))
    {
      if ((v9 & 0x80u) == 0)
        v56 = &__s1;
      else
        v56 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      v57 = xpc_string_create((const char *)v56);
      if (!v57)
        v57 = xpc_null_create();
      xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v57);
      v58 = xpc_null_create();
      xpc_release(v57);
      xpc_release(v58);
      v59 = *MEMORY[0x1E0CFB4D0];
      buf.__r_.__value_.__r.__words[0] = v3;
      buf.__r_.__value_.__l.__size_ = v59;
      v165 = *(xpc_object_t **)a1;
      v166 = v59;
      xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v159);
      xpc_release(v159);
      v159 = 0;
      antenna::Service::Internal::copyTxPowerMotionMode_sync((antenna::Service::Internal *)v2, &v158);
      xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v158);
      v60 = v158;
      v158 = xpc_null_create();
      xpc_release(v60);
      xpc_release(v158);
      v158 = 0;
    }
    goto LABEL_136;
  }
LABEL_100:
  v61 = strlen((const char *)*MEMORY[0x1E0CFBBD8]);
  v62 = v61;
  if ((v9 & 0x80) == 0)
  {
    if (v61 != -1)
    {
      v63 = &__s1;
      v64 = v9;
      goto LABEL_105;
    }
LABEL_242:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v61 == -1)
    goto LABEL_242;
  v64 = __s1.__r_.__value_.__l.__size_;
  v63 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_105:
  if (v64 >= v62)
    v65 = v62;
  else
    v65 = v64;
  if (!memcmp(v63, (const void *)*MEMORY[0x1E0CFBBD8], v65) && v64 == v62)
  {
    v66 = *(void ***)a1;
    v67 = *(xpc_object_t *)(v2 + 224);
    if (v67)
      xpc_retain(*(xpc_object_t *)(v2 + 224));
    else
      v67 = xpc_null_create();
    v83 = *v66;
    *v66 = v67;
    xpc_release(v83);
    goto LABEL_136;
  }
  v68 = strlen((const char *)*MEMORY[0x1E0CFBAC8]);
  v69 = v68;
  if ((v9 & 0x80) == 0)
  {
    if (v68 != -1)
    {
      v70 = &__s1;
      v71 = v9;
      goto LABEL_117;
    }
LABEL_243:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v68 == -1)
    goto LABEL_243;
  v71 = __s1.__r_.__value_.__l.__size_;
  v70 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_117:
  if (v71 >= v69)
    v72 = v69;
  else
    v72 = v71;
  if (!memcmp(v70, (const void *)*MEMORY[0x1E0CFBAC8], v72) && v71 == v69)
  {
    v73 = (const char *)(v2 + 392);
    if (*(char *)(v2 + 415) < 0)
      v73 = *(const char **)v73;
    v74 = xpc_string_create(v73);
    if (!v74)
      v74 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB1B8], v74);
    v75 = xpc_null_create();
    xpc_release(v74);
    xpc_release(v75);
    v76 = (const char *)(v2 + 416);
    if (*(char *)(v2 + 439) < 0)
      v76 = *(const char **)v76;
    v77 = xpc_string_create(v76);
    if (!v77)
      v77 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB398], v77);
    v78 = xpc_null_create();
    xpc_release(v77);
    xpc_release(v78);
    goto LABEL_136;
  }
  v79 = strlen((const char *)*MEMORY[0x1E0CFB608]);
  v80 = v79;
  if ((v9 & 0x80) == 0)
  {
    if (v79 != -1)
    {
      v81 = &__s1;
      v82 = v9;
      goto LABEL_141;
    }
LABEL_244:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v79 == -1)
    goto LABEL_244;
  v82 = __s1.__r_.__value_.__l.__size_;
  v81 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_141:
  if (v82 >= v80)
    v84 = v80;
  else
    v84 = v82;
  if (!memcmp(v81, (const void *)*MEMORY[0x1E0CFB608], v84) && v82 == v80)
  {
    v85 = (const char **)MEMORY[0x1E0CFB4B0];
    if (!*(_BYTE *)(v2 + 488))
      v85 = (const char **)MEMORY[0x1E0CFB580];
    v156 = xpc_string_create(*v85);
    if (!v156)
      v156 = xpc_null_create();
    v86 = *MEMORY[0x1E0CFB4D0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v86;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v156, &v157);
    xpc_release(v157);
    v157 = 0;
    xpc_release(v156);
    v156 = 0;
    goto LABEL_136;
  }
  v87 = strlen((const char *)*MEMORY[0x1E0CFBEB0]);
  v88 = v87;
  if ((v9 & 0x80) == 0)
  {
    if (v87 != -1)
    {
      v89 = &__s1;
      goto LABEL_156;
    }
LABEL_245:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v87 == -1)
    goto LABEL_245;
  v9 = __s1.__r_.__value_.__l.__size_;
  v89 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_156:
  if (v9 >= v88)
    v90 = v88;
  else
    v90 = v9;
  if (!memcmp(v89, (const void *)*MEMORY[0x1E0CFBEB0], v90) && v9 == v88)
  {
    v91 = (const char *)(v2 + 536);
    if (*(char *)(v2 + 559) < 0)
      v91 = *(const char **)v91;
    object = xpc_string_create(v91);
    if (!object)
      object = xpc_null_create();
    v92 = *MEMORY[0x1E0CFB5C0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v92;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &object, &v155);
    xpc_release(v155);
    v155 = 0;
    xpc_release(object);
    object = 0;
    goto LABEL_136;
  }
  if (!std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E0CFBDC0]))
  {
    v152 = xpc_int64_create(*(unsigned int *)(v2 + 568));
    if (!v152)
      v152 = xpc_null_create();
    v95 = *MEMORY[0x1E0CFB5C0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v95;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v152, &v153);
    xpc_release(v153);
    v153 = 0;
    xpc_release(v152);
    v152 = 0;
  }
  else if (!std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E0CFB610]))
  {
    v96 = (const char *)(v2 + 592);
    if (*(char *)(v2 + 615) < 0)
      v96 = *(const char **)v96;
    v150 = xpc_string_create(v96);
    if (!v150)
      v150 = xpc_null_create();
    v97 = *MEMORY[0x1E0CFB5C0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v97;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v150, &v151);
    xpc_release(v151);
    v151 = 0;
    xpc_release(v150);
    v150 = 0;
  }
  else
  {
    if (std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E0CFBE48]))
    {
      if (std::string::compare(&__s1, "kGetWorkoutInfo"))
      {
        if (std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E0CFAF50]))
          goto LABEL_136;
        v165 = (xpc_object_t *)0xAAAAAAAAAAAAAAAALL;
        v93 = (xpc_object_t *)xpc_dictionary_create(0, 0, 0);
        v94 = v93;
        if (v93)
        {
          v165 = v93;
        }
        else
        {
          v94 = (xpc_object_t *)xpc_null_create();
          v165 = v94;
          if (!v94)
          {
            v117 = (xpc_object_t *)xpc_null_create();
            v94 = 0;
            goto LABEL_225;
          }
        }
        if (MEMORY[0x1C3B8A86C](v94) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v94);
LABEL_226:
          xpc_release(v94);
          v118 = (const char **)MEMORY[0x1E0CFAF88];
          if (!*(_BYTE *)(v2 + 476))
            v118 = (const char **)MEMORY[0x1E0CFC120];
          v132 = xpc_string_create(*v118);
          if (!v132)
            v132 = xpc_null_create();
          v119 = *MEMORY[0x1E0CFBB48];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v119;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v132, &v133);
          xpc_release(v133);
          v133 = 0;
          xpc_release(v132);
          v132 = 0;
          v130 = xpc_int64_create(*(unsigned int *)(v2 + 464));
          if (!v130)
            v130 = xpc_null_create();
          v120 = *MEMORY[0x1E0CFB308];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v120;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v130, &v131);
          xpc_release(v131);
          v131 = 0;
          xpc_release(v130);
          v130 = 0;
          v128 = xpc_int64_create(*(unsigned int *)(v2 + 468));
          if (!v128)
            v128 = xpc_null_create();
          v121 = *MEMORY[0x1E0CFB4C8];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v121;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v128, &v129);
          xpc_release(v129);
          v129 = 0;
          xpc_release(v128);
          v128 = 0;
          v126 = xpc_int64_create(*(unsigned int *)(v2 + 472));
          if (!v126)
            v126 = xpc_null_create();
          v122 = *MEMORY[0x1E0CFB120];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v122;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v126, &v127);
          xpc_release(v127);
          v127 = 0;
          xpc_release(v126);
          v126 = 0;
          xpc::dict::dict((xpc::dict *)&v124, (void **)&v165);
          v123 = *MEMORY[0x1E0CFB5C0];
          buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
          buf.__r_.__value_.__l.__size_ = v123;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v124, &v125);
          xpc_release(v125);
          v125 = 0;
          xpc_release(v124);
          v124 = 0;
          xpc_release(v165);
          goto LABEL_136;
        }
        v117 = (xpc_object_t *)xpc_null_create();
LABEL_225:
        v165 = v117;
        goto LABEL_226;
      }
      if (*(_BYTE *)(v2 + 688))
      {
        v111 = (const char *)(v2 + 696);
        v112 = (const char *)(v2 + 696);
        if (*(char *)(v2 + 719) < 0)
          v112 = *(const char **)v111;
        v138 = xpc_string_create(v112);
        if (!v138)
          v138 = xpc_null_create();
        v113 = *MEMORY[0x1E0CFB5C0];
        buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
        buf.__r_.__value_.__l.__size_ = v113;
        xpc::dict::object_proxy::operator=((uint64_t)&buf, &v138, &v139);
        xpc_release(v139);
        v139 = 0;
        xpc_release(v138);
        v138 = 0;
        if (*(char *)(v2 + 719) < 0)
          v111 = *(const char **)v111;
        if (!strncasecmp(v111, "OVERRIDE", 8uLL))
        {
          v136 = xpc_int64_create(*(unsigned int *)(v2 + 720));
          if (!v136)
            v136 = xpc_null_create();
          buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kKeyWorkoutType";
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v136, &v137);
          xpc_release(v137);
          v137 = 0;
          xpc_release(v136);
          v136 = 0;
          v134 = xpc_int64_create(*(unsigned int *)(v2 + 724));
          if (!v134)
            v134 = xpc_null_create();
          buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kKeyWorkoutState";
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v134, &v135);
          xpc_release(v135);
          v135 = 0;
          xpc_release(v134);
          v134 = 0;
        }
        goto LABEL_136;
      }
      v114 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        goto LABEL_136;
      v116 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v116 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v116;
LABEL_219:
      _os_log_error_impl(&dword_1BF335000, v114, OS_LOG_TYPE_ERROR, "%s is not supported in this device", (uint8_t *)&buf, 0xCu);
      goto LABEL_136;
    }
    if (!*(_BYTE *)(v2 + 170))
    {
      v114 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        goto LABEL_136;
      v115 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v115 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v115;
      goto LABEL_219;
    }
    v98 = (const char *)(v2 + 640);
    v99 = (const char *)(v2 + 640);
    if (*(char *)(v2 + 663) < 0)
      v99 = *(const char **)v98;
    v148 = xpc_string_create(v99);
    if (!v148)
      v148 = xpc_null_create();
    v100 = *MEMORY[0x1E0CFB5C0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v100;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v148, &v149);
    xpc_release(v149);
    v149 = 0;
    xpc_release(v148);
    v148 = 0;
    if (*(char *)(v2 + 663) < 0)
      v98 = *(const char **)v98;
    v101 = strlen((const char *)*MEMORY[0x1E0CFB9A0]);
    if (!strncasecmp(v98, (const char *)*MEMORY[0x1E0CFB9A0], v101))
    {
      v102 = (uint64_t **)(v2 + 616);
      v103 = std::map<unsigned int,unsigned int>::operator[](v102, 1u);
      v146 = xpc_int64_create(*(unsigned int *)v103);
      if (!v146)
        v146 = xpc_null_create();
      v104 = *MEMORY[0x1E0CFC0D0];
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      buf.__r_.__value_.__l.__size_ = v104;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v146, &v147);
      xpc_release(v147);
      v147 = 0;
      xpc_release(v146);
      v146 = 0;
      v105 = std::map<unsigned int,unsigned int>::operator[](v102, 2u);
      v144 = xpc_int64_create(*(unsigned int *)v105);
      if (!v144)
        v144 = xpc_null_create();
      v106 = *MEMORY[0x1E0CFC088];
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      buf.__r_.__value_.__l.__size_ = v106;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v144, &v145);
      xpc_release(v145);
      v145 = 0;
      xpc_release(v144);
      v144 = 0;
      v107 = std::map<unsigned int,unsigned int>::operator[](v102, 3u);
      v142 = xpc_int64_create(*(unsigned int *)v107);
      if (!v142)
        v142 = xpc_null_create();
      v108 = *MEMORY[0x1E0CFBEF0];
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      buf.__r_.__value_.__l.__size_ = v108;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v142, &v143);
      xpc_release(v143);
      v143 = 0;
      xpc_release(v142);
      v142 = 0;
      v109 = std::map<unsigned int,unsigned int>::operator[](v102, 4u);
      v140 = xpc_int64_create(*(unsigned int *)v109);
      if (!v140)
        v140 = xpc_null_create();
      v110 = *MEMORY[0x1E0CFBEE8];
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      buf.__r_.__value_.__l.__size_ = v110;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v140, &v141);
      xpc_release(v141);
      v141 = 0;
      xpc_release(v140);
      v140 = 0;
    }
  }
LABEL_136:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_1BF4C4D78(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE20execute_wrapped_syncIZNS3_18antennaGetPropertyERKN3xpc4dictEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSB__block_invoke(uint64_t a1)
{
  antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()(*(_QWORD *)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>(antenna::Service::Internal::sendAudioSpeaker(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::sendAudioSpeaker(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  antenna::Service::Internal **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::sendAudioSpeaker_sync(**(antenna::Service::Internal ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF4C50B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::dumpState(void)::$_0>(antenna::Service::Internal::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::dumpState(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  antenna::Service::Internal **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::handleDumpState_sync(**(antenna::Service::Internal ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF4C518C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_27_2()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_28()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_29()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_30()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy, &ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t result, char a2, uint64_t a3)
{
  *(_QWORD *)result = &unk_1E7905D90;
  *(_BYTE *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

{
  *(_QWORD *)result = &unk_1E7905D90;
  *(_BYTE *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t a1, char a2, uint64_t a3)
{
  std::string __p;

  *(_QWORD *)a1 = &unk_1E7905D90;
  *(_BYTE *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  std::string __p;

  *(_QWORD *)a1 = &unk_1E7905D90;
  *(_BYTE *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF4C56E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF4C5798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::getType(HealthEvent *this)
{
  return *((char *)this + 8);
}

void HealthEvent::getTime(HealthEvent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6[2];

  v3 = *((_QWORD *)this + 2);
  v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  v5 = v4;
  v6[0] = v4;
  *((_BYTE *)v4 + 24) = 1;
  v6[1] = (_QWORD *)1;
  *((_QWORD *)v4 + 5) = v3;
  *((_QWORD *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1BF4C5844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t HealthEvent::getChronoTime(HealthEvent *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t HealthEvent::setType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void HealthEvent::setTime(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF4C58E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::setTime(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t HealthEvent::asString@<X0>(HealthEvent *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  size_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v26;
  _BYTE v27[24];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33[2];
  __int128 v34;
  __int128 v35;
  _OWORD v36[9];
  unint64_t v37;
  _QWORD **v38;
  _QWORD *v39;
  uint64_t v40;

  v37 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[7] = v4;
  v36[8] = v4;
  v36[5] = v4;
  v36[6] = v4;
  v36[3] = v4;
  v36[4] = v4;
  v36[1] = v4;
  v36[2] = v4;
  v35 = v4;
  v36[0] = v4;
  *(_OWORD *)v33 = v4;
  v34 = v4;
  v31 = v4;
  v32 = v4;
  v29 = v4;
  v30 = v4;
  v28 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"HealthEvent { Type='", 20);
  switch(*((_BYTE *)this + 8))
  {
    case 1:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      v7 = "boot failure";
      goto LABEL_7;
    case 2:
      v8 = (char *)operator new(0x19uLL);
      *(_QWORD *)v27 = v8;
      *(_OWORD *)&v27[8] = xmmword_1BF53F3F0;
      strcpy(v8, "boot attempts exhausted");
      v6 = 23;
      goto LABEL_10;
    case 3:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1936942435;
      v7 = "ping success";
      goto LABEL_7;
    case 4:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      v7 = "ping failure";
LABEL_7:
      *(_QWORD *)v27 = *(_QWORD *)v7;
      v27[12] = 0;
      break;
    case 5:
      v6 = 11;
      v27[23] = 11;
      strcpy(v27, "erasing efs");
      break;
    default:
      v6 = 7;
      v27[23] = 7;
      strcpy(v27, "unknown");
      break;
  }
  v8 = v27;
LABEL_10:
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v8, v6);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' Time='", 8);
  v11 = *((_QWORD *)this + 2);
  v39 = 0;
  v40 = 0;
  v38 = &v39;
  v12 = operator new(0x38uLL);
  v12[8] = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = &v39;
  v38 = (_QWORD **)v12;
  v39 = v12;
  *((_BYTE *)v12 + 24) = 1;
  v40 = 1;
  *((_QWORD *)v12 + 5) = v11;
  *((_QWORD *)v12 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v38, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v38, v39);
  if ((v26 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v14 = v26;
  else
    v14 = (uint64_t)__p[1];
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' }", 3);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    if ((v27[23] & 0x80000000) == 0)
    {
LABEL_18:
      v16 = BYTE8(v35);
      if ((BYTE8(v35) & 0x10) == 0)
        goto LABEL_19;
LABEL_23:
      v18 = v35;
      if ((unint64_t)v35 < *((_QWORD *)&v32 + 1))
      {
        *(_QWORD *)&v35 = *((_QWORD *)&v32 + 1);
        v18 = *((_QWORD *)&v32 + 1);
      }
      v19 = (const void *)v32;
      v17 = v18 - v32;
      if ((unint64_t)(v18 - v32) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_37;
      goto LABEL_26;
    }
  }
  else if ((v27[23] & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)v27);
  v16 = BYTE8(v35);
  if ((BYTE8(v35) & 0x10) != 0)
    goto LABEL_23;
LABEL_19:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    a2[23] = 0;
    goto LABEL_33;
  }
  v19 = (const void *)*((_QWORD *)&v30 + 1);
  v17 = *((_QWORD *)&v31 + 1) - *((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v31 + 1) - *((_QWORD *)&v30 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_37:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_26:
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_32;
  }
  a2[23] = v17;
  if (v17)
LABEL_32:
    memmove(a2, v19, v17);
LABEL_33:
  a2[v17] = 0;
  *(_QWORD *)&v28 = *MEMORY[0x1E0DE4F50];
  v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v29 = v23;
  *((_QWORD *)&v29 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v34) < 0)
    operator delete(v33[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B89E4C](v36);
}

void sub_1BF4C5CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4C5CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v21 - 72, *(_QWORD **)(v21 - 64));
  if (a20 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1BF4C5D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char *HealthEvent::toString@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "boot failure");
      break;
    case 2:
      result = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_1BF53F3F0;
      strcpy(result, "boot attempts exhausted");
      break;
    case 3:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping success");
      break;
    case 4:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping failure");
      break;
    case 5:
      *(_BYTE *)(a2 + 23) = 11;
      strcpy((char *)a2, "erasing efs");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
  return result;
}

void TraceManager::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13[2];
  _QWORD v14[5];
  _QWORD *v15;
  _QWORD block[6];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x140uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v13[0] = v6;
  v13[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  TraceManager::TraceManager((uint64_t)v4, v13);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(a2, v5);
  ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v10 = *a2;
  v11 = *a2 + 120;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZN12TraceManager4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_6_10;
  v14[4] = v10;
  v15 = v14;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_79_1;
  block[4] = v11;
  block[5] = &v15;
  v12 = *(NSObject **)(v10 + 136);
  if (*(_QWORD *)(v10 + 144))
    dispatch_async_and_wait(v12, block);
  else
    dispatch_sync(v12, block);
}

void sub_1BF4C602C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void TraceManager::init(TraceManager *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN12TraceManager4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_6_10;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_79_1;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t TraceManager::TraceManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BasebandCrashReasonFilter *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  TraceCAReporter *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _BYTE v39[16];
  __int128 block;
  void (*v41)(uint64_t);
  void *v42;
  uint64_t *v43;
  _BYTE v44[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E7909D38;
  *(_QWORD *)(a1 + 48) = &unk_1E7909DA8;
  v9 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v39, "com.apple.telephony.abm", "trace.mgr");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v41 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v42 = &__block_descriptor_tmp_13_2;
  v43 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("trace.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v16);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    dispatch_retain(v16);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v16);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E790A470;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v44);
    *v9 = off_1E790A500;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v44);
    *v9 = off_1E790A500;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v39);
  *(_QWORD *)a1 = off_1E7909D38;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 48) = &unk_1E7909DA8;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = a1 + 216;
  *(_QWORD *)(a1 + 224) = a1 + 216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v20 = operator new(0x18uLL);
  v20[2] = 0;
  v20[1] = 0;
  *v20 = v20 + 1;
  *(_QWORD *)(a1 + 256) = v20;
  v21 = operator new(0x20uLL);
  *v21 = off_1E790A540;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v20;
  *(_QWORD *)(a1 + 264) = v21;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  v22 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v22);
  *(_QWORD *)&block = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(&block, (uint64_t)v22);
  v23 = block;
  block = 0uLL;
  v24 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v30);
  *(_QWORD *)&block = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)&block, (std::__shared_weak_count_vtbl *)v30);
  v31 = block;
  block = 0uLL;
  v32 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return a1;
}

void sub_1BF4C65D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;

  v26 = v25;
  operator delete(v26);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v19 + 304);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v19 + 288);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v19 + 272);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23);
  std::list<boost::signals2::connection>::~list(v22);
  if (*(char *)(v19 + 215) < 0)
    operator delete(*(void **)(v19 + 192));
  if (*(char *)(v19 + 191) < 0)
    operator delete(*(void **)(v19 + 168));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v21);
  ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v20);
  Service::~Service((Service *)v19);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790A470;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790A470;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void TraceManager::~TraceManager(TraceManager *this)
{
  char *v2;
  char *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  _QWORD v59[2];

  *(_QWORD *)this = off_1E7909D38;
  *((_QWORD *)this + 6) = &unk_1E7909DA8;
  v2 = (char *)this + 216;
  for (i = (char *)*((_QWORD *)this + 28); i != v2; i = (char *)*((_QWORD *)i + 1))
  {
    v4 = (unsigned int *)*((_QWORD *)i + 3);
    v59[0] = 0;
    v59[1] = v4;
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)*((_QWORD *)i + 2);
            v59[0] = v8;
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (*((_QWORD *)this + 29))
  {
    v14 = *((_QWORD *)this + 27);
    v15 = (char *)*((_QWORD *)this + 28);
    v16 = *(_QWORD *)v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    *((_QWORD *)this + 29) = 0;
    if (v15 != v2)
    {
      do
      {
        v39 = (char *)*((_QWORD *)v15 + 1);
        v40 = (unsigned int *)*((_QWORD *)v15 + 3);
        if (v40)
        {
          v41 = v40 + 3;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
            (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 24))(v40);
        }
        operator delete(v15);
        v15 = v39;
      }
      while (v39 != v2);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = *((_QWORD *)this + 11);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v20 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
LABEL_26:
    LOWORD(v59[0]) = 0;
    _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v59, 2u);
  }
LABEL_27:
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (!v33)
    goto LABEL_51;
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if (!*((_QWORD *)this + 29))
      goto LABEL_69;
  }
  else
  {
LABEL_51:
    if (!*((_QWORD *)this + 29))
      goto LABEL_69;
  }
  v36 = *((_QWORD *)this + 27);
  v37 = (char *)*((_QWORD *)this + 28);
  v38 = *(_QWORD *)v37;
  *(_QWORD *)(v38 + 8) = *(_QWORD *)(v36 + 8);
  **(_QWORD **)(v36 + 8) = v38;
  *((_QWORD *)this + 29) = 0;
  if (v37 != v2)
  {
    do
    {
      v44 = (char *)*((_QWORD *)v37 + 1);
      v45 = (unsigned int *)*((_QWORD *)v37 + 3);
      if (v45)
      {
        v46 = v45 + 3;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
          (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 24))(v45);
      }
      operator delete(v37);
      v37 = v44;
    }
    while (v44 != v2);
  }
LABEL_69:
  if (*((char *)this + 215) < 0)
  {
    operator delete(*((void **)this + 24));
    if ((*((char *)this + 191) & 0x80000000) == 0)
    {
LABEL_71:
      v49 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
      if (!v49)
        goto LABEL_79;
      goto LABEL_75;
    }
  }
  else if ((*((char *)this + 191) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(*((void **)this + 21));
  v49 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (!v49)
    goto LABEL_79;
LABEL_75:
  v50 = (unint64_t *)&v49->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
LABEL_79:
  *((_QWORD *)this + 6) = off_1E790A470;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v52 = *((_QWORD *)this + 18);
  if (v52)
    dispatch_release(v52);
  v53 = *((_QWORD *)this + 17);
  if (v53)
    dispatch_release(v53);
  v54 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  *(_QWORD *)this = off_1E7908A38;
  v55 = *((_QWORD *)this + 3);
  if (v55)
  {
    v56 = *((_QWORD *)this + 4);
    v57 = (void *)*((_QWORD *)this + 3);
    if (v56 != v55)
    {
      do
      {
        if (*(char *)(v56 - 1) < 0)
          operator delete(*(void **)(v56 - 24));
        v56 -= 24;
      }
      while (v56 != v55);
      v57 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v55;
    operator delete(v57);
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v58)
    std::__shared_weak_count::__release_weak(v58);
}

{
  void *v1;

  TraceManager::~TraceManager(this);
  operator delete(v1);
}

void sub_1BF4C6BE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr((uint64_t)&a9);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'TraceManager::~TraceManager(TraceManager *this)
{
  TraceManager::~TraceManager((TraceManager *)((char *)this - 48));
}

{
  void *v1;

  TraceManager::~TraceManager((TraceManager *)((char *)this - 48));
  operator delete(v1);
}

void ___ZN12TraceManager4initEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  CommandDriverFactory *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _BYTE *, uint64_t);
  void (*v31)(uint64_t, _WORD *, unsigned int);
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t ***v42;
  __int128 v43;
  pthread_mutex_t *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t *v48;
  int v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  _QWORD **v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  int v83;
  int v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  int v89;
  int v90;
  _QWORD *v91;
  __int128 v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t **v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t i;
  uint64_t v116;
  unsigned int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t **v120;
  int v121;
  int v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  BOOL v127;
  BOOL v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t **v131;
  uint64_t **v132;
  int v133;
  uint64_t ***v134;
  BOOL v135;
  BOOL v136;
  uint64_t ***v137;
  int v138;
  BOOL v139;
  int v140;
  uint64_t *v141;
  uint64_t *v142;
  int v143;
  uint64_t **v144;
  int v145;
  int v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  int *v165;
  int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  _QWORD *v171;
  uint64_t **v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int *v176;
  uint64_t *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  BOOL v187;
  BOOL v188;
  uint64_t *v189;
  int v190;
  uint64_t *v191;
  _QWORD *v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int *v199;
  const void *v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  char *v207;
  char *v208;
  unsigned int *v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int v215;
  void (*v216)(__int128 *, __int128 *, uint64_t);
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  int v221;
  int v222;
  unsigned int *v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unint64_t *v231;
  unint64_t v232;
  _OWORD *v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t *v238;
  unint64_t v239;
  const void *v240;
  size_t v241;
  size_t v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  NSObject *global_queue;
  unsigned int *v248;
  unsigned int v249;
  unsigned int v250;
  void *v251;
  uint64_t **v252;
  void *v253;
  const void *v254;
  _QWORD *v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  uint64_t ***v258;
  _QWORD block[6];
  std::__shared_weak_count *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  __int128 v265;
  _QWORD aBlock[7];
  dispatch_object_t v267;
  void *v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  dispatch_object_t v273;
  void *v274;
  dispatch_object_t object;
  void *v276;
  unint64_t v277;
  unint64_t v278;
  void *v279;
  _BYTE buf[32];
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  unint64_t v289;
  void *__p;
  uint64_t v291;
  pthread_mutex_t *v292;
  uint64_t v293;

  v293 = *MEMORY[0x1E0C80C00];
  v255 = *(_QWORD **)(a1 + 32);
  v1 = v255[11];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v5 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = off_1ED70FD08;
  }
  block[5] = v3;
  v260 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 16))(&v261, v3);
  v263 = 0;
  v264 = 0;
  if (v262 && (v264 = std::__shared_weak_count::lock(v262)) != 0)
  {
    v13 = v261;
    v263 = v261;
  }
  else
  {
    v13 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_76_1;
  aBlock[4] = v255 + 15;
  aBlock[5] = TraceManager::handleDumpLogsIndication_sync;
  aBlock[6] = 0;
  v14 = _Block_copy(aBlock);
  v257 = v13;
  v15 = (std::__shared_weak_count *)v255[16];
  if (!v15 || (v16 = v255[15], (v256 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v255[17];
  v267 = v17;
  v254 = v14;
  if (v14)
    v18 = _Block_copy(v14);
  else
    v18 = 0;
  v268 = v18;
  dispatch_retain(v17);
  v269 = 0u;
  v270 = 0u;
  v273 = v17;
  if (v18)
    v18 = _Block_copy(v18);
  v274 = v18;
  dispatch_retain(v17);
  object = v17;
  if (!v18)
  {
    v276 = 0;
    dispatch_retain(v17);
    goto LABEL_38;
  }
  v19 = _Block_copy(v18);
  v276 = v19;
  dispatch_retain(v17);
  if (!v19)
  {
LABEL_38:
    dispatch_retain(v17);
    v277 = 0;
    goto LABEL_39;
  }
  v20 = _Block_copy(v19);
  dispatch_retain(v17);
  v277 = 0;
  if (!v20)
  {
LABEL_39:
    dispatch_retain(v17);
    v251 = 0;
    v25 = 1;
LABEL_40:
    dispatch_retain(v17);
    v253 = 0;
    v26 = 1;
LABEL_41:
    dispatch_retain(v17);
    v22 = 0;
    v27 = 1;
LABEL_42:
    dispatch_retain(v17);
    v23 = 0;
    v278 = (unint64_t)v17;
    v28 = 1;
    goto LABEL_43;
  }
  v21 = _Block_copy(v20);
  dispatch_retain(v17);
  v251 = v20;
  if (!v21)
  {
    v25 = 0;
    goto LABEL_40;
  }
  v22 = _Block_copy(v21);
  dispatch_retain(v17);
  v253 = v21;
  if (!v22)
  {
    v25 = 0;
    v26 = 0;
    goto LABEL_41;
  }
  v23 = _Block_copy(v22);
  dispatch_retain(v17);
  if (!v23)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_42;
  }
  v24 = _Block_copy(v23);
  dispatch_retain(v17);
  v278 = (unint64_t)v17;
  if (v24)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v279 = _Block_copy(v24);
    dispatch_retain(v17);
    dispatch_release(v17);
    _Block_release(v24);
    goto LABEL_44;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
LABEL_43:
  v279 = 0;
  dispatch_retain(v17);
  dispatch_release(v17);
LABEL_44:
  dispatch_release(v17);
  if ((v28 & 1) == 0)
    _Block_release(v23);
  dispatch_release(v17);
  if ((v27 & 1) == 0)
    _Block_release(v22);
  v277 = (unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>)::stored_vtable;
  dispatch_release(v17);
  if ((v26 & 1) == 0)
    _Block_release(v253);
  dispatch_release(v17);
  if ((v25 & 1) == 0)
    _Block_release(v251);
  *(_QWORD *)buf = 0;
  memset(&buf[8], 170, 24);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)buf, (uint64_t *)&v277);
  v29 = v16;
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v277, (uint64_t *)&v270 + 1);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v270 + 8, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      v30 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v30)
        v30(&buf[8], &buf[8], 2);
    }
  }
  if (v277)
  {
    if ((v277 & 1) == 0)
    {
      v31 = *(void (**)(uint64_t, _WORD *, unsigned int))(v277 & 0xFFFFFFFFFFFFFFFELL);
      if (v31)
        v31((uint64_t)&v278, &v278, 2u);
    }
    v277 = 0;
  }
  dispatch_release(object);
  if (v276)
    _Block_release(v276);
  dispatch_release(v273);
  if (v274)
    _Block_release(v274);
  p_shared_weak_owners = (unint64_t *)&v256->__shared_weak_owners_;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = operator new(0x18uLL);
  *v34 = &off_1E790A7E8;
  v34[1] = v16;
  v34[2] = v256;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = operator new(0x18uLL);
  v37 = v36;
  *v36 = &off_1E790A7E8;
  v36[1] = v16;
  v36[2] = v256;
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  *(_QWORD *)&buf[8] = v36;
  *(_DWORD *)buf = 2;
  v39 = *((_QWORD *)&v269 + 1);
  if (*((_QWORD *)&v269 + 1) < (unint64_t)v270)
  {
    v40 = operator new(0x18uLL);
    *v40 = &off_1E790A7E8;
    v40[1] = v29;
    v40[2] = v256;
    do
      v41 = __ldxr(p_shared_weak_owners);
    while (__stxr(v41 + 1, p_shared_weak_owners));
    *(_QWORD *)(v39 + 8) = v40;
    *(_DWORD *)v39 = 2;
    *((_QWORD *)&v269 + 1) = v39 + 24;
LABEL_75:
    (*(void (**)(_QWORD *))(*v37 + 8))(v37);
    goto LABEL_76;
  }
  v165 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)&v269, (uint64_t)buf);
  v166 = *(_DWORD *)buf ^ (*(int *)buf >> 31);
  *((_QWORD *)&v269 + 1) = v165;
  if (v166 == 2)
  {
    v37 = *(_QWORD **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_76;
    goto LABEL_75;
  }
  if (v166 == 1)
  {
    v167 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v168 = (unsigned int *)(*(_QWORD *)&buf[16] + 12);
      do
      {
        v169 = __ldaxr(v168);
        v170 = v169 - 1;
      }
      while (__stlxr(v170, v168));
      if (!v170)
LABEL_285:
        (*(void (**)(uint64_t))(*(_QWORD *)v167 + 24))(v167);
    }
  }
  else
  {
    v167 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v248 = (unsigned int *)(*(_QWORD *)&buf[16] + 12);
      do
      {
        v249 = __ldaxr(v248);
        v250 = v249 - 1;
      }
      while (__stlxr(v250, v248));
      if (!v250)
        goto LABEL_285;
    }
  }
LABEL_76:
  (*(void (**)(_QWORD *))(*v34 + 8))(v34);
  std::__shared_weak_count::__release_weak(v256);
  v42 = *(uint64_t ****)(v257 + 112);
  *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v287 = v43;
  v288 = v43;
  v285 = v43;
  v286 = v43;
  v283 = v43;
  v284 = v43;
  v281 = v43;
  v282 = v43;
  *(_OWORD *)buf = v43;
  *(_OWORD *)&buf[16] = v43;
  v44 = (pthread_mutex_t *)v42[3];
  v289 = 10;
  __p = buf;
  v291 = 0;
  v292 = v44;
  pthread_mutex_lock(v44);
  v277 = 0xAAAAAAAAAAAAAAAALL;
  v278 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (unsigned int *)v42[1];
  v258 = v42;
  if (!v45 || (v46 = atomic_load(v45 + 2), v46 != 1))
  {
    v50 = (uint64_t **)operator new(0x20uLL);
    v51 = (uint64_t *)*v42;
    v52 = *v51;
    v252 = v50;
    v53 = operator new(0x40uLL);
    v54 = v53;
    *v53 = v53;
    v53[1] = v53;
    v53[2] = 0;
    v55 = *(_QWORD **)(v52 + 8);
    if (v55 != (_QWORD *)v52)
    {
      v56 = 0;
      v57 = v53;
      do
      {
        v58 = operator new(0x20uLL);
        v58[2] = v55[2];
        v59 = v55[3];
        v58[3] = v59;
        if (v59)
        {
          v60 = (unsigned int *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
          v57 = (_QWORD *)*v54;
          v56 = v54[2];
        }
        *v58 = v57;
        v58[1] = v54;
        v57[1] = v58;
        *v54 = v58;
        v54[2] = ++v56;
        v55 = (_QWORD *)v55[1];
        v57 = v58;
      }
      while (v55 != (_QWORD *)v52);
    }
    v54[3] = 0;
    v62 = (_QWORD **)(v54 + 3);
    v54[4] = 0;
    v63 = v54 + 4;
    v54[5] = 0;
    *((_BYTE *)v54 + 48) = *(_BYTE *)(v52 + 48);
    v54[3] = v54 + 4;
    v64 = *(_QWORD **)(v52 + 24);
    v65 = (_QWORD *)(v52 + 32);
    if (v64 == (_QWORD *)(v52 + 32))
    {
LABEL_88:
      *((_BYTE *)v54 + 56) = *(_BYTE *)(v52 + 56);
      v66 = *(_QWORD **)(v52 + 24);
      if (v66 != v65)
      {
        v67 = (_QWORD *)v54[3];
        v68 = v54[1];
        do
        {
          v67[6] = v68;
          v69 = v52;
          if (v66 != v65)
            v69 = v66[6];
          v70 = (_QWORD *)v66[1];
          v71 = v70;
          v72 = v66;
          if (v70)
          {
            do
            {
              v73 = v71;
              v71 = (_QWORD *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v73 = (_QWORD *)v72[2];
              v127 = *v73 == (_QWORD)v72;
              v72 = v73;
            }
            while (!v127);
          }
          v74 = v52;
          if (v73 != v65)
            v74 = v73[6];
          while (v69 != v74)
          {
            v69 = *(_QWORD *)(v69 + 8);
            v68 = *(_QWORD *)(v68 + 8);
          }
          if (v70)
          {
            do
            {
              v75 = v70;
              v70 = (_QWORD *)*v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              v75 = (_QWORD *)v66[2];
              v127 = *v75 == (_QWORD)v66;
              v66 = v75;
            }
            while (!v127);
          }
          v76 = (_QWORD *)v67[1];
          if (v76)
          {
            do
            {
              v77 = v76;
              v76 = (_QWORD *)*v76;
            }
            while (v76);
          }
          else
          {
            do
            {
              v77 = (_QWORD *)v67[2];
              v127 = *v77 == (_QWORD)v67;
              v67 = v77;
            }
            while (!v127);
          }
          v66 = v75;
          v67 = v77;
        }
        while (v75 != v65);
      }
      *v252 = v54;
      v252[1] = 0;
      v97 = (uint64_t *)operator new(0x18uLL);
      v97[1] = 0x100000001;
      *v97 = (uint64_t)off_1E790A610;
      v97[2] = (uint64_t)v54;
      v252[1] = v97;
      v252[2] = (uint64_t *)v51[2];
      v98 = v51[3];
      v252[3] = (uint64_t *)v98;
      if (v98)
      {
        v99 = (unsigned int *)(v98 + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      v101 = (uint64_t **)operator new(0x18uLL);
      v101[1] = (uint64_t *)0x100000001;
      *v101 = (uint64_t *)off_1E790A5B0;
      v101[2] = (uint64_t *)v252;
      v102 = (unsigned int *)v258[1];
      *v258 = v252;
      v258[1] = v101;
      if (v102)
      {
        v103 = v102 + 2;
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 16))(v102);
          v106 = v102 + 3;
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
            (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 24))(v102);
        }
      }
      v49 = 0;
      v47 = **v258;
LABEL_172:
      v48 = (uint64_t *)v47[1];
      if (v47 == v48)
        goto LABEL_276;
      goto LABEL_173;
    }
    while (1)
    {
      v78 = *((_DWORD *)v64 + 8);
      v79 = (_QWORD *)*v63;
      v80 = v54 + 4;
      if (*v62 != v63)
      {
        v81 = (_QWORD *)*v63;
        v82 = v54 + 4;
        if (v79)
        {
          do
          {
            v80 = v81;
            v81 = (_QWORD *)v81[1];
          }
          while (v81);
        }
        else
        {
          do
          {
            v80 = (_QWORD *)v82[2];
            v127 = *v80 == (_QWORD)v82;
            v82 = v80;
          }
          while (v127);
        }
        v83 = *((_DWORD *)v64 + 10);
        v84 = *((_DWORD *)v80 + 8);
        if (v84 == v78)
        {
          if (v78 != 1)
            goto LABEL_133;
          if (*((_DWORD *)v80 + 10) >= v83)
          {
            v85 = (_QWORD *)*v63;
            v86 = v54 + 4;
            v87 = v54 + 4;
            if (v79)
              goto LABEL_137;
LABEL_144:
            v91 = operator new(0x38uLL);
            v92 = *((_OWORD *)v64 + 2);
            v91[6] = v64[6];
            *((_OWORD *)v91 + 2) = v92;
            *v91 = 0;
            v91[1] = 0;
            v91[2] = v87;
            *v86 = v91;
            v93 = (_QWORD *)**v62;
            if (v93)
            {
              *v62 = v93;
              v91 = (_QWORD *)*v86;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v54[4], v91);
            ++v54[5];
            goto LABEL_147;
          }
        }
        else if (v84 >= v78)
        {
LABEL_133:
          v86 = v54 + 4;
          v87 = v54 + 4;
          if (!v79)
            goto LABEL_144;
          v85 = (_QWORD *)*v63;
          if (v78 != 1)
          {
            v88 = *((_DWORD *)v79 + 8);
            v87 = (_QWORD *)*v63;
            while (v78 != v88)
            {
              if (v78 < v88)
              {
                v96 = *v87;
                v86 = v87;
                if (!*v87)
                  goto LABEL_144;
              }
              else
              {
                if (v88 >= v78)
                  goto LABEL_147;
                v96 = v87[1];
                if (!v96)
                  goto LABEL_143;
              }
              v88 = *(_DWORD *)(v96 + 32);
              v87 = (_QWORD *)v96;
            }
            goto LABEL_147;
          }
          while (1)
          {
LABEL_137:
            v87 = v85;
            v89 = *((_DWORD *)v85 + 8);
            if (v89 == 1)
            {
              v90 = *((_DWORD *)v85 + 10);
              if (v90 > v83)
                goto LABEL_136;
              if (v90 >= v83)
                goto LABEL_147;
            }
            else if (v89 > 1)
            {
LABEL_136:
              v85 = (_QWORD *)*v85;
              v86 = v87;
              if (!*v87)
                goto LABEL_144;
              continue;
            }
            v85 = (_QWORD *)v85[1];
            if (!v85)
            {
LABEL_143:
              v86 = v87 + 1;
              goto LABEL_144;
            }
          }
        }
      }
      if (v79)
        v87 = v80;
      else
        v87 = v54 + 4;
      if (v79)
        v86 = v80 + 1;
      else
        v86 = v54 + 4;
      if (!*v86)
        goto LABEL_144;
LABEL_147:
      v94 = (_QWORD *)v64[1];
      if (v94)
      {
        do
        {
          v95 = v94;
          v94 = (_QWORD *)*v94;
        }
        while (v94);
      }
      else
      {
        do
        {
          v95 = (_QWORD *)v64[2];
          v127 = *v95 == (_QWORD)v64;
          v64 = v95;
        }
        while (!v127);
      }
      v64 = v95;
      if (v95 == v65)
        goto LABEL_88;
    }
  }
  v47 = **v42;
  v48 = (uint64_t *)v42[2];
  v49 = 2;
  if (v48 == v47)
    goto LABEL_172;
LABEL_173:
  v109 = 0;
  v110 = v49 - 1;
  do
  {
    v113 = v48[2];
    v114 = *(uint64_t **)(v113 + 32);
    if (v114)
    {
      for (i = *v114; i != v114[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
            goto LABEL_190;
        }
        else
        {
          v116 = *(_QWORD *)(i + 16);
          if (!v116 || (v117 = atomic_load((unsigned int *)(v116 + 8))) == 0)
          {
LABEL_190:
            if (*(_BYTE *)(v113 + 24))
            {
              *(_BYTE *)(v113 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v113, buf);
            }
            break;
          }
        }
      }
    }
    v111 = v48[2];
    if (*(_BYTE *)(v111 + 24))
    {
      v47 = (uint64_t *)v48[1];
      goto LABEL_176;
    }
    v118 = **v258;
    v120 = (uint64_t **)(v118 + 4);
    v119 = v118[4];
    if (!v119)
    {
      if ((uint64_t *)v118[10] != v48)
        goto LABEL_267;
      v142 = (uint64_t *)v48[1];
      v144 = (uint64_t **)(v118 + 4);
      v123 = v118 + 4;
      if (v142 != v118)
        goto LABEL_263;
LABEL_245:
      v147 = (uint64_t *)v123[1];
      v148 = v123;
      if (v147)
      {
        do
        {
          v149 = v147;
          v147 = (uint64_t *)*v147;
        }
        while (v147);
      }
      else
      {
        do
        {
          v149 = (uint64_t *)v148[2];
          v127 = *v149 == (_QWORD)v148;
          v148 = v149;
        }
        while (!v127);
      }
      if ((uint64_t *)v118[3] == v123)
        v118[3] = (uint64_t)v149;
      --v118[5];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v119, v123);
      operator delete(v123);
      goto LABEL_267;
    }
    v121 = *(_DWORD *)(v111 + 64);
    v122 = *(_DWORD *)(v111 + 72);
    v123 = v118 + 4;
    v124 = v118[4];
    if (v121 == 1)
    {
      v123 = v118 + 4;
      v125 = v118[4];
      do
      {
        while (1)
        {
          v138 = *(_DWORD *)(v125 + 32);
          v139 = v138 < 1;
          if (v138 == 1)
            v139 = *(_DWORD *)(v125 + 40) < v122;
          if (v139)
            break;
          v123 = (uint64_t *)v125;
          v125 = *(_QWORD *)v125;
          if (!v125)
            goto LABEL_205;
        }
        v125 = *(_QWORD *)(v125 + 8);
      }
      while (v125);
    }
    else
    {
      do
      {
        v126 = *(_DWORD *)(v124 + 32);
        v127 = v126 == v121;
        v128 = v126 < v121;
        if (v126 >= v121)
          v129 = (uint64_t *)v124;
        else
          v129 = (uint64_t *)(v124 + 8);
        if (v128)
          v130 = v123;
        else
          v130 = (uint64_t *)v124;
        if (v127)
        {
          v129 = (uint64_t *)v124;
          v123 = (uint64_t *)v124;
        }
        else
        {
          v123 = v130;
        }
        v124 = *v129;
      }
      while (*v129);
    }
LABEL_205:
    if ((uint64_t *)v123[6] != v48)
      goto LABEL_267;
    v131 = (uint64_t **)(v118 + 4);
    v132 = (uint64_t **)v118[4];
    if (v121 == 1)
    {
      while (1)
      {
        v140 = *((_DWORD *)v132 + 8);
        if (v140 == 1)
        {
          if (v122 < *((_DWORD *)v132 + 10))
            goto LABEL_228;
LABEL_223:
          v132 = (uint64_t **)v132[1];
          if (!v132)
            goto LABEL_229;
        }
        else
        {
          if (v140 <= 1)
            goto LABEL_223;
LABEL_228:
          v131 = v132;
          v132 = (uint64_t **)*v132;
          if (!v132)
            goto LABEL_229;
        }
      }
    }
    do
    {
      v133 = *((_DWORD *)v132 + 8);
      v134 = (uint64_t ***)(v132 + 1);
      v135 = v121 == v133;
      v136 = v121 < v133;
      if (v121 >= v133)
        v137 = (uint64_t ***)(v132 + 1);
      else
        v137 = (uint64_t ***)v132;
      if (!v136)
        v132 = v131;
      if (v135)
        v137 = v134;
      else
        v131 = v132;
      v132 = *v137;
    }
    while (*v137);
LABEL_229:
    v141 = **v258;
    if (v131 != v120)
      v141 = v131[6];
    v142 = (uint64_t *)v48[1];
    if (v142 == v141)
      goto LABEL_245;
    if (v121 == 1)
    {
      while (1)
      {
        while (1)
        {
          v144 = (uint64_t **)v119;
          v145 = *(_DWORD *)(v119 + 32);
          if (v145 == 1)
            break;
          if (v145 <= 1)
            goto LABEL_241;
LABEL_235:
          v119 = *(_QWORD *)v119;
          if (!*v144)
          {
            v120 = v144;
            goto LABEL_263;
          }
        }
        v146 = *(_DWORD *)(v119 + 40);
        if (v146 > v122)
          goto LABEL_235;
        if (v146 >= v122)
        {
          *(_QWORD *)(v119 + 48) = v142;
          goto LABEL_267;
        }
LABEL_241:
        v119 = *(_QWORD *)(v119 + 8);
        if (!v119)
        {
          v120 = v144 + 1;
          goto LABEL_263;
        }
      }
    }
    v143 = *(_DWORD *)(v119 + 32);
    if (v121 == v143)
      goto LABEL_266;
    while (v121 >= v143)
    {
      if (v143 >= v121)
        goto LABEL_266;
      v150 = *(_QWORD *)(v119 + 8);
      if (!v150)
      {
        v120 = (uint64_t **)(v119 + 8);
        goto LABEL_262;
      }
LABEL_254:
      v143 = *(_DWORD *)(v150 + 32);
      v119 = v150;
      if (v121 == v143)
      {
        *(_QWORD *)(v150 + 48) = v142;
        goto LABEL_267;
      }
    }
    v150 = *(_QWORD *)v119;
    if (*(_QWORD *)v119)
      goto LABEL_254;
    v120 = (uint64_t **)v119;
LABEL_262:
    v144 = (uint64_t **)v119;
LABEL_263:
    v119 = (uint64_t)operator new(0x38uLL);
    v151 = *(_QWORD *)(v111 + 64);
    *(_DWORD *)(v119 + 40) = *(_DWORD *)(v111 + 72);
    *(_QWORD *)(v119 + 32) = v151;
    *(_QWORD *)(v119 + 48) = 0;
    *(_QWORD *)v119 = 0;
    *(_QWORD *)(v119 + 8) = 0;
    *(_QWORD *)(v119 + 16) = v144;
    *v120 = (uint64_t *)v119;
    v152 = *(_QWORD *)v118[3];
    v153 = (uint64_t *)v119;
    if (v152)
    {
      v118[3] = v152;
      v153 = *v120;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v118[4], v153);
    ++v118[5];
LABEL_266:
    *(_QWORD *)(v119 + 48) = v142;
LABEL_267:
    v154 = *v48;
    v47 = (uint64_t *)v48[1];
    *(_QWORD *)(v154 + 8) = v47;
    *(_QWORD *)v48[1] = v154;
    --v118[2];
    v155 = (unsigned int *)v48[3];
    if (v155)
    {
      v156 = v155 + 2;
      do
      {
        v157 = __ldaxr(v156);
        v158 = v157 - 1;
      }
      while (__stlxr(v158, v156));
      if (!v158)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v155 + 16))(v155);
        v159 = v155 + 3;
        do
        {
          v160 = __ldaxr(v159);
          v161 = v160 - 1;
        }
        while (__stlxr(v161, v159));
        if (!v161)
          (*(void (**)(unsigned int *))(*(_QWORD *)v155 + 24))(v155);
      }
    }
    operator delete(v48);
LABEL_176:
    v112 = v47 != **v258 && v110 >= ++v109;
    v48 = v47;
  }
  while (v112);
LABEL_276:
  v258[2] = (uint64_t **)v47;
  v162 = operator new(0x50uLL);
  v162[1] = 0;
  v162[2] = 0;
  *((_BYTE *)v162 + 24) = 1;
  *((_DWORD *)v162 + 7) = 1;
  *v162 = off_1E790A670;
  v163 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v163, (uint64_t *)&v269);
  v163[3] = 0;
  v164 = *((_QWORD *)&v270 + 1);
  if (*((_QWORD *)&v270 + 1))
  {
    v163[3] = *((_QWORD *)&v270 + 1);
    if ((v164 & 1) != 0)
    {
      *((_OWORD *)v163 + 2) = v271;
      v163[6] = v272;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v164 & 0xFFFFFFFFFFFFFFFELL))(&v271, v163 + 4, 0);
    }
  }
  v162[4] = v163;
  v162[5] = 0;
  v171 = operator new(0x18uLL);
  v171[1] = 0x100000001;
  *v171 = off_1E790A6C8;
  v171[2] = v163;
  v162[5] = v171;
  v162[6] = v258[3];
  v172 = v258[4];
  v162[7] = v172;
  if (v172)
  {
    v173 = (unsigned int *)(v172 + 1);
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  *((_DWORD *)v162 + 16) = 0;
  *((_BYTE *)v162 + 68) = 0;
  v277 = (unint64_t)v162;
  v175 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v175 + 1) = 0x100000001;
  v176 = v175 + 2;
  *(_QWORD *)v175 = off_1E790A728;
  *((_QWORD *)v175 + 2) = v162;
  v278 = (unint64_t)v175;
  v177 = **v258;
  v178 = operator new(0x20uLL);
  v179 = v178;
  v180 = v177 + 4;
  v178[2] = v162;
  v178[3] = v175;
  do
    v181 = __ldxr(v176);
  while (__stxr(v181 + 1, v176));
  v182 = *v177;
  *(_QWORD *)(v182 + 8) = v178;
  *v178 = v182;
  *v177 = (uint64_t)v178;
  v178[1] = v177;
  ++v177[2];
  v183 = (uint64_t *)v177[4];
  if (v183)
  {
    v184 = v177 + 4;
    v185 = v177[4];
    do
    {
      v186 = *(_DWORD *)(v185 + 32);
      v187 = v186 == 2;
      v188 = v186 < 2;
      if (v186 >= 2)
        v189 = (uint64_t *)v185;
      else
        v189 = (uint64_t *)(v185 + 8);
      if (!v188)
        v184 = (uint64_t *)v185;
      if (v187)
      {
        v189 = (uint64_t *)v185;
        v184 = (uint64_t *)v185;
      }
      v185 = *v189;
    }
    while (*v189);
    if (v184 == v180 || *((_DWORD *)v184 + 8) != 2)
    {
      v190 = *((_DWORD *)v183 + 8);
      while (v190 != 2)
      {
        if (v190 < 3)
        {
          v191 = (uint64_t *)v183[1];
          if (!v191)
          {
            v180 = v183 + 1;
            goto LABEL_313;
          }
        }
        else
        {
          v191 = (uint64_t *)*v183;
          v180 = v183;
          if (!*v183)
            goto LABEL_313;
        }
        v190 = *((_DWORD *)v191 + 8);
        v183 = v191;
      }
    }
    *((_DWORD *)v162 + 16) = 2;
    *(_QWORD *)((char *)v162 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_316:
    v194 = v175 + 3;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
    *(_QWORD *)&v265 = v162;
    *((_QWORD *)&v265 + 1) = v175;
    do
      v196 = __ldxr(v194);
    while (__stxr(v196 + 1, v194));
    do
    {
      v197 = __ldaxr(v194);
      v198 = v197 - 1;
    }
    while (__stlxr(v198, v194));
    if (!v198)
      (*(void (**)(unsigned int *))(*(_QWORD *)v175 + 24))(v175);
    v199 = (unsigned int *)v278;
    v200 = v254;
    if (v278)
      goto LABEL_324;
  }
  else
  {
    v183 = v177 + 4;
LABEL_313:
    v192 = operator new(0x38uLL);
    v192[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v192 + 10) = -1431655766;
    v192[6] = v179;
    *v192 = 0;
    v192[1] = 0;
    v192[2] = v183;
    *v180 = (uint64_t)v192;
    v193 = *(_QWORD *)v177[3];
    if (v193)
    {
      v177[3] = v193;
      v192 = (_QWORD *)*v180;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v177[4], v192);
    ++v177[5];
    v162 = (_QWORD *)v277;
    v175 = (unsigned int *)v278;
    *(_DWORD *)(v277 + 64) = 2;
    *(_QWORD *)((char *)v162 + 68) = 0xAAAAAAAAAAAAAA00;
    if (v175)
      goto LABEL_316;
    v265 = (unint64_t)v162;
    v199 = (unsigned int *)v278;
    v200 = v254;
    if (v278)
    {
LABEL_324:
      v201 = v199 + 2;
      do
      {
        v202 = __ldaxr(v201);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, v201));
      if (!v203)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v199 + 16))(v199);
        v204 = v199 + 3;
        do
        {
          v205 = __ldaxr(v204);
          v206 = v205 - 1;
        }
        while (__stlxr(v206, v204));
        if (!v206)
          (*(void (**)(unsigned int *))(*(_QWORD *)v199 + 24))(v199);
      }
    }
  }
  pthread_mutex_unlock(v292);
  v207 = (char *)__p;
  if (__p)
  {
    if (v291 - 1 >= 0)
    {
      v208 = (char *)__p + 16 * v291;
      do
      {
        v209 = (unsigned int *)*((_QWORD *)v208 - 1);
        if (v209)
        {
          v210 = v209 + 2;
          do
          {
            v211 = __ldaxr(v210);
            v212 = v211 - 1;
          }
          while (__stlxr(v212, v210));
          if (!v212)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v209 + 16))(v209);
            v213 = v209 + 3;
            do
            {
              v214 = __ldaxr(v213);
              v215 = v214 - 1;
            }
            while (__stlxr(v215, v213));
            if (!v215)
              (*(void (**)(unsigned int *))(*(_QWORD *)v209 + 24))(v209);
          }
        }
        v208 -= 16;
      }
      while (v208 > v207);
    }
    if (v289 >= 0xB)
      operator delete(__p);
  }
  if (*((_QWORD *)&v270 + 1))
  {
    if ((BYTE8(v270) & 1) == 0)
    {
      v216 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v270 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v216)
        v216(&v271, &v271, 2);
    }
    *((_QWORD *)&v270 + 1) = 0;
  }
  v217 = v269;
  if (!(_QWORD)v269)
    goto LABEL_371;
  v218 = *((_QWORD *)&v269 + 1);
  v219 = (void *)v269;
  if (*((_QWORD *)&v269 + 1) == (_QWORD)v269)
    goto LABEL_370;
  v220 = *((_QWORD *)&v269 + 1);
  while (2)
  {
    v221 = *(_DWORD *)(v220 - 24);
    v220 -= 24;
    v222 = v221 ^ (v221 >> 31);
    if (v222 == 2)
    {
      v227 = *(_QWORD *)(v218 - 16);
      if (v227)
        (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
    }
    else if (v222 == 1)
    {
      v223 = *(unsigned int **)(v218 - 8);
      if (v223)
      {
        v224 = v223 + 3;
        do
        {
          v225 = __ldaxr(v224);
          v226 = v225 - 1;
        }
        while (__stlxr(v226, v224));
        if (!v226)
          goto LABEL_361;
      }
    }
    else
    {
      v223 = *(unsigned int **)(v218 - 8);
      if (v223)
      {
        v228 = v223 + 3;
        do
        {
          v229 = __ldaxr(v228);
          v230 = v229 - 1;
        }
        while (__stlxr(v230, v228));
        if (!v230)
LABEL_361:
          (*(void (**)(unsigned int *))(*(_QWORD *)v223 + 24))(v223);
      }
    }
    v218 = v220;
    if (v220 != v217)
      continue;
    break;
  }
  v219 = (void *)v269;
LABEL_370:
  *((_QWORD *)&v269 + 1) = v217;
  operator delete(v219);
LABEL_371:
  dispatch_release(v267);
  if (v268)
    _Block_release(v268);
  v231 = (unint64_t *)&v256->__shared_owners_;
  do
    v232 = __ldaxr(v231);
  while (__stlxr(v232 - 1, v231));
  if (v232)
  {
    if (!v200)
      goto LABEL_380;
LABEL_379:
    _Block_release(v200);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
    if (v200)
      goto LABEL_379;
  }
LABEL_380:
  v233 = operator new(0x20uLL);
  v233[1] = v265;
  v265 = 0uLL;
  *((_QWORD *)v233 + 1) = v255 + 27;
  v234 = v255[27];
  *(_QWORD *)v233 = v234;
  *(_QWORD *)(v234 + 8) = v233;
  v255[27] = v233;
  ++v255[29];
  v235 = v264;
  if (v264)
  {
    v236 = (unint64_t *)&v264->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  if (v262)
    std::__shared_weak_count::__release_weak(v262);
  if (v260)
  {
    v238 = &v260->__shared_owners_;
    do
      v239 = __ldaxr((unint64_t *)v238);
    while (__stlxr(v239 - 1, (unint64_t *)v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v240 = (const void *)*MEMORY[0x1E0D01A18];
  v241 = strlen((const char *)*MEMORY[0x1E0D01A18]);
  if (v241 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v242 = v241;
  if (v241 >= 0x17)
  {
    v244 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v241 | 7) != 0x17)
      v244 = v241 | 7;
    v245 = v244 + 1;
    v243 = operator new(v244 + 1);
    *(_QWORD *)&buf[8] = v242;
    *(_QWORD *)&buf[16] = v245 | 0x8000000000000000;
    *(_QWORD *)buf = v243;
    goto LABEL_399;
  }
  buf[23] = v241;
  v243 = buf;
  if (v241)
LABEL_399:
    memmove(v243, v240, v242);
  v246 = MEMORY[0x1E0C809B0];
  v243[v242] = 0;
  support::fs::createDir(buf, 0x1EDu, 1);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = v246;
  block[1] = 0x40000000;
  block[2] = ___ZN12TraceManager4initEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_36;
  block[4] = v255;
  dispatch_async(global_queue, block);
}

void sub_1BF4C830C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF4C8318(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8324(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8330(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C833C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8348(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8354(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8360(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C836C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8378(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  boost::signals2::detail::connection_body_base *v55;
  unsigned int *v56;
  void *v57;

  if (a2)
  {
    if (*(_QWORD *)v56)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v56, *(_QWORD *)v56);
      operator delete(*(void **)v56);
    }
    operator delete(v56);
    boost::signals2::detail::connection_body_base::~connection_body_base(v55);
    operator delete(v57);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot((uint64_t)&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1BF4C8BBCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C83A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C83B4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF4C83C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C83D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C83E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C83EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C83F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::~variant((uint64_t)&a55);
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    std::__shared_weak_count::__release_weak(a14);
    JUMPOUT(0x1BF4C8BACLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8414(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8420(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C842C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8438(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8444(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8450(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C845C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8468(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8474(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8480(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C848C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8498(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C84A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v10 = (unsigned int *)__p[3];
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
        v14 = v10 + 3;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 24))(v10);
      }
    }
    v17 = (unsigned int *)__p[1];
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
        v21 = v17 + 3;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 24))(v17);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C857C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8588(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8594(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot((uint64_t)&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1BF4C8BBCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C85A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C85B0(_Unwind_Exception *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v2[4]);
    if (v2[2])
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t *)v2[1];
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v2 + 8);
      *(_QWORD *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (unsigned int *)v4[3];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8678(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8684(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a2)
  {
    __cxa_end_catch();
    v10 = *(unsigned int **)(a10 + 8);
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
        v14 = v10 + 3;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 24))(v10);
      }
    }
    JUMPOUT(0x1BF4C8B0CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C86F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C86FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8708(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF4C8B0CLL);
  _Unwind_Resume(a1);
}

void sub_1BF4C8714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,char a27)
{
  boost::signals2::connection::~connection((boost::signals2::connection *)&a27);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1BF4C8760(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C876C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8794(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot((uint64_t)&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1BF4C8BBCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C87A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C87B0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8814(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8820(_Unwind_Exception *a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF4C8B0CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8888(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8894(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C88A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF4C88A8);
  _Unwind_Resume(a1);
}

void sub_1BF4C88B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF4C88BCLL);
  _Unwind_Resume(a1);
}

void sub_1BF4C88C8(_Unwind_Exception *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x218];
    if (STACK[0x218])
    {
      if ((uint64_t)(STACK[0x220] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x220];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x210] >= 0xB)
        operator delete((void *)STACK[0x218]);
    }
    JUMPOUT(0x1BF4C8BACLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C896C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8978(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF4C8988);
  _Unwind_Resume(a1);
}

void sub_1BF4C8998(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF4C89A0);
  _Unwind_Resume(a1);
}

void sub_1BF4C89AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C89CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C89D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C89E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C89F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&a51);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot((uint64_t)&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1BF4C8BBCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8A08(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  void (*v55)(uint64_t *, uint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::~function1(&a55);
    boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a49);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a47);
    if (a42)
    {
      if ((a42 & 1) == 0)
      {
        v55 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a42 & 0xFFFFFFFFFFFFFFFELL);
        if (v55)
          v55(&a43, &a43, 2);
      }
      a42 = 0;
    }
    if (__p)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&__p, (uint64_t)__p);
      operator delete(__p);
    }
    JUMPOUT(0x1BF4C8BB4);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8A8C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8A98(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8AA8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8AB4(_Unwind_Exception *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(v2);
    operator delete(v2);
    JUMPOUT(0x1BF4C8B08);
  }
  _Unwind_Resume(a1);
}

void sub_1BF4C8B88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF4C8B94(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (!a2)
    JUMPOUT(0x1BF4C8B9CLL);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&a55);
  boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot(&a37);
  JUMPOUT(0x1BF4C8BBCLL);
}

void TraceManager::handleDumpLogsIndication_sync(uint64_t a1, const __CFDictionary **a2)
{
  NSObject *v4;
  const void *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t (*v12)(uint64_t);
  const void *v13;
  size_t v14;
  void *v15;
  void *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  std::string::size_type v21;
  const char *v22;
  const char *v23;
  int v24;
  size_t v25;
  void **v26;
  xpc_object_t v27;
  xpc_object_t v28;
  std::string *v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  void **v34;
  xpc_object_t v35;
  xpc_object_t v36;
  const void *v37;
  size_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  xpc_object_t object;
  void *__p[2];
  unint64_t v46;
  void *v47[3];
  _QWORD v48[2];
  std::string __dst;
  uint8_t buf[32];

  v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Dump logs indication from Baseband", buf, 2u);
  }
  memset(buf, 170, 24);
  Timestamp::Timestamp((Timestamp *)buf);
  memset(&__dst, 170, sizeof(__dst));
  v5 = (const void *)*MEMORY[0x1E0CFAFD0];
  v6 = strlen((const char *)*MEMORY[0x1E0CFAFD0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_10:
    memmove(p_dst, v5, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = *a2;
  v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a2)
    v12 = 0;
  if (v12)
  {
    v48[0] = 0xAAAAAAAAAAAAAAAALL;
    v48[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v48, v11);
    v13 = (const void *)*MEMORY[0x1E0CFB058];
    v14 = strlen((const char *)*MEMORY[0x1E0CFB058]);
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v18 = v14 | 7;
      v19 = v18 + 1;
      v16 = operator new(v18 + 1);
      __p[1] = v15;
      v46 = v19 | 0x8000000000000000;
      __p[0] = v16;
    }
    else
    {
      HIBYTE(v46) = v14;
      v16 = __p;
      if (!v14)
      {
LABEL_23:
        *((_BYTE *)v15 + (_QWORD)v16) = 0;
        ctu::cf::map_adapter::getString();
        if (SHIBYTE(v47[2]) >= 0)
          v20 = v47;
        else
          v20 = (void **)v47[0];
        if (SHIBYTE(v47[2]) >= 0)
          v21 = HIBYTE(v47[2]);
        else
          v21 = (std::string::size_type)v47[1];
        std::string::append(&__dst, (const std::string::value_type *)v20, v21);
        if (SHIBYTE(v47[2]) < 0)
        {
          operator delete(v47[0]);
          if ((SHIBYTE(v46) & 0x80000000) == 0)
            goto LABEL_31;
        }
        else if ((SHIBYTE(v46) & 0x80000000) == 0)
        {
          goto LABEL_31;
        }
        operator delete(__p[0]);
LABEL_31:
        memset(v47, 170, sizeof(v47));
        HIBYTE(v46) = 0;
        LOBYTE(__p[0]) = 0;
        ctu::cf::map_adapter::getString();
        if (SHIBYTE(v46) < 0)
          operator delete(__p[0]);
        LODWORD(__p[0]) = 1;
        v22 = (const char *)radio::asString();
        v23 = v22;
        v24 = SHIBYTE(v47[2]);
        if (SHIBYTE(v47[2]) >= 0)
          v25 = HIBYTE(v47[2]);
        else
          v25 = (size_t)v47[1];
        if (v25 == strlen(v22))
        {
          if (SHIBYTE(v47[2]) >= 0)
            v26 = v47;
          else
            v26 = (void **)v47[0];
          if (!memcmp(v26, v23, v25))
            v17 = 5;
          else
            v17 = 2;
          if ((v24 & 0x80000000) == 0)
            goto LABEL_47;
        }
        else
        {
          v17 = 2;
          if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
          {
LABEL_47:
            MEMORY[0x1C3B893A8](v48);
            goto LABEL_48;
          }
        }
        operator delete(v47[0]);
        goto LABEL_47;
      }
    }
    memmove(v16, v13, (size_t)v15);
    goto LABEL_23;
  }
  v17 = 2;
LABEL_48:
  v27 = xpc_dictionary_create(0, 0, 0);
  if (v27 || (v27 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v27) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v27);
      v28 = v27;
    }
    else
    {
      v28 = xpc_null_create();
    }
  }
  else
  {
    v28 = xpc_null_create();
    v27 = 0;
  }
  xpc_release(v27);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__dst;
  else
    v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v30 = xpc_string_create((const char *)v29);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E0CFB930], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v32 = xpc_int64_create(v17);
  if (!v32)
    v32 = xpc_null_create();
  xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E0CFB010], v32);
  v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  Timestamp::asString((uint64_t)buf, 0, 9, v47);
  if (SHIBYTE(v47[2]) >= 0)
    v34 = v47;
  else
    v34 = (void **)v47[0];
  v35 = xpc_string_create((const char *)v34);
  if (!v35)
    v35 = xpc_null_create();
  xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E0CFB370], v35);
  v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  if (SHIBYTE(v47[2]) < 0)
    operator delete(v47[0]);
  v37 = (const void *)*MEMORY[0x1E0CFB5F0];
  v38 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v39 = (void *)v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    v47[1] = v39;
    v47[2] = (void *)(v42 | 0x8000000000000000);
    v47[0] = v40;
LABEL_78:
    memmove(v40, v37, (size_t)v39);
    *((_BYTE *)v39 + (_QWORD)v40) = 0;
    object = v28;
    if (v28)
      goto LABEL_74;
    goto LABEL_79;
  }
  HIBYTE(v47[2]) = v38;
  v40 = v47;
  if (v38)
    goto LABEL_78;
  LOBYTE(v47[0]) = 0;
  object = v28;
  if (v28)
  {
LABEL_74:
    xpc_retain(v28);
    goto LABEL_80;
  }
LABEL_79:
  object = xpc_null_create();
LABEL_80:
  v43 = 0;
  Service::runCommand(a1, (uint64_t)v47, &object, &v43);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v47[2]) < 0)
    operator delete(v47[0]);
  xpc_release(v28);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *(_QWORD **)&buf[8]);
}

void sub_1BF4C9170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a23 < 0)
    operator delete(__p);
  MEMORY[0x1C3B893A8](&a24);
  if (a31 < 0)
  {
    operator delete(a26);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v31 - 96, *(_QWORD **)(v31 - 88));
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v31 - 96, *(_QWORD **)(v31 - 88));
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  size_t v3;
  size_t v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  config::hw *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  const char *v17;
  void *__p;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = (const void *)*MEMORY[0x1E0D01A18];
  v3 = strlen((const char *)*MEMORY[0x1E0D01A18]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_p = operator new(v6 + 1);
    *(_QWORD *)&v19 = v4;
    *((_QWORD *)&v19 + 1) = v7 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v19) = v3;
  p_p = &__p;
  if (v3)
LABEL_8:
    memmove(p_p, v2, v4);
  *((_BYTE *)p_p + v4) = 0;
  v8 = (config::hw *)support::fs::removeDirContents((const char *)&__p, 0);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (config::hw::watch(v8)
    && (TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v9 = (const void *)*MEMORY[0x1E0D01A30];
    v10 = strlen((const char *)*MEMORY[0x1E0D01A30]);
    if (v10 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = v10;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      v12 = operator new(v13 + 1);
      *(_QWORD *)&v19 = v11;
      *((_QWORD *)&v19 + 1) = v14 | 0x8000000000000000;
      __p = v12;
    }
    else
    {
      HIBYTE(v19) = v10;
      v12 = &__p;
      if (!v10)
        goto LABEL_22;
    }
    memmove(v12, v9, v11);
LABEL_22:
    *((_BYTE *)v12 + v11) = 0;
    v15 = support::fs::removeDirContents((const char *)&__p, 0x708uLL);
    if (SHIBYTE(v19) < 0)
      operator delete(__p);
    v16 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = "failed";
      if (v15)
        v17 = "success";
      __p = (void *)0x1E04000202;
      LOWORD(v19) = 2080;
      *(_QWORD *)((char *)&v19 + 2) = v17;
      _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Deleting telephony log files older than %d mins %s", (uint8_t *)&__p, 0x12u);
    }
  }
}

void sub_1BF4C94D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceManager::setupDumpLogsIndication_sync(NSObject **this)
{
  CommandDriverFactory *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[16];

  if (!capabilities::trace::supportsDumpLogIndication((capabilities::trace *)this))
    return;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v21 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v5 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = off_1ED70FD08;
  }
  v8 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v9 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 16))(&v18, v3);
  v20 = 0;
  v21 = 0;
  if (v19)
  {
    v21 = std::__shared_weak_count::lock(v19);
    if (v21)
      v20 = v18;
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
  }
  if (!v8)
    goto LABEL_21;
  v11 = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v13 = v20;
    if (v20)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    v13 = v20;
    if (v20)
    {
LABEL_22:
      v14 = this[11];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Enabling Dump logs indication", buf, 2u);
      }
      (*(void (**)(unint64_t))(*(_QWORD *)v13 + 200))(v13);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BF4C972C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF4C9748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4C975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const char *TraceManager::getName(TraceManager *this)
{
  return "trace.mgr";
}

char *TraceManager::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  char *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)result = 512;
  result[2] = 3;
  *a1 = result;
  return result;
}

void TraceManager::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  NSObject *v9;
  _QWORD v10[5];
  dispatch_group_t group;
  _QWORD v12[5];
  dispatch_group_t object;
  _QWORD v14[5];
  dispatch_group_t v15;

  if (a2 == 3)
  {
    v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1174405120;
    v10[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_12;
    v10[3] = &__block_descriptor_tmp_13_10;
    v7 = *a3;
    v10[4] = a1;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      v5 = group;
      if (group)
        goto LABEL_18;
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2)
        return;
      v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      v14[3] = &__block_descriptor_tmp_9_8;
      v4 = *a3;
      v14[4] = a1;
      v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v4);
      }
      ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15)
        return;
      dispatch_group_leave(v15);
      v5 = v15;
      if (!v15)
        return;
LABEL_18:
      dispatch_release(v5);
      return;
    }
    v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1174405120;
    v12[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_10;
    v12[3] = &__block_descriptor_tmp_11_9;
    v9 = *a3;
    v12[4] = a1;
    object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      v5 = object;
      if (object)
        goto LABEL_18;
    }
  }
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6[2];
  NSObject *v7;
  xpc_object_t object;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = xpc_null_create();
  v4 = *MEMORY[0x1E0CF1098];
  v5 = *(NSObject **)(a1 + 40);
  v7 = v5;
  object = v3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  TraceManager::runOnHelper_sync(v2, (const char *)9, v4, 0x1F40u, 0, &object, &v7, v6);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  xpc_release(object);
}

void sub_1BF4C99FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  NSObject *v12;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void TraceManager::runOnHelper_sync(_QWORD *a1, const char *a2, uint64_t a3, unsigned int a4, char a5, xpc_object_t *a6, NSObject **a7, void **a8)
{
  int v13;
  const char *v15;
  const char *v16;
  NSObject *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  unint64_t *v54;
  unint64_t v55;
  const void *v56;
  NSObject *object;
  xpc_object_t v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  dispatch_group_t group;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  int v65;
  void *v66;
  dispatch_object_t v67;
  xpc_object_t v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  _BYTE buf[24];
  void *v73;
  __int128 *v74;
  uint64_t v75;

  v13 = (int)a2;
  v75 = *MEMORY[0x1E0C80C00];
  if ((a5 & 1) == 0
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v15)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v16))
  {
    return;
  }
  v17 = a1[11];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = abm::helper::asString();
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = a3;
    _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I Running helper action: %s:%s", buf, 0x16u);
  }
  v70 = 0xAAAAAAAAAAAAAAAALL;
  v71 = 0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v19 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v73 = &__block_descriptor_tmp_13_2;
  v74 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v20 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v69 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v20 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v69 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_12;
  }
  v21 = (unint64_t *)(v20 + 8);
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
LABEL_12:
  abm::HelperClient::create();
  if (*((_QWORD *)&v69 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v69 + 1) + 16))(*((_QWORD *)&v69 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v69 + 1));
    }
  }
  v25 = MEMORY[0x1C3B8A86C](*a6);
  v26 = MEMORY[0x1E0C812F8];
  if (v25 != MEMORY[0x1E0C812F8])
  {
    v27 = xpc_dictionary_create(0, 0, 0);
    if (v27 || (v27 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v27) == v26)
      {
        xpc_retain(v27);
        v28 = v27;
      }
      else
      {
        v28 = xpc_null_create();
      }
    }
    else
    {
      v28 = xpc_null_create();
      v27 = 0;
    }
    xpc_release(v27);
    v29 = xpc_null_create();
    v30 = *a6;
    *a6 = v28;
    xpc_release(v30);
    xpc_release(v29);
  }
  if (a4)
  {
    v31 = xpc_int64_create(a4);
    if (!v31)
      v31 = xpc_null_create();
    xpc_dictionary_set_value(*a6, (const char *)*MEMORY[0x1E0CF1008], v31);
    v32 = xpc_null_create();
    xpc_release(v31);
    xpc_release(v32);
  }
  if (!*a8 || !a8[1])
  {
    v35 = (std::__shared_weak_count *)a1[16];
    if (!v35 || (v36 = a1[15], (v37 = std::__shared_weak_count::lock(v35)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v38 = v37;
    p_shared_weak_owners = (unint64_t *)&v37->__shared_weak_owners_;
    do
      v40 = __ldxr(p_shared_weak_owners);
    while (__stxr(v40 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v38);
    }
    memset(buf, 170, 16);
    aBlock[0] = v19;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12TraceManager16runOnHelper_syncEN3abm6helper6TaskIDEPKcjbN3xpc4dictEN8dispatch13group_sessionENS7_8callbackIU13block_pointerFvN12TelephonyXPC6ResultES6_EEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_70_2;
    aBlock[4] = a1;
    aBlock[5] = v36;
    v60 = v38;
    do
      v43 = __ldxr(p_shared_weak_owners);
    while (__stxr(v43 + 1, p_shared_weak_owners));
    v44 = *a7;
    group = v44;
    if (v44)
    {
      dispatch_retain(v44);
      dispatch_group_enter(group);
    }
    v62 = v70;
    v63 = (std::__shared_weak_count *)v71;
    if (v71)
    {
      v45 = (unint64_t *)(v71 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v65 = v13;
    v64 = a3;
    v47 = _Block_copy(aBlock);
    v48 = a1[17];
    if (v48)
      dispatch_retain(v48);
    *(_QWORD *)buf = v47;
    *(_QWORD *)&buf[8] = v48;
    v58 = *a6;
    if (*a6)
    {
      xpc_retain(*a6);
      if (v47)
        goto LABEL_53;
    }
    else
    {
      v58 = xpc_null_create();
      if (v47)
      {
LABEL_53:
        v56 = _Block_copy(v47);
        object = v48;
        if (!v48)
          goto LABEL_55;
        goto LABEL_54;
      }
    }
    v56 = 0;
    object = v48;
    if (!v48)
    {
LABEL_55:
      abm::HelperClient::perform();
      if (object)
        dispatch_release(object);
      if (v56)
        _Block_release(v56);
      xpc_release(v58);
      if (v48)
        dispatch_release(v48);
      if (v47)
        _Block_release(v47);
      v49 = v63;
      if (v63)
      {
        v50 = (unint64_t *)&v63->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v60)
        std::__shared_weak_count::__release_weak(v60);
      std::__shared_weak_count::__release_weak(v38);
      v52 = (std::__shared_weak_count *)v71;
      if (v71)
        goto LABEL_87;
      return;
    }
LABEL_54:
    dispatch_retain(v48);
    goto LABEL_55;
  }
  v33 = *a6;
  v68 = v33;
  if (!v33)
  {
    v68 = xpc_null_create();
    v34 = *a8;
    if (!*a8)
      goto LABEL_80;
    goto LABEL_79;
  }
  xpc_retain(v33);
  v34 = *a8;
  if (*a8)
LABEL_79:
    v34 = _Block_copy(v34);
LABEL_80:
  v53 = a8[1];
  v66 = v34;
  v67 = v53;
  if (v53)
    dispatch_retain(v53);
  abm::HelperClient::perform();
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  xpc_release(v68);
  v68 = 0;
  v52 = (std::__shared_weak_count *)v71;
  if (v71)
  {
LABEL_87:
    v54 = (unint64_t *)&v52->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1BF4CA060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, dispatch_group_t group, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,xpc_object_t object,char a27,uint64_t a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF4CA18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_10(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  const char *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10[2];
  NSObject *v11;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = (const char *)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    v5 = *(const char **)v5;
  v6 = xpc_string_create(v5);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFB330], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  object = v4;
  if (v4)
  {
    xpc_retain(v4);
    v8 = *MEMORY[0x1E0CF1110];
    v9 = *(NSObject **)(a1 + 40);
    v11 = v9;
    if (!v9)
      goto LABEL_14;
    goto LABEL_13;
  }
  object = xpc_null_create();
  v8 = *MEMORY[0x1E0CF1110];
  v9 = *(NSObject **)(a1 + 40);
  v11 = v9;
  if (v9)
  {
LABEL_13:
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
LABEL_14:
  v10[0] = 0;
  v10[1] = 0;
  TraceManager::runOnHelper_sync((_QWORD *)v2, (const char *)9, v8, 0x1388u, 0, &object, &v11, v10);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  xpc_release(object);
  object = 0;
  xpc_release(v4);
}

void sub_1BF4CA354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  void *v12;
  NSObject *v13;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v13)
  {
    dispatch_group_leave(v13);
    dispatch_release(v13);
  }
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_12(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void TraceManager::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_35_3;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::initialize(dispatch::group_session)::$_0>(TraceManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  void *v20;
  const void *v21;
  unint64_t v22;
  void *v23;
  const void *v24;
  size_t v25;
  size_t v26;
  void **p_dst;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  const void *v32;
  size_t v33;
  size_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  const void *v40;
  size_t v41;
  size_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  _QWORD v48[6];
  std::__shared_weak_count *v49;
  const void *v50;
  _QWORD v51[6];
  std::__shared_weak_count *v52;
  const void *v53;
  _QWORD v54[6];
  std::__shared_weak_count *v55;
  const void *v56;
  _QWORD aBlock[5];
  void **__dst;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  const void *v64;
  dispatch_object_t v65;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  TraceManager::initTraceHelper_sync((TraceManager *)v1);
  v10 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v10 || (v11 = *(_QWORD *)(v1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  v14 = (const char *)*MEMORY[0x1E0CFB900];
  v15 = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19 = *(NSObject **)(v1 + 136);
  if (v19)
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_15_6;
  aBlock[4] = v1;
  if (v14)
  {
    if (v19)
    {
      v20 = _Block_copy(aBlock);
      v21 = v20;
      v65 = v19;
      __dst = (void **)MEMORY[0x1E0C809B0];
      v59 = 1174405120;
      v60 = (unint64_t)___ZN9analytics29registerCallbackForTimedEventI12TraceManagerEEvPKcNS_9TimerTypeENSt3__18weak_ptrIT_EEN8dispatch5queueEU13block_pointerFvNS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_block_invoke;
      v61 = &__block_descriptor_tmp_91_0;
      v62 = v11;
      v63 = v13;
      do
        v22 = __ldxr(v15);
      while (__stxr(v22 + 1, v15));
      if (v20)
        v23 = _Block_copy(v20);
      else
        v23 = 0;
      v64 = v23;
      analytics::registerCallbackForTimedEventImpl(v14);
      if (v65)
        dispatch_release(v65);
      if (v64)
        _Block_release(v64);
      if (v63)
        std::__shared_weak_count::__release_weak(v63);
      if (v21)
        _Block_release(v21);
    }
  }
  else if (v19)
  {
    dispatch_release(v19);
  }
  std::__shared_weak_count::__release_weak(v13);
  v24 = (const void *)*MEMORY[0x1E0CFBEE0];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBEE0]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    p_dst = (void **)operator new(v28 + 1);
    v59 = v26;
    v60 = v29 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v60) = v25;
    p_dst = (void **)&__dst;
    if (!v25)
      goto LABEL_44;
  }
  memmove(p_dst, v24, v26);
LABEL_44:
  *((_BYTE *)p_dst + v26) = 0;
  v54[0] = MEMORY[0x1E0C809B0];
  v54[1] = 1174405120;
  v54[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_3;
  v54[3] = &__block_descriptor_tmp_22_6;
  v54[4] = v1;
  v54[5] = v3;
  v55 = v5;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(v54);
  v56 = v31;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v56);
  if (v31)
    _Block_release(v31);
  if (SHIBYTE(v60) < 0)
    operator delete(__dst);
  v32 = (const void *)*MEMORY[0x1E0CFBED0];
  v33 = strlen((const char *)*MEMORY[0x1E0CFBED0]);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    v35 = (void **)operator new(v36 + 1);
    v59 = v34;
    v60 = v37 | 0x8000000000000000;
    __dst = v35;
  }
  else
  {
    HIBYTE(v60) = v33;
    v35 = (void **)&__dst;
    if (!v33)
      goto LABEL_58;
  }
  memmove(v35, v32, v34);
LABEL_58:
  *((_BYTE *)v35 + v34) = 0;
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 1174405120;
  v51[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_23;
  v51[3] = &__block_descriptor_tmp_30_2;
  v51[4] = v1;
  v51[5] = v3;
  v52 = v5;
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  v39 = _Block_copy(v51);
  v53 = v39;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v53);
  if (v39)
    _Block_release(v39);
  if (SHIBYTE(v60) < 0)
    operator delete(__dst);
  v40 = (const void *)*MEMORY[0x1E0CFBDB8];
  v41 = strlen((const char *)*MEMORY[0x1E0CFBDB8]);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = (void **)operator new(v44 + 1);
    v59 = v42;
    v60 = v45 | 0x8000000000000000;
    __dst = v43;
  }
  else
  {
    HIBYTE(v60) = v41;
    v43 = (void **)&__dst;
    if (!v41)
      goto LABEL_72;
  }
  memmove(v43, v40, v42);
LABEL_72:
  *((_BYTE *)v43 + v42) = 0;
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 1174405120;
  v48[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_31;
  v48[3] = &__block_descriptor_tmp_34_2;
  v48[4] = v1;
  v48[5] = v3;
  v49 = v5;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  v47 = _Block_copy(v48);
  v50 = v47;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v50);
  if (v47)
    _Block_release(v47);
  if (SHIBYTE(v60) < 0)
    operator delete(__dst);
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  if (v55)
    std::__shared_weak_count::__release_weak(v55);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF4CAAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  const void *v33;
  uint64_t v34;
  const void *v36;
  std::__shared_weak_count *v37;
  NSObject *v38;

  v36 = *(const void **)(v34 - 120);
  if (v36)
    _Block_release(v36);
  v37 = *(std::__shared_weak_count **)(v34 - 128);
  if (v37)
  {
    std::__shared_weak_count::__release_weak(v37);
    v38 = *(NSObject **)(v34 - 112);
    if (!v38)
    {
LABEL_5:
      if (!v33)
      {
LABEL_10:
        std::__shared_weak_count::__release_weak(v32);
        std::__shared_weak_count::__release_weak(v31);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v33);
      goto LABEL_10;
    }
  }
  else
  {
    v38 = *(NSObject **)(v34 - 112);
    if (!v38)
      goto LABEL_5;
  }
  dispatch_release(v38);
  if (!v33)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_1BF4CAC3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void TraceManager::initTraceHelper_sync(TraceManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  NSObject *object;
  __int128 v18;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  const void *v21;
  dispatch_object_t v22;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v21 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v22 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager20initTraceHelper_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_69_0;
  aBlock[4] = this;
  aBlock[5] = v3;
  v20 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v21 = v11;
  v22 = v12;
  if (!v11)
  {
    v16 = 0;
    object = v12;
    if (!v12)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = _Block_copy(v11);
  object = v12;
  if (v12)
LABEL_15:
    dispatch_retain(v12);
LABEL_16:
  abm::HelperClient::registerForHelperReady();
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_OWORD *)this + 15) = v18;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (object)
    dispatch_release(object);
  if (v16)
    _Block_release(v16);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF4CAE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__shared_weak_count *v20;
  uint64_t v21;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v21 - 48);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  xpc_object_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  size_t v10;
  void *v11;
  xpc_object_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  TraceCAReporter *v21;
  const void *v22;
  size_t v23;
  size_t v24;
  BOOL *v25;
  xpc_object_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  xpc_object_t v30;
  xpc_object_t object;
  xpc_object_t __dst[2];
  unint64_t v33;
  BOOL __val[25];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = MEMORY[0x1E0C812F8];
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v2) == v3)
    {
      xpc_retain(v2);
      v4 = v2;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0CFB088]);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFB030], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (const char *)*MEMORY[0x1E0CFB170];
  v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFB170]);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFB550], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  __val[0] = 0;
  v10 = strlen(v7);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (xpc_object_t *)operator new(v13 + 1);
    __dst[1] = v11;
    v33 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_18;
  }
  HIBYTE(v33) = v10;
  v12 = __dst;
  if (v10)
LABEL_18:
    memmove(v12, v7, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  memset(&__val[1], 0, 24);
  if (prop::bbtrace::get((char *)__dst, (uint64_t)&__val[1]))
    util::convert<BOOL>((const std::string *)&__val[1], __val, 0);
  if (__val[24] < 0)
  {
    operator delete(*(void **)&__val[1]);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      goto LABEL_23;
  }
  else if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0]);
LABEL_23:
  std::to_string((std::string *)&__val[1], __val[0]);
  if (__val[24] >= 0)
    v15 = (const char *)&__val[1];
  else
    v15 = *(const char **)&__val[1];
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFB6A8], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (__val[24] < 0)
    operator delete(*(void **)&__val[1]);
  abm::asString();
  if (__val[24] >= 0)
    v18 = (const char *)&__val[1];
  else
    v18 = *(const char **)&__val[1];
  v19 = xpc_string_create(v18);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFBF88], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  if (__val[24] < 0)
  {
    operator delete(*(void **)&__val[1]);
    object = v4;
    __dst[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v21 = *(TraceCAReporter **)(v1 + 304);
    if (v4)
      goto LABEL_37;
  }
  else
  {
    object = v4;
    __dst[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v21 = *(TraceCAReporter **)(v1 + 304);
    if (v4)
    {
LABEL_37:
      xpc_retain(v4);
      goto LABEL_42;
    }
  }
  object = xpc_null_create();
LABEL_42:
  TraceCAReporter::prepTraceStats(v21, &object, __dst);
  xpc_release(object);
  object = 0;
  if (MEMORY[0x1C3B8A86C](__dst[0]) != v3)
    goto LABEL_55;
  v22 = (const void *)*MEMORY[0x1E0CFB5E0];
  v23 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v25 = (BOOL *)operator new(v27 + 1);
    *(_QWORD *)&__val[9] = v24;
    *(_QWORD *)&__val[17] = v28 | 0x8000000000000000;
    *(_QWORD *)&__val[1] = v25;
LABEL_51:
    memmove(v25, v22, v24);
    v25[v24] = 0;
    v26 = __dst[0];
    v30 = __dst[0];
    if (__dst[0])
      goto LABEL_47;
    goto LABEL_52;
  }
  __val[24] = v23;
  v25 = &__val[1];
  if (v23)
    goto LABEL_51;
  __val[1] = 0;
  v26 = __dst[0];
  v30 = __dst[0];
  if (__dst[0])
  {
LABEL_47:
    xpc_retain(v26);
    goto LABEL_53;
  }
LABEL_52:
  v26 = xpc_null_create();
  v30 = v26;
LABEL_53:
  v29 = 0;
  Service::runCommand(v1, (uint64_t)&__val[1], &v30, &v29);
  xpc_release(v26);
  v30 = 0;
  if (__val[24] < 0)
    operator delete(*(void **)&__val[1]);
LABEL_55:
  xpc_release(__dst[0]);
  xpc_release(v4);
}

void sub_1BF4CB308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  xpc_release(v25);
  if (a24 < 0)
    operator delete(__p);
  xpc_release(object);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];
  xpc_object_t object;
  void *aBlock;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
        goto LABEL_18;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 1174405120;
      v22[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_4;
      v22[3] = &__block_descriptor_tmp_20_5;
      v11 = *a2;
      v22[4] = v7;
      object = v11;
      if (v11)
      {
        xpc_retain(v11);
        v12 = *a3;
        if (*a3)
        {
LABEL_6:
          v13 = _Block_copy(v12);
LABEL_9:
          aBlock = v13;
          v25 = v10;
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          v26 = v9;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
          ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v22);
          v16 = v26;
          if (!v26)
            goto LABEL_15;
          v17 = (unint64_t *)&v26->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
            v19 = aBlock;
            if (!aBlock)
              goto LABEL_17;
          }
          else
          {
LABEL_15:
            v19 = aBlock;
            if (!aBlock)
            {
LABEL_17:
              xpc_release(object);
              object = 0;
LABEL_18:
              v20 = (unint64_t *)&v9->__shared_owners_;
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              return;
            }
          }
          _Block_release(v19);
          goto LABEL_17;
        }
      }
      else
      {
        object = xpc_null_create();
        v12 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      v13 = 0;
      goto LABEL_9;
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  int v7;
  char isSupported;
  char v9;
  const void *v10;
  size_t v11;
  std::string::size_type v12;
  void *v13;
  void *v14;
  const object *v15;
  xpc_object_t v16;
  uint64_t v17;
  xpc_object_t v18;
  const void *v19;
  CFTypeID v20;
  const void *v21;
  const void *v22;
  size_t v23;
  void *v24;
  void **v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  xpc_object_t v30;
  uint64_t v31;
  xpc_object_t v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  std::string *v37;
  __int128 v38;
  NSObject *v39;
  uint64_t *v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  std::string *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  const char *v52;
  xpc_object_t v53;
  xpc_object_t v54;
  const char *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  NSObject *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  const void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  TraceCAReporter *v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  const void *v77;
  size_t v78;
  size_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  uint64_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  void *v88;
  uint8_t *v89;
  xpc_object_t v90;
  xpc_object_t v91;
  const void *v92;
  std::string::size_type v93;
  xpc_object_t v94;
  void *v95[2];
  NSObject *v96;
  xpc_object_t v97;
  void *v98[2];
  NSObject *v99;
  xpc_object_t v100;
  _QWORD v101[6];
  std::__shared_weak_count *v102;
  void *v103;
  xpc_object_t v104;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v108;
  xpc_object_t object;
  std::string v110;
  xpc_object_t v111[3];
  xpc_object_t v112[3];
  std::string v113;
  std::string v114;
  uint8_t buf[24];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  memset(&v113, 170, sizeof(v113));
  v2 = *(_QWORD *)(a1 + 32);
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB030]);
  v112[0] = value;
  if (value)
    xpc_retain(value);
  else
    v112[0] = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v112[0]);
  memset(v112, 170, sizeof(v112));
  v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB550]);
  v111[0] = v4;
  if (v4)
    xpc_retain(v4);
  else
    v111[0] = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v111[0]);
  memset(v111, 170, sizeof(v111));
  v5 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB6A8]);
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5)
    xpc_retain(v5);
  else
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v114.__r_.__value_.__l.__data_);
  v6 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFBFE0]);
  *(_QWORD *)buf = v6;
  if (v6)
    xpc_retain(v6);
  else
    *(_QWORD *)buf = xpc_null_create();
  v7 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v110, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v110 = v113;
  isSupported = abm::trace::isSupported();
  v9 = isSupported;
  if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((isSupported & 1) != 0)
      goto LABEL_18;
LABEL_24:
    v114.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v14 = *(void **)(a1 + 40);
    object = v14;
    if (v14)
      xpc_retain(v14);
    else
      object = xpc_null_create();
    xpc::bridge((xpc *)&object, v15);
    v19 = *(const void **)buf;
    if (*(_QWORD *)buf && (v20 = CFGetTypeID(*(CFTypeRef *)buf), v20 == CFDictionaryGetTypeID()))
    {
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      CFRetain(v19);
      v21 = *(const void **)buf;
      if (!*(_QWORD *)buf)
      {
LABEL_37:
        xpc_release(object);
        v22 = (const void *)*MEMORY[0x1E0CFB9B8];
        v23 = strlen((const char *)*MEMORY[0x1E0CFB9B8]);
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v24 = (void *)v23;
        if (v23 >= 0x17)
        {
          v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v27 = v23 | 7;
          v28 = v27 + 1;
          v25 = (void **)operator new(v27 + 1);
          __dst[1] = v24;
          v108 = v28 | 0x8000000000000000;
          __dst[0] = v25;
        }
        else
        {
          HIBYTE(v108) = v23;
          v25 = __dst;
          if (!v23)
          {
            LOBYTE(__dst[0]) = 0;
            v26 = (const void *)v114.__r_.__value_.__r.__words[0];
            cf = (CFTypeRef)v114.__r_.__value_.__r.__words[0];
            if (!v114.__r_.__value_.__r.__words[0])
            {
LABEL_47:
              aBlock = 0;
              Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&aBlock);
              if (aBlock)
                _Block_release(aBlock);
              if (cf)
                CFRelease(cf);
              if (SHIBYTE(v108) < 0)
              {
                operator delete(__dst[0]);
                v29 = *(NSObject **)(v2 + 88);
                if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
LABEL_53:
                  if (!*(_QWORD *)(a1 + 48))
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              else
              {
                v29 = *(NSObject **)(v2 + 88);
                if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                  goto LABEL_53;
              }
              v33 = &v113;
              if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v33 = (std::string *)v113.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v33;
              _os_log_error_impl(&dword_1BF335000, v29, OS_LOG_TYPE_ERROR, "Trace not supported: %s", buf, 0xCu);
              if (!*(_QWORD *)(a1 + 48))
                goto LABEL_55;
LABEL_54:
              v30 = xpc_null_create();
              v31 = *(_QWORD *)(a1 + 48);
              *(_QWORD *)buf = v30;
              v32 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, uint8_t *))(v31 + 16))(v31, 3760250884, buf);
              xpc_release(*(xpc_object_t *)buf);
              xpc_release(v32);
LABEL_55:
              if (v26)
                CFRelease(v26);
LABEL_169:
              if ((SHIBYTE(v111[2]) & 0x80000000) == 0)
                goto LABEL_170;
              goto LABEL_174;
            }
LABEL_46:
            CFRetain(v26);
            goto LABEL_47;
          }
        }
        memmove(v25, v22, (size_t)v24);
        *((_BYTE *)v24 + (_QWORD)v25) = 0;
        v26 = (const void *)v114.__r_.__value_.__r.__words[0];
        cf = (CFTypeRef)v114.__r_.__value_.__r.__words[0];
        if (!v114.__r_.__value_.__r.__words[0])
          goto LABEL_47;
        goto LABEL_46;
      }
    }
    else
    {
      v114.__r_.__value_.__r.__words[0] = 0;
      v21 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_37;
    }
    CFRelease(v21);
    goto LABEL_37;
  }
  operator delete(v110.__r_.__value_.__l.__data_);
  if ((v9 & 1) == 0)
    goto LABEL_24;
LABEL_18:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2))
  {
    v16 = xpc_dictionary_create(0, 0, 0);
    v17 = MEMORY[0x1E0C812F8];
    if (v16 || (v16 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v16) == v17)
      {
        xpc_retain(v16);
        v18 = v16;
      }
      else
      {
        v18 = xpc_null_create();
      }
    }
    else
    {
      v18 = xpc_null_create();
      v16 = 0;
    }
    xpc_release(v16);
    v47 = xpc_int64_create(5000);
    if (!v47)
      v47 = xpc_null_create();
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E0CF1008], v47);
    v48 = xpc_null_create();
    xpc_release(v47);
    xpc_release(v48);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v113;
    else
      v49 = (std::string *)v113.__r_.__value_.__r.__words[0];
    v50 = xpc_string_create((const char *)v49);
    if (!v50)
      v50 = xpc_null_create();
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E0CF1020], v50);
    v51 = xpc_null_create();
    xpc_release(v50);
    xpc_release(v51);
    if (SHIBYTE(v112[2]) >= 0)
      v52 = (const char *)v112;
    else
      v52 = (const char *)v112[0];
    v53 = xpc_string_create(v52);
    if (!v53)
      v53 = xpc_null_create();
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E0CF1048], v53);
    v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    if (SHIBYTE(v111[2]) >= 0)
      v55 = (const char *)v111;
    else
      v55 = (const char *)v111[0];
    v56 = xpc_string_create(v55);
    if (!v56)
      v56 = xpc_null_create();
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E0CF1080], v56);
    v57 = xpc_null_create();
    xpc_release(v56);
    xpc_release(v57);
    if (v7)
    {
      v58 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1BF335000, v58, OS_LOG_TYPE_DEBUG, "#D Request to set property with completion", buf, 2u);
      }
      memset(buf, 170, 16);
      v101[0] = MEMORY[0x1E0C809B0];
      v101[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_17;
      v101[3] = &__block_descriptor_tmp_19_7;
      v60 = *(_QWORD *)(a1 + 56);
      v59 = *(std::__shared_weak_count **)(a1 + 64);
      v101[4] = v2;
      v101[5] = v60;
      v101[1] = 1174405120;
      v102 = v59;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v62 = __ldxr(p_shared_owners);
        while (__stxr(v62 + 1, p_shared_owners));
      }
      v63 = *(const void **)(a1 + 48);
      if (v63)
      {
        v64 = _Block_copy(v63);
        v65 = *(void **)(a1 + 40);
        v103 = v64;
        v104 = v65;
        if (v65)
        {
LABEL_108:
          xpc_retain(v65);
          goto LABEL_113;
        }
      }
      else
      {
        v65 = *(void **)(a1 + 40);
        v103 = 0;
        v104 = v65;
        if (v65)
          goto LABEL_108;
      }
      v104 = xpc_null_create();
LABEL_113:
      v66 = _Block_copy(v101);
      v67 = *(_QWORD *)(v2 + 136);
      if (v67)
        dispatch_retain(*(dispatch_object_t *)(v2 + 136));
      *(_QWORD *)buf = v66;
      *(_QWORD *)&buf[8] = v67;
      v100 = v18;
      if (v18)
      {
        xpc_retain(v18);
        v66 = *(void **)buf;
        v99 = 0;
        if (*(_QWORD *)buf)
        {
LABEL_117:
          v68 = _Block_copy(v66);
LABEL_123:
          v72 = *MEMORY[0x1E0CF10B8];
          v73 = *(NSObject **)&buf[8];
          v98[0] = v68;
          v98[1] = *(void **)&buf[8];
          if (*(_QWORD *)&buf[8])
            dispatch_retain(*(dispatch_object_t *)&buf[8]);
          TraceManager::runOnHelper_sync((_QWORD *)v2, (const char *)9, v72, 0, 1, &v100, &v99, v98);
          if (v73)
            dispatch_release(v73);
          if (v68)
            _Block_release(v68);
          xpc_release(v100);
          v100 = 0;
          if (v73)
            dispatch_release(v73);
          if (v66)
            _Block_release(v66);
          xpc_release(v104);
          v104 = 0;
          if (v103)
            _Block_release(v103);
          v74 = v102;
          if (v102)
          {
            v75 = (unint64_t *)&v102->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
LABEL_159:
          xpc_release(v18);
          goto LABEL_169;
        }
      }
      else
      {
        v99 = 0;
        v100 = xpc_null_create();
        if (v66)
          goto LABEL_117;
      }
      v68 = 0;
      goto LABEL_123;
    }
    v97 = v18;
    if (v18)
      xpc_retain(v18);
    else
      v97 = xpc_null_create();
    v69 = *MEMORY[0x1E0CF10B8];
    v95[1] = 0;
    v96 = 0;
    v95[0] = 0;
    TraceManager::runOnHelper_sync((_QWORD *)v2, (const char *)9, v69, 0, 1, &v97, &v96, v95);
    xpc_release(v97);
    v97 = 0;
    v114.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v70 = *(TraceCAReporter **)(v2 + 304);
    v71 = *(void **)(a1 + 40);
    v94 = v71;
    if (v71)
      xpc_retain(v71);
    else
      v94 = xpc_null_create();
    TraceCAReporter::prepTraceStats(v70, &v94, (xpc_object_t *)&v114.__r_.__value_.__l.__data_);
    xpc_release(v94);
    v94 = 0;
    if (MEMORY[0x1C3B8A86C](v114.__r_.__value_.__r.__words[0]) != v17)
    {
LABEL_156:
      if (*(_QWORD *)(a1 + 48))
      {
        v84 = xpc_null_create();
        v85 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)buf = v84;
        v86 = xpc_null_create();
        (*(void (**)(uint64_t, _QWORD, uint8_t *))(v85 + 16))(v85, 0, buf);
        xpc_release(*(xpc_object_t *)buf);
        xpc_release(v86);
      }
      xpc_release(v114.__r_.__value_.__l.__data_);
      goto LABEL_159;
    }
    v77 = (const void *)*MEMORY[0x1E0CFB5E0];
    v78 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
    if (v78 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v79 = v78;
    if (v78 >= 0x17)
    {
      v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v78 | 7) != 0x17)
        v81 = v78 | 7;
      v82 = v81 + 1;
      v80 = operator new(v81 + 1);
      *(_QWORD *)&buf[8] = v79;
      *(_QWORD *)&buf[16] = v82 | 0x8000000000000000;
      *(_QWORD *)buf = v80;
    }
    else
    {
      buf[23] = v78;
      v80 = buf;
      if (!v78)
      {
LABEL_151:
        v80[v79] = 0;
        v83 = (xpc_object_t)v114.__r_.__value_.__r.__words[0];
        v93 = v114.__r_.__value_.__r.__words[0];
        if (v114.__r_.__value_.__r.__words[0])
        {
          xpc_retain(v114.__r_.__value_.__l.__data_);
        }
        else
        {
          v83 = xpc_null_create();
          v93 = (std::string::size_type)v83;
        }
        v92 = 0;
        Service::runCommand(v2, (uint64_t)buf, (xpc_object_t *)&v93, &v92);
        xpc_release(v83);
        v93 = 0;
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        goto LABEL_156;
      }
    }
    memmove(v80, v77, v79);
    goto LABEL_151;
  }
  memset(buf, 170, sizeof(buf));
  v10 = (const void *)*MEMORY[0x1E0CFB890];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB890]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v34 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v34 = v11 | 7;
    v35 = v34 + 1;
    v13 = operator new(v34 + 1);
    v114.__r_.__value_.__l.__size_ = v12;
    v114.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    goto LABEL_65;
  }
  *((_BYTE *)&v114.__r_.__value_.__s + 23) = v11;
  v13 = &v114;
  if (v11)
LABEL_65:
    memmove(v13, v10, v12);
  *((_BYTE *)v13 + v12) = 0;
  v36 = (char *)operator new(0x28uLL);
  strcpy(v36, " rejected; ABM is shutting down ");
  v37 = std::string::append(&v114, v36, 0x20uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v37->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  operator delete(v36);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v114.__r_.__value_.__l.__data_);
    v39 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
LABEL_68:
      v41 = *(_QWORD *)(a1 + 48);
      v40 = (uint64_t *)(a1 + 48);
      if (!v41)
        goto LABEL_168;
      goto LABEL_74;
    }
  }
  else
  {
    v39 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      goto LABEL_68;
  }
  v42 = buf;
  if ((buf[23] & 0x80u) != 0)
    v42 = *(uint8_t **)buf;
  LODWORD(v114.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v114.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
  _os_log_impl(&dword_1BF335000, v39, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v114, 0xCu);
  v43 = *(_QWORD *)(a1 + 48);
  v40 = (uint64_t *)(a1 + 48);
  if (v43)
  {
LABEL_74:
    v114.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v44 = buf[23];
    if ((buf[23] & 0x80u) != 0)
      v44 = *(_QWORD *)&buf[8];
    if (v44)
    {
      v45 = xpc_dictionary_create(0, 0, 0);
      if (v45 || (v45 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v45) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v45);
          v46 = v45;
        }
        else
        {
          v46 = xpc_null_create();
        }
      }
      else
      {
        v46 = xpc_null_create();
        v45 = 0;
      }
      xpc_release(v45);
      v87 = xpc_null_create();
      v88 = (void *)v114.__r_.__value_.__r.__words[0];
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      xpc_release(v88);
      xpc_release(v87);
      if ((buf[23] & 0x80u) == 0)
        v89 = buf;
      else
        v89 = *(uint8_t **)buf;
      v90 = xpc_string_create((const char *)v89);
      if (!v90)
        v90 = xpc_null_create();
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E0CFB0D0], v90);
      v91 = xpc_null_create();
      xpc_release(v90);
      xpc_release(v91);
    }
    LODWORD(object) = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v40, (unsigned int *)&object, (void **)&v114.__r_.__value_.__l.__data_);
    xpc_release(v114.__r_.__value_.__l.__data_);
  }
LABEL_168:
  if (((char)buf[23] & 0x80000000) == 0)
    goto LABEL_169;
  operator delete(*(void **)buf);
  if ((SHIBYTE(v111[2]) & 0x80000000) == 0)
  {
LABEL_170:
    if ((SHIBYTE(v112[2]) & 0x80000000) == 0)
      goto LABEL_171;
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v111[0]);
  if ((SHIBYTE(v112[2]) & 0x80000000) == 0)
  {
LABEL_171:
    if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_176:
    operator delete(v113.__r_.__value_.__l.__data_);
    return;
  }
LABEL_175:
  operator delete(v112[0]);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_176;
}

void sub_1BF4CC328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, char a12, uint64_t a13, uint64_t a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,xpc_object_t a28,void *a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,xpc_object_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_17(_QWORD *a1, int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  TraceCAReporter *v7;
  void *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v17;
  uint64_t v18;
  xpc_object_t v19;
  const void *v20;
  xpc_object_t v21;
  uint8_t buf[8];
  size_t v23;
  unint64_t v24;
  xpc_object_t object;
  xpc_object_t v26;

  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEBUG, "#D Set property completion called", buf, 2u);
    if (!a1[7])
      return;
  }
  else if (!a1[7])
  {
    return;
  }
  v6 = *a2;
  if (!*a2)
  {
    v7 = *(TraceCAReporter **)(v4 + 304);
    v8 = (void *)a1[8];
    object = v8;
    v26 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    if (v8)
      xpc_retain(v8);
    else
      object = xpc_null_create();
    TraceCAReporter::prepTraceStats(v7, &object, &v26);
    xpc_release(object);
    object = 0;
    if (MEMORY[0x1C3B8A86C](v26) != MEMORY[0x1E0C812F8])
    {
LABEL_23:
      xpc_release(v26);
      v6 = *a2;
      goto LABEL_24;
    }
    v9 = (const void *)*MEMORY[0x1E0CFB5E0];
    v10 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = v10;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      v12 = operator new(v13 + 1);
      v23 = v11;
      v24 = v14 | 0x8000000000000000;
      *(_QWORD *)buf = v12;
    }
    else
    {
      HIBYTE(v24) = v10;
      v12 = buf;
      if (!v10)
      {
LABEL_18:
        v12[v11] = 0;
        v15 = v26;
        v21 = v26;
        if (v26)
        {
          xpc_retain(v26);
        }
        else
        {
          v15 = xpc_null_create();
          v21 = v15;
        }
        v20 = 0;
        Service::runCommand(v4, (uint64_t)buf, &v21, &v20);
        xpc_release(v15);
        v21 = 0;
        if (SHIBYTE(v24) < 0)
          operator delete(*(void **)buf);
        goto LABEL_23;
      }
    }
    memmove(v12, v9, v11);
    goto LABEL_18;
  }
LABEL_24:
  if (v6)
    v16 = 3760250880;
  else
    v16 = 0;
  v17 = xpc_null_create();
  v18 = a1[7];
  *(_QWORD *)buf = v17;
  v19 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v18 + 16))(v18, v16, buf);
  xpc_release(*(xpc_object_t *)buf);
  xpc_release(v19);
}

void sub_1BF4CC970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, xpc_object_t object)
{
  void *v19;

  xpc_release(v19);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  xpc_object_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (const void *)a2[7];
  if (v7)
  {
    v8 = _Block_copy(v7);
    v9 = (void *)a2[8];
    a1[7] = v8;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  else
  {
    v9 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(_QWORD *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5)
    dispatch_retain(v5);
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (void *)a2[5];
  a1[5] = v4;
  if (!v4)
  {
    a1[5] = xpc_null_create();
    result = (void *)a2[6];
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v4);
  result = (void *)a2[6];
  if (result)
LABEL_5:
    result = _Block_copy(result);
LABEL_6:
  v7 = a2[7];
  v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(const void **)(a1 + 48);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
LABEL_6:
    _Block_release(v5);
LABEL_7:
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_23(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_24;
  v15[3] = &__block_descriptor_tmp_29_2;
  v13 = *a2;
  v15[4] = v7;
  object = v13;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (!*a3)
      goto LABEL_14;
    goto LABEL_13;
  }
  object = xpc_null_create();
  v14 = *a3;
  if (*a3)
LABEL_13:
    v14 = _Block_copy(v14);
LABEL_14:
  aBlock = v14;
  ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v15);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_24(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t value;
  xpc_object_t v4;
  char isSupported;
  char v6;
  void *v7;
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  NSObject *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  std::string *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void **v23;
  xpc_object_t v24;
  xpc_object_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  std::string *v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  xpc_object_t v36;
  _QWORD aBlock[6];
  void *v38;
  uint8_t buf[16];
  xpc_object_t object;
  xpc_object_t *p_object;
  uint64_t v42;
  xpc_object_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  xpc_object_t v45;
  std::string v46;
  void *__p[3];
  std::string v48;
  __int128 v49;
  uint64_t v50;
  __n128 (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  void *v53[2];
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  memset(&v48, 170, sizeof(v48));
  v2 = *(_QWORD *)(a1 + 32);
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB030]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v49 = 0uLL;
  v50 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB550]);
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  v49 = 0uLL;
  v50 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v46 = v48;
  isSupported = abm::trace::isSupported();
  v6 = isSupported;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v46.__r_.__value_.__l.__data_);
    if ((v6 & 1) != 0)
    {
LABEL_12:
      object = 0;
      p_object = &object;
      v42 = 0x3002000000;
      v43 = __Block_byref_object_copy__5;
      v44 = __Block_byref_object_dispose__5;
      v7 = *(void **)(a1 + 40);
      v45 = v7;
      if (v7)
        xpc_retain(v7);
      else
        v45 = xpc_null_create();
      *(_QWORD *)&v49 = 0;
      *((_QWORD *)&v49 + 1) = &v49;
      v50 = 0x4002000000;
      v51 = __Block_byref_object_copy__25;
      v52 = __Block_byref_object_dispose__26;
      v53[1] = 0;
      v54 = 0;
      v53[0] = 0;
      if (prop::get((char *)&v48, (char *)__p, (uint64_t)v53))
      {
        v12 = (const char *)(*((_QWORD *)&v49 + 1) + 40);
        if (*(char *)(*((_QWORD *)&v49 + 1) + 63) < 0)
          v12 = *(const char **)v12;
        v13 = xpc_string_create(v12);
        if (!v13)
          v13 = xpc_null_create();
        xpc_dictionary_set_value(p_object[5], (const char *)*MEMORY[0x1E0CFB6A8], v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        *(_DWORD *)buf = 0;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 48), (unsigned int *)buf, p_object + 5);
LABEL_63:
        _Block_object_dispose(&v49, 8);
        if (SHIBYTE(v54) < 0)
          operator delete(v53[0]);
        _Block_object_dispose(&object, 8);
        xpc_release(v45);
        goto LABEL_66;
      }
      v15 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I Checking with abm-helper daemon", buf, 2u);
      }
      v16 = xpc_dictionary_create(0, 0, 0);
      if (v16 || (v16 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v16) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v16);
          v17 = v16;
        }
        else
        {
          v17 = xpc_null_create();
        }
      }
      else
      {
        v17 = xpc_null_create();
        v16 = 0;
      }
      xpc_release(v16);
      v18 = xpc_int64_create(1500);
      if (!v18)
        v18 = xpc_null_create();
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1008], v18);
      v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v48;
      else
        v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
      v21 = xpc_string_create((const char *)v20);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1020], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      if (SHIBYTE(__p[2]) >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      v24 = xpc_string_create((const char *)v23);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1048], v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_27;
      aBlock[3] = &unk_1E7909F60;
      aBlock[4] = &v49;
      aBlock[5] = &object;
      v26 = *(void **)(a1 + 48);
      if (v26)
        v26 = _Block_copy(v26);
      v38 = v26;
      v27 = _Block_copy(aBlock);
      v28 = *(_QWORD *)(v2 + 136);
      if (v28)
        dispatch_retain(*(dispatch_object_t *)(v2 + 136));
      *(_QWORD *)buf = v27;
      *(_QWORD *)&buf[8] = v28;
      v36 = v17;
      if (v17)
      {
        xpc_retain(v17);
        v27 = *(void **)buf;
        v35 = 0;
        if (*(_QWORD *)buf)
          goto LABEL_50;
      }
      else
      {
        v35 = 0;
        v36 = xpc_null_create();
        if (v27)
        {
LABEL_50:
          v29 = _Block_copy(v27);
          v30 = *MEMORY[0x1E0CF10B0];
          v31 = *(NSObject **)&buf[8];
          v33 = v29;
          v34 = *(_QWORD *)&buf[8];
          if (!*(_QWORD *)&buf[8])
          {
LABEL_52:
            TraceManager::runOnHelper_sync((_QWORD *)v2, (const char *)9, v30, 0, 1, &v36, &v35, &v33);
            if (v31)
              dispatch_release(v31);
            if (v29)
              _Block_release(v29);
            xpc_release(v36);
            v36 = 0;
            if (v31)
              dispatch_release(v31);
            if (v27)
              _Block_release(v27);
            if (v38)
              _Block_release(v38);
            xpc_release(v17);
            goto LABEL_63;
          }
LABEL_51:
          dispatch_retain(v31);
          goto LABEL_52;
        }
      }
      v29 = 0;
      v30 = *MEMORY[0x1E0CF10B0];
      v31 = *(NSObject **)&buf[8];
      v33 = 0;
      v34 = *(_QWORD *)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_52;
      goto LABEL_51;
    }
  }
  else if ((isSupported & 1) != 0)
  {
    goto LABEL_12;
  }
  v8 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v32 = &v48;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)v48.__r_.__value_.__r.__words[0];
    LODWORD(v49) = 136315138;
    *(_QWORD *)((char *)&v49 + 4) = v32;
    _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Trace not supported: %s", (uint8_t *)&v49, 0xCu);
  }
  v9 = xpc_null_create();
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v49 = v9;
  v11 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, __int128 *))(v10 + 16))(v10, 3760250884, &v49);
  xpc_release((xpc_object_t)v49);
  xpc_release(v11);
LABEL_66:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_70:
    operator delete(v48.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_70;
}

void sub_1BF4CD440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,char a21,uint64_t a22,xpc_object_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_27(_QWORD *a1, _DWORD *a2, xpc_object_t *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t value;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t object[2];
  uint64_t v18;

  if (!*a2 && MEMORY[0x1C3B8A86C](*a3) == MEMORY[0x1E0C812F8])
  {
    value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CF1080]);
    v16 = value;
    if (value)
      xpc_retain(value);
    else
      v16 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v16, (const object *)"", v9);
    v10 = *(_QWORD *)(a1[4] + 8);
    v11 = v10 + 40;
    if (*(char *)(v10 + 63) < 0)
      operator delete(*(void **)v11);
    *(_OWORD *)v11 = *(_OWORD *)object;
    *(_QWORD *)(v11 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(object[0]) = 0;
    xpc_release(v16);
    v12 = *(_QWORD *)(a1[4] + 8);
    v13 = (const char *)(v12 + 40);
    if (*(char *)(v12 + 63) < 0)
      v13 = *(const char **)v13;
    v14 = xpc_string_create(v13);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1[5] + 8) + 40), (const char *)*MEMORY[0x1E0CFB6A8], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    LODWORD(object[0]) = 0;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)object, (void **)(*(_QWORD *)(a1[5] + 8) + 40));
  }
  else
  {
    v5 = xpc_null_create();
    v6 = a1[6];
    object[0] = v5;
    v7 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v7);
  }
}

void sub_1BF4CD830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_31(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  void *aBlock;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 1174405120;
      v15[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_32;
      v15[3] = &__block_descriptor_tmp_33_5;
      v15[4] = v7;
      if (*a3)
      {
        v13 = _Block_copy(*a3);
        v14 = *a2;
        aBlock = v13;
        object = v14;
        if (v14)
        {
LABEL_11:
          xpc_retain(v14);
          goto LABEL_14;
        }
      }
      else
      {
        v14 = *a2;
        aBlock = 0;
        object = v14;
        if (v14)
          goto LABEL_11;
      }
      object = xpc_null_create();
LABEL_14:
      ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v15);
      xpc_release(object);
      object = 0;
      if (aBlock)
        _Block_release(aBlock);
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_32(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  xpc_object_t value;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  xpc_object_t v19;
  const void *v20;
  void *v21;
  void **v22;
  uint64_t v23;
  void *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  xpc_object_t v29;
  void *v30;
  void **v31;
  xpc_object_t v32;
  xpc_object_t v33;
  void *v34;
  xpc_object_t v35;
  void *aBlock;
  xpc_object_t v37;
  unsigned int v38;
  void *__p[4];
  std::string __dst;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if (!(*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E0CFB0F8]);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
    if (value)
      xpc_retain(value);
    else
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&__dst, (const object *)*MEMORY[0x1E0CFB4D8], v8);
    xpc_release(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[2]) >= 0)
      v17 = HIBYTE(__p[2]);
    else
      v17 = (size_t)__p[1];
    if (v17 != strlen((const char *)*MEMORY[0x1E0CFB3A0])
      || (SHIBYTE(__p[2]) >= 0 ? (v18 = __p) : (v18 = (void **)__p[0]),
          memcmp(v18, (const void *)*MEMORY[0x1E0CFB3A0], v17)))
    {
      v19 = *(xpc_object_t *)(a1 + 48);
      v35 = v19;
      if (v19)
      {
        xpc_retain(v19);
        v20 = *(const void **)(a1 + 40);
        if (v20)
        {
LABEL_27:
          v21 = _Block_copy(v20);
LABEL_41:
          v34 = v21;
          TraceManager::collectLogs_sync(v2, &v35, &v34);
          if (v21)
            _Block_release(v21);
          xpc_release(v19);
          goto LABEL_61;
        }
      }
      else
      {
        v19 = xpc_null_create();
        v35 = v19;
        v20 = *(const void **)(a1 + 40);
        if (v20)
          goto LABEL_27;
      }
      v21 = 0;
      goto LABEL_41;
    }
    v27 = *(xpc_object_t *)(a1 + 48);
    v37 = v27;
    if (v27)
    {
      xpc_retain(v27);
      v28 = *(void **)(a1 + 40);
      if (!v28)
        goto LABEL_50;
    }
    else
    {
      v27 = xpc_null_create();
      v37 = v27;
      v28 = *(void **)(a1 + 40);
      if (!v28)
      {
LABEL_50:
        aBlock = v28;
        TraceManager::collectBasebandLogs_sync((uint64_t)v2, &v37, (uint64_t *)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        xpc_release(v27);
        goto LABEL_61;
      }
    }
    v28 = _Block_copy(v28);
    goto LABEL_50;
  }
  memset(__p, 170, 24);
  v3 = (const void *)*MEMORY[0x1E0CFB5F0];
  v4 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_12;
  }
  memmove(p_dst, v3, v5);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v11 = (char *)operator new(0x28uLL);
  strcpy(v11, " rejected; ABM is shutting down ");
  v12 = std::string::append(&__dst, v11, 0x20uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  operator delete(v11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v14 = v2[11];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
LABEL_14:
      v16 = *(_QWORD *)(a1 + 40);
      v15 = (uint64_t *)(a1 + 40);
      if (!v16)
        goto LABEL_61;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = v2[11];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
  }
  v22 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v22 = (void **)__p[0];
  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
  _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
  v23 = *(_QWORD *)(a1 + 40);
  v15 = (uint64_t *)(a1 + 40);
  if (v23)
  {
LABEL_32:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v24 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0)
      v24 = __p[1];
    if (v24)
    {
      v25 = xpc_dictionary_create(0, 0, 0);
      if (v25 || (v25 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v25) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v25);
          v26 = v25;
        }
        else
        {
          v26 = xpc_null_create();
        }
      }
      else
      {
        v26 = xpc_null_create();
        v25 = 0;
      }
      xpc_release(v25);
      v29 = xpc_null_create();
      v30 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      xpc_release(v30);
      xpc_release(v29);
      if (SHIBYTE(__p[2]) >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      v32 = xpc_string_create((const char *)v31);
      if (!v32)
        v32 = xpc_null_create();
      xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0CFB0D0], v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
    }
    v38 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v38, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_61:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF4CDE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void TraceManager::collectBasebandLogs_sync(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const __CFString **v9;
  xpc_object_t value;
  const char *v11;
  xpc_object_t v12;
  uint64_t v13;
  const __CFString **v14;
  xpc_object_t v15;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v18;
  size_t v19;
  std::string::size_type v20;
  std::string *p_dst;
  uint64_t v22;
  uint64_t v23;
  xpc_object_t v24;
  int v25;
  const void *v26;
  size_t v27;
  std::string::size_type v28;
  int v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  xpc_object_t v33;
  std::string::size_type size;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  const char **v50;
  const void *v51;
  size_t v52;
  size_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  ctu *Mutable;
  const __CFAllocator *v59;
  __CFDictionary *v60;
  const __CFAllocator *v61;
  const char *v62;
  size_t v63;
  std::string::size_type v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  const void *v69;
  size_t v70;
  int v71;
  size_t v72;
  unint64_t v73;
  size_t v74;
  _BYTE *v75;
  std::string *v76;
  std::string *v77;
  std::string::size_type v78;
  char v79;
  const __CFAllocator *v80;
  __CFDictionary *v81;
  const __CFAllocator *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_weak_owners;
  unint64_t v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  const void *v93;
  void *v94;
  NSObject *v95;
  ctu *v96;
  xpc_object_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  xpc_object_t v101;
  xpc_object_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  xpc_object_t v106;
  NSObject *v107;
  uint64_t v108;
  xpc_object_t v109;
  NSObject *v110;
  _BOOL4 v111;
  uint64_t v112;
  std::string *v113;
  xpc_object_t v114;
  xpc_object_t v115;
  xpc_object_t v116;
  std::string::size_type v117;
  const char *v118;
  void **v119;
  const __CFString **v120;
  const __CFString **v121;
  void *v122;
  NSObject *v123;
  NSObject *v124;
  xpc_object_t v125;
  _QWORD aBlock[6];
  std::__shared_weak_count *v127;
  void *v128;
  std::string v129;
  std::string __p;
  int v131;
  BOOL v132;
  xpc_object_t v133;
  xpc_object_t v134;
  xpc_object_t v135;
  xpc_object_t v136;
  xpc_object_t v137[2];
  xpc_object_t v138;
  xpc_object_t v139;
  xpc_object_t xdict;
  __int128 v141;
  ctu *v142;
  unint64_t v143;
  BOOL v144;
  std::string v145;
  std::string v146[2];
  _BYTE block[32];
  __int128 *v148;
  uint8_t buf[4];
  std::string *v150;
  const void *v151[3];
  std::string __dst;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = xpc_null_create();
    v7 = *a3;
    *(_QWORD *)block = v6;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(v7 + 16))(v7, 3760250880, block);
    xpc_release(*(xpc_object_t *)block);
    xpc_release(v8);
    return;
  }
  memset(&v146[1], 170, sizeof(std::string));
  v9 = (const __CFString **)*MEMORY[0x1E0CFB0F8];
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB0F8]);
  *(_QWORD *)block = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)block = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)block, (const object *)*MEMORY[0x1E0CFB3A0], v11);
  xpc_release(*(xpc_object_t *)block);
  memset(v146, 170, 24);
  v121 = (const __CFString **)*MEMORY[0x1E0CFB370];
  v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB370]);
  v145.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  if (v12)
    xpc_retain(v12);
  else
    v145.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&__dst);
  Timestamp::asString(v13, 0, 9, block);
  xpc::dyn_cast_or_default();
  if ((block[23] & 0x80000000) != 0)
    operator delete(*(void **)block);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__dst, (_QWORD *)__dst.__r_.__value_.__l.__size_);
  xpc_release(v145.__r_.__value_.__l.__data_);
  memset(&v145, 170, sizeof(v145));
  v14 = (const __CFString **)*MEMORY[0x1E0CFB930];
  v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB930]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if (v15)
    xpc_retain(v15);
  else
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(block, 0, 24);
  xpc::dyn_cast_or_default();
  if ((block[23] & 0x80000000) != 0)
    operator delete(*(void **)block);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  v120 = v9;
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v144 = 0;
  v18 = (const void *)*MEMORY[0x1E0CF11E8];
  v19 = strlen((const char *)*MEMORY[0x1E0CF11E8]);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__l.__size_ = v20;
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
  p_dst = &__dst;
  if (v19)
LABEL_27:
    memmove(p_dst, v18, v20);
  p_dst->__r_.__value_.__s.__data_[v20] = 0;
  memset(block, 0, 24);
  if (prop::compression::get((char *)&__dst, (uint64_t)block))
  {
    LODWORD(v151[0]) = -1431655766;
    if (util::convert<int>((const std::string *)block, v151, 0))
      CompressionMode = LODWORD(v151[0]);
    else
      CompressionMode = CompressionMode;
  }
  if ((block[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)block);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_34:
  v24 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC068]);
  *(_QWORD *)block = v24;
  if (v24)
    xpc_retain(v24);
  else
    *(_QWORD *)block = xpc_null_create();
  v25 = xpc::dyn_cast_or_default((xpc *)block, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)block);
  if (v25)
  {
    v144 = 0;
    v26 = (const void *)*MEMORY[0x1E0CF1070];
    v27 = strlen((const char *)*MEMORY[0x1E0CF1070]);
    if (v27 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v28 = v27;
    v29 = v25;
    if (v27 >= 0x17)
    {
      v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v31 = v27 | 7;
      v32 = v31 + 1;
      v30 = (std::string *)operator new(v31 + 1);
      __dst.__r_.__value_.__l.__size_ = v28;
      __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27;
      v30 = &__dst;
      if (!v27)
      {
LABEL_48:
        v30->__r_.__value_.__s.__data_[v28] = 0;
        memset(block, 0, 24);
        if (prop::compression::get((char *)&__dst, (uint64_t)block))
          util::convert<BOOL>((const std::string *)block, &v144, 0);
        v25 = v29;
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_52;
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_52:
          v33 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBDF8]);
          *(_QWORD *)block = v33;
          if (v33)
            xpc_retain(v33);
          else
            *(_QWORD *)block = xpc_null_create();
          v144 = xpc::dyn_cast_or_default((xpc *)block, (const object *)v144);
          xpc_release(*(xpc_object_t *)block);
          goto LABEL_58;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_52;
      }
    }
    memmove(v30, v26, v28);
    goto LABEL_48;
  }
LABEL_58:
  size = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v145.__r_.__value_.__l.__size_;
  if (!size)
    std::string::__assign_external(&v145, (const std::string::value_type *)*MEMORY[0x1E0CFB058]);
  v142 = (ctu *)0xAAAAAAAAAAAAAAAALL;
  v143 = 0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v36 = MEMORY[0x1E0C809B0];
  *(_QWORD *)block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(_QWORD *)&block[24] = &__block_descriptor_tmp_13_2;
  v148 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v37 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v141 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_67;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v37 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v141 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_67;
  }
  v38 = (unint64_t *)(v37 + 8);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
LABEL_67:
  abm::HelperClient::create();
  if (*((_QWORD *)&v141 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
    }
  }
  xdict = xpc_null_create();
  v42 = xpc_dictionary_create(0, 0, 0);
  if (v42 || (v42 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v42) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v42);
      v43 = v42;
    }
    else
    {
      v43 = xpc_null_create();
    }
  }
  else
  {
    v43 = xpc_null_create();
    v42 = 0;
  }
  xpc_release(v42);
  v44 = xpc_int64_create(1500);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v43, (const char *)*MEMORY[0x1E0CF1008], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  *(_QWORD *)&v46 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)block = v46;
  *(_OWORD *)&block[16] = v46;
  v139 = v43;
  if (v43)
    xpc_retain(v43);
  else
    v139 = xpc_null_create();
  abm::HelperClient::perform();
  xpc_release(v139);
  v139 = 0;
  v138 = xpc_null_create();
  if (*(_DWORD *)block || MEMORY[0x1C3B8A86C](xdict) != MEMORY[0x1E0C812F8] || !*(_QWORD *)(a1 + 256))
  {
LABEL_85:
    xpc_release(v138);
    if ((block[31] & 0x80000000) != 0)
      operator delete(*(void **)&block[8]);
    xpc_release(v43);
    xpc_release(xdict);
    v47 = (std::__shared_weak_count *)v143;
    if (v143)
    {
      v48 = (unint64_t *)(v143 + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v119 = (void **)a3;
    v50 = (const char **)MEMORY[0x1E0D01A30];
    v51 = (const void *)*MEMORY[0x1E0D01A30];
    v52 = strlen((const char *)*MEMORY[0x1E0D01A30]);
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v53 = v52;
    if (v52 >= 0x17)
    {
      v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v55 = v52 | 7;
      v56 = v55 + 1;
      v54 = operator new(v55 + 1);
      *(_QWORD *)&block[8] = v53;
      *(_QWORD *)&block[16] = v56 | 0x8000000000000000;
      *(_QWORD *)block = v54;
    }
    else
    {
      block[23] = v52;
      v54 = block;
      if (!v52)
      {
LABEL_100:
        v54[v53] = 0;
        support::fs::createDir(block, 0x1EDu, 1);
        if ((block[23] & 0x80000000) != 0)
          operator delete(*(void **)block);
        v142 = 0;
        v57 = *MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v60 = Mutable;
        if (Mutable)
          v142 = Mutable;
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)block, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
        else
          *(std::string *)block = v145;
        ctu::cf::insert<char const*,std::string>(v60, v14, (uint64_t)block, v57, v59);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          if ((SHIBYTE(v146[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_109;
        }
        else if ((SHIBYTE(v146[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_109:
          *(std::string *)block = v146[0];
          goto LABEL_112;
        }
        std::string::__init_copy_ctor_external((std::string *)block, v146[0].__r_.__value_.__l.__data_, v146[0].__r_.__value_.__l.__size_);
LABEL_112:
        ctu::cf::insert<char const*,std::string>(v60, v121, (uint64_t)block, v57, v61);
        if ((block[23] & 0x80000000) != 0)
          operator delete(*(void **)block);
        memset(&__dst, 170, sizeof(__dst));
        v62 = *v50;
        v63 = strlen(*v50);
        if (v63 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v64 = v63;
        if (v63 >= 0x17)
        {
          v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17)
            v66 = v63 | 7;
          v67 = v66 + 1;
          v65 = (std::string *)operator new(v66 + 1);
          __dst.__r_.__value_.__l.__size_ = v64;
          __dst.__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v63;
          v65 = &__dst;
          if (!v63)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if (!v25)
              goto LABEL_139;
LABEL_123:
            v68 = v25;
            v69 = (const void *)*MEMORY[0x1E0D01A48];
            v70 = strlen((const char *)*MEMORY[0x1E0D01A48]);
            v71 = SHIBYTE(v146[0].__r_.__value_.__r.__words[2]);
            if ((v146[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = HIBYTE(v146[0].__r_.__value_.__r.__words[2]);
            else
              v72 = v146[0].__r_.__value_.__l.__size_;
            v73 = v72 + v70;
            memset(block, 170, 24);
            if (v72 + v70 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v74 = v70;
            if (v73 > 0x16)
            {
              v98 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v73 | 7) != 0x17)
                v98 = v73 | 7;
              v99 = v98 + 1;
              v75 = operator new(v98 + 1);
              *(_QWORD *)&block[8] = v73;
              *(_QWORD *)&block[16] = v99 | 0x8000000000000000;
              *(_QWORD *)block = v75;
              if (!v74)
                goto LABEL_130;
            }
            else
            {
              memset(block, 0, 24);
              v75 = block;
              block[23] = v72 + v70;
              if (!v70)
              {
LABEL_130:
                if (v72)
                {
                  if (v71 >= 0)
                    v76 = v146;
                  else
                    v76 = (std::string *)v146[0].__r_.__value_.__r.__words[0];
                  memmove(&v75[v74], v76, v72);
                }
                v75[v74 + v72] = 0;
                v77 = std::string::append((std::string *)block, "/", 1uLL);
                v78 = v77->__r_.__value_.__r.__words[0];
                v151[0] = (const void *)v77->__r_.__value_.__l.__size_;
                *(const void **)((char *)v151 + 7) = *(const void **)((char *)&v77->__r_.__value_.__r.__words[1] + 7);
                v79 = HIBYTE(v77->__r_.__value_.__r.__words[2]);
                v77->__r_.__value_.__l.__size_ = 0;
                v77->__r_.__value_.__r.__words[2] = 0;
                v77->__r_.__value_.__r.__words[0] = 0;
                v25 = v68;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                __dst.__r_.__value_.__r.__words[0] = v78;
                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v151[0];
                *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v151 + 7);
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v79;
                v36 = MEMORY[0x1E0C809B0];
                if ((block[23] & 0x80000000) != 0)
                  operator delete(*(void **)block);
LABEL_139:
                support::fs::createDir((const char *)&__dst, 0x1EDu, 1);
                v81 = v142;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external((std::string *)block, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                else
                  *(std::string *)block = __dst;
                ctu::cf::insert<char const*,std::string>(v81, (const __CFString **)*MEMORY[0x1E0CFB6A0], (uint64_t)block, v57, v80);
                if ((block[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)block);
                  if ((SHIBYTE(v146[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_144;
                }
                else if ((SHIBYTE(v146[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_144:
                  *(std::string *)block = v146[1];
                  goto LABEL_147;
                }
                std::string::__init_copy_ctor_external((std::string *)block, v146[1].__r_.__value_.__l.__data_, v146[1].__r_.__value_.__l.__size_);
LABEL_147:
                ctu::cf::insert<char const*,std::string>(v81, v120, (uint64_t)block, v57, v82);
                if ((block[23] & 0x80000000) != 0)
                  operator delete(*(void **)block);
                v83 = *(std::__shared_weak_count **)(a1 + 128);
                if (!v83 || (v84 = *(_QWORD *)(a1 + 120), (v85 = std::__shared_weak_count::lock(v83)) == 0))
                  std::__throw_bad_weak_ptr[abi:ne180100]();
                v86 = v85;
                p_shared_weak_owners = (unint64_t *)&v85->__shared_weak_owners_;
                do
                  v88 = __ldxr(p_shared_weak_owners);
                while (__stxr(v88 + 1, p_shared_weak_owners));
                p_shared_owners = (unint64_t *)&v85->__shared_owners_;
                do
                  v90 = __ldaxr(p_shared_owners);
                while (__stlxr(v90 - 1, p_shared_owners));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v86);
                }
                memset(block, 170, 16);
                aBlock[0] = v36;
                aBlock[1] = 1174405120;
                aBlock[2] = ___ZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
                aBlock[3] = &__block_descriptor_tmp_41_3;
                aBlock[4] = a1;
                aBlock[5] = v84;
                v127 = v86;
                do
                  v91 = __ldxr(p_shared_weak_owners);
                while (__stxr(v91 + 1, p_shared_weak_owners));
                v92 = *v119;
                if (*v119)
                  v92 = _Block_copy(v92);
                v128 = v92;
                if (SHIBYTE(v146[0].__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v129, v146[0].__r_.__value_.__l.__data_, v146[0].__r_.__value_.__l.__size_);
                else
                  v129 = v146[0];
                v131 = v25;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                else
                  __p = __dst;
                v132 = v144;
                v94 = _Block_copy(aBlock);
                v95 = *(NSObject **)(a1 + 136);
                if (v95)
                  dispatch_retain(*(dispatch_object_t *)(a1 + 136));
                *(_QWORD *)block = v94;
                *(_QWORD *)&block[8] = v95;
                v96 = v142;
                ctu::cf_to_xpc(v142, v93);
                v97 = (xpc_object_t)v151[0];
                if (v151[0] && MEMORY[0x1C3B8A86C](v151[0]) == MEMORY[0x1E0C812F8])
                  xpc_retain(v97);
                else
                  v97 = xpc_null_create();
                xpc_release((xpc_object_t)v151[0]);
                v100 = (const char *)(a1 + 168);
                if (*(char *)(a1 + 191) < 0)
                  v100 = *(const char **)v100;
                v101 = xpc_string_create(v100);
                if (!v101)
                  v101 = xpc_null_create();
                xpc_dictionary_set_value(v97, (const char *)*MEMORY[0x1E0CFB330], v101);
                v102 = xpc_null_create();
                xpc_release(v101);
                xpc_release(v102);
                v125 = v97;
                if (v97)
                {
                  xpc_retain(v97);
                  v124 = 0;
                  if (v94)
                    goto LABEL_183;
                }
                else
                {
                  v124 = 0;
                  v125 = xpc_null_create();
                  if (v94)
                  {
LABEL_183:
                    v103 = _Block_copy(v94);
                    v104 = *MEMORY[0x1E0CF1178];
                    v122 = v103;
                    v123 = v95;
                    if (!v95)
                      goto LABEL_185;
                    goto LABEL_184;
                  }
                }
                v103 = 0;
                v104 = *MEMORY[0x1E0CF1178];
                v122 = 0;
                v123 = v95;
                if (!v95)
                {
LABEL_185:
                  TraceManager::runOnHelper_sync((_QWORD *)a1, (const char *)9, v104, 0x1388u, 1, &v125, &v124, &v122);
                  if (v95)
                    dispatch_release(v95);
                  if (v103)
                    _Block_release(v103);
                  xpc_release(v125);
                  v125 = 0;
                  xpc_release(v97);
                  if (v95)
                    dispatch_release(v95);
                  if (v94)
                    _Block_release(v94);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__p.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_195:
                      v105 = v128;
                      if (!v128)
                      {
LABEL_203:
                        if (v127)
                          std::__shared_weak_count::__release_weak(v127);
                        std::__shared_weak_count::__release_weak(v86);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__dst.__r_.__value_.__l.__data_);
                          if (!v96)
                            goto LABEL_210;
                        }
                        else if (!v96)
                        {
LABEL_210:
                          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_250;
LABEL_211:
                          if (SHIBYTE(v146[0].__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_251;
                          goto LABEL_212;
                        }
                        CFRelease(v96);
                        goto LABEL_210;
                      }
LABEL_202:
                      _Block_release(v105);
                      goto LABEL_203;
                    }
                  }
                  else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_195;
                  }
                  operator delete(v129.__r_.__value_.__l.__data_);
                  v105 = v128;
                  if (!v128)
                    goto LABEL_203;
                  goto LABEL_202;
                }
LABEL_184:
                dispatch_retain(v95);
                goto LABEL_185;
              }
            }
            memcpy(v75, v69, v74);
            goto LABEL_130;
          }
        }
        memmove(v65, v62, v64);
        v65->__r_.__value_.__s.__data_[v64] = 0;
        if (!v25)
          goto LABEL_139;
        goto LABEL_123;
      }
    }
    memmove(v54, v51, v53);
    goto LABEL_100;
  }
  memset(v151, 170, sizeof(v151));
  v106 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CF10E0]);
  v137[0] = v106;
  if (v106)
    xpc_retain(v106);
  else
    v137[0] = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v137[0]);
  v107 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
  {
    v108 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 16);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v108;
    _os_log_impl(&dword_1BF335000, v107, OS_LOG_TYPE_DEFAULT, "#I Baseband Log tracker size: %d", (uint8_t *)&__dst, 8u);
  }
  v137[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v137[1] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  BBLogTracker::getLog(*(_QWORD *)(a1 + 256), v151, (uint64_t *)v137);
  v109 = v137[0];
  if (!v137[0])
  {
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v137);
    if (SHIBYTE(v151[2]) < 0)
      operator delete((void *)v151[0]);
    goto LABEL_85;
  }
  v110 = *(NSObject **)(a1 + 88);
  v111 = os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT);
  v112 = MEMORY[0x1E0C812F8];
  if (v111)
  {
    asString((uint64_t)v109, &__dst);
    v113 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__dst
         : (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v150 = v113;
    _os_log_impl(&dword_1BF335000, v110, OS_LOG_TYPE_DEFAULT, "#I Log tracker info: %s", buf, 0xCu);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v114 = xpc_dictionary_create(0, 0, 0);
  v115 = v114;
  if (v114)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
  }
  else
  {
    v115 = xpc_null_create();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
    if (!v115)
    {
      v116 = xpc_null_create();
      v115 = 0;
      goto LABEL_238;
    }
  }
  if (MEMORY[0x1C3B8A86C](v115) == v112)
  {
    xpc_retain(v115);
    goto LABEL_239;
  }
  v116 = xpc_null_create();
LABEL_238:
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
LABEL_239:
  xpc_release(v115);
  xpc::dict::operator=(&v138, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  v135 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
  if (!v135)
    v135 = xpc_null_create();
  v117 = *MEMORY[0x1E0CFB6A0];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
  __dst.__r_.__value_.__l.__size_ = v117;
  xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v135, &v136);
  xpc_release(v136);
  v136 = 0;
  xpc_release(v135);
  v135 = 0;
  v118 = (const char *)v137[0];
  if (*((char *)v137[0] + 23) < 0)
    v118 = *(const char **)v137[0];
  v133 = xpc_string_create(v118);
  if (!v133)
    v133 = xpc_null_create();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v121;
  xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v133, &v134);
  xpc_release(v134);
  v134 = 0;
  xpc_release(v133);
  v133 = 0;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v138);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v137);
  if (SHIBYTE(v151[2]) < 0)
    operator delete((void *)v151[0]);
  xpc_release(v138);
  if ((block[31] & 0x80000000) != 0)
    operator delete(*(void **)&block[8]);
  xpc_release(v43);
  xpc_release(xdict);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v142);
  if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_211;
LABEL_250:
  operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146[0].__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_251:
    operator delete(v146[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v146[1].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_252;
    return;
  }
LABEL_212:
  if (SHIBYTE(v146[1].__r_.__value_.__r.__words[2]) < 0)
LABEL_252:
    operator delete(v146[1].__r_.__value_.__l.__data_);
}

void sub_1BF4CF228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,xpc_object_t a42,uint64_t a43,xpc_object_t object,xpc_object_t a45,xpc_object_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void TraceManager::collectLogs_sync(_QWORD *a1, xpc_object_t *a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  void (**v9)(void *, uint64_t, stat *);
  xpc_object_t v10;
  const __CFString **v11;
  xpc_object_t value;
  const char *v13;
  char *v14;
  const __CFString **v15;
  xpc_object_t v16;
  const __CFString **v17;
  xpc_object_t v18;
  const __CFString **v19;
  xpc_object_t v20;
  const __CFString **v21;
  xpc_object_t v22;
  const __CFString **v23;
  xpc_object_t v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  xpc_object_t v30;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  xpc_object_t v39;
  int v40;
  const void *v41;
  size_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  xpc_object_t v47;
  void *v48;
  size_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  xpc_object_t v54;
  std::string::size_type size;
  const void *v56;
  size_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int data;
  xpc_object_t v63;
  int v64;
  char IsCarrierBuild;
  char v66;
  uint64_t **v67;
  NSObject *v68;
  stat *p_block;
  uint64_t *v70;
  NSObject *v71;
  const void *v72;
  size_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  const void *v80;
  size_t v81;
  int v82;
  size_t v83;
  __darwin_ino64_t v84;
  size_t v85;
  char *v86;
  char *v87;
  void **v88;
  std::string *v89;
  void *v90;
  char v91;
  size_t v92;
  std::string::size_type *v93;
  uint64_t v94;
  uint64_t v95;
  const void *v96;
  size_t v97;
  __darwin_ino64_t v98;
  void *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int st_gid_high;
  void *v104;
  stat *v105;
  std::string *v106;
  size_t v107;
  int v108;
  int v109;
  int v110;
  NSObject *v111;
  std::string *v112;
  const __CFAllocator *v113;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v115;
  __CFDictionary *v116;
  const __CFAllocator *v117;
  const __CFAllocator *v118;
  const __CFAllocator *v119;
  const __CFAllocator *v120;
  const __CFAllocator *v121;
  const __CFAllocator *v122;
  const __CFAllocator *v123;
  const __CFAllocator *v124;
  const __CFAllocator *v125;
  const __CFAllocator *v126;
  const __CFAllocator *v127;
  const __CFString **v128;
  xpc_object_t v129;
  int v130;
  const __CFAllocator *v131;
  const __CFString **v132;
  xpc_object_t v133;
  int v134;
  const __CFAllocator *v135;
  const __CFString **v136;
  xpc_object_t v137;
  int v138;
  const __CFAllocator *v139;
  const __CFAllocator *v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  xpc_object_t v148;
  xpc_object_t v149;
  xpc_object_t v150;
  xpc_object_t v151;
  xpc_object_t v152;
  xpc_object_t v153;
  xpc_object_t v154;
  const char *v155;
  const char *v156;
  const char *v157;
  const __CFString ***v158;
  const void *v159;
  size_t v160;
  void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  timespec v165;
  void **v166;
  int v167;
  const __CFAllocator *v168;
  int v169;
  __int128 v170;
  const __CFAllocator *v171;
  NSObject *v172;
  std::__shared_weak_count *v173;
  const void *v174;
  size_t v175;
  void *v176;
  void *v177;
  CFTypeRef v178;
  uint64_t v179;
  uint64_t v180;
  CFTypeID v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *p_shared_owners;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *st_ino;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  CFTypeRef v200;
  void **v201;
  int v202;
  const __CFString **v203;
  const __CFString **v204;
  const __CFString **v205;
  int v206;
  const __CFString **v207;
  const __CFString **v208;
  const __CFString **v209;
  const __CFString **v210;
  const __CFString **v211;
  const __CFString **v212;
  char *__s;
  void *__src;
  _QWORD aBlock[5];
  __int128 v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  xpc_object_t v219;
  CFTypeRef v220;
  void *v221;
  std::string v222;
  void *v223;
  CFTypeRef v224;
  void *v225[2];
  unint64_t v226;
  xpc_object_t v227;
  void *v228[2];
  int64_t v229;
  xpc_object_t v230;
  __int128 v231;
  unint64_t v232;
  unint64_t v233;
  CFTypeRef cf;
  std::string v235;
  void *__p[2];
  char v237;
  char v238;
  BOOL v239;
  char v240;
  std::string v241[2];
  void *v242[3];
  void *v243[3];
  std::string::size_type __sz[3];
  std::string v245;
  xpc_object_t __dst[4];
  stat block;
  uint64_t v248;

  v248 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8A86C](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = xpc_null_create();
    v9 = (void (**)(void *, uint64_t, stat *))*a3;
    *(_QWORD *)&block.st_dev = v8;
    v10 = xpc_null_create();
    v9[2](v9, 3760250880, &block);
    xpc_release(*(xpc_object_t *)&block.st_dev);
    xpc_release(v10);
    return;
  }
  memset(__sz, 170, sizeof(__sz));
  v11 = (const __CFString **)*MEMORY[0x1E0CFB0F8];
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB0F8]);
  *(_QWORD *)&block.st_dev = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v14 = (char *)*MEMORY[0x1E0CFB4D8];
  xpc::dyn_cast_or_default((xpc *)&block, (const object *)*MEMORY[0x1E0CFB4D8], v13);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  memset(v243, 170, sizeof(v243));
  v15 = (const __CFString **)*MEMORY[0x1E0CFB370];
  v16 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB370]);
  v241[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16)
    xpc_retain(v16);
  else
    v241[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)v242);
  Timestamp::asString((uint64_t)v242, 0, 9, &block);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v242, (_QWORD *)v242[1]);
  xpc_release(v241[1].__r_.__value_.__l.__data_);
  memset(v242, 170, sizeof(v242));
  v17 = (const __CFString **)*MEMORY[0x1E0CFB538];
  v18 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB538]);
  v241[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18)
    xpc_retain(v18);
  else
    v241[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&block, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  xpc_release(v241[1].__r_.__value_.__l.__data_);
  memset(&v241[1], 170, sizeof(std::string));
  v19 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
  v20 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0]);
  v241[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  if (v20)
    xpc_retain(v20);
  else
    v241[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&block, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  __s = v14;
  xpc_release(v241[0].__r_.__value_.__l.__data_);
  memset(v241, 170, 24);
  v21 = (const __CFString **)*MEMORY[0x1E0CFB930];
  v22 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB930]);
  __dst[0] = v22;
  if (v22)
    xpc_retain(v22);
  else
    __dst[0] = xpc_null_create();
  memset(&block, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  xpc_release(__dst[0]);
  v23 = (const __CFString **)*MEMORY[0x1E0CFB010];
  v24 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB010]);
  *(_QWORD *)&block.st_dev = v24;
  if (v24)
    xpc_retain(v24);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v211 = v15;
  v212 = v21;
  v206 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)7);
  v207 = v23;
  v208 = v19;
  v209 = v17;
  xpc_release(*(xpc_object_t *)&block.st_dev);
  v240 = 1;
  __src = (void *)*MEMORY[0x1E0CFC0C0];
  v25 = strlen((const char *)*MEMORY[0x1E0CFC0C0]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  v210 = v11;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __dst[2] = (xpc_object_t)(v29 | 0x8000000000000000);
    __dst[0] = v27;
    __dst[1] = v26;
    goto LABEL_36;
  }
  HIBYTE(__dst[2]) = v25;
  v27 = __dst;
  if (v25)
LABEL_36:
    memmove(v27, __src, (size_t)v26);
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  memset(&block, 0, 24);
  if (prop::logfilter::get((char *)__dst, (uint64_t)&block))
    util::convert<BOOL>((const std::string *)&block, (BOOL *)&v240, 0);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_41;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(__dst[0]);
LABEL_41:
  v30 = xpc_dictionary_get_value(*a2, (const char *)__src);
  *(_QWORD *)&block.st_dev = v30;
  if (v30)
    xpc_retain(v30);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v240 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)v240);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v239 = 0;
  v33 = (const void *)*MEMORY[0x1E0CF11E8];
  v34 = strlen((const char *)*MEMORY[0x1E0CF11E8]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    __dst[2] = (xpc_object_t)(v38 | 0x8000000000000000);
    __dst[0] = v36;
    __dst[1] = v35;
    goto LABEL_57;
  }
  HIBYTE(__dst[2]) = v34;
  v36 = __dst;
  if (v34)
LABEL_57:
    memmove(v36, v33, (size_t)v35);
  *((_BYTE *)v35 + (_QWORD)v36) = 0;
  memset(&block, 0, 24);
  if (prop::compression::get((char *)__dst, (uint64_t)&block))
  {
    LODWORD(v245.__r_.__value_.__l.__data_) = -1431655766;
    if (util::convert<int>((const std::string *)&block, &v245, 0))
      CompressionMode = LODWORD(v245.__r_.__value_.__l.__data_);
    else
      CompressionMode = CompressionMode;
  }
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_64;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(__dst[0]);
LABEL_64:
  v205 = (const __CFString **)*MEMORY[0x1E0CFC068];
  v39 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC068]);
  *(_QWORD *)&block.st_dev = v39;
  if (v39)
    xpc_retain(v39);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v40 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  if (v40)
  {
    v239 = 0;
    v41 = (const void *)*MEMORY[0x1E0CF1070];
    v42 = strlen((const char *)*MEMORY[0x1E0CF1070]);
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v43 = (void *)v42;
    if (v42 >= 0x17)
    {
      v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v45 = v42 | 7;
      v46 = v45 + 1;
      v44 = operator new(v45 + 1);
      __dst[2] = (xpc_object_t)(v46 | 0x8000000000000000);
      __dst[0] = v44;
      __dst[1] = v43;
    }
    else
    {
      HIBYTE(__dst[2]) = v42;
      v44 = __dst;
      if (!v42)
      {
LABEL_78:
        *((_BYTE *)v43 + (_QWORD)v44) = 0;
        memset(&block, 0, 24);
        if (prop::compression::get((char *)__dst, (uint64_t)&block))
          util::convert<BOOL>((const std::string *)&block, &v239, 0);
        if (SHIBYTE(block.st_gid) < 0)
        {
          operator delete(*(void **)&block.st_dev);
          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
            goto LABEL_82;
        }
        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        {
LABEL_82:
          v47 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBDF8]);
          *(_QWORD *)&block.st_dev = v47;
          if (v47)
            xpc_retain(v47);
          else
            *(_QWORD *)&block.st_dev = xpc_null_create();
          v239 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)v239);
          xpc_release(*(xpc_object_t *)&block.st_dev);
          goto LABEL_88;
        }
        operator delete(__dst[0]);
        goto LABEL_82;
      }
    }
    memmove(v44, v41, (size_t)v43);
    goto LABEL_78;
  }
LABEL_88:
  v238 = 1;
  v48 = (void *)*MEMORY[0x1E0CFBA40];
  v49 = strlen((const char *)*MEMORY[0x1E0CFBA40]);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v50 = (void *)v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    __dst[2] = (xpc_object_t)(v53 | 0x8000000000000000);
    __dst[0] = v51;
    __dst[1] = v50;
    goto LABEL_95;
  }
  HIBYTE(__dst[2]) = v49;
  v51 = __dst;
  if (v49)
LABEL_95:
    memmove(v51, v48, (size_t)v50);
  *((_BYTE *)v50 + (_QWORD)v51) = 0;
  memset(&block, 0, 24);
  if (prop::systemlogs::get((char *)__dst, (uint64_t)&block))
    util::convert<BOOL>((const std::string *)&block, (BOOL *)&v238, 0);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_100;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_100;
  }
  operator delete(__dst[0]);
LABEL_100:
  v54 = xpc_dictionary_get_value(*a2, (const char *)v48);
  *(_QWORD *)&block.st_dev = v54;
  if (v54)
    xpc_retain(v54);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v238 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)v238);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  size = HIBYTE(v241[0].__r_.__value_.__r.__words[2]);
  if ((v241[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v241[0].__r_.__value_.__l.__size_;
  if (!size)
    std::string::__assign_external(v241, (const std::string::value_type *)*MEMORY[0x1E0CFB058]);
  v56 = (const void *)*MEMORY[0x1E0CFB028];
  v57 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v58 = (void *)v57;
  v204 = (const __CFString **)v48;
  if (v57 >= 0x17)
  {
    v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v60 = v57 | 7;
    v61 = v60 + 1;
    v59 = operator new(v60 + 1);
    __dst[2] = (xpc_object_t)(v61 | 0x8000000000000000);
    __dst[0] = v59;
    __dst[1] = v58;
    goto LABEL_116;
  }
  HIBYTE(__dst[2]) = v57;
  v59 = __dst;
  if (v57)
LABEL_116:
    memmove(v59, v56, (size_t)v58);
  *((_BYTE *)v58 + (_QWORD)v59) = 0;
  memset(&block, 0, 24);
  v201 = a3;
  if (!prop::systemlogs::get((char *)__dst, (uint64_t)&block))
  {
    data = 0;
    if ((SHIBYTE(block.st_gid) & 0x80000000) == 0)
      goto LABEL_125;
    goto LABEL_124;
  }
  LODWORD(v245.__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>((const std::string *)&block, &v245, 0))
    data = v245.__r_.__value_.__l.__data_;
  else
    data = 0;
  if (SHIBYTE(block.st_gid) < 0)
LABEL_124:
    operator delete(*(void **)&block.st_dev);
LABEL_125:
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v203 = (const __CFString **)*MEMORY[0x1E0CFB190];
  v63 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB190]);
  *(_QWORD *)&block.st_dev = v63;
  if (v63)
    xpc_retain(v63);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v64 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)data);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  if ((TelephonyUtilIsInternalBuild() & 1) != 0
    || ((IsCarrierBuild = TelephonyUtilIsCarrierBuild(), v64 != 2) ? (v66 = 1) : (v66 = IsCarrierBuild), (v66 & 1) != 0))
  {
    if (v64 == 2)
    {
      v67 = (uint64_t **)a1[32];
      if (v67)
      {
        v68 = a1[11];
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          abm::helper::asString();
          if ((block.st_gid & 0x80000000) == 0)
            p_block = &block;
          else
            p_block = *(stat **)&block.st_dev;
          LODWORD(__dst[0]) = 136315138;
          *(xpc_object_t *)((char *)__dst + 4) = p_block;
          _os_log_impl(&dword_1BF335000, v68, OS_LOG_TYPE_DEFAULT, "#I Detected a log dump with sysdiagnose mode, overriding compression mode to %s", (uint8_t *)__dst, 0xCu);
          if (SHIBYTE(block.st_gid) < 0)
            operator delete(*(void **)&block.st_dev);
          v67 = (uint64_t **)a1[32];
        }
        BBLogTracker::addLog(v67, (__int128 *)v243, 2, (uint64_t)__sz);
        v70 = (uint64_t *)a1[32];
        if ((unint64_t)v70[2] >= 0xB)
        {
          do
            std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v70, *v70);
          while ((unint64_t)v70[2] > 0xA);
        }
        v40 = 0;
      }
      v202 = 2;
    }
    else
    {
      v202 = v64;
    }
  }
  else
  {
    v71 = a1[11];
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block.st_dev) = 0;
      _os_log_error_impl(&dword_1BF335000, v71, OS_LOG_TYPE_ERROR, "Detected a log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&block, 2u);
    }
    v202 = 0;
  }
  memset(__dst, 170, 24);
  v72 = (const void *)*MEMORY[0x1E0D01A30];
  v73 = strlen((const char *)*MEMORY[0x1E0D01A30]);
  if (v73 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v74 = (void *)v73;
  if (v73 >= 0x17)
  {
    v76 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v73 | 7) != 0x17)
      v76 = v73 | 7;
    v77 = v76 + 1;
    v75 = operator new(v76 + 1);
    __dst[2] = (xpc_object_t)(v77 | 0x8000000000000000);
    __dst[0] = v75;
    __dst[1] = v74;
LABEL_160:
    memmove(v75, v72, (size_t)v74);
    *((_BYTE *)v74 + (_QWORD)v75) = 0;
    if (!v40)
      goto LABEL_177;
    goto LABEL_161;
  }
  HIBYTE(__dst[2]) = v73;
  v75 = __dst;
  if (v73)
    goto LABEL_160;
  LOBYTE(__dst[0]) = 0;
  if (!v40)
    goto LABEL_177;
LABEL_161:
  v78 = v40;
  v79 = a1;
  v80 = (const void *)*MEMORY[0x1E0D01A48];
  v81 = strlen((const char *)*MEMORY[0x1E0D01A48]);
  v82 = SHIBYTE(v243[2]);
  if (SHIBYTE(v243[2]) >= 0)
    v83 = HIBYTE(v243[2]);
  else
    v83 = (size_t)v243[1];
  v84 = v83 + v81;
  memset(&block, 170, 24);
  if (v83 + v81 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v81;
  if (v84 > 0x16)
  {
    v94 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v94 = v84 | 7;
    v95 = v94 + 1;
    v86 = (char *)operator new(v94 + 1);
    block.st_ino = v84;
    *(_QWORD *)&block.st_uid = v95 | 0x8000000000000000;
    *(_QWORD *)&block.st_dev = v86;
    v40 = v78;
    if (!v85)
      goto LABEL_168;
    goto LABEL_167;
  }
  memset(&block, 0, 24);
  v86 = (char *)&block;
  HIBYTE(block.st_gid) = v83 + v81;
  v40 = v78;
  if (v81)
LABEL_167:
    memcpy(v86, v80, v85);
LABEL_168:
  v87 = &v86[v85];
  if (v83)
  {
    if (v82 >= 0)
      v88 = v243;
    else
      v88 = (void **)v243[0];
    memmove(v87, v88, v83);
  }
  v87[v83] = 0;
  v89 = std::string::append((std::string *)&block, "/", 1uLL);
  v90 = (void *)v89->__r_.__value_.__r.__words[0];
  v245.__r_.__value_.__r.__words[0] = v89->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v245.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v89->__r_.__value_.__r.__words[1] + 7);
  v91 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  a1 = v79;
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  __dst[0] = v90;
  __dst[1] = v245.__r_.__value_.__l.__data_;
  *(xpc_object_t *)((char *)&__dst[1] + 7) = *(xpc_object_t *)((char *)v245.__r_.__value_.__r.__words + 7);
  HIBYTE(__dst[2]) = v91;
  v7 = MEMORY[0x1E0C812F8];
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
LABEL_177:
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if ((__sz[2] & 0x8000000000000000) == 0)
    v92 = HIBYTE(__sz[2]);
  else
    v92 = __sz[1];
  if (v92 == strlen(__s))
  {
    v93 = (__sz[2] & 0x8000000000000000) == 0 ? __sz : (std::string::size_type *)__sz[0];
    if (!memcmp(v93, __s, v92))
    {
      v237 = 9;
      strcpy((char *)__p, "StateDump");
      if (SHIBYTE(v241[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v235, v241[0].__r_.__value_.__l.__data_, v241[0].__r_.__value_.__l.__size_);
      else
        v235 = v241[0];
      TraceManager::submitTraceMetric_sync((uint64_t)a1, (const char *)__p, (const char *)&v235);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v235.__r_.__value_.__l.__data_);
      if (v237 < 0)
        operator delete(__p[0]);
    }
  }
  memset(&v245, 0, sizeof(v245));
  TraceFilter::determineFilterAction(&v245);
  v96 = (const void *)*MEMORY[0x1E0CFB6C8];
  v97 = strlen((const char *)*MEMORY[0x1E0CFB6C8]);
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v98 = v97;
  if (v97 >= 0x17)
  {
    v101 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v101 = v97 | 7;
    v102 = v101 + 1;
    v99 = operator new(v101 + 1);
    block.st_ino = v98;
    *(_QWORD *)&block.st_uid = v102 | 0x8000000000000000;
    *(_QWORD *)&block.st_dev = v99;
  }
  else
  {
    HIBYTE(block.st_gid) = v97;
    v99 = &block;
    if (!v97)
    {
      v100 = v40;
      goto LABEL_204;
    }
  }
  v100 = v40;
  memmove(v99, v96, v98);
LABEL_204:
  *((_BYTE *)v99 + v98) = 0;
  st_gid_high = SHIBYTE(block.st_gid);
  v104 = *(void **)&block.st_dev;
  if ((block.st_gid & 0x80000000) == 0)
    v105 = &block;
  else
    v105 = *(stat **)&block.st_dev;
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v106 = &v245;
  else
    v106 = (std::string *)v245.__r_.__value_.__r.__words[0];
  v107 = strlen((const char *)v96);
  v108 = strncasecmp((const char *)v105, (const char *)v106, v107);
  v109 = v108;
  if (st_gid_high < 0)
  {
    operator delete(v104);
    v110 = v100;
    if (!v109)
      goto LABEL_215;
    goto LABEL_214;
  }
  v110 = v100;
  if (v108)
LABEL_214:
    std::string::append(v241, " (some logs are dropped due to not enough space on device!)", 0x3BuLL);
LABEL_215:
  v111 = a1[11];
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
  {
    v112 = &v245;
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v112 = (std::string *)v245.__r_.__value_.__r.__words[0];
    block.st_dev = 136315138;
    *(_QWORD *)&block.st_mode = v112;
    _os_log_impl(&dword_1BF335000, v111, OS_LOG_TYPE_DEFAULT, "#I Trace filter '%s'", (uint8_t *)&block, 0xCu);
  }
  cf = 0;
  v113 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v116 = Mutable;
  if (Mutable)
    cf = Mutable;
  if (SHIBYTE(v241[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&block, v241[0].__r_.__value_.__l.__data_, v241[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&block.st_dev = *(_OWORD *)&v241[0].__r_.__value_.__l.__data_;
    *(_QWORD *)&block.st_uid = *((_QWORD *)&v241[0].__r_.__value_.__l + 2);
  }
  ctu::cf::insert<char const*,std::string>(v116, v212, (uint64_t)&block, (uint64_t)v113, v115);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
      goto LABEL_226;
  }
  else if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
  {
LABEL_226:
    *(_OWORD *)&block.st_dev = *(_OWORD *)v243;
    *(void **)&block.st_uid = v243[2];
    goto LABEL_229;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, (const std::string::value_type *)v243[0], (std::string::size_type)v243[1]);
LABEL_229:
  ctu::cf::insert<char const*,std::string>(v116, v211, (uint64_t)&block, (uint64_t)v113, v117);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_231;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
LABEL_231:
    *(_OWORD *)&block.st_dev = *(_OWORD *)__dst;
    *(xpc_object_t *)&block.st_uid = __dst[2];
    goto LABEL_234;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
LABEL_234:
  ctu::cf::insert<char const*,std::string>(v116, (const __CFString **)*MEMORY[0x1E0CFB6A0], (uint64_t)&block, (uint64_t)v113, v118);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__sz[2]) & 0x80000000) == 0)
      goto LABEL_236;
  }
  else if ((SHIBYTE(__sz[2]) & 0x80000000) == 0)
  {
LABEL_236:
    *(_OWORD *)&block.st_dev = *(_OWORD *)__sz;
    *(_QWORD *)&block.st_uid = __sz[2];
    goto LABEL_239;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, (const std::string::value_type *)__sz[0], __sz[1]);
LABEL_239:
  ctu::cf::insert<char const*,std::string>(v116, v210, (uint64_t)&block, (uint64_t)v113, v119);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_241;
  }
  else if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_241:
    *(_OWORD *)&block.st_dev = *(_OWORD *)&v245.__r_.__value_.__l.__data_;
    *(_QWORD *)&block.st_uid = *((_QWORD *)&v245.__r_.__value_.__l + 2);
    goto LABEL_244;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
LABEL_244:
  ctu::cf::insert<char const*,std::string>(v116, (const __CFString **)*MEMORY[0x1E0CFB548], (uint64_t)&block, (uint64_t)v113, v120);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(v242[2]) & 0x80000000) == 0)
      goto LABEL_246;
  }
  else if ((SHIBYTE(v242[2]) & 0x80000000) == 0)
  {
LABEL_246:
    *(_OWORD *)&block.st_dev = *(_OWORD *)v242;
    *(void **)&block.st_uid = v242[2];
    goto LABEL_249;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, (const std::string::value_type *)v242[0], (std::string::size_type)v242[1]);
LABEL_249:
  ctu::cf::insert<char const*,std::string>(v116, v209, (uint64_t)&block, (uint64_t)v113, v121);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(v241[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_251;
  }
  else if ((SHIBYTE(v241[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_251:
    *(_OWORD *)&block.st_dev = *(_OWORD *)&v241[1].__r_.__value_.__l.__data_;
    *(_QWORD *)&block.st_uid = *((_QWORD *)&v241[1].__r_.__value_.__l + 2);
    goto LABEL_254;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, v241[1].__r_.__value_.__l.__data_, v241[1].__r_.__value_.__l.__size_);
LABEL_254:
  ctu::cf::insert<char const*,std::string>(v116, v208, (uint64_t)&block, (uint64_t)v113, v122);
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  ctu::cf::insert<char const*,int>(v116, v207, v206, v113, v123);
  ctu::cf::insert<char const*,int>(v116, v205, v110, v113, v124);
  ctu::cf::insert<char const*,BOOL>(v116, (const __CFString **)*MEMORY[0x1E0CFBDF8], v239, (uint64_t)v113, v125);
  ctu::cf::insert<char const*,int>(v116, v203, v202, v113, v126);
  ctu::cf::insert<char const*,BOOL>(v116, v204, v238, (uint64_t)v113, v127);
  v128 = (const __CFString **)*MEMORY[0x1E0CFB780];
  v129 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB780]);
  *(_QWORD *)&block.st_dev = v129;
  if (v129)
    xpc_retain(v129);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v130 = xpc::dyn_cast_or_default((xpc *)&block, 0);
  ctu::cf::insert<char const*,BOOL>(v116, v128, v130, (uint64_t)v113, v131);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  v132 = (const __CFString **)*MEMORY[0x1E0CFB798];
  v133 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB798]);
  *(_QWORD *)&block.st_dev = v133;
  if (v133)
    xpc_retain(v133);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v134 = xpc::dyn_cast_or_default((xpc *)&block, 0);
  ctu::cf::insert<char const*,BOOL>(v116, v132, v134, (uint64_t)v113, v135);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  v136 = (const __CFString **)*MEMORY[0x1E0CFB790];
  v137 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB790]);
  *(_QWORD *)&block.st_dev = v137;
  if (v137)
    xpc_retain(v137);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v138 = xpc::dyn_cast_or_default((xpc *)&block, 0);
  ctu::cf::insert<char const*,BOOL>(v116, v136, v138, (uint64_t)v113, v139);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  ctu::cf::insert<char const*,BOOL>(v116, (const __CFString **)__src, v240, (uint64_t)v113, v140);
  v232 = 0xAAAAAAAAAAAAAAAALL;
  v233 = 0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v142 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block.st_dev = MEMORY[0x1E0C809B0];
  block.st_ino = 0x40000000;
  *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_2;
  block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v143 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v231 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_270;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v143 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v231 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_270;
  }
  v144 = (unint64_t *)(v143 + 8);
  do
    v145 = __ldxr(v144);
  while (__stxr(v145 + 1, v144));
LABEL_270:
  abm::HelperClient::create();
  if (*((_QWORD *)&v231 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v231 + 1) + 16))(*((_QWORD *)&v231 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v231 + 1));
    }
  }
  v148 = xpc_dictionary_create(0, 0, 0);
  if (v148 || (v148 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v148) == v7)
    {
      xpc_retain(v148);
      v149 = v148;
    }
    else
    {
      v149 = xpc_null_create();
    }
  }
  else
  {
    v149 = xpc_null_create();
    v148 = 0;
  }
  xpc_release(v148);
  v230 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v150 = xpc_dictionary_create(0, 0, 0);
  v151 = v150;
  if (v150)
  {
    v230 = v150;
  }
  else
  {
    v151 = xpc_null_create();
    v230 = v151;
    if (!v151)
    {
      v152 = xpc_null_create();
      v151 = 0;
      goto LABEL_288;
    }
  }
  if (MEMORY[0x1C3B8A86C](v151) == v7)
  {
    xpc_retain(v151);
    goto LABEL_289;
  }
  v152 = xpc_null_create();
LABEL_288:
  v230 = v152;
LABEL_289:
  xpc_release(v151);
  v153 = xpc_int64_create(1500);
  if (!v153)
    v153 = xpc_null_create();
  xpc_dictionary_set_value(v149, (const char *)*MEMORY[0x1E0CF1008], v153);
  v154 = xpc_null_create();
  xpc_release(v153);
  xpc_release(v154);
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v155)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v156)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v157))
  {
    v158 = (const __CFString ***)MEMORY[0x1E0D01A70];
    v159 = (const void *)*MEMORY[0x1E0D01A70];
    v160 = strlen((const char *)*MEMORY[0x1E0D01A70]);
    if (v160 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v161 = (void *)v160;
    if (v160 >= 0x17)
    {
      v163 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v160 | 7) != 0x17)
        v163 = v160 | 7;
      v164 = v163 + 1;
      v162 = operator new(v163 + 1);
      v228[1] = v161;
      v229 = v164 | 0x8000000000000000;
      v228[0] = v162;
    }
    else
    {
      HIBYTE(v229) = v160;
      v162 = v228;
      if (!v160)
      {
LABEL_302:
        *((_BYTE *)v161 + (_QWORD)v162) = 0;
        v165.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v165.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&block.st_blksize = v165;
        *(timespec *)block.st_qspare = v165;
        block.st_birthtimespec = v165;
        *(timespec *)&block.st_size = v165;
        block.st_mtimespec = v165;
        block.st_ctimespec = v165;
        *(timespec *)&block.st_uid = v165;
        block.st_atimespec = v165;
        *(timespec *)&block.st_dev = v165;
        if (v229 >= 0)
          v166 = v228;
        else
          v166 = (void **)v228[0];
        v167 = stat((const char *)v166, &block);
        v169 = v167;
        if (SHIBYTE(v229) < 0)
        {
          operator delete(v228[0]);
          if (v169)
            goto LABEL_307;
        }
        else if (v167)
        {
LABEL_307:
          *(_QWORD *)&v170 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v170 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&block.st_dev = v170;
          *(_OWORD *)&block.st_uid = v170;
          v227 = v149;
          if (v149)
            xpc_retain(v149);
          else
            v227 = xpc_null_create();
          abm::HelperClient::perform();
          xpc_release(v227);
          v227 = 0;
          if (!block.st_dev)
            ctu::cf::insert<char const*,char const*>((__CFDictionary *)cf, (const __CFString **)*MEMORY[0x1E0CFC110], *v158, (uint64_t)v113, v171);
          if (*((char *)&block.st_rdev + 7) < 0)
            operator delete((void *)block.st_ino);
          goto LABEL_318;
        }
        ctu::cf::insert<char const*,char const*>((__CFDictionary *)cf, (const __CFString **)*MEMORY[0x1E0CFC110], *v158, (uint64_t)v113, v168);
        goto LABEL_318;
      }
    }
    memmove(v162, v159, (size_t)v161);
    goto LABEL_302;
  }
  v172 = a1[11];
  if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(block.st_dev) = 0;
    _os_log_impl(&dword_1BF335000, v172, OS_LOG_TYPE_DEFAULT, "#I mobile BasebandServices path is disabled as baseband log is off", (uint8_t *)&block, 2u);
  }
LABEL_318:
  v173 = (std::__shared_weak_count *)a1[16];
  *(_QWORD *)&block.st_dev = a1[15];
  if (!v173 || (block.st_ino = (__darwin_ino64_t)std::__shared_weak_count::lock(v173)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v174 = (const void *)*MEMORY[0x1E0CFB9A8];
  v175 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v175 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v176 = (void *)v175;
  if (v175 >= 0x17)
  {
    v179 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v175 | 7) != 0x17)
      v179 = v175 | 7;
    v180 = v179 + 1;
    v177 = operator new(v179 + 1);
    v225[1] = v176;
    v226 = v180 | 0x8000000000000000;
    v225[0] = v177;
LABEL_328:
    memmove(v177, v174, (size_t)v176);
    *((_BYTE *)v176 + (_QWORD)v177) = 0;
    v178 = cf;
    if (!cf)
      goto LABEL_331;
    goto LABEL_329;
  }
  HIBYTE(v226) = v175;
  v177 = v225;
  if (v175)
    goto LABEL_328;
  LOBYTE(v225[0]) = 0;
  v178 = cf;
  if (!cf)
    goto LABEL_331;
LABEL_329:
  v181 = CFGetTypeID(v178);
  if (v181 == CFDictionaryGetTypeID())
  {
    v224 = v178;
    CFRetain(v178);
    goto LABEL_332;
  }
LABEL_331:
  v224 = 0;
LABEL_332:
  aBlock[0] = v142;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_40_0;
  aBlock[4] = a1;
  v216 = *(_OWORD *)&block.st_dev;
  if (block.st_ino)
  {
    v182 = (unint64_t *)(block.st_ino + 8);
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
  }
  v217 = v232;
  v218 = (std::__shared_weak_count *)v233;
  if (v233)
  {
    v184 = (unint64_t *)(v233 + 8);
    do
      v185 = __ldxr(v184);
    while (__stxr(v185 + 1, v184));
  }
  v219 = v149;
  if (!v149)
  {
    v219 = xpc_null_create();
    v220 = v178;
    if (!v178)
      goto LABEL_343;
    goto LABEL_342;
  }
  xpc_retain(v149);
  v178 = cf;
  v220 = cf;
  if (cf)
LABEL_342:
    CFRetain(v178);
LABEL_343:
  v186 = *v201;
  if (*v201)
    v186 = _Block_copy(v186);
  v221 = v186;
  if (SHIBYTE(v241[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v222, v241[0].__r_.__value_.__l.__data_, v241[0].__r_.__value_.__l.__size_);
  else
    v222 = v241[0];
  v223 = _Block_copy(aBlock);
  Service::broadcastEvent((uint64_t)a1, (uint64_t)v225, &v224, (const void **)&v223);
  if (v223)
    _Block_release(v223);
  if (v224)
    CFRelease(v224);
  if ((SHIBYTE(v226) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_354;
LABEL_357:
    operator delete(v222.__r_.__value_.__l.__data_);
    v187 = v221;
    if (!v221)
      goto LABEL_359;
    goto LABEL_358;
  }
  operator delete(v225[0]);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_357;
LABEL_354:
  v187 = v221;
  if (v221)
LABEL_358:
    _Block_release(v187);
LABEL_359:
  if (v220)
    CFRelease(v220);
  xpc_release(v219);
  v219 = 0;
  v188 = v218;
  if (v218)
  {
    p_shared_owners = (unint64_t *)&v218->__shared_owners_;
    do
      v190 = __ldaxr(p_shared_owners);
    while (__stlxr(v190 - 1, p_shared_owners));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v192 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  st_ino = (std::__shared_weak_count *)block.st_ino;
  if (block.st_ino)
  {
    v195 = (unint64_t *)(block.st_ino + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
      std::__shared_weak_count::__release_weak(st_ino);
    }
  }
  xpc_release(v230);
  xpc_release(v149);
  v197 = (std::__shared_weak_count *)v233;
  if (!v233)
    goto LABEL_380;
  v198 = (unint64_t *)(v233 + 8);
  do
    v199 = __ldaxr(v198);
  while (__stlxr(v199 - 1, v198));
  if (v199)
  {
LABEL_380:
    v200 = cf;
    if (!cf)
      goto LABEL_382;
    goto LABEL_381;
  }
  ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
  std::__shared_weak_count::__release_weak(v197);
  v200 = cf;
  if (cf)
LABEL_381:
    CFRelease(v200);
LABEL_382:
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v245.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_384:
      if ((SHIBYTE(v241[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_385;
      goto LABEL_392;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_384;
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v241[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_385:
    if ((SHIBYTE(v241[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_386;
    goto LABEL_393;
  }
LABEL_392:
  operator delete(v241[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v241[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_386:
    if ((SHIBYTE(v242[2]) & 0x80000000) == 0)
      goto LABEL_387;
    goto LABEL_394;
  }
LABEL_393:
  operator delete(v241[1].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v242[2]) & 0x80000000) == 0)
  {
LABEL_387:
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
      goto LABEL_388;
    goto LABEL_395;
  }
LABEL_394:
  operator delete(v242[0]);
  if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
  {
LABEL_388:
    if ((SHIBYTE(__sz[2]) & 0x80000000) == 0)
      return;
LABEL_396:
    operator delete((void *)__sz[0]);
    return;
  }
LABEL_395:
  operator delete(v243[0]);
  if (SHIBYTE(__sz[2]) < 0)
    goto LABEL_396;
}

void sub_1BF4D1278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t a32,uint64_t a33,void *aBlock,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,xpc_object_t a43,void *a44,uint64_t a45,uint64_t a46,xpc_object_t object,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  xpc_object_t a64;
  char a69;
  xpc_object_t a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;

  if (a62 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (a69 < 0)
    operator delete(a64);
  if (a72 < 0)
    operator delete(a70);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  _Unwind_Resume(a1);
}

void TraceManager::submitTraceMetric_sync(uint64_t a1, const char *a2, const char *a3)
{
  NSObject *v3;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v31;
  unint64_t v32;

  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 152))
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of trace stats", buf, 2u);
    }
    v7 = xpc_dictionary_create(0, 0, 0);
    v8 = MEMORY[0x1E0C812F8];
    if (v7 || (v7 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v7) == v8)
      {
        xpc_retain(v7);
        v9 = v7;
      }
      else
      {
        v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_null_create();
      v7 = 0;
    }
    xpc_release(v7);
    v10 = xpc_dictionary_create(0, 0, 0);
    if (v10 || (v10 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v10) == v8)
      {
        xpc_retain(v10);
        v11 = v10;
      }
      else
      {
        v11 = xpc_null_create();
      }
    }
    else
    {
      v11 = xpc_null_create();
      v10 = 0;
    }
    xpc_release(v10);
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    v12 = xpc_string_create(a2);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB760], v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (a3[23] < 0)
      a3 = *(const char **)a3;
    v14 = xpc_string_create(a3);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB9C8], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
    if (!v16)
      v16 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB020], v16);
    v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    v18 = xpc_int64_create(524539);
    if (!v18)
      v18 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB0E8], v18);
    v19 = xpc_null_create();
    xpc_release(v18);
    xpc_release(v19);
    if (v11)
    {
      xpc_retain(v11);
      v20 = v11;
    }
    else
    {
      v20 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB018], v20);
    v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    v22 = (const void *)*MEMORY[0x1E0CFB5E0];
    v23 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
    if (v23 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v24 = v23;
    if (v23 >= 0x17)
    {
      v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v26 = v23 | 7;
      v27 = v26 + 1;
      v25 = operator new(v26 + 1);
      v31 = v24;
      v32 = v27 | 0x8000000000000000;
      *(_QWORD *)buf = v25;
    }
    else
    {
      HIBYTE(v32) = v23;
      v25 = buf;
      if (!v23)
      {
        buf[0] = 0;
        object = v9;
        if (v9)
        {
LABEL_37:
          xpc_retain(v9);
LABEL_43:
          v28 = 0;
          Service::runCommand(a1, (uint64_t)buf, &object, &v28);
          xpc_release(object);
          object = 0;
          if (SHIBYTE(v32) < 0)
            operator delete(*(void **)buf);
          xpc_release(v11);
          xpc_release(v9);
          return;
        }
LABEL_42:
        object = xpc_null_create();
        goto LABEL_43;
      }
    }
    memmove(v25, v22, v24);
    *((_BYTE *)v25 + v24) = 0;
    object = v9;
    if (v9)
      goto LABEL_37;
    goto LABEL_42;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v3, OS_LOG_TYPE_ERROR, "Baseband manager is not ready yet", buf, 2u);
  }
}

void sub_1BF4D1C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  const void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::string *v13;
  std::string::size_type v14;
  unint64_t *v15;
  unint64_t v16;
  xpc_object_t v17;
  const void *v18;
  void *v19;
  std::string *v20;
  NSObject *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  std::string::size_type v27;
  std::string::size_type v28;
  xpc_object_t object;
  _QWORD *v30;
  const void *v31;
  void *aBlock;
  std::string v33;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v27 = *(_QWORD *)(a1 + 56);
  v28 = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(void **)(a1 + 72);
  object = v6;
  if (!v6)
  {
    object = xpc_null_create();
    v7 = *(const void **)(a1 + 80);
    v30 = v2;
    v31 = v7;
    if (!v7)
      goto LABEL_9;
    goto LABEL_8;
  }
  xpc_retain(v6);
  v7 = *(const void **)(a1 + 80);
  v30 = v2;
  v31 = v7;
  if (v7)
LABEL_8:
    CFRetain(v7);
LABEL_9:
  v8 = *(void **)(a1 + 88);
  if (v8)
    v8 = _Block_copy(v8);
  aBlock = v8;
  if (*(char *)(a1 + 119) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
  else
    v33 = *(std::string *)(a1 + 96);
  v9 = (std::__shared_weak_count *)v2[16];
  if (!v9 || (v10 = v2[15], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = (std::string *)operator new(0x48uLL);
  v14 = v28;
  v13->__r_.__value_.__r.__words[0] = v27;
  v13->__r_.__value_.__l.__size_ = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = object;
  v13->__r_.__value_.__r.__words[2] = (std::string::size_type)object;
  if (!v17)
  {
    v13->__r_.__value_.__r.__words[2] = (std::string::size_type)xpc_null_create();
    v18 = v31;
    v13[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    v13[1].__r_.__value_.__l.__size_ = (std::string::size_type)v18;
    if (!v18)
      goto LABEL_24;
    goto LABEL_23;
  }
  xpc_retain(v17);
  v18 = v31;
  v13[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  v13[1].__r_.__value_.__l.__size_ = (std::string::size_type)v18;
  if (v18)
LABEL_23:
    CFRetain(v18);
LABEL_24:
  v19 = aBlock;
  if (aBlock)
    v19 = _Block_copy(aBlock);
  v13[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v19;
  v20 = v13 + 2;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    v13[2].__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
  }
  v21 = v2[17];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v24 = operator new(0x18uLL);
  *v24 = v13;
  v24[1] = v10;
  v24[2] = v12;
  dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_16collectLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return _ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev((uint64_t)&v27);
}

void sub_1BF4D1EE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, void *aBlock)
{
  uint64_t v15;
  const void *v17;
  const void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v17 = *(const void **)(v15 + 40);
  if (v17)
    _Block_release(v17);
  v18 = *(const void **)(v15 + 32);
  if (v18)
    CFRelease(v18);
  xpc_release(*(xpc_object_t *)(v15 + 16));
  *(_QWORD *)(v15 + 16) = 0;
  v19 = *(std::__shared_weak_count **)(v15 + 8);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

uint64_t _ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(uint64_t a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(const void **)(a1 + 40);
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 40);
  if (v2)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

